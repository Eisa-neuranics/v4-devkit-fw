
MCG_Rev4.05_BLE_USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016af8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d0c  08016c38  08016c38  00017c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018944  08018944  00019944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801894c  0801894c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018950  08018950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000180  20000008  08018954  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000188  08018ad4  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001c0  08018b09  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c9c  200001d4  08018b1a  0001a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002e70  08018b1a  0001ae70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001bf57  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001c000  2**2
                  ALLOC
 14 .MB_MEM2      00001d73  200301e4  08018b1a  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00048332  00000000  00000000  0001bf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a18b  00000000  00000000  000642b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d48  00000000  00000000  0006e448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002eff  00000000  00000000  00072190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003711a  00000000  00000000  0007508f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00051141  00000000  00000000  000ac1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001118a7  00000000  00000000  000fd2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020eb91  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010a4c  00000000  00000000  0020ebd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000006f  00000000  00000000  0021f620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08016c20 	.word	0x08016c20

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08016c20 	.word	0x08016c20

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <ADS1293_Init>:
//  DESCRIPTION:
//  Configures the assigned interface to function as a SPI port and
//  initializes it.
//------------------------------------------------------------------------------
void ADS1293_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	ENABLE_RSTB_ADS;			// Reset ADS
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a78:	619a      	str	r2, [r3, #24]
	HAL_Delay (25);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f001 fc78 	bl	8002370 <HAL_Delay>
	DISABLE_RSTB_ADS;			// Release Reset pin
 8000a80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a84:	2204      	movs	r2, #4
 8000a86:	619a      	str	r2, [r3, #24]
	HAL_Delay (100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f001 fc71 	bl	8002370 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_CONFIG_REG			, ADS_STOP );
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f87f 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000a96:	2019      	movs	r0, #25
 8000a98:	f001 fc6a 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_OSC_CN_REG			, 0x04 );				// Use external crystal and feed the internal oscillator's output to the digital.
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	2012      	movs	r0, #18
 8000aa0:	f000 f878 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f001 fc63 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH1_CN_REG	, 0x11 );				// CH1 is routed to: N = IN1 , P = IN2
 8000aaa:	2111      	movs	r1, #17
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f871 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f001 fc5c 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH3_CN_REG	, 0x2E );				// CH3 is routed to: N = IN6 , P = IN5   0x2E	0x35
 8000ab8:	212e      	movs	r1, #46	@ 0x2e
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f86a 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ac0:	2019      	movs	r0, #25
 8000ac2:	f001 fc55 	bl	8002370 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_RLD_CN_REG			, 0x03 );				// 0x04: RLD amplifier powered down, 0x03: Right-leg drive output connected to IN3
 8000ac6:	2103      	movs	r1, #3
 8000ac8:	200c      	movs	r0, #12
 8000aca:	f000 f863 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ace:	2019      	movs	r0, #25
 8000ad0:	f001 fc4e 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CMDET_EN_REG		, 0x03 );				// 0x04: RLD amplifier powered down
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 f85c 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000adc:	2019      	movs	r0, #25
 8000ade:	f001 fc47 	bl	8002370 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_R2_RATE_REG		, R2_5 );				// Configures the R2 decimation rate as 5 for all channels.
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	2021      	movs	r0, #33	@ 0x21
 8000ae6:	f000 f855 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aea:	2019      	movs	r0, #25
 8000aec:	f001 fc40 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE1_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 1. (853 sps, 175 Hz)
 8000af0:	2104      	movs	r1, #4
 8000af2:	2022      	movs	r0, #34	@ 0x22
 8000af4:	f000 f84e 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000af8:	2019      	movs	r0, #25
 8000afa:	f001 fc39 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE2_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000afe:	2104      	movs	r1, #4
 8000b00:	2023      	movs	r0, #35	@ 0x23
 8000b02:	f000 f847 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b06:	2019      	movs	r0, #25
 8000b08:	f001 fc32 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE3_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	2024      	movs	r0, #36	@ 0x24
 8000b10:	f000 f840 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b14:	2019      	movs	r0, #25
 8000b16:	f001 fc2b 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_DRDYB_SRC_REG		, 0x08 );				// Data Ready Pin Source CH1 ECG 0x08
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	2027      	movs	r0, #39	@ 0x27
 8000b1e:	f000 f839 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b22:	2019      	movs	r0, #25
 8000b24:	f001 fc24 	bl	8002370 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CH_CNFG_REG		, 0x50 );				// Channel for Loop Read Back: CH1 and CH2
 8000b28:	2150      	movs	r1, #80	@ 0x50
 8000b2a:	202f      	movs	r0, #47	@ 0x2f
 8000b2c:	f000 f832 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b30:	2019      	movs	r0, #25
 8000b32:	f001 fc1d 	bl	8002370 <HAL_Delay>
	//ADS1293_SPIWriteReg( ADS1293_DIS_EFILTER_REG	, 0x05 );				// Channel for Loop Read Back: CH1 and CH2
	//HAL_Delay (25);

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <ADS1293_SPIReadReg>:
//  DESCRIPTION:
//  Reads a single configuration register at address "addr" and returns the
//  value read.
//------------------------------------------------------------------------------
uint8_t ADS1293_SPIReadReg(uint8_t addr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	TxData[0] = addr | ADS1293_READ_BIT;											// register address
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b50:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	705a      	strb	r2, [r3, #1]

	ENABLE_CS; 												// CS enable
 8000b58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b5c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000b60:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2,100);								// Send it, receive it
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2302      	movs	r3, #2
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b6a:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b6c:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <ADS1293_SPIReadReg+0x54>)
 8000b6e:	f008 fea3 	bl	80098b8 <HAL_SPI_TransmitReceive>
	DISABLE_CS; 											// CS disable
 8000b72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b76:	2208      	movs	r2, #8
 8000b78:	619a      	str	r2, [r3, #24]
#ifdef ADS_DEBUG_EN
	DIAG(">>> Read Reg. -> [ Address= %0X, Value= %0X ]\r\n", addr, RxData[1]);				// Send DBG
	HAL_Delay(50);
#endif

	return RxData[1];
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001f0 	.word	0x200001f0
 8000b8c:	200001fc 	.word	0x200001fc
 8000b90:	20000fa8 	.word	0x20000fa8

08000b94 <ADS1293_SPIWriteReg>:
//
//  DESCRIPTION:
//  Writes "value" to a single configuration register at address "addr".
//------------------------------------------------------------------------------
void ADS1293_SPIWriteReg(uint8_t addr, uint8_t value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
	TxData[0] = addr & ADS1293_WRITE_BIT;											// register address
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bae:	701a      	strb	r2, [r3, #0]
	TxData[1] = value;
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	7053      	strb	r3, [r2, #1]

	ENABLE_CS; 												// CS enable
 8000bb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bba:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000bbe:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, TxData, 2,100);						// Send it
 8000bc0:	2364      	movs	r3, #100	@ 0x64
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4905      	ldr	r1, [pc, #20]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <ADS1293_SPIWriteReg+0x4c>)
 8000bc8:	f008 fd01 	bl	80095ce <HAL_SPI_Transmit>
	DISABLE_CS; 											// CS disable
 8000bcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd0:	2208      	movs	r2, #8
 8000bd2:	619a      	str	r2, [r3, #24]
	#ifdef ADS_DEBUG_EN
		DIAG(">>>Write Reg. -> [ Address= %0X, Value= %0X ]\r\n",addr, value);				// Send DBG
		HAL_Delay(50);
	#endif

}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001f0 	.word	0x200001f0
 8000be0:	20000fa8 	.word	0x20000fa8

08000be4 <ADS1293_SPIStreamReadReg>:
//  Data Loop Register read is extended "count+1" times where "count" is number of source bytes
//  enabled in CH_CNFG. Data read are deposited sequentially starting at address "buffer"
//  until "count" bytes have been read.
//------------------------------------------------------------------------------
void ADS1293_SPIStreamReadReg(uint8_t *buffer, uint8_t count)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	TxData[0] = ADS1293_READ_BIT | ADS1293_DATA_LOOP_REG;											// register address
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf2:	22d0      	movs	r2, #208	@ 0xd0
 8000bf4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00; TxData[2] = 0x00; TxData[3] = 0x00; TxData[4] = 0x00; TxData[5] = 0x00; TxData[6] = 0x00; TxData[7] = 0x00; TxData[8] = 0x00; TxData[9] = 0x00;	// write dummy data to read
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	705a      	strb	r2, [r3, #1]
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	709a      	strb	r2, [r3, #2]
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	70da      	strb	r2, [r3, #3]
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	711a      	strb	r2, [r3, #4]
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	715a      	strb	r2, [r3, #5]
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	719a      	strb	r2, [r3, #6]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	71da      	strb	r2, [r3, #7]
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	721a      	strb	r2, [r3, #8]
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	725a      	strb	r2, [r3, #9]

	ENABLE_CS; 																						// CS enable
 8000c2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c30:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c34:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, (uint8_t *)buffer, ( count + 1 ), 100);					// Send it, receive it
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2264      	movs	r2, #100	@ 0x64
 8000c40:	9200      	str	r2, [sp, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4905      	ldr	r1, [pc, #20]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c46:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <ADS1293_SPIStreamReadReg+0x7c>)
 8000c48:	f008 fe36 	bl	80098b8 <HAL_SPI_TransmitReceive>
	DISABLE_CS;
 8000c4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c50:	2208      	movs	r2, #8
 8000c52:	619a      	str	r2, [r3, #24]

	#ifdef ADS_DEBUG_EN
		DIAG(">>> Stream read. -> [ Address= %0X, Value= %0X - %0X - %0X - %0X ]\r\n", ADS1293_DATA_LOOP_REG, buffer[0], buffer[1], buffer[2], buffer[3] );				// Send DBG
		HAL_Delay(50);
	#endif
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001f0 	.word	0x200001f0
 8000c60:	20000fa8 	.word	0x20000fa8

08000c64 <AFE_Init>:
 uint8_t SpiTxData[10], Temp_buff_count, Output_buff_count;
 //------------------------------------------------------------------------------------------//
 //                                        Initialisation                                    //
 //------------------------------------------------------------------------------------------//
 void AFE_Init (void)
 {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

	tsCmd.ECG 		= false;
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <AFE_Init+0x38>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	761a      	strb	r2, [r3, #24]
	tsCmd.ECG_N50 	= true;
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <AFE_Init+0x38>)
 8000c70:	2201      	movs	r2, #1
 8000c72:	765a      	strb	r2, [r3, #25]
	tsCmd.ECG_HPF	= true;
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <AFE_Init+0x38>)
 8000c76:	2201      	movs	r2, #1
 8000c78:	769a      	strb	r2, [r3, #26]

	tsCmd.MCG		= true;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <AFE_Init+0x38>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	76da      	strb	r2, [r3, #27]
	tsCmd.MCG_N50	= true;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <AFE_Init+0x38>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	771a      	strb	r2, [r3, #28]
	tsCmd.MCG_HPF	= true;
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <AFE_Init+0x38>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	775a      	strb	r2, [r3, #29]

 	DIAG ("\t\tAFE initialised\r\n");
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <AFE_Init+0x3c>)
 8000c8e:	f001 fbfb 	bl	8002488 <DIAG>
 	HAL_Delay (10);
 8000c92:	200a      	movs	r0, #10
 8000c94:	f001 fb6c 	bl	8002370 <HAL_Delay>
 }
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000eb4 	.word	0x20000eb4
 8000ca0:	08016c38 	.word	0x08016c38
 8000ca4:	00000000 	.word	0x00000000

08000ca8 <AFE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void AFE_Control ( void )
 {
 8000ca8:	b598      	push	{r3, r4, r7, lr}
 8000caa:	af00      	add	r7, sp, #0
 	  switch (eAFE_STATE)
 8000cac:	4b9e      	ldr	r3, [pc, #632]	@ (8000f28 <AFE_Control+0x280>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d813      	bhi.n	8000cdc <AFE_Control+0x34>
 8000cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8000cbc <AFE_Control+0x14>)
 8000cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cba:	bf00      	nop
 8000cbc:	08000ce5 	.word	0x08000ce5
 8000cc0:	08000d0b 	.word	0x08000d0b
 8000cc4:	08000d17 	.word	0x08000d17
 8000cc8:	08000d3d 	.word	0x08000d3d
 8000ccc:	08000d61 	.word	0x08000d61
 8000cd0:	08000d8f 	.word	0x08000d8f
 8000cd4:	08000ff1 	.word	0x08000ff1
 8000cd8:	08000ff9 	.word	0x08000ff9
 	  	  default:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE STATE_DEFAULT\r\n");
 		  	  #endif

 	  	    eAFE_STATE = AFE_STATE_RESET;
 8000cdc:	4b92      	ldr	r3, [pc, #584]	@ (8000f28 <AFE_Control+0x280>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
 	  		break;
 8000ce2:	e18d      	b.n	8001000 <AFE_Control+0x358>

 	  	  case AFE_STATE_RESET:
 			  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_RESET\r\n");
 			  #endif
 	  		  ENABLE_RSTB_ADS; 											// Pull RESET low
 8000ce4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ce8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000cec:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(5); 											// Wait for a brief period
 8000cee:	2005      	movs	r0, #5
 8000cf0:	f001 fb3e 	bl	8002370 <HAL_Delay>
 	  		  DISABLE_RSTB_ADS; 										// Release RESET
 8000cf4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(25); 											// Wait for a brief period
 8000cfc:	2019      	movs	r0, #25
 8000cfe:	f001 fb37 	bl	8002370 <HAL_Delay>

 	  	      eAFE_STATE = AFE_STATE_INIT;
 8000d02:	4b89      	ldr	r3, [pc, #548]	@ (8000f28 <AFE_Control+0x280>)
 8000d04:	2201      	movs	r2, #1
 8000d06:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d08:	e17a      	b.n	8001000 <AFE_Control+0x358>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_INIT:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_INIT\r\n");
 			  #endif
 		  	  ADS1293_Init();
 8000d0a:	f7ff feaf 	bl	8000a6c <ADS1293_Init>

 		  	  eAFE_STATE = AFE_STATE_ID;
 8000d0e:	4b86      	ldr	r3, [pc, #536]	@ (8000f28 <AFE_Control+0x280>)
 8000d10:	2202      	movs	r2, #2
 8000d12:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d14:	e174      	b.n	8001000 <AFE_Control+0x358>
 	  	  case AFE_STATE_ID:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_READ_DEVICE_ID\r\n");
 			  #endif

 	  		  u8temp = ADS1293_SPIReadReg(ADS1293_REVID_REG);
 8000d16:	2040      	movs	r0, #64	@ 0x40
 8000d18:	f7ff ff10 	bl	8000b3c <ADS1293_SPIReadReg>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b82      	ldr	r3, [pc, #520]	@ (8000f2c <AFE_Control+0x284>)
 8000d22:	701a      	strb	r2, [r3, #0]
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> DEVICE_ID = [%X] \r\n", u8temp );
 	  		  	  HAL_Delay(1000);
        	  #endif

 	  		  if ( u8temp == ADS1293_ID )
 8000d24:	4b81      	ldr	r3, [pc, #516]	@ (8000f2c <AFE_Control+0x284>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d103      	bne.n	8000d34 <AFE_Control+0x8c>
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_START ;		//ADS_STATE_START ADS_STATE_ID
 8000d2c:	4b7e      	ldr	r3, [pc, #504]	@ (8000f28 <AFE_Control+0x280>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	701a      	strb	r2, [r3, #0]
 	  		  else
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 	  		  }

 	  		  break;
 8000d32:	e165      	b.n	8001000 <AFE_Control+0x358>
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 8000d34:	4b7c      	ldr	r3, [pc, #496]	@ (8000f28 <AFE_Control+0x280>)
 8000d36:	2207      	movs	r2, #7
 8000d38:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d3a:	e161      	b.n	8001000 <AFE_Control+0x358>
 	  	  case AFE_STATE_START:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> AFE_START_CONVERSION\r\n");
 			  #endif

 		  	  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff ff28 	bl	8000b94 <ADS1293_SPIWriteReg>
 		  	  HAL_Delay(50);
 8000d44:	2032      	movs	r0, #50	@ 0x32
 8000d46:	f001 fb13 	bl	8002370 <HAL_Delay>
 	  		  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff21 	bl	8000b94 <ADS1293_SPIWriteReg>
 	  		  HAL_Delay(50);
 8000d52:	2032      	movs	r0, #50	@ 0x32
 8000d54:	f001 fb0c 	bl	8002370 <HAL_Delay>

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d58:	4b73      	ldr	r3, [pc, #460]	@ (8000f28 <AFE_Control+0x280>)
 8000d5a:	2204      	movs	r2, #4
 8000d5c:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d5e:	e14f      	b.n	8001000 <AFE_Control+0x358>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_READ_DATA:


 	  		  // Check if DRDY pin is triggered, then start reading data.
 	  		  if (ADS.DRDY == true)
 8000d60:	4b73      	ldr	r3, [pc, #460]	@ (8000f30 <AFE_Control+0x288>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d10d      	bne.n	8000d86 <AFE_Control+0xde>
 	  		  {
				 #ifdef AFE_DEBUG_EN
						  DIAG(">>> AFE_READ_DATA\r\n");
				 #endif
				// Each time we sample from AFE, sample forom IMU too
 	  			  tsTimer.bImuFlag = true;
 8000d6a:	4b72      	ldr	r3, [pc, #456]	@ (8000f34 <AFE_Control+0x28c>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	70da      	strb	r2, [r3, #3]

 	  			  ADS.DRDY = false;
 8000d70:	4b6f      	ldr	r3, [pc, #444]	@ (8000f30 <AFE_Control+0x288>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	701a      	strb	r2, [r3, #0]
 	  			  ADS1293_SPIStreamReadReg( SpiRxData, 3 );
 8000d76:	2103      	movs	r1, #3
 8000d78:	486f      	ldr	r0, [pc, #444]	@ (8000f38 <AFE_Control+0x290>)
 8000d7a:	f7ff ff33 	bl	8000be4 <ADS1293_SPIStreamReadReg>

 	  			  eAFE_STATE = AFE_STATE_PROCESS_DATA;
 8000d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8000f28 <AFE_Control+0x280>)
 8000d80:	2205      	movs	r2, #5
 8000d82:	701a      	strb	r2, [r3, #0]
 	  		  }
 	  		  else
 	  		  {
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 	  		  }
 	  		  break;
 8000d84:	e13c      	b.n	8001000 <AFE_Control+0x358>
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d86:	4b68      	ldr	r3, [pc, #416]	@ (8000f28 <AFE_Control+0x280>)
 8000d88:	2204      	movs	r2, #4
 8000d8a:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d8c:	e138      	b.n	8001000 <AFE_Control+0x358>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_PROCESS_DATA:

 	  		  MCG.Input = (int32_t)( (SpiRxData[1] << 16) | (uint16_t)(SpiRxData[2] << 8) | SpiRxData[3]);
 8000d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8000f38 <AFE_Control+0x290>)
 8000d90:	785b      	ldrb	r3, [r3, #1]
 8000d92:	041b      	lsls	r3, r3, #16
 8000d94:	4a68      	ldr	r2, [pc, #416]	@ (8000f38 <AFE_Control+0x290>)
 8000d96:	7892      	ldrb	r2, [r2, #2]
 8000d98:	0212      	lsls	r2, r2, #8
 8000d9a:	b292      	uxth	r2, r2
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	4a66      	ldr	r2, [pc, #408]	@ (8000f38 <AFE_Control+0x290>)
 8000da0:	78d2      	ldrb	r2, [r2, #3]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	4a65      	ldr	r2, [pc, #404]	@ (8000f3c <AFE_Control+0x294>)
 8000da6:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
 	  		  MCG.Vin = ( 2.4 * ( ( (2.0 * (double)MCG.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8000daa:	4b64      	ldr	r3, [pc, #400]	@ (8000f3c <AFE_Control+0x294>)
 8000dac:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fb8f 	bl	80004d4 <__aeabi_i2d>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	f7ff fa3f 	bl	800023c <__adddf3>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	a354      	add	r3, pc, #336	@ (adr r3, 8000f18 <AFE_Control+0x270>)
 8000dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dcc:	f7ff fd16 	bl	80007fc <__aeabi_ddiv>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 0200 	mov.w	r2, #0
 8000ddc:	4b58      	ldr	r3, [pc, #352]	@ (8000f40 <AFE_Control+0x298>)
 8000dde:	f7ff fa2b 	bl	8000238 <__aeabi_dsub>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4610      	mov	r0, r2
 8000de8:	4619      	mov	r1, r3
 8000dea:	a34d      	add	r3, pc, #308	@ (adr r3, 8000f20 <AFE_Control+0x278>)
 8000dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df0:	f7ff fbda 	bl	80005a8 <__aeabi_dmul>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4610      	mov	r0, r2
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	f04f 0200 	mov.w	r2, #0
 8000e00:	4b50      	ldr	r3, [pc, #320]	@ (8000f44 <AFE_Control+0x29c>)
 8000e02:	f7ff fcfb 	bl	80007fc <__aeabi_ddiv>
 8000e06:	4602      	mov	r2, r0
 8000e08:	460b      	mov	r3, r1
 8000e0a:	4610      	mov	r0, r2
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f7ff fddd 	bl	80009cc <__aeabi_d2f>
 8000e12:	4603      	mov	r3, r0
 8000e14:	4a49      	ldr	r2, [pc, #292]	@ (8000f3c <AFE_Control+0x294>)
 8000e16:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
 	  		  MCG.Raw[Temp_buff_count] = (int)(MCG.Vin * 1000000);
 8000e1a:	4b48      	ldr	r3, [pc, #288]	@ (8000f3c <AFE_Control+0x294>)
 8000e1c:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 8000e20:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000f48 <AFE_Control+0x2a0>
 8000e24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e28:	4b48      	ldr	r3, [pc, #288]	@ (8000f4c <AFE_Control+0x2a4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e32:	ee17 1a90 	vmov	r1, s15
 8000e36:	4b41      	ldr	r3, [pc, #260]	@ (8000f3c <AFE_Control+0x294>)
 8000e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  MCG.Filtered [Temp_buff_count] = IIR_MCG_BPF_50_60Hz (Temp_buff_count);
 8000e3c:	4b43      	ldr	r3, [pc, #268]	@ (8000f4c <AFE_Control+0x2a4>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4a42      	ldr	r2, [pc, #264]	@ (8000f4c <AFE_Control+0x2a4>)
 8000e42:	7812      	ldrb	r2, [r2, #0]
 8000e44:	4614      	mov	r4, r2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 faba 	bl	80013c0 <IIR_MCG_BPF_50_60Hz>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	493b      	ldr	r1, [pc, #236]	@ (8000f3c <AFE_Control+0x294>)
 8000e50:	f104 030e 	add.w	r3, r4, #14
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	440b      	add	r3, r1
 8000e58:	605a      	str	r2, [r3, #4]

 	  		  MCG.u8TxData[u8McgDataLen++] = ( (  		MCG.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 8000e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f4c <AFE_Control+0x2a4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4a37      	ldr	r2, [pc, #220]	@ (8000f3c <AFE_Control+0x294>)
 8000e60:	330e      	adds	r3, #14
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	1218      	asrs	r0, r3, #8
 8000e6a:	4b39      	ldr	r3, [pc, #228]	@ (8000f50 <AFE_Control+0x2a8>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	1c5a      	adds	r2, r3, #1
 8000e70:	b2d1      	uxtb	r1, r2
 8000e72:	4a37      	ldr	r2, [pc, #220]	@ (8000f50 <AFE_Control+0x2a8>)
 8000e74:	7011      	strb	r1, [r2, #0]
 8000e76:	4619      	mov	r1, r3
 8000e78:	b2c2      	uxtb	r2, r0
 8000e7a:	4b30      	ldr	r3, [pc, #192]	@ (8000f3c <AFE_Control+0x294>)
 8000e7c:	440b      	add	r3, r1
 8000e7e:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
 	  		  MCG.u8TxData[u8McgDataLen++] = ( (uint8_t) MCG.Filtered [Temp_buff_count] & 0x00FF );
 8000e82:	4b32      	ldr	r3, [pc, #200]	@ (8000f4c <AFE_Control+0x2a4>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	4a2d      	ldr	r2, [pc, #180]	@ (8000f3c <AFE_Control+0x294>)
 8000e88:	330e      	adds	r3, #14
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	4413      	add	r3, r2
 8000e8e:	6858      	ldr	r0, [r3, #4]
 8000e90:	4b2f      	ldr	r3, [pc, #188]	@ (8000f50 <AFE_Control+0x2a8>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	b2d1      	uxtb	r1, r2
 8000e98:	4a2d      	ldr	r2, [pc, #180]	@ (8000f50 <AFE_Control+0x2a8>)
 8000e9a:	7011      	strb	r1, [r2, #0]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	b2c2      	uxtb	r2, r0
 8000ea0:	4b26      	ldr	r3, [pc, #152]	@ (8000f3c <AFE_Control+0x294>)
 8000ea2:	440b      	add	r3, r1
 8000ea4:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

 			  #ifdef DATA_DEBUG_EN
 				  if (tsCmd.ECG == true && tsCmd.MCG == true)
 8000ea8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f54 <AFE_Control+0x2ac>)
 8000eaa:	7e1b      	ldrb	r3, [r3, #24]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d11a      	bne.n	8000ee6 <AFE_Control+0x23e>
 8000eb0:	4b28      	ldr	r3, [pc, #160]	@ (8000f54 <AFE_Control+0x2ac>)
 8000eb2:	7edb      	ldrb	r3, [r3, #27]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d116      	bne.n	8000ee6 <AFE_Control+0x23e>
 				  {
 					 tsDebug.i16TxECG = ECG.Filtered [Temp_buff_count];
 8000eb8:	4b24      	ldr	r3, [pc, #144]	@ (8000f4c <AFE_Control+0x2a4>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4a26      	ldr	r2, [pc, #152]	@ (8000f58 <AFE_Control+0x2b0>)
 8000ebe:	330e      	adds	r3, #14
 8000ec0:	009b      	lsls	r3, r3, #2
 8000ec2:	4413      	add	r3, r2
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	4b24      	ldr	r3, [pc, #144]	@ (8000f5c <AFE_Control+0x2b4>)
 8000eca:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
 					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000ece:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <AFE_Control+0x2a4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8000f3c <AFE_Control+0x294>)
 8000ed4:	330e      	adds	r3, #14
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	4b1f      	ldr	r3, [pc, #124]	@ (8000f5c <AFE_Control+0x2b4>)
 8000ee0:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000ee4:	e05a      	b.n	8000f9c <AFE_Control+0x2f4>
 				  }
 				  else if (tsCmd.ECG == true && tsCmd.MCG == false )
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <AFE_Control+0x2ac>)
 8000ee8:	7e1b      	ldrb	r3, [r3, #24]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d138      	bne.n	8000f60 <AFE_Control+0x2b8>
 8000eee:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <AFE_Control+0x2ac>)
 8000ef0:	7edb      	ldrb	r3, [r3, #27]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d134      	bne.n	8000f60 <AFE_Control+0x2b8>
 				  {
  					 tsDebug.i16TxECG = ECG.Filtered [Temp_buff_count];
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <AFE_Control+0x2a4>)
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	4a17      	ldr	r2, [pc, #92]	@ (8000f58 <AFE_Control+0x2b0>)
 8000efc:	330e      	adds	r3, #14
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	4413      	add	r3, r2
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	b21a      	sxth	r2, r3
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <AFE_Control+0x2b4>)
 8000f08:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
  					 tsDebug.i16TxMCG = 0x00;
 8000f0c:	4b13      	ldr	r3, [pc, #76]	@ (8000f5c <AFE_Control+0x2b4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000f14:	e042      	b.n	8000f9c <AFE_Control+0x2f4>
 8000f16:	bf00      	nop
 8000f18:	00000000 	.word	0x00000000
 8000f1c:	41686a00 	.word	0x41686a00
 8000f20:	33333333 	.word	0x33333333
 8000f24:	40033333 	.word	0x40033333
 8000f28:	20000206 	.word	0x20000206
 8000f2c:	2000085e 	.word	0x2000085e
 8000f30:	20000208 	.word	0x20000208
 8000f34:	20001150 	.word	0x20001150
 8000f38:	20000860 	.word	0x20000860
 8000f3c:	20000420 	.word	0x20000420
 8000f40:	3ff00000 	.word	0x3ff00000
 8000f44:	400c0000 	.word	0x400c0000
 8000f48:	49742400 	.word	0x49742400
 8000f4c:	2000086a 	.word	0x2000086a
 8000f50:	2000085f 	.word	0x2000085f
 8000f54:	20000eb4 	.word	0x20000eb4
 8000f58:	2000020c 	.word	0x2000020c
 8000f5c:	20000ba4 	.word	0x20000ba4
 				  }

 				  else if (tsCmd.ECG == false && tsCmd.MCG == true )
 8000f60:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <AFE_Control+0x35c>)
 8000f62:	7e1b      	ldrb	r3, [r3, #24]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d119      	bne.n	8000f9c <AFE_Control+0x2f4>
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <AFE_Control+0x35c>)
 8000f6a:	7edb      	ldrb	r3, [r3, #27]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d115      	bne.n	8000f9c <AFE_Control+0x2f4>
 				  {
  					 tsDebug.i16TxECG = MCG.Filtered [Temp_buff_count];
 8000f70:	4b25      	ldr	r3, [pc, #148]	@ (8001008 <AFE_Control+0x360>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4a25      	ldr	r2, [pc, #148]	@ (800100c <AFE_Control+0x364>)
 8000f76:	330e      	adds	r3, #14
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	4413      	add	r3, r2
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <AFE_Control+0x368>)
 8000f82:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <AFE_Control+0x360>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	4a20      	ldr	r2, [pc, #128]	@ (800100c <AFE_Control+0x364>)
 8000f8c:	330e      	adds	r3, #14
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	b21a      	sxth	r2, r3
 8000f96:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <AFE_Control+0x368>)
 8000f98:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 				  }
 				 tsDebug.bReleaseAFEData= true;
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <AFE_Control+0x368>)
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264
 			  #endif


 	  		  Temp_buff_count++;		if (Temp_buff_count  ==  15 ) 	{ Temp_buff_count = 0; }
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <AFE_Control+0x360>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <AFE_Control+0x360>)
 8000fae:	701a      	strb	r2, [r3, #0]
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <AFE_Control+0x360>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d102      	bne.n	8000fbe <AFE_Control+0x316>
 8000fb8:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <AFE_Control+0x360>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]

 	  		if ( u8McgDataLen >=  BLE_Data_Length )
 8000fbe:	4b15      	ldr	r3, [pc, #84]	@ (8001014 <AFE_Control+0x36c>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000fc4:	d910      	bls.n	8000fe8 <AFE_Control+0x340>
 	  		{

 	  			memcpy ( tsStreamSCG.u8McgTxCpy, MCG.u8TxData, 64 );
 8000fc6:	2240      	movs	r2, #64	@ 0x40
 8000fc8:	4913      	ldr	r1, [pc, #76]	@ (8001018 <AFE_Control+0x370>)
 8000fca:	4814      	ldr	r0, [pc, #80]	@ (800101c <AFE_Control+0x374>)
 8000fcc:	f014 ff27 	bl	8015e1e <memcpy>

 	  			// Copy MCG data length
 	  			MCG.u8TxLen = u8McgDataLen;
 8000fd0:	4b10      	ldr	r3, [pc, #64]	@ (8001014 <AFE_Control+0x36c>)
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	@ (800100c <AFE_Control+0x364>)
 8000fd6:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

 	  			// Enable BLE data transmission
 	  			tsStreamSCG.bReleaseScgData = true;
 8000fda:	4b11      	ldr	r3, [pc, #68]	@ (8001020 <AFE_Control+0x378>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
 	  			u8McgDataLen = 0;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <AFE_Control+0x36c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
 	  		}

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <AFE_Control+0x37c>)
 8000fea:	2204      	movs	r2, #4
 8000fec:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fee:	e007      	b.n	8001000 <AFE_Control+0x358>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_IDLE:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_IDLE\r\n");
 			  #endif
 	  		  eAFE_STATE = AFE_STATE_IDLE;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <AFE_Control+0x37c>)
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ff6:	e003      	b.n	8001000 <AFE_Control+0x358>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_ERROR:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_ADS_ERROR\r\n");
      	 	  #endif
 	  		  eAFE_STATE = AFE_STATE_RESET;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8001024 <AFE_Control+0x37c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ffe:	bf00      	nop
 	  	  }
 }
 8001000:	bf00      	nop
 8001002:	bd98      	pop	{r3, r4, r7, pc}
 8001004:	20000eb4 	.word	0x20000eb4
 8001008:	2000086a 	.word	0x2000086a
 800100c:	20000420 	.word	0x20000420
 8001010:	20000ba4 	.word	0x20000ba4
 8001014:	2000085f 	.word	0x2000085f
 8001018:	2000058c 	.word	0x2000058c
 800101c:	2000073a 	.word	0x2000073a
 8001020:	20000634 	.word	0x20000634
 8001024:	20000206 	.word	0x20000206

08001028 <MCG_StreamDataPack>:
 //***********************************************************************************************
 //***********************************************************************************************

 void MCG_StreamDataPack ( uint8_t *ecgData, uint8_t ecgDataLen, uint8_t *mcgData, uint8_t mcgDataLen, uint8_t *outputString  )
 {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	607a      	str	r2, [r7, #4]
 8001032:	461a      	mov	r2, r3
 8001034:	460b      	mov	r3, r1
 8001036:	72fb      	strb	r3, [r7, #11]
 8001038:	4613      	mov	r3, r2
 800103a:	72bb      	strb	r3, [r7, #10]
 	uint8_t index=0;
 800103c:	2300      	movs	r3, #0
 800103e:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamSCG.u8TxData, 0, sizeof(tsStreamSCG.u8TxData) );
 8001040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001044:	2100      	movs	r1, #0
 8001046:	4845      	ldr	r0, [pc, #276]	@ (800115c <MCG_StreamDataPack+0x134>)
 8001048:	f014 fe46 	bl	8015cd8 <memset>
 	outputString [index++] = ',';
 	memcpy ( outputString + index, mcgData, mcgDataLen );
#endif

#ifndef IMU_ENABLE
	outputString [index++] = 'S';
 800104c:	7dfb      	ldrb	r3, [r7, #23]
 800104e:	1c5a      	adds	r2, r3, #1
 8001050:	75fa      	strb	r2, [r7, #23]
 8001052:	461a      	mov	r2, r3
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	4413      	add	r3, r2
 8001058:	2253      	movs	r2, #83	@ 0x53
 800105a:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'N';
 800105c:	7dfb      	ldrb	r3, [r7, #23]
 800105e:	1c5a      	adds	r2, r3, #1
 8001060:	75fa      	strb	r2, [r7, #23]
 8001062:	461a      	mov	r2, r3
 8001064:	6a3b      	ldr	r3, [r7, #32]
 8001066:	4413      	add	r3, r2
 8001068:	224e      	movs	r2, #78	@ 0x4e
 800106a:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	75fa      	strb	r2, [r7, #23]
 8001072:	461a      	mov	r2, r3
 8001074:	6a3b      	ldr	r3, [r7, #32]
 8001076:	4413      	add	r3, r2
 8001078:	222c      	movs	r2, #44	@ 0x2c
 800107a:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'R';
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	75fa      	strb	r2, [r7, #23]
 8001082:	461a      	mov	r2, r3
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	4413      	add	r3, r2
 8001088:	2252      	movs	r2, #82	@ 0x52
 800108a:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'E';
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	1c5a      	adds	r2, r3, #1
 8001090:	75fa      	strb	r2, [r7, #23]
 8001092:	461a      	mov	r2, r3
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	4413      	add	r3, r2
 8001098:	2245      	movs	r2, #69	@ 0x45
 800109a:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	75fa      	strb	r2, [r7, #23]
 80010a2:	461a      	mov	r2, r3
 80010a4:	6a3b      	ldr	r3, [r7, #32]
 80010a6:	4413      	add	r3, r2
 80010a8:	222c      	movs	r2, #44	@ 0x2c
 80010aa:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ecgDataLen;
 80010ac:	7dfb      	ldrb	r3, [r7, #23]
 80010ae:	1c5a      	adds	r2, r3, #1
 80010b0:	75fa      	strb	r2, [r7, #23]
 80010b2:	461a      	mov	r2, r3
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	4413      	add	r3, r2
 80010b8:	7afa      	ldrb	r2, [r7, #11]
 80010ba:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	1c5a      	adds	r2, r3, #1
 80010c0:	75fa      	strb	r2, [r7, #23]
 80010c2:	461a      	mov	r2, r3
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	4413      	add	r3, r2
 80010c8:	222c      	movs	r2, #44	@ 0x2c
 80010ca:	701a      	strb	r2, [r3, #0]

	memcpy ( outputString + index, ecgData, ecgDataLen );
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	6a3a      	ldr	r2, [r7, #32]
 80010d0:	4413      	add	r3, r2
 80010d2:	7afa      	ldrb	r2, [r7, #11]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f014 fea1 	bl	8015e1e <memcpy>

	index += ecgDataLen;
 80010dc:	7dfa      	ldrb	r2, [r7, #23]
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	4413      	add	r3, r2
 80010e2:	75fb      	strb	r3, [r7, #23]

	outputString [index++] = ',';
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	75fa      	strb	r2, [r7, #23]
 80010ea:	461a      	mov	r2, r3
 80010ec:	6a3b      	ldr	r3, [r7, #32]
 80010ee:	4413      	add	r3, r2
 80010f0:	222c      	movs	r2, #44	@ 0x2c
 80010f2:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'R';
 80010f4:	7dfb      	ldrb	r3, [r7, #23]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	75fa      	strb	r2, [r7, #23]
 80010fa:	461a      	mov	r2, r3
 80010fc:	6a3b      	ldr	r3, [r7, #32]
 80010fe:	4413      	add	r3, r2
 8001100:	2252      	movs	r2, #82	@ 0x52
 8001102:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'M';
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	75fa      	strb	r2, [r7, #23]
 800110a:	461a      	mov	r2, r3
 800110c:	6a3b      	ldr	r3, [r7, #32]
 800110e:	4413      	add	r3, r2
 8001110:	224d      	movs	r2, #77	@ 0x4d
 8001112:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	75fa      	strb	r2, [r7, #23]
 800111a:	461a      	mov	r2, r3
 800111c:	6a3b      	ldr	r3, [r7, #32]
 800111e:	4413      	add	r3, r2
 8001120:	222c      	movs	r2, #44	@ 0x2c
 8001122:	701a      	strb	r2, [r3, #0]
	outputString [index++] = mcgDataLen;
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	75fa      	strb	r2, [r7, #23]
 800112a:	461a      	mov	r2, r3
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	4413      	add	r3, r2
 8001130:	7aba      	ldrb	r2, [r7, #10]
 8001132:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	75fa      	strb	r2, [r7, #23]
 800113a:	461a      	mov	r2, r3
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	4413      	add	r3, r2
 8001140:	222c      	movs	r2, #44	@ 0x2c
 8001142:	701a      	strb	r2, [r3, #0]

	memcpy ( outputString + index, mcgData, mcgDataLen );
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	6a3a      	ldr	r2, [r7, #32]
 8001148:	4413      	add	r3, r2
 800114a:	7aba      	ldrb	r2, [r7, #10]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4618      	mov	r0, r3
 8001150:	f014 fe65 	bl	8015e1e <memcpy>
#endif

 }
 8001154:	bf00      	nop
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000063a 	.word	0x2000063a

08001160 <BLE_Init>:
 uint16_t u16temp;
//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
 void BLE_Init (void)
 {
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0

	 tsBle.App.AccelNotification = false;
 8001164:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <BLE_Init+0x28>)
 8001166:	2200      	movs	r2, #0
 8001168:	71da      	strb	r2, [r3, #7]
	 tsBle.App.GyroNotification = false;
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <BLE_Init+0x28>)
 800116c:	2200      	movs	r2, #0
 800116e:	721a      	strb	r2, [r3, #8]
	 tsBle.App.McgNotification = false;
 8001170:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <BLE_Init+0x28>)
 8001172:	2200      	movs	r2, #0
 8001174:	719a      	strb	r2, [r3, #6]

	 DIAG ("\t\tBLE initialised\r\n");
 8001176:	4805      	ldr	r0, [pc, #20]	@ (800118c <BLE_Init+0x2c>)
 8001178:	f001 f986 	bl	8002488 <DIAG>
	 HAL_Delay (10);
 800117c:	200a      	movs	r0, #10
 800117e:	f001 f8f7 	bl	8002370 <HAL_Delay>
 }
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200011f4 	.word	0x200011f4
 800118c:	08016c4c 	.word	0x08016c4c

08001190 <BLE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void BLE_Control ( void )
 {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af02      	add	r7, sp, #8

	 switch( eBLE_STATE )
 8001196:	4b7e      	ldr	r3, [pc, #504]	@ (8001390 <BLE_Control+0x200>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b0c      	cmp	r3, #12
 800119c:	f200 80f1 	bhi.w	8001382 <BLE_Control+0x1f2>
 80011a0:	a201      	add	r2, pc, #4	@ (adr r2, 80011a8 <BLE_Control+0x18>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011dd 	.word	0x080011dd
 80011ac:	080011e5 	.word	0x080011e5
 80011b0:	080011ed 	.word	0x080011ed
 80011b4:	080011f5 	.word	0x080011f5
 80011b8:	0800120f 	.word	0x0800120f
 80011bc:	08001229 	.word	0x08001229
 80011c0:	08001281 	.word	0x08001281
 80011c4:	0800129f 	.word	0x0800129f
 80011c8:	080012f5 	.word	0x080012f5
 80011cc:	08001313 	.word	0x08001313
 80011d0:	0800134f 	.word	0x0800134f
 80011d4:	08001373 	.word	0x08001373
 80011d8:	0800137b 	.word	0x0800137b
	 {
// ---------------------------------------------

	 case BLE_STATE_RESET:

		 eBLE_STATE = BLE_STATE_INIT;
 80011dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001390 <BLE_Control+0x200>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
		 break;
 80011e2:	e0d2      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_INIT:

		 eBLE_STATE = BLE_STATE_ADV;
 80011e4:	4b6a      	ldr	r3, [pc, #424]	@ (8001390 <BLE_Control+0x200>)
 80011e6:	2202      	movs	r2, #2
 80011e8:	701a      	strb	r2, [r3, #0]
		 break;
 80011ea:	e0ce      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_ADV:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80011ec:	4b68      	ldr	r3, [pc, #416]	@ (8001390 <BLE_Control+0x200>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	701a      	strb	r2, [r3, #0]
		 break;
 80011f2:	e0ca      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_CHECK_CONNECTION:

		 if ( tsBle.Connected )
 80011f4:	4b67      	ldr	r3, [pc, #412]	@ (8001394 <BLE_Control+0x204>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <BLE_Control+0x76>
		 {
			 #if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
			 	 //BLE_SVC_L2CAP_Conn_Update(0x00);
			 #endif
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 80011fe:	4b64      	ldr	r3, [pc, #400]	@ (8001390 <BLE_Control+0x200>)
 8001200:	2205      	movs	r2, #5
 8001202:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
		 }
		 break;
 8001204:	e0c1      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 8001206:	4b62      	ldr	r3, [pc, #392]	@ (8001390 <BLE_Control+0x200>)
 8001208:	2203      	movs	r2, #3
 800120a:	701a      	strb	r2, [r3, #0]
		 break;
 800120c:	e0bd      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_CONNECTED:
		 if ( tsBle.Connected )
 800120e:	4b61      	ldr	r3, [pc, #388]	@ (8001394 <BLE_Control+0x204>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <BLE_Control+0x90>
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001218:	4b5d      	ldr	r3, [pc, #372]	@ (8001390 <BLE_Control+0x200>)
 800121a:	2205      	movs	r2, #5
 800121c:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_ADV;
		 }
		 break;
 800121e:	e0b4      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_ADV;
 8001220:	4b5b      	ldr	r3, [pc, #364]	@ (8001390 <BLE_Control+0x200>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
		 break;
 8001226:	e0b0      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_SCG:

		 if ( tsBle.App.McgNotification )
 8001228:	4b5a      	ldr	r3, [pc, #360]	@ (8001394 <BLE_Control+0x204>)
 800122a:	799b      	ldrb	r3, [r3, #6]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d023      	beq.n	8001278 <BLE_Control+0xe8>
		 {
			 if ( tsStreamSCG.bReleaseScgData == true )
 8001230:	4b59      	ldr	r3, [pc, #356]	@ (8001398 <BLE_Control+0x208>)
 8001232:	f893 3229 	ldrb.w	r3, [r3, #553]	@ 0x229
 8001236:	2b01      	cmp	r3, #1
 8001238:	d11a      	bne.n	8001270 <BLE_Control+0xe0>
			 {
				 tsStreamSCG.bReleaseScgData = false;
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <BLE_Control+0x208>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
				 MCG_StreamDataPack ( tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8TxData );
 8001242:	4b56      	ldr	r3, [pc, #344]	@ (800139c <BLE_Control+0x20c>)
 8001244:	f893 1202 	ldrb.w	r1, [r3, #514]	@ 0x202
 8001248:	4b54      	ldr	r3, [pc, #336]	@ (800139c <BLE_Control+0x20c>)
 800124a:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 800124e:	4a54      	ldr	r2, [pc, #336]	@ (80013a0 <BLE_Control+0x210>)
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	4a54      	ldr	r2, [pc, #336]	@ (80013a4 <BLE_Control+0x214>)
 8001254:	4853      	ldr	r0, [pc, #332]	@ (80013a4 <BLE_Control+0x214>)
 8001256:	f7ff fee7 	bl	8001028 <MCG_StreamDataPack>
				 // Reset data length
				 MCG.u8TxLen = 0;
 800125a:	4b50      	ldr	r3, [pc, #320]	@ (800139c <BLE_Control+0x20c>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
				 // Set the task for BLE
				 tsBle.App.ScgSetTask = true;
 8001262:	4b4c      	ldr	r3, [pc, #304]	@ (8001394 <BLE_Control+0x204>)
 8001264:	2201      	movs	r2, #1
 8001266:	725a      	strb	r2, [r3, #9]
//				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

				 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 8001268:	4b49      	ldr	r3, [pc, #292]	@ (8001390 <BLE_Control+0x200>)
 800126a:	2206      	movs	r2, #6
 800126c:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
		 }
		 break;
 800126e:	e08c      	b.n	800138a <BLE_Control+0x1fa>
				 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001270:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <BLE_Control+0x200>)
 8001272:	2205      	movs	r2, #5
 8001274:	701a      	strb	r2, [r3, #0]
		 break;
 8001276:	e088      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 8001278:	4b45      	ldr	r3, [pc, #276]	@ (8001390 <BLE_Control+0x200>)
 800127a:	2207      	movs	r2, #7
 800127c:	701a      	strb	r2, [r3, #0]
		 break;
 800127e:	e084      	b.n	800138a <BLE_Control+0x1fa>


	 case BLE_STATE_XFER_SCG_Cmplt:


		 if ( tsBle.SCG_XferComplete )
 8001280:	4b44      	ldr	r3, [pc, #272]	@ (8001394 <BLE_Control+0x204>)
 8001282:	789b      	ldrb	r3, [r3, #2]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <BLE_Control+0x106>
		 {
			 tsBle.SCG_XferComplete = false;
 8001288:	4b42      	ldr	r3, [pc, #264]	@ (8001394 <BLE_Control+0x204>)
 800128a:	2200      	movs	r2, #0
 800128c:	709a      	strb	r2, [r3, #2]

			 // By default the next step is waiting another SCG/MCG data, but if IMU is enabled, so ACCEL would be the next step.
			 eBLE_STATE = BLE_STATE_IDLE;
 800128e:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <BLE_Control+0x200>)
 8001290:	220b      	movs	r2, #11
 8001292:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
		 }
		 break;
 8001294:	e079      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 8001296:	4b3e      	ldr	r3, [pc, #248]	@ (8001390 <BLE_Control+0x200>)
 8001298:	2206      	movs	r2, #6
 800129a:	701a      	strb	r2, [r3, #0]
		 break;
 800129c:	e075      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL:

		 if ( tsBle.App.AccelNotification )
 800129e:	4b3d      	ldr	r3, [pc, #244]	@ (8001394 <BLE_Control+0x204>)
 80012a0:	79db      	ldrb	r3, [r3, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d022      	beq.n	80012ec <BLE_Control+0x15c>
		 {
			 if ( tsStreamIMU.bReleaseAccelData == true )
 80012a6:	4b40      	ldr	r3, [pc, #256]	@ (80013a8 <BLE_Control+0x218>)
 80012a8:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d119      	bne.n	80012e4 <BLE_Control+0x154>
			 {
				 tsStreamIMU.bReleaseAccelData = false;
 80012b0:	4b3d      	ldr	r3, [pc, #244]	@ (80013a8 <BLE_Control+0x218>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
				 IMU_StreamDataPack ( IMU.u8AxTxData, IMU.u8AyTxData, IMU.u8AzTxData, tsStreamIMU.u8TxData );
 80012b8:	4b3c      	ldr	r3, [pc, #240]	@ (80013ac <BLE_Control+0x21c>)
 80012ba:	4a3d      	ldr	r2, [pc, #244]	@ (80013b0 <BLE_Control+0x220>)
 80012bc:	493d      	ldr	r1, [pc, #244]	@ (80013b4 <BLE_Control+0x224>)
 80012be:	483e      	ldr	r0, [pc, #248]	@ (80013b8 <BLE_Control+0x228>)
 80012c0:	f000 fa4a 	bl	8001758 <IMU_StreamDataPack>
				 //Reset data length
				 IMU.u8AxTxLen = 0;
 80012c4:	4b3d      	ldr	r3, [pc, #244]	@ (80013bc <BLE_Control+0x22c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	731a      	strb	r2, [r3, #12]
				 IMU.u8AyTxLen = 0;
 80012ca:	4b3c      	ldr	r3, [pc, #240]	@ (80013bc <BLE_Control+0x22c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	735a      	strb	r2, [r3, #13]
				 IMU.u8AzTxLen = 0;
 80012d0:	4b3a      	ldr	r3, [pc, #232]	@ (80013bc <BLE_Control+0x22c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	739a      	strb	r2, [r3, #14]
				 // Set the task for BLE
				 tsBle.App.AccelSetTask= true;
 80012d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001394 <BLE_Control+0x204>)
 80012d8:	2201      	movs	r2, #1
 80012da:	729a      	strb	r2, [r3, #10]
				 //				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

				 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <BLE_Control+0x200>)
 80012de:	2208      	movs	r2, #8
 80012e0:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_IDLE;
		 }
		 break;
 80012e2:	e052      	b.n	800138a <BLE_Control+0x1fa>
				 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 80012e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001390 <BLE_Control+0x200>)
 80012e6:	2207      	movs	r2, #7
 80012e8:	701a      	strb	r2, [r3, #0]
		 break;
 80012ea:	e04e      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_IDLE;
 80012ec:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <BLE_Control+0x200>)
 80012ee:	220b      	movs	r2, #11
 80012f0:	701a      	strb	r2, [r3, #0]
		 break;
 80012f2:	e04a      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL_Cmplt:

		 if ( tsBle.ACCEL_XferComplete )
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <BLE_Control+0x204>)
 80012f6:	78db      	ldrb	r3, [r3, #3]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <BLE_Control+0x17a>
		 {
			 tsBle.ACCEL_XferComplete = false;
 80012fc:	4b25      	ldr	r3, [pc, #148]	@ (8001394 <BLE_Control+0x204>)
 80012fe:	2200      	movs	r2, #0
 8001300:	70da      	strb	r2, [r3, #3]
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 8001302:	4b23      	ldr	r3, [pc, #140]	@ (8001390 <BLE_Control+0x200>)
 8001304:	2209      	movs	r2, #9
 8001306:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
		 }
		 break;
 8001308:	e03f      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <BLE_Control+0x200>)
 800130c:	2208      	movs	r2, #8
 800130e:	701a      	strb	r2, [r3, #0]
		 break;
 8001310:	e03b      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO:

		 tsStreamIMU.bReleaseGyroData = true;
 8001312:	4b25      	ldr	r3, [pc, #148]	@ (80013a8 <BLE_Control+0x218>)
 8001314:	2201      	movs	r2, #1
 8001316:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
		 if ( tsStreamIMU.bReleaseGyroData == true )
 800131a:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <BLE_Control+0x218>)
 800131c:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 8001320:	2b01      	cmp	r3, #1
 8001322:	d110      	bne.n	8001346 <BLE_Control+0x1b6>
		 {
			 // Pack all the data
			 	IMU.u8GxTxLen = 0;
 8001324:	4b25      	ldr	r3, [pc, #148]	@ (80013bc <BLE_Control+0x22c>)
 8001326:	2200      	movs	r2, #0
 8001328:	73da      	strb	r2, [r3, #15]
			 	IMU.u8GyTxLen = 0;
 800132a:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <BLE_Control+0x22c>)
 800132c:	2200      	movs	r2, #0
 800132e:	741a      	strb	r2, [r3, #16]
			 	IMU.u8GzTxLen = 0;
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <BLE_Control+0x22c>)
 8001332:	2200      	movs	r2, #0
 8001334:	745a      	strb	r2, [r3, #17]

			 tsStreamIMU.bReleaseGyroData = false;
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <BLE_Control+0x218>)
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
			 eBLE_STATE = BLE_STATE_XFER_GYRO_Cmplt;
 800133e:	4b14      	ldr	r3, [pc, #80]	@ (8001390 <BLE_Control+0x200>)
 8001340:	220a      	movs	r2, #10
 8001342:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 8001344:	e021      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <BLE_Control+0x200>)
 8001348:	2209      	movs	r2, #9
 800134a:	701a      	strb	r2, [r3, #0]
		 break;
 800134c:	e01d      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO_Cmplt:

		 tsBle.GYRO_XferComplete = true;
 800134e:	4b11      	ldr	r3, [pc, #68]	@ (8001394 <BLE_Control+0x204>)
 8001350:	2201      	movs	r2, #1
 8001352:	711a      	strb	r2, [r3, #4]
		 if ( tsBle.GYRO_XferComplete )
 8001354:	4b0f      	ldr	r3, [pc, #60]	@ (8001394 <BLE_Control+0x204>)
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d006      	beq.n	800136a <BLE_Control+0x1da>
		 {
			 tsBle.GYRO_XferComplete = false;
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <BLE_Control+0x204>)
 800135e:	2200      	movs	r2, #0
 8001360:	711a      	strb	r2, [r3, #4]
			 eBLE_STATE = BLE_STATE_IDLE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <BLE_Control+0x200>)
 8001364:	220b      	movs	r2, #11
 8001366:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 8001368:	e00f      	b.n	800138a <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <BLE_Control+0x200>)
 800136c:	2209      	movs	r2, #9
 800136e:	701a      	strb	r2, [r3, #0]
		 break;
 8001370:	e00b      	b.n	800138a <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_IDLE:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 8001372:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <BLE_Control+0x200>)
 8001374:	2203      	movs	r2, #3
 8001376:	701a      	strb	r2, [r3, #0]
		 break;
 8001378:	e007      	b.n	800138a <BLE_Control+0x1fa>

	 case BLE_STATE_DISCONNECTED:

		 eBLE_STATE = BLE_STATE_ADV;
 800137a:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <BLE_Control+0x200>)
 800137c:	2202      	movs	r2, #2
 800137e:	701a      	strb	r2, [r3, #0]
		 break;
 8001380:	e003      	b.n	800138a <BLE_Control+0x1fa>

// Unknown state--------------------------------

	 default:

		 eBLE_STATE = BLE_STATE_RESET;
 8001382:	4b03      	ldr	r3, [pc, #12]	@ (8001390 <BLE_Control+0x200>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
		 break;
 8001388:	bf00      	nop

	 }
// ---------------------------------------------

 }
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000086b 	.word	0x2000086b
 8001394:	200011f4 	.word	0x200011f4
 8001398:	20000634 	.word	0x20000634
 800139c:	20000420 	.word	0x20000420
 80013a0:	2000063a 	.word	0x2000063a
 80013a4:	2000073a 	.word	0x2000073a
 80013a8:	20000958 	.word	0x20000958
 80013ac:	2000095e 	.word	0x2000095e
 80013b0:	2000090e 	.word	0x2000090e
 80013b4:	200008c6 	.word	0x200008c6
 80013b8:	2000087e 	.word	0x2000087e
 80013bc:	2000086c 	.word	0x2000086c

080013c0 <IIR_MCG_BPF_50_60Hz>:

//--------------------------------------------------------------------------------------------
//								IIR Bandpass Filter
//--------------------------------------------------------------------------------------------
int32_t IIR_MCG_BPF_50_60Hz ( uint8_t Temp_xyptr )
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]

	float  		convM = 0;
 80013ca:	f04f 0300 	mov.w	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
	float  		conv1M = 0, conv2M = 0;
 80013d0:	f04f 0300 	mov.w	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
	uint8_t 	o = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]



	if (tsCmd.MCG_HPF)
 80013e0:	4b8d      	ldr	r3, [pc, #564]	@ (8001618 <IIR_MCG_BPF_50_60Hz+0x258>)
 80013e2:	7f5b      	ldrb	r3, [r3, #29]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d07e      	beq.n	80014e6 <IIR_MCG_BPF_50_60Hz+0x126>
	{
		//BPF Implementation
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 80013e8:	2300      	movs	r3, #0
 80013ea:	75fb      	strb	r3, [r7, #23]
 80013ec:	e020      	b.n	8001430 <IIR_MCG_BPF_50_60Hz+0x70>
		{
			o= RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80013ee:	7dfa      	ldrb	r2, [r7, #23]
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	4619      	mov	r1, r3
 80013f4:	200f      	movs	r0, #15
 80013f6:	f000 f91b 	bl	8001630 <RecentValueIndex>
 80013fa:	4603      	mov	r3, r0
 80013fc:	73fb      	strb	r3, [r7, #15]
			conv1M +=  b[i] * MCG.Raw[o];
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	4a86      	ldr	r2, [pc, #536]	@ (800161c <IIR_MCG_BPF_50_60Hz+0x25c>)
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	ed93 7a00 	vldr	s14, [r3]
 800140a:	7bfb      	ldrb	r3, [r7, #15]
 800140c:	4a84      	ldr	r2, [pc, #528]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800141a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001426:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 800142a:	7dfb      	ldrb	r3, [r7, #23]
 800142c:	3301      	adds	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d9db      	bls.n	80013ee <IIR_MCG_BPF_50_60Hz+0x2e>
		}

		o=0;
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]

		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 800143a:	2301      	movs	r3, #1
 800143c:	75bb      	strb	r3, [r7, #22]
 800143e:	e03f      	b.n	80014c0 <IIR_MCG_BPF_50_60Hz+0x100>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001440:	7dba      	ldrb	r2, [r7, #22]
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	4619      	mov	r1, r3
 8001446:	200f      	movs	r0, #15
 8001448:	f000 f8f2 	bl	8001630 <RecentValueIndex>
 800144c:	4603      	mov	r3, r0
 800144e:	73fb      	strb	r3, [r7, #15]
			if (tsCmd.MCG_N50) {conv2M += a[i] * MCG.HPF [o];} else {conv2M += a[i] * MCG.Filtered [o];}
 8001450:	4b71      	ldr	r3, [pc, #452]	@ (8001618 <IIR_MCG_BPF_50_60Hz+0x258>)
 8001452:	7f1b      	ldrb	r3, [r3, #28]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d018      	beq.n	800148a <IIR_MCG_BPF_50_60Hz+0xca>
 8001458:	7dbb      	ldrb	r3, [r7, #22]
 800145a:	4a72      	ldr	r2, [pc, #456]	@ (8001624 <IIR_MCG_BPF_50_60Hz+0x264>)
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	ed93 7a00 	vldr	s14, [r3]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	4a6e      	ldr	r2, [pc, #440]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 8001468:	332c      	adds	r3, #44	@ 0x2c
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001484:	edc7 7a06 	vstr	s15, [r7, #24]
 8001488:	e017      	b.n	80014ba <IIR_MCG_BPF_50_60Hz+0xfa>
 800148a:	7dbb      	ldrb	r3, [r7, #22]
 800148c:	4a65      	ldr	r2, [pc, #404]	@ (8001624 <IIR_MCG_BPF_50_60Hz+0x264>)
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4413      	add	r3, r2
 8001492:	ed93 7a00 	vldr	s14, [r3]
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	4a61      	ldr	r2, [pc, #388]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 800149a:	330e      	adds	r3, #14
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	ee07 3a90 	vmov	s15, r3
 80014a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	ed97 7a06 	vldr	s14, [r7, #24]
 80014b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014b6:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 80014ba:	7dbb      	ldrb	r3, [r7, #22]
 80014bc:	3301      	adds	r3, #1
 80014be:	75bb      	strb	r3, [r7, #22]
 80014c0:	7dbb      	ldrb	r3, [r7, #22]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d9bc      	bls.n	8001440 <IIR_MCG_BPF_50_60Hz+0x80>
		}

		MCG.HPF [Temp_xyptr] =  conv1M -  conv2M ;
 80014c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80014ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014d2:	79fb      	ldrb	r3, [r7, #7]
 80014d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014d8:	ee17 1a90 	vmov	r1, s15
 80014dc:	4a50      	ldr	r2, [pc, #320]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 80014de:	332c      	adds	r3, #44	@ 0x2c
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4413      	add	r3, r2
 80014e4:	6059      	str	r1, [r3, #4]
	}

	if (tsCmd.MCG_N50)
 80014e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001618 <IIR_MCG_BPF_50_60Hz+0x258>)
 80014e8:	7f1b      	ldrb	r3, [r3, #28]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d074      	beq.n	80015d8 <IIR_MCG_BPF_50_60Hz+0x218>
	{
		conv1M= 0;		conv2M= 0;
 80014ee:	f04f 0300 	mov.w	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]

		//50 Notch Filter Implementation
		for ( uint8_t i=0 ; i < 3 ; i++ )
 80014fa:	2300      	movs	r3, #0
 80014fc:	757b      	strb	r3, [r7, #21]
 80014fe:	e03d      	b.n	800157c <IIR_MCG_BPF_50_60Hz+0x1bc>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001500:	7d7a      	ldrb	r2, [r7, #21]
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4619      	mov	r1, r3
 8001506:	200f      	movs	r0, #15
 8001508:	f000 f892 	bl	8001630 <RecentValueIndex>
 800150c:	4603      	mov	r3, r0
 800150e:	73fb      	strb	r3, [r7, #15]
			if (tsCmd.MCG_HPF) { conv1M +=  b_N50_60[i] * MCG.HPF[o]; } else { conv1M +=  b_N50_60[i] * MCG.Raw[o]; }
 8001510:	4b41      	ldr	r3, [pc, #260]	@ (8001618 <IIR_MCG_BPF_50_60Hz+0x258>)
 8001512:	7f5b      	ldrb	r3, [r3, #29]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d018      	beq.n	800154a <IIR_MCG_BPF_50_60Hz+0x18a>
 8001518:	7d7b      	ldrb	r3, [r7, #21]
 800151a:	4a43      	ldr	r2, [pc, #268]	@ (8001628 <IIR_MCG_BPF_50_60Hz+0x268>)
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	4a3e      	ldr	r2, [pc, #248]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 8001528:	332c      	adds	r3, #44	@ 0x2c
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	ee07 3a90 	vmov	s15, r3
 8001534:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001538:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001544:	edc7 7a07 	vstr	s15, [r7, #28]
 8001548:	e015      	b.n	8001576 <IIR_MCG_BPF_50_60Hz+0x1b6>
 800154a:	7d7b      	ldrb	r3, [r7, #21]
 800154c:	4a36      	ldr	r2, [pc, #216]	@ (8001628 <IIR_MCG_BPF_50_60Hz+0x268>)
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	ed93 7a00 	vldr	s14, [r3]
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	4a31      	ldr	r2, [pc, #196]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 800155a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156a:	ed97 7a07 	vldr	s14, [r7, #28]
 800156e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001572:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i=0 ; i < 3 ; i++ )
 8001576:	7d7b      	ldrb	r3, [r7, #21]
 8001578:	3301      	adds	r3, #1
 800157a:	757b      	strb	r3, [r7, #21]
 800157c:	7d7b      	ldrb	r3, [r7, #21]
 800157e:	2b02      	cmp	r3, #2
 8001580:	d9be      	bls.n	8001500 <IIR_MCG_BPF_50_60Hz+0x140>
		}

		o=0;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]

		for ( uint8_t i=1 ; i < 3 ; i++ )
 8001586:	2301      	movs	r3, #1
 8001588:	753b      	strb	r3, [r7, #20]
 800158a:	e022      	b.n	80015d2 <IIR_MCG_BPF_50_60Hz+0x212>
		{
			o=RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 800158c:	7d3a      	ldrb	r2, [r7, #20]
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	4619      	mov	r1, r3
 8001592:	200f      	movs	r0, #15
 8001594:	f000 f84c 	bl	8001630 <RecentValueIndex>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
			 conv2M += a_N50_60[i] * MCG.Filtered[o] ;
 800159c:	7d3b      	ldrb	r3, [r7, #20]
 800159e:	4a23      	ldr	r2, [pc, #140]	@ (800162c <IIR_MCG_BPF_50_60Hz+0x26c>)
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	ed93 7a00 	vldr	s14, [r3]
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 80015ac:	330e      	adds	r3, #14
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	ee07 3a90 	vmov	s15, r3
 80015b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=1 ; i < 3 ; i++ )
 80015cc:	7d3b      	ldrb	r3, [r7, #20]
 80015ce:	3301      	adds	r3, #1
 80015d0:	753b      	strb	r3, [r7, #20]
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d9d9      	bls.n	800158c <IIR_MCG_BPF_50_60Hz+0x1cc>
		}

	}

	convM =  conv1M - conv2M ;
 80015d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80015dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80015e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e4:	edc7 7a04 	vstr	s15, [r7, #16]

	if (tsCmd.MCG_HPF == false && tsCmd.MCG_N50 == false)
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <IIR_MCG_BPF_50_60Hz+0x258>)
 80015ea:	7f5b      	ldrb	r3, [r3, #29]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d108      	bne.n	8001602 <IIR_MCG_BPF_50_60Hz+0x242>
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <IIR_MCG_BPF_50_60Hz+0x258>)
 80015f2:	7f1b      	ldrb	r3, [r3, #28]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d104      	bne.n	8001602 <IIR_MCG_BPF_50_60Hz+0x242>
	{
		return MCG.Raw[Temp_xyptr];
 80015f8:	79fb      	ldrb	r3, [r7, #7]
 80015fa:	4a09      	ldr	r2, [pc, #36]	@ (8001620 <IIR_MCG_BPF_50_60Hz+0x260>)
 80015fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001600:	e005      	b.n	800160e <IIR_MCG_BPF_50_60Hz+0x24e>
	}
	else
	{
		return  (int)convM; //(int)conv;
 8001602:	edd7 7a04 	vldr	s15, [r7, #16]
 8001606:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800160a:	ee17 3a90 	vmov	r3, s15
	}

}
 800160e:	4618      	mov	r0, r3
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000eb4 	.word	0x20000eb4
 800161c:	0801860c 	.word	0x0801860c
 8001620:	20000420 	.word	0x20000420
 8001624:	08018618 	.word	0x08018618
 8001628:	08018624 	.word	0x08018624
 800162c:	08018630 	.word	0x08018630

08001630 <RecentValueIndex>:

//--------------------------------------------------------------------------------------------
//						Get buffer position for past values
//--------------------------------------------------------------------------------------------
uint8_t RecentValueIndex ( uint8_t BufferLen, uint8_t BufferPos, uint8_t in_dex )
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
 800163a:	460b      	mov	r3, r1
 800163c:	71bb      	strb	r3, [r7, #6]
 800163e:	4613      	mov	r3, r2
 8001640:	717b      	strb	r3, [r7, #5]
	uint8_t out_xy = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]

	if ( ( BufferPos - in_dex ) <  0 )	{ out_xy = ( BufferLen + BufferPos ) - in_dex; }	// Calculate pointer of the circular buffer for previous values
 8001646:	79ba      	ldrb	r2, [r7, #6]
 8001648:	797b      	ldrb	r3, [r7, #5]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	da06      	bge.n	800165e <RecentValueIndex+0x2e>
 8001650:	79fa      	ldrb	r2, [r7, #7]
 8001652:	79bb      	ldrb	r3, [r7, #6]
 8001654:	4413      	add	r3, r2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	797b      	ldrb	r3, [r7, #5]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	73fb      	strb	r3, [r7, #15]
	if ( ( BufferPos - in_dex ) >= 0 )	{ out_xy = BufferPos - in_dex; }				// Calculate pointer of the circular buffer for previous values
 800165e:	79ba      	ldrb	r2, [r7, #6]
 8001660:	797b      	ldrb	r3, [r7, #5]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b00      	cmp	r3, #0
 8001666:	db03      	blt.n	8001670 <RecentValueIndex+0x40>
 8001668:	79ba      	ldrb	r2, [r7, #6]
 800166a:	797b      	ldrb	r3, [r7, #5]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	73fb      	strb	r3, [r7, #15]

	return out_xy;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
}
 8001672:	4618      	mov	r0, r3
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <IMU_Init>:

#define 	M_PI 			3.14159265358979323846

//----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_Init(I2C_HandleTypeDef *hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af02      	add	r7, sp, #8
 8001686:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set the HW address on IMU to 0x6A
    ADDR_IMU_6A;
 8001688:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <IMU_Init+0xc0>)
 800168a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800168e:	619a      	str	r2, [r3, #24]

    // Enable accelerometer, 104 Hz, 2g
    config[0] = IMU_CTRL1_XL;
 8001690:	2310      	movs	r3, #16
 8001692:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001694:	2340      	movs	r3, #64	@ 0x40
 8001696:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001698:	f107 020c 	add.w	r2, r7, #12
 800169c:	230a      	movs	r3, #10
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2302      	movs	r3, #2
 80016a2:	21d4      	movs	r1, #212	@ 0xd4
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f003 fd19 	bl	80050dc <HAL_I2C_Master_Transmit>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <IMU_Init+0x34>
    {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e041      	b.n	8001738 <IMU_Init+0xb8>
    }

    // Enable gyroscope, 104 Hz, 250 dps
    config[0] = IMU_CTRL2_G;
 80016b4:	2311      	movs	r3, #17
 80016b6:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 80016b8:	2340      	movs	r3, #64	@ 0x40
 80016ba:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 80016bc:	f107 020c 	add.w	r2, r7, #12
 80016c0:	230a      	movs	r3, #10
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2302      	movs	r3, #2
 80016c6:	21d4      	movs	r1, #212	@ 0xd4
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f003 fd07 	bl	80050dc <HAL_I2C_Master_Transmit>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <IMU_Init+0x58>
    {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e02f      	b.n	8001738 <IMU_Init+0xb8>
    }

    // BDU (Block Data Update) enabled
    config[0] = IMU_CTRL3_C;
 80016d8:	2312      	movs	r3, #18
 80016da:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44;
 80016dc:	2344      	movs	r3, #68	@ 0x44
 80016de:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 80016e0:	f107 020c 	add.w	r2, r7, #12
 80016e4:	230a      	movs	r3, #10
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	2302      	movs	r3, #2
 80016ea:	21d4      	movs	r1, #212	@ 0xd4
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f003 fcf5 	bl	80050dc <HAL_I2C_Master_Transmit>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <IMU_Init+0x7c>
    {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e01d      	b.n	8001738 <IMU_Init+0xb8>
    }

    HighPassFilter_Init	( &accelFilter, cutoff_freq, 640 );
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <IMU_Init+0xc4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001708:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001748 <IMU_Init+0xc8>
 800170c:	eeb0 0a67 	vmov.f32	s0, s15
 8001710:	480e      	ldr	r0, [pc, #56]	@ (800174c <IMU_Init+0xcc>)
 8001712:	f000 f8fd 	bl	8001910 <HighPassFilter_Init>
    HighPassFilter_Init	( &gyroFilter , cutoff_freq, 640 );
 8001716:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <IMU_Init+0xc4>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001722:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001748 <IMU_Init+0xc8>
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	4809      	ldr	r0, [pc, #36]	@ (8001750 <IMU_Init+0xd0>)
 800172c:	f000 f8f0 	bl	8001910 <HighPassFilter_Init>

    DIAG ("\t\tIMU initialised\r\n");
 8001730:	4808      	ldr	r0, [pc, #32]	@ (8001754 <IMU_Init+0xd4>)
 8001732:	f000 fea9 	bl	8002488 <DIAG>

    return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	48000400 	.word	0x48000400
 8001744:	20000008 	.word	0x20000008
 8001748:	44200000 	.word	0x44200000
 800174c:	20000b84 	.word	0x20000b84
 8001750:	20000b94 	.word	0x20000b94
 8001754:	08016c60 	.word	0x08016c60

08001758 <IMU_StreamDataPack>:
	//tsSystem.u8Error |= eBus_Error;
}
//--------------------------------------------------------------------------------------------

void IMU_StreamDataPack ( uint8_t *Ax_pData, uint8_t *Ay_pData, uint8_t *Az_pData, uint8_t *outputString   )
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
 	uint8_t index=0;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamIMU.u8TxData, 0, sizeof(tsStreamIMU.u8TxData) );
 800176a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800176e:	2100      	movs	r1, #0
 8001770:	4864      	ldr	r0, [pc, #400]	@ (8001904 <IMU_StreamDataPack+0x1ac>)
 8001772:	f014 fab1 	bl	8015cd8 <memset>

 	outputString [index++] = 'S';
 8001776:	7dfb      	ldrb	r3, [r7, #23]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	75fa      	strb	r2, [r7, #23]
 800177c:	461a      	mov	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	4413      	add	r3, r2
 8001782:	2253      	movs	r2, #83	@ 0x53
 8001784:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp++;				//'N'
 8001786:	4b60      	ldr	r3, [pc, #384]	@ (8001908 <IMU_StreamDataPack+0x1b0>)
 8001788:	795b      	ldrb	r3, [r3, #5]
 800178a:	1c5a      	adds	r2, r3, #1
 800178c:	b2d1      	uxtb	r1, r2
 800178e:	4a5e      	ldr	r2, [pc, #376]	@ (8001908 <IMU_StreamDataPack+0x1b0>)
 8001790:	7151      	strb	r1, [r2, #5]
 8001792:	7dfa      	ldrb	r2, [r7, #23]
 8001794:	1c51      	adds	r1, r2, #1
 8001796:	75f9      	strb	r1, [r7, #23]
 8001798:	4611      	mov	r1, r2
 800179a:	683a      	ldr	r2, [r7, #0]
 800179c:	440a      	add	r2, r1
 800179e:	7013      	strb	r3, [r2, #0]
 	outputString [index++] = ',';
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	1c5a      	adds	r2, r3, #1
 80017a4:	75fa      	strb	r2, [r7, #23]
 80017a6:	461a      	mov	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	222c      	movs	r2, #44	@ 0x2c
 80017ae:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80017b0:	7dfb      	ldrb	r3, [r7, #23]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	75fa      	strb	r2, [r7, #23]
 80017b6:	461a      	mov	r2, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	4413      	add	r3, r2
 80017bc:	2243      	movs	r2, #67	@ 0x43
 80017be:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '1';
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	75fa      	strb	r2, [r7, #23]
 80017c6:	461a      	mov	r2, r3
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	2231      	movs	r2, #49	@ 0x31
 80017ce:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80017d0:	7dfb      	ldrb	r3, [r7, #23]
 80017d2:	1c5a      	adds	r2, r3, #1
 80017d4:	75fa      	strb	r2, [r7, #23]
 80017d6:	461a      	mov	r2, r3
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	222c      	movs	r2, #44	@ 0x2c
 80017de:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 80017e0:	7dfb      	ldrb	r3, [r7, #23]
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	75fa      	strb	r2, [r7, #23]
 80017e6:	461a      	mov	r2, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	4413      	add	r3, r2
 80017ec:	2240      	movs	r2, #64	@ 0x40
 80017ee:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	75fa      	strb	r2, [r7, #23]
 80017f6:	461a      	mov	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	222c      	movs	r2, #44	@ 0x2c
 80017fe:	701a      	strb	r2, [r3, #0]

 	//DIAG( "%d\r", tsStreamSCG.Counter);
 	memcpy ( outputString + index, Ax_pData, 64 );
 8001800:	7dfb      	ldrb	r3, [r7, #23]
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	4413      	add	r3, r2
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	4618      	mov	r0, r3
 800180c:	f014 fb07 	bl	8015e1e <memcpy>
 	index += 64;
 8001810:	7dfb      	ldrb	r3, [r7, #23]
 8001812:	3340      	adds	r3, #64	@ 0x40
 8001814:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	1c5a      	adds	r2, r3, #1
 800181a:	75fa      	strb	r2, [r7, #23]
 800181c:	461a      	mov	r2, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	4413      	add	r3, r2
 8001822:	222c      	movs	r2, #44	@ 0x2c
 8001824:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	75fa      	strb	r2, [r7, #23]
 800182c:	461a      	mov	r2, r3
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	4413      	add	r3, r2
 8001832:	2243      	movs	r2, #67	@ 0x43
 8001834:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '2';
 8001836:	7dfb      	ldrb	r3, [r7, #23]
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	75fa      	strb	r2, [r7, #23]
 800183c:	461a      	mov	r2, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	4413      	add	r3, r2
 8001842:	2232      	movs	r2, #50	@ 0x32
 8001844:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001846:	7dfb      	ldrb	r3, [r7, #23]
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	75fa      	strb	r2, [r7, #23]
 800184c:	461a      	mov	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	4413      	add	r3, r2
 8001852:	222c      	movs	r2, #44	@ 0x2c
 8001854:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	75fa      	strb	r2, [r7, #23]
 800185c:	461a      	mov	r2, r3
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	4413      	add	r3, r2
 8001862:	2240      	movs	r2, #64	@ 0x40
 8001864:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001866:	7dfb      	ldrb	r3, [r7, #23]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	75fa      	strb	r2, [r7, #23]
 800186c:	461a      	mov	r2, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	4413      	add	r3, r2
 8001872:	222c      	movs	r2, #44	@ 0x2c
 8001874:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, Ay_pData, 64 );
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	4413      	add	r3, r2
 800187c:	2240      	movs	r2, #64	@ 0x40
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	4618      	mov	r0, r3
 8001882:	f014 facc 	bl	8015e1e <memcpy>
 	index += 64;
 8001886:	7dfb      	ldrb	r3, [r7, #23]
 8001888:	3340      	adds	r3, #64	@ 0x40
 800188a:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 800188c:	7dfb      	ldrb	r3, [r7, #23]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	75fa      	strb	r2, [r7, #23]
 8001892:	461a      	mov	r2, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	4413      	add	r3, r2
 8001898:	222c      	movs	r2, #44	@ 0x2c
 800189a:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	75fa      	strb	r2, [r7, #23]
 80018a2:	461a      	mov	r2, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4413      	add	r3, r2
 80018a8:	2243      	movs	r2, #67	@ 0x43
 80018aa:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '3';
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	75fa      	strb	r2, [r7, #23]
 80018b2:	461a      	mov	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	2233      	movs	r2, #51	@ 0x33
 80018ba:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80018bc:	7dfb      	ldrb	r3, [r7, #23]
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	75fa      	strb	r2, [r7, #23]
 80018c2:	461a      	mov	r2, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	222c      	movs	r2, #44	@ 0x2c
 80018ca:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 80018cc:	7dfb      	ldrb	r3, [r7, #23]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	75fa      	strb	r2, [r7, #23]
 80018d2:	461a      	mov	r2, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	2240      	movs	r2, #64	@ 0x40
 80018da:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80018dc:	7dfb      	ldrb	r3, [r7, #23]
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	75fa      	strb	r2, [r7, #23]
 80018e2:	461a      	mov	r2, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	222c      	movs	r2, #44	@ 0x2c
 80018ea:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, Az_pData, 64 );
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	683a      	ldr	r2, [r7, #0]
 80018f0:	4413      	add	r3, r2
 80018f2:	2240      	movs	r2, #64	@ 0x40
 80018f4:	6879      	ldr	r1, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f014 fa91 	bl	8015e1e <memcpy>
}
 80018fc:	bf00      	nop
 80018fe:	3718      	adds	r7, #24
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000095e 	.word	0x2000095e
 8001908:	200011f4 	.word	0x200011f4
 800190c:	00000000 	.word	0x00000000

08001910 <HighPassFilter_Init>:
//--------------------------------------------------------------------------------------------

void HighPassFilter_Init(tsHighPassFilter *filter, float cutoff_freq, float sampling_rate)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	ed87 0a02 	vstr	s0, [r7, #8]
 800191c:	edc7 0a01 	vstr	s1, [r7, #4]
    float rc = 1.0 / (2.0 * M_PI * cutoff_freq);
 8001920:	68b8      	ldr	r0, [r7, #8]
 8001922:	f7fe fde9 	bl	80004f8 <__aeabi_f2d>
 8001926:	a321      	add	r3, pc, #132	@ (adr r3, 80019ac <HighPassFilter_Init+0x9c>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe3c 	bl	80005a8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	f04f 0000 	mov.w	r0, #0
 8001938:	491b      	ldr	r1, [pc, #108]	@ (80019a8 <HighPassFilter_Init+0x98>)
 800193a:	f7fe ff5f 	bl	80007fc <__aeabi_ddiv>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff f841 	bl	80009cc <__aeabi_d2f>
 800194a:	4603      	mov	r3, r0
 800194c:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / sampling_rate;
 800194e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001952:	ed97 7a01 	vldr	s14, [r7, #4]
 8001956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195a:	edc7 7a04 	vstr	s15, [r7, #16]
    filter->alpha = rc / (rc + dt);
 800195e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001962:	edd7 7a04 	vldr	s15, [r7, #16]
 8001966:	ee37 7a27 	vadd.f32	s14, s14, s15
 800196a:	edd7 6a05 	vldr	s13, [r7, #20]
 800196e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	edc3 7a00 	vstr	s15, [r3]

    filter->prev_input.x = 0;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = 0;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = 0;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = 0;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2200      	movs	r2, #0
 800198e:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = 0;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = 0;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	81da      	strh	r2, [r3, #14]
}
 800199c:	bf00      	nop
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	f3af 8000 	nop.w
 80019a8:	3ff00000 	.word	0x3ff00000
 80019ac:	54442d18 	.word	0x54442d18
 80019b0:	401921fb 	.word	0x401921fb

080019b4 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80019ba:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <APPD_EnableCPU2+0x34>)
 80019bc:	1d3c      	adds	r4, r7, #4
 80019be:	461d      	mov	r5, r3
 80019c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019c8:	c403      	stmia	r4!, {r0, r1}
 80019ca:	8022      	strh	r2, [r4, #0]
 80019cc:	3402      	adds	r4, #2
 80019ce:	0c13      	lsrs	r3, r2, #16
 80019d0:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80019d2:	f010 f839 	bl	8011a48 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80019d6:	1d3b      	adds	r3, r7, #4
 80019d8:	4618      	mov	r0, r3
 80019da:	f00f faca 	bl	8010f72 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80019de:	bf00      	nop
}
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bdb0      	pop	{r4, r5, r7, pc}
 80019e6:	bf00      	nop
 80019e8:	08016c84 	.word	0x08016c84

080019ec <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	460b      	mov	r3, r1
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80019fa:	897a      	ldrh	r2, [r7, #10]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	2000      	movs	r0, #0
 8001a02:	f001 fbab 	bl	800315c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001a06:	bf00      	nop
}
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001a14:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <LL_PWR_SMPS_Enable+0x1c>)
 8001a16:	69db      	ldr	r3, [r3, #28]
 8001a18:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <LL_PWR_SMPS_Enable+0x1c>)
 8001a1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a1e:	61d3      	str	r3, [r2, #28]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	58000400 	.word	0x58000400

08001a30 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001a3a:	69db      	ldr	r3, [r3, #28]
 8001a3c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a40:	4904      	ldr	r1, [pc, #16]	@ (8001a54 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61cb      	str	r3, [r1, #28]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr
 8001a54:	58000400 	.word	0x58000400

08001a58 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001a60:	4b18      	ldr	r3, [pc, #96]	@ (8001ac4 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d108      	bne.n	8001a84 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f023 020f 	bic.w	r2, r3, #15
 8001a7a:	4913      	ldr	r1, [pc, #76]	@ (8001ac8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8001a82:	e019      	b.n	8001ab8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	3b06      	subs	r3, #6
 8001a88:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4413      	add	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	da02      	bge.n	8001a9e <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	e004      	b.n	8001aa8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b0f      	cmp	r3, #15
 8001aa2:	dd01      	ble.n	8001aa8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001aa4:	230f      	movs	r3, #15
 8001aa6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	f023 020f 	bic.w	r2, r3, #15
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4905      	ldr	r1, [pc, #20]	@ (8001ac8 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61cb      	str	r3, [r1, #28]
}
 8001ab8:	bf00      	nop
 8001aba:	371c      	adds	r7, #28
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	1fff7558 	.word	0x1fff7558
 8001ac8:	58000400 	.word	0x58000400

08001acc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <LL_C2_PWR_SetPowerMode+0x28>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ada:	f023 0207 	bic.w	r2, r3, #7
 8001ade:	4905      	ldr	r1, [pc, #20]	@ (8001af4 <LL_C2_PWR_SetPowerMode+0x28>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	58000400 	.word	0x58000400

08001af8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8001b02:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001b06:	4905      	ldr	r1, [pc, #20]	@ (8001b1c <LL_EXTI_EnableIT_32_63+0x24>)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	58000800 	.word	0x58000800

08001b20 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001b28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001b2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001b32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b3a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	021b      	lsls	r3, r3, #8
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	cafecafe 	.word	0xcafecafe

08001b5c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001b64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001b6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	608b      	str	r3, [r1, #8]
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr

08001b84 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr

08001ba6 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bb2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001bdc:	d101      	bne.n	8001be2 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001bf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c02:	d101      	bne.n	8001c08 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c20:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c38:	68fb      	ldr	r3, [r7, #12]
}
 8001c3a:	bf00      	nop
 8001c3c:	3714      	adds	r7, #20
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	@ (8001c60 <LL_DBGMCU_GetDeviceID+0x18>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e0042000 	.word	0xe0042000

08001c64 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001c68:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <LL_DBGMCU_GetRevisionID+0x18>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	b29b      	uxth	r3, r3
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e0042000 	.word	0xe0042000

08001c80 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685a      	ldr	r2, [r3, #4]
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	605a      	str	r2, [r3, #4]
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	605a      	str	r2, [r3, #4]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695a      	ldr	r2, [r3, #20]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	041b      	lsls	r3, r3, #16
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	615a      	str	r2, [r3, #20]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	615a      	str	r2, [r3, #20]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	609a      	str	r2, [r3, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	619a      	str	r2, [r3, #24]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <LL_LPM_EnableSleep+0x1c>)
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <LL_LPM_EnableSleep+0x1c>)
 8001d4e:	f023 0304 	bic.w	r3, r3, #4
 8001d52:	6113      	str	r3, [r2, #16]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	22ff      	movs	r2, #255	@ 0xff
 8001d70:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001d72:	bf00      	nop
 8001d74:	370c      	adds	r7, #12
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	22ca      	movs	r2, #202	@ 0xca
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2253      	movs	r2, #83	@ 0x53
 8001d90:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 0207 	bic.w	r2, r3, #7
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	609a      	str	r2, [r3, #8]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001dc8:	4b04      	ldr	r3, [pc, #16]	@ (8001ddc <MX_APPE_Config+0x18>)
 8001dca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001dce:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001dd0:	f000 f829 	bl	8001e26 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001dd4:	f000 f868 	bl	8001ea8 <Config_HSE>

  return;
 8001dd8:	bf00      	nop
}
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	58004000 	.word	0x58004000

08001de0 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001de4:	f000 f874 	bl	8001ed0 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001de8:	f000 f88c 	bl	8001f04 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001dec:	4903      	ldr	r1, [pc, #12]	@ (8001dfc <MX_APPE_Init+0x1c>)
 8001dee:	2000      	movs	r0, #0
 8001df0:	f000 ffc2 	bl	8002d78 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001df4:	f000 f896 	bl	8001f24 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001df8:	bf00      	nop
}
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000f84 	.word	0x20000f84

08001e00 <Init_Smps>:

void Init_Smps(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fe13 	bl	8001a30 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8001e0a:	2004      	movs	r0, #4
 8001e0c:	f7ff fe24 	bl	8001a58 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001e10:	f7ff fdfe 	bl	8001a10 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001e14:	bf00      	nop
}
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <Init_Exti>:

void Init_Exti(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001e1c:	2050      	movs	r0, #80	@ 0x50
 8001e1e:	f7ff fe6b 	bl	8001af8 <LL_EXTI_EnableIT_32_63>

  return;
 8001e22:	bf00      	nop
}
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001e2a:	f000 f804 	bl	8001e36 <Reset_BackupDomain>

  Reset_IPCC();
 8001e2e:	f000 f819 	bl	8001e64 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001e32:	bf00      	nop
}
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001e3a:	f7ff fec5 	bl	8001bc8 <LL_RCC_IsActiveFlag_PINRST>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00d      	beq.n	8001e60 <Reset_BackupDomain+0x2a>
 8001e44:	f7ff fed3 	bl	8001bee <LL_RCC_IsActiveFlag_SFTRST>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d108      	bne.n	8001e60 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001e4e:	f005 fac9 	bl	80073e4 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001e52:	f005 fac7 	bl	80073e4 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001e56:	f7ff fe95 	bl	8001b84 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001e5a:	f7ff fea4 	bl	8001ba6 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001e5e:	bf00      	nop
 8001e60:	bf00      	nop
}
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001e68:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001e6c:	f7ff fed2 	bl	8001c14 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001e70:	213f      	movs	r1, #63	@ 0x3f
 8001e72:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <Reset_IPCC+0x40>)
 8001e74:	f7ff ff4a 	bl	8001d0c <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001e78:	213f      	movs	r1, #63	@ 0x3f
 8001e7a:	480a      	ldr	r0, [pc, #40]	@ (8001ea4 <Reset_IPCC+0x40>)
 8001e7c:	f7ff ff54 	bl	8001d28 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001e80:	213f      	movs	r1, #63	@ 0x3f
 8001e82:	4808      	ldr	r0, [pc, #32]	@ (8001ea4 <Reset_IPCC+0x40>)
 8001e84:	f7ff fefc 	bl	8001c80 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001e88:	213f      	movs	r1, #63	@ 0x3f
 8001e8a:	4806      	ldr	r0, [pc, #24]	@ (8001ea4 <Reset_IPCC+0x40>)
 8001e8c:	f7ff ff1b 	bl	8001cc6 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001e90:	213f      	movs	r1, #63	@ 0x3f
 8001e92:	4804      	ldr	r0, [pc, #16]	@ (8001ea4 <Reset_IPCC+0x40>)
 8001e94:	f7ff ff06 	bl	8001ca4 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001e98:	213f      	movs	r1, #63	@ 0x3f
 8001e9a:	4802      	ldr	r0, [pc, #8]	@ (8001ea4 <Reset_IPCC+0x40>)
 8001e9c:	f7ff ff25 	bl	8001cea <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001ea0:	bf00      	nop
}
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	58000c00 	.word	0x58000c00

08001ea8 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001eae:	2000      	movs	r0, #0
 8001eb0:	f00f ff1e 	bl	8011cf0 <OTP_Read>
 8001eb4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	799b      	ldrb	r3, [r3, #6]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fe2d 	bl	8001b20 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001ec6:	bf00      	nop
 8001ec8:	bf00      	nop
}
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}

08001ed0 <System_Init>:

static void System_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  Init_Smps();
 8001ed4:	f7ff ff94 	bl	8001e00 <Init_Smps>

  Init_Exti();
 8001ed8:	f7ff ff9e 	bl	8001e18 <Init_Exti>

  Init_Rtc();
 8001edc:	f000 f802 	bl	8001ee4 <Init_Rtc>

  return;
 8001ee0:	bf00      	nop
}
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001ee8:	4805      	ldr	r0, [pc, #20]	@ (8001f00 <Init_Rtc+0x1c>)
 8001eea:	f7ff ff48 	bl	8001d7e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001eee:	2100      	movs	r1, #0
 8001ef0:	4803      	ldr	r0, [pc, #12]	@ (8001f00 <Init_Rtc+0x1c>)
 8001ef2:	f7ff ff54 	bl	8001d9e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001ef6:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <Init_Rtc+0x1c>)
 8001ef8:	f7ff ff34 	bl	8001d64 <LL_RTC_EnableWriteProtection>

  return;
 8001efc:	bf00      	nop
}
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40002800 	.word	0x40002800

08001f04 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001f08:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001f0c:	f7ff fe26 	bl	8001b5c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001f10:	f013 fa1c 	bl	801534c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001f14:	2004      	movs	r0, #4
 8001f16:	f7ff fdd9 	bl	8001acc <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8001f1a:	f005 fa81 	bl	8007420 <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001f1e:	bf00      	nop
}
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b088      	sub	sp, #32
 8001f28:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001f2a:	f00f fbd7 	bl	80116dc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001f2e:	4a11      	ldr	r2, [pc, #68]	@ (8001f74 <appe_Tl_Init+0x50>)
 8001f30:	2100      	movs	r1, #0
 8001f32:	2040      	movs	r0, #64	@ 0x40
 8001f34:	f013 fb48 	bl	80155c8 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <appe_Tl_Init+0x54>)
 8001f3a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f7c <appe_Tl_Init+0x58>)
 8001f3e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001f40:	463b      	mov	r3, r7
 8001f42:	4619      	mov	r1, r3
 8001f44:	480e      	ldr	r0, [pc, #56]	@ (8001f80 <appe_Tl_Init+0x5c>)
 8001f46:	f00f fa8b 	bl	8011460 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f84 <appe_Tl_Init+0x60>)
 8001f4c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <appe_Tl_Init+0x64>)
 8001f50:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	@ (8001f8c <appe_Tl_Init+0x68>)
 8001f54:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001f56:	f641 232c 	movw	r3, #6700	@ 0x1a2c
 8001f5a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001f5c:	f107 0308 	add.w	r3, r7, #8
 8001f60:	4618      	mov	r0, r3
 8001f62:	f00f fcfd 	bl	8011960 <TL_MM_Init>

  TL_Enable();
 8001f66:	f00f fbb3 	bl	80116d0 <TL_Enable>

  return;
 8001f6a:	bf00      	nop
}
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	08011499 	.word	0x08011499
 8001f78:	20031c24 	.word	0x20031c24
 8001f7c:	08001f91 	.word	0x08001f91
 8001f80:	08001fa9 	.word	0x08001fa9
 8001f84:	20031e3c 	.word	0x20031e3c
 8001f88:	20031d30 	.word	0x20031d30
 8001f8c:	200301f8 	.word	0x200301f8

08001f90 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001f9a:	bf00      	nop
}
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
	...

08001fa8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	330b      	adds	r3, #11
 8001fb6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001fc2:	2b07      	cmp	r3, #7
 8001fc4:	f200 80d0 	bhi.w	8002168 <APPE_SysUserEvtRx+0x1c0>
 8001fc8:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd0 <APPE_SysUserEvtRx+0x28>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08001ff1 	.word	0x08001ff1
 8001fd4:	08002083 	.word	0x08002083
 8001fd8:	080020a5 	.word	0x080020a5
 8001fdc:	08002169 	.word	0x08002169
 8001fe0:	080020e9 	.word	0x080020e9
 8001fe4:	0800210d 	.word	0x0800210d
 8001fe8:	08002129 	.word	0x08002129
 8001fec:	0800214d 	.word	0x0800214d
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001ff0:	f107 030c 	add.w	r3, r7, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f00e ffe9 	bl	8010fcc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001ffa:	485e      	ldr	r0, [pc, #376]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 8001ffc:	f00f fdb0 	bl	8011b60 <DbgTraceGetFileName>
 8002000:	4601      	mov	r1, r0
 8002002:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8002006:	4a5c      	ldr	r2, [pc, #368]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 8002008:	485c      	ldr	r0, [pc, #368]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 800200a:	f013 fcdd 	bl	80159c8 <iprintf>
 800200e:	7b3b      	ldrb	r3, [r7, #12]
 8002010:	4619      	mov	r1, r3
 8002012:	7b7b      	ldrb	r3, [r7, #13]
 8002014:	461a      	mov	r2, r3
 8002016:	7bbb      	ldrb	r3, [r7, #14]
 8002018:	4859      	ldr	r0, [pc, #356]	@ (8002180 <APPE_SysUserEvtRx+0x1d8>)
 800201a:	f013 fcd5 	bl	80159c8 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800201e:	4855      	ldr	r0, [pc, #340]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 8002020:	f00f fd9e 	bl	8011b60 <DbgTraceGetFileName>
 8002024:	4601      	mov	r1, r0
 8002026:	f240 136b 	movw	r3, #363	@ 0x16b
 800202a:	4a53      	ldr	r2, [pc, #332]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 800202c:	4853      	ldr	r0, [pc, #332]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 800202e:	f013 fccb 	bl	80159c8 <iprintf>
 8002032:	7c3b      	ldrb	r3, [r7, #16]
 8002034:	4619      	mov	r1, r3
 8002036:	4853      	ldr	r0, [pc, #332]	@ (8002184 <APPE_SysUserEvtRx+0x1dc>)
 8002038:	f013 fcc6 	bl	80159c8 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 800203c:	484d      	ldr	r0, [pc, #308]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 800203e:	f00f fd8f 	bl	8011b60 <DbgTraceGetFileName>
 8002042:	4601      	mov	r1, r0
 8002044:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002048:	4a4b      	ldr	r2, [pc, #300]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 800204a:	484c      	ldr	r0, [pc, #304]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 800204c:	f013 fcbc 	bl	80159c8 <iprintf>
 8002050:	7dbb      	ldrb	r3, [r7, #22]
 8002052:	4619      	mov	r1, r3
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	461a      	mov	r2, r3
 8002058:	7e3b      	ldrb	r3, [r7, #24]
 800205a:	484b      	ldr	r0, [pc, #300]	@ (8002188 <APPE_SysUserEvtRx+0x1e0>)
 800205c:	f013 fcb4 	bl	80159c8 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8002060:	4844      	ldr	r0, [pc, #272]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 8002062:	f00f fd7d 	bl	8011b60 <DbgTraceGetFileName>
 8002066:	4601      	mov	r1, r0
 8002068:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800206c:	4a42      	ldr	r2, [pc, #264]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 800206e:	4843      	ldr	r0, [pc, #268]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 8002070:	f013 fcaa 	bl	80159c8 <iprintf>
 8002074:	4845      	ldr	r0, [pc, #276]	@ (800218c <APPE_SysUserEvtRx+0x1e4>)
 8002076:	f013 fca7 	bl	80159c8 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8e0 	bl	8002240 <APPE_SysEvtReadyProcessing>
    break;
 8002080:	e073      	b.n	800216a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8002082:	483c      	ldr	r0, [pc, #240]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 8002084:	f00f fd6c 	bl	8011b60 <DbgTraceGetFileName>
 8002088:	4601      	mov	r1, r0
 800208a:	f240 1373 	movw	r3, #371	@ 0x173
 800208e:	4a3a      	ldr	r2, [pc, #232]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 8002090:	483a      	ldr	r0, [pc, #232]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 8002092:	f013 fc99 	bl	80159c8 <iprintf>
 8002096:	483e      	ldr	r0, [pc, #248]	@ (8002190 <APPE_SysUserEvtRx+0x1e8>)
 8002098:	f013 fc96 	bl	80159c8 <iprintf>
    APPE_SysEvtError(pPayload);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f885 	bl	80021ac <APPE_SysEvtError>
    break;
 80020a2:	e062      	b.n	800216a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80020a4:	4833      	ldr	r0, [pc, #204]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 80020a6:	f00f fd5b 	bl	8011b60 <DbgTraceGetFileName>
 80020aa:	4601      	mov	r1, r0
 80020ac:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 80020b0:	4a31      	ldr	r2, [pc, #196]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 80020b2:	4832      	ldr	r0, [pc, #200]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 80020b4:	f013 fc88 	bl	80159c8 <iprintf>
 80020b8:	4836      	ldr	r0, [pc, #216]	@ (8002194 <APPE_SysUserEvtRx+0x1ec>)
 80020ba:	f013 fcf5 	bl	8015aa8 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80020be:	482d      	ldr	r0, [pc, #180]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 80020c0:	f00f fd4e 	bl	8011b60 <DbgTraceGetFileName>
 80020c4:	4601      	mov	r1, r0
 80020c6:	f240 1379 	movw	r3, #377	@ 0x179
 80020ca:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 80020cc:	482b      	ldr	r0, [pc, #172]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 80020ce:	f013 fc7b 	bl	80159c8 <iprintf>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3302      	adds	r3, #2
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	3302      	adds	r3, #2
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	461a      	mov	r2, r3
 80020e0:	482d      	ldr	r0, [pc, #180]	@ (8002198 <APPE_SysUserEvtRx+0x1f0>)
 80020e2:	f013 fc71 	bl	80159c8 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80020e6:	e040      	b.n	800216a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80020e8:	4822      	ldr	r0, [pc, #136]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 80020ea:	f00f fd39 	bl	8011b60 <DbgTraceGetFileName>
 80020ee:	4601      	mov	r1, r0
 80020f0:	f240 137f 	movw	r3, #383	@ 0x17f
 80020f4:	4a20      	ldr	r2, [pc, #128]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 80020f6:	4821      	ldr	r0, [pc, #132]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 80020f8:	f013 fc66 	bl	80159c8 <iprintf>
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	3302      	adds	r3, #2
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4619      	mov	r1, r3
 8002104:	4825      	ldr	r0, [pc, #148]	@ (800219c <APPE_SysUserEvtRx+0x1f4>)
 8002106:	f013 fc5f 	bl	80159c8 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 800210a:	e02e      	b.n	800216a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800210c:	4819      	ldr	r0, [pc, #100]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 800210e:	f00f fd27 	bl	8011b60 <DbgTraceGetFileName>
 8002112:	4601      	mov	r1, r0
 8002114:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8002118:	4a17      	ldr	r2, [pc, #92]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 800211a:	4818      	ldr	r0, [pc, #96]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 800211c:	f013 fc54 	bl	80159c8 <iprintf>
 8002120:	481f      	ldr	r0, [pc, #124]	@ (80021a0 <APPE_SysUserEvtRx+0x1f8>)
 8002122:	f013 fc51 	bl	80159c8 <iprintf>
    break;
 8002126:	e020      	b.n	800216a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8002128:	4812      	ldr	r0, [pc, #72]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 800212a:	f00f fd19 	bl	8011b60 <DbgTraceGetFileName>
 800212e:	4601      	mov	r1, r0
 8002130:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8002134:	4a10      	ldr	r2, [pc, #64]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 8002136:	4811      	ldr	r0, [pc, #68]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 8002138:	f013 fc46 	bl	80159c8 <iprintf>
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3302      	adds	r3, #2
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4817      	ldr	r0, [pc, #92]	@ (80021a4 <APPE_SysUserEvtRx+0x1fc>)
 8002146:	f013 fc3f 	bl	80159c8 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 800214a:	e00e      	b.n	800216a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 800214c:	4809      	ldr	r0, [pc, #36]	@ (8002174 <APPE_SysUserEvtRx+0x1cc>)
 800214e:	f00f fd07 	bl	8011b60 <DbgTraceGetFileName>
 8002152:	4601      	mov	r1, r0
 8002154:	f240 138d 	movw	r3, #397	@ 0x18d
 8002158:	4a07      	ldr	r2, [pc, #28]	@ (8002178 <APPE_SysUserEvtRx+0x1d0>)
 800215a:	4808      	ldr	r0, [pc, #32]	@ (800217c <APPE_SysUserEvtRx+0x1d4>)
 800215c:	f013 fc34 	bl	80159c8 <iprintf>
 8002160:	4811      	ldr	r0, [pc, #68]	@ (80021a8 <APPE_SysUserEvtRx+0x200>)
 8002162:	f013 fc31 	bl	80159c8 <iprintf>
    break;
 8002166:	e000      	b.n	800216a <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8002168:	bf00      	nop
  }

  return;
 800216a:	bf00      	nop
}
 800216c:	3720      	adds	r7, #32
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	08016ca0 	.word	0x08016ca0
 8002178:	0801876c 	.word	0x0801876c
 800217c:	08016cb8 	.word	0x08016cb8
 8002180:	08016ccc 	.word	0x08016ccc
 8002184:	08016cf0 	.word	0x08016cf0
 8002188:	08016d0c 	.word	0x08016d0c
 800218c:	08016d24 	.word	0x08016d24
 8002190:	08016d44 	.word	0x08016d44
 8002194:	08016d68 	.word	0x08016d68
 8002198:	08016db8 	.word	0x08016db8
 800219c:	08016de0 	.word	0x08016de0
 80021a0:	08016e1c 	.word	0x08016e1c
 80021a4:	08016e40 	.word	0x08016e40
 80021a8:	08016e7c 	.word	0x08016e7c

080021ac <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	330b      	adds	r3, #11
 80021ba:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3302      	adds	r3, #2
 80021c0:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80021c2:	4819      	ldr	r0, [pc, #100]	@ (8002228 <APPE_SysEvtError+0x7c>)
 80021c4:	f00f fccc 	bl	8011b60 <DbgTraceGetFileName>
 80021c8:	4601      	mov	r1, r0
 80021ca:	f240 13a5 	movw	r3, #421	@ 0x1a5
 80021ce:	4a17      	ldr	r2, [pc, #92]	@ (800222c <APPE_SysEvtError+0x80>)
 80021d0:	4817      	ldr	r0, [pc, #92]	@ (8002230 <APPE_SysEvtError+0x84>)
 80021d2:	f013 fbf9 	bl	80159c8 <iprintf>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	4619      	mov	r1, r3
 80021dc:	4815      	ldr	r0, [pc, #84]	@ (8002234 <APPE_SysEvtError+0x88>)
 80021de:	f013 fbf3 	bl	80159c8 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10d      	bne.n	8002206 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80021ea:	480f      	ldr	r0, [pc, #60]	@ (8002228 <APPE_SysEvtError+0x7c>)
 80021ec:	f00f fcb8 	bl	8011b60 <DbgTraceGetFileName>
 80021f0:	4601      	mov	r1, r0
 80021f2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80021f6:	4a0d      	ldr	r2, [pc, #52]	@ (800222c <APPE_SysEvtError+0x80>)
 80021f8:	480d      	ldr	r0, [pc, #52]	@ (8002230 <APPE_SysEvtError+0x84>)
 80021fa:	f013 fbe5 	bl	80159c8 <iprintf>
 80021fe:	480e      	ldr	r0, [pc, #56]	@ (8002238 <APPE_SysEvtError+0x8c>)
 8002200:	f013 fc52 	bl	8015aa8 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002204:	e00d      	b.n	8002222 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8002206:	4808      	ldr	r0, [pc, #32]	@ (8002228 <APPE_SysEvtError+0x7c>)
 8002208:	f00f fcaa 	bl	8011b60 <DbgTraceGetFileName>
 800220c:	4601      	mov	r1, r0
 800220e:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8002212:	4a06      	ldr	r2, [pc, #24]	@ (800222c <APPE_SysEvtError+0x80>)
 8002214:	4806      	ldr	r0, [pc, #24]	@ (8002230 <APPE_SysEvtError+0x84>)
 8002216:	f013 fbd7 	bl	80159c8 <iprintf>
 800221a:	4808      	ldr	r0, [pc, #32]	@ (800223c <APPE_SysEvtError+0x90>)
 800221c:	f013 fc44 	bl	8015aa8 <puts>
  return;
 8002220:	bf00      	nop
}
 8002222:	3710      	adds	r7, #16
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	08016ca0 	.word	0x08016ca0
 800222c:	08018780 	.word	0x08018780
 8002230:	08016cb8 	.word	0x08016cb8
 8002234:	08016ea0 	.word	0x08016ea0
 8002238:	08016ed0 	.word	0x08016ed0
 800223c:	08016f0c 	.word	0x08016f0c

08002240 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	@ 0x28
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002248:	f107 0308 	add.w	r3, r7, #8
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800225a:	2300      	movs	r3, #0
 800225c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	330b      	adds	r3, #11
 8002264:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3302      	adds	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d146      	bne.n	8002302 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8002274:	4836      	ldr	r0, [pc, #216]	@ (8002350 <APPE_SysEvtReadyProcessing+0x110>)
 8002276:	f00f fc73 	bl	8011b60 <DbgTraceGetFileName>
 800227a:	4601      	mov	r1, r0
 800227c:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002280:	4a34      	ldr	r2, [pc, #208]	@ (8002354 <APPE_SysEvtReadyProcessing+0x114>)
 8002282:	4835      	ldr	r0, [pc, #212]	@ (8002358 <APPE_SysEvtReadyProcessing+0x118>)
 8002284:	f013 fba0 	bl	80159c8 <iprintf>
 8002288:	4834      	ldr	r0, [pc, #208]	@ (800235c <APPE_SysEvtReadyProcessing+0x11c>)
 800228a:	f013 fc0d 	bl	8015aa8 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800228e:	f7ff fb91 	bl	80019b4 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002292:	230f      	movs	r3, #15
 8002294:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002296:	237f      	movs	r3, #127	@ 0x7f
 8002298:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800229a:	f7ff fce3 	bl	8001c64 <LL_DBGMCU_GetRevisionID>
 800229e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 80022a0:	482b      	ldr	r0, [pc, #172]	@ (8002350 <APPE_SysEvtReadyProcessing+0x110>)
 80022a2:	f00f fc5d 	bl	8011b60 <DbgTraceGetFileName>
 80022a6:	4601      	mov	r1, r0
 80022a8:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 80022ac:	4a29      	ldr	r2, [pc, #164]	@ (8002354 <APPE_SysEvtReadyProcessing+0x114>)
 80022ae:	482a      	ldr	r0, [pc, #168]	@ (8002358 <APPE_SysEvtReadyProcessing+0x118>)
 80022b0:	f013 fb8a 	bl	80159c8 <iprintf>
 80022b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022b6:	482a      	ldr	r0, [pc, #168]	@ (8002360 <APPE_SysEvtReadyProcessing+0x120>)
 80022b8:	f013 fb86 	bl	80159c8 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022be:	b29b      	uxth	r3, r3
 80022c0:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80022c2:	f7ff fcc1 	bl	8001c48 <LL_DBGMCU_GetDeviceID>
 80022c6:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 80022c8:	4821      	ldr	r0, [pc, #132]	@ (8002350 <APPE_SysEvtReadyProcessing+0x110>)
 80022ca:	f00f fc49 	bl	8011b60 <DbgTraceGetFileName>
 80022ce:	4601      	mov	r1, r0
 80022d0:	f240 13e1 	movw	r3, #481	@ 0x1e1
 80022d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002354 <APPE_SysEvtReadyProcessing+0x114>)
 80022d6:	4820      	ldr	r0, [pc, #128]	@ (8002358 <APPE_SysEvtReadyProcessing+0x118>)
 80022d8:	f013 fb76 	bl	80159c8 <iprintf>
 80022dc:	6a39      	ldr	r1, [r7, #32]
 80022de:	4821      	ldr	r0, [pc, #132]	@ (8002364 <APPE_SysEvtReadyProcessing+0x124>)
 80022e0:	f013 fb72 	bl	80159c8 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80022ea:	f107 0308 	add.w	r3, r7, #8
 80022ee:	4618      	mov	r0, r3
 80022f0:	f00e fe56 	bl	8010fa0 <SHCI_C2_Config>

    APP_BLE_Init();
 80022f4:	f010 f9d0 	bl	8012698 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80022f8:	2100      	movs	r1, #0
 80022fa:	2001      	movs	r0, #1
 80022fc:	f013 f838 	bl	8015370 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002300:	e022      	b.n	8002348 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d110      	bne.n	800232c <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800230a:	4811      	ldr	r0, [pc, #68]	@ (8002350 <APPE_SysEvtReadyProcessing+0x110>)
 800230c:	f00f fc28 	bl	8011b60 <DbgTraceGetFileName>
 8002310:	4601      	mov	r1, r0
 8002312:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8002316:	4a0f      	ldr	r2, [pc, #60]	@ (8002354 <APPE_SysEvtReadyProcessing+0x114>)
 8002318:	480f      	ldr	r0, [pc, #60]	@ (8002358 <APPE_SysEvtReadyProcessing+0x118>)
 800231a:	f013 fb55 	bl	80159c8 <iprintf>
 800231e:	4812      	ldr	r0, [pc, #72]	@ (8002368 <APPE_SysEvtReadyProcessing+0x128>)
 8002320:	f013 fb52 	bl	80159c8 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
  return;
 800232a:	e00d      	b.n	8002348 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 800232c:	4808      	ldr	r0, [pc, #32]	@ (8002350 <APPE_SysEvtReadyProcessing+0x110>)
 800232e:	f00f fc17 	bl	8011b60 <DbgTraceGetFileName>
 8002332:	4601      	mov	r1, r0
 8002334:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002338:	4a06      	ldr	r2, [pc, #24]	@ (8002354 <APPE_SysEvtReadyProcessing+0x114>)
 800233a:	4807      	ldr	r0, [pc, #28]	@ (8002358 <APPE_SysEvtReadyProcessing+0x118>)
 800233c:	f013 fb44 	bl	80159c8 <iprintf>
 8002340:	480a      	ldr	r0, [pc, #40]	@ (800236c <APPE_SysEvtReadyProcessing+0x12c>)
 8002342:	f013 fb41 	bl	80159c8 <iprintf>
  return;
 8002346:	bf00      	nop
}
 8002348:	3728      	adds	r7, #40	@ 0x28
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	08016ca0 	.word	0x08016ca0
 8002354:	08018794 	.word	0x08018794
 8002358:	08016cb8 	.word	0x08016cb8
 800235c:	08016f44 	.word	0x08016f44
 8002360:	08016f60 	.word	0x08016f60
 8002364:	08016f84 	.word	0x08016f84
 8002368:	08016fa4 	.word	0x08016fa4
 800236c:	08016fd8 	.word	0x08016fd8

08002370 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f002 f86c 	bl	8004454 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d00a      	beq.n	80023a0 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800238a:	f002 f87b 	bl	8004484 <HAL_GetTickFreq>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	4413      	add	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002398:	e002      	b.n	80023a0 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800239a:	f7ff fcd3 	bl	8001d44 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800239e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 80023a0:	f002 f858 	bl	8004454 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d8f4      	bhi.n	800239a <HAL_Delay+0x2a>
  }
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	3710      	adds	r7, #16
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80023be:	f04f 30ff 	mov.w	r0, #4294967295
 80023c2:	f013 f805 	bl	80153d0 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}

080023ca <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80023ce:	bf00      	nop
}
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80023e2:	f04f 30ff 	mov.w	r0, #4294967295
 80023e6:	f012 fff3 	bl	80153d0 <UTIL_SEQ_Run>
  return;
 80023ea:	bf00      	nop
}
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}

080023f2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80023f2:	b580      	push	{r7, lr}
 80023f4:	b082      	sub	sp, #8
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80023fa:	2100      	movs	r1, #0
 80023fc:	2040      	movs	r0, #64	@ 0x40
 80023fe:	f013 f905 	bl	801560c <UTIL_SEQ_SetTask>
  return;
 8002402:	bf00      	nop
}
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002412:	2002      	movs	r0, #2
 8002414:	f013 f966 	bl	80156e4 <UTIL_SEQ_SetEvt>
  return;
 8002418:	bf00      	nop
}
 800241a:	3708      	adds	r7, #8
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002428:	2002      	movs	r0, #2
 800242a:	f013 f97b 	bl	8015724 <UTIL_SEQ_WaitEvt>
  return;
 800242e:	bf00      	nop
}
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <Debug_Init>:



//-----------------------------------------------------------------------------------
void Debug_Init (void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0

	DIAG ("\t\tDebug initialised\r\n");
 800243c:	4803      	ldr	r0, [pc, #12]	@ (800244c <Debug_Init+0x14>)
 800243e:	f000 f823 	bl	8002488 <DIAG>
	HAL_Delay(10);
 8002442:	200a      	movs	r0, #10
 8002444:	f7ff ff94 	bl	8002370 <HAL_Delay>
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}
 800244c:	0801700c 	.word	0x0801700c

08002450 <Debug_Control>:

//-----------------------------------------------------------------------------------
void Debug_Control (void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0

#ifndef BLE_Debug
#ifdef DATA_DEBUG_EN

		#ifndef IMU_ENABLE
			if ( tsDebug.bReleaseAFEData )
 8002454:	4b0a      	ldr	r3, [pc, #40]	@ (8002480 <Debug_Control+0x30>)
 8002456:	f893 3264 	ldrb.w	r3, [r3, #612]	@ 0x264
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00e      	beq.n	800247c <Debug_Control+0x2c>
			{
				DIAG ( "%d,%d\r\n", tsDebug.i16TxMCG, tsDebug.i16TxMCG );
 800245e:	4b08      	ldr	r3, [pc, #32]	@ (8002480 <Debug_Control+0x30>)
 8002460:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
 8002464:	4619      	mov	r1, r3
 8002466:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <Debug_Control+0x30>)
 8002468:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
 800246c:	461a      	mov	r2, r3
 800246e:	4805      	ldr	r0, [pc, #20]	@ (8002484 <Debug_Control+0x34>)
 8002470:	f000 f80a 	bl	8002488 <DIAG>
				tsDebug.bReleaseAFEData= false;
 8002474:	4b02      	ldr	r3, [pc, #8]	@ (8002480 <Debug_Control+0x30>)
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264
			}
		#endif

#endif
#endif
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	20000ba4 	.word	0x20000ba4
 8002484:	08017024 	.word	0x08017024

08002488 <DIAG>:
   // HAL_UART_Transmit_DMA(&huart1, (uint8_t*)buffer, strlen(buffer) );
   // HAL_UART_DMAResume(&huart1);
}
#else

void DIAG(const char *fmt, ...) {
 8002488:	b40f      	push	{r0, r1, r2, r3}
 800248a:	b580      	push	{r7, lr}
 800248c:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8002490:	af00      	add	r7, sp, #0
    char buffer[4048];
    va_list args;
    va_start(args, fmt);
 8002492:	f607 72e4 	addw	r2, r7, #4068	@ 0xfe4
 8002496:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 800249a:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 800249e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80024a0:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 80024a4:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 80024a8:	f107 0008 	add.w	r0, r7, #8
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	@ 0xfe0
 80024b2:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 80024b6:	f013 fb6d 	bl	8015b94 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80024ba:	f107 0308 	add.w	r3, r7, #8
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fd fe5e 	bl	8000180 <strlen>
 80024c4:	4603      	mov	r3, r0
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	4611      	mov	r1, r2
 80024ce:	4618      	mov	r0, r3
 80024d0:	f012 fa9a 	bl	8014a08 <CDC_Transmit_FS>
}
 80024d4:	bf00      	nop
 80024d6:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 80024da:	46bd      	mov	sp, r7
 80024dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024e0:	b004      	add	sp, #16
 80024e2:	4770      	bx	lr

080024e4 <HAL_GPIO_EXTI_Callback>:
	HAL_Delay (10);
}

//----------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]

	//----------------------------------------------
	if (GPIO_Pin == ADS_DRDY_Pin)
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b80      	cmp	r3, #128	@ 0x80
 80024f2:	d105      	bne.n	8002500 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ADS.DRDY = true;
 80024f4:	4b11      	ldr	r3, [pc, #68]	@ (800253c <HAL_GPIO_EXTI_Callback+0x58>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(ADS_DRDY_Pin);
 80024fa:	4b11      	ldr	r3, [pc, #68]	@ (8002540 <HAL_GPIO_EXTI_Callback+0x5c>)
 80024fc:	2280      	movs	r2, #128	@ 0x80
 80024fe:	60da      	str	r2, [r3, #12]
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT1_Pin)
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d109      	bne.n	800251a <HAL_GPIO_EXTI_Callback+0x36>
	{
		IMU.bInt1 = true;
 8002506:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <HAL_GPIO_EXTI_Callback+0x60>)
 8002508:	2201      	movs	r2, #1
 800250a:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 800250e:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002510:	2210      	movs	r2, #16
 8002512:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT1 \r\n");
 8002514:	480c      	ldr	r0, [pc, #48]	@ (8002548 <HAL_GPIO_EXTI_Callback+0x64>)
 8002516:	f7ff ffb7 	bl	8002488 <DIAG>
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT2_Pin)
 800251a:	88fb      	ldrh	r3, [r7, #6]
 800251c:	2b20      	cmp	r3, #32
 800251e:	d109      	bne.n	8002534 <HAL_GPIO_EXTI_Callback+0x50>
	{
		IMU.bInt2 = true;
 8002520:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <HAL_GPIO_EXTI_Callback+0x60>)
 8002522:	2201      	movs	r2, #1
 8002524:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT2_Pin);
 8002528:	4b05      	ldr	r3, [pc, #20]	@ (8002540 <HAL_GPIO_EXTI_Callback+0x5c>)
 800252a:	2220      	movs	r2, #32
 800252c:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT2 \r\n");
 800252e:	4807      	ldr	r0, [pc, #28]	@ (800254c <HAL_GPIO_EXTI_Callback+0x68>)
 8002530:	f7ff ffaa 	bl	8002488 <DIAG>
	}

}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000208 	.word	0x20000208
 8002540:	58000800 	.word	0x58000800
 8002544:	2000086c 	.word	0x2000086c
 8002548:	08017044 	.word	0x08017044
 800254c:	08017054 	.word	0x08017054

08002550 <LL_EXTI_EnableIT_0_31>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002558:	4b06      	ldr	r3, [pc, #24]	@ (8002574 <LL_EXTI_EnableIT_0_31+0x24>)
 800255a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800255e:	4905      	ldr	r1, [pc, #20]	@ (8002574 <LL_EXTI_EnableIT_0_31+0x24>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	58000800 	.word	0x58000800

08002578 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4904      	ldr	r1, [pc, #16]	@ (8002598 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	58000800 	.word	0x58000800

0800259c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80025a2:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <ReadRtcSsrValue+0x3c>)
 80025a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80025aa:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <ReadRtcSsrValue+0x3c>)
 80025ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80025b2:	e005      	b.n	80025c0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80025b8:	4b07      	ldr	r3, [pc, #28]	@ (80025d8 <ReadRtcSsrValue+0x3c>)
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	b29b      	uxth	r3, r3
 80025be:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1f5      	bne.n	80025b4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80025c8:	683b      	ldr	r3, [r7, #0]
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	40002800 	.word	0x40002800

080025dc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	460a      	mov	r2, r1
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	4613      	mov	r3, r2
 80025ea:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80025ec:	79ba      	ldrb	r2, [r7, #6]
 80025ee:	491d      	ldr	r1, [pc, #116]	@ (8002664 <LinkTimerAfter+0x88>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	440b      	add	r3, r1
 80025fa:	3315      	adds	r3, #21
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b06      	cmp	r3, #6
 8002604:	d009      	beq.n	800261a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002606:	7bfa      	ldrb	r2, [r7, #15]
 8002608:	4916      	ldr	r1, [pc, #88]	@ (8002664 <LinkTimerAfter+0x88>)
 800260a:	4613      	mov	r3, r2
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	4413      	add	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	440b      	add	r3, r1
 8002614:	3314      	adds	r3, #20
 8002616:	79fa      	ldrb	r2, [r7, #7]
 8002618:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800261a:	79fa      	ldrb	r2, [r7, #7]
 800261c:	4911      	ldr	r1, [pc, #68]	@ (8002664 <LinkTimerAfter+0x88>)
 800261e:	4613      	mov	r3, r2
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	4413      	add	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	440b      	add	r3, r1
 8002628:	3315      	adds	r3, #21
 800262a:	7bfa      	ldrb	r2, [r7, #15]
 800262c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	490c      	ldr	r1, [pc, #48]	@ (8002664 <LinkTimerAfter+0x88>)
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3314      	adds	r3, #20
 800263e:	79ba      	ldrb	r2, [r7, #6]
 8002640:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002642:	79ba      	ldrb	r2, [r7, #6]
 8002644:	4907      	ldr	r1, [pc, #28]	@ (8002664 <LinkTimerAfter+0x88>)
 8002646:	4613      	mov	r3, r2
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	4413      	add	r3, r2
 800264c:	00db      	lsls	r3, r3, #3
 800264e:	440b      	add	r3, r1
 8002650:	3315      	adds	r3, #21
 8002652:	79fa      	ldrb	r2, [r7, #7]
 8002654:	701a      	strb	r2, [r3, #0]

  return;
 8002656:	bf00      	nop
}
 8002658:	3714      	adds	r7, #20
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	20000e0c 	.word	0x20000e0c

08002668 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	4603      	mov	r3, r0
 8002670:	460a      	mov	r2, r1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	4613      	mov	r3, r2
 8002676:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002678:	4b29      	ldr	r3, [pc, #164]	@ (8002720 <LinkTimerBefore+0xb8>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	79ba      	ldrb	r2, [r7, #6]
 8002680:	429a      	cmp	r2, r3
 8002682:	d032      	beq.n	80026ea <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002684:	79ba      	ldrb	r2, [r7, #6]
 8002686:	4927      	ldr	r1, [pc, #156]	@ (8002724 <LinkTimerBefore+0xbc>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	440b      	add	r3, r1
 8002692:	3314      	adds	r3, #20
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002698:	7bfa      	ldrb	r2, [r7, #15]
 800269a:	4922      	ldr	r1, [pc, #136]	@ (8002724 <LinkTimerBefore+0xbc>)
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	440b      	add	r3, r1
 80026a6:	3315      	adds	r3, #21
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80026ac:	79fa      	ldrb	r2, [r7, #7]
 80026ae:	491d      	ldr	r1, [pc, #116]	@ (8002724 <LinkTimerBefore+0xbc>)
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	440b      	add	r3, r1
 80026ba:	3315      	adds	r3, #21
 80026bc:	79ba      	ldrb	r2, [r7, #6]
 80026be:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	4918      	ldr	r1, [pc, #96]	@ (8002724 <LinkTimerBefore+0xbc>)
 80026c4:	4613      	mov	r3, r2
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	4413      	add	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	440b      	add	r3, r1
 80026ce:	3314      	adds	r3, #20
 80026d0:	7bfa      	ldrb	r2, [r7, #15]
 80026d2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80026d4:	79ba      	ldrb	r2, [r7, #6]
 80026d6:	4913      	ldr	r1, [pc, #76]	@ (8002724 <LinkTimerBefore+0xbc>)
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	440b      	add	r3, r1
 80026e2:	3314      	adds	r3, #20
 80026e4:	79fa      	ldrb	r2, [r7, #7]
 80026e6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80026e8:	e014      	b.n	8002714 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80026ea:	79fa      	ldrb	r2, [r7, #7]
 80026ec:	490d      	ldr	r1, [pc, #52]	@ (8002724 <LinkTimerBefore+0xbc>)
 80026ee:	4613      	mov	r3, r2
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	4413      	add	r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	440b      	add	r3, r1
 80026f8:	3315      	adds	r3, #21
 80026fa:	79ba      	ldrb	r2, [r7, #6]
 80026fc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80026fe:	79ba      	ldrb	r2, [r7, #6]
 8002700:	4908      	ldr	r1, [pc, #32]	@ (8002724 <LinkTimerBefore+0xbc>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	3314      	adds	r3, #20
 800270e:	79fa      	ldrb	r2, [r7, #7]
 8002710:	701a      	strb	r2, [r3, #0]
  return;
 8002712:	bf00      	nop
}
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000e9c 	.word	0x20000e9c
 8002724:	20000e0c 	.word	0x20000e0c

08002728 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002732:	4b4e      	ldr	r3, [pc, #312]	@ (800286c <linkTimer+0x144>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b06      	cmp	r3, #6
 800273a:	d118      	bne.n	800276e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800273c:	4b4b      	ldr	r3, [pc, #300]	@ (800286c <linkTimer+0x144>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b4b      	ldr	r3, [pc, #300]	@ (8002870 <linkTimer+0x148>)
 8002744:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002746:	4a49      	ldr	r2, [pc, #292]	@ (800286c <linkTimer+0x144>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800274c:	79fa      	ldrb	r2, [r7, #7]
 800274e:	4949      	ldr	r1, [pc, #292]	@ (8002874 <linkTimer+0x14c>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3315      	adds	r3, #21
 800275c:	2206      	movs	r2, #6
 800275e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002760:	4b45      	ldr	r3, [pc, #276]	@ (8002878 <linkTimer+0x150>)
 8002762:	f04f 32ff 	mov.w	r2, #4294967295
 8002766:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	81fb      	strh	r3, [r7, #14]
 800276c:	e078      	b.n	8002860 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800276e:	f000 f909 	bl	8002984 <ReturnTimeElapsed>
 8002772:	4603      	mov	r3, r0
 8002774:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002776:	79fa      	ldrb	r2, [r7, #7]
 8002778:	493e      	ldr	r1, [pc, #248]	@ (8002874 <linkTimer+0x14c>)
 800277a:	4613      	mov	r3, r2
 800277c:	005b      	lsls	r3, r3, #1
 800277e:	4413      	add	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	440b      	add	r3, r1
 8002784:	3308      	adds	r3, #8
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	89fb      	ldrh	r3, [r7, #14]
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	4419      	add	r1, r3
 800278e:	4839      	ldr	r0, [pc, #228]	@ (8002874 <linkTimer+0x14c>)
 8002790:	4613      	mov	r3, r2
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	4413      	add	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4403      	add	r3, r0
 800279a:	3308      	adds	r3, #8
 800279c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800279e:	79fa      	ldrb	r2, [r7, #7]
 80027a0:	4934      	ldr	r1, [pc, #208]	@ (8002874 <linkTimer+0x14c>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	3308      	adds	r3, #8
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80027b2:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <linkTimer+0x144>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	4619      	mov	r1, r3
 80027ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002874 <linkTimer+0x14c>)
 80027bc:	460b      	mov	r3, r1
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	440b      	add	r3, r1
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	3308      	adds	r3, #8
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d337      	bcc.n	8002840 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80027d0:	4b26      	ldr	r3, [pc, #152]	@ (800286c <linkTimer+0x144>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80027d6:	7b7a      	ldrb	r2, [r7, #13]
 80027d8:	4926      	ldr	r1, [pc, #152]	@ (8002874 <linkTimer+0x14c>)
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	440b      	add	r3, r1
 80027e4:	3315      	adds	r3, #21
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80027ea:	e013      	b.n	8002814 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80027ec:	7b7a      	ldrb	r2, [r7, #13]
 80027ee:	4921      	ldr	r1, [pc, #132]	@ (8002874 <linkTimer+0x14c>)
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	3315      	adds	r3, #21
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002800:	7b7a      	ldrb	r2, [r7, #13]
 8002802:	491c      	ldr	r1, [pc, #112]	@ (8002874 <linkTimer+0x14c>)
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	440b      	add	r3, r1
 800280e:	3315      	adds	r3, #21
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002814:	7b3b      	ldrb	r3, [r7, #12]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d00b      	beq.n	8002832 <linkTimer+0x10a>
 800281a:	7b3a      	ldrb	r2, [r7, #12]
 800281c:	4915      	ldr	r1, [pc, #84]	@ (8002874 <linkTimer+0x14c>)
 800281e:	4613      	mov	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4413      	add	r3, r2
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	440b      	add	r3, r1
 8002828:	3308      	adds	r3, #8
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	429a      	cmp	r2, r3
 8002830:	d2dc      	bcs.n	80027ec <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002832:	7b7a      	ldrb	r2, [r7, #13]
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fecf 	bl	80025dc <LinkTimerAfter>
 800283e:	e00f      	b.n	8002860 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002840:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <linkTimer+0x144>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	79fb      	ldrb	r3, [r7, #7]
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff0c 	bl	8002668 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002850:	4b06      	ldr	r3, [pc, #24]	@ (800286c <linkTimer+0x144>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	b2da      	uxtb	r2, r3
 8002856:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <linkTimer+0x148>)
 8002858:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800285a:	4a04      	ldr	r2, [pc, #16]	@ (800286c <linkTimer+0x144>)
 800285c:	79fb      	ldrb	r3, [r7, #7]
 800285e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002860:	89fb      	ldrh	r3, [r7, #14]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	20000e9c 	.word	0x20000e9c
 8002870:	20000e9d 	.word	0x20000e9d
 8002874:	20000e0c 	.word	0x20000e0c
 8002878:	20000ea0 	.word	0x20000ea0

0800287c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	460a      	mov	r2, r1
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	4613      	mov	r3, r2
 800288a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800288c:	4b39      	ldr	r3, [pc, #228]	@ (8002974 <UnlinkTimer+0xf8>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	b2db      	uxtb	r3, r3
 8002892:	79fa      	ldrb	r2, [r7, #7]
 8002894:	429a      	cmp	r2, r3
 8002896:	d111      	bne.n	80028bc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002898:	4b36      	ldr	r3, [pc, #216]	@ (8002974 <UnlinkTimer+0xf8>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <UnlinkTimer+0xfc>)
 80028a0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80028a2:	79fa      	ldrb	r2, [r7, #7]
 80028a4:	4935      	ldr	r1, [pc, #212]	@ (800297c <UnlinkTimer+0x100>)
 80028a6:	4613      	mov	r3, r2
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	3315      	adds	r3, #21
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002974 <UnlinkTimer+0xf8>)
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e03e      	b.n	800293a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80028bc:	79fa      	ldrb	r2, [r7, #7]
 80028be:	492f      	ldr	r1, [pc, #188]	@ (800297c <UnlinkTimer+0x100>)
 80028c0:	4613      	mov	r3, r2
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4413      	add	r3, r2
 80028c6:	00db      	lsls	r3, r3, #3
 80028c8:	440b      	add	r3, r1
 80028ca:	3314      	adds	r3, #20
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80028d0:	79fa      	ldrb	r2, [r7, #7]
 80028d2:	492a      	ldr	r1, [pc, #168]	@ (800297c <UnlinkTimer+0x100>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	3315      	adds	r3, #21
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80028e4:	79f9      	ldrb	r1, [r7, #7]
 80028e6:	7bfa      	ldrb	r2, [r7, #15]
 80028e8:	4824      	ldr	r0, [pc, #144]	@ (800297c <UnlinkTimer+0x100>)
 80028ea:	460b      	mov	r3, r1
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	440b      	add	r3, r1
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4403      	add	r3, r0
 80028f4:	3315      	adds	r3, #21
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b2d8      	uxtb	r0, r3
 80028fa:	4920      	ldr	r1, [pc, #128]	@ (800297c <UnlinkTimer+0x100>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	3315      	adds	r3, #21
 8002908:	4602      	mov	r2, r0
 800290a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	2b06      	cmp	r3, #6
 8002910:	d013      	beq.n	800293a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002912:	79f9      	ldrb	r1, [r7, #7]
 8002914:	7bba      	ldrb	r2, [r7, #14]
 8002916:	4819      	ldr	r0, [pc, #100]	@ (800297c <UnlinkTimer+0x100>)
 8002918:	460b      	mov	r3, r1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	440b      	add	r3, r1
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4403      	add	r3, r0
 8002922:	3314      	adds	r3, #20
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	b2d8      	uxtb	r0, r3
 8002928:	4914      	ldr	r1, [pc, #80]	@ (800297c <UnlinkTimer+0x100>)
 800292a:	4613      	mov	r3, r2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	4413      	add	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	440b      	add	r3, r1
 8002934:	3314      	adds	r3, #20
 8002936:	4602      	mov	r2, r0
 8002938:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800293a:	79fa      	ldrb	r2, [r7, #7]
 800293c:	490f      	ldr	r1, [pc, #60]	@ (800297c <UnlinkTimer+0x100>)
 800293e:	4613      	mov	r3, r2
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	4413      	add	r3, r2
 8002944:	00db      	lsls	r3, r3, #3
 8002946:	440b      	add	r3, r1
 8002948:	330c      	adds	r3, #12
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800294e:	4b09      	ldr	r3, [pc, #36]	@ (8002974 <UnlinkTimer+0xf8>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b06      	cmp	r3, #6
 8002956:	d107      	bne.n	8002968 <UnlinkTimer+0xec>
 8002958:	79bb      	ldrb	r3, [r7, #6]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800295e:	4b08      	ldr	r3, [pc, #32]	@ (8002980 <UnlinkTimer+0x104>)
 8002960:	f04f 32ff 	mov.w	r2, #4294967295
 8002964:	601a      	str	r2, [r3, #0]
  }

  return;
 8002966:	bf00      	nop
 8002968:	bf00      	nop
}
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	20000e9c 	.word	0x20000e9c
 8002978:	20000e9d 	.word	0x20000e9d
 800297c:	20000e0c 	.word	0x20000e0c
 8002980:	20000ea0 	.word	0x20000ea0

08002984 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800298a:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <ReturnTimeElapsed+0x70>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002992:	d026      	beq.n	80029e2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002994:	f7ff fe02 	bl	800259c <ReadRtcSsrValue>
 8002998:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <ReturnTimeElapsed+0x70>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d805      	bhi.n	80029b0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80029a4:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <ReturnTimeElapsed+0x70>)
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	e00a      	b.n	80029c6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80029b0:	4b11      	ldr	r3, [pc, #68]	@ (80029f8 <ReturnTimeElapsed+0x74>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	461a      	mov	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80029bc:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <ReturnTimeElapsed+0x70>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	4413      	add	r3, r2
 80029c4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <ReturnTimeElapsed+0x78>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	461a      	mov	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	fb02 f303 	mul.w	r3, r2, r3
 80029d2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80029d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002a00 <ReturnTimeElapsed+0x7c>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	40d3      	lsrs	r3, r2
 80029de:	607b      	str	r3, [r7, #4]
 80029e0:	e001      	b.n	80029e6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	b29b      	uxth	r3, r3
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000ea0 	.word	0x20000ea0
 80029f8:	20000ea8 	.word	0x20000ea8
 80029fc:	20000ea6 	.word	0x20000ea6
 8002a00:	20000ea5 	.word	0x20000ea5

08002a04 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d108      	bne.n	8002a26 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a14:	f7ff fdc2 	bl	800259c <ReadRtcSsrValue>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4a21      	ldr	r2, [pc, #132]	@ (8002aa0 <RestartWakeupCounter+0x9c>)
 8002a1c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f001 feb9 	bl	8004796 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002a24:	e039      	b.n	8002a9a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002a26:	88fb      	ldrh	r3, [r7, #6]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d803      	bhi.n	8002a34 <RestartWakeupCounter+0x30>
 8002a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa4 <RestartWakeupCounter+0xa0>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d002      	beq.n	8002a3a <RestartWakeupCounter+0x36>
      Value -= 1;
 8002a34:	88fb      	ldrh	r3, [r7, #6]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002a3a:	bf00      	nop
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <RestartWakeupCounter+0xa4>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f8      	beq.n	8002a3c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002a4a:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <RestartWakeupCounter+0xa4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4b15      	ldr	r3, [pc, #84]	@ (8002aa8 <RestartWakeupCounter+0xa4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002a5a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002a5c:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <RestartWakeupCounter+0xa8>)
 8002a5e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002a62:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002a64:	2003      	movs	r0, #3
 8002a66:	f001 fea4 	bl	80047b2 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002a6a:	4b11      	ldr	r3, [pc, #68]	@ (8002ab0 <RestartWakeupCounter+0xac>)
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	0c1b      	lsrs	r3, r3, #16
 8002a70:	041b      	lsls	r3, r3, #16
 8002a72:	88fa      	ldrh	r2, [r7, #6]
 8002a74:	490e      	ldr	r1, [pc, #56]	@ (8002ab0 <RestartWakeupCounter+0xac>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002a7a:	f7ff fd8f 	bl	800259c <ReadRtcSsrValue>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4a07      	ldr	r2, [pc, #28]	@ (8002aa0 <RestartWakeupCounter+0x9c>)
 8002a82:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002a84:	4b08      	ldr	r3, [pc, #32]	@ (8002aa8 <RestartWakeupCounter+0xa4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <RestartWakeupCounter+0xa4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002a92:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002a94:	f3af 8000 	nop.w
  return ;
 8002a98:	bf00      	nop
}
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000ea0 	.word	0x20000ea0
 8002aa4:	20000ea5 	.word	0x20000ea5
 8002aa8:	20000f84 	.word	0x20000f84
 8002aac:	58000800 	.word	0x58000800
 8002ab0:	40002800 	.word	0x40002800

08002ab4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002aba:	4b45      	ldr	r3, [pc, #276]	@ (8002bd0 <RescheduleTimerList+0x11c>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac6:	d107      	bne.n	8002ad8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002ac8:	bf00      	nop
 8002aca:	4b42      	ldr	r3, [pc, #264]	@ (8002bd4 <RescheduleTimerList+0x120>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1f8      	bne.n	8002aca <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8002bd4 <RescheduleTimerList+0x120>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689a      	ldr	r2, [r3, #8]
 8002ade:	4b3d      	ldr	r3, [pc, #244]	@ (8002bd4 <RescheduleTimerList+0x120>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ae6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8002bd8 <RescheduleTimerList+0x124>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002aee:	7bfa      	ldrb	r2, [r7, #15]
 8002af0:	493a      	ldr	r1, [pc, #232]	@ (8002bdc <RescheduleTimerList+0x128>)
 8002af2:	4613      	mov	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	3308      	adds	r3, #8
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002b02:	f7ff ff3f 	bl	8002984 <ReturnTimeElapsed>
 8002b06:	4603      	mov	r3, r0
 8002b08:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d205      	bcs.n	8002b1e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b16:	4b32      	ldr	r3, [pc, #200]	@ (8002be0 <RescheduleTimerList+0x12c>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
 8002b1c:	e04d      	b.n	8002bba <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	4a30      	ldr	r2, [pc, #192]	@ (8002be4 <RescheduleTimerList+0x130>)
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	b292      	uxth	r2, r2
 8002b26:	4413      	add	r3, r2
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d906      	bls.n	8002b3e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002b30:	4b2c      	ldr	r3, [pc, #176]	@ (8002be4 <RescheduleTimerList+0x130>)
 8002b32:	881b      	ldrh	r3, [r3, #0]
 8002b34:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <RescheduleTimerList+0x12c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e03d      	b.n	8002bba <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <RescheduleTimerList+0x12c>)
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002b4e:	e034      	b.n	8002bba <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002b50:	7bfa      	ldrb	r2, [r7, #15]
 8002b52:	4922      	ldr	r1, [pc, #136]	@ (8002bdc <RescheduleTimerList+0x128>)
 8002b54:	4613      	mov	r3, r2
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	3308      	adds	r3, #8
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d20a      	bcs.n	8002b7e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	491c      	ldr	r1, [pc, #112]	@ (8002bdc <RescheduleTimerList+0x128>)
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	4413      	add	r3, r2
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	440b      	add	r3, r1
 8002b76:	3308      	adds	r3, #8
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e013      	b.n	8002ba6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	4916      	ldr	r1, [pc, #88]	@ (8002bdc <RescheduleTimerList+0x128>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	4413      	add	r3, r2
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	1ac9      	subs	r1, r1, r3
 8002b96:	4811      	ldr	r0, [pc, #68]	@ (8002bdc <RescheduleTimerList+0x128>)
 8002b98:	4613      	mov	r3, r2
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	4413      	add	r3, r2
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	4403      	add	r3, r0
 8002ba2:	3308      	adds	r3, #8
 8002ba4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	490c      	ldr	r1, [pc, #48]	@ (8002bdc <RescheduleTimerList+0x128>)
 8002baa:	4613      	mov	r3, r2
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	4413      	add	r3, r2
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3315      	adds	r3, #21
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	2b06      	cmp	r3, #6
 8002bbe:	d1c7      	bne.n	8002b50 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002bc0:	89bb      	ldrh	r3, [r7, #12]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff ff1e 	bl	8002a04 <RestartWakeupCounter>

  return ;
 8002bc8:	bf00      	nop
}
 8002bca:	3710      	adds	r7, #16
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40002800 	.word	0x40002800
 8002bd4:	20000f84 	.word	0x20000f84
 8002bd8:	20000e9c 	.word	0x20000e9c
 8002bdc:	20000e0c 	.word	0x20000e0c
 8002be0:	20000ea4 	.word	0x20000ea4
 8002be4:	20000eaa 	.word	0x20000eaa

08002be8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b08a      	sub	sp, #40	@ 0x28
 8002bec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bee:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf2:	617b      	str	r3, [r7, #20]
  return(result);
 8002bf4:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002bf8:	b672      	cpsid	i
}
 8002bfa:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002bfc:	4b59      	ldr	r3, [pc, #356]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	22ca      	movs	r2, #202	@ 0xca
 8002c02:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c04:	4b57      	ldr	r3, [pc, #348]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2253      	movs	r2, #83	@ 0x53
 8002c0a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002c0c:	4b55      	ldr	r3, [pc, #340]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002c1c:	4b52      	ldr	r3, [pc, #328]	@ (8002d68 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002c24:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c28:	4950      	ldr	r1, [pc, #320]	@ (8002d6c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	330c      	adds	r3, #12
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d16e      	bne.n	8002d1c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002c3e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c42:	494a      	ldr	r1, [pc, #296]	@ (8002d6c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c44:	4613      	mov	r3, r2
 8002c46:	005b      	lsls	r3, r3, #1
 8002c48:	4413      	add	r3, r2
 8002c4a:	00db      	lsls	r3, r3, #3
 8002c4c:	440b      	add	r3, r1
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002c52:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c56:	4945      	ldr	r1, [pc, #276]	@ (8002d6c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c58:	4613      	mov	r3, r2
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	4413      	add	r3, r2
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	440b      	add	r3, r1
 8002c62:	3310      	adds	r3, #16
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002c68:	4b41      	ldr	r3, [pc, #260]	@ (8002d70 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d04c      	beq.n	8002d0c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002c72:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002c76:	493d      	ldr	r1, [pc, #244]	@ (8002d6c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	330d      	adds	r3, #13
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d124      	bne.n	8002cd6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002c8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fdf2 	bl	800287c <UnlinkTimer>
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ca2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002ca4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002ca8:	4930      	ldr	r1, [pc, #192]	@ (8002d6c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002caa:	4613      	mov	r3, r2
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	4413      	add	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f9b8 	bl	8003034 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002cc4:	4b27      	ldr	r3, [pc, #156]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	22ca      	movs	r2, #202	@ 0xca
 8002cca:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ccc:	4b25      	ldr	r3, [pc, #148]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2253      	movs	r2, #83	@ 0x53
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cd4:	e012      	b.n	8002cfc <HW_TS_RTC_Wakeup_Handler+0x114>
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f383 8810 	msr	PRIMASK, r3
}
 8002ce0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002ce2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f000 f920 	bl	8002f2c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002cec:	4b1d      	ldr	r3, [pc, #116]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	22ca      	movs	r2, #202	@ 0xca
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2253      	movs	r2, #83	@ 0x53
 8002cfa:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002cfc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	4619      	mov	r1, r3
 8002d04:	69b8      	ldr	r0, [r7, #24]
 8002d06:	f000 fa1b 	bl	8003140 <HW_TS_RTC_Int_AppNot>
 8002d0a:	e022      	b.n	8002d52 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002d0c:	f7ff fed2 	bl	8002ab4 <RescheduleTimerList>
 8002d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d12:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	f383 8810 	msr	PRIMASK, r3
}
 8002d1a:	e01a      	b.n	8002d52 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002d1c:	bf00      	nop
 8002d1e:	4b11      	ldr	r3, [pc, #68]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f8      	beq.n	8002d1e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b0b      	ldr	r3, [pc, #44]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002d3c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d74 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002d40:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f383 8810 	msr	PRIMASK, r3
}
 8002d50:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002d52:	4b04      	ldr	r3, [pc, #16]	@ (8002d64 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	22ff      	movs	r2, #255	@ 0xff
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002d5a:	bf00      	nop
}
 8002d5c:	3728      	adds	r7, #40	@ 0x28
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000f84 	.word	0x20000f84
 8002d68:	20000e9c 	.word	0x20000e9c
 8002d6c:	20000e0c 	.word	0x20000e0c
 8002d70:	20000ea4 	.word	0x20000ea4
 8002d74:	58000800 	.word	0x58000800

08002d78 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	6039      	str	r1, [r7, #0]
 8002d82:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d84:	4b5e      	ldr	r3, [pc, #376]	@ (8002f00 <HW_TS_Init+0x188>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	22ca      	movs	r2, #202	@ 0xca
 8002d8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8002f00 <HW_TS_Init+0x188>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2253      	movs	r2, #83	@ 0x53
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d94:	4b5b      	ldr	r3, [pc, #364]	@ (8002f04 <HW_TS_Init+0x18c>)
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	4a5a      	ldr	r2, [pc, #360]	@ (8002f04 <HW_TS_Init+0x18c>)
 8002d9a:	f043 0320 	orr.w	r3, r3, #32
 8002d9e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002da0:	4b58      	ldr	r3, [pc, #352]	@ (8002f04 <HW_TS_Init+0x18c>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	f1c3 0304 	rsb	r3, r3, #4
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	4b55      	ldr	r3, [pc, #340]	@ (8002f08 <HW_TS_Init+0x190>)
 8002db4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002db6:	4b53      	ldr	r3, [pc, #332]	@ (8002f04 <HW_TS_Init+0x18c>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002dbe:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002dc2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	fa92 f2a2 	rbit	r2, r2
 8002dca:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	2a00      	cmp	r2, #0
 8002dd4:	d101      	bne.n	8002dda <HW_TS_Init+0x62>
  {
    return 32U;
 8002dd6:	2220      	movs	r2, #32
 8002dd8:	e003      	b.n	8002de2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002dda:	697a      	ldr	r2, [r7, #20]
 8002ddc:	fab2 f282 	clz	r2, r2
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	40d3      	lsrs	r3, r2
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	4b48      	ldr	r3, [pc, #288]	@ (8002f0c <HW_TS_Init+0x194>)
 8002dec:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002dee:	4b45      	ldr	r3, [pc, #276]	@ (8002f04 <HW_TS_Init+0x18c>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	b29a      	uxth	r2, r3
 8002dfe:	4b44      	ldr	r3, [pc, #272]	@ (8002f10 <HW_TS_Init+0x198>)
 8002e00:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002e02:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HW_TS_Init+0x198>)
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	4a40      	ldr	r2, [pc, #256]	@ (8002f0c <HW_TS_Init+0x194>)
 8002e0a:	7812      	ldrb	r2, [r2, #0]
 8002e0c:	fb02 f303 	mul.w	r3, r2, r3
 8002e10:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002e14:	4a3c      	ldr	r2, [pc, #240]	@ (8002f08 <HW_TS_Init+0x190>)
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	40d3      	lsrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d904      	bls.n	8002e30 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002e26:	4b3b      	ldr	r3, [pc, #236]	@ (8002f14 <HW_TS_Init+0x19c>)
 8002e28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002e2c:	801a      	strh	r2, [r3, #0]
 8002e2e:	e003      	b.n	8002e38 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	4b37      	ldr	r3, [pc, #220]	@ (8002f14 <HW_TS_Init+0x19c>)
 8002e36:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e38:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e3c:	f7ff fb9c 	bl	8002578 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002e40:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e44:	f7ff fb84 	bl	8002550 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002e48:	79fb      	ldrb	r3, [r7, #7]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d13d      	bne.n	8002eca <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002e4e:	4b32      	ldr	r3, [pc, #200]	@ (8002f18 <HW_TS_Init+0x1a0>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e54:	4b31      	ldr	r3, [pc, #196]	@ (8002f1c <HW_TS_Init+0x1a4>)
 8002e56:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	77fb      	strb	r3, [r7, #31]
 8002e60:	e00c      	b.n	8002e7c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002e62:	7ffa      	ldrb	r2, [r7, #31]
 8002e64:	492e      	ldr	r1, [pc, #184]	@ (8002f20 <HW_TS_Init+0x1a8>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	330c      	adds	r3, #12
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002e76:	7ffb      	ldrb	r3, [r7, #31]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	77fb      	strb	r3, [r7, #31]
 8002e7c:	7ffb      	ldrb	r3, [r7, #31]
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d9ef      	bls.n	8002e62 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002e82:	4b28      	ldr	r3, [pc, #160]	@ (8002f24 <HW_TS_Init+0x1ac>)
 8002e84:	2206      	movs	r2, #6
 8002e86:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002e88:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <HW_TS_Init+0x188>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689a      	ldr	r2, [r3, #8]
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002f00 <HW_TS_Init+0x188>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e96:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002e98:	4b19      	ldr	r3, [pc, #100]	@ (8002f00 <HW_TS_Init+0x188>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <HW_TS_Init+0x188>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002ea8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8002f28 <HW_TS_Init+0x1b0>)
 8002eac:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002eb0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002eb2:	2003      	movs	r0, #3
 8002eb4:	f001 fc7d 	bl	80047b2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002eb8:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <HW_TS_Init+0x188>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HW_TS_Init+0x188>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	e009      	b.n	8002ede <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002eca:	4b0d      	ldr	r3, [pc, #52]	@ (8002f00 <HW_TS_Init+0x188>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002ed8:	2003      	movs	r0, #3
 8002eda:	f001 fc5c 	bl	8004796 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002ede:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <HW_TS_Init+0x188>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	22ff      	movs	r2, #255	@ 0xff
 8002ee4:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	2103      	movs	r1, #3
 8002eea:	2003      	movs	r0, #3
 8002eec:	f001 fc11 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	f001 fc28 	bl	8004746 <HAL_NVIC_EnableIRQ>

  return;
 8002ef6:	bf00      	nop
}
 8002ef8:	3720      	adds	r7, #32
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000f84 	.word	0x20000f84
 8002f04:	40002800 	.word	0x40002800
 8002f08:	20000ea5 	.word	0x20000ea5
 8002f0c:	20000ea6 	.word	0x20000ea6
 8002f10:	20000ea8 	.word	0x20000ea8
 8002f14:	20000eaa 	.word	0x20000eaa
 8002f18:	20000ea4 	.word	0x20000ea4
 8002f1c:	20000ea0 	.word	0x20000ea0
 8002f20:	20000e0c 	.word	0x20000e0c
 8002f24:	20000e9c 	.word	0x20000e9c
 8002f28:	58000800 	.word	0x58000800

08002f2c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f36:	f3ef 8310 	mrs	r3, PRIMASK
 8002f3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002f3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f40:	b672      	cpsid	i
}
 8002f42:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002f44:	2003      	movs	r0, #3
 8002f46:	f001 fc0c 	bl	8004762 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002f4a:	4b34      	ldr	r3, [pc, #208]	@ (800301c <HW_TS_Stop+0xf0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	22ca      	movs	r2, #202	@ 0xca
 8002f50:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f52:	4b32      	ldr	r3, [pc, #200]	@ (800301c <HW_TS_Stop+0xf0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2253      	movs	r2, #83	@ 0x53
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002f5a:	79fa      	ldrb	r2, [r7, #7]
 8002f5c:	4930      	ldr	r1, [pc, #192]	@ (8003020 <HW_TS_Stop+0xf4>)
 8002f5e:	4613      	mov	r3, r2
 8002f60:	005b      	lsls	r3, r3, #1
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	330c      	adds	r3, #12
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d142      	bne.n	8002ff8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002f72:	79fb      	ldrb	r3, [r7, #7]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fc80 	bl	800287c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002f7c:	4b29      	ldr	r3, [pc, #164]	@ (8003024 <HW_TS_Stop+0xf8>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f82:	7cfb      	ldrb	r3, [r7, #19]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d12f      	bne.n	8002fe8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002f88:	4b27      	ldr	r3, [pc, #156]	@ (8003028 <HW_TS_Stop+0xfc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f94:	d107      	bne.n	8002fa6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002f96:	bf00      	nop
 8002f98:	4b20      	ldr	r3, [pc, #128]	@ (800301c <HW_TS_Stop+0xf0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f8      	bne.n	8002f98 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800301c <HW_TS_Stop+0xf0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	4b1b      	ldr	r3, [pc, #108]	@ (800301c <HW_TS_Stop+0xf0>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fb4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002fb6:	bf00      	nop
 8002fb8:	4b18      	ldr	r3, [pc, #96]	@ (800301c <HW_TS_Stop+0xf0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f8      	beq.n	8002fb8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002fc6:	4b15      	ldr	r3, [pc, #84]	@ (800301c <HW_TS_Stop+0xf0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	b2da      	uxtb	r2, r3
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <HW_TS_Stop+0xf0>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002fd6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002fd8:	4b14      	ldr	r3, [pc, #80]	@ (800302c <HW_TS_Stop+0x100>)
 8002fda:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002fde:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002fe0:	2003      	movs	r0, #3
 8002fe2:	f001 fbe6 	bl	80047b2 <HAL_NVIC_ClearPendingIRQ>
 8002fe6:	e007      	b.n	8002ff8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002fe8:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <HW_TS_Stop+0x104>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	7cfa      	ldrb	r2, [r7, #19]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d001      	beq.n	8002ff8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002ff4:	f7ff fd5e 	bl	8002ab4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002ff8:	4b08      	ldr	r3, [pc, #32]	@ (800301c <HW_TS_Stop+0xf0>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	22ff      	movs	r2, #255	@ 0xff
 8002ffe:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003000:	2003      	movs	r0, #3
 8003002:	f001 fba0 	bl	8004746 <HAL_NVIC_EnableIRQ>
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003012:	bf00      	nop
}
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	20000f84 	.word	0x20000f84
 8003020:	20000e0c 	.word	0x20000e0c
 8003024:	20000e9c 	.word	0x20000e9c
 8003028:	40002800 	.word	0x40002800
 800302c:	58000800 	.word	0x58000800
 8003030:	20000e9d 	.word	0x20000e9d

08003034 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b086      	sub	sp, #24
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	6039      	str	r1, [r7, #0]
 800303e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003040:	79fa      	ldrb	r2, [r7, #7]
 8003042:	493b      	ldr	r1, [pc, #236]	@ (8003130 <HW_TS_Start+0xfc>)
 8003044:	4613      	mov	r3, r2
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	4413      	add	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	440b      	add	r3, r1
 800304e:	330c      	adds	r3, #12
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d103      	bne.n	8003060 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff66 	bl	8002f2c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003060:	f3ef 8310 	mrs	r3, PRIMASK
 8003064:	60fb      	str	r3, [r7, #12]
  return(result);
 8003066:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800306a:	b672      	cpsid	i
}
 800306c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800306e:	2003      	movs	r0, #3
 8003070:	f001 fb77 	bl	8004762 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003074:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <HW_TS_Start+0x100>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	22ca      	movs	r2, #202	@ 0xca
 800307a:	625a      	str	r2, [r3, #36]	@ 0x24
 800307c:	4b2d      	ldr	r3, [pc, #180]	@ (8003134 <HW_TS_Start+0x100>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2253      	movs	r2, #83	@ 0x53
 8003082:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003084:	79fa      	ldrb	r2, [r7, #7]
 8003086:	492a      	ldr	r1, [pc, #168]	@ (8003130 <HW_TS_Start+0xfc>)
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	330c      	adds	r3, #12
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003098:	79fa      	ldrb	r2, [r7, #7]
 800309a:	4925      	ldr	r1, [pc, #148]	@ (8003130 <HW_TS_Start+0xfc>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	3308      	adds	r3, #8
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80030ac:	79fa      	ldrb	r2, [r7, #7]
 80030ae:	4920      	ldr	r1, [pc, #128]	@ (8003130 <HW_TS_Start+0xfc>)
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3304      	adds	r3, #4
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80030c0:	79fb      	ldrb	r3, [r7, #7]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fb30 	bl	8002728 <linkTimer>
 80030c8:	4603      	mov	r3, r0
 80030ca:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80030cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003138 <HW_TS_Start+0x104>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80030d2:	4b1a      	ldr	r3, [pc, #104]	@ (800313c <HW_TS_Start+0x108>)
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	7c7a      	ldrb	r2, [r7, #17]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d002      	beq.n	80030e4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80030de:	f7ff fce9 	bl	8002ab4 <RescheduleTimerList>
 80030e2:	e013      	b.n	800310c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80030e4:	79fa      	ldrb	r2, [r7, #7]
 80030e6:	4912      	ldr	r1, [pc, #72]	@ (8003130 <HW_TS_Start+0xfc>)
 80030e8:	4613      	mov	r3, r2
 80030ea:	005b      	lsls	r3, r3, #1
 80030ec:	4413      	add	r3, r2
 80030ee:	00db      	lsls	r3, r3, #3
 80030f0:	440b      	add	r3, r1
 80030f2:	3308      	adds	r3, #8
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	8a7b      	ldrh	r3, [r7, #18]
 80030f8:	79fa      	ldrb	r2, [r7, #7]
 80030fa:	1ac9      	subs	r1, r1, r3
 80030fc:	480c      	ldr	r0, [pc, #48]	@ (8003130 <HW_TS_Start+0xfc>)
 80030fe:	4613      	mov	r3, r2
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	4413      	add	r3, r2
 8003104:	00db      	lsls	r3, r3, #3
 8003106:	4403      	add	r3, r0
 8003108:	3308      	adds	r3, #8
 800310a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800310c:	4b09      	ldr	r3, [pc, #36]	@ (8003134 <HW_TS_Start+0x100>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	22ff      	movs	r2, #255	@ 0xff
 8003112:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003114:	2003      	movs	r0, #3
 8003116:	f001 fb16 	bl	8004746 <HAL_NVIC_EnableIRQ>
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f383 8810 	msr	PRIMASK, r3
}
 8003124:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003126:	bf00      	nop
}
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000e0c 	.word	0x20000e0c
 8003134:	20000f84 	.word	0x20000f84
 8003138:	20000e9c 	.word	0x20000e9c
 800313c:	20000e9d 	.word	0x20000e9d

08003140 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	460b      	mov	r3, r1
 800314a:	607a      	str	r2, [r7, #4]
 800314c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4798      	blx	r3

  return;
 8003152:	bf00      	nop
}
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b086      	sub	sp, #24
 8003160:	af00      	add	r7, sp, #0
 8003162:	60b9      	str	r1, [r7, #8]
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	4603      	mov	r3, r0
 8003168:	73fb      	strb	r3, [r7, #15]
 800316a:	4613      	mov	r3, r2
 800316c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003172:	2300      	movs	r3, #0
 8003174:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003176:	7bfb      	ldrb	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10e      	bne.n	800319a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 800317c:	4a17      	ldr	r2, [pc, #92]	@ (80031dc <HW_UART_Transmit_DMA+0x80>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003182:	4b17      	ldr	r3, [pc, #92]	@ (80031e0 <HW_UART_Transmit_DMA+0x84>)
 8003184:	4a17      	ldr	r2, [pc, #92]	@ (80031e4 <HW_UART_Transmit_DMA+0x88>)
 8003186:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003188:	89bb      	ldrh	r3, [r7, #12]
 800318a:	461a      	mov	r2, r3
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	4814      	ldr	r0, [pc, #80]	@ (80031e0 <HW_UART_Transmit_DMA+0x84>)
 8003190:	f007 fb40 	bl	800a814 <HAL_UART_Transmit_DMA>
 8003194:	4603      	mov	r3, r0
 8003196:	75fb      	strb	r3, [r7, #23]
            break;
 8003198:	e000      	b.n	800319c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800319a:	bf00      	nop
    }

    switch (hal_status)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d816      	bhi.n	80031d0 <HW_UART_Transmit_DMA+0x74>
 80031a2:	a201      	add	r2, pc, #4	@ (adr r2, 80031a8 <HW_UART_Transmit_DMA+0x4c>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031b9 	.word	0x080031b9
 80031ac:	080031bf 	.word	0x080031bf
 80031b0:	080031c5 	.word	0x080031c5
 80031b4:	080031cb 	.word	0x080031cb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80031b8:	2300      	movs	r3, #0
 80031ba:	75bb      	strb	r3, [r7, #22]
            break;
 80031bc:	e009      	b.n	80031d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80031be:	2301      	movs	r3, #1
 80031c0:	75bb      	strb	r3, [r7, #22]
            break;
 80031c2:	e006      	b.n	80031d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80031c4:	2302      	movs	r3, #2
 80031c6:	75bb      	strb	r3, [r7, #22]
            break;
 80031c8:	e003      	b.n	80031d2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80031ca:	2303      	movs	r3, #3
 80031cc:	75bb      	strb	r3, [r7, #22]
            break;
 80031ce:	e000      	b.n	80031d2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80031d0:	bf00      	nop
    }

    return hw_status;
 80031d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3718      	adds	r7, #24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000eac 	.word	0x20000eac
 80031e0:	20001058 	.word	0x20001058
 80031e4:	40013800 	.word	0x40013800

080031e8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_UART_TxCpltCallback+0x34>)
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d107      	bne.n	800320c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 80031fc:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <HAL_UART_TxCpltCallback+0x38>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003204:	4b06      	ldr	r3, [pc, #24]	@ (8003220 <HAL_UART_TxCpltCallback+0x38>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4798      	blx	r3
            }
            break;
 800320a:	e001      	b.n	8003210 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800320c:	bf00      	nop
 800320e:	e000      	b.n	8003212 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003210:	bf00      	nop
    }

    return;
 8003212:	bf00      	nop
}
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	40013800 	.word	0x40013800
 8003220:	20000eac 	.word	0x20000eac

08003224 <Kernel_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Kernel_Init (void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
	SET_RGB_COLOR(OFF);
 8003228:	2201      	movs	r2, #1
 800322a:	2110      	movs	r1, #16
 800322c:	4817      	ldr	r0, [pc, #92]	@ (800328c <Kernel_Init+0x68>)
 800322e:	f001 fe65 	bl	8004efc <HAL_GPIO_WritePin>
 8003232:	2201      	movs	r2, #1
 8003234:	2102      	movs	r1, #2
 8003236:	4816      	ldr	r0, [pc, #88]	@ (8003290 <Kernel_Init+0x6c>)
 8003238:	f001 fe60 	bl	8004efc <HAL_GPIO_WritePin>
 800323c:	2201      	movs	r2, #1
 800323e:	2101      	movs	r1, #1
 8003240:	4813      	ldr	r0, [pc, #76]	@ (8003290 <Kernel_Init+0x6c>)
 8003242:	f001 fe5b 	bl	8004efc <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 8003246:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800324a:	f7ff f891 	bl	8002370 <HAL_Delay>

	tsCmd.MODE		= Start;
 800324e:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <Kernel_Init+0x70>)
 8003250:	2201      	movs	r2, #1
 8003252:	755a      	strb	r2, [r3, #21]
	tsCmd.LED		= true;
 8003254:	4b0f      	ldr	r3, [pc, #60]	@ (8003294 <Kernel_Init+0x70>)
 8003256:	2201      	movs	r2, #1
 8003258:	75da      	strb	r2, [r3, #23]
	tsCmd.HLP 		= true;
 800325a:	4b0e      	ldr	r3, [pc, #56]	@ (8003294 <Kernel_Init+0x70>)
 800325c:	2201      	movs	r2, #1
 800325e:	759a      	strb	r2, [r3, #22]

	tsSystem.Power	= true;
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <Kernel_Init+0x74>)
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
	tsBle.Connected	= false;
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <Kernel_Init+0x78>)
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]

	DIAG ("-----------------------------------------\r\n");
 800326c:	480c      	ldr	r0, [pc, #48]	@ (80032a0 <Kernel_Init+0x7c>)
 800326e:	f7ff f90b 	bl	8002488 <DIAG>
	HAL_Delay(1);
 8003272:	2001      	movs	r0, #1
 8003274:	f7ff f87c 	bl	8002370 <HAL_Delay>
	DIAG (" System ON ->\t%s\r\n\n", DEVICE_INFO);
 8003278:	490a      	ldr	r1, [pc, #40]	@ (80032a4 <Kernel_Init+0x80>)
 800327a:	480b      	ldr	r0, [pc, #44]	@ (80032a8 <Kernel_Init+0x84>)
 800327c:	f7ff f904 	bl	8002488 <DIAG>
	HAL_Delay(1);
 8003280:	2001      	movs	r0, #1
 8003282:	f7ff f875 	bl	8002370 <HAL_Delay>

	// Wait until USB being recognised by the PC.


}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	48001000 	.word	0x48001000
 8003290:	48000400 	.word	0x48000400
 8003294:	20000eb4 	.word	0x20000eb4
 8003298:	20000ed4 	.word	0x20000ed4
 800329c:	200011f4 	.word	0x200011f4
 80032a0:	08017064 	.word	0x08017064
 80032a4:	08017090 	.word	0x08017090
 80032a8:	080170a4 	.word	0x080170a4

080032ac <Main_Process>:
//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//

void Main_Process (void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0

	switch (eSYS_STATE)
 80032b0:	4b94      	ldr	r3, [pc, #592]	@ (8003504 <Main_Process+0x258>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b04      	cmp	r3, #4
 80032b6:	f000 80ea 	beq.w	800348e <Main_Process+0x1e2>
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	dc03      	bgt.n	80032c6 <Main_Process+0x1a>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d005      	beq.n	80032ce <Main_Process+0x22>
 80032c2:	2b03      	cmp	r3, #3
 80032c4:	d01a      	beq.n	80032fc <Main_Process+0x50>
	{

	default:
		eSYS_STATE = SYS_STATE_INIT;
 80032c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003504 <Main_Process+0x258>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
		break;
 80032cc:	e118      	b.n	8003500 <Main_Process+0x254>
		//----------------------------------------------------

	case SYS_STATE_INIT:

		AFE_Init();
 80032ce:	f7fd fcc9 	bl	8000c64 <AFE_Init>
		IMU_Init( &hi2c1 );
 80032d2:	488d      	ldr	r0, [pc, #564]	@ (8003508 <Main_Process+0x25c>)
 80032d4:	f7fe f9d4 	bl	8001680 <IMU_Init>
		BLE_Init();
 80032d8:	f7fd ff42 	bl	8001160 <BLE_Init>
		Debug_Init();
 80032dc:	f7ff f8ac 	bl	8002438 <Debug_Init>
		Timer_Init();
 80032e0:	f000 ffde 	bl	80042a0 <Timer_Init>
		BLE_Init();
 80032e4:	f7fd ff3c 	bl	8001160 <BLE_Init>

		DIAG ("-----------------------------------------\r\n\n");
 80032e8:	4888      	ldr	r0, [pc, #544]	@ (800350c <Main_Process+0x260>)
 80032ea:	f7ff f8cd 	bl	8002488 <DIAG>
		HAL_Delay(1);
 80032ee:	2001      	movs	r0, #1
 80032f0:	f7ff f83e 	bl	8002370 <HAL_Delay>
		eSYS_STATE= SYS_STATE_NORMAL;
 80032f4:	4b83      	ldr	r3, [pc, #524]	@ (8003504 <Main_Process+0x258>)
 80032f6:	2203      	movs	r2, #3
 80032f8:	701a      	strb	r2, [r3, #0]
		break;
 80032fa:	e101      	b.n	8003500 <Main_Process+0x254>
		//----------------------------------------------------

	case SYS_STATE_NORMAL:

		if (tsSystem.Power)
 80032fc:	4b84      	ldr	r3, [pc, #528]	@ (8003510 <Main_Process+0x264>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80b1 	beq.w	8003468 <Main_Process+0x1bc>
		{

			AFE_Control();
 8003306:	f7fd fccf 	bl	8000ca8 <AFE_Control>

	        #ifdef IMU_ENABLE
				IMU_Control();
	        #endif

			Debug_Control();
 800330a:	f7ff f8a1 	bl	8002450 <Debug_Control>

			#ifdef WBxx_BLE
				BLE_Control();
 800330e:	f7fd ff3f 	bl	8001190 <BLE_Control>
			#endif

			if (!tsBle.Connected)
 8003312:	4b80      	ldr	r3, [pc, #512]	@ (8003514 <Main_Process+0x268>)
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d112      	bne.n	8003342 <Main_Process+0x96>
			{
				SET_RGB_COLOR(GREEN);
 800331c:	2201      	movs	r2, #1
 800331e:	2110      	movs	r1, #16
 8003320:	487d      	ldr	r0, [pc, #500]	@ (8003518 <Main_Process+0x26c>)
 8003322:	f001 fdeb 	bl	8004efc <HAL_GPIO_WritePin>
 8003326:	2200      	movs	r2, #0
 8003328:	2102      	movs	r1, #2
 800332a:	487c      	ldr	r0, [pc, #496]	@ (800351c <Main_Process+0x270>)
 800332c:	f001 fde6 	bl	8004efc <HAL_GPIO_WritePin>
 8003330:	2201      	movs	r2, #1
 8003332:	2101      	movs	r1, #1
 8003334:	4879      	ldr	r0, [pc, #484]	@ (800351c <Main_Process+0x270>)
 8003336:	f001 fde1 	bl	8004efc <HAL_GPIO_WritePin>

				// If BLE is disconnected, keep the timestamp zero
				tsBle.Timestamp = 0;
 800333a:	4b76      	ldr	r3, [pc, #472]	@ (8003514 <Main_Process+0x268>)
 800333c:	2200      	movs	r2, #0
 800333e:	715a      	strb	r2, [r3, #5]
 8003340:	e0a1      	b.n	8003486 <Main_Process+0x1da>
			}
			else
			{
				if (tsTimer.TimeFlag)
 8003342:	4b77      	ldr	r3, [pc, #476]	@ (8003520 <Main_Process+0x274>)
 8003344:	789b      	ldrb	r3, [r3, #2]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 809c 	beq.w	8003486 <Main_Process+0x1da>
				{
					tsTimer.TimeFlag = false;
 800334e:	4b74      	ldr	r3, [pc, #464]	@ (8003520 <Main_Process+0x274>)
 8003350:	2200      	movs	r2, #0
 8003352:	709a      	strb	r2, [r3, #2]

					switch (LedRGB.color)
 8003354:	4b73      	ldr	r3, [pc, #460]	@ (8003524 <Main_Process+0x278>)
 8003356:	791b      	ldrb	r3, [r3, #4]
 8003358:	2b07      	cmp	r3, #7
 800335a:	d813      	bhi.n	8003384 <Main_Process+0xd8>
 800335c:	a201      	add	r2, pc, #4	@ (adr r2, 8003364 <Main_Process+0xb8>)
 800335e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003362:	bf00      	nop
 8003364:	080033ab 	.word	0x080033ab
 8003368:	08003443 	.word	0x08003443
 800336c:	08003385 	.word	0x08003385
 8003370:	080033f7 	.word	0x080033f7
 8003374:	080033d1 	.word	0x080033d1
 8003378:	08003385 	.word	0x08003385
 800337c:	08003385 	.word	0x08003385
 8003380:	0800341d 	.word	0x0800341d
					{
					default:
						SET_RGB_COLOR(OFF);
 8003384:	2201      	movs	r2, #1
 8003386:	2110      	movs	r1, #16
 8003388:	4863      	ldr	r0, [pc, #396]	@ (8003518 <Main_Process+0x26c>)
 800338a:	f001 fdb7 	bl	8004efc <HAL_GPIO_WritePin>
 800338e:	2201      	movs	r2, #1
 8003390:	2102      	movs	r1, #2
 8003392:	4862      	ldr	r0, [pc, #392]	@ (800351c <Main_Process+0x270>)
 8003394:	f001 fdb2 	bl	8004efc <HAL_GPIO_WritePin>
 8003398:	2201      	movs	r2, #1
 800339a:	2101      	movs	r1, #1
 800339c:	485f      	ldr	r0, [pc, #380]	@ (800351c <Main_Process+0x270>)
 800339e:	f001 fdad 	bl	8004efc <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 80033a2:	4b60      	ldr	r3, [pc, #384]	@ (8003524 <Main_Process+0x278>)
 80033a4:	2204      	movs	r2, #4
 80033a6:	711a      	strb	r2, [r3, #4]
						break;
 80033a8:	e06d      	b.n	8003486 <Main_Process+0x1da>

					case OFF:
						SET_RGB_COLOR(OFF);
 80033aa:	2201      	movs	r2, #1
 80033ac:	2110      	movs	r1, #16
 80033ae:	485a      	ldr	r0, [pc, #360]	@ (8003518 <Main_Process+0x26c>)
 80033b0:	f001 fda4 	bl	8004efc <HAL_GPIO_WritePin>
 80033b4:	2201      	movs	r2, #1
 80033b6:	2102      	movs	r1, #2
 80033b8:	4858      	ldr	r0, [pc, #352]	@ (800351c <Main_Process+0x270>)
 80033ba:	f001 fd9f 	bl	8004efc <HAL_GPIO_WritePin>
 80033be:	2201      	movs	r2, #1
 80033c0:	2101      	movs	r1, #1
 80033c2:	4856      	ldr	r0, [pc, #344]	@ (800351c <Main_Process+0x270>)
 80033c4:	f001 fd9a 	bl	8004efc <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 80033c8:	4b56      	ldr	r3, [pc, #344]	@ (8003524 <Main_Process+0x278>)
 80033ca:	2204      	movs	r2, #4
 80033cc:	711a      	strb	r2, [r3, #4]
						break;
 80033ce:	e05a      	b.n	8003486 <Main_Process+0x1da>

					case BLUE:
						SET_RGB_COLOR(BLUE);
 80033d0:	2201      	movs	r2, #1
 80033d2:	2110      	movs	r1, #16
 80033d4:	4850      	ldr	r0, [pc, #320]	@ (8003518 <Main_Process+0x26c>)
 80033d6:	f001 fd91 	bl	8004efc <HAL_GPIO_WritePin>
 80033da:	2201      	movs	r2, #1
 80033dc:	2102      	movs	r1, #2
 80033de:	484f      	ldr	r0, [pc, #316]	@ (800351c <Main_Process+0x270>)
 80033e0:	f001 fd8c 	bl	8004efc <HAL_GPIO_WritePin>
 80033e4:	2200      	movs	r2, #0
 80033e6:	2101      	movs	r1, #1
 80033e8:	484c      	ldr	r0, [pc, #304]	@ (800351c <Main_Process+0x270>)
 80033ea:	f001 fd87 	bl	8004efc <HAL_GPIO_WritePin>
						LedRGB.color = YELLOW;
 80033ee:	4b4d      	ldr	r3, [pc, #308]	@ (8003524 <Main_Process+0x278>)
 80033f0:	2203      	movs	r2, #3
 80033f2:	711a      	strb	r2, [r3, #4]
						break;
 80033f4:	e047      	b.n	8003486 <Main_Process+0x1da>

					case YELLOW:
						SET_RGB_COLOR(OFF);
 80033f6:	2201      	movs	r2, #1
 80033f8:	2110      	movs	r1, #16
 80033fa:	4847      	ldr	r0, [pc, #284]	@ (8003518 <Main_Process+0x26c>)
 80033fc:	f001 fd7e 	bl	8004efc <HAL_GPIO_WritePin>
 8003400:	2201      	movs	r2, #1
 8003402:	2102      	movs	r1, #2
 8003404:	4845      	ldr	r0, [pc, #276]	@ (800351c <Main_Process+0x270>)
 8003406:	f001 fd79 	bl	8004efc <HAL_GPIO_WritePin>
 800340a:	2201      	movs	r2, #1
 800340c:	2101      	movs	r1, #1
 800340e:	4843      	ldr	r0, [pc, #268]	@ (800351c <Main_Process+0x270>)
 8003410:	f001 fd74 	bl	8004efc <HAL_GPIO_WritePin>
						LedRGB.color = WHITE;
 8003414:	4b43      	ldr	r3, [pc, #268]	@ (8003524 <Main_Process+0x278>)
 8003416:	2207      	movs	r2, #7
 8003418:	711a      	strb	r2, [r3, #4]
						break;
 800341a:	e034      	b.n	8003486 <Main_Process+0x1da>

					case WHITE:
						SET_RGB_COLOR(OFF);
 800341c:	2201      	movs	r2, #1
 800341e:	2110      	movs	r1, #16
 8003420:	483d      	ldr	r0, [pc, #244]	@ (8003518 <Main_Process+0x26c>)
 8003422:	f001 fd6b 	bl	8004efc <HAL_GPIO_WritePin>
 8003426:	2201      	movs	r2, #1
 8003428:	2102      	movs	r1, #2
 800342a:	483c      	ldr	r0, [pc, #240]	@ (800351c <Main_Process+0x270>)
 800342c:	f001 fd66 	bl	8004efc <HAL_GPIO_WritePin>
 8003430:	2201      	movs	r2, #1
 8003432:	2101      	movs	r1, #1
 8003434:	4839      	ldr	r0, [pc, #228]	@ (800351c <Main_Process+0x270>)
 8003436:	f001 fd61 	bl	8004efc <HAL_GPIO_WritePin>
						LedRGB.color = RED;
 800343a:	4b3a      	ldr	r3, [pc, #232]	@ (8003524 <Main_Process+0x278>)
 800343c:	2201      	movs	r2, #1
 800343e:	711a      	strb	r2, [r3, #4]
						break;
 8003440:	e021      	b.n	8003486 <Main_Process+0x1da>

					case RED:
						SET_RGB_COLOR(OFF);
 8003442:	2201      	movs	r2, #1
 8003444:	2110      	movs	r1, #16
 8003446:	4834      	ldr	r0, [pc, #208]	@ (8003518 <Main_Process+0x26c>)
 8003448:	f001 fd58 	bl	8004efc <HAL_GPIO_WritePin>
 800344c:	2201      	movs	r2, #1
 800344e:	2102      	movs	r1, #2
 8003450:	4832      	ldr	r0, [pc, #200]	@ (800351c <Main_Process+0x270>)
 8003452:	f001 fd53 	bl	8004efc <HAL_GPIO_WritePin>
 8003456:	2201      	movs	r2, #1
 8003458:	2101      	movs	r1, #1
 800345a:	4830      	ldr	r0, [pc, #192]	@ (800351c <Main_Process+0x270>)
 800345c:	f001 fd4e 	bl	8004efc <HAL_GPIO_WritePin>
						LedRGB.color = OFF;
 8003460:	4b30      	ldr	r3, [pc, #192]	@ (8003524 <Main_Process+0x278>)
 8003462:	2200      	movs	r2, #0
 8003464:	711a      	strb	r2, [r3, #4]
						break;
 8003466:	e00e      	b.n	8003486 <Main_Process+0x1da>
				}
			}
		}
		else
		{
			SET_RGB_COLOR(OFF);
 8003468:	2201      	movs	r2, #1
 800346a:	2110      	movs	r1, #16
 800346c:	482a      	ldr	r0, [pc, #168]	@ (8003518 <Main_Process+0x26c>)
 800346e:	f001 fd45 	bl	8004efc <HAL_GPIO_WritePin>
 8003472:	2201      	movs	r2, #1
 8003474:	2102      	movs	r1, #2
 8003476:	4829      	ldr	r0, [pc, #164]	@ (800351c <Main_Process+0x270>)
 8003478:	f001 fd40 	bl	8004efc <HAL_GPIO_WritePin>
 800347c:	2201      	movs	r2, #1
 800347e:	2101      	movs	r1, #1
 8003480:	4826      	ldr	r0, [pc, #152]	@ (800351c <Main_Process+0x270>)
 8003482:	f001 fd3b 	bl	8004efc <HAL_GPIO_WritePin>
		}

		eSYS_STATE = SYS_STATE_WAIT_CMD;
 8003486:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <Main_Process+0x258>)
 8003488:	2204      	movs	r2, #4
 800348a:	701a      	strb	r2, [r3, #0]
		break;
 800348c:	e038      	b.n	8003500 <Main_Process+0x254>
		//----------------------------------------------------
	case SYS_STATE_WAIT_CMD:

		//DIAG("BLE Notified- Kernel - > %d\r\n", McgTimer.TimeFlag );

		if (tsCmd.MODE == Start)
 800348e:	4b26      	ldr	r3, [pc, #152]	@ (8003528 <Main_Process+0x27c>)
 8003490:	7d5b      	ldrb	r3, [r3, #21]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d106      	bne.n	80034a4 <Main_Process+0x1f8>
		{
			tsCmd.MODE = Idle;
 8003496:	4b24      	ldr	r3, [pc, #144]	@ (8003528 <Main_Process+0x27c>)
 8003498:	22ff      	movs	r2, #255	@ 0xff
 800349a:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 800349c:	2101      	movs	r1, #1
 800349e:	2000      	movs	r0, #0
 80034a0:	f7fd fb78 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == Stop)
 80034a4:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <Main_Process+0x27c>)
 80034a6:	7d5b      	ldrb	r3, [r3, #21]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <Main_Process+0x20e>
		{
			tsCmd.MODE = Idle;
 80034ac:	4b1e      	ldr	r3, [pc, #120]	@ (8003528 <Main_Process+0x27c>)
 80034ae:	22ff      	movs	r2, #255	@ 0xff
 80034b0:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 80034b2:	2100      	movs	r1, #0
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fd fb6d 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == PrintSetting )
 80034ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003528 <Main_Process+0x27c>)
 80034bc:	7d5b      	ldrb	r3, [r3, #21]
 80034be:	2b05      	cmp	r3, #5
 80034c0:	d104      	bne.n	80034cc <Main_Process+0x220>
		{
			tsCmd.MODE = Idle;
 80034c2:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <Main_Process+0x27c>)
 80034c4:	22ff      	movs	r2, #255	@ 0xff
 80034c6:	755a      	strb	r2, [r3, #21]
			Print_Setting();
 80034c8:	f000 f837 	bl	800353a <Print_Setting>
		}

		if ( tsCmd.HLP == true )
 80034cc:	4b16      	ldr	r3, [pc, #88]	@ (8003528 <Main_Process+0x27c>)
 80034ce:	7d9b      	ldrb	r3, [r3, #22]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d104      	bne.n	80034de <Main_Process+0x232>
		{
			//tsCmd.MODE = Idle;
			Print_Help();
 80034d4:	f000 f82a 	bl	800352c <Print_Help>
			tsCmd.HLP = false;
 80034d8:	4b13      	ldr	r3, [pc, #76]	@ (8003528 <Main_Process+0x27c>)
 80034da:	2200      	movs	r2, #0
 80034dc:	759a      	strb	r2, [r3, #22]
		}

					#ifdef WBxx_BLE
						if ( tsBle.Connected )
 80034de:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <Main_Process+0x268>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <Main_Process+0x24c>
						{
							 if ( tsBle.App.McgNotification )
 80034e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003514 <Main_Process+0x268>)
 80034ea:	799b      	ldrb	r3, [r3, #6]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <Main_Process+0x24c>
							 {
								UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);
 80034f0:	2100      	movs	r1, #0
 80034f2:	2020      	movs	r0, #32
 80034f4:	f012 f88a 	bl	801560c <UTIL_SEQ_SetTask>
								 }
							 #endif
						}
					#endif

		eSYS_STATE = SYS_STATE_NORMAL;
 80034f8:	4b02      	ldr	r3, [pc, #8]	@ (8003504 <Main_Process+0x258>)
 80034fa:	2203      	movs	r2, #3
 80034fc:	701a      	strb	r2, [r3, #0]
		break;
 80034fe:	bf00      	nop
		//----------------------------------------------------
	}
}
 8003500:	bf00      	nop
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000eb0 	.word	0x20000eb0
 8003508:	20000ee0 	.word	0x20000ee0
 800350c:	080170b8 	.word	0x080170b8
 8003510:	20000ed4 	.word	0x20000ed4
 8003514:	200011f4 	.word	0x200011f4
 8003518:	48001000 	.word	0x48001000
 800351c:	48000400 	.word	0x48000400
 8003520:	20001150 	.word	0x20001150
 8003524:	20000ed8 	.word	0x20000ed8
 8003528:	20000eb4 	.word	0x20000eb4

0800352c <Print_Help>:

//------------------------------------------------------------------------------------------------

void Print_Help( void )
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
	DIAG(" Examples 1: https://hackaday.io/project/5334-serialplot-realtime\r\n");
	HAL_Delay(10);
	DIAG(" Examples 2: https://x-io.co.uk/serial-oscilloscope\r\n");
	HAL_Delay(10);
*/
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <Print_Setting>:
//--------------------------------------------------------------------------------------------------------

void Print_Setting ( void )
{
 800353a:	b480      	push	{r7}
 800353c:	af00      	add	r7, sp, #0
	HAL_Delay(10);

	DIAG("LED status\t\t: %s\r\n", tsCmd.LED ? "active" : "deactive");
	HAL_Delay(10);
*/
}
 800353e:	bf00      	nop
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr

08003548 <LL_RCC_HSI48_Enable>:
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003554:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_RCC_HSI48_IsReady>:
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800356e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003572:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	2b02      	cmp	r3, #2
 800357c:	d101      	bne.n	8003582 <LL_RCC_HSI48_IsReady+0x18>
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <LL_RCC_HSI48_IsReady+0x1a>
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_RCC_LSE_SetDriveCapability>:
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800359a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359e:	f023 0218 	bic.w	r2, r3, #24
 80035a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_AHB1_GRP1_EnableClock>:
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80035c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80035d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4013      	ands	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035de:	68fb      	ldr	r3, [r7, #12]
}
 80035e0:	bf00      	nop
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_AHB2_GRP1_EnableClock>:
{
 80035ec:	b480      	push	{r7}
 80035ee:	b085      	sub	sp, #20
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80035f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035f8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80035fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4313      	orrs	r3, r2
 8003602:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003608:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4013      	ands	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003610:	68fb      	ldr	r3, [r7, #12]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800362c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4313      	orrs	r3, r2
 8003634:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800363a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4013      	ands	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	3220      	adds	r2, #32
 8003660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003664:	4a05      	ldr	r2, [pc, #20]	@ (800367c <LL_HSEM_1StepLock+0x2c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d001      	beq.n	800366e <LL_HSEM_1StepLock+0x1e>
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <LL_HSEM_1StepLock+0x20>
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	80000400 	.word	0x80000400

08003680 <PeriphUsbClock_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PeriphUsbClock_Config(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b09a      	sub	sp, #104	@ 0x68
 8003684:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003686:	f107 0318 	add.w	r3, r7, #24
 800368a:	2250      	movs	r2, #80	@ 0x50
 800368c:	2100      	movs	r1, #0
 800368e:	4618      	mov	r0, r3
 8003690:	f012 fb22 	bl	8015cd8 <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003694:	463b      	mov	r3, r7
 8003696:	2200      	movs	r2, #0
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	605a      	str	r2, [r3, #4]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	611a      	str	r2, [r3, #16]
 80036a2:	615a      	str	r2, [r3, #20]

/* This prevents the CPU2 to disable the HSI48 oscillator when
 * It does not use anymore the RNG IP */

LL_HSEM_1StepLock( HSEM, 5 );
 80036a4:	2105      	movs	r1, #5
 80036a6:	4817      	ldr	r0, [pc, #92]	@ (8003704 <PeriphUsbClock_Config+0x84>)
 80036a8:	f7ff ffd2 	bl	8003650 <LL_HSEM_1StepLock>


/* Enables the HSI48 Clock Source */

LL_RCC_HSI48_Enable();
 80036ac:	f7ff ff4c 	bl	8003548 <LL_RCC_HSI48_Enable>

while(!LL_RCC_HSI48_IsReady());
 80036b0:	bf00      	nop
 80036b2:	f7ff ff5a 	bl	800356a <LL_RCC_HSI48_IsReady>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0fa      	beq.n	80036b2 <PeriphUsbClock_Config+0x32>

/* Select HSI48 as USB clock source */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80036bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036c0:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80036c2:	2300      	movs	r3, #0
 80036c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80036c6:	f107 0318 	add.w	r3, r7, #24
 80036ca:	4618      	mov	r0, r3
 80036cc:	f005 f9c0 	bl	8008a50 <HAL_RCCEx_PeriphCLKConfig>


/* Configure the clock recovery system (CRS)**********************************/

/* Enable CRS Clock */
__HAL_RCC_CRS_CLK_ENABLE();
 80036d0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80036d4:	f7ff ffa3 	bl	800361e <LL_APB1_GRP1_EnableClock>

/* Default Synchro Signal division factor (not divided) */
RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80036d8:	2300      	movs	r3, #0
 80036da:	603b      	str	r3, [r7, #0]

/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80036dc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80036e0:	607b      	str	r3, [r7, #4]

/* HSI48 is synchronized with USB SOF at 1KHz rate */
RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 80036e2:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 80036e6:	60fb      	str	r3, [r7, #12]
RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 80036e8:	2322      	movs	r3, #34	@ 0x22
 80036ea:	613b      	str	r3, [r7, #16]
RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80036ec:	2300      	movs	r3, #0
 80036ee:	60bb      	str	r3, [r7, #8]

/* Set the TRIM[5:0] to the default value*/
RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 80036f0:	2320      	movs	r3, #32
 80036f2:	617b      	str	r3, [r7, #20]

/* Start automatic synchronization */
HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80036f4:	463b      	mov	r3, r7
 80036f6:	4618      	mov	r0, r3
 80036f8:	f005 fb20 	bl	8008d3c <HAL_RCCEx_CRSConfig>

#endif

	return;
 80036fc:	bf00      	nop
}
 80036fe:	3768      	adds	r7, #104	@ 0x68
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	58001400 	.word	0x58001400

08003708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800370c:	f000 fe34 	bl	8004378 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003710:	f7fe fb58 	bl	8001dc4 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003714:	f000 f822 	bl	800375c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003718:	f000 f88e 	bl	8003838 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 800371c:	f000 f8ec 	bl	80038f8 <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003720:	f000 f9ee 	bl	8003b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8003724:	f000 f9da 	bl	8003adc <MX_DMA_Init>
  MX_TIM2_Init();
 8003728:	f000 f98a 	bl	8003a40 <MX_TIM2_Init>
  MX_SPI1_Init();
 800372c:	f000 f94a 	bl	80039c4 <MX_SPI1_Init>
  MX_RTC_Init();
 8003730:	f000 f914 	bl	800395c <MX_RTC_Init>
  MX_USB_Device_Init();
 8003734:	f011 f8aa 	bl	801488c <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003738:	f000 f89e 	bl	8003878 <MX_I2C1_Init>
  MX_RNG_Init();
 800373c:	f000 f8f8 	bl	8003930 <MX_RNG_Init>
  MX_RF_Init();
 8003740:	f000 f8ee 	bl	8003920 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  Kernel_Init();
 8003744:	f7ff fd6e 	bl	8003224 <Kernel_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8003748:	f7fe fb4a 	bl	8001de0 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PeriphUsbClock_Config();
 800374c:	f7ff ff98 	bl	8003680 <PeriphUsbClock_Config>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003750:	f7fe fe33 	bl	80023ba <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    Main_Process();
 8003754:	f7ff fdaa 	bl	80032ac <Main_Process>
    MX_APPE_Process();
 8003758:	bf00      	nop
 800375a:	e7f9      	b.n	8003750 <main+0x48>

0800375c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b09a      	sub	sp, #104	@ 0x68
 8003760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003762:	f107 0320 	add.w	r3, r7, #32
 8003766:	2248      	movs	r2, #72	@ 0x48
 8003768:	2100      	movs	r1, #0
 800376a:	4618      	mov	r0, r3
 800376c:	f012 fab4 	bl	8015cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003770:	1d3b      	adds	r3, r7, #4
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	611a      	str	r2, [r3, #16]
 800377e:	615a      	str	r2, [r3, #20]
 8003780:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8003782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800378c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003790:	f043 0310 	orr.w	r3, r3, #16
 8003794:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003796:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80037a0:	f043 0303 	orr.w	r3, r3, #3
 80037a4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80037a6:	f003 fe1d 	bl	80073e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80037aa:	2000      	movs	r0, #0
 80037ac:	f7ff feef 	bl	800358e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037b0:	4b20      	ldr	r3, [pc, #128]	@ (8003834 <SystemClock_Config+0xd8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80037b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003834 <SystemClock_Config+0xd8>)
 80037ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	4b1c      	ldr	r3, [pc, #112]	@ (8003834 <SystemClock_Config+0xd8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80037c8:	603b      	str	r3, [r7, #0]
 80037ca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 80037cc:	2307      	movs	r3, #7
 80037ce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80037d6:	2301      	movs	r3, #1
 80037d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80037da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80037e0:	2340      	movs	r3, #64	@ 0x40
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037e8:	f107 0320 	add.w	r3, r7, #32
 80037ec:	4618      	mov	r0, r3
 80037ee:	f004 f985 	bl	8007afc <HAL_RCC_OscConfig>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80037f8:	f000 fa26 	bl	8003c48 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80037fc:	236f      	movs	r3, #111	@ 0x6f
 80037fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8003800:	2302      	movs	r3, #2
 8003802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800380c:	2300      	movs	r3, #0
 800380e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8003814:	2300      	movs	r3, #0
 8003816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003818:	1d3b      	adds	r3, r7, #4
 800381a:	2101      	movs	r1, #1
 800381c:	4618      	mov	r0, r3
 800381e:	f004 fce1 	bl	80081e4 <HAL_RCC_ClockConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8003828:	f000 fa0e 	bl	8003c48 <Error_Handler>
  }
}
 800382c:	bf00      	nop
 800382e:	3768      	adds	r7, #104	@ 0x68
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}
 8003834:	58000400 	.word	0x58000400

08003838 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b094      	sub	sp, #80	@ 0x50
 800383c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800383e:	463b      	mov	r3, r7
 8003840:	2250      	movs	r2, #80	@ 0x50
 8003842:	2100      	movs	r1, #0
 8003844:	4618      	mov	r0, r3
 8003846:	f012 fa47 	bl	8015cd8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800384a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800384e:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003850:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003854:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8003856:	2302      	movs	r3, #2
 8003858:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800385a:	2310      	movs	r3, #16
 800385c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800385e:	463b      	mov	r3, r7
 8003860:	4618      	mov	r0, r3
 8003862:	f005 f8f5 	bl	8008a50 <HAL_RCCEx_PeriphCLKConfig>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800386c:	f000 f9ec 	bl	8003c48 <Error_Handler>
  /* USER CODE BEGIN Smps */



  /* USER CODE END Smps */
}
 8003870:	bf00      	nop
 8003872:	3750      	adds	r7, #80	@ 0x50
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800387c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <MX_I2C1_Init+0x74>)
 800387e:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <MX_I2C1_Init+0x78>)
 8003880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003882:	4b1a      	ldr	r3, [pc, #104]	@ (80038ec <MX_I2C1_Init+0x74>)
 8003884:	4a1b      	ldr	r2, [pc, #108]	@ (80038f4 <MX_I2C1_Init+0x7c>)
 8003886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003888:	4b18      	ldr	r3, [pc, #96]	@ (80038ec <MX_I2C1_Init+0x74>)
 800388a:	2200      	movs	r2, #0
 800388c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800388e:	4b17      	ldr	r3, [pc, #92]	@ (80038ec <MX_I2C1_Init+0x74>)
 8003890:	2201      	movs	r2, #1
 8003892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003894:	4b15      	ldr	r3, [pc, #84]	@ (80038ec <MX_I2C1_Init+0x74>)
 8003896:	2200      	movs	r2, #0
 8003898:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800389a:	4b14      	ldr	r3, [pc, #80]	@ (80038ec <MX_I2C1_Init+0x74>)
 800389c:	2200      	movs	r2, #0
 800389e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <MX_I2C1_Init+0x74>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038a6:	4b11      	ldr	r3, [pc, #68]	@ (80038ec <MX_I2C1_Init+0x74>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038ac:	4b0f      	ldr	r3, [pc, #60]	@ (80038ec <MX_I2C1_Init+0x74>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038b2:	480e      	ldr	r0, [pc, #56]	@ (80038ec <MX_I2C1_Init+0x74>)
 80038b4:	f001 fb76 	bl	8004fa4 <HAL_I2C_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80038be:	f000 f9c3 	bl	8003c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80038c2:	2100      	movs	r1, #0
 80038c4:	4809      	ldr	r0, [pc, #36]	@ (80038ec <MX_I2C1_Init+0x74>)
 80038c6:	f001 ff3b 	bl	8005740 <HAL_I2CEx_ConfigAnalogFilter>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80038d0:	f000 f9ba 	bl	8003c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80038d4:	2100      	movs	r1, #0
 80038d6:	4805      	ldr	r0, [pc, #20]	@ (80038ec <MX_I2C1_Init+0x74>)
 80038d8:	f001 ff7d 	bl	80057d6 <HAL_I2CEx_ConfigDigitalFilter>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80038e2:	f000 f9b1 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80038e6:	bf00      	nop
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000ee0 	.word	0x20000ee0
 80038f0:	40005400 	.word	0x40005400
 80038f4:	00707cbb 	.word	0x00707cbb

080038f8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80038fc:	4b06      	ldr	r3, [pc, #24]	@ (8003918 <MX_IPCC_Init+0x20>)
 80038fe:	4a07      	ldr	r2, [pc, #28]	@ (800391c <MX_IPCC_Init+0x24>)
 8003900:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8003902:	4805      	ldr	r0, [pc, #20]	@ (8003918 <MX_IPCC_Init+0x20>)
 8003904:	f001 ffb4 	bl	8005870 <HAL_IPCC_Init>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800390e:	f000 f99b 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8003912:	bf00      	nop
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	20000f34 	.word	0x20000f34
 800391c:	58000c00 	.word	0x58000c00

08003920 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8003924:	bf00      	nop
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
	...

08003930 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003934:	4b07      	ldr	r3, [pc, #28]	@ (8003954 <MX_RNG_Init+0x24>)
 8003936:	4a08      	ldr	r2, [pc, #32]	@ (8003958 <MX_RNG_Init+0x28>)
 8003938:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800393a:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <MX_RNG_Init+0x24>)
 800393c:	2200      	movs	r2, #0
 800393e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003940:	4804      	ldr	r0, [pc, #16]	@ (8003954 <MX_RNG_Init+0x24>)
 8003942:	f005 fb46 	bl	8008fd2 <HAL_RNG_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800394c:	f000 f97c 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003950:	bf00      	nop
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000f70 	.word	0x20000f70
 8003958:	58001000 	.word	0x58001000

0800395c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003960:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <MX_RTC_Init+0x60>)
 8003962:	4a17      	ldr	r2, [pc, #92]	@ (80039c0 <MX_RTC_Init+0x64>)
 8003964:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003966:	4b15      	ldr	r3, [pc, #84]	@ (80039bc <MX_RTC_Init+0x60>)
 8003968:	2200      	movs	r2, #0
 800396a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 800396c:	4b13      	ldr	r3, [pc, #76]	@ (80039bc <MX_RTC_Init+0x60>)
 800396e:	220f      	movs	r2, #15
 8003970:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <MX_RTC_Init+0x60>)
 8003974:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003978:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800397a:	4b10      	ldr	r3, [pc, #64]	@ (80039bc <MX_RTC_Init+0x60>)
 800397c:	2200      	movs	r2, #0
 800397e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003980:	4b0e      	ldr	r3, [pc, #56]	@ (80039bc <MX_RTC_Init+0x60>)
 8003982:	2200      	movs	r2, #0
 8003984:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003986:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <MX_RTC_Init+0x60>)
 8003988:	2200      	movs	r2, #0
 800398a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <MX_RTC_Init+0x60>)
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003992:	480a      	ldr	r0, [pc, #40]	@ (80039bc <MX_RTC_Init+0x60>)
 8003994:	f005 fbbc 	bl	8009110 <HAL_RTC_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800399e:	f000 f953 	bl	8003c48 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80039a2:	2200      	movs	r2, #0
 80039a4:	2100      	movs	r1, #0
 80039a6:	4805      	ldr	r0, [pc, #20]	@ (80039bc <MX_RTC_Init+0x60>)
 80039a8:	f005 fcb2 	bl	8009310 <HAL_RTCEx_SetWakeUpTimer_IT>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80039b2:	f000 f949 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80039b6:	bf00      	nop
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000f84 	.word	0x20000f84
 80039c0:	40002800 	.word	0x40002800

080039c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80039c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039ca:	4a1c      	ldr	r2, [pc, #112]	@ (8003a3c <MX_SPI1_Init+0x78>)
 80039cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039d0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80039d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039d6:	4b18      	ldr	r3, [pc, #96]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039d8:	2200      	movs	r2, #0
 80039da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039dc:	4b16      	ldr	r3, [pc, #88]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039de:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80039e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039e4:	4b14      	ldr	r3, [pc, #80]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039ea:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039f0:	4b11      	ldr	r3, [pc, #68]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80039f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a38 <MX_SPI1_Init+0x74>)
 80039fa:	2208      	movs	r2, #8
 80039fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80039fe:	4b0e      	ldr	r3, [pc, #56]	@ (8003a38 <MX_SPI1_Init+0x74>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	@ (8003a38 <MX_SPI1_Init+0x74>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003a38 <MX_SPI1_Init+0x74>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003a10:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <MX_SPI1_Init+0x74>)
 8003a12:	2207      	movs	r2, #7
 8003a14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003a16:	4b08      	ldr	r3, [pc, #32]	@ (8003a38 <MX_SPI1_Init+0x74>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003a1c:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <MX_SPI1_Init+0x74>)
 8003a1e:	2208      	movs	r2, #8
 8003a20:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a22:	4805      	ldr	r0, [pc, #20]	@ (8003a38 <MX_SPI1_Init+0x74>)
 8003a24:	f005 fd30 	bl	8009488 <HAL_SPI_Init>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003a2e:	f000 f90b 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000fa8 	.word	0x20000fa8
 8003a3c:	40013000 	.word	0x40013000

08003a40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a46:	f107 0310 	add.w	r3, r7, #16
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a54:	1d3b      	adds	r3, r7, #4
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
 8003a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003a60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8003a66:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003a68:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8003a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003a70:	2210      	movs	r2, #16
 8003a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8003a74:	4b18      	ldr	r3, [pc, #96]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003a76:	2264      	movs	r2, #100	@ 0x64
 8003a78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7a:	4b17      	ldr	r3, [pc, #92]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a80:	4b15      	ldr	r3, [pc, #84]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a86:	4814      	ldr	r0, [pc, #80]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003a88:	f006 fa9c 	bl	8009fc4 <HAL_TIM_Base_Init>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003a92:	f000 f8d9 	bl	8003c48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a96:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a9c:	f107 0310 	add.w	r3, r7, #16
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	480d      	ldr	r0, [pc, #52]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003aa4:	f006 fc3b 	bl	800a31e <HAL_TIM_ConfigClockSource>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003aae:	f000 f8cb 	bl	8003c48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4806      	ldr	r0, [pc, #24]	@ (8003ad8 <MX_TIM2_Init+0x98>)
 8003ac0:	f006 fe2a 	bl	800a718 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d001      	beq.n	8003ace <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003aca:	f000 f8bd 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003ace:	bf00      	nop
 8003ad0:	3720      	adds	r7, #32
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000100c 	.word	0x2000100c

08003adc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003ae0:	2004      	movs	r0, #4
 8003ae2:	f7ff fd6a 	bl	80035ba <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f7ff fd67 	bl	80035ba <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003aec:	2200      	movs	r2, #0
 8003aee:	2100      	movs	r1, #0
 8003af0:	200b      	movs	r0, #11
 8003af2:	f000 fe0e 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003af6:	200b      	movs	r0, #11
 8003af8:	f000 fe25 	bl	8004746 <HAL_NVIC_EnableIRQ>

}
 8003afc:	bf00      	nop
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b06:	1d3b      	adds	r3, r7, #4
 8003b08:	2200      	movs	r2, #0
 8003b0a:	601a      	str	r2, [r3, #0]
 8003b0c:	605a      	str	r2, [r3, #4]
 8003b0e:	609a      	str	r2, [r3, #8]
 8003b10:	60da      	str	r2, [r3, #12]
 8003b12:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b14:	2004      	movs	r0, #4
 8003b16:	f7ff fd69 	bl	80035ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	f7ff fd66 	bl	80035ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b20:	2001      	movs	r0, #1
 8003b22:	f7ff fd63 	bl	80035ec <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b26:	2010      	movs	r0, #16
 8003b28:	f7ff fd60 	bl	80035ec <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_RSTB_Pin|ADS_CS_Pin, GPIO_PIN_SET);
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	210c      	movs	r1, #12
 8003b30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b34:	f001 f9e2 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8003b38:	2200      	movs	r2, #0
 8003b3a:	2140      	movs	r1, #64	@ 0x40
 8003b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b40:	f001 f9dc 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_ADDR_GPIO_Port, IMU_ADDR_Pin, GPIO_PIN_RESET);
 8003b44:	2200      	movs	r2, #0
 8003b46:	2104      	movs	r1, #4
 8003b48:	483d      	ldr	r0, [pc, #244]	@ (8003c40 <MX_GPIO_Init+0x140>)
 8003b4a:	f001 f9d7 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);
 8003b4e:	2201      	movs	r2, #1
 8003b50:	2103      	movs	r1, #3
 8003b52:	483b      	ldr	r0, [pc, #236]	@ (8003c40 <MX_GPIO_Init+0x140>)
 8003b54:	f001 f9d2 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET);
 8003b58:	2201      	movs	r2, #1
 8003b5a:	2110      	movs	r1, #16
 8003b5c:	4839      	ldr	r0, [pc, #228]	@ (8003c44 <MX_GPIO_Init+0x144>)
 8003b5e:	f001 f9cd 	bl	8004efc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADS_RSTB_Pin ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_RSTB_Pin|ADS_CS_Pin;
 8003b62:	230c      	movs	r3, #12
 8003b64:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b66:	2301      	movs	r3, #1
 8003b68:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b72:	1d3b      	adds	r3, r7, #4
 8003b74:	4619      	mov	r1, r3
 8003b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b7a:	f001 f84f 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8003b7e:	2330      	movs	r3, #48	@ 0x30
 8003b80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b8c:	1d3b      	adds	r3, r7, #4
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003b94:	f001 f842 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8003b98:	2340      	movs	r3, #64	@ 0x40
 8003b9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	4619      	mov	r1, r3
 8003bac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bb0:	f001 f834 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_ADDR_Pin RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = IMU_ADDR_Pin|RGB_B_Pin|RGB_G_Pin;
 8003bb4:	2307      	movs	r3, #7
 8003bb6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	481d      	ldr	r0, [pc, #116]	@ (8003c40 <MX_GPIO_Init+0x140>)
 8003bca:	f001 f827 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 8003bce:	2310      	movs	r3, #16
 8003bd0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	4619      	mov	r1, r3
 8003be2:	4818      	ldr	r0, [pc, #96]	@ (8003c44 <MX_GPIO_Init+0x144>)
 8003be4:	f001 f81a 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_ALARMB_Pin */
  GPIO_InitStruct.Pin = ADS_ALARMB_Pin;
 8003be8:	2340      	movs	r3, #64	@ 0x40
 8003bea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bec:	2300      	movs	r3, #0
 8003bee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_ALARMB_GPIO_Port, &GPIO_InitStruct);
 8003bf4:	1d3b      	adds	r3, r7, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4811      	ldr	r0, [pc, #68]	@ (8003c40 <MX_GPIO_Init+0x140>)
 8003bfa:	f001 f80f 	bl	8004c1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 8003bfe:	2380      	movs	r3, #128	@ 0x80
 8003c00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c02:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003c06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 8003c0c:	1d3b      	adds	r3, r7, #4
 8003c0e:	4619      	mov	r1, r3
 8003c10:	480b      	ldr	r0, [pc, #44]	@ (8003c40 <MX_GPIO_Init+0x140>)
 8003c12:	f001 f803 	bl	8004c1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003c16:	2200      	movs	r2, #0
 8003c18:	2100      	movs	r1, #0
 8003c1a:	200a      	movs	r0, #10
 8003c1c:	f000 fd79 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003c20:	200a      	movs	r0, #10
 8003c22:	f000 fd90 	bl	8004746 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003c26:	2200      	movs	r2, #0
 8003c28:	2100      	movs	r1, #0
 8003c2a:	2017      	movs	r0, #23
 8003c2c:	f000 fd71 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003c30:	2017      	movs	r0, #23
 8003c32:	f000 fd88 	bl	8004746 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	48000400 	.word	0x48000400
 8003c44:	48001000 	.word	0x48001000

08003c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003c4c:	b672      	cpsid	i
}
 8003c4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SET_RGB_COLOR(RED);
 8003c50:	2200      	movs	r2, #0
 8003c52:	2110      	movs	r1, #16
 8003c54:	4806      	ldr	r0, [pc, #24]	@ (8003c70 <Error_Handler+0x28>)
 8003c56:	f001 f951 	bl	8004efc <HAL_GPIO_WritePin>
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	4805      	ldr	r0, [pc, #20]	@ (8003c74 <Error_Handler+0x2c>)
 8003c60:	f001 f94c 	bl	8004efc <HAL_GPIO_WritePin>
 8003c64:	2201      	movs	r2, #1
 8003c66:	2101      	movs	r1, #1
 8003c68:	4802      	ldr	r0, [pc, #8]	@ (8003c74 <Error_Handler+0x2c>)
 8003c6a:	f001 f947 	bl	8004efc <HAL_GPIO_WritePin>
 8003c6e:	e7ef      	b.n	8003c50 <Error_Handler+0x8>
 8003c70:	48001000 	.word	0x48001000
 8003c74:	48000400 	.word	0x48000400

08003c78 <LL_RCC_EnableRTC>:
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003c7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003c88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003c90:	bf00      	nop
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_AHB2_GRP1_EnableClock>:
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003ca2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ca6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <LL_AHB3_GRP1_EnableClock>:
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003cd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003cd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003ce4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ce8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
}
 8003cf2:	bf00      	nop
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_APB1_GRP1_EnableClock>:
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b085      	sub	sp, #20
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003d06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d0a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003d16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	bf00      	nop
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003d48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4013      	ands	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d54:	68fb      	ldr	r3, [r7, #12]
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003d66:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d6a:	f7ff ffaf 	bl	8003ccc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	2100      	movs	r1, #0
 8003d72:	2005      	movs	r0, #5
 8003d74:	f000 fccd 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003d78:	2005      	movs	r0, #5
 8003d7a:	f000 fce4 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2100      	movs	r1, #0
 8003d82:	202e      	movs	r0, #46	@ 0x2e
 8003d84:	f000 fcc5 	bl	8004712 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003d88:	202e      	movs	r0, #46	@ 0x2e
 8003d8a:	f000 fcdc 	bl	8004746 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b09c      	sub	sp, #112	@ 0x70
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	605a      	str	r2, [r3, #4]
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	60da      	str	r2, [r3, #12]
 8003daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	2250      	movs	r2, #80	@ 0x50
 8003db2:	2100      	movs	r1, #0
 8003db4:	4618      	mov	r0, r3
 8003db6:	f011 ff8f 	bl	8015cd8 <memset>
  if(hi2c->Instance==I2C1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a17      	ldr	r2, [pc, #92]	@ (8003e1c <HAL_I2C_MspInit+0x88>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d126      	bne.n	8003e12 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003dc8:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003dce:	f107 030c 	add.w	r3, r7, #12
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 fe3c 	bl	8008a50 <HAL_RCCEx_PeriphCLKConfig>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003dde:	f7ff ff33 	bl	8003c48 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003de2:	2002      	movs	r0, #2
 8003de4:	f7ff ff59 	bl	8003c9a <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003de8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003dec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dee:	2312      	movs	r3, #18
 8003df0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df6:	2300      	movs	r3, #0
 8003df8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dfa:	2304      	movs	r3, #4
 8003dfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e02:	4619      	mov	r1, r3
 8003e04:	4806      	ldr	r0, [pc, #24]	@ (8003e20 <HAL_I2C_MspInit+0x8c>)
 8003e06:	f000 ff09 	bl	8004c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e0a:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003e0e:	f7ff ff76 	bl	8003cfe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e12:	bf00      	nop
 8003e14:	3770      	adds	r7, #112	@ 0x70
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40005400 	.word	0x40005400
 8003e20:	48000400 	.word	0x48000400

08003e24 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <HAL_IPCC_MspInit+0x44>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d113      	bne.n	8003e5e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003e36:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003e3a:	f7ff ff47 	bl	8003ccc <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2100      	movs	r1, #0
 8003e42:	202c      	movs	r0, #44	@ 0x2c
 8003e44:	f000 fc65 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003e48:	202c      	movs	r0, #44	@ 0x2c
 8003e4a:	f000 fc7c 	bl	8004746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2100      	movs	r1, #0
 8003e52:	202d      	movs	r0, #45	@ 0x2d
 8003e54:	f000 fc5d 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003e58:	202d      	movs	r0, #45	@ 0x2d
 8003e5a:	f000 fc74 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	58000c00 	.word	0x58000c00

08003e6c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b096      	sub	sp, #88	@ 0x58
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e74:	f107 0308 	add.w	r3, r7, #8
 8003e78:	2250      	movs	r2, #80	@ 0x50
 8003e7a:	2100      	movs	r1, #0
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f011 ff2b 	bl	8015cd8 <memset>
  if(hrng->Instance==RNG)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a11      	ldr	r2, [pc, #68]	@ (8003ecc <HAL_RNG_MspInit+0x60>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d11b      	bne.n	8003ec4 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8003e92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003e96:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e98:	f107 0308 	add.w	r3, r7, #8
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f004 fdd7 	bl	8008a50 <HAL_RCCEx_PeriphCLKConfig>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003ea8:	f7ff fece 	bl	8003c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003eac:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003eb0:	f7ff ff0c 	bl	8003ccc <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	2035      	movs	r0, #53	@ 0x35
 8003eba:	f000 fc2a 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8003ebe:	2035      	movs	r0, #53	@ 0x35
 8003ec0:	f000 fc41 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003ec4:	bf00      	nop
 8003ec6:	3758      	adds	r7, #88	@ 0x58
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	58001000 	.word	0x58001000

08003ed0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b096      	sub	sp, #88	@ 0x58
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ed8:	f107 0308 	add.w	r3, r7, #8
 8003edc:	2250      	movs	r2, #80	@ 0x50
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f011 fef9 	bl	8015cd8 <memset>
  if(hrtc->Instance==RTC)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a12      	ldr	r2, [pc, #72]	@ (8003f34 <HAL_RTC_MspInit+0x64>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d11d      	bne.n	8003f2c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003ef0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ef4:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003ef6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003efa:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003efc:	f107 0308 	add.w	r3, r7, #8
 8003f00:	4618      	mov	r0, r3
 8003f02:	f004 fda5 	bl	8008a50 <HAL_RCCEx_PeriphCLKConfig>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003f0c:	f7ff fe9c 	bl	8003c48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003f10:	f7ff feb2 	bl	8003c78 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003f14:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003f18:	f7ff fef1 	bl	8003cfe <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	2003      	movs	r0, #3
 8003f22:	f000 fbf6 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003f26:	2003      	movs	r0, #3
 8003f28:	f000 fc0d 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003f2c:	bf00      	nop
 8003f2e:	3758      	adds	r7, #88	@ 0x58
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	40002800 	.word	0x40002800

08003f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f40:	f107 030c 	add.w	r3, r7, #12
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a0e      	ldr	r2, [pc, #56]	@ (8003f90 <HAL_SPI_MspInit+0x58>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d116      	bne.n	8003f88 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f5a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003f5e:	f7ff fee7 	bl	8003d30 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f62:	2002      	movs	r0, #2
 8003f64:	f7ff fe99 	bl	8003c9a <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003f68:	2338      	movs	r3, #56	@ 0x38
 8003f6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f78:	2305      	movs	r3, #5
 8003f7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7c:	f107 030c 	add.w	r3, r7, #12
 8003f80:	4619      	mov	r1, r3
 8003f82:	4804      	ldr	r0, [pc, #16]	@ (8003f94 <HAL_SPI_MspInit+0x5c>)
 8003f84:	f000 fe4a 	bl	8004c1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f88:	bf00      	nop
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40013000 	.word	0x40013000
 8003f94:	48000400 	.word	0x48000400

08003f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fa8:	d10a      	bne.n	8003fc0 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003faa:	2001      	movs	r0, #1
 8003fac:	f7ff fea7 	bl	8003cfe <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	201c      	movs	r0, #28
 8003fb6:	f000 fbac 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fba:	201c      	movs	r0, #28
 8003fbc:	f000 fbc3 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fc0:	bf00      	nop
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fcc:	bf00      	nop
 8003fce:	e7fd      	b.n	8003fcc <NMI_Handler+0x4>

08003fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <HardFault_Handler+0x4>

08003fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fdc:	bf00      	nop
 8003fde:	e7fd      	b.n	8003fdc <MemManage_Handler+0x4>

08003fe0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <BusFault_Handler+0x4>

08003fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <UsageFault_Handler+0x4>

08003ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr

08003ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ffe:	b480      	push	{r7}
 8004000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004002:	bf00      	nop
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr

0800400c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004010:	bf00      	nop
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800401e:	f000 fa05 	bl	800442c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004022:	bf00      	nop
 8004024:	bd80      	pop	{r7, pc}

08004026 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800402a:	f7fe fddd 	bl	8002be8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	bd80      	pop	{r7, pc}

08004032 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004032:	b480      	push	{r7}
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004036:	bf00      	nop
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8004044:	2010      	movs	r0, #16
 8004046:	f000 ff71 	bl	8004f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004054:	4802      	ldr	r0, [pc, #8]	@ (8004060 <DMA1_Channel1_IRQHandler+0x10>)
 8004056:	f000 fcf3 	bl	8004a40 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200010ec 	.word	0x200010ec

08004064 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004068:	4802      	ldr	r0, [pc, #8]	@ (8004074 <USB_LP_IRQHandler+0x10>)
 800406a:	f001 fd77 	bl	8005b5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800406e:	bf00      	nop
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	20002780 	.word	0x20002780

08004078 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 800407c:	2020      	movs	r0, #32
 800407e:	f000 ff55 	bl	8004f2c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8004082:	2080      	movs	r0, #128	@ 0x80
 8004084:	f000 ff52 	bl	8004f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004088:	bf00      	nop
 800408a:	bd80      	pop	{r7, pc}

0800408c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004090:	4802      	ldr	r0, [pc, #8]	@ (800409c <TIM2_IRQHandler+0x10>)
 8004092:	f006 f83d 	bl	800a110 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004096:	bf00      	nop
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	2000100c 	.word	0x2000100c

080040a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80040a4:	4802      	ldr	r0, [pc, #8]	@ (80040b0 <USART1_IRQHandler+0x10>)
 80040a6:	f006 fc35 	bl	800a914 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80040aa:	bf00      	nop
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20001058 	.word	0x20001058

080040b4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80040b8:	f010 faaa 	bl	8014610 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80040bc:	bf00      	nop
 80040be:	bd80      	pop	{r7, pc}

080040c0 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80040c4:	f010 fada 	bl	801467c <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80040d0:	f000 ff44 	bl	8004f5c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80040d4:	bf00      	nop
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80040dc:	4802      	ldr	r0, [pc, #8]	@ (80040e8 <RNG_IRQHandler+0x10>)
 80040de:	f004 ffad 	bl	800903c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80040e2:	bf00      	nop
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20000f70 	.word	0x20000f70

080040ec <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e00a      	b.n	8004114 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040fe:	f3af 8000 	nop.w
 8004102:	4601      	mov	r1, r0
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	60ba      	str	r2, [r7, #8]
 800410a:	b2ca      	uxtb	r2, r1
 800410c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	3301      	adds	r3, #1
 8004112:	617b      	str	r3, [r7, #20]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	429a      	cmp	r2, r3
 800411a:	dbf0      	blt.n	80040fe <_read+0x12>
  }

  return len;
 800411c:	687b      	ldr	r3, [r7, #4]
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800412e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004132:	4618      	mov	r0, r3
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
 8004146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800414e:	605a      	str	r2, [r3, #4]
  return 0;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <_isatty>:

int _isatty(int file)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004166:	2301      	movs	r3, #1
}
 8004168:	4618      	mov	r0, r3
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004174:	b480      	push	{r7}
 8004176:	b085      	sub	sp, #20
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004198:	4a14      	ldr	r2, [pc, #80]	@ (80041ec <_sbrk+0x5c>)
 800419a:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <_sbrk+0x60>)
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a4:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <_sbrk+0x64>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041ac:	4b11      	ldr	r3, [pc, #68]	@ (80041f4 <_sbrk+0x64>)
 80041ae:	4a12      	ldr	r2, [pc, #72]	@ (80041f8 <_sbrk+0x68>)
 80041b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041b2:	4b10      	ldr	r3, [pc, #64]	@ (80041f4 <_sbrk+0x64>)
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d207      	bcs.n	80041d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041c0:	f011 fe00 	bl	8015dc4 <__errno>
 80041c4:	4603      	mov	r3, r0
 80041c6:	220c      	movs	r2, #12
 80041c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ca:	f04f 33ff 	mov.w	r3, #4294967295
 80041ce:	e009      	b.n	80041e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d0:	4b08      	ldr	r3, [pc, #32]	@ (80041f4 <_sbrk+0x64>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041d6:	4b07      	ldr	r3, [pc, #28]	@ (80041f4 <_sbrk+0x64>)
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4413      	add	r3, r2
 80041de:	4a05      	ldr	r2, [pc, #20]	@ (80041f4 <_sbrk+0x64>)
 80041e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041e2:	68fb      	ldr	r3, [r7, #12]
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20030000 	.word	0x20030000
 80041f0:	00000600 	.word	0x00000600
 80041f4:	2000114c 	.word	0x2000114c
 80041f8:	20002e70 	.word	0x20002e70

080041fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041fc:	b480      	push	{r7}
 80041fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004200:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <SystemInit+0x98>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004206:	4a23      	ldr	r2, [pc, #140]	@ (8004294 <SystemInit+0x98>)
 8004208:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800420c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800421a:	f043 0301 	orr.w	r3, r3, #1
 800421e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004224:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004228:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800422a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004234:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <SystemInit+0x9c>)
 8004236:	4013      	ands	r3, r2
 8004238:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800423a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800423e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004242:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004246:	f023 0305 	bic.w	r3, r3, #5
 800424a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800424e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004252:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004256:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004266:	4a0d      	ldr	r2, [pc, #52]	@ (800429c <SystemInit+0xa0>)
 8004268:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800426a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800426e:	4a0b      	ldr	r2, [pc, #44]	@ (800429c <SystemInit+0xa0>)
 8004270:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800427c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004280:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004286:	2200      	movs	r2, #0
 8004288:	619a      	str	r2, [r3, #24]
}
 800428a:	bf00      	nop
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr
 8004294:	e000ed00 	.word	0xe000ed00
 8004298:	faf6fefb 	.word	0xfaf6fefb
 800429c:	22041000 	.word	0x22041000

080042a0 <Timer_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Timer_Init (void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
	DIAG ("\t\tTimer initialised\r\n");
 80042a4:	4805      	ldr	r0, [pc, #20]	@ (80042bc <Timer_Init+0x1c>)
 80042a6:	f7fe f8ef 	bl	8002488 <DIAG>
	HAL_Delay (10);
 80042aa:	200a      	movs	r0, #10
 80042ac:	f7fe f860 	bl	8002370 <HAL_Delay>
	// Start TIM2 in basic mode
	HAL_TIM_Base_Start_IT(&htim2);
 80042b0:	4803      	ldr	r0, [pc, #12]	@ (80042c0 <Timer_Init+0x20>)
 80042b2:	f005 fedf 	bl	800a074 <HAL_TIM_Base_Start_IT>
}
 80042b6:	bf00      	nop
 80042b8:	bd80      	pop	{r7, pc}
 80042ba:	bf00      	nop
 80042bc:	080170e8 	.word	0x080170e8
 80042c0:	2000100c 	.word	0x2000100c

080042c4 <HAL_TIM_PeriodElapsedCallback>:

//------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]

	// Base timer @ 1ms
	if (htim->Instance == TIM2)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d4:	d10b      	bne.n	80042ee <HAL_TIM_PeriodElapsedCallback+0x2a>
	{

//		tsTimer.bImuFlag = true;
		// Clear the timer interrupt flag
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);		  // Clear the timer interrupt flag
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f06f 0201 	mvn.w	r2, #1
 80042de:	611a      	str	r2, [r3, #16]
		tsTimer.TimeFlag = true;
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <HAL_TIM_PeriodElapsedCallback+0x38>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	709a      	strb	r2, [r3, #2]
//		tsTimer.bImuFlag = true;
		htim2.Init.Period = Interrupt_ms;
 80042e6:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80042e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80042ec:	60da      	str	r2, [r3, #12]

		//DIAG ("%d\r",  i++);
	}
}
 80042ee:	bf00      	nop
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	20001150 	.word	0x20001150
 8004300:	2000100c 	.word	0x2000100c

08004304 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004304:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004306:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004308:	3304      	adds	r3, #4

0800430a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800430a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800430c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800430e:	d3f9      	bcc.n	8004304 <CopyDataInit>
  bx lr
 8004310:	4770      	bx	lr

08004312 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004312:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004314:	3004      	adds	r0, #4

08004316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004316:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004318:	d3fb      	bcc.n	8004312 <FillZerobss>
  bx lr
 800431a:	4770      	bx	lr

0800431c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800431c:	480c      	ldr	r0, [pc, #48]	@ (8004350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800431e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004320:	f7ff ff6c 	bl	80041fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004324:	480b      	ldr	r0, [pc, #44]	@ (8004354 <LoopForever+0x6>)
 8004326:	490c      	ldr	r1, [pc, #48]	@ (8004358 <LoopForever+0xa>)
 8004328:	4a0c      	ldr	r2, [pc, #48]	@ (800435c <LoopForever+0xe>)
 800432a:	2300      	movs	r3, #0
 800432c:	f7ff ffed 	bl	800430a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004330:	480b      	ldr	r0, [pc, #44]	@ (8004360 <LoopForever+0x12>)
 8004332:	490c      	ldr	r1, [pc, #48]	@ (8004364 <LoopForever+0x16>)
 8004334:	4a0c      	ldr	r2, [pc, #48]	@ (8004368 <LoopForever+0x1a>)
 8004336:	2300      	movs	r3, #0
 8004338:	f7ff ffe7 	bl	800430a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800433c:	480b      	ldr	r0, [pc, #44]	@ (800436c <LoopForever+0x1e>)
 800433e:	490c      	ldr	r1, [pc, #48]	@ (8004370 <LoopForever+0x22>)
 8004340:	2300      	movs	r3, #0
 8004342:	f7ff ffe8 	bl	8004316 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004346:	f011 fd43 	bl	8015dd0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800434a:	f7ff f9dd 	bl	8003708 <main>

0800434e <LoopForever>:

LoopForever:
  b LoopForever
 800434e:	e7fe      	b.n	800434e <LoopForever>
  ldr   r0, =_estack
 8004350:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004354:	20000008 	.word	0x20000008
 8004358:	20000188 	.word	0x20000188
 800435c:	08018954 	.word	0x08018954
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004360:	200301e4 	.word	0x200301e4
 8004364:	20031f57 	.word	0x20031f57
 8004368:	08018b1a 	.word	0x08018b1a
  INIT_BSS _sbss, _ebss
 800436c:	200001d4 	.word	0x200001d4
 8004370:	20002e70 	.word	0x20002e70

08004374 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <ADC1_IRQHandler>
	...

08004378 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800437e:	2300      	movs	r3, #0
 8004380:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004382:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <HAL_Init+0x3c>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a0b      	ldr	r2, [pc, #44]	@ (80043b4 <HAL_Init+0x3c>)
 8004388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800438c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800438e:	2003      	movs	r0, #3
 8004390:	f000 f9b4 	bl	80046fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004394:	2000      	movs	r0, #0
 8004396:	f000 f80f 	bl	80043b8 <HAL_InitTick>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	71fb      	strb	r3, [r7, #7]
 80043a4:	e001      	b.n	80043aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043a6:	f7ff fcdc 	bl	8003d62 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043aa:	79fb      	ldrb	r3, [r7, #7]
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	58004000 	.word	0x58004000

080043b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80043c0:	2300      	movs	r3, #0
 80043c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80043c4:	4b17      	ldr	r3, [pc, #92]	@ (8004424 <HAL_InitTick+0x6c>)
 80043c6:	781b      	ldrb	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d024      	beq.n	8004416 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80043cc:	f004 f8b6 	bl	800853c <HAL_RCC_GetHCLKFreq>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b14      	ldr	r3, [pc, #80]	@ (8004424 <HAL_InitTick+0x6c>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	4619      	mov	r1, r3
 80043d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80043e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e4:	4618      	mov	r0, r3
 80043e6:	f000 f9ca 	bl	800477e <HAL_SYSTICK_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10f      	bne.n	8004410 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2b0f      	cmp	r3, #15
 80043f4:	d809      	bhi.n	800440a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043f6:	2200      	movs	r2, #0
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	f04f 30ff 	mov.w	r0, #4294967295
 80043fe:	f000 f988 	bl	8004712 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004402:	4a09      	ldr	r2, [pc, #36]	@ (8004428 <HAL_InitTick+0x70>)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e007      	b.n	800441a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	e004      	b.n	800441a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
 8004414:	e001      	b.n	800441a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800441a:	7bfb      	ldrb	r3, [r7, #15]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	20000014 	.word	0x20000014
 8004428:	20000010 	.word	0x20000010

0800442c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <HAL_IncTick+0x20>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_IncTick+0x24>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4413      	add	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <HAL_IncTick+0x24>)
 800443e:	6013      	str	r3, [r2, #0]
}
 8004440:	bf00      	nop
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	20000014 	.word	0x20000014
 8004450:	20001158 	.word	0x20001158

08004454 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  return uwTick;
 8004458:	4b03      	ldr	r3, [pc, #12]	@ (8004468 <HAL_GetTick+0x14>)
 800445a:	681b      	ldr	r3, [r3, #0]
}
 800445c:	4618      	mov	r0, r3
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	20001158 	.word	0x20001158

0800446c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800446c:	b480      	push	{r7}
 800446e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004470:	4b03      	ldr	r3, [pc, #12]	@ (8004480 <HAL_GetTickPrio+0x14>)
 8004472:	681b      	ldr	r3, [r3, #0]
}
 8004474:	4618      	mov	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	20000010 	.word	0x20000010

08004484 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004488:	4b03      	ldr	r3, [pc, #12]	@ (8004498 <HAL_GetTickFreq+0x14>)
 800448a:	781b      	ldrb	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	20000014 	.word	0x20000014

0800449c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800449c:	b480      	push	{r7}
 800449e:	b085      	sub	sp, #20
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044ac:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <__NVIC_SetPriorityGrouping+0x44>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044b8:	4013      	ands	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ce:	4a04      	ldr	r2, [pc, #16]	@ (80044e0 <__NVIC_SetPriorityGrouping+0x44>)
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	60d3      	str	r3, [r2, #12]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	e000ed00 	.word	0xe000ed00

080044e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e8:	4b04      	ldr	r3, [pc, #16]	@ (80044fc <__NVIC_GetPriorityGrouping+0x18>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	0a1b      	lsrs	r3, r3, #8
 80044ee:	f003 0307 	and.w	r3, r3, #7
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	e000ed00 	.word	0xe000ed00

08004500 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	2b00      	cmp	r3, #0
 8004510:	db0b      	blt.n	800452a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	f003 021f 	and.w	r2, r3, #31
 8004518:	4907      	ldr	r1, [pc, #28]	@ (8004538 <__NVIC_EnableIRQ+0x38>)
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	095b      	lsrs	r3, r3, #5
 8004520:	2001      	movs	r0, #1
 8004522:	fa00 f202 	lsl.w	r2, r0, r2
 8004526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800452a:	bf00      	nop
 800452c:	370c      	adds	r7, #12
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	e000e100 	.word	0xe000e100

0800453c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db12      	blt.n	8004574 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	490a      	ldr	r1, [pc, #40]	@ (8004580 <__NVIC_DisableIRQ+0x44>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	3320      	adds	r3, #32
 8004564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004568:	f3bf 8f4f 	dsb	sy
}
 800456c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800456e:	f3bf 8f6f 	isb	sy
}
 8004572:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	e000e100 	.word	0xe000e100

08004584 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	4603      	mov	r3, r0
 800458c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800458e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004592:	2b00      	cmp	r3, #0
 8004594:	db0c      	blt.n	80045b0 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	f003 021f 	and.w	r2, r3, #31
 800459c:	4907      	ldr	r1, [pc, #28]	@ (80045bc <__NVIC_SetPendingIRQ+0x38>)
 800459e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2001      	movs	r0, #1
 80045a6:	fa00 f202 	lsl.w	r2, r0, r2
 80045aa:	3340      	adds	r3, #64	@ 0x40
 80045ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	e000e100 	.word	0xe000e100

080045c0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	db0c      	blt.n	80045ec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	f003 021f 	and.w	r2, r3, #31
 80045d8:	4907      	ldr	r1, [pc, #28]	@ (80045f8 <__NVIC_ClearPendingIRQ+0x38>)
 80045da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2001      	movs	r0, #1
 80045e2:	fa00 f202 	lsl.w	r2, r0, r2
 80045e6:	3360      	adds	r3, #96	@ 0x60
 80045e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr
 80045f8:	e000e100 	.word	0xe000e100

080045fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	6039      	str	r1, [r7, #0]
 8004606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db0a      	blt.n	8004626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	b2da      	uxtb	r2, r3
 8004614:	490c      	ldr	r1, [pc, #48]	@ (8004648 <__NVIC_SetPriority+0x4c>)
 8004616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461a:	0112      	lsls	r2, r2, #4
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	440b      	add	r3, r1
 8004620:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004624:	e00a      	b.n	800463c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	4908      	ldr	r1, [pc, #32]	@ (800464c <__NVIC_SetPriority+0x50>)
 800462c:	79fb      	ldrb	r3, [r7, #7]
 800462e:	f003 030f 	and.w	r3, r3, #15
 8004632:	3b04      	subs	r3, #4
 8004634:	0112      	lsls	r2, r2, #4
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	440b      	add	r3, r1
 800463a:	761a      	strb	r2, [r3, #24]
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr
 8004648:	e000e100 	.word	0xe000e100
 800464c:	e000ed00 	.word	0xe000ed00

08004650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004650:	b480      	push	{r7}
 8004652:	b089      	sub	sp, #36	@ 0x24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	f003 0307 	and.w	r3, r3, #7
 8004662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	f1c3 0307 	rsb	r3, r3, #7
 800466a:	2b04      	cmp	r3, #4
 800466c:	bf28      	it	cs
 800466e:	2304      	movcs	r3, #4
 8004670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	3304      	adds	r3, #4
 8004676:	2b06      	cmp	r3, #6
 8004678:	d902      	bls.n	8004680 <NVIC_EncodePriority+0x30>
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	3b03      	subs	r3, #3
 800467e:	e000      	b.n	8004682 <NVIC_EncodePriority+0x32>
 8004680:	2300      	movs	r3, #0
 8004682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004684:	f04f 32ff 	mov.w	r2, #4294967295
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	fa02 f303 	lsl.w	r3, r2, r3
 800468e:	43da      	mvns	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	401a      	ands	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004698:	f04f 31ff 	mov.w	r1, #4294967295
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	fa01 f303 	lsl.w	r3, r1, r3
 80046a2:	43d9      	mvns	r1, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80046a8:	4313      	orrs	r3, r2
         );
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3724      	adds	r7, #36	@ 0x24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
	...

080046b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046c8:	d301      	bcc.n	80046ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80046ca:	2301      	movs	r3, #1
 80046cc:	e00f      	b.n	80046ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046ce:	4a0a      	ldr	r2, [pc, #40]	@ (80046f8 <SysTick_Config+0x40>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046d6:	210f      	movs	r1, #15
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295
 80046dc:	f7ff ff8e 	bl	80045fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046e0:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <SysTick_Config+0x40>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046e6:	4b04      	ldr	r3, [pc, #16]	@ (80046f8 <SysTick_Config+0x40>)
 80046e8:	2207      	movs	r2, #7
 80046ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	e000e010 	.word	0xe000e010

080046fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fec9 	bl	800449c <__NVIC_SetPriorityGrouping>
}
 800470a:	bf00      	nop
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	4603      	mov	r3, r0
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004720:	f7ff fee0 	bl	80044e4 <__NVIC_GetPriorityGrouping>
 8004724:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	68b9      	ldr	r1, [r7, #8]
 800472a:	6978      	ldr	r0, [r7, #20]
 800472c:	f7ff ff90 	bl	8004650 <NVIC_EncodePriority>
 8004730:	4602      	mov	r2, r0
 8004732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004736:	4611      	mov	r1, r2
 8004738:	4618      	mov	r0, r3
 800473a:	f7ff ff5f 	bl	80045fc <__NVIC_SetPriority>
}
 800473e:	bf00      	nop
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b082      	sub	sp, #8
 800474a:	af00      	add	r7, sp, #0
 800474c:	4603      	mov	r3, r0
 800474e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004754:	4618      	mov	r0, r3
 8004756:	f7ff fed3 	bl	8004500 <__NVIC_EnableIRQ>
}
 800475a:	bf00      	nop
 800475c:	3708      	adds	r7, #8
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b082      	sub	sp, #8
 8004766:	af00      	add	r7, sp, #0
 8004768:	4603      	mov	r3, r0
 800476a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800476c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff fee3 	bl	800453c <__NVIC_DisableIRQ>
}
 8004776:	bf00      	nop
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b082      	sub	sp, #8
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f7ff ff96 	bl	80046b8 <SysTick_Config>
 800478c:	4603      	mov	r3, r0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}

08004796 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004796:	b580      	push	{r7, lr}
 8004798:	b082      	sub	sp, #8
 800479a:	af00      	add	r7, sp, #0
 800479c:	4603      	mov	r3, r0
 800479e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80047a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f7ff feed 	bl	8004584 <__NVIC_SetPendingIRQ>
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	4603      	mov	r3, r0
 80047ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80047bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff fefd 	bl	80045c0 <__NVIC_ClearPendingIRQ>
}
 80047c6:	bf00      	nop
 80047c8:	3708      	adds	r7, #8
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b086      	sub	sp, #24
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d101      	bne.n	80047ee <HAL_DMA_Start_IT+0x20>
 80047ea:	2302      	movs	r3, #2
 80047ec:	e066      	b.n	80048bc <HAL_DMA_Start_IT+0xee>
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d155      	bne.n	80048ae <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2202      	movs	r2, #2
 8004806:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0201 	bic.w	r2, r2, #1
 800481e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f9b9 	bl	8004b9e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f042 020e 	orr.w	r2, r2, #14
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	e00f      	b.n	8004866 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0204 	bic.w	r2, r2, #4
 8004854:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f042 020a 	orr.w	r2, r2, #10
 8004864:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d007      	beq.n	8004884 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004882:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004896:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800489a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
 80048ac:	e005      	b.n	80048ba <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048b6:	2302      	movs	r3, #2
 80048b8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b083      	sub	sp, #12
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e04f      	b.n	8004976 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d008      	beq.n	80048f4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2204      	movs	r2, #4
 80048e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e040      	b.n	8004976 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 020e 	bic.w	r2, r2, #14
 8004902:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800490e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004912:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0201 	bic.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004928:	f003 021c 	and.w	r2, r3, #28
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004930:	2101      	movs	r1, #1
 8004932:	fa01 f202 	lsl.w	r2, r1, r2
 8004936:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004940:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004958:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004962:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr

08004982 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b084      	sub	sp, #16
 8004986:	af00      	add	r7, sp, #0
 8004988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d005      	beq.n	80049a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2204      	movs	r2, #4
 800499e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	73fb      	strb	r3, [r7, #15]
 80049a4:	e047      	b.n	8004a36 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f022 020e 	bic.w	r2, r2, #14
 80049b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 0201 	bic.w	r2, r2, #1
 80049c4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049da:	f003 021c 	and.w	r2, r3, #28
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f202 	lsl.w	r2, r1, r2
 80049e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80049f2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00c      	beq.n	8004a16 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a14:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d003      	beq.n	8004a36 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
    }
  }
  return status;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3710      	adds	r7, #16
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a5c:	f003 031c 	and.w	r3, r3, #28
 8004a60:	2204      	movs	r2, #4
 8004a62:	409a      	lsls	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d026      	beq.n	8004aba <HAL_DMA_IRQHandler+0x7a>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d021      	beq.n	8004aba <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0320 	and.w	r3, r3, #32
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d107      	bne.n	8004a94 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f022 0204 	bic.w	r2, r2, #4
 8004a92:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a98:	f003 021c 	and.w	r2, r3, #28
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	2104      	movs	r1, #4
 8004aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8004aa6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d071      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ab8:	e06c      	b.n	8004b94 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f003 031c 	and.w	r3, r3, #28
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	409a      	lsls	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d02e      	beq.n	8004b2c <HAL_DMA_IRQHandler+0xec>
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d029      	beq.n	8004b2c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 020a 	bic.w	r2, r2, #10
 8004af4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	f003 021c 	and.w	r2, r3, #28
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8004b10:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d038      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b2a:	e033      	b.n	8004b94 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b30:	f003 031c 	and.w	r3, r3, #28
 8004b34:	2208      	movs	r2, #8
 8004b36:	409a      	lsls	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02a      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x156>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f003 0308 	and.w	r3, r3, #8
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d025      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 020e 	bic.w	r2, r2, #14
 8004b58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5e:	f003 021c 	and.w	r2, r3, #28
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	2101      	movs	r1, #1
 8004b68:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2201      	movs	r2, #1
 8004b72:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d004      	beq.n	8004b96 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
}
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b085      	sub	sp, #20
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bb4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d004      	beq.n	8004bc8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bc6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bcc:	f003 021c 	and.w	r2, r3, #28
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8004bda:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b10      	cmp	r3, #16
 8004bea:	d108      	bne.n	8004bfe <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004bfc:	e007      	b.n	8004c0e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68ba      	ldr	r2, [r7, #8]
 8004c04:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	60da      	str	r2, [r3, #12]
}
 8004c0e:	bf00      	nop
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
	...

08004c1c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c2a:	e14c      	b.n	8004ec6 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	2101      	movs	r1, #1
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	fa01 f303 	lsl.w	r3, r1, r3
 8004c38:	4013      	ands	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 813e 	beq.w	8004ec0 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f003 0303 	and.w	r3, r3, #3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d005      	beq.n	8004c5c <HAL_GPIO_Init+0x40>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f003 0303 	and.w	r3, r3, #3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d130      	bne.n	8004cbe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	2203      	movs	r2, #3
 8004c68:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6c:	43db      	mvns	r3, r3
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	4013      	ands	r3, r2
 8004c72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c92:	2201      	movs	r2, #1
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9a:	43db      	mvns	r3, r3
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	f003 0201 	and.w	r2, r3, #1
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d017      	beq.n	8004cfa <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cda:	43db      	mvns	r3, r3
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	685b      	ldr	r3, [r3, #4]
 8004cfe:	f003 0303 	and.w	r3, r3, #3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d123      	bne.n	8004d4e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	08da      	lsrs	r2, r3, #3
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3208      	adds	r2, #8
 8004d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	220f      	movs	r2, #15
 8004d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d22:	43db      	mvns	r3, r3
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4013      	ands	r3, r2
 8004d28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	691a      	ldr	r2, [r3, #16]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	693a      	ldr	r2, [r7, #16]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	08da      	lsrs	r2, r3, #3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	3208      	adds	r2, #8
 8004d48:	6939      	ldr	r1, [r7, #16]
 8004d4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	2203      	movs	r2, #3
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f003 0203 	and.w	r2, r3, #3
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	005b      	lsls	r3, r3, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 8098 	beq.w	8004ec0 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004d90:	4a54      	ldr	r2, [pc, #336]	@ (8004ee4 <HAL_GPIO_Init+0x2c8>)
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	089b      	lsrs	r3, r3, #2
 8004d96:	3302      	adds	r3, #2
 8004d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	220f      	movs	r2, #15
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	43db      	mvns	r3, r3
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4013      	ands	r3, r2
 8004db2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004dba:	d019      	beq.n	8004df0 <HAL_GPIO_Init+0x1d4>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8004ee8 <HAL_GPIO_Init+0x2cc>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d013      	beq.n	8004dec <HAL_GPIO_Init+0x1d0>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a49      	ldr	r2, [pc, #292]	@ (8004eec <HAL_GPIO_Init+0x2d0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00d      	beq.n	8004de8 <HAL_GPIO_Init+0x1cc>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a48      	ldr	r2, [pc, #288]	@ (8004ef0 <HAL_GPIO_Init+0x2d4>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d007      	beq.n	8004de4 <HAL_GPIO_Init+0x1c8>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a47      	ldr	r2, [pc, #284]	@ (8004ef4 <HAL_GPIO_Init+0x2d8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d101      	bne.n	8004de0 <HAL_GPIO_Init+0x1c4>
 8004ddc:	2304      	movs	r3, #4
 8004dde:	e008      	b.n	8004df2 <HAL_GPIO_Init+0x1d6>
 8004de0:	2307      	movs	r3, #7
 8004de2:	e006      	b.n	8004df2 <HAL_GPIO_Init+0x1d6>
 8004de4:	2303      	movs	r3, #3
 8004de6:	e004      	b.n	8004df2 <HAL_GPIO_Init+0x1d6>
 8004de8:	2302      	movs	r3, #2
 8004dea:	e002      	b.n	8004df2 <HAL_GPIO_Init+0x1d6>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <HAL_GPIO_Init+0x1d6>
 8004df0:	2300      	movs	r3, #0
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	f002 0203 	and.w	r2, r2, #3
 8004df8:	0092      	lsls	r2, r2, #2
 8004dfa:	4093      	lsls	r3, r2
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004e02:	4938      	ldr	r1, [pc, #224]	@ (8004ee4 <HAL_GPIO_Init+0x2c8>)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	089b      	lsrs	r3, r3, #2
 8004e08:	3302      	adds	r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e10:	4b39      	ldr	r3, [pc, #228]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d003      	beq.n	8004e34 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004e34:	4a30      	ldr	r2, [pc, #192]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	43db      	mvns	r3, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004e5e:	4a26      	ldr	r2, [pc, #152]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004e64:	4b24      	ldr	r3, [pc, #144]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004e8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004e92:	4b19      	ldr	r3, [pc, #100]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8004ef8 <HAL_GPIO_Init+0x2dc>)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f47f aeab 	bne.w	8004c2c <HAL_GPIO_Init+0x10>
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	bf00      	nop
 8004eda:	371c      	adds	r7, #28
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40010000 	.word	0x40010000
 8004ee8:	48000400 	.word	0x48000400
 8004eec:	48000800 	.word	0x48000800
 8004ef0:	48000c00 	.word	0x48000c00
 8004ef4:	48001000 	.word	0x48001000
 8004ef8:	58000800 	.word	0x58000800

08004efc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	460b      	mov	r3, r1
 8004f06:	807b      	strh	r3, [r7, #2]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f0c:	787b      	ldrb	r3, [r7, #1]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004f12:	887a      	ldrh	r2, [r7, #2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004f18:	e002      	b.n	8004f20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004f1a:	887a      	ldrh	r2, [r7, #2]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	4603      	mov	r3, r0
 8004f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f36:	4b08      	ldr	r3, [pc, #32]	@ (8004f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f38:	68da      	ldr	r2, [r3, #12]
 8004f3a:	88fb      	ldrh	r3, [r7, #6]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d006      	beq.n	8004f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f42:	4a05      	ldr	r2, [pc, #20]	@ (8004f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004f44:	88fb      	ldrh	r3, [r7, #6]
 8004f46:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f48:	88fb      	ldrh	r3, [r7, #6]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fd faca 	bl	80024e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f50:	bf00      	nop
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	58000800 	.word	0x58000800

08004f5c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8004f62:	4b0a      	ldr	r3, [pc, #40]	@ (8004f8c <HAL_HSEM_IRQHandler+0x30>)
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8004f68:	4b08      	ldr	r3, [pc, #32]	@ (8004f8c <HAL_HSEM_IRQHandler+0x30>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	43db      	mvns	r3, r3
 8004f70:	4906      	ldr	r1, [pc, #24]	@ (8004f8c <HAL_HSEM_IRQHandler+0x30>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004f76:	4a05      	ldr	r2, [pc, #20]	@ (8004f8c <HAL_HSEM_IRQHandler+0x30>)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f807 	bl	8004f90 <HAL_HSEM_FreeCallback>
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	58001500 	.word	0x58001500

08004f90 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e08d      	b.n	80050d2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fe fee2 	bl	8003d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2224      	movs	r2, #36	@ 0x24
 8004fd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 0201 	bic.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004ff4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005004:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689a      	ldr	r2, [r3, #8]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800501a:	609a      	str	r2, [r3, #8]
 800501c:	e006      	b.n	800502c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689a      	ldr	r2, [r3, #8]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800502a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d108      	bne.n	8005046 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005042:	605a      	str	r2, [r3, #4]
 8005044:	e007      	b.n	8005056 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005054:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005068:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68da      	ldr	r2, [r3, #12]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005078:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	699b      	ldr	r3, [r3, #24]
 800508a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	69d9      	ldr	r1, [r3, #28]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3708      	adds	r7, #8
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
	...

080050dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af02      	add	r7, sp, #8
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	461a      	mov	r2, r3
 80050e8:	460b      	mov	r3, r1
 80050ea:	817b      	strh	r3, [r7, #10]
 80050ec:	4613      	mov	r3, r2
 80050ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	f040 80fd 	bne.w	80052f8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_I2C_Master_Transmit+0x30>
 8005108:	2302      	movs	r3, #2
 800510a:	e0f6      	b.n	80052fa <HAL_I2C_Master_Transmit+0x21e>
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005114:	f7ff f99e 	bl	8004454 <HAL_GetTick>
 8005118:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	2319      	movs	r3, #25
 8005120:	2201      	movs	r2, #1
 8005122:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f914 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e0e1      	b.n	80052fa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2221      	movs	r2, #33	@ 0x21
 800513a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2210      	movs	r2, #16
 8005142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	893a      	ldrh	r2, [r7, #8]
 8005156:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005162:	b29b      	uxth	r3, r3
 8005164:	2bff      	cmp	r3, #255	@ 0xff
 8005166:	d906      	bls.n	8005176 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	22ff      	movs	r2, #255	@ 0xff
 800516c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800516e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005172:	617b      	str	r3, [r7, #20]
 8005174:	e007      	b.n	8005186 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517a:	b29a      	uxth	r2, r3
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005184:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d024      	beq.n	80051d8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	781a      	ldrb	r2, [r3, #0]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b6:	3b01      	subs	r3, #1
 80051b8:	b29a      	uxth	r2, r3
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	3301      	adds	r3, #1
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	8979      	ldrh	r1, [r7, #10]
 80051ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005304 <HAL_I2C_Master_Transmit+0x228>)
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fa83 	bl	80056dc <I2C_TransferConfig>
 80051d6:	e066      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	8979      	ldrh	r1, [r7, #10]
 80051e0:	4b48      	ldr	r3, [pc, #288]	@ (8005304 <HAL_I2C_Master_Transmit+0x228>)
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f000 fa78 	bl	80056dc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80051ec:	e05b      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	6a39      	ldr	r1, [r7, #32]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 f907 	bl	8005406 <I2C_WaitOnTXISFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07b      	b.n	80052fa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	781a      	ldrb	r2, [r3, #0]
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800521c:	b29b      	uxth	r3, r3
 800521e:	3b01      	subs	r3, #1
 8005220:	b29a      	uxth	r2, r3
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005236:	b29b      	uxth	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d034      	beq.n	80052a6 <HAL_I2C_Master_Transmit+0x1ca>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005240:	2b00      	cmp	r3, #0
 8005242:	d130      	bne.n	80052a6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	9300      	str	r3, [sp, #0]
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	2200      	movs	r2, #0
 800524c:	2180      	movs	r1, #128	@ 0x80
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 f880 	bl	8005354 <I2C_WaitOnFlagUntilTimeout>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d001      	beq.n	800525e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e04d      	b.n	80052fa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005262:	b29b      	uxth	r3, r3
 8005264:	2bff      	cmp	r3, #255	@ 0xff
 8005266:	d90e      	bls.n	8005286 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	22ff      	movs	r2, #255	@ 0xff
 800526c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005272:	b2da      	uxtb	r2, r3
 8005274:	8979      	ldrh	r1, [r7, #10]
 8005276:	2300      	movs	r3, #0
 8005278:	9300      	str	r3, [sp, #0]
 800527a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f000 fa2c 	bl	80056dc <I2C_TransferConfig>
 8005284:	e00f      	b.n	80052a6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800528a:	b29a      	uxth	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005294:	b2da      	uxtb	r2, r3
 8005296:	8979      	ldrh	r1, [r7, #10]
 8005298:	2300      	movs	r3, #0
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f000 fa1b 	bl	80056dc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d19e      	bne.n	80051ee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	6a39      	ldr	r1, [r7, #32]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 f8ed 	bl	8005494 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d001      	beq.n	80052c4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e01a      	b.n	80052fa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2220      	movs	r2, #32
 80052ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6859      	ldr	r1, [r3, #4]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <HAL_I2C_Master_Transmit+0x22c>)
 80052d8:	400b      	ands	r3, r1
 80052da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80052f4:	2300      	movs	r3, #0
 80052f6:	e000      	b.n	80052fa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80052f8:	2302      	movs	r3, #2
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	80002000 	.word	0x80002000
 8005308:	fe00e800 	.word	0xfe00e800

0800530c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d103      	bne.n	800532a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2200      	movs	r2, #0
 8005328:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d007      	beq.n	8005348 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	699a      	ldr	r2, [r3, #24]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0201 	orr.w	r2, r2, #1
 8005346:	619a      	str	r2, [r3, #24]
  }
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	4613      	mov	r3, r2
 8005362:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005364:	e03b      	b.n	80053de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005366:	69ba      	ldr	r2, [r7, #24]
 8005368:	6839      	ldr	r1, [r7, #0]
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f000 f8d6 	bl	800551c <I2C_IsErrorOccurred>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e041      	b.n	80053fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005380:	d02d      	beq.n	80053de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005382:	f7ff f867 	bl	8004454 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d302      	bcc.n	8005398 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d122      	bne.n	80053de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	4013      	ands	r3, r2
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	bf0c      	ite	eq
 80053a8:	2301      	moveq	r3, #1
 80053aa:	2300      	movne	r3, #0
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	461a      	mov	r2, r3
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d113      	bne.n	80053de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	f043 0220 	orr.w	r2, r3, #32
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2220      	movs	r2, #32
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e00f      	b.n	80053fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699a      	ldr	r2, [r3, #24]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4013      	ands	r3, r2
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	461a      	mov	r2, r3
 80053f6:	79fb      	ldrb	r3, [r7, #7]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d0b4      	beq.n	8005366 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}

08005406 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005406:	b580      	push	{r7, lr}
 8005408:	b084      	sub	sp, #16
 800540a:	af00      	add	r7, sp, #0
 800540c:	60f8      	str	r0, [r7, #12]
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005412:	e033      	b.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f000 f87f 	bl	800551c <I2C_IsErrorOccurred>
 800541e:	4603      	mov	r3, r0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e031      	b.n	800548c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542e:	d025      	beq.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005430:	f7ff f810 	bl	8004454 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d11a      	bne.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	f003 0302 	and.w	r3, r3, #2
 8005450:	2b02      	cmp	r3, #2
 8005452:	d013      	beq.n	800547c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005458:	f043 0220 	orr.w	r2, r3, #32
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e007      	b.n	800548c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b02      	cmp	r3, #2
 8005488:	d1c4      	bne.n	8005414 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}

08005494 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054a0:	e02f      	b.n	8005502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	68b9      	ldr	r1, [r7, #8]
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 f838 	bl	800551c <I2C_IsErrorOccurred>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e02d      	b.n	8005512 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b6:	f7fe ffcd 	bl	8004454 <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d302      	bcc.n	80054cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d11a      	bne.n	8005502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0320 	and.w	r3, r3, #32
 80054d6:	2b20      	cmp	r3, #32
 80054d8:	d013      	beq.n	8005502 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054de:	f043 0220 	orr.w	r2, r3, #32
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e007      	b.n	8005512 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d1c8      	bne.n	80054a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
	...

0800551c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b08a      	sub	sp, #40	@ 0x28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	f003 0310 	and.w	r3, r3, #16
 8005544:	2b00      	cmp	r3, #0
 8005546:	d068      	beq.n	800561a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2210      	movs	r2, #16
 800554e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005550:	e049      	b.n	80055e6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005558:	d045      	beq.n	80055e6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800555a:	f7fe ff7b 	bl	8004454 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	68ba      	ldr	r2, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	d302      	bcc.n	8005570 <I2C_IsErrorOccurred+0x54>
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d13a      	bne.n	80055e6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800557a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005582:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699b      	ldr	r3, [r3, #24]
 800558a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800558e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005592:	d121      	bne.n	80055d8 <I2C_IsErrorOccurred+0xbc>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559a:	d01d      	beq.n	80055d8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800559c:	7cfb      	ldrb	r3, [r7, #19]
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d01a      	beq.n	80055d8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055b0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055b2:	f7fe ff4f 	bl	8004454 <HAL_GetTick>
 80055b6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055b8:	e00e      	b.n	80055d8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80055ba:	f7fe ff4b 	bl	8004454 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b19      	cmp	r3, #25
 80055c6:	d907      	bls.n	80055d8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	f043 0320 	orr.w	r3, r3, #32
 80055ce:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80055d6:	e006      	b.n	80055e6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d1e9      	bne.n	80055ba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f003 0320 	and.w	r3, r3, #32
 80055f0:	2b20      	cmp	r3, #32
 80055f2:	d003      	beq.n	80055fc <I2C_IsErrorOccurred+0xe0>
 80055f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0aa      	beq.n	8005552 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80055fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005600:	2b00      	cmp	r3, #0
 8005602:	d103      	bne.n	800560c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2220      	movs	r2, #32
 800560a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	f043 0304 	orr.w	r3, r3, #4
 8005612:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00b      	beq.n	8005644 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	f043 0301 	orr.w	r3, r3, #1
 8005632:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800563c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800564e:	6a3b      	ldr	r3, [r7, #32]
 8005650:	f043 0308 	orr.w	r3, r3, #8
 8005654:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800565e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	f043 0302 	orr.w	r3, r3, #2
 8005676:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005680:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005688:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01c      	beq.n	80056ca <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	f7ff fe3b 	bl	800530c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6859      	ldr	r1, [r3, #4]
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <I2C_IsErrorOccurred+0x1bc>)
 80056a2:	400b      	ands	r3, r1
 80056a4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	431a      	orrs	r2, r3
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80056ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	3728      	adds	r7, #40	@ 0x28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	fe00e800 	.word	0xfe00e800

080056dc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80056dc:	b480      	push	{r7}
 80056de:	b087      	sub	sp, #28
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	607b      	str	r3, [r7, #4]
 80056e6:	460b      	mov	r3, r1
 80056e8:	817b      	strh	r3, [r7, #10]
 80056ea:	4613      	mov	r3, r2
 80056ec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056ee:	897b      	ldrh	r3, [r7, #10]
 80056f0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056f4:	7a7b      	ldrb	r3, [r7, #9]
 80056f6:	041b      	lsls	r3, r3, #16
 80056f8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80056fc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	4313      	orrs	r3, r2
 8005706:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800570a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	0d5b      	lsrs	r3, r3, #21
 8005716:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800571a:	4b08      	ldr	r3, [pc, #32]	@ (800573c <I2C_TransferConfig+0x60>)
 800571c:	430b      	orrs	r3, r1
 800571e:	43db      	mvns	r3, r3
 8005720:	ea02 0103 	and.w	r1, r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800572e:	bf00      	nop
 8005730:	371c      	adds	r7, #28
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	03ff63ff 	.word	0x03ff63ff

08005740 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	d138      	bne.n	80057c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800575c:	2b01      	cmp	r3, #1
 800575e:	d101      	bne.n	8005764 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005760:	2302      	movs	r3, #2
 8005762:	e032      	b.n	80057ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2224      	movs	r2, #36	@ 0x24
 8005770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	681a      	ldr	r2, [r3, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 0201 	bic.w	r2, r2, #1
 8005782:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005792:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6819      	ldr	r1, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f042 0201 	orr.w	r2, r2, #1
 80057b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2220      	movs	r2, #32
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	e000      	b.n	80057ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80057c8:	2302      	movs	r3, #2
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b085      	sub	sp, #20
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d139      	bne.n	8005860 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d101      	bne.n	80057fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80057f6:	2302      	movs	r3, #2
 80057f8:	e033      	b.n	8005862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2224      	movs	r2, #36	@ 0x24
 8005806:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0201 	bic.w	r2, r2, #1
 8005818:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005828:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 0201 	orr.w	r2, r2, #1
 800584a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2220      	movs	r2, #32
 8005850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
	...

08005870 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01e      	beq.n	80058c0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005882:	4b13      	ldr	r3, [pc, #76]	@ (80058d0 <HAL_IPCC_Init+0x60>)
 8005884:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fe fac6 	bl	8003e24 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8005898:	68b8      	ldr	r0, [r7, #8]
 800589a:	f000 f85b 	bl	8005954 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f82c 	bl	8005908 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80058be:	e001      	b.n	80058c4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	58000c00 	.word	0x58000c00

080058d4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80058e2:	bf00      	nop
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	4613      	mov	r3, r2
 80058fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005910:	2300      	movs	r3, #0
 8005912:	60fb      	str	r3, [r7, #12]
 8005914:	e00f      	b.n	8005936 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	4a0b      	ldr	r2, [pc, #44]	@ (800594c <IPCC_SetDefaultCallbacks+0x44>)
 8005920:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3306      	adds	r3, #6
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	4a08      	ldr	r2, [pc, #32]	@ (8005950 <IPCC_SetDefaultCallbacks+0x48>)
 800592e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b05      	cmp	r3, #5
 800593a:	d9ec      	bls.n	8005916 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800593c:	bf00      	nop
 800593e:	bf00      	nop
 8005940:	3714      	adds	r7, #20
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	080058d5 	.word	0x080058d5
 8005950:	080058ef 	.word	0x080058ef

08005954 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005968:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	223f      	movs	r2, #63	@ 0x3f
 800596e:	609a      	str	r2, [r3, #8]
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e0c0      	b.n	8005b10 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005994:	b2db      	uxtb	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d106      	bne.n	80059a8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f00f f9aa 	bl	8014cfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2203      	movs	r2, #3
 80059ac:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f005 fca9 	bl	800b30c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]
 80059be:	e03e      	b.n	8005a3e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80059c0:	7bfa      	ldrb	r2, [r7, #15]
 80059c2:	6879      	ldr	r1, [r7, #4]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	440b      	add	r3, r1
 80059ce:	3311      	adds	r3, #17
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80059d4:	7bfa      	ldrb	r2, [r7, #15]
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	00db      	lsls	r3, r3, #3
 80059e0:	440b      	add	r3, r1
 80059e2:	3310      	adds	r3, #16
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	440b      	add	r3, r1
 80059f6:	3313      	adds	r3, #19
 80059f8:	2200      	movs	r2, #0
 80059fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80059fc:	7bfa      	ldrb	r2, [r7, #15]
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	00db      	lsls	r3, r3, #3
 8005a08:	440b      	add	r3, r1
 8005a0a:	3320      	adds	r3, #32
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a10:	7bfa      	ldrb	r2, [r7, #15]
 8005a12:	6879      	ldr	r1, [r7, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3324      	adds	r3, #36	@ 0x24
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	440b      	add	r3, r1
 8005a34:	2200      	movs	r2, #0
 8005a36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a38:	7bfb      	ldrb	r3, [r7, #15]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	73fb      	strb	r3, [r7, #15]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	791b      	ldrb	r3, [r3, #4]
 8005a42:	7bfa      	ldrb	r2, [r7, #15]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d3bb      	bcc.n	80059c0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a48:	2300      	movs	r3, #0
 8005a4a:	73fb      	strb	r3, [r7, #15]
 8005a4c:	e044      	b.n	8005ad8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005a4e:	7bfa      	ldrb	r2, [r7, #15]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	440b      	add	r3, r1
 8005a5c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005a64:	7bfa      	ldrb	r2, [r7, #15]
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	440b      	add	r3, r1
 8005a72:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005a76:	7bfa      	ldrb	r2, [r7, #15]
 8005a78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005a7a:	7bfa      	ldrb	r2, [r7, #15]
 8005a7c:	6879      	ldr	r1, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	440b      	add	r3, r1
 8005a88:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005a90:	7bfa      	ldrb	r2, [r7, #15]
 8005a92:	6879      	ldr	r1, [r7, #4]
 8005a94:	4613      	mov	r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005aa6:	7bfa      	ldrb	r2, [r7, #15]
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005abc:	7bfa      	ldrb	r2, [r7, #15]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005ace:	2200      	movs	r2, #0
 8005ad0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	73fb      	strb	r3, [r7, #15]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	791b      	ldrb	r3, [r3, #4]
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3b5      	bcc.n	8005a4e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005aee:	f005 fc28 	bl	800b342 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	7a9b      	ldrb	r3, [r3, #10]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d102      	bne.n	8005b0e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f001 fc40 	bl	800738e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_PCD_Start+0x16>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e012      	b.n	8005b54 <HAL_PCD_Start+0x3c>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f005 fbcf 	bl	800b2de <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4618      	mov	r0, r3
 8005b46:	f007 fe90 	bl	800d86a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f007 fe95 	bl	800d898 <USB_ReadInterrupts>
 8005b6e:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d003      	beq.n	8005b82 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 fb04 	bl	8006188 <PCD_EP_ISR_Handler>

    return;
 8005b80:	e110      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d013      	beq.n	8005bb4 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b9e:	b292      	uxth	r2, r2
 8005ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f00f f95c 	bl	8014e62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005baa:	2100      	movs	r1, #0
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 f8fc 	bl	8005daa <HAL_PCD_SetAddress>

    return;
 8005bb2:	e0f7      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00c      	beq.n	8005bd8 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bd0:	b292      	uxth	r2, r2
 8005bd2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005bd6:	e0e5      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bf4:	b292      	uxth	r2, r2
 8005bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005bfa:	e0d3      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d034      	beq.n	8005c70 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0204 	bic.w	r2, r2, #4
 8005c18:	b292      	uxth	r2, r2
 8005c1a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f022 0208 	bic.w	r2, r2, #8
 8005c30:	b292      	uxth	r2, r2
 8005c32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d107      	bne.n	8005c50 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c48:	2100      	movs	r1, #0
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f00f fafe 	bl	801524c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f00f f93f 	bl	8014ed4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c5e:	b29a      	uxth	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c68:	b292      	uxth	r2, r2
 8005c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c6e:	e099      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d027      	beq.n	8005cca <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f042 0208 	orr.w	r2, r2, #8
 8005c8c:	b292      	uxth	r2, r2
 8005c8e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ca4:	b292      	uxth	r2, r2
 8005ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f042 0204 	orr.w	r2, r2, #4
 8005cbc:	b292      	uxth	r2, r2
 8005cbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f00f f8ec 	bl	8014ea0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005cc8:	e06c      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d040      	beq.n	8005d56 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ce6:	b292      	uxth	r2, r2
 8005ce8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d12b      	bne.n	8005d4e <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0204 	orr.w	r2, r2, #4
 8005d08:	b292      	uxth	r2, r2
 8005d0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0208 	orr.w	r2, r2, #8
 8005d20:	b292      	uxth	r2, r2
 8005d22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	089b      	lsrs	r3, r3, #2
 8005d3a:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005d44:	2101      	movs	r1, #1
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f00f fa80 	bl	801524c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005d4c:	e02a      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f00f f8a6 	bl	8014ea0 <HAL_PCD_SuspendCallback>
    return;
 8005d54:	e026      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d00f      	beq.n	8005d80 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d72:	b292      	uxth	r2, r2
 8005d74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f00f f864 	bl	8014e46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005d7e:	e011      	b.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d9c:	b292      	uxth	r2, r2
 8005d9e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005da2:	bf00      	nop
  }
}
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}

08005daa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005daa:	b580      	push	{r7, lr}
 8005dac:	b082      	sub	sp, #8
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	6078      	str	r0, [r7, #4]
 8005db2:	460b      	mov	r3, r1
 8005db4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_PCD_SetAddress+0x1a>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e012      	b.n	8005dea <HAL_PCD_SetAddress+0x40>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	78fa      	ldrb	r2, [r7, #3]
 8005dd8:	4611      	mov	r1, r2
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f007 fd31 	bl	800d842 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005de8:	2300      	movs	r3, #0
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3708      	adds	r7, #8
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	4608      	mov	r0, r1
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	461a      	mov	r2, r3
 8005e00:	4603      	mov	r3, r0
 8005e02:	70fb      	strb	r3, [r7, #3]
 8005e04:	460b      	mov	r3, r1
 8005e06:	803b      	strh	r3, [r7, #0]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	da0e      	bge.n	8005e36 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e18:	78fb      	ldrb	r3, [r7, #3]
 8005e1a:	f003 0207 	and.w	r2, r3, #7
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	3310      	adds	r3, #16
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2201      	movs	r2, #1
 8005e32:	705a      	strb	r2, [r3, #1]
 8005e34:	e00e      	b.n	8005e54 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e36:	78fb      	ldrb	r3, [r7, #3]
 8005e38:	f003 0207 	and.w	r2, r3, #7
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	00db      	lsls	r3, r3, #3
 8005e44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	b2da      	uxtb	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e60:	883a      	ldrh	r2, [r7, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	78ba      	ldrb	r2, [r7, #2]
 8005e6a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e6c:	78bb      	ldrb	r3, [r7, #2]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d102      	bne.n	8005e78 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_PCD_EP_Open+0x94>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e00e      	b.n	8005ea4 <HAL_PCD_EP_Open+0xb2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f005 fa73 	bl	800b380 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3710      	adds	r7, #16
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}

08005eac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005eb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da0e      	bge.n	8005ede <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	f003 0207 	and.w	r2, r3, #7
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	00db      	lsls	r3, r3, #3
 8005ece:	3310      	adds	r3, #16
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	705a      	strb	r2, [r3, #1]
 8005edc:	e00e      	b.n	8005efc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f003 0207 	and.w	r2, r3, #7
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d101      	bne.n	8005f16 <HAL_PCD_EP_Close+0x6a>
 8005f12:	2302      	movs	r3, #2
 8005f14:	e00e      	b.n	8005f34 <HAL_PCD_EP_Close+0x88>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68f9      	ldr	r1, [r7, #12]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f005 fdef 	bl	800bb08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005f32:	2300      	movs	r3, #0
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	607a      	str	r2, [r7, #4]
 8005f46:	603b      	str	r3, [r7, #0]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f4c:	7afb      	ldrb	r3, [r7, #11]
 8005f4e:	f003 0207 	and.w	r2, r3, #7
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	00db      	lsls	r3, r3, #3
 8005f5a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2200      	movs	r2, #0
 8005f74:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6979      	ldr	r1, [r7, #20]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f005 ffa7 	bl	800bee2 <USB_EPStartXfer>

  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005faa:	78fb      	ldrb	r3, [r7, #3]
 8005fac:	f003 0207 	and.w	r2, r3, #7
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005fc0:	681b      	ldr	r3, [r3, #0]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	370c      	adds	r7, #12
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr

08005fce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b086      	sub	sp, #24
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	60f8      	str	r0, [r7, #12]
 8005fd6:	607a      	str	r2, [r7, #4]
 8005fd8:	603b      	str	r3, [r7, #0]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fde:	7afb      	ldrb	r3, [r7, #11]
 8005fe0:	f003 0207 	and.w	r2, r3, #7
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	3310      	adds	r3, #16
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	2200      	movs	r2, #0
 8006012:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2201      	movs	r2, #1
 8006018:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	f003 0307 	and.w	r3, r3, #7
 8006020:	b2da      	uxtb	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6979      	ldr	r1, [r7, #20]
 800602c:	4618      	mov	r0, r3
 800602e:	f005 ff58 	bl	800bee2 <USB_EPStartXfer>

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3718      	adds	r7, #24
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	460b      	mov	r3, r1
 8006046:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	7912      	ldrb	r2, [r2, #4]
 8006052:	4293      	cmp	r3, r2
 8006054:	d901      	bls.n	800605a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e03e      	b.n	80060d8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800605a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800605e:	2b00      	cmp	r3, #0
 8006060:	da0e      	bge.n	8006080 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	f003 0207 	and.w	r2, r3, #7
 8006068:	4613      	mov	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	3310      	adds	r3, #16
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	4413      	add	r3, r2
 8006076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2201      	movs	r2, #1
 800607c:	705a      	strb	r2, [r3, #1]
 800607e:	e00c      	b.n	800609a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006080:	78fa      	ldrb	r2, [r7, #3]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4413      	add	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d101      	bne.n	80060ba <HAL_PCD_EP_SetStall+0x7e>
 80060b6:	2302      	movs	r3, #2
 80060b8:	e00e      	b.n	80060d8 <HAL_PCD_EP_SetStall+0x9c>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f007 fabb 	bl	800d644 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	f003 030f 	and.w	r3, r3, #15
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	7912      	ldrb	r2, [r2, #4]
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d901      	bls.n	80060fe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e040      	b.n	8006180 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006102:	2b00      	cmp	r3, #0
 8006104:	da0e      	bge.n	8006124 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 0207 	and.w	r2, r3, #7
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	3310      	adds	r3, #16
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2201      	movs	r2, #1
 8006120:	705a      	strb	r2, [r3, #1]
 8006122:	e00e      	b.n	8006142 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	f003 0207 	and.w	r2, r3, #7
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	f003 0307 	and.w	r3, r3, #7
 800614e:	b2da      	uxtb	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_PCD_EP_ClrStall+0x82>
 800615e:	2302      	movs	r3, #2
 8006160:	e00e      	b.n	8006180 <HAL_PCD_EP_ClrStall+0xa0>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68f9      	ldr	r1, [r7, #12]
 8006170:	4618      	mov	r0, r3
 8006172:	f007 fab8 	bl	800d6e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b096      	sub	sp, #88	@ 0x58
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006190:	e3ad      	b.n	80068ee <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800619a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800619e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80061ac:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f040 816f 	bne.w	8006494 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80061b6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80061ba:	f003 0310 	and.w	r3, r3, #16
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d14c      	bne.n	800625c <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	881b      	ldrh	r3, [r3, #0]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80061ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d2:	81fb      	strh	r3, [r7, #14]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	89fb      	ldrh	r3, [r7, #14]
 80061da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	3310      	adds	r3, #16
 80061ea:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	461a      	mov	r2, r3
 80061f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	00db      	lsls	r3, r3, #3
 80061fe:	4413      	add	r3, r2
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6812      	ldr	r2, [r2, #0]
 8006204:	4413      	add	r3, r2
 8006206:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006212:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006216:	695a      	ldr	r2, [r3, #20]
 8006218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	441a      	add	r2, r3
 800621e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006220:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006222:	2100      	movs	r1, #0
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f00e fdf4 	bl	8014e12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	7b1b      	ldrb	r3, [r3, #12]
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 835c 	beq.w	80068ee <PCD_EP_ISR_Handler+0x766>
 8006236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f040 8357 	bne.w	80068ee <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	7b1b      	ldrb	r3, [r3, #12]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800624a:	b2da      	uxtb	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	731a      	strb	r2, [r3, #12]
 800625a:	e348      	b.n	80068ee <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006262:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800626e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006272:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006276:	2b00      	cmp	r3, #0
 8006278:	d032      	beq.n	80062e0 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006282:	b29b      	uxth	r3, r3
 8006284:	461a      	mov	r2, r3
 8006286:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4413      	add	r3, r2
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	4413      	add	r3, r2
 8006294:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006298:	881b      	ldrh	r3, [r3, #0]
 800629a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800629e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062a0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80062ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062ae:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80062b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	f007 fb41 	bl	800d93c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	881b      	ldrh	r3, [r3, #0]
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80062c6:	4013      	ands	r3, r2
 80062c8:	823b      	strh	r3, [r7, #16]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	8a3a      	ldrh	r2, [r7, #16]
 80062d0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80062d4:	b292      	uxth	r2, r2
 80062d6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f00e fd6d 	bl	8014db8 <HAL_PCD_SetupStageCallback>
 80062de:	e306      	b.n	80068ee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80062e0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f280 8302 	bge.w	80068ee <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29a      	uxth	r2, r3
 80062f2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80062f6:	4013      	ands	r3, r2
 80062f8:	83fb      	strh	r3, [r7, #30]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	8bfa      	ldrh	r2, [r7, #30]
 8006300:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006304:	b292      	uxth	r2, r2
 8006306:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006310:	b29b      	uxth	r3, r3
 8006312:	461a      	mov	r2, r3
 8006314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4413      	add	r3, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	4413      	add	r3, r2
 8006322:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006326:	881b      	ldrh	r3, [r3, #0]
 8006328:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800632c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800632e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d019      	beq.n	800636c <PCD_EP_ISR_Handler+0x1e4>
 8006338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d015      	beq.n	800636c <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6818      	ldr	r0, [r3, #0]
 8006344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006346:	6959      	ldr	r1, [r3, #20]
 8006348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800634c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006350:	b29b      	uxth	r3, r3
 8006352:	f007 faf3 	bl	800d93c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006358:	695a      	ldr	r2, [r3, #20]
 800635a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	441a      	add	r2, r3
 8006360:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006362:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006364:	2100      	movs	r1, #0
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f00e fd38 	bl	8014ddc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006376:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800637a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800637e:	2b00      	cmp	r3, #0
 8006380:	f040 82b5 	bne.w	80068ee <PCD_EP_ISR_Handler+0x766>
 8006384:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006388:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800638c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006390:	f000 82ad 	beq.w	80068ee <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	461a      	mov	r2, r3
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	4413      	add	r3, r2
 80063aa:	61bb      	str	r3, [r7, #24]
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063b2:	617b      	str	r3, [r7, #20]
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	881b      	ldrh	r3, [r3, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063be:	b29a      	uxth	r2, r3
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	801a      	strh	r2, [r3, #0]
 80063c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80063ca:	d91d      	bls.n	8006408 <PCD_EP_ISR_Handler+0x280>
 80063cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80063d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <PCD_EP_ISR_Handler+0x25e>
 80063e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e2:	3b01      	subs	r3, #1
 80063e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	881b      	ldrh	r3, [r3, #0]
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	4313      	orrs	r3, r2
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006400:	b29a      	uxth	r2, r3
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	801a      	strh	r2, [r3, #0]
 8006406:	e026      	b.n	8006456 <PCD_EP_ISR_Handler+0x2ce>
 8006408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10a      	bne.n	8006426 <PCD_EP_ISR_Handler+0x29e>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	881b      	ldrh	r3, [r3, #0]
 8006414:	b29b      	uxth	r3, r3
 8006416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800641e:	b29a      	uxth	r2, r3
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	801a      	strh	r2, [r3, #0]
 8006424:	e017      	b.n	8006456 <PCD_EP_ISR_Handler+0x2ce>
 8006426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	647b      	str	r3, [r7, #68]	@ 0x44
 800642e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <PCD_EP_ISR_Handler+0x2b8>
 800643a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643c:	3301      	adds	r3, #1
 800643e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	881b      	ldrh	r3, [r3, #0]
 8006444:	b29a      	uxth	r2, r3
 8006446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006448:	b29b      	uxth	r3, r3
 800644a:	029b      	lsls	r3, r3, #10
 800644c:	b29b      	uxth	r3, r3
 800644e:	4313      	orrs	r3, r2
 8006450:	b29a      	uxth	r2, r3
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006462:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006466:	827b      	strh	r3, [r7, #18]
 8006468:	8a7b      	ldrh	r3, [r7, #18]
 800646a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800646e:	827b      	strh	r3, [r7, #18]
 8006470:	8a7b      	ldrh	r3, [r7, #18]
 8006472:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006476:	827b      	strh	r3, [r7, #18]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	8a7b      	ldrh	r3, [r7, #18]
 800647e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800648a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800648e:	b29b      	uxth	r3, r3
 8006490:	8013      	strh	r3, [r2, #0]
 8006492:	e22c      	b.n	80068ee <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	461a      	mov	r2, r3
 800649a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80064a8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f280 80f6 	bge.w	800669e <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	461a      	mov	r2, r3
 80064b8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4413      	add	r3, r2
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	b29a      	uxth	r2, r3
 80064c4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80064c8:	4013      	ands	r3, r2
 80064ca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	461a      	mov	r2, r3
 80064d4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80064e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80064e4:	b292      	uxth	r2, r2
 80064e6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80064e8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80064ec:	4613      	mov	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	00db      	lsls	r3, r3, #3
 80064f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4413      	add	r3, r2
 80064fc:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80064fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006500:	7b1b      	ldrb	r3, [r3, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d123      	bne.n	800654e <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800650e:	b29b      	uxth	r3, r3
 8006510:	461a      	mov	r2, r3
 8006512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	00db      	lsls	r3, r3, #3
 8006518:	4413      	add	r3, r2
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	6812      	ldr	r2, [r2, #0]
 800651e:	4413      	add	r3, r2
 8006520:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006524:	881b      	ldrh	r3, [r3, #0]
 8006526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800652a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800652e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 808e 	beq.w	8006654 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6818      	ldr	r0, [r3, #0]
 800653c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653e:	6959      	ldr	r1, [r3, #20]
 8006540:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006542:	88da      	ldrh	r2, [r3, #6]
 8006544:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006548:	f007 f9f8 	bl	800d93c <USB_ReadPMA>
 800654c:	e082      	b.n	8006654 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800654e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006550:	78db      	ldrb	r3, [r3, #3]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d10a      	bne.n	800656c <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006556:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800655a:	461a      	mov	r2, r3
 800655c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f9d3 	bl	800690a <HAL_PCD_EP_DB_Receive>
 8006564:	4603      	mov	r3, r0
 8006566:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800656a:	e073      	b.n	8006654 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	461a      	mov	r2, r3
 8006572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006586:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	441a      	add	r2, r3
 8006598:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800659c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065a8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	461a      	mov	r2, r3
 80065b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d022      	beq.n	8006610 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80065f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d02c      	beq.n	8006654 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006600:	6959      	ldr	r1, [r3, #20]
 8006602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006604:	891a      	ldrh	r2, [r3, #8]
 8006606:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800660a:	f007 f997 	bl	800d93c <USB_ReadPMA>
 800660e:	e021      	b.n	8006654 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	00db      	lsls	r3, r3, #3
 8006622:	4413      	add	r3, r2
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	6812      	ldr	r2, [r2, #0]
 8006628:	4413      	add	r3, r2
 800662a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800662e:	881b      	ldrh	r3, [r3, #0]
 8006630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006634:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006638:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800663c:	2b00      	cmp	r3, #0
 800663e:	d009      	beq.n	8006654 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6818      	ldr	r0, [r3, #0]
 8006644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006646:	6959      	ldr	r1, [r3, #20]
 8006648:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664a:	895a      	ldrh	r2, [r3, #10]
 800664c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006650:	f007 f974 	bl	800d93c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006656:	69da      	ldr	r2, [r3, #28]
 8006658:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800665c:	441a      	add	r2, r3
 800665e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006660:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006664:	695a      	ldr	r2, [r3, #20]
 8006666:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800666a:	441a      	add	r2, r3
 800666c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800666e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d005      	beq.n	8006684 <PCD_EP_ISR_Handler+0x4fc>
 8006678:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800667c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	429a      	cmp	r2, r3
 8006682:	d206      	bcs.n	8006692 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f00e fba6 	bl	8014ddc <HAL_PCD_DataOutStageCallback>
 8006690:	e005      	b.n	800669e <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006698:	4618      	mov	r0, r3
 800669a:	f005 fc22 	bl	800bee2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800669e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80066a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 8121 	beq.w	80068ee <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80066ac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80066b0:	4613      	mov	r3, r2
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4413      	add	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	3310      	adds	r3, #16
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	461a      	mov	r2, r3
 80066c6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	881b      	ldrh	r3, [r3, #0]
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80066d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066da:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	441a      	add	r2, r3
 80066ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80066f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80066fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066fe:	78db      	ldrb	r3, [r3, #3]
 8006700:	2b01      	cmp	r3, #1
 8006702:	f040 80a2 	bne.w	800684a <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8006706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006708:	2200      	movs	r2, #0
 800670a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800670c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800670e:	7b1b      	ldrb	r3, [r3, #12]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f000 8093 	beq.w	800683c <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006716:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800671a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671e:	2b00      	cmp	r3, #0
 8006720:	d046      	beq.n	80067b0 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006724:	785b      	ldrb	r3, [r3, #1]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d126      	bne.n	8006778 <PCD_EP_ISR_Handler+0x5f0>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006738:	b29b      	uxth	r3, r3
 800673a:	461a      	mov	r2, r3
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	4413      	add	r3, r2
 8006740:	627b      	str	r3, [r7, #36]	@ 0x24
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	00da      	lsls	r2, r3, #3
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	4413      	add	r3, r2
 800674c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006750:	623b      	str	r3, [r7, #32]
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	881b      	ldrh	r3, [r3, #0]
 8006756:	b29b      	uxth	r3, r3
 8006758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800675c:	b29a      	uxth	r2, r3
 800675e:	6a3b      	ldr	r3, [r7, #32]
 8006760:	801a      	strh	r2, [r3, #0]
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	881b      	ldrh	r3, [r3, #0]
 8006766:	b29b      	uxth	r3, r3
 8006768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006770:	b29a      	uxth	r2, r3
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	801a      	strh	r2, [r3, #0]
 8006776:	e061      	b.n	800683c <PCD_EP_ISR_Handler+0x6b4>
 8006778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677a:	785b      	ldrb	r3, [r3, #1]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d15d      	bne.n	800683c <PCD_EP_ISR_Handler+0x6b4>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800678e:	b29b      	uxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	4413      	add	r3, r2
 8006796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006798:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	00da      	lsls	r2, r3, #3
 800679e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a0:	4413      	add	r3, r2
 80067a2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067aa:	2200      	movs	r2, #0
 80067ac:	801a      	strh	r2, [r3, #0]
 80067ae:	e045      	b.n	800683c <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067b8:	785b      	ldrb	r3, [r3, #1]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d126      	bne.n	800680c <PCD_EP_ISR_Handler+0x684>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	461a      	mov	r2, r3
 80067d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067d2:	4413      	add	r3, r2
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80067d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	00da      	lsls	r2, r3, #3
 80067dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067de:	4413      	add	r3, r2
 80067e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80067e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80067e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e8:	881b      	ldrh	r3, [r3, #0]
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067f0:	b29a      	uxth	r2, r3
 80067f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f4:	801a      	strh	r2, [r3, #0]
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	881b      	ldrh	r3, [r3, #0]
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006804:	b29a      	uxth	r2, r3
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	801a      	strh	r2, [r3, #0]
 800680a:	e017      	b.n	800683c <PCD_EP_ISR_Handler+0x6b4>
 800680c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d113      	bne.n	800683c <PCD_EP_ISR_Handler+0x6b4>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800681c:	b29b      	uxth	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006822:	4413      	add	r3, r2
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	00da      	lsls	r2, r3, #3
 800682c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682e:	4413      	add	r3, r2
 8006830:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006834:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006838:	2200      	movs	r2, #0
 800683a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800683c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f00e fae5 	bl	8014e12 <HAL_PCD_DataInStageCallback>
 8006848:	e051      	b.n	80068ee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800684a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800684e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006852:	2b00      	cmp	r3, #0
 8006854:	d144      	bne.n	80068e0 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800685e:	b29b      	uxth	r3, r3
 8006860:	461a      	mov	r2, r3
 8006862:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4413      	add	r3, r2
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	4413      	add	r3, r2
 8006870:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006874:	881b      	ldrh	r3, [r3, #0]
 8006876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800687a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800687e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006886:	429a      	cmp	r2, r3
 8006888:	d907      	bls.n	800689a <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800688a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800688c:	699a      	ldr	r2, [r3, #24]
 800688e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006892:	1ad2      	subs	r2, r2, r3
 8006894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006896:	619a      	str	r2, [r3, #24]
 8006898:	e002      	b.n	80068a0 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800689a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800689c:	2200      	movs	r2, #0
 800689e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80068a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d106      	bne.n	80068b6 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80068a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	4619      	mov	r1, r3
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f00e faaf 	bl	8014e12 <HAL_PCD_DataInStageCallback>
 80068b4:	e01b      	b.n	80068ee <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80068b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80068be:	441a      	add	r2, r3
 80068c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80068c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c6:	69da      	ldr	r2, [r3, #28]
 80068c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80068cc:	441a      	add	r2, r3
 80068ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068d0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068d8:	4618      	mov	r0, r3
 80068da:	f005 fb02 	bl	800bee2 <USB_EPStartXfer>
 80068de:	e006      	b.n	80068ee <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80068e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80068e4:	461a      	mov	r2, r3
 80068e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f917 	bl	8006b1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	b21b      	sxth	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f6ff ac49 	blt.w	8006192 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3758      	adds	r7, #88	@ 0x58
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b088      	sub	sp, #32
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	4613      	mov	r3, r2
 8006916:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006918:	88fb      	ldrh	r3, [r7, #6]
 800691a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d07c      	beq.n	8006a1c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800692a:	b29b      	uxth	r3, r3
 800692c:	461a      	mov	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4413      	add	r3, r2
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	6812      	ldr	r2, [r2, #0]
 800693a:	4413      	add	r3, r2
 800693c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006946:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	699a      	ldr	r2, [r3, #24]
 800694c:	8b7b      	ldrh	r3, [r7, #26]
 800694e:	429a      	cmp	r2, r3
 8006950:	d306      	bcc.n	8006960 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	699a      	ldr	r2, [r3, #24]
 8006956:	8b7b      	ldrh	r3, [r7, #26]
 8006958:	1ad2      	subs	r2, r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	619a      	str	r2, [r3, #24]
 800695e:	e002      	b.n	8006966 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2200      	movs	r2, #0
 8006964:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d123      	bne.n	80069b6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006988:	833b      	strh	r3, [r7, #24]
 800698a:	8b3b      	ldrh	r3, [r7, #24]
 800698c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006990:	833b      	strh	r3, [r7, #24]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	461a      	mov	r2, r3
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	441a      	add	r2, r3
 80069a0:	8b3b      	ldrh	r3, [r7, #24]
 80069a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069b6:	88fb      	ldrh	r3, [r7, #6]
 80069b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01f      	beq.n	8006a00 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	461a      	mov	r2, r3
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4413      	add	r3, r2
 80069ce:	881b      	ldrh	r3, [r3, #0]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	82fb      	strh	r3, [r7, #22]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	461a      	mov	r2, r3
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	441a      	add	r2, r3
 80069ea:	8afb      	ldrh	r3, [r7, #22]
 80069ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80069f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a00:	8b7b      	ldrh	r3, [r7, #26]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 8085 	beq.w	8006b12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6818      	ldr	r0, [r3, #0]
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6959      	ldr	r1, [r3, #20]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	891a      	ldrh	r2, [r3, #8]
 8006a14:	8b7b      	ldrh	r3, [r7, #26]
 8006a16:	f006 ff91 	bl	800d93c <USB_ReadPMA>
 8006a1a:	e07a      	b.n	8006b12 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	00db      	lsls	r3, r3, #3
 8006a2e:	4413      	add	r3, r2
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	4413      	add	r3, r2
 8006a36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a3a:	881b      	ldrh	r3, [r3, #0]
 8006a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	8b7b      	ldrh	r3, [r7, #26]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d306      	bcc.n	8006a5a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	699a      	ldr	r2, [r3, #24]
 8006a50:	8b7b      	ldrh	r3, [r7, #26]
 8006a52:	1ad2      	subs	r2, r2, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	619a      	str	r2, [r3, #24]
 8006a58:	e002      	b.n	8006a60 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	699b      	ldr	r3, [r3, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d123      	bne.n	8006ab0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	881b      	ldrh	r3, [r3, #0]
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a82:	83fb      	strh	r3, [r7, #30]
 8006a84:	8bfb      	ldrh	r3, [r7, #30]
 8006a86:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a8a:	83fb      	strh	r3, [r7, #30]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	441a      	add	r2, r3
 8006a9a:	8bfb      	ldrh	r3, [r7, #30]
 8006a9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d11f      	bne.n	8006afa <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	4413      	add	r3, r2
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ad4:	83bb      	strh	r3, [r7, #28]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	8bbb      	ldrh	r3, [r7, #28]
 8006ae6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006aea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006aee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006af2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006afa:	8b7b      	ldrh	r3, [r7, #26]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d008      	beq.n	8006b12 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6959      	ldr	r1, [r3, #20]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	895a      	ldrh	r2, [r3, #10]
 8006b0c:	8b7b      	ldrh	r3, [r7, #26]
 8006b0e:	f006 ff15 	bl	800d93c <USB_ReadPMA>
    }
  }

  return count;
 8006b12:	8b7b      	ldrh	r3, [r7, #26]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b0a4      	sub	sp, #144	@ 0x90
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 81db 	beq.w	8006eec <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	00db      	lsls	r3, r3, #3
 8006b48:	4413      	add	r3, r2
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b5a:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	699a      	ldr	r2, [r3, #24]
 8006b62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d907      	bls.n	8006b7a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006b72:	1ad2      	subs	r2, r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	619a      	str	r2, [r3, #24]
 8006b78:	e002      	b.n	8006b80 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f040 80b9 	bne.w	8006cfc <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d126      	bne.n	8006be0 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ba6:	4413      	add	r3, r2
 8006ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	00da      	lsls	r2, r3, #3
 8006bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbc:	881b      	ldrh	r3, [r3, #0]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	801a      	strh	r2, [r3, #0]
 8006bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bcc:	881b      	ldrh	r3, [r3, #0]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bdc:	801a      	strh	r2, [r3, #0]
 8006bde:	e01a      	b.n	8006c16 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d116      	bne.n	8006c16 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bfc:	4413      	add	r3, r2
 8006bfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	00da      	lsls	r2, r3, #3
 8006c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c08:	4413      	add	r3, r2
 8006c0a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	785b      	ldrb	r3, [r3, #1]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d126      	bne.n	8006c72 <HAL_PCD_EP_DB_Transmit+0x156>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	461a      	mov	r2, r3
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	4413      	add	r3, r2
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	00da      	lsls	r2, r3, #3
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	4413      	add	r3, r2
 8006c46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	881b      	ldrh	r3, [r3, #0]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c56:	b29a      	uxth	r2, r3
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	801a      	strh	r2, [r3, #0]
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	881b      	ldrh	r3, [r3, #0]
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e017      	b.n	8006ca2 <HAL_PCD_EP_DB_Transmit+0x186>
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	785b      	ldrb	r3, [r3, #1]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d113      	bne.n	8006ca2 <HAL_PCD_EP_DB_Transmit+0x186>
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c88:	4413      	add	r3, r2
 8006c8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	00da      	lsls	r2, r3, #3
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	4413      	add	r3, r2
 8006c96:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006c9a:	623b      	str	r3, [r7, #32]
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f00e f8b2 	bl	8014e12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 82fa 	beq.w	80072ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4413      	add	r3, r2
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006cd4:	82fb      	strh	r3, [r7, #22]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	461a      	mov	r2, r3
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	441a      	add	r2, r3
 8006ce4:	8afb      	ldrh	r3, [r7, #22]
 8006ce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	8013      	strh	r3, [r2, #0]
 8006cfa:	e2d8      	b.n	80072ae <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006cfc:	88fb      	ldrh	r3, [r7, #6]
 8006cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d021      	beq.n	8006d4a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4413      	add	r3, r2
 8006d14:	881b      	ldrh	r3, [r3, #0]
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d20:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	461a      	mov	r2, r3
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006d36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	f040 82ac 	bne.w	80072ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006d5e:	441a      	add	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006d6c:	441a      	add	r2, r3
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d30b      	bcc.n	8006d96 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	6a1a      	ldr	r2, [r3, #32]
 8006d8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	621a      	str	r2, [r3, #32]
 8006d94:	e017      	b.n	8006dc6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d108      	bne.n	8006db0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006d9e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006da2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006dae:	e00a      	b.n	8006dc6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	785b      	ldrb	r3, [r3, #1]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d165      	bne.n	8006e9a <HAL_PCD_EP_DB_Transmit+0x37e>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	461a      	mov	r2, r3
 8006de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006de2:	4413      	add	r3, r2
 8006de4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	00da      	lsls	r2, r3, #3
 8006dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dee:	4413      	add	r3, r2
 8006df0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006df4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e04:	801a      	strh	r2, [r3, #0]
 8006e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e0a:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e0c:	d91d      	bls.n	8006e4a <HAL_PCD_EP_DB_Transmit+0x32e>
 8006e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e12:	095b      	lsrs	r3, r3, #5
 8006e14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e1a:	f003 031f 	and.w	r3, r3, #31
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d102      	bne.n	8006e28 <HAL_PCD_EP_DB_Transmit+0x30c>
 8006e22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e24:	3b01      	subs	r3, #1
 8006e26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	029b      	lsls	r3, r3, #10
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4313      	orrs	r3, r2
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e044      	b.n	8006ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d10a      	bne.n	8006e68 <HAL_PCD_EP_DB_Transmit+0x34c>
 8006e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e64:	801a      	strh	r2, [r3, #0]
 8006e66:	e035      	b.n	8006ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e6c:	085b      	lsrs	r3, r3, #1
 8006e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d002      	beq.n	8006e82 <HAL_PCD_EP_DB_Transmit+0x366>
 8006e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e7e:	3301      	adds	r3, #1
 8006e80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e84:	881b      	ldrh	r3, [r3, #0]
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	029b      	lsls	r3, r3, #10
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b29a      	uxth	r2, r3
 8006e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e96:	801a      	strh	r2, [r3, #0]
 8006e98:	e01c      	b.n	8006ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	785b      	ldrb	r3, [r3, #1]
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	d118      	bne.n	8006ed4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eb6:	4413      	add	r3, r2
 8006eb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ec8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ece:	b29a      	uxth	r2, r3
 8006ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	6959      	ldr	r1, [r3, #20]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	891a      	ldrh	r2, [r3, #8]
 8006ee0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	f006 fce7 	bl	800d8b8 <USB_WritePMA>
 8006eea:	e1e0      	b.n	80072ae <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4413      	add	r3, r2
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	6812      	ldr	r2, [r2, #0]
 8006f04:	4413      	add	r3, r2
 8006f06:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f0a:	881b      	ldrh	r3, [r3, #0]
 8006f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f10:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	699a      	ldr	r2, [r3, #24]
 8006f18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d307      	bcc.n	8006f30 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	699a      	ldr	r2, [r3, #24]
 8006f24:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f28:	1ad2      	subs	r2, r2, r3
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	619a      	str	r2, [r3, #24]
 8006f2e:	e002      	b.n	8006f36 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	f040 80c0 	bne.w	80070c0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	785b      	ldrb	r3, [r3, #1]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d126      	bne.n	8006f96 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f5c:	4413      	add	r3, r2
 8006f5e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	00da      	lsls	r2, r3, #3
 8006f66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006f68:	4413      	add	r3, r2
 8006f6a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f72:	881b      	ldrh	r3, [r3, #0]
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f7e:	801a      	strh	r2, [r3, #0]
 8006f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f92:	801a      	strh	r2, [r3, #0]
 8006f94:	e01a      	b.n	8006fcc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	785b      	ldrb	r3, [r3, #1]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d116      	bne.n	8006fcc <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	461a      	mov	r2, r3
 8006fb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fb2:	4413      	add	r3, r2
 8006fb4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	00da      	lsls	r2, r3, #3
 8006fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006fc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006fc8:	2200      	movs	r2, #0
 8006fca:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	677b      	str	r3, [r7, #116]	@ 0x74
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	785b      	ldrb	r3, [r3, #1]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d12b      	bne.n	8007032 <HAL_PCD_EP_DB_Transmit+0x516>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	461a      	mov	r2, r3
 8006fec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006fee:	4413      	add	r3, r2
 8006ff0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	00da      	lsls	r2, r3, #3
 8006ff8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007000:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007004:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007008:	881b      	ldrh	r3, [r3, #0]
 800700a:	b29b      	uxth	r3, r3
 800700c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007010:	b29a      	uxth	r2, r3
 8007012:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007016:	801a      	strh	r2, [r3, #0]
 8007018:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800701c:	881b      	ldrh	r3, [r3, #0]
 800701e:	b29b      	uxth	r3, r3
 8007020:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007024:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007028:	b29a      	uxth	r2, r3
 800702a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800702e:	801a      	strh	r2, [r3, #0]
 8007030:	e017      	b.n	8007062 <HAL_PCD_EP_DB_Transmit+0x546>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	785b      	ldrb	r3, [r3, #1]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d113      	bne.n	8007062 <HAL_PCD_EP_DB_Transmit+0x546>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007042:	b29b      	uxth	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007048:	4413      	add	r3, r2
 800704a:	677b      	str	r3, [r7, #116]	@ 0x74
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	00da      	lsls	r2, r3, #3
 8007052:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007054:	4413      	add	r3, r2
 8007056:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800705a:	673b      	str	r3, [r7, #112]	@ 0x70
 800705c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800705e:	2200      	movs	r2, #0
 8007060:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	4619      	mov	r1, r3
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f00d fed2 	bl	8014e12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800706e:	88fb      	ldrh	r3, [r7, #6]
 8007070:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 811a 	bne.w	80072ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	461a      	mov	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	b29b      	uxth	r3, r3
 800708c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007090:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007094:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	441a      	add	r2, r3
 80070a6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80070aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80070b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	8013      	strh	r3, [r2, #0]
 80070be:	e0f6      	b.n	80072ae <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80070c0:	88fb      	ldrh	r3, [r7, #6]
 80070c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d121      	bne.n	800710e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	4413      	add	r3, r2
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	441a      	add	r2, r3
 80070f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80070fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007102:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800710a:	b29b      	uxth	r3, r3
 800710c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007114:	2b01      	cmp	r3, #1
 8007116:	f040 80ca 	bne.w	80072ae <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	695a      	ldr	r2, [r3, #20]
 800711e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007122:	441a      	add	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	69da      	ldr	r2, [r3, #28]
 800712c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007130:	441a      	add	r2, r3
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	429a      	cmp	r2, r3
 8007140:	d30b      	bcc.n	800715a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6a1a      	ldr	r2, [r3, #32]
 800714e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007152:	1ad2      	subs	r2, r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	621a      	str	r2, [r3, #32]
 8007158:	e017      	b.n	800718a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	6a1b      	ldr	r3, [r3, #32]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d108      	bne.n	8007174 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007162:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007172:	e00a      	b.n	800718a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	2200      	movs	r2, #0
 8007180:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	785b      	ldrb	r3, [r3, #1]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d165      	bne.n	8007264 <HAL_PCD_EP_DB_Transmit+0x748>
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	461a      	mov	r2, r3
 80071aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071ac:	4413      	add	r3, r2
 80071ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	00da      	lsls	r2, r3, #3
 80071b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80071b8:	4413      	add	r3, r2
 80071ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80071be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ca:	b29a      	uxth	r2, r3
 80071cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071ce:	801a      	strh	r2, [r3, #0]
 80071d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80071d6:	d91d      	bls.n	8007214 <HAL_PCD_EP_DB_Transmit+0x6f8>
 80071d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071dc:	095b      	lsrs	r3, r3, #5
 80071de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80071ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071ee:	3b01      	subs	r3, #1
 80071f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071f2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b29a      	uxth	r2, r3
 80071f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	029b      	lsls	r3, r3, #10
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4313      	orrs	r3, r2
 8007202:	b29b      	uxth	r3, r3
 8007204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800720c:	b29a      	uxth	r2, r3
 800720e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007210:	801a      	strh	r2, [r3, #0]
 8007212:	e041      	b.n	8007298 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007214:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10a      	bne.n	8007232 <HAL_PCD_EP_DB_Transmit+0x716>
 800721c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29b      	uxth	r3, r3
 8007222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800722a:	b29a      	uxth	r2, r3
 800722c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800722e:	801a      	strh	r2, [r3, #0]
 8007230:	e032      	b.n	8007298 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007232:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007236:	085b      	lsrs	r3, r3, #1
 8007238:	66bb      	str	r3, [r7, #104]	@ 0x68
 800723a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <HAL_PCD_EP_DB_Transmit+0x730>
 8007246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007248:	3301      	adds	r3, #1
 800724a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800724c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800724e:	881b      	ldrh	r3, [r3, #0]
 8007250:	b29a      	uxth	r2, r3
 8007252:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007254:	b29b      	uxth	r3, r3
 8007256:	029b      	lsls	r3, r3, #10
 8007258:	b29b      	uxth	r3, r3
 800725a:	4313      	orrs	r3, r2
 800725c:	b29a      	uxth	r2, r3
 800725e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007260:	801a      	strh	r2, [r3, #0]
 8007262:	e019      	b.n	8007298 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	785b      	ldrb	r3, [r3, #1]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d115      	bne.n	8007298 <HAL_PCD_EP_DB_Transmit+0x77c>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007274:	b29b      	uxth	r3, r3
 8007276:	461a      	mov	r2, r3
 8007278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800727a:	4413      	add	r3, r2
 800727c:	657b      	str	r3, [r7, #84]	@ 0x54
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	00da      	lsls	r2, r3, #3
 8007284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007286:	4413      	add	r3, r2
 8007288:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800728c:	653b      	str	r3, [r7, #80]	@ 0x50
 800728e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007292:	b29a      	uxth	r2, r3
 8007294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007296:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6959      	ldr	r1, [r3, #20]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	895a      	ldrh	r2, [r3, #10]
 80072a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f006 fb05 	bl	800d8b8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	881b      	ldrh	r3, [r3, #0]
 80072be:	b29b      	uxth	r3, r3
 80072c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072c8:	82bb      	strh	r3, [r7, #20]
 80072ca:	8abb      	ldrh	r3, [r7, #20]
 80072cc:	f083 0310 	eor.w	r3, r3, #16
 80072d0:	82bb      	strh	r3, [r7, #20]
 80072d2:	8abb      	ldrh	r3, [r7, #20]
 80072d4:	f083 0320 	eor.w	r3, r3, #32
 80072d8:	82bb      	strh	r3, [r7, #20]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	461a      	mov	r2, r3
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	441a      	add	r2, r3
 80072e8:	8abb      	ldrh	r3, [r7, #20]
 80072ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3790      	adds	r7, #144	@ 0x90
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	607b      	str	r3, [r7, #4]
 8007312:	460b      	mov	r3, r1
 8007314:	817b      	strh	r3, [r7, #10]
 8007316:	4613      	mov	r3, r2
 8007318:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800731a:	897b      	ldrh	r3, [r7, #10]
 800731c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00b      	beq.n	800733e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007326:	897b      	ldrh	r3, [r7, #10]
 8007328:	f003 0207 	and.w	r2, r3, #7
 800732c:	4613      	mov	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	3310      	adds	r3, #16
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	4413      	add	r3, r2
 800733a:	617b      	str	r3, [r7, #20]
 800733c:	e009      	b.n	8007352 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800733e:	897a      	ldrh	r2, [r7, #10]
 8007340:	4613      	mov	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	00db      	lsls	r3, r3, #3
 8007348:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4413      	add	r3, r2
 8007350:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007352:	893b      	ldrh	r3, [r7, #8]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2200      	movs	r2, #0
 800735c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	b29a      	uxth	r2, r3
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	80da      	strh	r2, [r3, #6]
 8007366:	e00b      	b.n	8007380 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2201      	movs	r2, #1
 800736c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	b29a      	uxth	r2, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	0c1b      	lsrs	r3, r3, #16
 800737a:	b29a      	uxth	r2, r3
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	371c      	adds	r7, #28
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800738e:	b480      	push	{r7}
 8007390:	b085      	sub	sp, #20
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	f043 0302 	orr.w	r3, r3, #2
 80073cc:	b29a      	uxth	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80073d4:	2300      	movs	r3, #0
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
	...

080073e4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073e8:	4b05      	ldr	r3, [pc, #20]	@ (8007400 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a04      	ldr	r2, [pc, #16]	@ (8007400 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80073ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f2:	6013      	str	r3, [r2, #0]
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	58000400 	.word	0x58000400

08007404 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007404:	b480      	push	{r7}
 8007406:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007408:	4b04      	ldr	r3, [pc, #16]	@ (800741c <HAL_PWREx_GetVoltageRange+0x18>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007410:	4618      	mov	r0, r3
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	58000400 	.word	0x58000400

08007420 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007420:	b480      	push	{r7}
 8007422:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007424:	4b05      	ldr	r3, [pc, #20]	@ (800743c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	4a04      	ldr	r2, [pc, #16]	@ (800743c <HAL_PWREx_EnableVddUSB+0x1c>)
 800742a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800742e:	6053      	str	r3, [r2, #4]
}
 8007430:	bf00      	nop
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	58000400 	.word	0x58000400

08007440 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007440:	b480      	push	{r7}
 8007442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800744e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007452:	d101      	bne.n	8007458 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <LL_RCC_HSE_Enable>:
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007468:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007472:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007476:	6013      	str	r3, [r2, #0]
}
 8007478:	bf00      	nop
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr

08007482 <LL_RCC_HSE_Disable>:
{
 8007482:	b480      	push	{r7}
 8007484:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007490:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007494:	6013      	str	r3, [r2, #0]
}
 8007496:	bf00      	nop
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <LL_RCC_HSE_IsReady>:
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80074a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80074ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80074b2:	d101      	bne.n	80074b8 <LL_RCC_HSE_IsReady+0x18>
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <LL_RCC_HSE_IsReady+0x1a>
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <LL_RCC_HSI_Enable>:
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80074c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074d6:	6013      	str	r3, [r2, #0]
}
 80074d8:	bf00      	nop
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <LL_RCC_HSI_Disable>:
{
 80074e2:	b480      	push	{r7}
 80074e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80074e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074f4:	6013      	str	r3, [r2, #0]
}
 80074f6:	bf00      	nop
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <LL_RCC_HSI_IsReady>:
{
 8007500:	b480      	push	{r7}
 8007502:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007504:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800750e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007512:	d101      	bne.n	8007518 <LL_RCC_HSI_IsReady+0x18>
 8007514:	2301      	movs	r3, #1
 8007516:	e000      	b.n	800751a <LL_RCC_HSI_IsReady+0x1a>
 8007518:	2300      	movs	r3, #0
}
 800751a:	4618      	mov	r0, r3
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800752c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	061b      	lsls	r3, r3, #24
 800753a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800753e:	4313      	orrs	r3, r2
 8007540:	604b      	str	r3, [r1, #4]
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <LL_RCC_HSI48_Enable>:
{
 800754e:	b480      	push	{r7}
 8007550:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007556:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800755a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800755e:	f043 0301 	orr.w	r3, r3, #1
 8007562:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007566:	bf00      	nop
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <LL_RCC_HSI48_Disable>:
{
 8007570:	b480      	push	{r7}
 8007572:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007574:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007578:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800757c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007580:	f023 0301 	bic.w	r3, r3, #1
 8007584:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007588:	bf00      	nop
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <LL_RCC_HSI48_IsReady>:
{
 8007592:	b480      	push	{r7}
 8007594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800759a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d101      	bne.n	80075aa <LL_RCC_HSI48_IsReady+0x18>
 80075a6:	2301      	movs	r3, #1
 80075a8:	e000      	b.n	80075ac <LL_RCC_HSI48_IsReady+0x1a>
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <LL_RCC_LSE_Enable>:
{
 80075b6:	b480      	push	{r7}
 80075b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80075ce:	bf00      	nop
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <LL_RCC_LSE_Disable>:
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80075dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075e8:	f023 0301 	bic.w	r3, r3, #1
 80075ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80075f0:	bf00      	nop
 80075f2:	46bd      	mov	sp, r7
 80075f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f8:	4770      	bx	lr

080075fa <LL_RCC_LSE_EnableBypass>:
{
 80075fa:	b480      	push	{r7}
 80075fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80075fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007606:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800760a:	f043 0304 	orr.w	r3, r3, #4
 800760e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007612:	bf00      	nop
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <LL_RCC_LSE_DisableBypass>:
{
 800761c:	b480      	push	{r7}
 800761e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007620:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007628:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800762c:	f023 0304 	bic.w	r3, r3, #4
 8007630:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007634:	bf00      	nop
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <LL_RCC_LSE_IsReady>:
{
 800763e:	b480      	push	{r7}
 8007640:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800764a:	f003 0302 	and.w	r3, r3, #2
 800764e:	2b02      	cmp	r3, #2
 8007650:	d101      	bne.n	8007656 <LL_RCC_LSE_IsReady+0x18>
 8007652:	2301      	movs	r3, #1
 8007654:	e000      	b.n	8007658 <LL_RCC_LSE_IsReady+0x1a>
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr

08007662 <LL_RCC_LSI1_Enable>:
{
 8007662:	b480      	push	{r7}
 8007664:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007666:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800766a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800766e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007672:	f043 0301 	orr.w	r3, r3, #1
 8007676:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800767a:	bf00      	nop
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr

08007684 <LL_RCC_LSI1_Disable>:
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8007688:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800768c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007690:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007694:	f023 0301 	bic.w	r3, r3, #1
 8007698:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800769c:	bf00      	nop
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <LL_RCC_LSI1_IsReady>:
{
 80076a6:	b480      	push	{r7}
 80076a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80076aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076b2:	f003 0302 	and.w	r3, r3, #2
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d101      	bne.n	80076be <LL_RCC_LSI1_IsReady+0x18>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <LL_RCC_LSI1_IsReady+0x1a>
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <LL_RCC_LSI2_Enable>:
{
 80076ca:	b480      	push	{r7}
 80076cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80076ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076da:	f043 0304 	orr.w	r3, r3, #4
 80076de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80076e2:	bf00      	nop
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <LL_RCC_LSI2_Disable>:
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80076f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80076f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076fc:	f023 0304 	bic.w	r3, r3, #4
 8007700:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007704:	bf00      	nop
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <LL_RCC_LSI2_IsReady>:
{
 800770e:	b480      	push	{r7}
 8007710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b08      	cmp	r3, #8
 8007720:	d101      	bne.n	8007726 <LL_RCC_LSI2_IsReady+0x18>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <LL_RCC_LSI2_IsReady+0x1a>
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <LL_RCC_LSI2_SetTrimming>:
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800773a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800773e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007742:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	021b      	lsls	r3, r3, #8
 800774a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800774e:	4313      	orrs	r3, r2
 8007750:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <LL_RCC_MSI_Enable>:
{
 8007760:	b480      	push	{r7}
 8007762:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800776e:	f043 0301 	orr.w	r3, r3, #1
 8007772:	6013      	str	r3, [r2, #0]
}
 8007774:	bf00      	nop
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <LL_RCC_MSI_Disable>:
{
 800777e:	b480      	push	{r7}
 8007780:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	6013      	str	r3, [r2, #0]
}
 8007792:	bf00      	nop
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <LL_RCC_MSI_IsReady>:
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80077a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d101      	bne.n	80077b2 <LL_RCC_MSI_IsReady+0x16>
 80077ae:	2301      	movs	r3, #1
 80077b0:	e000      	b.n	80077b4 <LL_RCC_MSI_IsReady+0x18>
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr

080077be <LL_RCC_MSI_SetRange>:
{
 80077be:	b480      	push	{r7}
 80077c0:	b083      	sub	sp, #12
 80077c2:	af00      	add	r7, sp, #0
 80077c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80077c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80077d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	600b      	str	r3, [r1, #0]
}
 80077da:	bf00      	nop
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <LL_RCC_MSI_GetRange>:
{
 80077e6:	b480      	push	{r7}
 80077e8:	b083      	sub	sp, #12
 80077ea:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80077ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80077f6:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2bb0      	cmp	r3, #176	@ 0xb0
 80077fc:	d901      	bls.n	8007802 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80077fe:	23b0      	movs	r3, #176	@ 0xb0
 8007800:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007802:	687b      	ldr	r3, [r7, #4]
}
 8007804:	4618      	mov	r0, r3
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	021b      	lsls	r3, r3, #8
 8007826:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800782a:	4313      	orrs	r3, r2
 800782c:	604b      	str	r3, [r1, #4]
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <LL_RCC_SetSysClkSource>:
{
 800783a:	b480      	push	{r7}
 800783c:	b083      	sub	sp, #12
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007842:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f023 0203 	bic.w	r2, r3, #3
 800784c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	4313      	orrs	r3, r2
 8007854:	608b      	str	r3, [r1, #8]
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <LL_RCC_GetSysClkSource>:
{
 8007862:	b480      	push	{r7}
 8007864:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8007866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 030c 	and.w	r3, r3, #12
}
 8007870:	4618      	mov	r0, r3
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <LL_RCC_SetAHBPrescaler>:
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007882:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800788c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4313      	orrs	r3, r2
 8007894:	608b      	str	r3, [r1, #8]
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80078aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ae:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80078b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80078b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4313      	orrs	r3, r2
 80078be:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <LL_RCC_SetAHB4Prescaler>:
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80078d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078da:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80078de:	f023 020f 	bic.w	r2, r3, #15
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	091b      	lsrs	r3, r3, #4
 80078e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078ea:	4313      	orrs	r3, r2
 80078ec:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <LL_RCC_SetAPB1Prescaler>:
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800790e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4313      	orrs	r3, r2
 8007916:	608b      	str	r3, [r1, #8]
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <LL_RCC_SetAPB2Prescaler>:
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800792c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007936:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4313      	orrs	r3, r2
 800793e:	608b      	str	r3, [r1, #8]
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <LL_RCC_GetAHBPrescaler>:
{
 800794c:	b480      	push	{r7}
 800794e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007950:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800795a:	4618      	mov	r0, r3
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <LL_RCC_GetAHB4Prescaler>:
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007968:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800796c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007976:	4618      	mov	r0, r3
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <LL_RCC_PLL_Enable>:
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007984:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800798e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007992:	6013      	str	r3, [r2, #0]
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <LL_RCC_PLL_Disable>:
{
 800799e:	b480      	push	{r7}
 80079a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80079a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80079ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079b0:	6013      	str	r3, [r2, #0]
}
 80079b2:	bf00      	nop
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <LL_RCC_PLL_IsReady>:
{
 80079bc:	b480      	push	{r7}
 80079be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80079c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80079ce:	d101      	bne.n	80079d4 <LL_RCC_PLL_IsReady+0x18>
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <LL_RCC_PLL_IsReady+0x1a>
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr

080079e0 <LL_RCC_PLL_GetN>:
{
 80079e0:	b480      	push	{r7}
 80079e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80079e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	0a1b      	lsrs	r3, r3, #8
 80079ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr

080079fa <LL_RCC_PLL_GetR>:
{
 80079fa:	b480      	push	{r7}
 80079fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80079fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <LL_RCC_PLL_GetDivider>:
{
 8007a12:	b480      	push	{r7}
 8007a14:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <LL_RCC_PLL_GetMainSource>:
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0303 	and.w	r3, r3, #3
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007a42:	b480      	push	{r7}
 8007a44:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007a46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a54:	d101      	bne.n	8007a5a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007a66:	b480      	push	{r7}
 8007a68:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007a6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a76:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a7a:	d101      	bne.n	8007a80 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e000      	b.n	8007a82 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a94:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007a98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa0:	d101      	bne.n	8007aa6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007ab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ac0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007ac4:	d101      	bne.n	8007aca <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e000      	b.n	8007acc <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ae4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007ae8:	d101      	bne.n	8007aee <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
	...

08007afc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007afc:	b590      	push	{r4, r7, lr}
 8007afe:	b08d      	sub	sp, #52	@ 0x34
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d101      	bne.n	8007b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e363      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 808d 	beq.w	8007c36 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b1c:	f7ff fea1 	bl	8007862 <LL_RCC_GetSysClkSource>
 8007b20:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b22:	f7ff ff82 	bl	8007a2a <LL_RCC_PLL_GetMainSource>
 8007b26:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d005      	beq.n	8007b3a <HAL_RCC_OscConfig+0x3e>
 8007b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b30:	2b0c      	cmp	r3, #12
 8007b32:	d147      	bne.n	8007bc4 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d144      	bne.n	8007bc4 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e347      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007b4a:	f7ff fe4c 	bl	80077e6 <LL_RCC_MSI_GetRange>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	429c      	cmp	r4, r3
 8007b52:	d914      	bls.n	8007b7e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fd03 	bl	8008564 <RCC_SetFlashLatencyFromMSIRange>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	e336      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff fe26 	bl	80077be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7ff fe4a 	bl	8007810 <LL_RCC_MSI_SetCalibTrimming>
 8007b7c:	e013      	b.n	8007ba6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7ff fe1b 	bl	80077be <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6a1b      	ldr	r3, [r3, #32]
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f7ff fe3f 	bl	8007810 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b96:	4618      	mov	r0, r3
 8007b98:	f000 fce4 	bl	8008564 <RCC_SetFlashLatencyFromMSIRange>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d001      	beq.n	8007ba6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e317      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007ba6:	f000 fcc9 	bl	800853c <HAL_RCC_GetHCLKFreq>
 8007baa:	4603      	mov	r3, r0
 8007bac:	4aa4      	ldr	r2, [pc, #656]	@ (8007e40 <HAL_RCC_OscConfig+0x344>)
 8007bae:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007bb0:	4ba4      	ldr	r3, [pc, #656]	@ (8007e44 <HAL_RCC_OscConfig+0x348>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7fc fbff 	bl	80043b8 <HAL_InitTick>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d039      	beq.n	8007c34 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e308      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01e      	beq.n	8007c0a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007bcc:	f7ff fdc8 	bl	8007760 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007bd0:	f7fc fc40 	bl	8004454 <HAL_GetTick>
 8007bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007bd8:	f7fc fc3c 	bl	8004454 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e2f5      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007bea:	f7ff fdd7 	bl	800779c <LL_RCC_MSI_IsReady>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0f1      	beq.n	8007bd8 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7ff fde0 	bl	80077be <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fe04 	bl	8007810 <LL_RCC_MSI_SetCalibTrimming>
 8007c08:	e015      	b.n	8007c36 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007c0a:	f7ff fdb8 	bl	800777e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c0e:	f7fc fc21 	bl	8004454 <HAL_GetTick>
 8007c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007c14:	e008      	b.n	8007c28 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c16:	f7fc fc1d 	bl	8004454 <HAL_GetTick>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c1e:	1ad3      	subs	r3, r2, r3
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d901      	bls.n	8007c28 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007c24:	2303      	movs	r3, #3
 8007c26:	e2d6      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007c28:	f7ff fdb8 	bl	800779c <LL_RCC_MSI_IsReady>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f1      	bne.n	8007c16 <HAL_RCC_OscConfig+0x11a>
 8007c32:	e000      	b.n	8007c36 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007c34:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0301 	and.w	r3, r3, #1
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d047      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c42:	f7ff fe0e 	bl	8007862 <LL_RCC_GetSysClkSource>
 8007c46:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c48:	f7ff feef 	bl	8007a2a <LL_RCC_PLL_GetMainSource>
 8007c4c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	2b08      	cmp	r3, #8
 8007c52:	d005      	beq.n	8007c60 <HAL_RCC_OscConfig+0x164>
 8007c54:	6a3b      	ldr	r3, [r7, #32]
 8007c56:	2b0c      	cmp	r3, #12
 8007c58:	d108      	bne.n	8007c6c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007c5a:	69fb      	ldr	r3, [r7, #28]
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d105      	bne.n	8007c6c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d134      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e2b4      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007c74:	d102      	bne.n	8007c7c <HAL_RCC_OscConfig+0x180>
 8007c76:	f7ff fbf5 	bl	8007464 <LL_RCC_HSE_Enable>
 8007c7a:	e001      	b.n	8007c80 <HAL_RCC_OscConfig+0x184>
 8007c7c:	f7ff fc01 	bl	8007482 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d012      	beq.n	8007cae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c88:	f7fc fbe4 	bl	8004454 <HAL_GetTick>
 8007c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c90:	f7fc fbe0 	bl	8004454 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b64      	cmp	r3, #100	@ 0x64
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e299      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007ca2:	f7ff fbfd 	bl	80074a0 <LL_RCC_HSE_IsReady>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f1      	beq.n	8007c90 <HAL_RCC_OscConfig+0x194>
 8007cac:	e011      	b.n	8007cd2 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cae:	f7fc fbd1 	bl	8004454 <HAL_GetTick>
 8007cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007cb4:	e008      	b.n	8007cc8 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cb6:	f7fc fbcd 	bl	8004454 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b64      	cmp	r3, #100	@ 0x64
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e286      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007cc8:	f7ff fbea 	bl	80074a0 <LL_RCC_HSE_IsReady>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1f1      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0302 	and.w	r3, r3, #2
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d04c      	beq.n	8007d78 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cde:	f7ff fdc0 	bl	8007862 <LL_RCC_GetSysClkSource>
 8007ce2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ce4:	f7ff fea1 	bl	8007a2a <LL_RCC_PLL_GetMainSource>
 8007ce8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d005      	beq.n	8007cfc <HAL_RCC_OscConfig+0x200>
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	2b0c      	cmp	r3, #12
 8007cf4:	d10e      	bne.n	8007d14 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d10b      	bne.n	8007d14 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d101      	bne.n	8007d08 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	e266      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	f7ff fc09 	bl	8007524 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007d12:	e031      	b.n	8007d78 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d019      	beq.n	8007d50 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d1c:	f7ff fbd2 	bl	80074c4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d20:	f7fc fb98 	bl	8004454 <HAL_GetTick>
 8007d24:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007d26:	e008      	b.n	8007d3a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d28:	f7fc fb94 	bl	8004454 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d901      	bls.n	8007d3a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e24d      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007d3a:	f7ff fbe1 	bl	8007500 <LL_RCC_HSI_IsReady>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d0f1      	beq.n	8007d28 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7ff fbeb 	bl	8007524 <LL_RCC_HSI_SetCalibTrimming>
 8007d4e:	e013      	b.n	8007d78 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d50:	f7ff fbc7 	bl	80074e2 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d54:	f7fc fb7e 	bl	8004454 <HAL_GetTick>
 8007d58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007d5a:	e008      	b.n	8007d6e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d5c:	f7fc fb7a 	bl	8004454 <HAL_GetTick>
 8007d60:	4602      	mov	r2, r0
 8007d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d64:	1ad3      	subs	r3, r2, r3
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d901      	bls.n	8007d6e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007d6a:	2303      	movs	r3, #3
 8007d6c:	e233      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007d6e:	f7ff fbc7 	bl	8007500 <LL_RCC_HSI_IsReady>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f1      	bne.n	8007d5c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d106      	bne.n	8007d92 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f000 80a3 	beq.w	8007ed8 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d076      	beq.n	8007e88 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0310 	and.w	r3, r3, #16
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d046      	beq.n	8007e34 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007da6:	f7ff fc7e 	bl	80076a6 <LL_RCC_LSI1_IsReady>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d113      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007db0:	f7ff fc57 	bl	8007662 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007db4:	f7fc fb4e 	bl	8004454 <HAL_GetTick>
 8007db8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007dba:	e008      	b.n	8007dce <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007dbc:	f7fc fb4a 	bl	8004454 <HAL_GetTick>
 8007dc0:	4602      	mov	r2, r0
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e203      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007dce:	f7ff fc6a 	bl	80076a6 <LL_RCC_LSI1_IsReady>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0f1      	beq.n	8007dbc <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007dd8:	f7ff fc77 	bl	80076ca <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ddc:	f7fc fb3a 	bl	8004454 <HAL_GetTick>
 8007de0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007de2:	e008      	b.n	8007df6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007de4:	f7fc fb36 	bl	8004454 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d901      	bls.n	8007df6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e1ef      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007df6:	f7ff fc8a 	bl	800770e <LL_RCC_LSI2_IsReady>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0f1      	beq.n	8007de4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	699b      	ldr	r3, [r3, #24]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff fc94 	bl	8007732 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007e0a:	f7ff fc3b 	bl	8007684 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e0e:	f7fc fb21 	bl	8004454 <HAL_GetTick>
 8007e12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007e16:	f7fc fb1d 	bl	8004454 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e1d6      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007e28:	f7ff fc3d 	bl	80076a6 <LL_RCC_LSI1_IsReady>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1f1      	bne.n	8007e16 <HAL_RCC_OscConfig+0x31a>
 8007e32:	e051      	b.n	8007ed8 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007e34:	f7ff fc15 	bl	8007662 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e38:	f7fc fb0c 	bl	8004454 <HAL_GetTick>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007e3e:	e00c      	b.n	8007e5a <HAL_RCC_OscConfig+0x35e>
 8007e40:	2000000c 	.word	0x2000000c
 8007e44:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007e48:	f7fc fb04 	bl	8004454 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e1bd      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007e5a:	f7ff fc24 	bl	80076a6 <LL_RCC_LSI1_IsReady>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0f1      	beq.n	8007e48 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007e64:	f7ff fc42 	bl	80076ec <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007e68:	e008      	b.n	8007e7c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007e6a:	f7fc faf3 	bl	8004454 <HAL_GetTick>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	1ad3      	subs	r3, r2, r3
 8007e74:	2b03      	cmp	r3, #3
 8007e76:	d901      	bls.n	8007e7c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007e78:	2303      	movs	r3, #3
 8007e7a:	e1ac      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007e7c:	f7ff fc47 	bl	800770e <LL_RCC_LSI2_IsReady>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d1f1      	bne.n	8007e6a <HAL_RCC_OscConfig+0x36e>
 8007e86:	e027      	b.n	8007ed8 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007e88:	f7ff fc30 	bl	80076ec <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e8c:	f7fc fae2 	bl	8004454 <HAL_GetTick>
 8007e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007e94:	f7fc fade 	bl	8004454 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e197      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007ea6:	f7ff fc32 	bl	800770e <LL_RCC_LSI2_IsReady>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1f1      	bne.n	8007e94 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007eb0:	f7ff fbe8 	bl	8007684 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb4:	f7fc face 	bl	8004454 <HAL_GetTick>
 8007eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007ebc:	f7fc faca 	bl	8004454 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e183      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007ece:	f7ff fbea 	bl	80076a6 <LL_RCC_LSI1_IsReady>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d1f1      	bne.n	8007ebc <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f003 0304 	and.w	r3, r3, #4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d05b      	beq.n	8007f9c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ee4:	4ba7      	ldr	r3, [pc, #668]	@ (8008184 <HAL_RCC_OscConfig+0x688>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d114      	bne.n	8007f1a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007ef0:	f7ff fa78 	bl	80073e4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ef4:	f7fc faae 	bl	8004454 <HAL_GetTick>
 8007ef8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007efa:	e008      	b.n	8007f0e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007efc:	f7fc faaa 	bl	8004454 <HAL_GetTick>
 8007f00:	4602      	mov	r2, r0
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	1ad3      	subs	r3, r2, r3
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	d901      	bls.n	8007f0e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007f0a:	2303      	movs	r3, #3
 8007f0c:	e163      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f0e:	4b9d      	ldr	r3, [pc, #628]	@ (8008184 <HAL_RCC_OscConfig+0x688>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0f0      	beq.n	8007efc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d102      	bne.n	8007f28 <HAL_RCC_OscConfig+0x42c>
 8007f22:	f7ff fb48 	bl	80075b6 <LL_RCC_LSE_Enable>
 8007f26:	e00c      	b.n	8007f42 <HAL_RCC_OscConfig+0x446>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	689b      	ldr	r3, [r3, #8]
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d104      	bne.n	8007f3a <HAL_RCC_OscConfig+0x43e>
 8007f30:	f7ff fb63 	bl	80075fa <LL_RCC_LSE_EnableBypass>
 8007f34:	f7ff fb3f 	bl	80075b6 <LL_RCC_LSE_Enable>
 8007f38:	e003      	b.n	8007f42 <HAL_RCC_OscConfig+0x446>
 8007f3a:	f7ff fb4d 	bl	80075d8 <LL_RCC_LSE_Disable>
 8007f3e:	f7ff fb6d 	bl	800761c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	689b      	ldr	r3, [r3, #8]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d014      	beq.n	8007f74 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f4a:	f7fc fa83 	bl	8004454 <HAL_GetTick>
 8007f4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007f50:	e00a      	b.n	8007f68 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f52:	f7fc fa7f 	bl	8004454 <HAL_GetTick>
 8007f56:	4602      	mov	r2, r0
 8007f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5a:	1ad3      	subs	r3, r2, r3
 8007f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d901      	bls.n	8007f68 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	e136      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007f68:	f7ff fb69 	bl	800763e <LL_RCC_LSE_IsReady>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0ef      	beq.n	8007f52 <HAL_RCC_OscConfig+0x456>
 8007f72:	e013      	b.n	8007f9c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f74:	f7fc fa6e 	bl	8004454 <HAL_GetTick>
 8007f78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007f7a:	e00a      	b.n	8007f92 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f7c:	f7fc fa6a 	bl	8004454 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e121      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007f92:	f7ff fb54 	bl	800763e <LL_RCC_LSE_IsReady>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1ef      	bne.n	8007f7c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d02c      	beq.n	8008002 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d014      	beq.n	8007fda <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fb0:	f7ff facd 	bl	800754e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb4:	f7fc fa4e 	bl	8004454 <HAL_GetTick>
 8007fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fbc:	f7fc fa4a 	bl	8004454 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e103      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007fce:	f7ff fae0 	bl	8007592 <LL_RCC_HSI48_IsReady>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d0f1      	beq.n	8007fbc <HAL_RCC_OscConfig+0x4c0>
 8007fd8:	e013      	b.n	8008002 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fda:	f7ff fac9 	bl	8007570 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fde:	f7fc fa39 	bl	8004454 <HAL_GetTick>
 8007fe2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007fe4:	e008      	b.n	8007ff8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fe6:	f7fc fa35 	bl	8004454 <HAL_GetTick>
 8007fea:	4602      	mov	r2, r0
 8007fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d901      	bls.n	8007ff8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e0ee      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007ff8:	f7ff facb 	bl	8007592 <LL_RCC_HSI48_IsReady>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1f1      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 80e4 	beq.w	80081d4 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800800c:	f7ff fc29 	bl	8007862 <LL_RCC_GetSysClkSource>
 8008010:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008012:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800801e:	2b02      	cmp	r3, #2
 8008020:	f040 80b4 	bne.w	800818c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f003 0203 	and.w	r2, r3, #3
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800802e:	429a      	cmp	r2, r3
 8008030:	d123      	bne.n	800807a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800803c:	429a      	cmp	r2, r3
 800803e:	d11c      	bne.n	800807a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	0a1b      	lsrs	r3, r3, #8
 8008044:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800804c:	429a      	cmp	r2, r3
 800804e:	d114      	bne.n	800807a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800805a:	429a      	cmp	r2, r3
 800805c:	d10d      	bne.n	800807a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008068:	429a      	cmp	r2, r3
 800806a:	d106      	bne.n	800807a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008076:	429a      	cmp	r2, r3
 8008078:	d05d      	beq.n	8008136 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b0c      	cmp	r3, #12
 800807e:	d058      	beq.n	8008132 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008080:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e0a1      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008092:	f7ff fc84 	bl	800799e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008096:	f7fc f9dd 	bl	8004454 <HAL_GetTick>
 800809a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800809c:	e008      	b.n	80080b0 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800809e:	f7fc f9d9 	bl	8004454 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d901      	bls.n	80080b0 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e092      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1ef      	bne.n	800809e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	4b30      	ldr	r3, [pc, #192]	@ (8008188 <HAL_RCC_OscConfig+0x68c>)
 80080c6:	4013      	ands	r3, r2
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80080d0:	4311      	orrs	r1, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80080d6:	0212      	lsls	r2, r2, #8
 80080d8:	4311      	orrs	r1, r2
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80080de:	4311      	orrs	r1, r2
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80080e4:	4311      	orrs	r1, r2
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80080ea:	430a      	orrs	r2, r1
 80080ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080f0:	4313      	orrs	r3, r2
 80080f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80080f4:	f7ff fc44 	bl	8007980 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80080f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008102:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008106:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008108:	f7fc f9a4 	bl	8004454 <HAL_GetTick>
 800810c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800810e:	e008      	b.n	8008122 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008110:	f7fc f9a0 	bl	8004454 <HAL_GetTick>
 8008114:	4602      	mov	r2, r0
 8008116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d901      	bls.n	8008122 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800811e:	2303      	movs	r3, #3
 8008120:	e059      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008122:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0ef      	beq.n	8008110 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008130:	e050      	b.n	80081d4 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e04f      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008136:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008140:	2b00      	cmp	r3, #0
 8008142:	d147      	bne.n	80081d4 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008144:	f7ff fc1c 	bl	8007980 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008148:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008152:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008156:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008158:	f7fc f97c 	bl	8004454 <HAL_GetTick>
 800815c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800815e:	e008      	b.n	8008172 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008160:	f7fc f978 	bl	8004454 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d901      	bls.n	8008172 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800816e:	2303      	movs	r3, #3
 8008170:	e031      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0ef      	beq.n	8008160 <HAL_RCC_OscConfig+0x664>
 8008180:	e028      	b.n	80081d4 <HAL_RCC_OscConfig+0x6d8>
 8008182:	bf00      	nop
 8008184:	58000400 	.word	0x58000400
 8008188:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	2b0c      	cmp	r3, #12
 8008190:	d01e      	beq.n	80081d0 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008192:	f7ff fc04 	bl	800799e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008196:	f7fc f95d 	bl	8004454 <HAL_GetTick>
 800819a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800819c:	e008      	b.n	80081b0 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800819e:	f7fc f959 	bl	8004454 <HAL_GetTick>
 80081a2:	4602      	mov	r2, r0
 80081a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a6:	1ad3      	subs	r3, r2, r3
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d901      	bls.n	80081b0 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80081ac:	2303      	movs	r3, #3
 80081ae:	e012      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1ef      	bne.n	800819e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80081be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081c2:	68da      	ldr	r2, [r3, #12]
 80081c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <HAL_RCC_OscConfig+0x6e4>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	60cb      	str	r3, [r1, #12]
 80081ce:	e001      	b.n	80081d4 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e000      	b.n	80081d6 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3734      	adds	r7, #52	@ 0x34
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd90      	pop	{r4, r7, pc}
 80081de:	bf00      	nop
 80081e0:	eefefffc 	.word	0xeefefffc

080081e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d101      	bne.n	80081f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e12d      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081f8:	4b98      	ldr	r3, [pc, #608]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0307 	and.w	r3, r3, #7
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d91b      	bls.n	800823e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008206:	4b95      	ldr	r3, [pc, #596]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f023 0207 	bic.w	r2, r3, #7
 800820e:	4993      	ldr	r1, [pc, #588]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	4313      	orrs	r3, r2
 8008214:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008216:	f7fc f91d 	bl	8004454 <HAL_GetTick>
 800821a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800821c:	e008      	b.n	8008230 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800821e:	f7fc f919 	bl	8004454 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e111      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008230:	4b8a      	ldr	r3, [pc, #552]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d1ef      	bne.n	800821e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff fb13 	bl	800787a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008254:	f7fc f8fe 	bl	8004454 <HAL_GetTick>
 8008258:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800825a:	e008      	b.n	800826e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800825c:	f7fc f8fa 	bl	8004454 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b02      	cmp	r3, #2
 8008268:	d901      	bls.n	800826e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e0f2      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800826e:	f7ff fbe8 	bl	8007a42 <LL_RCC_IsActiveFlag_HPRE>
 8008272:	4603      	mov	r3, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d0f1      	beq.n	800825c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0320 	and.w	r3, r3, #32
 8008280:	2b00      	cmp	r3, #0
 8008282:	d016      	beq.n	80082b2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	4618      	mov	r0, r3
 800828a:	f7ff fb0a 	bl	80078a2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800828e:	f7fc f8e1 	bl	8004454 <HAL_GetTick>
 8008292:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008294:	e008      	b.n	80082a8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008296:	f7fc f8dd 	bl	8004454 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e0d5      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80082a8:	f7ff fbdd 	bl	8007a66 <LL_RCC_IsActiveFlag_C2HPRE>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d0f1      	beq.n	8008296 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d016      	beq.n	80082ec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7ff fb03 	bl	80078ce <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80082c8:	f7fc f8c4 	bl	8004454 <HAL_GetTick>
 80082cc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80082ce:	e008      	b.n	80082e2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80082d0:	f7fc f8c0 	bl	8004454 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d901      	bls.n	80082e2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e0b8      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80082e2:	f7ff fbd3 	bl	8007a8c <LL_RCC_IsActiveFlag_SHDHPRE>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0f1      	beq.n	80082d0 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d016      	beq.n	8008326 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	68db      	ldr	r3, [r3, #12]
 80082fc:	4618      	mov	r0, r3
 80082fe:	f7ff fafd 	bl	80078fc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008302:	f7fc f8a7 	bl	8004454 <HAL_GetTick>
 8008306:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008308:	e008      	b.n	800831c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800830a:	f7fc f8a3 	bl	8004454 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d901      	bls.n	800831c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e09b      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800831c:	f7ff fbc9 	bl	8007ab2 <LL_RCC_IsActiveFlag_PPRE1>
 8008320:	4603      	mov	r3, r0
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0f1      	beq.n	800830a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d017      	beq.n	8008362 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	691b      	ldr	r3, [r3, #16]
 8008336:	00db      	lsls	r3, r3, #3
 8008338:	4618      	mov	r0, r3
 800833a:	f7ff faf3 	bl	8007924 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800833e:	f7fc f889 	bl	8004454 <HAL_GetTick>
 8008342:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008344:	e008      	b.n	8008358 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008346:	f7fc f885 	bl	8004454 <HAL_GetTick>
 800834a:	4602      	mov	r2, r0
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	2b02      	cmp	r3, #2
 8008352:	d901      	bls.n	8008358 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008354:	2303      	movs	r3, #3
 8008356:	e07d      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008358:	f7ff fbbd 	bl	8007ad6 <LL_RCC_IsActiveFlag_PPRE2>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d0f1      	beq.n	8008346 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0301 	and.w	r3, r3, #1
 800836a:	2b00      	cmp	r3, #0
 800836c:	d043      	beq.n	80083f6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	2b02      	cmp	r3, #2
 8008374:	d106      	bne.n	8008384 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008376:	f7ff f893 	bl	80074a0 <LL_RCC_HSE_IsReady>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d11e      	bne.n	80083be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e067      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d106      	bne.n	800839a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800838c:	f7ff fb16 	bl	80079bc <LL_RCC_PLL_IsReady>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d113      	bne.n	80083be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008396:	2301      	movs	r3, #1
 8008398:	e05c      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d106      	bne.n	80083b0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80083a2:	f7ff f9fb 	bl	800779c <LL_RCC_MSI_IsReady>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d108      	bne.n	80083be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	e051      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80083b0:	f7ff f8a6 	bl	8007500 <LL_RCC_HSI_IsReady>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e04a      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7ff fa39 	bl	800783a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083c8:	f7fc f844 	bl	8004454 <HAL_GetTick>
 80083cc:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ce:	e00a      	b.n	80083e6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083d0:	f7fc f840 	bl	8004454 <HAL_GetTick>
 80083d4:	4602      	mov	r2, r0
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	1ad3      	subs	r3, r2, r3
 80083da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083de:	4293      	cmp	r3, r2
 80083e0:	d901      	bls.n	80083e6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80083e2:	2303      	movs	r3, #3
 80083e4:	e036      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083e6:	f7ff fa3c 	bl	8007862 <LL_RCC_GetSysClkSource>
 80083ea:	4602      	mov	r2, r0
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	009b      	lsls	r3, r3, #2
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d1ec      	bne.n	80083d0 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083f6:	4b19      	ldr	r3, [pc, #100]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0307 	and.w	r3, r3, #7
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d21b      	bcs.n	800843c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008404:	4b15      	ldr	r3, [pc, #84]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f023 0207 	bic.w	r2, r3, #7
 800840c:	4913      	ldr	r1, [pc, #76]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	4313      	orrs	r3, r2
 8008412:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008414:	f7fc f81e 	bl	8004454 <HAL_GetTick>
 8008418:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800841a:	e008      	b.n	800842e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800841c:	f7fc f81a 	bl	8004454 <HAL_GetTick>
 8008420:	4602      	mov	r2, r0
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	2b02      	cmp	r3, #2
 8008428:	d901      	bls.n	800842e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e012      	b.n	8008454 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800842e:	4b0b      	ldr	r3, [pc, #44]	@ (800845c <HAL_RCC_ClockConfig+0x278>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0307 	and.w	r3, r3, #7
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d1ef      	bne.n	800841c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800843c:	f000 f87e 	bl	800853c <HAL_RCC_GetHCLKFreq>
 8008440:	4603      	mov	r3, r0
 8008442:	4a07      	ldr	r2, [pc, #28]	@ (8008460 <HAL_RCC_ClockConfig+0x27c>)
 8008444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008446:	f7fc f811 	bl	800446c <HAL_GetTickPrio>
 800844a:	4603      	mov	r3, r0
 800844c:	4618      	mov	r0, r3
 800844e:	f7fb ffb3 	bl	80043b8 <HAL_InitTick>
 8008452:	4603      	mov	r3, r0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}
 800845c:	58004000 	.word	0x58004000
 8008460:	2000000c 	.word	0x2000000c

08008464 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008464:	b590      	push	{r4, r7, lr}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800846a:	f7ff f9fa 	bl	8007862 <LL_RCC_GetSysClkSource>
 800846e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d10a      	bne.n	800848c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008476:	f7ff f9b6 	bl	80077e6 <LL_RCC_MSI_GetRange>
 800847a:	4603      	mov	r3, r0
 800847c:	091b      	lsrs	r3, r3, #4
 800847e:	f003 030f 	and.w	r3, r3, #15
 8008482:	4a2b      	ldr	r2, [pc, #172]	@ (8008530 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	e04b      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b04      	cmp	r3, #4
 8008490:	d102      	bne.n	8008498 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008492:	4b28      	ldr	r3, [pc, #160]	@ (8008534 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	e045      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2b08      	cmp	r3, #8
 800849c:	d10a      	bne.n	80084b4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800849e:	f7fe ffcf 	bl	8007440 <LL_RCC_HSE_IsEnabledDiv2>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d102      	bne.n	80084ae <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80084a8:	4b22      	ldr	r3, [pc, #136]	@ (8008534 <HAL_RCC_GetSysClockFreq+0xd0>)
 80084aa:	60fb      	str	r3, [r7, #12]
 80084ac:	e03a      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80084ae:	4b22      	ldr	r3, [pc, #136]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xd4>)
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	e037      	b.n	8008524 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80084b4:	f7ff fab9 	bl	8007a2a <LL_RCC_PLL_GetMainSource>
 80084b8:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d003      	beq.n	80084c8 <HAL_RCC_GetSysClockFreq+0x64>
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	d003      	beq.n	80084ce <HAL_RCC_GetSysClockFreq+0x6a>
 80084c6:	e00d      	b.n	80084e4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80084c8:	4b1a      	ldr	r3, [pc, #104]	@ (8008534 <HAL_RCC_GetSysClockFreq+0xd0>)
 80084ca:	60bb      	str	r3, [r7, #8]
        break;
 80084cc:	e015      	b.n	80084fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80084ce:	f7fe ffb7 	bl	8007440 <LL_RCC_HSE_IsEnabledDiv2>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d102      	bne.n	80084de <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80084d8:	4b16      	ldr	r3, [pc, #88]	@ (8008534 <HAL_RCC_GetSysClockFreq+0xd0>)
 80084da:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80084dc:	e00d      	b.n	80084fa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80084de:	4b16      	ldr	r3, [pc, #88]	@ (8008538 <HAL_RCC_GetSysClockFreq+0xd4>)
 80084e0:	60bb      	str	r3, [r7, #8]
        break;
 80084e2:	e00a      	b.n	80084fa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80084e4:	f7ff f97f 	bl	80077e6 <LL_RCC_MSI_GetRange>
 80084e8:	4603      	mov	r3, r0
 80084ea:	091b      	lsrs	r3, r3, #4
 80084ec:	f003 030f 	and.w	r3, r3, #15
 80084f0:	4a0f      	ldr	r2, [pc, #60]	@ (8008530 <HAL_RCC_GetSysClockFreq+0xcc>)
 80084f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f6:	60bb      	str	r3, [r7, #8]
        break;
 80084f8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80084fa:	f7ff fa71 	bl	80079e0 <LL_RCC_PLL_GetN>
 80084fe:	4602      	mov	r2, r0
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	fb03 f402 	mul.w	r4, r3, r2
 8008506:	f7ff fa84 	bl	8007a12 <LL_RCC_PLL_GetDivider>
 800850a:	4603      	mov	r3, r0
 800850c:	091b      	lsrs	r3, r3, #4
 800850e:	3301      	adds	r3, #1
 8008510:	fbb4 f4f3 	udiv	r4, r4, r3
 8008514:	f7ff fa71 	bl	80079fa <LL_RCC_PLL_GetR>
 8008518:	4603      	mov	r3, r0
 800851a:	0f5b      	lsrs	r3, r3, #29
 800851c:	3301      	adds	r3, #1
 800851e:	fbb4 f3f3 	udiv	r3, r4, r3
 8008522:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3714      	adds	r7, #20
 800852a:	46bd      	mov	sp, r7
 800852c:	bd90      	pop	{r4, r7, pc}
 800852e:	bf00      	nop
 8008530:	080187f0 	.word	0x080187f0
 8008534:	00f42400 	.word	0x00f42400
 8008538:	01e84800 	.word	0x01e84800

0800853c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800853c:	b598      	push	{r3, r4, r7, lr}
 800853e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008540:	f7ff ff90 	bl	8008464 <HAL_RCC_GetSysClockFreq>
 8008544:	4604      	mov	r4, r0
 8008546:	f7ff fa01 	bl	800794c <LL_RCC_GetAHBPrescaler>
 800854a:	4603      	mov	r3, r0
 800854c:	091b      	lsrs	r3, r3, #4
 800854e:	f003 030f 	and.w	r3, r3, #15
 8008552:	4a03      	ldr	r2, [pc, #12]	@ (8008560 <HAL_RCC_GetHCLKFreq+0x24>)
 8008554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008558:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800855c:	4618      	mov	r0, r3
 800855e:	bd98      	pop	{r3, r4, r7, pc}
 8008560:	080187b0 	.word	0x080187b0

08008564 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008564:	b590      	push	{r4, r7, lr}
 8008566:	b085      	sub	sp, #20
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2bb0      	cmp	r3, #176	@ 0xb0
 8008570:	d903      	bls.n	800857a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008572:	4b15      	ldr	r3, [pc, #84]	@ (80085c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e007      	b.n	800858a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	091b      	lsrs	r3, r3, #4
 800857e:	f003 030f 	and.w	r3, r3, #15
 8008582:	4a11      	ldr	r2, [pc, #68]	@ (80085c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008588:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800858a:	f7ff f9eb 	bl	8007964 <LL_RCC_GetAHB4Prescaler>
 800858e:	4603      	mov	r3, r0
 8008590:	091b      	lsrs	r3, r3, #4
 8008592:	f003 030f 	and.w	r3, r3, #15
 8008596:	4a0d      	ldr	r2, [pc, #52]	@ (80085cc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	fbb2 f3f3 	udiv	r3, r2, r3
 80085a2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	4a0a      	ldr	r2, [pc, #40]	@ (80085d0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80085a8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ac:	0c9c      	lsrs	r4, r3, #18
 80085ae:	f7fe ff29 	bl	8007404 <HAL_PWREx_GetVoltageRange>
 80085b2:	4603      	mov	r3, r0
 80085b4:	4619      	mov	r1, r3
 80085b6:	4620      	mov	r0, r4
 80085b8:	f000 f80c 	bl	80085d4 <RCC_SetFlashLatency>
 80085bc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3714      	adds	r7, #20
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd90      	pop	{r4, r7, pc}
 80085c6:	bf00      	nop
 80085c8:	080187f0 	.word	0x080187f0
 80085cc:	080187b0 	.word	0x080187b0
 80085d0:	431bde83 	.word	0x431bde83

080085d4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80085d4:	b590      	push	{r4, r7, lr}
 80085d6:	b093      	sub	sp, #76	@ 0x4c
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80085de:	4b37      	ldr	r3, [pc, #220]	@ (80086bc <RCC_SetFlashLatency+0xe8>)
 80085e0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80085e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80085ea:	4a35      	ldr	r2, [pc, #212]	@ (80086c0 <RCC_SetFlashLatency+0xec>)
 80085ec:	f107 031c 	add.w	r3, r7, #28
 80085f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80085f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80085f6:	4b33      	ldr	r3, [pc, #204]	@ (80086c4 <RCC_SetFlashLatency+0xf0>)
 80085f8:	f107 040c 	add.w	r4, r7, #12
 80085fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8008602:	2300      	movs	r3, #0
 8008604:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800860c:	d11a      	bne.n	8008644 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800860e:	2300      	movs	r3, #0
 8008610:	643b      	str	r3, [r7, #64]	@ 0x40
 8008612:	e013      	b.n	800863c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	3348      	adds	r3, #72	@ 0x48
 800861a:	443b      	add	r3, r7
 800861c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d807      	bhi.n	8008636 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	3348      	adds	r3, #72	@ 0x48
 800862c:	443b      	add	r3, r7
 800862e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008632:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008634:	e020      	b.n	8008678 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008636:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008638:	3301      	adds	r3, #1
 800863a:	643b      	str	r3, [r7, #64]	@ 0x40
 800863c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800863e:	2b03      	cmp	r3, #3
 8008640:	d9e8      	bls.n	8008614 <RCC_SetFlashLatency+0x40>
 8008642:	e019      	b.n	8008678 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008644:	2300      	movs	r3, #0
 8008646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008648:	e013      	b.n	8008672 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800864a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	3348      	adds	r3, #72	@ 0x48
 8008650:	443b      	add	r3, r7
 8008652:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	429a      	cmp	r2, r3
 800865a:	d807      	bhi.n	800866c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800865c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	3348      	adds	r3, #72	@ 0x48
 8008662:	443b      	add	r3, r7
 8008664:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008668:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800866a:	e005      	b.n	8008678 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800866c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800866e:	3301      	adds	r3, #1
 8008670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008674:	2b02      	cmp	r3, #2
 8008676:	d9e8      	bls.n	800864a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008678:	4b13      	ldr	r3, [pc, #76]	@ (80086c8 <RCC_SetFlashLatency+0xf4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f023 0207 	bic.w	r2, r3, #7
 8008680:	4911      	ldr	r1, [pc, #68]	@ (80086c8 <RCC_SetFlashLatency+0xf4>)
 8008682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008684:	4313      	orrs	r3, r2
 8008686:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008688:	f7fb fee4 	bl	8004454 <HAL_GetTick>
 800868c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800868e:	e008      	b.n	80086a2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008690:	f7fb fee0 	bl	8004454 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d901      	bls.n	80086a2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e007      	b.n	80086b2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80086a2:	4b09      	ldr	r3, [pc, #36]	@ (80086c8 <RCC_SetFlashLatency+0xf4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d1ef      	bne.n	8008690 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	374c      	adds	r7, #76	@ 0x4c
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd90      	pop	{r4, r7, pc}
 80086ba:	bf00      	nop
 80086bc:	08017100 	.word	0x08017100
 80086c0:	08017110 	.word	0x08017110
 80086c4:	0801711c 	.word	0x0801711c
 80086c8:	58004000 	.word	0x58004000

080086cc <LL_RCC_LSE_IsEnabled>:
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80086d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086d8:	f003 0301 	and.w	r3, r3, #1
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d101      	bne.n	80086e4 <LL_RCC_LSE_IsEnabled+0x18>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e000      	b.n	80086e6 <LL_RCC_LSE_IsEnabled+0x1a>
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr

080086f0 <LL_RCC_LSE_IsReady>:
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80086f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b02      	cmp	r3, #2
 8008702:	d101      	bne.n	8008708 <LL_RCC_LSE_IsReady+0x18>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <LL_RCC_LSE_IsReady+0x1a>
 8008708:	2300      	movs	r3, #0
}
 800870a:	4618      	mov	r0, r3
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_RCC_SetRFWKPClockSource>:
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800871c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008720:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008724:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008728:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <LL_RCC_SetSMPSClockSource>:
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8008748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800874c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800874e:	f023 0203 	bic.w	r2, r3, #3
 8008752:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	4313      	orrs	r3, r2
 800875a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <LL_RCC_SetSMPSPrescaler>:
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008776:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800877a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4313      	orrs	r3, r2
 8008782:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <LL_RCC_SetUSARTClockSource>:
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087a0:	f023 0203 	bic.w	r2, r3, #3
 80087a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4313      	orrs	r3, r2
 80087ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80087b0:	bf00      	nop
 80087b2:	370c      	adds	r7, #12
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <LL_RCC_SetLPUARTClockSource>:
{
 80087bc:	b480      	push	{r7}
 80087be:	b083      	sub	sp, #12
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80087c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087cc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80087d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80087dc:	bf00      	nop
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <LL_RCC_SetI2CClockSource>:
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80087f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	091b      	lsrs	r3, r3, #4
 80087fc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008800:	43db      	mvns	r3, r3
 8008802:	401a      	ands	r2, r3
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	011b      	lsls	r3, r3, #4
 8008808:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800880c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008810:	4313      	orrs	r3, r2
 8008812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <LL_RCC_SetLPTIMClockSource>:
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800882a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800882e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	0c1b      	lsrs	r3, r3, #16
 8008836:	041b      	lsls	r3, r3, #16
 8008838:	43db      	mvns	r3, r3
 800883a:	401a      	ands	r2, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008844:	4313      	orrs	r3, r2
 8008846:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800884a:	bf00      	nop
 800884c:	370c      	adds	r7, #12
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <LL_RCC_SetSAIClockSource>:
{
 8008856:	b480      	push	{r7}
 8008858:	b083      	sub	sp, #12
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800885e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008866:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800886a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4313      	orrs	r3, r2
 8008872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <LL_RCC_SetRNGClockSource>:
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800888a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800888e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008892:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008896:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4313      	orrs	r3, r2
 800889e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <LL_RCC_SetCLK48ClockSource>:
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80088b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80088c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80088ce:	bf00      	nop
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <LL_RCC_SetUSBClockSource>:
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b082      	sub	sp, #8
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f7ff ffe3 	bl	80088ae <LL_RCC_SetCLK48ClockSource>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <LL_RCC_SetADCClockSource>:
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80088f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008900:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4313      	orrs	r3, r2
 800890c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <LL_RCC_SetRTCClockSource>:
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008924:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800892c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008930:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4313      	orrs	r3, r2
 8008938:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <LL_RCC_GetRTCClockSource>:
{
 8008948:	b480      	push	{r7}
 800894a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800894c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008950:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008954:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8008958:	4618      	mov	r0, r3
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <LL_RCC_ForceBackupDomainReset>:
{
 8008962:	b480      	push	{r7}
 8008964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800896a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800896e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008972:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008976:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800897a:	bf00      	nop
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008984:	b480      	push	{r7}
 8008986:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008988:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800898c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008990:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008994:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008998:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800899c:	bf00      	nop
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <LL_RCC_PLLSAI1_Enable>:
{
 80089a6:	b480      	push	{r7}
 80089a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80089aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089b8:	6013      	str	r3, [r2, #0]
}
 80089ba:	bf00      	nop
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <LL_RCC_PLLSAI1_Disable>:
{
 80089c4:	b480      	push	{r7}
 80089c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80089c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80089d6:	6013      	str	r3, [r2, #0]
}
 80089d8:	bf00      	nop
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <LL_RCC_PLLSAI1_IsReady>:
{
 80089e2:	b480      	push	{r7}
 80089e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80089e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80089f4:	d101      	bne.n	80089fa <LL_RCC_PLLSAI1_IsReady+0x18>
 80089f6:	2301      	movs	r3, #1
 80089f8:	e000      	b.n	80089fc <LL_RCC_PLLSAI1_IsReady+0x1a>
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr

08008a06 <LL_APB1_GRP1_ForceReset>:
{
 8008a06:	b480      	push	{r7}
 8008a08:	b083      	sub	sp, #12
 8008a0a:	af00      	add	r7, sp, #0
 8008a0c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8008a0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <LL_APB1_GRP1_ReleaseReset>:
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8008a32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008a40:	4013      	ands	r3, r2
 8008a42:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008a58:	2300      	movs	r3, #0
 8008a5a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d034      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008a74:	d021      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008a76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008a7a:	d81b      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a80:	d01d      	beq.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008a82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a86:	d815      	bhi.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d00b      	beq.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a90:	d110      	bne.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aa0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008aa2:	e00d      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	3304      	adds	r3, #4
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 f981 	bl	8008db0 <RCCEx_PLLSAI1_ConfigNP>
 8008aae:	4603      	mov	r3, r0
 8008ab0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008ab2:	e005      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	77fb      	strb	r3, [r7, #31]
        break;
 8008ab8:	e002      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008aba:	bf00      	nop
 8008abc:	e000      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ac0:	7ffb      	ldrb	r3, [r7, #31]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d105      	bne.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7ff fec3 	bl	8008856 <LL_RCC_SetSAIClockSource>
 8008ad0:	e001      	b.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ad2:	7ffb      	ldrb	r3, [r7, #31]
 8008ad4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d046      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008ae2:	f7ff ff31 	bl	8008948 <LL_RCC_GetRTCClockSource>
 8008ae6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d03c      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008af2:	f7fe fc77 	bl	80073e4 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d105      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7ff ff0b 	bl	800891c <LL_RCC_SetRTCClockSource>
 8008b06:	e02e      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008b08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b10:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008b12:	f7ff ff26 	bl	8008962 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008b16:	f7ff ff35 	bl	8008984 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008b28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008b32:	f7ff fdcb 	bl	80086cc <LL_RCC_LSE_IsEnabled>
 8008b36:	4603      	mov	r3, r0
 8008b38:	2b01      	cmp	r3, #1
 8008b3a:	d114      	bne.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b3c:	f7fb fc8a 	bl	8004454 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008b42:	e00b      	b.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008b44:	f7fb fc86 	bl	8004454 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d902      	bls.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008b56:	2303      	movs	r3, #3
 8008b58:	77fb      	strb	r3, [r7, #31]
              break;
 8008b5a:	e004      	b.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008b5c:	f7ff fdc8 	bl	80086f0 <LL_RCC_LSE_IsReady>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d1ee      	bne.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008b66:	7ffb      	ldrb	r3, [r7, #31]
 8008b68:	77bb      	strb	r3, [r7, #30]
 8008b6a:	e001      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b6c:	7ffb      	ldrb	r3, [r7, #31]
 8008b6e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d004      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7ff fe05 	bl	8008790 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	4618      	mov	r0, r3
 8008b98:	f7ff fe10 	bl	80087bc <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0310 	and.w	r3, r3, #16
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d004      	beq.n	8008bb2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bac:	4618      	mov	r0, r3
 8008bae:	f7ff fe38 	bl	8008822 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0320 	and.w	r3, r3, #32
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d004      	beq.n	8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7ff fe2d 	bl	8008822 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d004      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f7ff fe05 	bl	80087e8 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0308 	and.w	r3, r3, #8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d004      	beq.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7ff fdfa 	bl	80087e8 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d022      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff fe68 	bl	80088da <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c0e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008c12:	d107      	bne.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008c14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008c22:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008c2c:	d10b      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3304      	adds	r3, #4
 8008c32:	4618      	mov	r0, r3
 8008c34:	f000 f917 	bl	8008e66 <RCCEx_PLLSAI1_ConfigNQ>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c3c:	7ffb      	ldrb	r3, [r7, #31]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008c42:	7ffb      	ldrb	r3, [r7, #31]
 8008c44:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d02b      	beq.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c5a:	d008      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c64:	d003      	beq.n	8008c6e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d105      	bne.n	8008c7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c72:	4618      	mov	r0, r3
 8008c74:	f7ff fe05 	bl	8008882 <LL_RCC_SetRNGClockSource>
 8008c78:	e00a      	b.n	8008c90 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008c82:	60fb      	str	r3, [r7, #12]
 8008c84:	2000      	movs	r0, #0
 8008c86:	f7ff fdfc 	bl	8008882 <LL_RCC_SetRNGClockSource>
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f7ff fe0f 	bl	80088ae <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c94:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008c98:	d107      	bne.n	8008caa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008c9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ca4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ca8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d022      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7ff fe18 	bl	80088f0 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008cc8:	d107      	bne.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008cca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cce:	68db      	ldr	r3, [r3, #12]
 8008cd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008cd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008cd8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cde:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ce2:	d10b      	bne.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 f917 	bl	8008f1c <RCCEx_PLLSAI1_ConfigNR>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008cf2:	7ffb      	ldrb	r3, [r7, #31]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008cf8:	7ffb      	ldrb	r3, [r7, #31]
 8008cfa:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d004      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff fd01 	bl	8008714 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d009      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7ff fd20 	bl	8008768 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fd07 	bl	8008740 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008d32:	7fbb      	ldrb	r3, [r7, #30]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3720      	adds	r7, #32
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008d44:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8008d48:	f7ff fe5d 	bl	8008a06 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8008d4c:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8008d50:	f7ff fe6b 	bl	8008a2a <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	68db      	ldr	r3, [r3, #12]
 8008d6a:	68fa      	ldr	r2, [r7, #12]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	041b      	lsls	r3, r3, #16
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8008d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8008dac <HAL_RCCEx_CRSConfig+0x70>)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8008d82:	4b0a      	ldr	r3, [pc, #40]	@ (8008dac <HAL_RCCEx_CRSConfig+0x70>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	695b      	ldr	r3, [r3, #20]
 8008d8e:	021b      	lsls	r3, r3, #8
 8008d90:	4906      	ldr	r1, [pc, #24]	@ (8008dac <HAL_RCCEx_CRSConfig+0x70>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8008d96:	4b05      	ldr	r3, [pc, #20]	@ (8008dac <HAL_RCCEx_CRSConfig+0x70>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a04      	ldr	r2, [pc, #16]	@ (8008dac <HAL_RCCEx_CRSConfig+0x70>)
 8008d9c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008da0:	6013      	str	r3, [r2, #0]
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	40006000 	.word	0x40006000

08008db0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008dbc:	f7ff fe02 	bl	80089c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008dc0:	f7fb fb48 	bl	8004454 <HAL_GetTick>
 8008dc4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008dc6:	e009      	b.n	8008ddc <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008dc8:	f7fb fb44 	bl	8004454 <HAL_GetTick>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	1ad3      	subs	r3, r2, r3
 8008dd2:	2b02      	cmp	r3, #2
 8008dd4:	d902      	bls.n	8008ddc <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008dd6:	2303      	movs	r3, #3
 8008dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8008dda:	e004      	b.n	8008de6 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ddc:	f7ff fe01 	bl	80089e2 <LL_RCC_PLLSAI1_IsReady>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1f0      	bne.n	8008dc8 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d137      	bne.n	8008e5c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	021b      	lsls	r3, r3, #8
 8008dfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e00:	4313      	orrs	r3, r2
 8008e02:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e08:	691b      	ldr	r3, [r3, #16]
 8008e0a:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e16:	4313      	orrs	r3, r2
 8008e18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008e1a:	f7ff fdc4 	bl	80089a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e1e:	f7fb fb19 	bl	8004454 <HAL_GetTick>
 8008e22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e24:	e009      	b.n	8008e3a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e26:	f7fb fb15 	bl	8004454 <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d902      	bls.n	8008e3a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	73fb      	strb	r3, [r7, #15]
        break;
 8008e38:	e004      	b.n	8008e44 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e3a:	f7ff fdd2 	bl	80089e2 <LL_RCC_PLLSAI1_IsReady>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d1f0      	bne.n	8008e26 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d108      	bne.n	8008e5c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3710      	adds	r7, #16
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}

08008e66 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008e66:	b580      	push	{r7, lr}
 8008e68:	b084      	sub	sp, #16
 8008e6a:	af00      	add	r7, sp, #0
 8008e6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008e72:	f7ff fda7 	bl	80089c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e76:	f7fb faed 	bl	8004454 <HAL_GetTick>
 8008e7a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e7c:	e009      	b.n	8008e92 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e7e:	f7fb fae9 	bl	8004454 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d902      	bls.n	8008e92 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e90:	e004      	b.n	8008e9c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e92:	f7ff fda6 	bl	80089e2 <LL_RCC_PLLSAI1_IsReady>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1f0      	bne.n	8008e7e <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008e9c:	7bfb      	ldrb	r3, [r7, #15]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d137      	bne.n	8008f12 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	021b      	lsls	r3, r3, #8
 8008eb2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008eba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ecc:	4313      	orrs	r3, r2
 8008ece:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008ed0:	f7ff fd69 	bl	80089a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed4:	f7fb fabe 	bl	8004454 <HAL_GetTick>
 8008ed8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008eda:	e009      	b.n	8008ef0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008edc:	f7fb faba 	bl	8004454 <HAL_GetTick>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d902      	bls.n	8008ef0 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008eea:	2303      	movs	r3, #3
 8008eec:	73fb      	strb	r3, [r7, #15]
        break;
 8008eee:	e004      	b.n	8008efa <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ef0:	f7ff fd77 	bl	80089e2 <LL_RCC_PLLSAI1_IsReady>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d1f0      	bne.n	8008edc <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d108      	bne.n	8008f12 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	691b      	ldr	r3, [r3, #16]
 8008f0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b084      	sub	sp, #16
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008f28:	f7ff fd4c 	bl	80089c4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f2c:	f7fb fa92 	bl	8004454 <HAL_GetTick>
 8008f30:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008f32:	e009      	b.n	8008f48 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f34:	f7fb fa8e 	bl	8004454 <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d902      	bls.n	8008f48 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	73fb      	strb	r3, [r7, #15]
      break;
 8008f46:	e004      	b.n	8008f52 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008f48:	f7ff fd4b 	bl	80089e2 <LL_RCC_PLLSAI1_IsReady>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f0      	bne.n	8008f34 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d137      	bne.n	8008fc8 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008f70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f82:	4313      	orrs	r3, r2
 8008f84:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008f86:	f7ff fd0e 	bl	80089a6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f8a:	f7fb fa63 	bl	8004454 <HAL_GetTick>
 8008f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008f90:	e009      	b.n	8008fa6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f92:	f7fb fa5f 	bl	8004454 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	2b02      	cmp	r3, #2
 8008f9e:	d902      	bls.n	8008fa6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	73fb      	strb	r3, [r7, #15]
        break;
 8008fa4:	e004      	b.n	8008fb0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008fa6:	f7ff fd1c 	bl	80089e2 <LL_RCC_PLLSAI1_IsReady>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d1f0      	bne.n	8008f92 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008fb0:	7bfb      	ldrb	r3, [r7, #15]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d108      	bne.n	8008fc8 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008fb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d101      	bne.n	8008fe4 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e027      	b.n	8009034 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	7a5b      	ldrb	r3, [r3, #9]
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d105      	bne.n	8008ffa <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7fa ff39 	bl	8003e6c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f023 0120 	bic.w	r1, r3, #32
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	430a      	orrs	r2, r1
 8009014:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	681a      	ldr	r2, [r3, #0]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f042 0204 	orr.w	r2, r2, #4
 8009024:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2201      	movs	r2, #1
 800902a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009032:	2300      	movs	r3, #0
}
 8009034:	4618      	mov	r0, r3
 8009036:	3708      	adds	r7, #8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b084      	sub	sp, #16
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f003 0320 	and.w	r3, r3, #32
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2210      	movs	r2, #16
 800905e:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009060:	2301      	movs	r3, #1
 8009062:	60fb      	str	r3, [r7, #12]
 8009064:	e009      	b.n	800907a <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	d004      	beq.n	800907a <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2208      	movs	r2, #8
 8009074:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009076:	2301      	movs	r3, #1
 8009078:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d10b      	bne.n	8009098 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2204      	movs	r2, #4
 8009084:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 f837 	bl	80090fa <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009094:	605a      	str	r2, [r3, #4]

    return;
 8009096:	e022      	b.n	80090de <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d01d      	beq.n	80090de <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	681a      	ldr	r2, [r3, #0]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	f022 0208 	bic.w	r2, r2, #8
 80090b0:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689a      	ldr	r2, [r3, #8]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	7a5b      	ldrb	r3, [r3, #9]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b04      	cmp	r3, #4
 80090c4:	d00b      	beq.n	80090de <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2201      	movs	r2, #1
 80090ca:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f803 	bl	80090e4 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80090de:	3710      	adds	r7, #16
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}

080090e4 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80090ee:	bf00      	nop
 80090f0:	370c      	adds	r7, #12
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b083      	sub	sp, #12
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e09f      	b.n	8009262 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fa feca 	bl	8003ed0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009144:	4b49      	ldr	r3, [pc, #292]	@ (800926c <HAL_RTC_Init+0x15c>)
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f003 0310 	and.w	r3, r3, #16
 800914c:	2b10      	cmp	r3, #16
 800914e:	d07e      	beq.n	800924e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	22ca      	movs	r2, #202	@ 0xca
 8009156:	625a      	str	r2, [r3, #36]	@ 0x24
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2253      	movs	r2, #83	@ 0x53
 800915e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f8ab 	bl	80092bc <RTC_EnterInitMode>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00a      	beq.n	8009182 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	22ff      	movs	r2, #255	@ 0xff
 8009172:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2204      	movs	r2, #4
 8009178:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	73fb      	strb	r3, [r7, #15]
 8009180:	e067      	b.n	8009252 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6812      	ldr	r2, [r2, #0]
 800918c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009194:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6899      	ldr	r1, [r3, #8]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	431a      	orrs	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	699b      	ldr	r3, [r3, #24]
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	430a      	orrs	r2, r1
 80091b2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	68d2      	ldr	r2, [r2, #12]
 80091bc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6919      	ldr	r1, [r3, #16]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	041a      	lsls	r2, r3, #16
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	68da      	ldr	r2, [r3, #12]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091e0:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f022 0203 	bic.w	r2, r2, #3
 80091f0:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	69da      	ldr	r2, [r3, #28]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	695b      	ldr	r3, [r3, #20]
 8009200:	431a      	orrs	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f003 0320 	and.w	r3, r3, #32
 8009214:	2b00      	cmp	r3, #0
 8009216:	d113      	bne.n	8009240 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f829 	bl	8009270 <HAL_RTC_WaitForSynchro>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00d      	beq.n	8009240 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	22ff      	movs	r2, #255	@ 0xff
 800922a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2204      	movs	r2, #4
 8009230:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800923c:	2301      	movs	r3, #1
 800923e:	e010      	b.n	8009262 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	22ff      	movs	r2, #255	@ 0xff
 8009246:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009248:	2300      	movs	r3, #0
 800924a:	73fb      	strb	r3, [r7, #15]
 800924c:	e001      	b.n	8009252 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800924e:	2300      	movs	r3, #0
 8009250:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d103      	bne.n	8009260 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009260:	7bfb      	ldrb	r3, [r7, #15]
}
 8009262:	4618      	mov	r0, r3
 8009264:	3710      	adds	r7, #16
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	40002800 	.word	0x40002800

08009270 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	68da      	ldr	r2, [r3, #12]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009286:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009288:	f7fb f8e4 	bl	8004454 <HAL_GetTick>
 800928c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800928e:	e009      	b.n	80092a4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009290:	f7fb f8e0 	bl	8004454 <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800929e:	d901      	bls.n	80092a4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	e007      	b.n	80092b4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d0ee      	beq.n	8009290 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b084      	sub	sp, #16
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	68db      	ldr	r3, [r3, #12]
 80092ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d119      	bne.n	8009306 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f04f 32ff 	mov.w	r2, #4294967295
 80092da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80092dc:	f7fb f8ba 	bl	8004454 <HAL_GetTick>
 80092e0:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80092e2:	e009      	b.n	80092f8 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80092e4:	f7fb f8b6 	bl	8004454 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092f2:	d901      	bls.n	80092f8 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e007      	b.n	8009308 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0ee      	beq.n	80092e4 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009326:	2302      	movs	r3, #2
 8009328:	e0a8      	b.n	800947c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2201      	movs	r2, #1
 800932e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2202      	movs	r2, #2
 8009336:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	22ca      	movs	r2, #202	@ 0xca
 8009340:	625a      	str	r2, [r3, #36]	@ 0x24
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2253      	movs	r2, #83	@ 0x53
 8009348:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	689b      	ldr	r3, [r3, #8]
 8009350:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009354:	2b00      	cmp	r3, #0
 8009356:	d020      	beq.n	800939a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009358:	f7fb f87c 	bl	8004454 <HAL_GetTick>
 800935c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800935e:	e015      	b.n	800938c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009360:	f7fb f878 	bl	8004454 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800936e:	d90d      	bls.n	800938c <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	22ff      	movs	r2, #255	@ 0xff
 8009376:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2203      	movs	r2, #3
 800937c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e077      	b.n	800947c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	2b00      	cmp	r3, #0
 8009398:	d1e2      	bne.n	8009360 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689a      	ldr	r2, [r3, #8]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80093a8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80093ba:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80093bc:	f7fb f84a 	bl	8004454 <HAL_GetTick>
 80093c0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80093c2:	e015      	b.n	80093f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093c4:	f7fb f846 	bl	8004454 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093d2:	d90d      	bls.n	80093f0 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	22ff      	movs	r2, #255	@ 0xff
 80093da:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2203      	movs	r2, #3
 80093e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e045      	b.n	800947c <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f003 0304 	and.w	r3, r3, #4
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d0e2      	beq.n	80093c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	68ba      	ldr	r2, [r7, #8]
 8009404:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	689a      	ldr	r2, [r3, #8]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f022 0207 	bic.w	r2, r2, #7
 8009414:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6899      	ldr	r1, [r3, #8]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	430a      	orrs	r2, r1
 8009424:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009426:	4b17      	ldr	r3, [pc, #92]	@ (8009484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009428:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800942c:	4a15      	ldr	r2, [pc, #84]	@ (8009484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800942e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009432:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009436:	4b13      	ldr	r3, [pc, #76]	@ (8009484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a12      	ldr	r2, [pc, #72]	@ (8009484 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800943c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009440:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009450:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	689a      	ldr	r2, [r3, #8]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009460:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	22ff      	movs	r2, #255	@ 0xff
 8009468:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2201      	movs	r2, #1
 800946e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2200      	movs	r2, #0
 8009476:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3718      	adds	r7, #24
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	58000800 	.word	0x58000800

08009488 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e095      	b.n	80095c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d108      	bne.n	80094b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094aa:	d009      	beq.n	80094c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	61da      	str	r2, [r3, #28]
 80094b2:	e005      	b.n	80094c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2200      	movs	r2, #0
 80094be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fa fd2c 	bl	8003f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80094f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009500:	d902      	bls.n	8009508 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009502:	2300      	movs	r3, #0
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	e002      	b.n	800950e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009508:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800950c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	68db      	ldr	r3, [r3, #12]
 8009512:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009516:	d007      	beq.n	8009528 <HAL_SPI_Init+0xa0>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009520:	d002      	beq.n	8009528 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2200      	movs	r2, #0
 8009526:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009538:	431a      	orrs	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	431a      	orrs	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	699b      	ldr	r3, [r3, #24]
 8009552:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a1b      	ldr	r3, [r3, #32]
 8009566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800956a:	ea42 0103 	orr.w	r1, r2, r3
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009572:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	0c1b      	lsrs	r3, r3, #16
 8009584:	f003 0204 	and.w	r2, r3, #4
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800958c:	f003 0310 	and.w	r3, r3, #16
 8009590:	431a      	orrs	r2, r3
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009596:	f003 0308 	and.w	r3, r3, #8
 800959a:	431a      	orrs	r2, r3
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80095a4:	ea42 0103 	orr.w	r1, r2, r3
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2201      	movs	r2, #1
 80095c0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80095c4:	2300      	movs	r3, #0
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b088      	sub	sp, #32
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	60f8      	str	r0, [r7, #12]
 80095d6:	60b9      	str	r1, [r7, #8]
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <HAL_SPI_Transmit+0x22>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e15f      	b.n	80098b0 <HAL_SPI_Transmit+0x2e2>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095f8:	f7fa ff2c 	bl	8004454 <HAL_GetTick>
 80095fc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80095fe:	88fb      	ldrh	r3, [r7, #6]
 8009600:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009608:	b2db      	uxtb	r3, r3
 800960a:	2b01      	cmp	r3, #1
 800960c:	d002      	beq.n	8009614 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800960e:	2302      	movs	r3, #2
 8009610:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009612:	e148      	b.n	80098a6 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <HAL_SPI_Transmit+0x52>
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009620:	2301      	movs	r3, #1
 8009622:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009624:	e13f      	b.n	80098a6 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2203      	movs	r2, #3
 800962a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2200      	movs	r2, #0
 8009632:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	68ba      	ldr	r2, [r7, #8]
 8009638:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	88fa      	ldrh	r2, [r7, #6]
 800963e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	88fa      	ldrh	r2, [r7, #6]
 8009644:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	2200      	movs	r2, #0
 800964a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009670:	d10f      	bne.n	8009692 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009680:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009690:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800969c:	2b40      	cmp	r3, #64	@ 0x40
 800969e:	d007      	beq.n	80096b0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80096ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	68db      	ldr	r3, [r3, #12]
 80096b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80096b8:	d94f      	bls.n	800975a <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d002      	beq.n	80096c8 <HAL_SPI_Transmit+0xfa>
 80096c2:	8afb      	ldrh	r3, [r7, #22]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d142      	bne.n	800974e <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096cc:	881a      	ldrh	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096d8:	1c9a      	adds	r2, r3, #2
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	3b01      	subs	r3, #1
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80096ec:	e02f      	b.n	800974e <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d112      	bne.n	8009722 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009700:	881a      	ldrh	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800970c:	1c9a      	adds	r2, r3, #2
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009720:	e015      	b.n	800974e <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009722:	f7fa fe97 	bl	8004454 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d803      	bhi.n	800973a <HAL_SPI_Transmit+0x16c>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009738:	d102      	bne.n	8009740 <HAL_SPI_Transmit+0x172>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d106      	bne.n	800974e <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009740:	2303      	movs	r3, #3
 8009742:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2201      	movs	r2, #1
 8009748:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800974c:	e0ab      	b.n	80098a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009752:	b29b      	uxth	r3, r3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1ca      	bne.n	80096ee <HAL_SPI_Transmit+0x120>
 8009758:	e080      	b.n	800985c <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <HAL_SPI_Transmit+0x19a>
 8009762:	8afb      	ldrh	r3, [r7, #22]
 8009764:	2b01      	cmp	r3, #1
 8009766:	d174      	bne.n	8009852 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800976c:	b29b      	uxth	r3, r3
 800976e:	2b01      	cmp	r3, #1
 8009770:	d912      	bls.n	8009798 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009776:	881a      	ldrh	r2, [r3, #0]
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009782:	1c9a      	adds	r2, r3, #2
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800978c:	b29b      	uxth	r3, r3
 800978e:	3b02      	subs	r3, #2
 8009790:	b29a      	uxth	r2, r3
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009796:	e05c      	b.n	8009852 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	7812      	ldrb	r2, [r2, #0]
 80097a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097aa:	1c5a      	adds	r2, r3, #1
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	3b01      	subs	r3, #1
 80097b8:	b29a      	uxth	r2, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80097be:	e048      	b.n	8009852 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	f003 0302 	and.w	r3, r3, #2
 80097ca:	2b02      	cmp	r3, #2
 80097cc:	d12b      	bne.n	8009826 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d912      	bls.n	80097fe <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097dc:	881a      	ldrh	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e8:	1c9a      	adds	r2, r3, #2
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	3b02      	subs	r3, #2
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097fc:	e029      	b.n	8009852 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	330c      	adds	r3, #12
 8009808:	7812      	ldrb	r2, [r2, #0]
 800980a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009810:	1c5a      	adds	r2, r3, #1
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800981a:	b29b      	uxth	r3, r3
 800981c:	3b01      	subs	r3, #1
 800981e:	b29a      	uxth	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009824:	e015      	b.n	8009852 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009826:	f7fa fe15 	bl	8004454 <HAL_GetTick>
 800982a:	4602      	mov	r2, r0
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	1ad3      	subs	r3, r2, r3
 8009830:	683a      	ldr	r2, [r7, #0]
 8009832:	429a      	cmp	r2, r3
 8009834:	d803      	bhi.n	800983e <HAL_SPI_Transmit+0x270>
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800983c:	d102      	bne.n	8009844 <HAL_SPI_Transmit+0x276>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d106      	bne.n	8009852 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009844:	2303      	movs	r3, #3
 8009846:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009850:	e029      	b.n	80098a6 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009856:	b29b      	uxth	r3, r3
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1b1      	bne.n	80097c0 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800985c:	69ba      	ldr	r2, [r7, #24]
 800985e:	6839      	ldr	r1, [r7, #0]
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 fb69 	bl	8009f38 <SPI_EndRxTxTransaction>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d002      	beq.n	8009872 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2220      	movs	r2, #32
 8009870:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800987a:	2300      	movs	r3, #0
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	68db      	ldr	r3, [r3, #12]
 8009884:	613b      	str	r3, [r7, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	613b      	str	r3, [r7, #16]
 800988e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8009898:	2301      	movs	r3, #1
 800989a:	77fb      	strb	r3, [r7, #31]
 800989c:	e003      	b.n	80098a6 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80098ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3720      	adds	r7, #32
 80098b4:	46bd      	mov	sp, r7
 80098b6:	bd80      	pop	{r7, pc}

080098b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b08a      	sub	sp, #40	@ 0x28
 80098bc:	af00      	add	r7, sp, #0
 80098be:	60f8      	str	r0, [r7, #12]
 80098c0:	60b9      	str	r1, [r7, #8]
 80098c2:	607a      	str	r2, [r7, #4]
 80098c4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098c6:	2301      	movs	r3, #1
 80098c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d101      	bne.n	80098de <HAL_SPI_TransmitReceive+0x26>
 80098da:	2302      	movs	r3, #2
 80098dc:	e20a      	b.n	8009cf4 <HAL_SPI_TransmitReceive+0x43c>
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80098e6:	f7fa fdb5 	bl	8004454 <HAL_GetTick>
 80098ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80098f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80098fa:	887b      	ldrh	r3, [r7, #2]
 80098fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80098fe:	887b      	ldrh	r3, [r7, #2]
 8009900:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009902:	7efb      	ldrb	r3, [r7, #27]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d00e      	beq.n	8009926 <HAL_SPI_TransmitReceive+0x6e>
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800990e:	d106      	bne.n	800991e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d102      	bne.n	800991e <HAL_SPI_TransmitReceive+0x66>
 8009918:	7efb      	ldrb	r3, [r7, #27]
 800991a:	2b04      	cmp	r3, #4
 800991c:	d003      	beq.n	8009926 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800991e:	2302      	movs	r3, #2
 8009920:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009924:	e1e0      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009926:	68bb      	ldr	r3, [r7, #8]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <HAL_SPI_TransmitReceive+0x80>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d002      	beq.n	8009938 <HAL_SPI_TransmitReceive+0x80>
 8009932:	887b      	ldrh	r3, [r7, #2]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d103      	bne.n	8009940 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009938:	2301      	movs	r3, #1
 800993a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800993e:	e1d3      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b04      	cmp	r3, #4
 800994a:	d003      	beq.n	8009954 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2205      	movs	r2, #5
 8009950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2200      	movs	r2, #0
 8009958:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	887a      	ldrh	r2, [r7, #2]
 8009964:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	887a      	ldrh	r2, [r7, #2]
 800996c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	68ba      	ldr	r2, [r7, #8]
 8009974:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	887a      	ldrh	r2, [r7, #2]
 800997a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	887a      	ldrh	r2, [r7, #2]
 8009980:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	2200      	movs	r2, #0
 8009986:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009996:	d802      	bhi.n	800999e <HAL_SPI_TransmitReceive+0xe6>
 8009998:	8a3b      	ldrh	r3, [r7, #16]
 800999a:	2b01      	cmp	r3, #1
 800999c:	d908      	bls.n	80099b0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80099ac:	605a      	str	r2, [r3, #4]
 80099ae:	e007      	b.n	80099c0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80099be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099ca:	2b40      	cmp	r3, #64	@ 0x40
 80099cc:	d007      	beq.n	80099de <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80099dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80099e6:	f240 8081 	bls.w	8009aec <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d002      	beq.n	80099f8 <HAL_SPI_TransmitReceive+0x140>
 80099f2:	8a7b      	ldrh	r3, [r7, #18]
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d16d      	bne.n	8009ad4 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099fc:	881a      	ldrh	r2, [r3, #0]
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a08:	1c9a      	adds	r2, r3, #2
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	3b01      	subs	r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a1c:	e05a      	b.n	8009ad4 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	d11b      	bne.n	8009a64 <HAL_SPI_TransmitReceive+0x1ac>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d016      	beq.n	8009a64 <HAL_SPI_TransmitReceive+0x1ac>
 8009a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d113      	bne.n	8009a64 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a40:	881a      	ldrh	r2, [r3, #0]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a4c:	1c9a      	adds	r2, r3, #2
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d11c      	bne.n	8009aac <HAL_SPI_TransmitReceive+0x1f4>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d016      	beq.n	8009aac <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68da      	ldr	r2, [r3, #12]
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a88:	b292      	uxth	r2, r2
 8009a8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a90:	1c9a      	adds	r2, r3, #2
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	3b01      	subs	r3, #1
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009aa8:	2301      	movs	r3, #1
 8009aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009aac:	f7fa fcd2 	bl	8004454 <HAL_GetTick>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	1ad3      	subs	r3, r2, r3
 8009ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d80b      	bhi.n	8009ad4 <HAL_SPI_TransmitReceive+0x21c>
 8009abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac2:	d007      	beq.n	8009ad4 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009ad2:	e109      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d19f      	bne.n	8009a1e <HAL_SPI_TransmitReceive+0x166>
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ae4:	b29b      	uxth	r3, r3
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d199      	bne.n	8009a1e <HAL_SPI_TransmitReceive+0x166>
 8009aea:	e0e3      	b.n	8009cb4 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <HAL_SPI_TransmitReceive+0x244>
 8009af4:	8a7b      	ldrh	r3, [r7, #18]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	f040 80cf 	bne.w	8009c9a <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d912      	bls.n	8009b2c <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b0a:	881a      	ldrh	r2, [r3, #0]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b16:	1c9a      	adds	r2, r3, #2
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	3b02      	subs	r3, #2
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009b2a:	e0b6      	b.n	8009c9a <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	330c      	adds	r3, #12
 8009b36:	7812      	ldrb	r2, [r2, #0]
 8009b38:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b3e:	1c5a      	adds	r2, r3, #1
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b52:	e0a2      	b.n	8009c9a <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	f003 0302 	and.w	r3, r3, #2
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d134      	bne.n	8009bcc <HAL_SPI_TransmitReceive+0x314>
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b66:	b29b      	uxth	r3, r3
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d02f      	beq.n	8009bcc <HAL_SPI_TransmitReceive+0x314>
 8009b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d12c      	bne.n	8009bcc <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d912      	bls.n	8009ba2 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b80:	881a      	ldrh	r2, [r3, #0]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b8c:	1c9a      	adds	r2, r3, #2
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	3b02      	subs	r3, #2
 8009b9a:	b29a      	uxth	r2, r3
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009ba0:	e012      	b.n	8009bc8 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	330c      	adds	r3, #12
 8009bac:	7812      	ldrb	r2, [r2, #0]
 8009bae:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb4:	1c5a      	adds	r2, r3, #1
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	3b01      	subs	r3, #1
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d148      	bne.n	8009c6c <HAL_SPI_TransmitReceive+0x3b4>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d042      	beq.n	8009c6c <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d923      	bls.n	8009c3a <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bfc:	b292      	uxth	r2, r2
 8009bfe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c04:	1c9a      	adds	r2, r3, #2
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b02      	subs	r3, #2
 8009c14:	b29a      	uxth	r2, r3
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d81f      	bhi.n	8009c68 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	e016      	b.n	8009c68 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f103 020c 	add.w	r2, r3, #12
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c46:	7812      	ldrb	r2, [r2, #0]
 8009c48:	b2d2      	uxtb	r2, r2
 8009c4a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	b29a      	uxth	r2, r3
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009c6c:	f7fa fbf2 	bl	8004454 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d803      	bhi.n	8009c84 <HAL_SPI_TransmitReceive+0x3cc>
 8009c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c82:	d102      	bne.n	8009c8a <HAL_SPI_TransmitReceive+0x3d2>
 8009c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d107      	bne.n	8009c9a <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009c98:	e026      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c9e:	b29b      	uxth	r3, r3
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f47f af57 	bne.w	8009b54 <HAL_SPI_TransmitReceive+0x29c>
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cac:	b29b      	uxth	r3, r3
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	f47f af50 	bne.w	8009b54 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f000 f93d 	bl	8009f38 <SPI_EndRxTxTransaction>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d005      	beq.n	8009cd0 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2220      	movs	r2, #32
 8009cce:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cde:	e003      	b.n	8009ce8 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009cf0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3728      	adds	r7, #40	@ 0x28
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b088      	sub	sp, #32
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	603b      	str	r3, [r7, #0]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009d0c:	f7fa fba2 	bl	8004454 <HAL_GetTick>
 8009d10:	4602      	mov	r2, r0
 8009d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d14:	1a9b      	subs	r3, r3, r2
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	4413      	add	r3, r2
 8009d1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009d1c:	f7fa fb9a 	bl	8004454 <HAL_GetTick>
 8009d20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009d22:	4b39      	ldr	r3, [pc, #228]	@ (8009e08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	015b      	lsls	r3, r3, #5
 8009d28:	0d1b      	lsrs	r3, r3, #20
 8009d2a:	69fa      	ldr	r2, [r7, #28]
 8009d2c:	fb02 f303 	mul.w	r3, r2, r3
 8009d30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009d32:	e054      	b.n	8009dde <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3a:	d050      	beq.n	8009dde <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009d3c:	f7fa fb8a 	bl	8004454 <HAL_GetTick>
 8009d40:	4602      	mov	r2, r0
 8009d42:	69bb      	ldr	r3, [r7, #24]
 8009d44:	1ad3      	subs	r3, r2, r3
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	429a      	cmp	r2, r3
 8009d4a:	d902      	bls.n	8009d52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d13d      	bne.n	8009dce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009d60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d6a:	d111      	bne.n	8009d90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	689b      	ldr	r3, [r3, #8]
 8009d70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009d74:	d004      	beq.n	8009d80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	689b      	ldr	r3, [r3, #8]
 8009d7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d7e:	d107      	bne.n	8009d90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	681a      	ldr	r2, [r3, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009d98:	d10f      	bne.n	8009dba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009da8:	601a      	str	r2, [r3, #0]
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681a      	ldr	r2, [r3, #0]
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009db8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2201      	movs	r2, #1
 8009dbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e017      	b.n	8009dfe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d101      	bne.n	8009dd8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	4013      	ands	r3, r2
 8009de8:	68ba      	ldr	r2, [r7, #8]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	bf0c      	ite	eq
 8009dee:	2301      	moveq	r3, #1
 8009df0:	2300      	movne	r3, #0
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	461a      	mov	r2, r3
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d19b      	bne.n	8009d34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3720      	adds	r7, #32
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	2000000c 	.word	0x2000000c

08009e0c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b08a      	sub	sp, #40	@ 0x28
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009e1e:	f7fa fb19 	bl	8004454 <HAL_GetTick>
 8009e22:	4602      	mov	r2, r0
 8009e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e26:	1a9b      	subs	r3, r3, r2
 8009e28:	683a      	ldr	r2, [r7, #0]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009e2e:	f7fa fb11 	bl	8004454 <HAL_GetTick>
 8009e32:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	330c      	adds	r3, #12
 8009e3a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8009f34 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	4613      	mov	r3, r2
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	00da      	lsls	r2, r3, #3
 8009e48:	1ad3      	subs	r3, r2, r3
 8009e4a:	0d1b      	lsrs	r3, r3, #20
 8009e4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e4e:	fb02 f303 	mul.w	r3, r2, r3
 8009e52:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009e54:	e060      	b.n	8009f18 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009e5c:	d107      	bne.n	8009e6e <SPI_WaitFifoStateUntilTimeout+0x62>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d104      	bne.n	8009e6e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	b2db      	uxtb	r3, r3
 8009e6a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009e6c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e74:	d050      	beq.n	8009f18 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e76:	f7fa faed 	bl	8004454 <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	6a3b      	ldr	r3, [r7, #32]
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d902      	bls.n	8009e8c <SPI_WaitFifoStateUntilTimeout+0x80>
 8009e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d13d      	bne.n	8009f08 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685a      	ldr	r2, [r3, #4]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ea4:	d111      	bne.n	8009eca <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009eae:	d004      	beq.n	8009eba <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009eb8:	d107      	bne.n	8009eca <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ec8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ece:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ed2:	d10f      	bne.n	8009ef4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	681a      	ldr	r2, [r3, #0]
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009ee2:	601a      	str	r2, [r3, #0]
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009ef2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009f04:	2303      	movs	r3, #3
 8009f06:	e010      	b.n	8009f2a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009f08:	69bb      	ldr	r3, [r7, #24]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009f12:	69bb      	ldr	r3, [r7, #24]
 8009f14:	3b01      	subs	r3, #1
 8009f16:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	689a      	ldr	r2, [r3, #8]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	4013      	ands	r3, r2
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d196      	bne.n	8009e56 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009f28:	2300      	movs	r3, #0
}
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	3728      	adds	r7, #40	@ 0x28
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	2000000c 	.word	0x2000000c

08009f38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af02      	add	r7, sp, #8
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	9300      	str	r3, [sp, #0]
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f7ff ff5b 	bl	8009e0c <SPI_WaitFifoStateUntilTimeout>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d007      	beq.n	8009f6c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f60:	f043 0220 	orr.w	r2, r3, #32
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e027      	b.n	8009fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	9300      	str	r3, [sp, #0]
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	2200      	movs	r2, #0
 8009f74:	2180      	movs	r1, #128	@ 0x80
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f7ff fec0 	bl	8009cfc <SPI_WaitFlagStateUntilTimeout>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d007      	beq.n	8009f92 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f86:	f043 0220 	orr.w	r2, r3, #32
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009f8e:	2303      	movs	r3, #3
 8009f90:	e014      	b.n	8009fbc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	9300      	str	r3, [sp, #0]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f7ff ff34 	bl	8009e0c <SPI_WaitFifoStateUntilTimeout>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d007      	beq.n	8009fba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fae:	f043 0220 	orr.w	r2, r3, #32
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e000      	b.n	8009fbc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b082      	sub	sp, #8
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e049      	b.n	800a06a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009fdc:	b2db      	uxtb	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f7f9 ffd4 	bl	8003f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681a      	ldr	r2, [r3, #0]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	3304      	adds	r3, #4
 800a000:	4619      	mov	r1, r3
 800a002:	4610      	mov	r0, r2
 800a004:	f000 fa7c 	bl	800a500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2201      	movs	r2, #1
 800a014:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2201      	movs	r2, #1
 800a03c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a068:	2300      	movs	r3, #0
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3708      	adds	r7, #8
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a074:	b480      	push	{r7}
 800a076:	b085      	sub	sp, #20
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b01      	cmp	r3, #1
 800a086:	d001      	beq.n	800a08c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e036      	b.n	800a0fa <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2202      	movs	r2, #2
 800a090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68da      	ldr	r2, [r3, #12]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f042 0201 	orr.w	r2, r2, #1
 800a0a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a17      	ldr	r2, [pc, #92]	@ (800a108 <HAL_TIM_Base_Start_IT+0x94>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d004      	beq.n	800a0b8 <HAL_TIM_Base_Start_IT+0x44>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a0b6:	d115      	bne.n	800a0e4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689a      	ldr	r2, [r3, #8]
 800a0be:	4b13      	ldr	r3, [pc, #76]	@ (800a10c <HAL_TIM_Base_Start_IT+0x98>)
 800a0c0:	4013      	ands	r3, r2
 800a0c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b06      	cmp	r3, #6
 800a0c8:	d015      	beq.n	800a0f6 <HAL_TIM_Base_Start_IT+0x82>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a0d0:	d011      	beq.n	800a0f6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f042 0201 	orr.w	r2, r2, #1
 800a0e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e2:	e008      	b.n	800a0f6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0201 	orr.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]
 800a0f4:	e000      	b.n	800a0f8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	40012c00 	.word	0x40012c00
 800a10c:	00010007 	.word	0x00010007

0800a110 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	f003 0302 	and.w	r3, r3, #2
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d020      	beq.n	800a174 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f003 0302 	and.w	r3, r3, #2
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01b      	beq.n	800a174 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f06f 0202 	mvn.w	r2, #2
 800a144:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	699b      	ldr	r3, [r3, #24]
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d003      	beq.n	800a162 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f9b2 	bl	800a4c4 <HAL_TIM_IC_CaptureCallback>
 800a160:	e005      	b.n	800a16e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 f9a4 	bl	800a4b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f9b5 	bl	800a4d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	f003 0304 	and.w	r3, r3, #4
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d020      	beq.n	800a1c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f003 0304 	and.w	r3, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	d01b      	beq.n	800a1c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f06f 0204 	mvn.w	r2, #4
 800a190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2202      	movs	r2, #2
 800a196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	699b      	ldr	r3, [r3, #24]
 800a19e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d003      	beq.n	800a1ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1a6:	6878      	ldr	r0, [r7, #4]
 800a1a8:	f000 f98c 	bl	800a4c4 <HAL_TIM_IC_CaptureCallback>
 800a1ac:	e005      	b.n	800a1ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 f97e 	bl	800a4b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f98f 	bl	800a4d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	f003 0308 	and.w	r3, r3, #8
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d020      	beq.n	800a20c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f003 0308 	and.w	r3, r3, #8
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d01b      	beq.n	800a20c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f06f 0208 	mvn.w	r2, #8
 800a1dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2204      	movs	r2, #4
 800a1e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	69db      	ldr	r3, [r3, #28]
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 f966 	bl	800a4c4 <HAL_TIM_IC_CaptureCallback>
 800a1f8:	e005      	b.n	800a206 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f958 	bl	800a4b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f969 	bl	800a4d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f003 0310 	and.w	r3, r3, #16
 800a212:	2b00      	cmp	r3, #0
 800a214:	d020      	beq.n	800a258 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	f003 0310 	and.w	r3, r3, #16
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d01b      	beq.n	800a258 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f06f 0210 	mvn.w	r2, #16
 800a228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2208      	movs	r2, #8
 800a22e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69db      	ldr	r3, [r3, #28]
 800a236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 f940 	bl	800a4c4 <HAL_TIM_IC_CaptureCallback>
 800a244:	e005      	b.n	800a252 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f000 f932 	bl	800a4b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 f943 	bl	800a4d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	f003 0301 	and.w	r3, r3, #1
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d00c      	beq.n	800a27c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	f003 0301 	and.w	r3, r3, #1
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d007      	beq.n	800a27c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f06f 0201 	mvn.w	r2, #1
 800a274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7fa f824 	bl	80042c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a282:	2b00      	cmp	r3, #0
 800a284:	d104      	bne.n	800a290 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00c      	beq.n	800a2aa <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a296:	2b00      	cmp	r3, #0
 800a298:	d007      	beq.n	800a2aa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 faa1 	bl	800a7ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00c      	beq.n	800a2ce <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d007      	beq.n	800a2ce <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a2c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa99 	bl	800a800 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d00c      	beq.n	800a2f2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d007      	beq.n	800a2f2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 f8fd 	bl	800a4ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	f003 0320 	and.w	r3, r3, #32
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d00c      	beq.n	800a316 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f003 0320 	and.w	r3, r3, #32
 800a302:	2b00      	cmp	r3, #0
 800a304:	d007      	beq.n	800a316 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f06f 0220 	mvn.w	r2, #32
 800a30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fa61 	bl	800a7d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a316:	bf00      	nop
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <HAL_TIM_ConfigClockSource+0x1c>
 800a336:	2302      	movs	r3, #2
 800a338:	e0b6      	b.n	800a4a8 <HAL_TIM_ConfigClockSource+0x18a>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2202      	movs	r2, #2
 800a346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a358:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a35c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a364:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a376:	d03e      	beq.n	800a3f6 <HAL_TIM_ConfigClockSource+0xd8>
 800a378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a37c:	f200 8087 	bhi.w	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a384:	f000 8086 	beq.w	800a494 <HAL_TIM_ConfigClockSource+0x176>
 800a388:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a38c:	d87f      	bhi.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a38e:	2b70      	cmp	r3, #112	@ 0x70
 800a390:	d01a      	beq.n	800a3c8 <HAL_TIM_ConfigClockSource+0xaa>
 800a392:	2b70      	cmp	r3, #112	@ 0x70
 800a394:	d87b      	bhi.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a396:	2b60      	cmp	r3, #96	@ 0x60
 800a398:	d050      	beq.n	800a43c <HAL_TIM_ConfigClockSource+0x11e>
 800a39a:	2b60      	cmp	r3, #96	@ 0x60
 800a39c:	d877      	bhi.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a39e:	2b50      	cmp	r3, #80	@ 0x50
 800a3a0:	d03c      	beq.n	800a41c <HAL_TIM_ConfigClockSource+0xfe>
 800a3a2:	2b50      	cmp	r3, #80	@ 0x50
 800a3a4:	d873      	bhi.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a3a6:	2b40      	cmp	r3, #64	@ 0x40
 800a3a8:	d058      	beq.n	800a45c <HAL_TIM_ConfigClockSource+0x13e>
 800a3aa:	2b40      	cmp	r3, #64	@ 0x40
 800a3ac:	d86f      	bhi.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a3ae:	2b30      	cmp	r3, #48	@ 0x30
 800a3b0:	d064      	beq.n	800a47c <HAL_TIM_ConfigClockSource+0x15e>
 800a3b2:	2b30      	cmp	r3, #48	@ 0x30
 800a3b4:	d86b      	bhi.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a3b6:	2b20      	cmp	r3, #32
 800a3b8:	d060      	beq.n	800a47c <HAL_TIM_ConfigClockSource+0x15e>
 800a3ba:	2b20      	cmp	r3, #32
 800a3bc:	d867      	bhi.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d05c      	beq.n	800a47c <HAL_TIM_ConfigClockSource+0x15e>
 800a3c2:	2b10      	cmp	r3, #16
 800a3c4:	d05a      	beq.n	800a47c <HAL_TIM_ConfigClockSource+0x15e>
 800a3c6:	e062      	b.n	800a48e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a3d8:	f000 f97e 	bl	800a6d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a3ea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	68ba      	ldr	r2, [r7, #8]
 800a3f2:	609a      	str	r2, [r3, #8]
      break;
 800a3f4:	e04f      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a406:	f000 f967 	bl	800a6d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689a      	ldr	r2, [r3, #8]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a418:	609a      	str	r2, [r3, #8]
      break;
 800a41a:	e03c      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a428:	461a      	mov	r2, r3
 800a42a:	f000 f8d9 	bl	800a5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	2150      	movs	r1, #80	@ 0x50
 800a434:	4618      	mov	r0, r3
 800a436:	f000 f932 	bl	800a69e <TIM_ITRx_SetConfig>
      break;
 800a43a:	e02c      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a448:	461a      	mov	r2, r3
 800a44a:	f000 f8f8 	bl	800a63e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2160      	movs	r1, #96	@ 0x60
 800a454:	4618      	mov	r0, r3
 800a456:	f000 f922 	bl	800a69e <TIM_ITRx_SetConfig>
      break;
 800a45a:	e01c      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a468:	461a      	mov	r2, r3
 800a46a:	f000 f8b9 	bl	800a5e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2140      	movs	r1, #64	@ 0x40
 800a474:	4618      	mov	r0, r3
 800a476:	f000 f912 	bl	800a69e <TIM_ITRx_SetConfig>
      break;
 800a47a:	e00c      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4619      	mov	r1, r3
 800a486:	4610      	mov	r0, r2
 800a488:	f000 f909 	bl	800a69e <TIM_ITRx_SetConfig>
      break;
 800a48c:	e003      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	73fb      	strb	r3, [r7, #15]
      break;
 800a492:	e000      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a494:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2201      	movs	r2, #1
 800a49a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3710      	adds	r7, #16
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4b8:	bf00      	nop
 800a4ba:	370c      	adds	r7, #12
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b083      	sub	sp, #12
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4f4:	bf00      	nop
 800a4f6:	370c      	adds	r7, #12
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a500:	b480      	push	{r7}
 800a502:	b085      	sub	sp, #20
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
 800a508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	4a30      	ldr	r2, [pc, #192]	@ (800a5d4 <TIM_Base_SetConfig+0xd4>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d003      	beq.n	800a520 <TIM_Base_SetConfig+0x20>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a51e:	d108      	bne.n	800a532 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a526:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	4313      	orrs	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4a27      	ldr	r2, [pc, #156]	@ (800a5d4 <TIM_Base_SetConfig+0xd4>)
 800a536:	4293      	cmp	r3, r2
 800a538:	d00b      	beq.n	800a552 <TIM_Base_SetConfig+0x52>
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a540:	d007      	beq.n	800a552 <TIM_Base_SetConfig+0x52>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	4a24      	ldr	r2, [pc, #144]	@ (800a5d8 <TIM_Base_SetConfig+0xd8>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d003      	beq.n	800a552 <TIM_Base_SetConfig+0x52>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	4a23      	ldr	r2, [pc, #140]	@ (800a5dc <TIM_Base_SetConfig+0xdc>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d108      	bne.n	800a564 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	68fa      	ldr	r2, [r7, #12]
 800a560:	4313      	orrs	r3, r2
 800a562:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	695b      	ldr	r3, [r3, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	681a      	ldr	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a12      	ldr	r2, [pc, #72]	@ (800a5d4 <TIM_Base_SetConfig+0xd4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d007      	beq.n	800a5a0 <TIM_Base_SetConfig+0xa0>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a11      	ldr	r2, [pc, #68]	@ (800a5d8 <TIM_Base_SetConfig+0xd8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d003      	beq.n	800a5a0 <TIM_Base_SetConfig+0xa0>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a10      	ldr	r2, [pc, #64]	@ (800a5dc <TIM_Base_SetConfig+0xdc>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d103      	bne.n	800a5a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	691a      	ldr	r2, [r3, #16]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2201      	movs	r2, #1
 800a5ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f003 0301 	and.w	r3, r3, #1
 800a5b6:	2b01      	cmp	r3, #1
 800a5b8:	d105      	bne.n	800a5c6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	f023 0201 	bic.w	r2, r3, #1
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	611a      	str	r2, [r3, #16]
  }
}
 800a5c6:	bf00      	nop
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr
 800a5d2:	bf00      	nop
 800a5d4:	40012c00 	.word	0x40012c00
 800a5d8:	40014400 	.word	0x40014400
 800a5dc:	40014800 	.word	0x40014800

0800a5e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6a1b      	ldr	r3, [r3, #32]
 800a5f6:	f023 0201 	bic.w	r2, r3, #1
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	699b      	ldr	r3, [r3, #24]
 800a602:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a60a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	4313      	orrs	r3, r2
 800a614:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f023 030a 	bic.w	r3, r3, #10
 800a61c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a61e:	697a      	ldr	r2, [r7, #20]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4313      	orrs	r3, r2
 800a624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	693a      	ldr	r2, [r7, #16]
 800a62a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	697a      	ldr	r2, [r7, #20]
 800a630:	621a      	str	r2, [r3, #32]
}
 800a632:	bf00      	nop
 800a634:	371c      	adds	r7, #28
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a63e:	b480      	push	{r7}
 800a640:	b087      	sub	sp, #28
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	6a1b      	ldr	r3, [r3, #32]
 800a64e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6a1b      	ldr	r3, [r3, #32]
 800a654:	f023 0210 	bic.w	r2, r3, #16
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	031b      	lsls	r3, r3, #12
 800a66e:	693a      	ldr	r2, [r7, #16]
 800a670:	4313      	orrs	r3, r2
 800a672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a67a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	011b      	lsls	r3, r3, #4
 800a680:	697a      	ldr	r2, [r7, #20]
 800a682:	4313      	orrs	r3, r2
 800a684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	693a      	ldr	r2, [r7, #16]
 800a68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	697a      	ldr	r2, [r7, #20]
 800a690:	621a      	str	r2, [r3, #32]
}
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b085      	sub	sp, #20
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a6b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	f043 0307 	orr.w	r3, r3, #7
 800a6c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	68fa      	ldr	r2, [r7, #12]
 800a6ca:	609a      	str	r2, [r3, #8]
}
 800a6cc:	bf00      	nop
 800a6ce:	3714      	adds	r7, #20
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b087      	sub	sp, #28
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	689b      	ldr	r3, [r3, #8]
 800a6ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	021a      	lsls	r2, r3, #8
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	431a      	orrs	r2, r3
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	4313      	orrs	r3, r2
 800a704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	609a      	str	r2, [r3, #8]
}
 800a70c:	bf00      	nop
 800a70e:	371c      	adds	r7, #28
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d101      	bne.n	800a730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a72c:	2302      	movs	r3, #2
 800a72e:	e04a      	b.n	800a7c6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2202      	movs	r2, #2
 800a73c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a1f      	ldr	r2, [pc, #124]	@ (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d108      	bne.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a760:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	4313      	orrs	r3, r2
 800a76a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a12      	ldr	r2, [pc, #72]	@ (800a7d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d004      	beq.n	800a79a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a798:	d10c      	bne.n	800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a79a:	68bb      	ldr	r3, [r7, #8]
 800a79c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a7a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	689b      	ldr	r3, [r3, #8]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	68ba      	ldr	r2, [r7, #8]
 800a7b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	40012c00 	.word	0x40012c00

0800a7d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr

0800a800 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
 800a806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a808:	bf00      	nop
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b08a      	sub	sp, #40	@ 0x28
 800a818:	af00      	add	r7, sp, #0
 800a81a:	60f8      	str	r0, [r7, #12]
 800a81c:	60b9      	str	r1, [r7, #8]
 800a81e:	4613      	mov	r3, r2
 800a820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a828:	2b20      	cmp	r3, #32
 800a82a:	d167      	bne.n	800a8fc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d002      	beq.n	800a838 <HAL_UART_Transmit_DMA+0x24>
 800a832:	88fb      	ldrh	r3, [r7, #6]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d101      	bne.n	800a83c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	e060      	b.n	800a8fe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	88fa      	ldrh	r2, [r7, #6]
 800a846:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	88fa      	ldrh	r2, [r7, #6]
 800a84e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2221      	movs	r2, #33	@ 0x21
 800a85e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a866:	2b00      	cmp	r3, #0
 800a868:	d028      	beq.n	800a8bc <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a86e:	4a26      	ldr	r2, [pc, #152]	@ (800a908 <HAL_UART_Transmit_DMA+0xf4>)
 800a870:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a876:	4a25      	ldr	r2, [pc, #148]	@ (800a90c <HAL_UART_Transmit_DMA+0xf8>)
 800a878:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a87e:	4a24      	ldr	r2, [pc, #144]	@ (800a910 <HAL_UART_Transmit_DMA+0xfc>)
 800a880:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a886:	2200      	movs	r2, #0
 800a888:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a892:	4619      	mov	r1, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	3328      	adds	r3, #40	@ 0x28
 800a89a:	461a      	mov	r2, r3
 800a89c:	88fb      	ldrh	r3, [r7, #6]
 800a89e:	f7f9 ff96 	bl	80047ce <HAL_DMA_Start_IT>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d009      	beq.n	800a8bc <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2210      	movs	r2, #16
 800a8ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2220      	movs	r2, #32
 800a8b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	e020      	b.n	800a8fe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2240      	movs	r2, #64	@ 0x40
 800a8c2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3308      	adds	r3, #8
 800a8ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	e853 3f00 	ldrex	r3, [r3]
 800a8d2:	613b      	str	r3, [r7, #16]
   return(result);
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8da:	627b      	str	r3, [r7, #36]	@ 0x24
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	3308      	adds	r3, #8
 800a8e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8e4:	623a      	str	r2, [r7, #32]
 800a8e6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e8:	69f9      	ldr	r1, [r7, #28]
 800a8ea:	6a3a      	ldr	r2, [r7, #32]
 800a8ec:	e841 2300 	strex	r3, r2, [r1]
 800a8f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d1e5      	bne.n	800a8c4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e000      	b.n	800a8fe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a8fc:	2302      	movs	r3, #2
  }
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3728      	adds	r7, #40	@ 0x28
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}
 800a906:	bf00      	nop
 800a908:	0800b0eb 	.word	0x0800b0eb
 800a90c:	0800b185 	.word	0x0800b185
 800a910:	0800b1a1 	.word	0x0800b1a1

0800a914 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b0ba      	sub	sp, #232	@ 0xe8
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a93a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a93e:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a942:	4013      	ands	r3, r2
 800a944:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d11b      	bne.n	800a988 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a954:	f003 0320 	and.w	r3, r3, #32
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d015      	beq.n	800a988 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a95c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	d105      	bne.n	800a974 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a96c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d009      	beq.n	800a988 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a978:	2b00      	cmp	r3, #0
 800a97a:	f000 82e3 	beq.w	800af44 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	4798      	blx	r3
      }
      return;
 800a986:	e2dd      	b.n	800af44 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a988:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f000 8123 	beq.w	800abd8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a992:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a996:	4b8d      	ldr	r3, [pc, #564]	@ (800abcc <HAL_UART_IRQHandler+0x2b8>)
 800a998:	4013      	ands	r3, r2
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d106      	bne.n	800a9ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a99e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a9a2:	4b8b      	ldr	r3, [pc, #556]	@ (800abd0 <HAL_UART_IRQHandler+0x2bc>)
 800a9a4:	4013      	ands	r3, r2
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8116 	beq.w	800abd8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a9ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9b0:	f003 0301 	and.w	r3, r3, #1
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d011      	beq.n	800a9dc <HAL_UART_IRQHandler+0xc8>
 800a9b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d00b      	beq.n	800a9dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a9d2:	f043 0201 	orr.w	r2, r3, #1
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e0:	f003 0302 	and.w	r3, r3, #2
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d011      	beq.n	800aa0c <HAL_UART_IRQHandler+0xf8>
 800a9e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9ec:	f003 0301 	and.w	r3, r3, #1
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d00b      	beq.n	800aa0c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	2202      	movs	r2, #2
 800a9fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa02:	f043 0204 	orr.w	r2, r3, #4
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d011      	beq.n	800aa3c <HAL_UART_IRQHandler+0x128>
 800aa18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	2204      	movs	r2, #4
 800aa2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa32:	f043 0202 	orr.w	r2, r3, #2
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aa3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa40:	f003 0308 	and.w	r3, r3, #8
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d017      	beq.n	800aa78 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa4c:	f003 0320 	and.w	r3, r3, #32
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aa54:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa58:	4b5c      	ldr	r3, [pc, #368]	@ (800abcc <HAL_UART_IRQHandler+0x2b8>)
 800aa5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00b      	beq.n	800aa78 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2208      	movs	r2, #8
 800aa66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa6e:	f043 0208 	orr.w	r2, r3, #8
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d012      	beq.n	800aaaa <HAL_UART_IRQHandler+0x196>
 800aa84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa88:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d00c      	beq.n	800aaaa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aa98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaa0:	f043 0220 	orr.w	r2, r3, #32
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f000 8249 	beq.w	800af48 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaba:	f003 0320 	and.w	r3, r3, #32
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d013      	beq.n	800aaea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d105      	bne.n	800aada <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aad2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d007      	beq.n	800aaea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaf0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aafe:	2b40      	cmp	r3, #64	@ 0x40
 800ab00:	d005      	beq.n	800ab0e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab06:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d054      	beq.n	800abb8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab0e:	6878      	ldr	r0, [r7, #4]
 800ab10:	f000 fa85 	bl	800b01e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab1e:	2b40      	cmp	r3, #64	@ 0x40
 800ab20:	d146      	bne.n	800abb0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800ab38:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ab3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3308      	adds	r3, #8
 800ab4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ab4e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ab52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ab5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ab5e:	e841 2300 	strex	r3, r2, [r1]
 800ab62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ab66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d1d9      	bne.n	800ab22 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d017      	beq.n	800aba8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab7e:	4a15      	ldr	r2, [pc, #84]	@ (800abd4 <HAL_UART_IRQHandler+0x2c0>)
 800ab80:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7f9 fefa 	bl	8004982 <HAL_DMA_Abort_IT>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d019      	beq.n	800abc8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ab9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800aba2:	4610      	mov	r0, r2
 800aba4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aba6:	e00f      	b.n	800abc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 f9e1 	bl	800af70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abae:	e00b      	b.n	800abc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f9dd 	bl	800af70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abb6:	e007      	b.n	800abc8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 f9d9 	bl	800af70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800abc6:	e1bf      	b.n	800af48 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abc8:	bf00      	nop
    return;
 800abca:	e1bd      	b.n	800af48 <HAL_UART_IRQHandler+0x634>
 800abcc:	10000001 	.word	0x10000001
 800abd0:	04000120 	.word	0x04000120
 800abd4:	0800b221 	.word	0x0800b221

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800abdc:	2b01      	cmp	r3, #1
 800abde:	f040 8153 	bne.w	800ae88 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800abe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800abe6:	f003 0310 	and.w	r3, r3, #16
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 814c 	beq.w	800ae88 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800abf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800abf4:	f003 0310 	and.w	r3, r3, #16
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8145 	beq.w	800ae88 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2210      	movs	r2, #16
 800ac04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	689b      	ldr	r3, [r3, #8]
 800ac0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac10:	2b40      	cmp	r3, #64	@ 0x40
 800ac12:	f040 80bb 	bne.w	800ad8c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	685b      	ldr	r3, [r3, #4]
 800ac20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	f000 818f 	beq.w	800af4c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ac34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	f080 8187 	bcs.w	800af4c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f003 0320 	and.w	r3, r3, #32
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f040 8087 	bne.w	800ad6a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ac68:	e853 3f00 	ldrex	r3, [r3]
 800ac6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ac70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ac74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ac78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	461a      	mov	r2, r3
 800ac82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ac86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ac8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ac92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ac96:	e841 2300 	strex	r3, r2, [r1]
 800ac9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ac9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d1da      	bne.n	800ac5c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	3308      	adds	r3, #8
 800acac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800acb0:	e853 3f00 	ldrex	r3, [r3]
 800acb4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800acb6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800acb8:	f023 0301 	bic.w	r3, r3, #1
 800acbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800acca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800acce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800acd2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800acd6:	e841 2300 	strex	r3, r2, [r1]
 800acda:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800acdc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d1e1      	bne.n	800aca6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	3308      	adds	r3, #8
 800ace8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800acec:	e853 3f00 	ldrex	r3, [r3]
 800acf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800acf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800acf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3308      	adds	r3, #8
 800ad02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad0e:	e841 2300 	strex	r3, r2, [r1]
 800ad12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d1e3      	bne.n	800ace2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad30:	e853 3f00 	ldrex	r3, [r3]
 800ad34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad38:	f023 0310 	bic.w	r3, r3, #16
 800ad3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	461a      	mov	r2, r3
 800ad46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ad4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ad4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ad50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ad52:	e841 2300 	strex	r3, r2, [r1]
 800ad56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ad58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d1e4      	bne.n	800ad28 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7f9 fdad 	bl	80048c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad7c:	b29b      	uxth	r3, r3
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	4619      	mov	r1, r3
 800ad84:	6878      	ldr	r0, [r7, #4]
 800ad86:	f000 f8fd 	bl	800af84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ad8a:	e0df      	b.n	800af4c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	1ad3      	subs	r3, r2, r3
 800ad9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 80d1 	beq.w	800af50 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800adae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 80cc 	beq.w	800af50 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adc0:	e853 3f00 	ldrex	r3, [r3]
 800adc4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800adc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800adcc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	461a      	mov	r2, r3
 800add6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800adda:	647b      	str	r3, [r7, #68]	@ 0x44
 800addc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ade0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ade2:	e841 2300 	strex	r3, r2, [r1]
 800ade6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ade8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1e4      	bne.n	800adb8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3308      	adds	r3, #8
 800adf4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	e853 3f00 	ldrex	r3, [r3]
 800adfc:	623b      	str	r3, [r7, #32]
   return(result);
 800adfe:	6a3b      	ldr	r3, [r7, #32]
 800ae00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ae04:	f023 0301 	bic.w	r3, r3, #1
 800ae08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	3308      	adds	r3, #8
 800ae12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae16:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae1e:	e841 2300 	strex	r3, r2, [r1]
 800ae22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d1e1      	bne.n	800adee <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2220      	movs	r2, #32
 800ae2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	e853 3f00 	ldrex	r3, [r3]
 800ae4a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	f023 0310 	bic.w	r3, r3, #16
 800ae52:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ae60:	61fb      	str	r3, [r7, #28]
 800ae62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae64:	69b9      	ldr	r1, [r7, #24]
 800ae66:	69fa      	ldr	r2, [r7, #28]
 800ae68:	e841 2300 	strex	r3, r2, [r1]
 800ae6c:	617b      	str	r3, [r7, #20]
   return(result);
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d1e4      	bne.n	800ae3e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2202      	movs	r2, #2
 800ae78:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ae7a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f87f 	bl	800af84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae86:	e063      	b.n	800af50 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ae88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00e      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x59e>
 800ae94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ae98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d008      	beq.n	800aeb2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f000 f9f9 	bl	800b2a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aeb0:	e051      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aeb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d014      	beq.n	800aee8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d105      	bne.n	800aed6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aeca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aece:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d008      	beq.n	800aee8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d03a      	beq.n	800af54 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	4798      	blx	r3
    }
    return;
 800aee6:	e035      	b.n	800af54 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aee8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aeec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d009      	beq.n	800af08 <HAL_UART_IRQHandler+0x5f4>
 800aef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d003      	beq.n	800af08 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f000 f9a3 	bl	800b24c <UART_EndTransmit_IT>
    return;
 800af06:	e026      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800af08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af10:	2b00      	cmp	r3, #0
 800af12:	d009      	beq.n	800af28 <HAL_UART_IRQHandler+0x614>
 800af14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af18:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d003      	beq.n	800af28 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800af20:	6878      	ldr	r0, [r7, #4]
 800af22:	f000 f9d2 	bl	800b2ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af26:	e016      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800af28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800af30:	2b00      	cmp	r3, #0
 800af32:	d010      	beq.n	800af56 <HAL_UART_IRQHandler+0x642>
 800af34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	da0c      	bge.n	800af56 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800af3c:	6878      	ldr	r0, [r7, #4]
 800af3e:	f000 f9ba 	bl	800b2b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af42:	e008      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
      return;
 800af44:	bf00      	nop
 800af46:	e006      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
    return;
 800af48:	bf00      	nop
 800af4a:	e004      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
      return;
 800af4c:	bf00      	nop
 800af4e:	e002      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
      return;
 800af50:	bf00      	nop
 800af52:	e000      	b.n	800af56 <HAL_UART_IRQHandler+0x642>
    return;
 800af54:	bf00      	nop
  }
}
 800af56:	37e8      	adds	r7, #232	@ 0xe8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	460b      	mov	r3, r1
 800af8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af90:	bf00      	nop
 800af92:	370c      	adds	r7, #12
 800af94:	46bd      	mov	sp, r7
 800af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9a:	4770      	bx	lr

0800af9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b08f      	sub	sp, #60	@ 0x3c
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	e853 3f00 	ldrex	r3, [r3]
 800afb0:	61fb      	str	r3, [r7, #28]
   return(result);
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800afb8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	461a      	mov	r2, r3
 800afc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afc4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afca:	e841 2300 	strex	r3, r2, [r1]
 800afce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d1e6      	bne.n	800afa4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	e853 3f00 	ldrex	r3, [r3]
 800afe4:	60bb      	str	r3, [r7, #8]
   return(result);
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800afec:	633b      	str	r3, [r7, #48]	@ 0x30
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3308      	adds	r3, #8
 800aff4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aff6:	61ba      	str	r2, [r7, #24]
 800aff8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800affa:	6979      	ldr	r1, [r7, #20]
 800affc:	69ba      	ldr	r2, [r7, #24]
 800affe:	e841 2300 	strex	r3, r2, [r1]
 800b002:	613b      	str	r3, [r7, #16]
   return(result);
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d1e5      	bne.n	800afd6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2220      	movs	r2, #32
 800b00e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b012:	bf00      	nop
 800b014:	373c      	adds	r7, #60	@ 0x3c
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr

0800b01e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b01e:	b480      	push	{r7}
 800b020:	b095      	sub	sp, #84	@ 0x54
 800b022:	af00      	add	r7, sp, #0
 800b024:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b02e:	e853 3f00 	ldrex	r3, [r3]
 800b032:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b036:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b03a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	461a      	mov	r2, r3
 800b042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b044:	643b      	str	r3, [r7, #64]	@ 0x40
 800b046:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b048:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b04a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b04c:	e841 2300 	strex	r3, r2, [r1]
 800b050:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b054:	2b00      	cmp	r3, #0
 800b056:	d1e6      	bne.n	800b026 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	3308      	adds	r3, #8
 800b05e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b060:	6a3b      	ldr	r3, [r7, #32]
 800b062:	e853 3f00 	ldrex	r3, [r3]
 800b066:	61fb      	str	r3, [r7, #28]
   return(result);
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b06e:	f023 0301 	bic.w	r3, r3, #1
 800b072:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	3308      	adds	r3, #8
 800b07a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b07c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b07e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b080:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b082:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b084:	e841 2300 	strex	r3, r2, [r1]
 800b088:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d1e3      	bne.n	800b058 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b094:	2b01      	cmp	r3, #1
 800b096:	d118      	bne.n	800b0ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	e853 3f00 	ldrex	r3, [r3]
 800b0a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	f023 0310 	bic.w	r3, r3, #16
 800b0ac:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0b6:	61bb      	str	r3, [r7, #24]
 800b0b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ba:	6979      	ldr	r1, [r7, #20]
 800b0bc:	69ba      	ldr	r2, [r7, #24]
 800b0be:	e841 2300 	strex	r3, r2, [r1]
 800b0c2:	613b      	str	r3, [r7, #16]
   return(result);
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1e6      	bne.n	800b098 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2220      	movs	r2, #32
 800b0ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b0de:	bf00      	nop
 800b0e0:	3754      	adds	r7, #84	@ 0x54
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e8:	4770      	bx	lr

0800b0ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b090      	sub	sp, #64	@ 0x40
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 0320 	and.w	r3, r3, #32
 800b102:	2b00      	cmp	r3, #0
 800b104:	d137      	bne.n	800b176 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b106:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b108:	2200      	movs	r2, #0
 800b10a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3308      	adds	r3, #8
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	623b      	str	r3, [r7, #32]
   return(result);
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b124:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3308      	adds	r3, #8
 800b12c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b12e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b130:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e5      	bne.n	800b10e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	e853 3f00 	ldrex	r3, [r3]
 800b14e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b156:	637b      	str	r3, [r7, #52]	@ 0x34
 800b158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	461a      	mov	r2, r3
 800b15e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b160:	61fb      	str	r3, [r7, #28]
 800b162:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b164:	69b9      	ldr	r1, [r7, #24]
 800b166:	69fa      	ldr	r2, [r7, #28]
 800b168:	e841 2300 	strex	r3, r2, [r1]
 800b16c:	617b      	str	r3, [r7, #20]
   return(result);
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1e6      	bne.n	800b142 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b174:	e002      	b.n	800b17c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b176:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b178:	f7f8 f836 	bl	80031e8 <HAL_UART_TxCpltCallback>
}
 800b17c:	bf00      	nop
 800b17e:	3740      	adds	r7, #64	@ 0x40
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b190:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f7ff fee2 	bl	800af5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b198:	bf00      	nop
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b1b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b1c8:	2b80      	cmp	r3, #128	@ 0x80
 800b1ca:	d109      	bne.n	800b1e0 <UART_DMAError+0x40>
 800b1cc:	693b      	ldr	r3, [r7, #16]
 800b1ce:	2b21      	cmp	r3, #33	@ 0x21
 800b1d0:	d106      	bne.n	800b1e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b1d2:	697b      	ldr	r3, [r7, #20]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b1da:	6978      	ldr	r0, [r7, #20]
 800b1dc:	f7ff fede 	bl	800af9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	689b      	ldr	r3, [r3, #8]
 800b1e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1ea:	2b40      	cmp	r3, #64	@ 0x40
 800b1ec:	d109      	bne.n	800b202 <UART_DMAError+0x62>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b22      	cmp	r3, #34	@ 0x22
 800b1f2:	d106      	bne.n	800b202 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b1fc:	6978      	ldr	r0, [r7, #20]
 800b1fe:	f7ff ff0e 	bl	800b01e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b208:	f043 0210 	orr.w	r2, r3, #16
 800b20c:	697b      	ldr	r3, [r7, #20]
 800b20e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f7ff feac 	bl	800af70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b218:	bf00      	nop
 800b21a:	3718      	adds	r7, #24
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}

0800b220 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b084      	sub	sp, #16
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	2200      	movs	r2, #0
 800b232:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2200      	movs	r2, #0
 800b23a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b23e:	68f8      	ldr	r0, [r7, #12]
 800b240:	f7ff fe96 	bl	800af70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b244:	bf00      	nop
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b088      	sub	sp, #32
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	e853 3f00 	ldrex	r3, [r3]
 800b260:	60bb      	str	r3, [r7, #8]
   return(result);
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b268:	61fb      	str	r3, [r7, #28]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	461a      	mov	r2, r3
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	61bb      	str	r3, [r7, #24]
 800b274:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b276:	6979      	ldr	r1, [r7, #20]
 800b278:	69ba      	ldr	r2, [r7, #24]
 800b27a:	e841 2300 	strex	r3, r2, [r1]
 800b27e:	613b      	str	r3, [r7, #16]
   return(result);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1e6      	bne.n	800b254 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7f7 ffa7 	bl	80031e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b29a:	bf00      	nop
 800b29c:	3720      	adds	r7, #32
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b083      	sub	sp, #12
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b2aa:	bf00      	nop
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b2b6:	b480      	push	{r7}
 800b2b8:	b083      	sub	sp, #12
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b2be:	bf00      	nop
 800b2c0:	370c      	adds	r7, #12
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr

0800b2ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b2ca:	b480      	push	{r7}
 800b2cc:	b083      	sub	sp, #12
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b2d2:	bf00      	nop
 800b2d4:	370c      	adds	r7, #12
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr

0800b2de <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b2de:	b480      	push	{r7}
 800b2e0:	b085      	sub	sp, #20
 800b2e2:	af00      	add	r7, sp, #0
 800b2e4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b2ee:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b2f2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3714      	adds	r7, #20
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b085      	sub	sp, #20
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b314:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b318:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b320:	b29a      	uxth	r2, r3
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	b29b      	uxth	r3, r3
 800b326:	43db      	mvns	r3, r3
 800b328:	b29b      	uxth	r3, r3
 800b32a:	4013      	ands	r3, r2
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr

0800b342 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b342:	b480      	push	{r7}
 800b344:	b085      	sub	sp, #20
 800b346:	af00      	add	r7, sp, #0
 800b348:	60f8      	str	r0, [r7, #12]
 800b34a:	1d3b      	adds	r3, r7, #4
 800b34c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2201      	movs	r2, #1
 800b354:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2200      	movs	r2, #0
 800b364:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3714      	adds	r7, #20
 800b376:	46bd      	mov	sp, r7
 800b378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37c:	4770      	bx	lr
	...

0800b380 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b380:	b480      	push	{r7}
 800b382:	b09d      	sub	sp, #116	@ 0x74
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b38a:	2300      	movs	r3, #0
 800b38c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b390:	687a      	ldr	r2, [r7, #4]
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	781b      	ldrb	r3, [r3, #0]
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	4413      	add	r3, r2
 800b39a:	881b      	ldrh	r3, [r3, #0]
 800b39c:	b29b      	uxth	r3, r3
 800b39e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b3a6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	78db      	ldrb	r3, [r3, #3]
 800b3ae:	2b03      	cmp	r3, #3
 800b3b0:	d81f      	bhi.n	800b3f2 <USB_ActivateEndpoint+0x72>
 800b3b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b8 <USB_ActivateEndpoint+0x38>)
 800b3b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b8:	0800b3c9 	.word	0x0800b3c9
 800b3bc:	0800b3e5 	.word	0x0800b3e5
 800b3c0:	0800b3fb 	.word	0x0800b3fb
 800b3c4:	0800b3d7 	.word	0x0800b3d7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b3c8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b3cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b3d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b3d4:	e012      	b.n	800b3fc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b3d6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b3da:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b3de:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b3e2:	e00b      	b.n	800b3fc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b3e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b3e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b3ec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b3f0:	e004      	b.n	800b3fc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b3f2:	2301      	movs	r3, #1
 800b3f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800b3f8:	e000      	b.n	800b3fc <USB_ActivateEndpoint+0x7c>
      break;
 800b3fa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b3fc:	687a      	ldr	r2, [r7, #4]
 800b3fe:	683b      	ldr	r3, [r7, #0]
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	009b      	lsls	r3, r3, #2
 800b404:	441a      	add	r2, r3
 800b406:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b40a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b40e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b412:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b416:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	781b      	ldrb	r3, [r3, #0]
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	4413      	add	r3, r2
 800b428:	881b      	ldrh	r3, [r3, #0]
 800b42a:	b29b      	uxth	r3, r3
 800b42c:	b21b      	sxth	r3, r3
 800b42e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b436:	b21a      	sxth	r2, r3
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	781b      	ldrb	r3, [r3, #0]
 800b43c:	b21b      	sxth	r3, r3
 800b43e:	4313      	orrs	r3, r2
 800b440:	b21b      	sxth	r3, r3
 800b442:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	009b      	lsls	r3, r3, #2
 800b44e:	441a      	add	r2, r3
 800b450:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b45c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b464:	b29b      	uxth	r3, r3
 800b466:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	7b1b      	ldrb	r3, [r3, #12]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	f040 8178 	bne.w	800b762 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	785b      	ldrb	r3, [r3, #1]
 800b476:	2b00      	cmp	r3, #0
 800b478:	f000 8084 	beq.w	800b584 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	61bb      	str	r3, [r7, #24]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b486:	b29b      	uxth	r3, r3
 800b488:	461a      	mov	r2, r3
 800b48a:	69bb      	ldr	r3, [r7, #24]
 800b48c:	4413      	add	r3, r2
 800b48e:	61bb      	str	r3, [r7, #24]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	00da      	lsls	r2, r3, #3
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	4413      	add	r3, r2
 800b49a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	88db      	ldrh	r3, [r3, #6]
 800b4a4:	085b      	lsrs	r3, r3, #1
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	b29a      	uxth	r2, r3
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	827b      	strh	r3, [r7, #18]
 800b4be:	8a7b      	ldrh	r3, [r7, #18]
 800b4c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d01b      	beq.n	800b500 <USB_ActivateEndpoint+0x180>
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	881b      	ldrh	r3, [r3, #0]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4de:	823b      	strh	r3, [r7, #16]
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	781b      	ldrb	r3, [r3, #0]
 800b4e6:	009b      	lsls	r3, r3, #2
 800b4e8:	441a      	add	r2, r3
 800b4ea:	8a3b      	ldrh	r3, [r7, #16]
 800b4ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	78db      	ldrb	r3, [r3, #3]
 800b504:	2b01      	cmp	r3, #1
 800b506:	d020      	beq.n	800b54a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	009b      	lsls	r3, r3, #2
 800b510:	4413      	add	r3, r2
 800b512:	881b      	ldrh	r3, [r3, #0]
 800b514:	b29b      	uxth	r3, r3
 800b516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b51a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b51e:	81bb      	strh	r3, [r7, #12]
 800b520:	89bb      	ldrh	r3, [r7, #12]
 800b522:	f083 0320 	eor.w	r3, r3, #32
 800b526:	81bb      	strh	r3, [r7, #12]
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	009b      	lsls	r3, r3, #2
 800b530:	441a      	add	r2, r3
 800b532:	89bb      	ldrh	r3, [r7, #12]
 800b534:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b538:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b53c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b540:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b544:	b29b      	uxth	r3, r3
 800b546:	8013      	strh	r3, [r2, #0]
 800b548:	e2d5      	b.n	800baf6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b54a:	687a      	ldr	r2, [r7, #4]
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	781b      	ldrb	r3, [r3, #0]
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4413      	add	r3, r2
 800b554:	881b      	ldrh	r3, [r3, #0]
 800b556:	b29b      	uxth	r3, r3
 800b558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b55c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b560:	81fb      	strh	r3, [r7, #14]
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	781b      	ldrb	r3, [r3, #0]
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	441a      	add	r2, r3
 800b56c:	89fb      	ldrh	r3, [r7, #14]
 800b56e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b57e:	b29b      	uxth	r3, r3
 800b580:	8013      	strh	r3, [r2, #0]
 800b582:	e2b8      	b.n	800baf6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	633b      	str	r3, [r7, #48]	@ 0x30
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b58e:	b29b      	uxth	r3, r3
 800b590:	461a      	mov	r2, r3
 800b592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b594:	4413      	add	r3, r2
 800b596:	633b      	str	r3, [r7, #48]	@ 0x30
 800b598:	683b      	ldr	r3, [r7, #0]
 800b59a:	781b      	ldrb	r3, [r3, #0]
 800b59c:	00da      	lsls	r2, r3, #3
 800b59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a0:	4413      	add	r3, r2
 800b5a2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	88db      	ldrh	r3, [r3, #6]
 800b5ac:	085b      	lsrs	r3, r3, #1
 800b5ae:	b29b      	uxth	r3, r3
 800b5b0:	005b      	lsls	r3, r3, #1
 800b5b2:	b29a      	uxth	r2, r3
 800b5b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5b6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5c2:	b29b      	uxth	r3, r3
 800b5c4:	461a      	mov	r2, r3
 800b5c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5c8:	4413      	add	r3, r2
 800b5ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	00da      	lsls	r2, r3, #3
 800b5d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5d4:	4413      	add	r3, r2
 800b5d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b5da:	627b      	str	r3, [r7, #36]	@ 0x24
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5de:	881b      	ldrh	r3, [r3, #0]
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5e6:	b29a      	uxth	r2, r3
 800b5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ea:	801a      	strh	r2, [r3, #0]
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5f2:	d91d      	bls.n	800b630 <USB_ActivateEndpoint+0x2b0>
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	691b      	ldr	r3, [r3, #16]
 800b5f8:	095b      	lsrs	r3, r3, #5
 800b5fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	f003 031f 	and.w	r3, r3, #31
 800b604:	2b00      	cmp	r3, #0
 800b606:	d102      	bne.n	800b60e <USB_ActivateEndpoint+0x28e>
 800b608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b60a:	3b01      	subs	r3, #1
 800b60c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	b29a      	uxth	r2, r3
 800b614:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b616:	b29b      	uxth	r3, r3
 800b618:	029b      	lsls	r3, r3, #10
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	4313      	orrs	r3, r2
 800b61e:	b29b      	uxth	r3, r3
 800b620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b628:	b29a      	uxth	r2, r3
 800b62a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b62c:	801a      	strh	r2, [r3, #0]
 800b62e:	e026      	b.n	800b67e <USB_ActivateEndpoint+0x2fe>
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d10a      	bne.n	800b64e <USB_ActivateEndpoint+0x2ce>
 800b638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b646:	b29a      	uxth	r2, r3
 800b648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64a:	801a      	strh	r2, [r3, #0]
 800b64c:	e017      	b.n	800b67e <USB_ActivateEndpoint+0x2fe>
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	085b      	lsrs	r3, r3, #1
 800b654:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	691b      	ldr	r3, [r3, #16]
 800b65a:	f003 0301 	and.w	r3, r3, #1
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d002      	beq.n	800b668 <USB_ActivateEndpoint+0x2e8>
 800b662:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b664:	3301      	adds	r3, #1
 800b666:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b670:	b29b      	uxth	r3, r3
 800b672:	029b      	lsls	r3, r3, #10
 800b674:	b29b      	uxth	r3, r3
 800b676:	4313      	orrs	r3, r2
 800b678:	b29a      	uxth	r2, r3
 800b67a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b67c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	781b      	ldrb	r3, [r3, #0]
 800b684:	009b      	lsls	r3, r3, #2
 800b686:	4413      	add	r3, r2
 800b688:	881b      	ldrh	r3, [r3, #0]
 800b68a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b68c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b68e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b692:	2b00      	cmp	r3, #0
 800b694:	d01b      	beq.n	800b6ce <USB_ActivateEndpoint+0x34e>
 800b696:	687a      	ldr	r2, [r7, #4]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	4413      	add	r3, r2
 800b6a0:	881b      	ldrh	r3, [r3, #0]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ac:	843b      	strh	r3, [r7, #32]
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	441a      	add	r2, r3
 800b6b8:	8c3b      	ldrh	r3, [r7, #32]
 800b6ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b6be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b6c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b6c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d124      	bne.n	800b720 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4413      	add	r3, r2
 800b6e0:	881b      	ldrh	r3, [r3, #0]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b6e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6ec:	83bb      	strh	r3, [r7, #28]
 800b6ee:	8bbb      	ldrh	r3, [r7, #28]
 800b6f0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b6f4:	83bb      	strh	r3, [r7, #28]
 800b6f6:	8bbb      	ldrh	r3, [r7, #28]
 800b6f8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b6fc:	83bb      	strh	r3, [r7, #28]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	781b      	ldrb	r3, [r3, #0]
 800b704:	009b      	lsls	r3, r3, #2
 800b706:	441a      	add	r2, r3
 800b708:	8bbb      	ldrh	r3, [r7, #28]
 800b70a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b70e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	8013      	strh	r3, [r2, #0]
 800b71e:	e1ea      	b.n	800baf6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	781b      	ldrb	r3, [r3, #0]
 800b726:	009b      	lsls	r3, r3, #2
 800b728:	4413      	add	r3, r2
 800b72a:	881b      	ldrh	r3, [r3, #0]
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b732:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b736:	83fb      	strh	r3, [r7, #30]
 800b738:	8bfb      	ldrh	r3, [r7, #30]
 800b73a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b73e:	83fb      	strh	r3, [r7, #30]
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	441a      	add	r2, r3
 800b74a:	8bfb      	ldrh	r3, [r7, #30]
 800b74c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b750:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b75c:	b29b      	uxth	r3, r3
 800b75e:	8013      	strh	r3, [r2, #0]
 800b760:	e1c9      	b.n	800baf6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	78db      	ldrb	r3, [r3, #3]
 800b766:	2b02      	cmp	r3, #2
 800b768:	d11e      	bne.n	800b7a8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	881b      	ldrh	r3, [r3, #0]
 800b776:	b29b      	uxth	r3, r3
 800b778:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b77c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b780:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	441a      	add	r2, r3
 800b78e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b79a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	8013      	strh	r3, [r2, #0]
 800b7a6:	e01d      	b.n	800b7e4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b7a8:	687a      	ldr	r2, [r7, #4]
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	781b      	ldrb	r3, [r3, #0]
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	4413      	add	r3, r2
 800b7b2:	881b      	ldrh	r3, [r3, #0]
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b7ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7be:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	441a      	add	r2, r3
 800b7cc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b7d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b7f4:	4413      	add	r3, r2
 800b7f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	00da      	lsls	r2, r3, #3
 800b7fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b800:	4413      	add	r3, r2
 800b802:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b806:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	891b      	ldrh	r3, [r3, #8]
 800b80c:	085b      	lsrs	r3, r3, #1
 800b80e:	b29b      	uxth	r3, r3
 800b810:	005b      	lsls	r3, r3, #1
 800b812:	b29a      	uxth	r2, r3
 800b814:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b816:	801a      	strh	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b822:	b29b      	uxth	r3, r3
 800b824:	461a      	mov	r2, r3
 800b826:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b828:	4413      	add	r3, r2
 800b82a:	657b      	str	r3, [r7, #84]	@ 0x54
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	00da      	lsls	r2, r3, #3
 800b832:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b834:	4413      	add	r3, r2
 800b836:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	895b      	ldrh	r3, [r3, #10]
 800b840:	085b      	lsrs	r3, r3, #1
 800b842:	b29b      	uxth	r3, r3
 800b844:	005b      	lsls	r3, r3, #1
 800b846:	b29a      	uxth	r2, r3
 800b848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b84a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	785b      	ldrb	r3, [r3, #1]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f040 8093 	bne.w	800b97c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	881b      	ldrh	r3, [r3, #0]
 800b862:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b866:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b86a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d01b      	beq.n	800b8aa <USB_ActivateEndpoint+0x52a>
 800b872:	687a      	ldr	r2, [r7, #4]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	781b      	ldrb	r3, [r3, #0]
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	4413      	add	r3, r2
 800b87c:	881b      	ldrh	r3, [r3, #0]
 800b87e:	b29b      	uxth	r3, r3
 800b880:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b888:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b88a:	687a      	ldr	r2, [r7, #4]
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	441a      	add	r2, r3
 800b894:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b896:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b89a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b89e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b8a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	781b      	ldrb	r3, [r3, #0]
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	4413      	add	r3, r2
 800b8b4:	881b      	ldrh	r3, [r3, #0]
 800b8b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b8b8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b8ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d01b      	beq.n	800b8fa <USB_ActivateEndpoint+0x57a>
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	683b      	ldr	r3, [r7, #0]
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4413      	add	r3, r2
 800b8cc:	881b      	ldrh	r3, [r3, #0]
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b8d8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	781b      	ldrb	r3, [r3, #0]
 800b8e0:	009b      	lsls	r3, r3, #2
 800b8e2:	441a      	add	r2, r3
 800b8e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b8e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b8ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b8ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	781b      	ldrb	r3, [r3, #0]
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	4413      	add	r3, r2
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	b29b      	uxth	r3, r3
 800b908:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b90c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b910:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b912:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b914:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b918:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b91a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b91c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b920:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b922:	687a      	ldr	r2, [r7, #4]
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	441a      	add	r2, r3
 800b92c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b92e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b932:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b936:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b93a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b93e:	b29b      	uxth	r3, r3
 800b940:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	4413      	add	r3, r2
 800b94c:	881b      	ldrh	r3, [r3, #0]
 800b94e:	b29b      	uxth	r3, r3
 800b950:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b954:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b958:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800b95a:	687a      	ldr	r2, [r7, #4]
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	781b      	ldrb	r3, [r3, #0]
 800b960:	009b      	lsls	r3, r3, #2
 800b962:	441a      	add	r2, r3
 800b964:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b966:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b96a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b96e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b976:	b29b      	uxth	r3, r3
 800b978:	8013      	strh	r3, [r2, #0]
 800b97a:	e0bc      	b.n	800baf6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4413      	add	r3, r2
 800b986:	881b      	ldrh	r3, [r3, #0]
 800b988:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800b98c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800b990:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d01d      	beq.n	800b9d4 <USB_ActivateEndpoint+0x654>
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	009b      	lsls	r3, r3, #2
 800b9a0:	4413      	add	r3, r2
 800b9a2:	881b      	ldrh	r3, [r3, #0]
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b9aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800b9b2:	687a      	ldr	r2, [r7, #4]
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	781b      	ldrb	r3, [r3, #0]
 800b9b8:	009b      	lsls	r3, r3, #2
 800b9ba:	441a      	add	r2, r3
 800b9bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800b9c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b9cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b9d4:	687a      	ldr	r2, [r7, #4]
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	009b      	lsls	r3, r3, #2
 800b9dc:	4413      	add	r3, r2
 800b9de:	881b      	ldrh	r3, [r3, #0]
 800b9e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800b9e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800b9e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d01d      	beq.n	800ba2c <USB_ActivateEndpoint+0x6ac>
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	009b      	lsls	r3, r3, #2
 800b9f8:	4413      	add	r3, r2
 800b9fa:	881b      	ldrh	r3, [r3, #0]
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba06:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	441a      	add	r2, r3
 800ba14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ba18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	78db      	ldrb	r3, [r3, #3]
 800ba30:	2b01      	cmp	r3, #1
 800ba32:	d024      	beq.n	800ba7e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	881b      	ldrh	r3, [r3, #0]
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba46:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba4a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ba4e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ba52:	f083 0320 	eor.w	r3, r3, #32
 800ba56:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	781b      	ldrb	r3, [r3, #0]
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	441a      	add	r2, r3
 800ba64:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ba68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	8013      	strh	r3, [r2, #0]
 800ba7c:	e01d      	b.n	800baba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba94:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	441a      	add	r2, r3
 800baa2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800baa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800baaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bab6:	b29b      	uxth	r3, r3
 800bab8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	781b      	ldrb	r3, [r3, #0]
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	4413      	add	r3, r2
 800bac4:	881b      	ldrh	r3, [r3, #0]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bacc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bad0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	441a      	add	r2, r3
 800bade:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baf2:	b29b      	uxth	r3, r3
 800baf4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800baf6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3774      	adds	r7, #116	@ 0x74
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop

0800bb08 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b08d      	sub	sp, #52	@ 0x34
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	6078      	str	r0, [r7, #4]
 800bb10:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	7b1b      	ldrb	r3, [r3, #12]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	f040 808e 	bne.w	800bc38 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	785b      	ldrb	r3, [r3, #1]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d044      	beq.n	800bbae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	881b      	ldrh	r3, [r3, #0]
 800bb30:	81bb      	strh	r3, [r7, #12]
 800bb32:	89bb      	ldrh	r3, [r7, #12]
 800bb34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d01b      	beq.n	800bb74 <USB_DeactivateEndpoint+0x6c>
 800bb3c:	687a      	ldr	r2, [r7, #4]
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb52:	817b      	strh	r3, [r7, #10]
 800bb54:	687a      	ldr	r2, [r7, #4]
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	781b      	ldrb	r3, [r3, #0]
 800bb5a:	009b      	lsls	r3, r3, #2
 800bb5c:	441a      	add	r2, r3
 800bb5e:	897b      	ldrh	r3, [r7, #10]
 800bb60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb74:	687a      	ldr	r2, [r7, #4]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	781b      	ldrb	r3, [r3, #0]
 800bb7a:	009b      	lsls	r3, r3, #2
 800bb7c:	4413      	add	r3, r2
 800bb7e:	881b      	ldrh	r3, [r3, #0]
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb8a:	813b      	strh	r3, [r7, #8]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	009b      	lsls	r3, r3, #2
 800bb94:	441a      	add	r2, r3
 800bb96:	893b      	ldrh	r3, [r7, #8]
 800bb98:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb9c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bba0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bba8:	b29b      	uxth	r3, r3
 800bbaa:	8013      	strh	r3, [r2, #0]
 800bbac:	e192      	b.n	800bed4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	781b      	ldrb	r3, [r3, #0]
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4413      	add	r3, r2
 800bbb8:	881b      	ldrh	r3, [r3, #0]
 800bbba:	827b      	strh	r3, [r7, #18]
 800bbbc:	8a7b      	ldrh	r3, [r7, #18]
 800bbbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d01b      	beq.n	800bbfe <USB_DeactivateEndpoint+0xf6>
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	881b      	ldrh	r3, [r3, #0]
 800bbd2:	b29b      	uxth	r3, r3
 800bbd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbdc:	823b      	strh	r3, [r7, #16]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	441a      	add	r2, r3
 800bbe8:	8a3b      	ldrh	r3, [r7, #16]
 800bbea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bbf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	781b      	ldrb	r3, [r3, #0]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	881b      	ldrh	r3, [r3, #0]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc14:	81fb      	strh	r3, [r7, #14]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	781b      	ldrb	r3, [r3, #0]
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	441a      	add	r2, r3
 800bc20:	89fb      	ldrh	r3, [r7, #14]
 800bc22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	8013      	strh	r3, [r2, #0]
 800bc36:	e14d      	b.n	800bed4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f040 80a5 	bne.w	800bd8c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	781b      	ldrb	r3, [r3, #0]
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	843b      	strh	r3, [r7, #32]
 800bc50:	8c3b      	ldrh	r3, [r7, #32]
 800bc52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d01b      	beq.n	800bc92 <USB_DeactivateEndpoint+0x18a>
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	781b      	ldrb	r3, [r3, #0]
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	4413      	add	r3, r2
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	b29b      	uxth	r3, r3
 800bc68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc70:	83fb      	strh	r3, [r7, #30]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	441a      	add	r2, r3
 800bc7c:	8bfb      	ldrh	r3, [r7, #30]
 800bc7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	009b      	lsls	r3, r3, #2
 800bc9a:	4413      	add	r3, r2
 800bc9c:	881b      	ldrh	r3, [r3, #0]
 800bc9e:	83bb      	strh	r3, [r7, #28]
 800bca0:	8bbb      	ldrh	r3, [r7, #28]
 800bca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d01b      	beq.n	800bce2 <USB_DeactivateEndpoint+0x1da>
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	009b      	lsls	r3, r3, #2
 800bcb2:	4413      	add	r3, r2
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcc0:	837b      	strh	r3, [r7, #26]
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	441a      	add	r2, r3
 800bccc:	8b7b      	ldrh	r3, [r7, #26]
 800bcce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bcf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcf8:	833b      	strh	r3, [r7, #24]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	441a      	add	r2, r3
 800bd04:	8b3b      	ldrh	r3, [r7, #24]
 800bd06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bd16:	b29b      	uxth	r3, r3
 800bd18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	4413      	add	r3, r2
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	b29b      	uxth	r3, r3
 800bd28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bd2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd30:	82fb      	strh	r3, [r7, #22]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	781b      	ldrb	r3, [r3, #0]
 800bd38:	009b      	lsls	r3, r3, #2
 800bd3a:	441a      	add	r2, r3
 800bd3c:	8afb      	ldrh	r3, [r7, #22]
 800bd3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd4e:	b29b      	uxth	r3, r3
 800bd50:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd52:	687a      	ldr	r2, [r7, #4]
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4413      	add	r3, r2
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd68:	82bb      	strh	r3, [r7, #20]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	009b      	lsls	r3, r3, #2
 800bd72:	441a      	add	r2, r3
 800bd74:	8abb      	ldrh	r3, [r7, #20]
 800bd76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	8013      	strh	r3, [r2, #0]
 800bd8a:	e0a3      	b.n	800bed4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	781b      	ldrb	r3, [r3, #0]
 800bd92:	009b      	lsls	r3, r3, #2
 800bd94:	4413      	add	r3, r2
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800bd9a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800bd9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d01b      	beq.n	800bddc <USB_DeactivateEndpoint+0x2d4>
 800bda4:	687a      	ldr	r2, [r7, #4]
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	4413      	add	r3, r2
 800bdae:	881b      	ldrh	r3, [r3, #0]
 800bdb0:	b29b      	uxth	r3, r3
 800bdb2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	009b      	lsls	r3, r3, #2
 800bdc4:	441a      	add	r2, r3
 800bdc6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800bdc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bdd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	009b      	lsls	r3, r3, #2
 800bde4:	4413      	add	r3, r2
 800bde6:	881b      	ldrh	r3, [r3, #0]
 800bde8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800bdea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800bdec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d01b      	beq.n	800be2c <USB_DeactivateEndpoint+0x324>
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	881b      	ldrh	r3, [r3, #0]
 800be00:	b29b      	uxth	r3, r3
 800be02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be0a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800be0c:	687a      	ldr	r2, [r7, #4]
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	441a      	add	r2, r3
 800be16:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800be18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800be28:	b29b      	uxth	r3, r3
 800be2a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	009b      	lsls	r3, r3, #2
 800be34:	4413      	add	r3, r2
 800be36:	881b      	ldrh	r3, [r3, #0]
 800be38:	b29b      	uxth	r3, r3
 800be3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be42:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	441a      	add	r2, r3
 800be4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800be50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be60:	b29b      	uxth	r3, r3
 800be62:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	b29b      	uxth	r3, r3
 800be72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be7a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	441a      	add	r2, r3
 800be86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800be88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be98:	b29b      	uxth	r3, r3
 800be9a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800beae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800beb2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	441a      	add	r2, r3
 800bebe:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800becc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3734      	adds	r7, #52	@ 0x34
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr

0800bee2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b0c2      	sub	sp, #264	@ 0x108
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bef0:	6018      	str	r0, [r3, #0]
 800bef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800befa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800befc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	785b      	ldrb	r3, [r3, #1]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	f040 86b7 	bne.w	800cc7c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bf0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	699a      	ldr	r2, [r3, #24]
 800bf1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d908      	bls.n	800bf3c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bf2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bf3a:	e007      	b.n	800bf4c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800bf3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	699b      	ldr	r3, [r3, #24]
 800bf48:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bf4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	7b1b      	ldrb	r3, [r3, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d13a      	bne.n	800bfd2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bf5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	6959      	ldr	r1, [r3, #20]
 800bf68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	88da      	ldrh	r2, [r3, #6]
 800bf74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bf7e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bf82:	6800      	ldr	r0, [r0, #0]
 800bf84:	f001 fc98 	bl	800d8b8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bf88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	613b      	str	r3, [r7, #16]
 800bf94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	613b      	str	r3, [r7, #16]
 800bfac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	00da      	lsls	r2, r3, #3
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfc8:	b29a      	uxth	r2, r3
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	801a      	strh	r2, [r3, #0]
 800bfce:	f000 be1f 	b.w	800cc10 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800bfd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	78db      	ldrb	r3, [r3, #3]
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	f040 8462 	bne.w	800c8a8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800bfe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	6a1a      	ldr	r2, [r3, #32]
 800bff0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	691b      	ldr	r3, [r3, #16]
 800bffc:	429a      	cmp	r2, r3
 800bffe:	f240 83df 	bls.w	800c7c0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c002:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c006:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c010:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4413      	add	r3, r2
 800c01c:	881b      	ldrh	r3, [r3, #0]
 800c01e:	b29b      	uxth	r3, r3
 800c020:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c028:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c030:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c03a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	441a      	add	r2, r3
 800c046:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c04a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c04e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c052:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6a1a      	ldr	r2, [r3, #32]
 800c06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c06e:	1ad2      	subs	r2, r2, r3
 800c070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c080:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c084:	681a      	ldr	r2, [r3, #0]
 800c086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c08a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	009b      	lsls	r3, r3, #2
 800c094:	4413      	add	r3, r2
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	f000 81c7 	beq.w	800c432 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800c0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	785b      	ldrb	r3, [r3, #1]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d177      	bne.n	800c1b0 <USB_EPStartXfer+0x2ce>
 800c0c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	461a      	mov	r2, r3
 800c0de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e0:	4413      	add	r3, r2
 800c0e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c0e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	00da      	lsls	r2, r3, #3
 800c0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fe:	881b      	ldrh	r3, [r3, #0]
 800c100:	b29b      	uxth	r3, r3
 800c102:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c106:	b29a      	uxth	r2, r3
 800c108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10a:	801a      	strh	r2, [r3, #0]
 800c10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c110:	2b3e      	cmp	r3, #62	@ 0x3e
 800c112:	d921      	bls.n	800c158 <USB_EPStartXfer+0x276>
 800c114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c118:	095b      	lsrs	r3, r3, #5
 800c11a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c11e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c122:	f003 031f 	and.w	r3, r3, #31
 800c126:	2b00      	cmp	r3, #0
 800c128:	d104      	bne.n	800c134 <USB_EPStartXfer+0x252>
 800c12a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c12e:	3b01      	subs	r3, #1
 800c130:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c136:	881b      	ldrh	r3, [r3, #0]
 800c138:	b29a      	uxth	r2, r3
 800c13a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c13e:	b29b      	uxth	r3, r3
 800c140:	029b      	lsls	r3, r3, #10
 800c142:	b29b      	uxth	r3, r3
 800c144:	4313      	orrs	r3, r2
 800c146:	b29b      	uxth	r3, r3
 800c148:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c14c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c150:	b29a      	uxth	r2, r3
 800c152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c154:	801a      	strh	r2, [r3, #0]
 800c156:	e050      	b.n	800c1fa <USB_EPStartXfer+0x318>
 800c158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <USB_EPStartXfer+0x294>
 800c160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c162:	881b      	ldrh	r3, [r3, #0]
 800c164:	b29b      	uxth	r3, r3
 800c166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c16a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c16e:	b29a      	uxth	r2, r3
 800c170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c172:	801a      	strh	r2, [r3, #0]
 800c174:	e041      	b.n	800c1fa <USB_EPStartXfer+0x318>
 800c176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c17a:	085b      	lsrs	r3, r3, #1
 800c17c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c180:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c184:	f003 0301 	and.w	r3, r3, #1
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d004      	beq.n	800c196 <USB_EPStartXfer+0x2b4>
 800c18c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c190:	3301      	adds	r3, #1
 800c192:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c198:	881b      	ldrh	r3, [r3, #0]
 800c19a:	b29a      	uxth	r2, r3
 800c19c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	029b      	lsls	r3, r3, #10
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ac:	801a      	strh	r2, [r3, #0]
 800c1ae:	e024      	b.n	800c1fa <USB_EPStartXfer+0x318>
 800c1b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	785b      	ldrb	r3, [r3, #1]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d11c      	bne.n	800c1fa <USB_EPStartXfer+0x318>
 800c1c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c1ce:	b29b      	uxth	r3, r3
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1d4:	4413      	add	r3, r2
 800c1d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c1d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	00da      	lsls	r2, r3, #3
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1e8:	4413      	add	r3, r2
 800c1ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1f4:	b29a      	uxth	r2, r3
 800c1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	895b      	ldrh	r3, [r3, #10]
 800c206:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	6959      	ldr	r1, [r3, #20]
 800c216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c220:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c224:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c228:	6800      	ldr	r0, [r0, #0]
 800c22a:	f001 fb45 	bl	800d8b8 <USB_WritePMA>
            ep->xfer_buff += len;
 800c22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	695a      	ldr	r2, [r3, #20]
 800c23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c23e:	441a      	add	r2, r3
 800c240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c24c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	6a1a      	ldr	r2, [r3, #32]
 800c258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c25c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	429a      	cmp	r2, r3
 800c266:	d90f      	bls.n	800c288 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800c268:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c26c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	6a1a      	ldr	r2, [r3, #32]
 800c274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c278:	1ad2      	subs	r2, r2, r3
 800c27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c27e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	621a      	str	r2, [r3, #32]
 800c286:	e00e      	b.n	800c2a6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800c288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c28c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	6a1b      	ldr	r3, [r3, #32]
 800c294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c29c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	785b      	ldrb	r3, [r3, #1]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d177      	bne.n	800c3a6 <USB_EPStartXfer+0x4c4>
 800c2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	61bb      	str	r3, [r7, #24]
 800c2c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2d0:	b29b      	uxth	r3, r3
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	69bb      	ldr	r3, [r7, #24]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	61bb      	str	r3, [r7, #24]
 800c2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	00da      	lsls	r2, r3, #3
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	4413      	add	r3, r2
 800c2ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c2f0:	617b      	str	r3, [r7, #20]
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	881b      	ldrh	r3, [r3, #0]
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	801a      	strh	r2, [r3, #0]
 800c302:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c306:	2b3e      	cmp	r3, #62	@ 0x3e
 800c308:	d921      	bls.n	800c34e <USB_EPStartXfer+0x46c>
 800c30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c30e:	095b      	lsrs	r3, r3, #5
 800c310:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c314:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c318:	f003 031f 	and.w	r3, r3, #31
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d104      	bne.n	800c32a <USB_EPStartXfer+0x448>
 800c320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c324:	3b01      	subs	r3, #1
 800c326:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	881b      	ldrh	r3, [r3, #0]
 800c32e:	b29a      	uxth	r2, r3
 800c330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c334:	b29b      	uxth	r3, r3
 800c336:	029b      	lsls	r3, r3, #10
 800c338:	b29b      	uxth	r3, r3
 800c33a:	4313      	orrs	r3, r2
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c346:	b29a      	uxth	r2, r3
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	801a      	strh	r2, [r3, #0]
 800c34c:	e056      	b.n	800c3fc <USB_EPStartXfer+0x51a>
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c352:	2b00      	cmp	r3, #0
 800c354:	d10a      	bne.n	800c36c <USB_EPStartXfer+0x48a>
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	881b      	ldrh	r3, [r3, #0]
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c364:	b29a      	uxth	r2, r3
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	801a      	strh	r2, [r3, #0]
 800c36a:	e047      	b.n	800c3fc <USB_EPStartXfer+0x51a>
 800c36c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c370:	085b      	lsrs	r3, r3, #1
 800c372:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c376:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d004      	beq.n	800c38c <USB_EPStartXfer+0x4aa>
 800c382:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c386:	3301      	adds	r3, #1
 800c388:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	881b      	ldrh	r3, [r3, #0]
 800c390:	b29a      	uxth	r2, r3
 800c392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c396:	b29b      	uxth	r3, r3
 800c398:	029b      	lsls	r3, r3, #10
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b29a      	uxth	r2, r3
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	801a      	strh	r2, [r3, #0]
 800c3a4:	e02a      	b.n	800c3fc <USB_EPStartXfer+0x51a>
 800c3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	785b      	ldrb	r3, [r3, #1]
 800c3b2:	2b01      	cmp	r3, #1
 800c3b4:	d122      	bne.n	800c3fc <USB_EPStartXfer+0x51a>
 800c3b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	623b      	str	r3, [r7, #32]
 800c3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	6a3b      	ldr	r3, [r7, #32]
 800c3d6:	4413      	add	r3, r2
 800c3d8:	623b      	str	r3, [r7, #32]
 800c3da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	781b      	ldrb	r3, [r3, #0]
 800c3e6:	00da      	lsls	r2, r3, #3
 800c3e8:	6a3b      	ldr	r3, [r7, #32]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3f0:	61fb      	str	r3, [r7, #28]
 800c3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f6:	b29a      	uxth	r2, r3
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	891b      	ldrh	r3, [r3, #8]
 800c408:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	6959      	ldr	r1, [r3, #20]
 800c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c41c:	b29b      	uxth	r3, r3
 800c41e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c422:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c426:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c42a:	6800      	ldr	r0, [r0, #0]
 800c42c:	f001 fa44 	bl	800d8b8 <USB_WritePMA>
 800c430:	e3ee      	b.n	800cc10 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	785b      	ldrb	r3, [r3, #1]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d177      	bne.n	800c532 <USB_EPStartXfer+0x650>
 800c442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c452:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c45c:	b29b      	uxth	r3, r3
 800c45e:	461a      	mov	r2, r3
 800c460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c462:	4413      	add	r3, r2
 800c464:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c46a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	00da      	lsls	r2, r3, #3
 800c474:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c476:	4413      	add	r3, r2
 800c478:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c47c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c47e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c480:	881b      	ldrh	r3, [r3, #0]
 800c482:	b29b      	uxth	r3, r3
 800c484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c488:	b29a      	uxth	r2, r3
 800c48a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c48c:	801a      	strh	r2, [r3, #0]
 800c48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c492:	2b3e      	cmp	r3, #62	@ 0x3e
 800c494:	d921      	bls.n	800c4da <USB_EPStartXfer+0x5f8>
 800c496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c49a:	095b      	lsrs	r3, r3, #5
 800c49c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c4a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a4:	f003 031f 	and.w	r3, r3, #31
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d104      	bne.n	800c4b6 <USB_EPStartXfer+0x5d4>
 800c4ac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4b0:	3b01      	subs	r3, #1
 800c4b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c4b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4b8:	881b      	ldrh	r3, [r3, #0]
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c4c0:	b29b      	uxth	r3, r3
 800c4c2:	029b      	lsls	r3, r3, #10
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	b29b      	uxth	r3, r3
 800c4ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4d6:	801a      	strh	r2, [r3, #0]
 800c4d8:	e056      	b.n	800c588 <USB_EPStartXfer+0x6a6>
 800c4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d10a      	bne.n	800c4f8 <USB_EPStartXfer+0x616>
 800c4e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4f0:	b29a      	uxth	r2, r3
 800c4f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c4f4:	801a      	strh	r2, [r3, #0]
 800c4f6:	e047      	b.n	800c588 <USB_EPStartXfer+0x6a6>
 800c4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4fc:	085b      	lsrs	r3, r3, #1
 800c4fe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <USB_EPStartXfer+0x636>
 800c50e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c512:	3301      	adds	r3, #1
 800c514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c522:	b29b      	uxth	r3, r3
 800c524:	029b      	lsls	r3, r3, #10
 800c526:	b29b      	uxth	r3, r3
 800c528:	4313      	orrs	r3, r2
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c52e:	801a      	strh	r2, [r3, #0]
 800c530:	e02a      	b.n	800c588 <USB_EPStartXfer+0x6a6>
 800c532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c536:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	785b      	ldrb	r3, [r3, #1]
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d122      	bne.n	800c588 <USB_EPStartXfer+0x6a6>
 800c542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	653b      	str	r3, [r7, #80]	@ 0x50
 800c54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c552:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	461a      	mov	r2, r3
 800c560:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c562:	4413      	add	r3, r2
 800c564:	653b      	str	r3, [r7, #80]	@ 0x50
 800c566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c56a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	00da      	lsls	r2, r3, #3
 800c574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c576:	4413      	add	r3, r2
 800c578:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c57c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c582:	b29a      	uxth	r2, r3
 800c584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c586:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c588:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c58c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	891b      	ldrh	r3, [r3, #8]
 800c594:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c598:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c59c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	6959      	ldr	r1, [r3, #20]
 800c5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c5ae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c5b2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c5b6:	6800      	ldr	r0, [r0, #0]
 800c5b8:	f001 f97e 	bl	800d8b8 <USB_WritePMA>
            ep->xfer_buff += len;
 800c5bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	695a      	ldr	r2, [r3, #20]
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5cc:	441a      	add	r2, r3
 800c5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c5da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	6a1a      	ldr	r2, [r3, #32]
 800c5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d90f      	bls.n	800c616 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6a1a      	ldr	r2, [r3, #32]
 800c602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c606:	1ad2      	subs	r2, r2, r3
 800c608:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c60c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	621a      	str	r2, [r3, #32]
 800c614:	e00e      	b.n	800c634 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c61a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	6a1b      	ldr	r3, [r3, #32]
 800c622:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c62a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	2200      	movs	r2, #0
 800c632:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c638:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c640:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c644:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	785b      	ldrb	r3, [r3, #1]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d177      	bne.n	800c740 <USB_EPStartXfer+0x85e>
 800c650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	461a      	mov	r2, r3
 800c66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c670:	4413      	add	r3, r2
 800c672:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	781b      	ldrb	r3, [r3, #0]
 800c680:	00da      	lsls	r2, r3, #3
 800c682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c684:	4413      	add	r3, r2
 800c686:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c68a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68e:	881b      	ldrh	r3, [r3, #0]
 800c690:	b29b      	uxth	r3, r3
 800c692:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c696:	b29a      	uxth	r2, r3
 800c698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c69a:	801a      	strh	r2, [r3, #0]
 800c69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6a2:	d921      	bls.n	800c6e8 <USB_EPStartXfer+0x806>
 800c6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6a8:	095b      	lsrs	r3, r3, #5
 800c6aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b2:	f003 031f 	and.w	r3, r3, #31
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d104      	bne.n	800c6c4 <USB_EPStartXfer+0x7e2>
 800c6ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6c6:	881b      	ldrh	r3, [r3, #0]
 800c6c8:	b29a      	uxth	r2, r3
 800c6ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	029b      	lsls	r3, r3, #10
 800c6d2:	b29b      	uxth	r3, r3
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	b29b      	uxth	r3, r3
 800c6d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6e0:	b29a      	uxth	r2, r3
 800c6e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6e4:	801a      	strh	r2, [r3, #0]
 800c6e6:	e050      	b.n	800c78a <USB_EPStartXfer+0x8a8>
 800c6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d10a      	bne.n	800c706 <USB_EPStartXfer+0x824>
 800c6f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6f2:	881b      	ldrh	r3, [r3, #0]
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c702:	801a      	strh	r2, [r3, #0]
 800c704:	e041      	b.n	800c78a <USB_EPStartXfer+0x8a8>
 800c706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c70a:	085b      	lsrs	r3, r3, #1
 800c70c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d004      	beq.n	800c726 <USB_EPStartXfer+0x844>
 800c71c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c720:	3301      	adds	r3, #1
 800c722:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c728:	881b      	ldrh	r3, [r3, #0]
 800c72a:	b29a      	uxth	r2, r3
 800c72c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c730:	b29b      	uxth	r3, r3
 800c732:	029b      	lsls	r3, r3, #10
 800c734:	b29b      	uxth	r3, r3
 800c736:	4313      	orrs	r3, r2
 800c738:	b29a      	uxth	r2, r3
 800c73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c73c:	801a      	strh	r2, [r3, #0]
 800c73e:	e024      	b.n	800c78a <USB_EPStartXfer+0x8a8>
 800c740:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c744:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	785b      	ldrb	r3, [r3, #1]
 800c74c:	2b01      	cmp	r3, #1
 800c74e:	d11c      	bne.n	800c78a <USB_EPStartXfer+0x8a8>
 800c750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c754:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c75e:	b29b      	uxth	r3, r3
 800c760:	461a      	mov	r2, r3
 800c762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c764:	4413      	add	r3, r2
 800c766:	643b      	str	r3, [r7, #64]	@ 0x40
 800c768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c76c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	00da      	lsls	r2, r3, #3
 800c776:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c778:	4413      	add	r3, r2
 800c77a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c784:	b29a      	uxth	r2, r3
 800c786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c788:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c78a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c78e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	895b      	ldrh	r3, [r3, #10]
 800c796:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c79a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c79e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	6959      	ldr	r1, [r3, #20]
 800c7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c7b0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c7b4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c7b8:	6800      	ldr	r0, [r0, #0]
 800c7ba:	f001 f87d 	bl	800d8b8 <USB_WritePMA>
 800c7be:	e227      	b.n	800cc10 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c7c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	6a1b      	ldr	r3, [r3, #32]
 800c7cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c7d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c7f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7f6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c7fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c7fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	441a      	add	r2, r3
 800c814:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c818:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c81c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c820:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c828:	b29b      	uxth	r3, r3
 800c82a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c82c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c830:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c83c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c846:	b29b      	uxth	r3, r3
 800c848:	461a      	mov	r2, r3
 800c84a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c84c:	4413      	add	r3, r2
 800c84e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	781b      	ldrb	r3, [r3, #0]
 800c85c:	00da      	lsls	r2, r3, #3
 800c85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c860:	4413      	add	r3, r2
 800c862:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c866:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c870:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	891b      	ldrh	r3, [r3, #8]
 800c87e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c882:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c886:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	6959      	ldr	r1, [r3, #20]
 800c88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c892:	b29b      	uxth	r3, r3
 800c894:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c898:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c89c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c8a0:	6800      	ldr	r0, [r0, #0]
 800c8a2:	f001 f809 	bl	800d8b8 <USB_WritePMA>
 800c8a6:	e1b3      	b.n	800cc10 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c8a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	6a1a      	ldr	r2, [r3, #32]
 800c8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b8:	1ad2      	subs	r2, r2, r3
 800c8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c8c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	009b      	lsls	r3, r3, #2
 800c8de:	4413      	add	r3, r2
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	f000 80c6 	beq.w	800ca7a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c8ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	673b      	str	r3, [r7, #112]	@ 0x70
 800c8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	785b      	ldrb	r3, [r3, #1]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d177      	bne.n	800c9fa <USB_EPStartXfer+0xb18>
 800c90a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c90e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c916:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c91a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c924:	b29b      	uxth	r3, r3
 800c926:	461a      	mov	r2, r3
 800c928:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c92a:	4413      	add	r3, r2
 800c92c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	00da      	lsls	r2, r3, #3
 800c93c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c93e:	4413      	add	r3, r2
 800c940:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c944:	667b      	str	r3, [r7, #100]	@ 0x64
 800c946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c948:	881b      	ldrh	r3, [r3, #0]
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c950:	b29a      	uxth	r2, r3
 800c952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c954:	801a      	strh	r2, [r3, #0]
 800c956:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c95a:	2b3e      	cmp	r3, #62	@ 0x3e
 800c95c:	d921      	bls.n	800c9a2 <USB_EPStartXfer+0xac0>
 800c95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c962:	095b      	lsrs	r3, r3, #5
 800c964:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c96c:	f003 031f 	and.w	r3, r3, #31
 800c970:	2b00      	cmp	r3, #0
 800c972:	d104      	bne.n	800c97e <USB_EPStartXfer+0xa9c>
 800c974:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c978:	3b01      	subs	r3, #1
 800c97a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c97e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	b29a      	uxth	r2, r3
 800c984:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c988:	b29b      	uxth	r3, r3
 800c98a:	029b      	lsls	r3, r3, #10
 800c98c:	b29b      	uxth	r3, r3
 800c98e:	4313      	orrs	r3, r2
 800c990:	b29b      	uxth	r3, r3
 800c992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c99a:	b29a      	uxth	r2, r3
 800c99c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c99e:	801a      	strh	r2, [r3, #0]
 800c9a0:	e050      	b.n	800ca44 <USB_EPStartXfer+0xb62>
 800c9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d10a      	bne.n	800c9c0 <USB_EPStartXfer+0xade>
 800c9aa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9ac:	881b      	ldrh	r3, [r3, #0]
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c9b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9b8:	b29a      	uxth	r2, r3
 800c9ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9bc:	801a      	strh	r2, [r3, #0]
 800c9be:	e041      	b.n	800ca44 <USB_EPStartXfer+0xb62>
 800c9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9c4:	085b      	lsrs	r3, r3, #1
 800c9c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ce:	f003 0301 	and.w	r3, r3, #1
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d004      	beq.n	800c9e0 <USB_EPStartXfer+0xafe>
 800c9d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c9da:	3301      	adds	r3, #1
 800c9dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c9e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9e2:	881b      	ldrh	r3, [r3, #0]
 800c9e4:	b29a      	uxth	r2, r3
 800c9e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	029b      	lsls	r3, r3, #10
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	4313      	orrs	r3, r2
 800c9f2:	b29a      	uxth	r2, r3
 800c9f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9f6:	801a      	strh	r2, [r3, #0]
 800c9f8:	e024      	b.n	800ca44 <USB_EPStartXfer+0xb62>
 800c9fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	785b      	ldrb	r3, [r3, #1]
 800ca06:	2b01      	cmp	r3, #1
 800ca08:	d11c      	bne.n	800ca44 <USB_EPStartXfer+0xb62>
 800ca0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca1e:	4413      	add	r3, r2
 800ca20:	673b      	str	r3, [r7, #112]	@ 0x70
 800ca22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	00da      	lsls	r2, r3, #3
 800ca30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ca32:	4413      	add	r3, r2
 800ca34:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3e:	b29a      	uxth	r2, r3
 800ca40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ca42:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ca44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	895b      	ldrh	r3, [r3, #10]
 800ca50:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	6959      	ldr	r1, [r3, #20]
 800ca60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ca6a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ca6e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ca72:	6800      	ldr	r0, [r0, #0]
 800ca74:	f000 ff20 	bl	800d8b8 <USB_WritePMA>
 800ca78:	e0ca      	b.n	800cc10 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ca7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	785b      	ldrb	r3, [r3, #1]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d177      	bne.n	800cb7a <USB_EPStartXfer+0xc98>
 800ca8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ca96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800caa4:	b29b      	uxth	r3, r3
 800caa6:	461a      	mov	r2, r3
 800caa8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800caaa:	4413      	add	r3, r2
 800caac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800caae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cab2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	781b      	ldrb	r3, [r3, #0]
 800caba:	00da      	lsls	r2, r3, #3
 800cabc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cabe:	4413      	add	r3, r2
 800cac0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cac4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cac6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cac8:	881b      	ldrh	r3, [r3, #0]
 800caca:	b29b      	uxth	r3, r3
 800cacc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cad4:	801a      	strh	r2, [r3, #0]
 800cad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cada:	2b3e      	cmp	r3, #62	@ 0x3e
 800cadc:	d921      	bls.n	800cb22 <USB_EPStartXfer+0xc40>
 800cade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cae2:	095b      	lsrs	r3, r3, #5
 800cae4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caec:	f003 031f 	and.w	r3, r3, #31
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <USB_EPStartXfer+0xc1c>
 800caf4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800caf8:	3b01      	subs	r3, #1
 800cafa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cafe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb00:	881b      	ldrh	r3, [r3, #0]
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	029b      	lsls	r3, r3, #10
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb1e:	801a      	strh	r2, [r3, #0]
 800cb20:	e05c      	b.n	800cbdc <USB_EPStartXfer+0xcfa>
 800cb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d10a      	bne.n	800cb40 <USB_EPStartXfer+0xc5e>
 800cb2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb2c:	881b      	ldrh	r3, [r3, #0]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb3c:	801a      	strh	r2, [r3, #0]
 800cb3e:	e04d      	b.n	800cbdc <USB_EPStartXfer+0xcfa>
 800cb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb44:	085b      	lsrs	r3, r3, #1
 800cb46:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cb4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb4e:	f003 0301 	and.w	r3, r3, #1
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d004      	beq.n	800cb60 <USB_EPStartXfer+0xc7e>
 800cb56:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cb5a:	3301      	adds	r3, #1
 800cb5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cb60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb62:	881b      	ldrh	r3, [r3, #0]
 800cb64:	b29a      	uxth	r2, r3
 800cb66:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	029b      	lsls	r3, r3, #10
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	4313      	orrs	r3, r2
 800cb72:	b29a      	uxth	r2, r3
 800cb74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb76:	801a      	strh	r2, [r3, #0]
 800cb78:	e030      	b.n	800cbdc <USB_EPStartXfer+0xcfa>
 800cb7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	785b      	ldrb	r3, [r3, #1]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d128      	bne.n	800cbdc <USB_EPStartXfer+0xcfa>
 800cb8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cb98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	461a      	mov	r2, r3
 800cbaa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cbae:	4413      	add	r3, r2
 800cbb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cbb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	00da      	lsls	r2, r3, #3
 800cbc2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cbc6:	4413      	add	r3, r2
 800cbc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cbcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cbd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cbda:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cbdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	891b      	ldrh	r3, [r3, #8]
 800cbe8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	6959      	ldr	r1, [r3, #20]
 800cbf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc02:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cc06:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cc0a:	6800      	ldr	r0, [r0, #0]
 800cc0c:	f000 fe54 	bl	800d8b8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cc10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	881b      	ldrh	r3, [r3, #0]
 800cc2c:	b29b      	uxth	r3, r3
 800cc2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc36:	817b      	strh	r3, [r7, #10]
 800cc38:	897b      	ldrh	r3, [r7, #10]
 800cc3a:	f083 0310 	eor.w	r3, r3, #16
 800cc3e:	817b      	strh	r3, [r7, #10]
 800cc40:	897b      	ldrh	r3, [r7, #10]
 800cc42:	f083 0320 	eor.w	r3, r3, #32
 800cc46:	817b      	strh	r3, [r7, #10]
 800cc48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc50:	681a      	ldr	r2, [r3, #0]
 800cc52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	781b      	ldrb	r3, [r3, #0]
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	441a      	add	r2, r3
 800cc62:	897b      	ldrh	r3, [r7, #10]
 800cc64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	8013      	strh	r3, [r2, #0]
 800cc78:	f000 bcde 	b.w	800d638 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cc7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	7b1b      	ldrb	r3, [r3, #12]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	f040 80bb 	bne.w	800ce04 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	699a      	ldr	r2, [r3, #24]
 800cc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d917      	bls.n	800ccda <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800ccaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	691b      	ldr	r3, [r3, #16]
 800ccb6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800ccba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	699a      	ldr	r2, [r3, #24]
 800ccc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccca:	1ad2      	subs	r2, r2, r3
 800cccc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	619a      	str	r2, [r3, #24]
 800ccd8:	e00e      	b.n	800ccf8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ccda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	699b      	ldr	r3, [r3, #24]
 800cce6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800ccea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ccf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	461a      	mov	r2, r3
 800cd18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cd1c:	4413      	add	r3, r2
 800cd1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cd22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	781b      	ldrb	r3, [r3, #0]
 800cd2e:	00da      	lsls	r2, r3, #3
 800cd30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cd34:	4413      	add	r3, r2
 800cd36:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cd3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800cd3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd42:	881b      	ldrh	r3, [r3, #0]
 800cd44:	b29b      	uxth	r3, r3
 800cd46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd50:	801a      	strh	r2, [r3, #0]
 800cd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd56:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd58:	d924      	bls.n	800cda4 <USB_EPStartXfer+0xec2>
 800cd5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd5e:	095b      	lsrs	r3, r3, #5
 800cd60:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd68:	f003 031f 	and.w	r3, r3, #31
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d104      	bne.n	800cd7a <USB_EPStartXfer+0xe98>
 800cd70:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cd74:	3b01      	subs	r3, #1
 800cd76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cd7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd7e:	881b      	ldrh	r3, [r3, #0]
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cd86:	b29b      	uxth	r3, r3
 800cd88:	029b      	lsls	r3, r3, #10
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cd9e:	801a      	strh	r2, [r3, #0]
 800cda0:	f000 bc10 	b.w	800d5c4 <USB_EPStartXfer+0x16e2>
 800cda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d10c      	bne.n	800cdc6 <USB_EPStartXfer+0xee4>
 800cdac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdb0:	881b      	ldrh	r3, [r3, #0]
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdbc:	b29a      	uxth	r2, r3
 800cdbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdc2:	801a      	strh	r2, [r3, #0]
 800cdc4:	e3fe      	b.n	800d5c4 <USB_EPStartXfer+0x16e2>
 800cdc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdca:	085b      	lsrs	r3, r3, #1
 800cdcc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cdd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd4:	f003 0301 	and.w	r3, r3, #1
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d004      	beq.n	800cde6 <USB_EPStartXfer+0xf04>
 800cddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cde0:	3301      	adds	r3, #1
 800cde2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cde6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	029b      	lsls	r3, r3, #10
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce00:	801a      	strh	r2, [r3, #0]
 800ce02:	e3df      	b.n	800d5c4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ce04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	78db      	ldrb	r3, [r3, #3]
 800ce10:	2b02      	cmp	r3, #2
 800ce12:	f040 8218 	bne.w	800d246 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ce16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	785b      	ldrb	r3, [r3, #1]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f040 809d 	bne.w	800cf62 <USB_EPStartXfer+0x1080>
 800ce28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	461a      	mov	r2, r3
 800ce48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ce52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	781b      	ldrb	r3, [r3, #0]
 800ce5e:	00da      	lsls	r2, r3, #3
 800ce60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce64:	4413      	add	r3, r2
 800ce66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce72:	881b      	ldrh	r3, [r3, #0]
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce7a:	b29a      	uxth	r2, r3
 800ce7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce80:	801a      	strh	r2, [r3, #0]
 800ce82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	691b      	ldr	r3, [r3, #16]
 800ce8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce90:	d92b      	bls.n	800ceea <USB_EPStartXfer+0x1008>
 800ce92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	095b      	lsrs	r3, r3, #5
 800cea0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cea8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	f003 031f 	and.w	r3, r3, #31
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d104      	bne.n	800cec2 <USB_EPStartXfer+0xfe0>
 800ceb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cebc:	3b01      	subs	r3, #1
 800cebe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cec2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	b29a      	uxth	r2, r3
 800ceca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cece:	b29b      	uxth	r3, r3
 800ced0:	029b      	lsls	r3, r3, #10
 800ced2:	b29b      	uxth	r3, r3
 800ced4:	4313      	orrs	r3, r2
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cedc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cee6:	801a      	strh	r2, [r3, #0]
 800cee8:	e070      	b.n	800cfcc <USB_EPStartXfer+0x10ea>
 800ceea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10c      	bne.n	800cf14 <USB_EPStartXfer+0x1032>
 800cefa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cefe:	881b      	ldrh	r3, [r3, #0]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf0a:	b29a      	uxth	r2, r3
 800cf0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf10:	801a      	strh	r2, [r3, #0]
 800cf12:	e05b      	b.n	800cfcc <USB_EPStartXfer+0x10ea>
 800cf14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	691b      	ldr	r3, [r3, #16]
 800cf20:	085b      	lsrs	r3, r3, #1
 800cf22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	691b      	ldr	r3, [r3, #16]
 800cf32:	f003 0301 	and.w	r3, r3, #1
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d004      	beq.n	800cf44 <USB_EPStartXfer+0x1062>
 800cf3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf3e:	3301      	adds	r3, #1
 800cf40:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	b29a      	uxth	r2, r3
 800cf4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	029b      	lsls	r3, r3, #10
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	4313      	orrs	r3, r2
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf5e:	801a      	strh	r2, [r3, #0]
 800cf60:	e034      	b.n	800cfcc <USB_EPStartXfer+0x10ea>
 800cf62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	785b      	ldrb	r3, [r3, #1]
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d12c      	bne.n	800cfcc <USB_EPStartXfer+0x10ea>
 800cf72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	461a      	mov	r2, r3
 800cf92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cf96:	4413      	add	r3, r2
 800cf98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	00da      	lsls	r2, r3, #3
 800cfaa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800cfae:	4413      	add	r3, r2
 800cfb0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cfb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cfb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	691b      	ldr	r3, [r3, #16]
 800cfc4:	b29a      	uxth	r2, r3
 800cfc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800cfca:	801a      	strh	r2, [r3, #0]
 800cfcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cfda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	785b      	ldrb	r3, [r3, #1]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f040 809d 	bne.w	800d126 <USB_EPStartXfer+0x1244>
 800cfec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cffe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d008:	b29b      	uxth	r3, r3
 800d00a:	461a      	mov	r2, r3
 800d00c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d010:	4413      	add	r3, r2
 800d012:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	00da      	lsls	r2, r3, #3
 800d024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d028:	4413      	add	r3, r2
 800d02a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d02e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d032:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d036:	881b      	ldrh	r3, [r3, #0]
 800d038:	b29b      	uxth	r3, r3
 800d03a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d03e:	b29a      	uxth	r2, r3
 800d040:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d044:	801a      	strh	r2, [r3, #0]
 800d046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d04a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	2b3e      	cmp	r3, #62	@ 0x3e
 800d054:	d92b      	bls.n	800d0ae <USB_EPStartXfer+0x11cc>
 800d056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d05a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	095b      	lsrs	r3, r3, #5
 800d064:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d06c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	691b      	ldr	r3, [r3, #16]
 800d074:	f003 031f 	and.w	r3, r3, #31
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d104      	bne.n	800d086 <USB_EPStartXfer+0x11a4>
 800d07c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d080:	3b01      	subs	r3, #1
 800d082:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d086:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d08a:	881b      	ldrh	r3, [r3, #0]
 800d08c:	b29a      	uxth	r2, r3
 800d08e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d092:	b29b      	uxth	r3, r3
 800d094:	029b      	lsls	r3, r3, #10
 800d096:	b29b      	uxth	r3, r3
 800d098:	4313      	orrs	r3, r2
 800d09a:	b29b      	uxth	r3, r3
 800d09c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0aa:	801a      	strh	r2, [r3, #0]
 800d0ac:	e069      	b.n	800d182 <USB_EPStartXfer+0x12a0>
 800d0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	691b      	ldr	r3, [r3, #16]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d10c      	bne.n	800d0d8 <USB_EPStartXfer+0x11f6>
 800d0be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	b29b      	uxth	r3, r3
 800d0c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0ce:	b29a      	uxth	r2, r3
 800d0d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0d4:	801a      	strh	r2, [r3, #0]
 800d0d6:	e054      	b.n	800d182 <USB_EPStartXfer+0x12a0>
 800d0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	691b      	ldr	r3, [r3, #16]
 800d0e4:	085b      	lsrs	r3, r3, #1
 800d0e6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	f003 0301 	and.w	r3, r3, #1
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d004      	beq.n	800d108 <USB_EPStartXfer+0x1226>
 800d0fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d102:	3301      	adds	r3, #1
 800d104:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d108:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	b29a      	uxth	r2, r3
 800d110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d114:	b29b      	uxth	r3, r3
 800d116:	029b      	lsls	r3, r3, #10
 800d118:	b29b      	uxth	r3, r3
 800d11a:	4313      	orrs	r3, r2
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d122:	801a      	strh	r2, [r3, #0]
 800d124:	e02d      	b.n	800d182 <USB_EPStartXfer+0x12a0>
 800d126:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d12a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	785b      	ldrb	r3, [r3, #1]
 800d132:	2b01      	cmp	r3, #1
 800d134:	d125      	bne.n	800d182 <USB_EPStartXfer+0x12a0>
 800d136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d13a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d144:	b29b      	uxth	r3, r3
 800d146:	461a      	mov	r2, r3
 800d148:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d14c:	4413      	add	r3, r2
 800d14e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d152:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d156:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	00da      	lsls	r2, r3, #3
 800d160:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d164:	4413      	add	r3, r2
 800d166:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d16a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	691b      	ldr	r3, [r3, #16]
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d180:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d186:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	69db      	ldr	r3, [r3, #28]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	f000 8218 	beq.w	800d5c4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d198:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	781b      	ldrb	r3, [r3, #0]
 800d1aa:	009b      	lsls	r3, r3, #2
 800d1ac:	4413      	add	r3, r2
 800d1ae:	881b      	ldrh	r3, [r3, #0]
 800d1b0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d1b4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d1b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d005      	beq.n	800d1cc <USB_EPStartXfer+0x12ea>
 800d1c0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d1c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d10d      	bne.n	800d1e8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d1cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d1d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	f040 81f5 	bne.w	800d5c4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d1da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f040 81ee 	bne.w	800d5c4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d1e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1f0:	681a      	ldr	r2, [r3, #0]
 800d1f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	009b      	lsls	r3, r3, #2
 800d200:	4413      	add	r3, r2
 800d202:	881b      	ldrh	r3, [r3, #0]
 800d204:	b29b      	uxth	r3, r3
 800d206:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d20a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d20e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800d212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d216:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d21a:	681a      	ldr	r2, [r3, #0]
 800d21c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	441a      	add	r2, r3
 800d22c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d230:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d234:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d238:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d23c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d240:	b29b      	uxth	r3, r3
 800d242:	8013      	strh	r3, [r2, #0]
 800d244:	e1be      	b.n	800d5c4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	78db      	ldrb	r3, [r3, #3]
 800d252:	2b01      	cmp	r3, #1
 800d254:	f040 81b4 	bne.w	800d5c0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	699a      	ldr	r2, [r3, #24]
 800d264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	691b      	ldr	r3, [r3, #16]
 800d270:	429a      	cmp	r2, r3
 800d272:	d917      	bls.n	800d2a4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800d274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	691b      	ldr	r3, [r3, #16]
 800d280:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800d284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d288:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	699a      	ldr	r2, [r3, #24]
 800d290:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d294:	1ad2      	subs	r2, r2, r3
 800d296:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d29a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	619a      	str	r2, [r3, #24]
 800d2a2:	e00e      	b.n	800d2c2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800d2a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	699b      	ldr	r3, [r3, #24]
 800d2b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800d2b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d2c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	785b      	ldrb	r3, [r3, #1]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	f040 8085 	bne.w	800d3de <USB_EPStartXfer+0x14fc>
 800d2d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d2e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	461a      	mov	r2, r3
 800d2f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d2f8:	4413      	add	r3, r2
 800d2fa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d2fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d302:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	781b      	ldrb	r3, [r3, #0]
 800d30a:	00da      	lsls	r2, r3, #3
 800d30c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d310:	4413      	add	r3, r2
 800d312:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d316:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d31a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	b29b      	uxth	r3, r3
 800d322:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d326:	b29a      	uxth	r2, r3
 800d328:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d32c:	801a      	strh	r2, [r3, #0]
 800d32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d332:	2b3e      	cmp	r3, #62	@ 0x3e
 800d334:	d923      	bls.n	800d37e <USB_EPStartXfer+0x149c>
 800d336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d33a:	095b      	lsrs	r3, r3, #5
 800d33c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d344:	f003 031f 	and.w	r3, r3, #31
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d104      	bne.n	800d356 <USB_EPStartXfer+0x1474>
 800d34c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d350:	3b01      	subs	r3, #1
 800d352:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d356:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d35a:	881b      	ldrh	r3, [r3, #0]
 800d35c:	b29a      	uxth	r2, r3
 800d35e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d362:	b29b      	uxth	r3, r3
 800d364:	029b      	lsls	r3, r3, #10
 800d366:	b29b      	uxth	r3, r3
 800d368:	4313      	orrs	r3, r2
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d370:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d374:	b29a      	uxth	r2, r3
 800d376:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d37a:	801a      	strh	r2, [r3, #0]
 800d37c:	e060      	b.n	800d440 <USB_EPStartXfer+0x155e>
 800d37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d382:	2b00      	cmp	r3, #0
 800d384:	d10c      	bne.n	800d3a0 <USB_EPStartXfer+0x14be>
 800d386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d38a:	881b      	ldrh	r3, [r3, #0]
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d396:	b29a      	uxth	r2, r3
 800d398:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d39c:	801a      	strh	r2, [r3, #0]
 800d39e:	e04f      	b.n	800d440 <USB_EPStartXfer+0x155e>
 800d3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a4:	085b      	lsrs	r3, r3, #1
 800d3a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d004      	beq.n	800d3c0 <USB_EPStartXfer+0x14de>
 800d3b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3ba:	3301      	adds	r3, #1
 800d3bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d3c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3c4:	881b      	ldrh	r3, [r3, #0]
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d3cc:	b29b      	uxth	r3, r3
 800d3ce:	029b      	lsls	r3, r3, #10
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	4313      	orrs	r3, r2
 800d3d4:	b29a      	uxth	r2, r3
 800d3d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3da:	801a      	strh	r2, [r3, #0]
 800d3dc:	e030      	b.n	800d440 <USB_EPStartXfer+0x155e>
 800d3de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	785b      	ldrb	r3, [r3, #1]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d128      	bne.n	800d440 <USB_EPStartXfer+0x155e>
 800d3ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d400:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	461a      	mov	r2, r3
 800d40e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d412:	4413      	add	r3, r2
 800d414:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d41c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	781b      	ldrb	r3, [r3, #0]
 800d424:	00da      	lsls	r2, r3, #3
 800d426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d42a:	4413      	add	r3, r2
 800d42c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d438:	b29a      	uxth	r2, r3
 800d43a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d43e:	801a      	strh	r2, [r3, #0]
 800d440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	785b      	ldrb	r3, [r3, #1]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f040 8085 	bne.w	800d56a <USB_EPStartXfer+0x1688>
 800d460:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d464:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d472:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d47c:	b29b      	uxth	r3, r3
 800d47e:	461a      	mov	r2, r3
 800d480:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d484:	4413      	add	r3, r2
 800d486:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	00da      	lsls	r2, r3, #3
 800d498:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d49c:	4413      	add	r3, r2
 800d49e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d4a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	b29b      	uxth	r3, r3
 800d4ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d4b2:	b29a      	uxth	r2, r3
 800d4b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4b8:	801a      	strh	r2, [r3, #0]
 800d4ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4be:	2b3e      	cmp	r3, #62	@ 0x3e
 800d4c0:	d923      	bls.n	800d50a <USB_EPStartXfer+0x1628>
 800d4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c6:	095b      	lsrs	r3, r3, #5
 800d4c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d0:	f003 031f 	and.w	r3, r3, #31
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d104      	bne.n	800d4e2 <USB_EPStartXfer+0x1600>
 800d4d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4dc:	3b01      	subs	r3, #1
 800d4de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d4e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d4e6:	881b      	ldrh	r3, [r3, #0]
 800d4e8:	b29a      	uxth	r2, r3
 800d4ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d4ee:	b29b      	uxth	r3, r3
 800d4f0:	029b      	lsls	r3, r3, #10
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	4313      	orrs	r3, r2
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d500:	b29a      	uxth	r2, r3
 800d502:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d506:	801a      	strh	r2, [r3, #0]
 800d508:	e05c      	b.n	800d5c4 <USB_EPStartXfer+0x16e2>
 800d50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d10c      	bne.n	800d52c <USB_EPStartXfer+0x164a>
 800d512:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	b29b      	uxth	r3, r3
 800d51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d522:	b29a      	uxth	r2, r3
 800d524:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d528:	801a      	strh	r2, [r3, #0]
 800d52a:	e04b      	b.n	800d5c4 <USB_EPStartXfer+0x16e2>
 800d52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d530:	085b      	lsrs	r3, r3, #1
 800d532:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <USB_EPStartXfer+0x166a>
 800d542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d546:	3301      	adds	r3, #1
 800d548:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d54c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	b29a      	uxth	r2, r3
 800d554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d558:	b29b      	uxth	r3, r3
 800d55a:	029b      	lsls	r3, r3, #10
 800d55c:	b29b      	uxth	r3, r3
 800d55e:	4313      	orrs	r3, r2
 800d560:	b29a      	uxth	r2, r3
 800d562:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d566:	801a      	strh	r2, [r3, #0]
 800d568:	e02c      	b.n	800d5c4 <USB_EPStartXfer+0x16e2>
 800d56a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d56e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	785b      	ldrb	r3, [r3, #1]
 800d576:	2b01      	cmp	r3, #1
 800d578:	d124      	bne.n	800d5c4 <USB_EPStartXfer+0x16e2>
 800d57a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d57e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d588:	b29b      	uxth	r3, r3
 800d58a:	461a      	mov	r2, r3
 800d58c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d590:	4413      	add	r3, r2
 800d592:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d59a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	781b      	ldrb	r3, [r3, #0]
 800d5a2:	00da      	lsls	r2, r3, #3
 800d5a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d5a8:	4413      	add	r3, r2
 800d5aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d5ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5b6:	b29a      	uxth	r2, r3
 800d5b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d5bc:	801a      	strh	r2, [r3, #0]
 800d5be:	e001      	b.n	800d5c4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	e03a      	b.n	800d63a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d5c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	781b      	ldrb	r3, [r3, #0]
 800d5da:	009b      	lsls	r3, r3, #2
 800d5dc:	4413      	add	r3, r2
 800d5de:	881b      	ldrh	r3, [r3, #0]
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d5e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5ea:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d5ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d5f2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d5f6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d5fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d5fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d602:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d60a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	009b      	lsls	r3, r3, #2
 800d61e:	441a      	add	r2, r3
 800d620:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d624:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d628:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d62c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d634:	b29b      	uxth	r3, r3
 800d636:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d638:	2300      	movs	r3, #0
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d640:	46bd      	mov	sp, r7
 800d642:	bd80      	pop	{r7, pc}

0800d644 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
 800d64c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d64e:	683b      	ldr	r3, [r7, #0]
 800d650:	785b      	ldrb	r3, [r3, #1]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d020      	beq.n	800d698 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d656:	687a      	ldr	r2, [r7, #4]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	781b      	ldrb	r3, [r3, #0]
 800d65c:	009b      	lsls	r3, r3, #2
 800d65e:	4413      	add	r3, r2
 800d660:	881b      	ldrh	r3, [r3, #0]
 800d662:	b29b      	uxth	r3, r3
 800d664:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d66c:	81bb      	strh	r3, [r7, #12]
 800d66e:	89bb      	ldrh	r3, [r7, #12]
 800d670:	f083 0310 	eor.w	r3, r3, #16
 800d674:	81bb      	strh	r3, [r7, #12]
 800d676:	687a      	ldr	r2, [r7, #4]
 800d678:	683b      	ldr	r3, [r7, #0]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	441a      	add	r2, r3
 800d680:	89bb      	ldrh	r3, [r7, #12]
 800d682:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d686:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d68a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d68e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d692:	b29b      	uxth	r3, r3
 800d694:	8013      	strh	r3, [r2, #0]
 800d696:	e01f      	b.n	800d6d8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ae:	81fb      	strh	r3, [r7, #14]
 800d6b0:	89fb      	ldrh	r3, [r7, #14]
 800d6b2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d6b6:	81fb      	strh	r3, [r7, #14]
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	009b      	lsls	r3, r3, #2
 800d6c0:	441a      	add	r2, r3
 800d6c2:	89fb      	ldrh	r3, [r7, #14]
 800d6c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6d4:	b29b      	uxth	r3, r3
 800d6d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr

0800d6e6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d6e6:	b480      	push	{r7}
 800d6e8:	b087      	sub	sp, #28
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	7b1b      	ldrb	r3, [r3, #12]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	f040 809d 	bne.w	800d834 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	785b      	ldrb	r3, [r3, #1]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d04c      	beq.n	800d79c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	009b      	lsls	r3, r3, #2
 800d70a:	4413      	add	r3, r2
 800d70c:	881b      	ldrh	r3, [r3, #0]
 800d70e:	823b      	strh	r3, [r7, #16]
 800d710:	8a3b      	ldrh	r3, [r7, #16]
 800d712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d716:	2b00      	cmp	r3, #0
 800d718:	d01b      	beq.n	800d752 <USB_EPClearStall+0x6c>
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	b29b      	uxth	r3, r3
 800d728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d72c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d730:	81fb      	strh	r3, [r7, #14]
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	781b      	ldrb	r3, [r3, #0]
 800d738:	009b      	lsls	r3, r3, #2
 800d73a:	441a      	add	r2, r3
 800d73c:	89fb      	ldrh	r3, [r7, #14]
 800d73e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d742:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d746:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d74a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d74e:	b29b      	uxth	r3, r3
 800d750:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	78db      	ldrb	r3, [r3, #3]
 800d756:	2b01      	cmp	r3, #1
 800d758:	d06c      	beq.n	800d834 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	781b      	ldrb	r3, [r3, #0]
 800d760:	009b      	lsls	r3, r3, #2
 800d762:	4413      	add	r3, r2
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	b29b      	uxth	r3, r3
 800d768:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d76c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d770:	81bb      	strh	r3, [r7, #12]
 800d772:	89bb      	ldrh	r3, [r7, #12]
 800d774:	f083 0320 	eor.w	r3, r3, #32
 800d778:	81bb      	strh	r3, [r7, #12]
 800d77a:	687a      	ldr	r2, [r7, #4]
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	441a      	add	r2, r3
 800d784:	89bb      	ldrh	r3, [r7, #12]
 800d786:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d78a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d78e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d792:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d796:	b29b      	uxth	r3, r3
 800d798:	8013      	strh	r3, [r2, #0]
 800d79a:	e04b      	b.n	800d834 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	009b      	lsls	r3, r3, #2
 800d7a4:	4413      	add	r3, r2
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	82fb      	strh	r3, [r7, #22]
 800d7aa:	8afb      	ldrh	r3, [r7, #22]
 800d7ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d01b      	beq.n	800d7ec <USB_EPClearStall+0x106>
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7ca:	82bb      	strh	r3, [r7, #20]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	441a      	add	r2, r3
 800d7d6:	8abb      	ldrh	r3, [r7, #20]
 800d7d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d7e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7e8:	b29b      	uxth	r3, r3
 800d7ea:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	781b      	ldrb	r3, [r3, #0]
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	881b      	ldrh	r3, [r3, #0]
 800d7f8:	b29b      	uxth	r3, r3
 800d7fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d7fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d802:	827b      	strh	r3, [r7, #18]
 800d804:	8a7b      	ldrh	r3, [r7, #18]
 800d806:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d80a:	827b      	strh	r3, [r7, #18]
 800d80c:	8a7b      	ldrh	r3, [r7, #18]
 800d80e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d812:	827b      	strh	r3, [r7, #18]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	441a      	add	r2, r3
 800d81e:	8a7b      	ldrh	r3, [r7, #18]
 800d820:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d824:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d828:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d82c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d830:	b29b      	uxth	r3, r3
 800d832:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	371c      	adds	r7, #28
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr

0800d842 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d842:	b480      	push	{r7}
 800d844:	b083      	sub	sp, #12
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
 800d84a:	460b      	mov	r3, r1
 800d84c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d84e:	78fb      	ldrb	r3, [r7, #3]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d103      	bne.n	800d85c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2280      	movs	r2, #128	@ 0x80
 800d858:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d86a:	b480      	push	{r7}
 800d86c:	b083      	sub	sp, #12
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d878:	b29b      	uxth	r3, r3
 800d87a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d87e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d882:	b29a      	uxth	r2, r3
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	370c      	adds	r7, #12
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr

0800d898 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3714      	adds	r7, #20
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr

0800d8b8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b08b      	sub	sp, #44	@ 0x2c
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	80fb      	strh	r3, [r7, #6]
 800d8ca:	4613      	mov	r3, r2
 800d8cc:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d8ce:	88bb      	ldrh	r3, [r7, #4]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	085b      	lsrs	r3, r3, #1
 800d8d4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d8da:	68bb      	ldr	r3, [r7, #8]
 800d8dc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d8de:	88fa      	ldrh	r2, [r7, #6]
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8e8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	627b      	str	r3, [r7, #36]	@ 0x24
 800d8ee:	e01b      	b.n	800d928 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d8f6:	69fb      	ldr	r3, [r7, #28]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	021b      	lsls	r3, r3, #8
 800d8fe:	b21a      	sxth	r2, r3
 800d900:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d904:	4313      	orrs	r3, r2
 800d906:	b21b      	sxth	r3, r3
 800d908:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d90a:	6a3b      	ldr	r3, [r7, #32]
 800d90c:	8a7a      	ldrh	r2, [r7, #18]
 800d90e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d910:	6a3b      	ldr	r3, [r7, #32]
 800d912:	3302      	adds	r3, #2
 800d914:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	3301      	adds	r3, #1
 800d91a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	3301      	adds	r3, #1
 800d920:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d924:	3b01      	subs	r3, #1
 800d926:	627b      	str	r3, [r7, #36]	@ 0x24
 800d928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1e0      	bne.n	800d8f0 <USB_WritePMA+0x38>
  }
}
 800d92e:	bf00      	nop
 800d930:	bf00      	nop
 800d932:	372c      	adds	r7, #44	@ 0x2c
 800d934:	46bd      	mov	sp, r7
 800d936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d93a:	4770      	bx	lr

0800d93c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b08b      	sub	sp, #44	@ 0x2c
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	4611      	mov	r1, r2
 800d948:	461a      	mov	r2, r3
 800d94a:	460b      	mov	r3, r1
 800d94c:	80fb      	strh	r3, [r7, #6]
 800d94e:	4613      	mov	r3, r2
 800d950:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d952:	88bb      	ldrh	r3, [r7, #4]
 800d954:	085b      	lsrs	r3, r3, #1
 800d956:	b29b      	uxth	r3, r3
 800d958:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d962:	88fa      	ldrh	r2, [r7, #6]
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	4413      	add	r3, r2
 800d968:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d96c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	627b      	str	r3, [r7, #36]	@ 0x24
 800d972:	e018      	b.n	800d9a6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800d974:	6a3b      	ldr	r3, [r7, #32]
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	b29b      	uxth	r3, r3
 800d97a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d97c:	6a3b      	ldr	r3, [r7, #32]
 800d97e:	3302      	adds	r3, #2
 800d980:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d982:	693b      	ldr	r3, [r7, #16]
 800d984:	b2da      	uxtb	r2, r3
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	3301      	adds	r3, #1
 800d98e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800d990:	693b      	ldr	r3, [r7, #16]
 800d992:	0a1b      	lsrs	r3, r3, #8
 800d994:	b2da      	uxtb	r2, r3
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	3301      	adds	r3, #1
 800d99e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d9a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a2:	3b01      	subs	r3, #1
 800d9a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1e3      	bne.n	800d974 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d9ac:	88bb      	ldrh	r3, [r7, #4]
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d007      	beq.n	800d9c8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800d9b8:	6a3b      	ldr	r3, [r7, #32]
 800d9ba:	881b      	ldrh	r3, [r3, #0]
 800d9bc:	b29b      	uxth	r3, r3
 800d9be:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	69fb      	ldr	r3, [r7, #28]
 800d9c6:	701a      	strb	r2, [r3, #0]
  }
}
 800d9c8:	bf00      	nop
 800d9ca:	372c      	adds	r7, #44	@ 0x2c
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d9e0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800d9e4:	f007 fc68 	bl	80152b8 <USBD_static_malloc>
 800d9e8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d109      	bne.n	800da04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	32b0      	adds	r2, #176	@ 0xb0
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800da00:	2302      	movs	r3, #2
 800da02:	e0d4      	b.n	800dbae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800da04:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800da08:	2100      	movs	r1, #0
 800da0a:	68f8      	ldr	r0, [r7, #12]
 800da0c:	f008 f964 	bl	8015cd8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	32b0      	adds	r2, #176	@ 0xb0
 800da1a:	68f9      	ldr	r1, [r7, #12]
 800da1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	32b0      	adds	r2, #176	@ 0xb0
 800da2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	7c1b      	ldrb	r3, [r3, #16]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d138      	bne.n	800daae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800da3c:	4b5e      	ldr	r3, [pc, #376]	@ (800dbb8 <USBD_CDC_Init+0x1e4>)
 800da3e:	7819      	ldrb	r1, [r3, #0]
 800da40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da44:	2202      	movs	r2, #2
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f007 fadd 	bl	8015006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800da4c:	4b5a      	ldr	r3, [pc, #360]	@ (800dbb8 <USBD_CDC_Init+0x1e4>)
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	f003 020f 	and.w	r2, r3, #15
 800da54:	6879      	ldr	r1, [r7, #4]
 800da56:	4613      	mov	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4413      	add	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	440b      	add	r3, r1
 800da60:	3324      	adds	r3, #36	@ 0x24
 800da62:	2201      	movs	r2, #1
 800da64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800da66:	4b55      	ldr	r3, [pc, #340]	@ (800dbbc <USBD_CDC_Init+0x1e8>)
 800da68:	7819      	ldrb	r1, [r3, #0]
 800da6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800da6e:	2202      	movs	r2, #2
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f007 fac8 	bl	8015006 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800da76:	4b51      	ldr	r3, [pc, #324]	@ (800dbbc <USBD_CDC_Init+0x1e8>)
 800da78:	781b      	ldrb	r3, [r3, #0]
 800da7a:	f003 020f 	and.w	r2, r3, #15
 800da7e:	6879      	ldr	r1, [r7, #4]
 800da80:	4613      	mov	r3, r2
 800da82:	009b      	lsls	r3, r3, #2
 800da84:	4413      	add	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	440b      	add	r3, r1
 800da8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800da8e:	2201      	movs	r2, #1
 800da90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800da92:	4b4b      	ldr	r3, [pc, #300]	@ (800dbc0 <USBD_CDC_Init+0x1ec>)
 800da94:	781b      	ldrb	r3, [r3, #0]
 800da96:	f003 020f 	and.w	r2, r3, #15
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	4613      	mov	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	440b      	add	r3, r1
 800daa6:	3326      	adds	r3, #38	@ 0x26
 800daa8:	2210      	movs	r2, #16
 800daaa:	801a      	strh	r2, [r3, #0]
 800daac:	e035      	b.n	800db1a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800daae:	4b42      	ldr	r3, [pc, #264]	@ (800dbb8 <USBD_CDC_Init+0x1e4>)
 800dab0:	7819      	ldrb	r1, [r3, #0]
 800dab2:	2340      	movs	r3, #64	@ 0x40
 800dab4:	2202      	movs	r2, #2
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f007 faa5 	bl	8015006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dabc:	4b3e      	ldr	r3, [pc, #248]	@ (800dbb8 <USBD_CDC_Init+0x1e4>)
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	f003 020f 	and.w	r2, r3, #15
 800dac4:	6879      	ldr	r1, [r7, #4]
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	440b      	add	r3, r1
 800dad0:	3324      	adds	r3, #36	@ 0x24
 800dad2:	2201      	movs	r2, #1
 800dad4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dad6:	4b39      	ldr	r3, [pc, #228]	@ (800dbbc <USBD_CDC_Init+0x1e8>)
 800dad8:	7819      	ldrb	r1, [r3, #0]
 800dada:	2340      	movs	r3, #64	@ 0x40
 800dadc:	2202      	movs	r2, #2
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f007 fa91 	bl	8015006 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dae4:	4b35      	ldr	r3, [pc, #212]	@ (800dbbc <USBD_CDC_Init+0x1e8>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	f003 020f 	and.w	r2, r3, #15
 800daec:	6879      	ldr	r1, [r7, #4]
 800daee:	4613      	mov	r3, r2
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	4413      	add	r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	440b      	add	r3, r1
 800daf8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dafc:	2201      	movs	r2, #1
 800dafe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800db00:	4b2f      	ldr	r3, [pc, #188]	@ (800dbc0 <USBD_CDC_Init+0x1ec>)
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	f003 020f 	and.w	r2, r3, #15
 800db08:	6879      	ldr	r1, [r7, #4]
 800db0a:	4613      	mov	r3, r2
 800db0c:	009b      	lsls	r3, r3, #2
 800db0e:	4413      	add	r3, r2
 800db10:	009b      	lsls	r3, r3, #2
 800db12:	440b      	add	r3, r1
 800db14:	3326      	adds	r3, #38	@ 0x26
 800db16:	2210      	movs	r2, #16
 800db18:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800db1a:	4b29      	ldr	r3, [pc, #164]	@ (800dbc0 <USBD_CDC_Init+0x1ec>)
 800db1c:	7819      	ldrb	r1, [r3, #0]
 800db1e:	2308      	movs	r3, #8
 800db20:	2203      	movs	r2, #3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f007 fa6f 	bl	8015006 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800db28:	4b25      	ldr	r3, [pc, #148]	@ (800dbc0 <USBD_CDC_Init+0x1ec>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	f003 020f 	and.w	r2, r3, #15
 800db30:	6879      	ldr	r1, [r7, #4]
 800db32:	4613      	mov	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4413      	add	r3, r2
 800db38:	009b      	lsls	r3, r3, #2
 800db3a:	440b      	add	r3, r1
 800db3c:	3324      	adds	r3, #36	@ 0x24
 800db3e:	2201      	movs	r2, #1
 800db40:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2200      	movs	r2, #0
 800db46:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800db50:	687a      	ldr	r2, [r7, #4]
 800db52:	33b0      	adds	r3, #176	@ 0xb0
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4413      	add	r3, r2
 800db58:	685b      	ldr	r3, [r3, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	2200      	movs	r2, #0
 800db62:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800db74:	2b00      	cmp	r3, #0
 800db76:	d101      	bne.n	800db7c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800db78:	2302      	movs	r3, #2
 800db7a:	e018      	b.n	800dbae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	7c1b      	ldrb	r3, [r3, #16]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10a      	bne.n	800db9a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800db84:	4b0d      	ldr	r3, [pc, #52]	@ (800dbbc <USBD_CDC_Init+0x1e8>)
 800db86:	7819      	ldrb	r1, [r3, #0]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800db8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f007 fb26 	bl	80151e4 <USBD_LL_PrepareReceive>
 800db98:	e008      	b.n	800dbac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800db9a:	4b08      	ldr	r3, [pc, #32]	@ (800dbbc <USBD_CDC_Init+0x1e8>)
 800db9c:	7819      	ldrb	r1, [r3, #0]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dba4:	2340      	movs	r3, #64	@ 0x40
 800dba6:	6878      	ldr	r0, [r7, #4]
 800dba8:	f007 fb1c 	bl	80151e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dbac:	2300      	movs	r3, #0
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	2000009f 	.word	0x2000009f
 800dbbc:	200000a0 	.word	0x200000a0
 800dbc0:	200000a1 	.word	0x200000a1

0800dbc4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dbd0:	4b3a      	ldr	r3, [pc, #232]	@ (800dcbc <USBD_CDC_DeInit+0xf8>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	6878      	ldr	r0, [r7, #4]
 800dbd8:	f007 fa3b 	bl	8015052 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dbdc:	4b37      	ldr	r3, [pc, #220]	@ (800dcbc <USBD_CDC_DeInit+0xf8>)
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	f003 020f 	and.w	r2, r3, #15
 800dbe4:	6879      	ldr	r1, [r7, #4]
 800dbe6:	4613      	mov	r3, r2
 800dbe8:	009b      	lsls	r3, r3, #2
 800dbea:	4413      	add	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	440b      	add	r3, r1
 800dbf0:	3324      	adds	r3, #36	@ 0x24
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dbf6:	4b32      	ldr	r3, [pc, #200]	@ (800dcc0 <USBD_CDC_DeInit+0xfc>)
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	4619      	mov	r1, r3
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f007 fa28 	bl	8015052 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dc02:	4b2f      	ldr	r3, [pc, #188]	@ (800dcc0 <USBD_CDC_DeInit+0xfc>)
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	f003 020f 	and.w	r2, r3, #15
 800dc0a:	6879      	ldr	r1, [r7, #4]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	009b      	lsls	r3, r3, #2
 800dc10:	4413      	add	r3, r2
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	440b      	add	r3, r1
 800dc16:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dc1e:	4b29      	ldr	r3, [pc, #164]	@ (800dcc4 <USBD_CDC_DeInit+0x100>)
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	4619      	mov	r1, r3
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f007 fa14 	bl	8015052 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dc2a:	4b26      	ldr	r3, [pc, #152]	@ (800dcc4 <USBD_CDC_DeInit+0x100>)
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	f003 020f 	and.w	r2, r3, #15
 800dc32:	6879      	ldr	r1, [r7, #4]
 800dc34:	4613      	mov	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4413      	add	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	440b      	add	r3, r1
 800dc3e:	3324      	adds	r3, #36	@ 0x24
 800dc40:	2200      	movs	r2, #0
 800dc42:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dc44:	4b1f      	ldr	r3, [pc, #124]	@ (800dcc4 <USBD_CDC_DeInit+0x100>)
 800dc46:	781b      	ldrb	r3, [r3, #0]
 800dc48:	f003 020f 	and.w	r2, r3, #15
 800dc4c:	6879      	ldr	r1, [r7, #4]
 800dc4e:	4613      	mov	r3, r2
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	4413      	add	r3, r2
 800dc54:	009b      	lsls	r3, r3, #2
 800dc56:	440b      	add	r3, r1
 800dc58:	3326      	adds	r3, #38	@ 0x26
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	32b0      	adds	r2, #176	@ 0xb0
 800dc68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d01f      	beq.n	800dcb0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc76:	687a      	ldr	r2, [r7, #4]
 800dc78:	33b0      	adds	r3, #176	@ 0xb0
 800dc7a:	009b      	lsls	r3, r3, #2
 800dc7c:	4413      	add	r3, r2
 800dc7e:	685b      	ldr	r3, [r3, #4]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	32b0      	adds	r2, #176	@ 0xb0
 800dc8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f007 fb1e 	bl	80152d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	32b0      	adds	r2, #176	@ 0xb0
 800dca2:	2100      	movs	r1, #0
 800dca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dcb0:	2300      	movs	r3, #0
}
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	3708      	adds	r7, #8
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	bd80      	pop	{r7, pc}
 800dcba:	bf00      	nop
 800dcbc:	2000009f 	.word	0x2000009f
 800dcc0:	200000a0 	.word	0x200000a0
 800dcc4:	200000a1 	.word	0x200000a1

0800dcc8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	32b0      	adds	r2, #176	@ 0xb0
 800dcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dce0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dce2:	2300      	movs	r3, #0
 800dce4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dce6:	2300      	movs	r3, #0
 800dce8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800dcf4:	2303      	movs	r3, #3
 800dcf6:	e0bf      	b.n	800de78 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d050      	beq.n	800dda6 <USBD_CDC_Setup+0xde>
 800dd04:	2b20      	cmp	r3, #32
 800dd06:	f040 80af 	bne.w	800de68 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	88db      	ldrh	r3, [r3, #6]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d03a      	beq.n	800dd88 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	b25b      	sxtb	r3, r3
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da1b      	bge.n	800dd54 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	33b0      	adds	r3, #176	@ 0xb0
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	683a      	ldr	r2, [r7, #0]
 800dd30:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800dd32:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dd34:	683a      	ldr	r2, [r7, #0]
 800dd36:	88d2      	ldrh	r2, [r2, #6]
 800dd38:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	88db      	ldrh	r3, [r3, #6]
 800dd3e:	2b07      	cmp	r3, #7
 800dd40:	bf28      	it	cs
 800dd42:	2307      	movcs	r3, #7
 800dd44:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	89fa      	ldrh	r2, [r7, #14]
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	f001 fd1f 	bl	800f790 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800dd52:	e090      	b.n	800de76 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	785a      	ldrb	r2, [r3, #1]
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	88db      	ldrh	r3, [r3, #6]
 800dd62:	2b3f      	cmp	r3, #63	@ 0x3f
 800dd64:	d803      	bhi.n	800dd6e <USBD_CDC_Setup+0xa6>
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	88db      	ldrh	r3, [r3, #6]
 800dd6a:	b2da      	uxtb	r2, r3
 800dd6c:	e000      	b.n	800dd70 <USBD_CDC_Setup+0xa8>
 800dd6e:	2240      	movs	r2, #64	@ 0x40
 800dd70:	693b      	ldr	r3, [r7, #16]
 800dd72:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800dd76:	6939      	ldr	r1, [r7, #16]
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800dd7e:	461a      	mov	r2, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 fd31 	bl	800f7e8 <USBD_CtlPrepareRx>
      break;
 800dd86:	e076      	b.n	800de76 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	33b0      	adds	r3, #176	@ 0xb0
 800dd92:	009b      	lsls	r3, r3, #2
 800dd94:	4413      	add	r3, r2
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	7850      	ldrb	r0, [r2, #1]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	6839      	ldr	r1, [r7, #0]
 800dda2:	4798      	blx	r3
      break;
 800dda4:	e067      	b.n	800de76 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	785b      	ldrb	r3, [r3, #1]
 800ddaa:	2b0b      	cmp	r3, #11
 800ddac:	d851      	bhi.n	800de52 <USBD_CDC_Setup+0x18a>
 800ddae:	a201      	add	r2, pc, #4	@ (adr r2, 800ddb4 <USBD_CDC_Setup+0xec>)
 800ddb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddb4:	0800dde5 	.word	0x0800dde5
 800ddb8:	0800de61 	.word	0x0800de61
 800ddbc:	0800de53 	.word	0x0800de53
 800ddc0:	0800de53 	.word	0x0800de53
 800ddc4:	0800de53 	.word	0x0800de53
 800ddc8:	0800de53 	.word	0x0800de53
 800ddcc:	0800de53 	.word	0x0800de53
 800ddd0:	0800de53 	.word	0x0800de53
 800ddd4:	0800de53 	.word	0x0800de53
 800ddd8:	0800de53 	.word	0x0800de53
 800dddc:	0800de0f 	.word	0x0800de0f
 800dde0:	0800de39 	.word	0x0800de39
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	2b03      	cmp	r3, #3
 800ddee:	d107      	bne.n	800de00 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ddf0:	f107 030a 	add.w	r3, r7, #10
 800ddf4:	2202      	movs	r2, #2
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f001 fcc9 	bl	800f790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ddfe:	e032      	b.n	800de66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800de00:	6839      	ldr	r1, [r7, #0]
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f001 fc53 	bl	800f6ae <USBD_CtlError>
            ret = USBD_FAIL;
 800de08:	2303      	movs	r3, #3
 800de0a:	75fb      	strb	r3, [r7, #23]
          break;
 800de0c:	e02b      	b.n	800de66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de14:	b2db      	uxtb	r3, r3
 800de16:	2b03      	cmp	r3, #3
 800de18:	d107      	bne.n	800de2a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800de1a:	f107 030d 	add.w	r3, r7, #13
 800de1e:	2201      	movs	r2, #1
 800de20:	4619      	mov	r1, r3
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f001 fcb4 	bl	800f790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800de28:	e01d      	b.n	800de66 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800de2a:	6839      	ldr	r1, [r7, #0]
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f001 fc3e 	bl	800f6ae <USBD_CtlError>
            ret = USBD_FAIL;
 800de32:	2303      	movs	r3, #3
 800de34:	75fb      	strb	r3, [r7, #23]
          break;
 800de36:	e016      	b.n	800de66 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b03      	cmp	r3, #3
 800de42:	d00f      	beq.n	800de64 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800de44:	6839      	ldr	r1, [r7, #0]
 800de46:	6878      	ldr	r0, [r7, #4]
 800de48:	f001 fc31 	bl	800f6ae <USBD_CtlError>
            ret = USBD_FAIL;
 800de4c:	2303      	movs	r3, #3
 800de4e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800de50:	e008      	b.n	800de64 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800de52:	6839      	ldr	r1, [r7, #0]
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f001 fc2a 	bl	800f6ae <USBD_CtlError>
          ret = USBD_FAIL;
 800de5a:	2303      	movs	r3, #3
 800de5c:	75fb      	strb	r3, [r7, #23]
          break;
 800de5e:	e002      	b.n	800de66 <USBD_CDC_Setup+0x19e>
          break;
 800de60:	bf00      	nop
 800de62:	e008      	b.n	800de76 <USBD_CDC_Setup+0x1ae>
          break;
 800de64:	bf00      	nop
      }
      break;
 800de66:	e006      	b.n	800de76 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800de68:	6839      	ldr	r1, [r7, #0]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f001 fc1f 	bl	800f6ae <USBD_CtlError>
      ret = USBD_FAIL;
 800de70:	2303      	movs	r3, #3
 800de72:	75fb      	strb	r3, [r7, #23]
      break;
 800de74:	bf00      	nop
  }

  return (uint8_t)ret;
 800de76:	7dfb      	ldrb	r3, [r7, #23]
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3718      	adds	r7, #24
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	460b      	mov	r3, r1
 800de8a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800de92:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	32b0      	adds	r2, #176	@ 0xb0
 800de9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800dea6:	2303      	movs	r3, #3
 800dea8:	e065      	b.n	800df76 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	32b0      	adds	r2, #176	@ 0xb0
 800deb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800deb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800deba:	78fb      	ldrb	r3, [r7, #3]
 800debc:	f003 020f 	and.w	r2, r3, #15
 800dec0:	6879      	ldr	r1, [r7, #4]
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	440b      	add	r3, r1
 800decc:	3318      	adds	r3, #24
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d02f      	beq.n	800df34 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ded4:	78fb      	ldrb	r3, [r7, #3]
 800ded6:	f003 020f 	and.w	r2, r3, #15
 800deda:	6879      	ldr	r1, [r7, #4]
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	440b      	add	r3, r1
 800dee6:	3318      	adds	r3, #24
 800dee8:	681a      	ldr	r2, [r3, #0]
 800deea:	78fb      	ldrb	r3, [r7, #3]
 800deec:	f003 010f 	and.w	r1, r3, #15
 800def0:	68f8      	ldr	r0, [r7, #12]
 800def2:	460b      	mov	r3, r1
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	440b      	add	r3, r1
 800def8:	00db      	lsls	r3, r3, #3
 800defa:	4403      	add	r3, r0
 800defc:	3320      	adds	r3, #32
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	fbb2 f1f3 	udiv	r1, r2, r3
 800df04:	fb01 f303 	mul.w	r3, r1, r3
 800df08:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d112      	bne.n	800df34 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800df0e:	78fb      	ldrb	r3, [r7, #3]
 800df10:	f003 020f 	and.w	r2, r3, #15
 800df14:	6879      	ldr	r1, [r7, #4]
 800df16:	4613      	mov	r3, r2
 800df18:	009b      	lsls	r3, r3, #2
 800df1a:	4413      	add	r3, r2
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	440b      	add	r3, r1
 800df20:	3318      	adds	r3, #24
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800df26:	78f9      	ldrb	r1, [r7, #3]
 800df28:	2300      	movs	r3, #0
 800df2a:	2200      	movs	r2, #0
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f007 f938 	bl	80151a2 <USBD_LL_Transmit>
 800df32:	e01f      	b.n	800df74 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	2200      	movs	r2, #0
 800df38:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	33b0      	adds	r3, #176	@ 0xb0
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4413      	add	r3, r2
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d010      	beq.n	800df74 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	33b0      	adds	r3, #176	@ 0xb0
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	4413      	add	r3, r2
 800df60:	685b      	ldr	r3, [r3, #4]
 800df62:	691b      	ldr	r3, [r3, #16]
 800df64:	68ba      	ldr	r2, [r7, #8]
 800df66:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800df6a:	68ba      	ldr	r2, [r7, #8]
 800df6c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800df70:	78fa      	ldrb	r2, [r7, #3]
 800df72:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800df74:	2300      	movs	r3, #0
}
 800df76:	4618      	mov	r0, r3
 800df78:	3710      	adds	r7, #16
 800df7a:	46bd      	mov	sp, r7
 800df7c:	bd80      	pop	{r7, pc}

0800df7e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df7e:	b580      	push	{r7, lr}
 800df80:	b084      	sub	sp, #16
 800df82:	af00      	add	r7, sp, #0
 800df84:	6078      	str	r0, [r7, #4]
 800df86:	460b      	mov	r3, r1
 800df88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	32b0      	adds	r2, #176	@ 0xb0
 800df94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df98:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	32b0      	adds	r2, #176	@ 0xb0
 800dfa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d101      	bne.n	800dfb0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800dfac:	2303      	movs	r3, #3
 800dfae:	e01a      	b.n	800dfe6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800dfb0:	78fb      	ldrb	r3, [r7, #3]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f007 f936 	bl	8015226 <USBD_LL_GetRxDataSize>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dfc8:	687a      	ldr	r2, [r7, #4]
 800dfca:	33b0      	adds	r3, #176	@ 0xb0
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	4413      	add	r3, r2
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	68fa      	ldr	r2, [r7, #12]
 800dfd6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800dfda:	68fa      	ldr	r2, [r7, #12]
 800dfdc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800dfe0:	4611      	mov	r1, r2
 800dfe2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800dfe4:	2300      	movs	r3, #0
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3710      	adds	r7, #16
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}

0800dfee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800dfee:	b580      	push	{r7, lr}
 800dff0:	b084      	sub	sp, #16
 800dff2:	af00      	add	r7, sp, #0
 800dff4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	32b0      	adds	r2, #176	@ 0xb0
 800e000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e004:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d101      	bne.n	800e010 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e00c:	2303      	movs	r3, #3
 800e00e:	e024      	b.n	800e05a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e016:	687a      	ldr	r2, [r7, #4]
 800e018:	33b0      	adds	r3, #176	@ 0xb0
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	685b      	ldr	r3, [r3, #4]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d019      	beq.n	800e058 <USBD_CDC_EP0_RxReady+0x6a>
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e02a:	2bff      	cmp	r3, #255	@ 0xff
 800e02c:	d014      	beq.n	800e058 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	33b0      	adds	r3, #176	@ 0xb0
 800e038:	009b      	lsls	r3, r3, #2
 800e03a:	4413      	add	r3, r2
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	689b      	ldr	r3, [r3, #8]
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e046:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e048:	68fa      	ldr	r2, [r7, #12]
 800e04a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e04e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	22ff      	movs	r2, #255	@ 0xff
 800e054:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3710      	adds	r7, #16
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e06c:	2182      	movs	r1, #130	@ 0x82
 800e06e:	4818      	ldr	r0, [pc, #96]	@ (800e0d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e070:	f000 fcbd 	bl	800e9ee <USBD_GetEpDesc>
 800e074:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e076:	2101      	movs	r1, #1
 800e078:	4815      	ldr	r0, [pc, #84]	@ (800e0d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e07a:	f000 fcb8 	bl	800e9ee <USBD_GetEpDesc>
 800e07e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e080:	2181      	movs	r1, #129	@ 0x81
 800e082:	4813      	ldr	r0, [pc, #76]	@ (800e0d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e084:	f000 fcb3 	bl	800e9ee <USBD_GetEpDesc>
 800e088:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e08a:	697b      	ldr	r3, [r7, #20]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e090:	697b      	ldr	r3, [r7, #20]
 800e092:	2210      	movs	r2, #16
 800e094:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d006      	beq.n	800e0aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e0a4:	711a      	strb	r2, [r3, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d006      	beq.n	800e0be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e0b8:	711a      	strb	r2, [r3, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2243      	movs	r2, #67	@ 0x43
 800e0c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e0c4:	4b02      	ldr	r3, [pc, #8]	@ (800e0d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3718      	adds	r7, #24
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	2000005c 	.word	0x2000005c

0800e0d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e0dc:	2182      	movs	r1, #130	@ 0x82
 800e0de:	4818      	ldr	r0, [pc, #96]	@ (800e140 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e0e0:	f000 fc85 	bl	800e9ee <USBD_GetEpDesc>
 800e0e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e0e6:	2101      	movs	r1, #1
 800e0e8:	4815      	ldr	r0, [pc, #84]	@ (800e140 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e0ea:	f000 fc80 	bl	800e9ee <USBD_GetEpDesc>
 800e0ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e0f0:	2181      	movs	r1, #129	@ 0x81
 800e0f2:	4813      	ldr	r0, [pc, #76]	@ (800e140 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e0f4:	f000 fc7b 	bl	800e9ee <USBD_GetEpDesc>
 800e0f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d002      	beq.n	800e106 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	2210      	movs	r2, #16
 800e104:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d006      	beq.n	800e11a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	2200      	movs	r2, #0
 800e110:	711a      	strb	r2, [r3, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	f042 0202 	orr.w	r2, r2, #2
 800e118:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d006      	beq.n	800e12e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	2200      	movs	r2, #0
 800e124:	711a      	strb	r2, [r3, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	f042 0202 	orr.w	r2, r2, #2
 800e12c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2243      	movs	r2, #67	@ 0x43
 800e132:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e134:	4b02      	ldr	r3, [pc, #8]	@ (800e140 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e136:	4618      	mov	r0, r3
 800e138:	3718      	adds	r7, #24
 800e13a:	46bd      	mov	sp, r7
 800e13c:	bd80      	pop	{r7, pc}
 800e13e:	bf00      	nop
 800e140:	2000005c 	.word	0x2000005c

0800e144 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b086      	sub	sp, #24
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e14c:	2182      	movs	r1, #130	@ 0x82
 800e14e:	4818      	ldr	r0, [pc, #96]	@ (800e1b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e150:	f000 fc4d 	bl	800e9ee <USBD_GetEpDesc>
 800e154:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e156:	2101      	movs	r1, #1
 800e158:	4815      	ldr	r0, [pc, #84]	@ (800e1b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e15a:	f000 fc48 	bl	800e9ee <USBD_GetEpDesc>
 800e15e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e160:	2181      	movs	r1, #129	@ 0x81
 800e162:	4813      	ldr	r0, [pc, #76]	@ (800e1b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e164:	f000 fc43 	bl	800e9ee <USBD_GetEpDesc>
 800e168:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d002      	beq.n	800e176 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	2210      	movs	r2, #16
 800e174:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d006      	beq.n	800e18a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e17c:	693b      	ldr	r3, [r7, #16]
 800e17e:	2200      	movs	r2, #0
 800e180:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e184:	711a      	strb	r2, [r3, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d006      	beq.n	800e19e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2200      	movs	r2, #0
 800e194:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e198:	711a      	strb	r2, [r3, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2243      	movs	r2, #67	@ 0x43
 800e1a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1a4:	4b02      	ldr	r3, [pc, #8]	@ (800e1b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3718      	adds	r7, #24
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	2000005c 	.word	0x2000005c

0800e1b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	b083      	sub	sp, #12
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	220a      	movs	r2, #10
 800e1c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e1c2:	4b03      	ldr	r3, [pc, #12]	@ (800e1d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr
 800e1d0:	20000018 	.word	0x20000018

0800e1d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d101      	bne.n	800e1e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e1e4:	2303      	movs	r3, #3
 800e1e6:	e009      	b.n	800e1fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1ee:	687a      	ldr	r2, [r7, #4]
 800e1f0:	33b0      	adds	r3, #176	@ 0xb0
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	4413      	add	r3, r2
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e1fa:	2300      	movs	r3, #0
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	370c      	adds	r7, #12
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e208:	b480      	push	{r7}
 800e20a:	b087      	sub	sp, #28
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	60f8      	str	r0, [r7, #12]
 800e210:	60b9      	str	r1, [r7, #8]
 800e212:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	32b0      	adds	r2, #176	@ 0xb0
 800e21e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e222:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e224:	697b      	ldr	r3, [r7, #20]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d101      	bne.n	800e22e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e22a:	2303      	movs	r3, #3
 800e22c:	e008      	b.n	800e240 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	68ba      	ldr	r2, [r7, #8]
 800e232:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	687a      	ldr	r2, [r7, #4]
 800e23a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e23e:	2300      	movs	r3, #0
}
 800e240:	4618      	mov	r0, r3
 800e242:	371c      	adds	r7, #28
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	32b0      	adds	r2, #176	@ 0xb0
 800e260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e264:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d101      	bne.n	800e270 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e26c:	2303      	movs	r3, #3
 800e26e:	e004      	b.n	800e27a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
	...

0800e288 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	32b0      	adds	r2, #176	@ 0xb0
 800e29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e29e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d101      	bne.n	800e2ae <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e2aa:	2303      	movs	r3, #3
 800e2ac:	e025      	b.n	800e2fa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d11f      	bne.n	800e2f8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e2c0:	4b10      	ldr	r3, [pc, #64]	@ (800e304 <USBD_CDC_TransmitPacket+0x7c>)
 800e2c2:	781b      	ldrb	r3, [r3, #0]
 800e2c4:	f003 020f 	and.w	r2, r3, #15
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	4403      	add	r3, r0
 800e2da:	3318      	adds	r3, #24
 800e2dc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e2de:	4b09      	ldr	r3, [pc, #36]	@ (800e304 <USBD_CDC_TransmitPacket+0x7c>)
 800e2e0:	7819      	ldrb	r1, [r3, #0]
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e2e8:	68bb      	ldr	r3, [r7, #8]
 800e2ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f006 ff57 	bl	80151a2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
 800e302:	bf00      	nop
 800e304:	2000009f 	.word	0x2000009f

0800e308 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	32b0      	adds	r2, #176	@ 0xb0
 800e31a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e31e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	32b0      	adds	r2, #176	@ 0xb0
 800e32a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d101      	bne.n	800e336 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e332:	2303      	movs	r3, #3
 800e334:	e018      	b.n	800e368 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	7c1b      	ldrb	r3, [r3, #16]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d10a      	bne.n	800e354 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e33e:	4b0c      	ldr	r3, [pc, #48]	@ (800e370 <USBD_CDC_ReceivePacket+0x68>)
 800e340:	7819      	ldrb	r1, [r3, #0]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e348:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f006 ff49 	bl	80151e4 <USBD_LL_PrepareReceive>
 800e352:	e008      	b.n	800e366 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e354:	4b06      	ldr	r3, [pc, #24]	@ (800e370 <USBD_CDC_ReceivePacket+0x68>)
 800e356:	7819      	ldrb	r1, [r3, #0]
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e35e:	2340      	movs	r3, #64	@ 0x40
 800e360:	6878      	ldr	r0, [r7, #4]
 800e362:	f006 ff3f 	bl	80151e4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	200000a0 	.word	0x200000a0

0800e374 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	4613      	mov	r3, r2
 800e380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d101      	bne.n	800e38c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e388:	2303      	movs	r3, #3
 800e38a:	e01f      	b.n	800e3cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2200      	movs	r2, #0
 800e390:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2200      	movs	r2, #0
 800e3a0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d003      	beq.n	800e3b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	68ba      	ldr	r2, [r7, #8]
 800e3ae:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	2201      	movs	r2, #1
 800e3b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	79fa      	ldrb	r2, [r7, #7]
 800e3be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f006 fda3 	bl	8014f0c <USBD_LL_Init>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e3ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d101      	bne.n	800e3ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e3e8:	2303      	movs	r3, #3
 800e3ea:	e025      	b.n	800e438 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	683a      	ldr	r2, [r7, #0]
 800e3f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	32ae      	adds	r2, #174	@ 0xae
 800e3fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00f      	beq.n	800e428 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	32ae      	adds	r2, #174	@ 0xae
 800e412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e418:	f107 020e 	add.w	r2, r7, #14
 800e41c:	4610      	mov	r0, r2
 800e41e:	4798      	blx	r3
 800e420:	4602      	mov	r2, r0
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e42e:	1c5a      	adds	r2, r3, #1
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e436:	2300      	movs	r3, #0
}
 800e438:	4618      	mov	r0, r3
 800e43a:	3710      	adds	r7, #16
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}

0800e440 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e440:	b580      	push	{r7, lr}
 800e442:	b082      	sub	sp, #8
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f006 fdc1 	bl	8014fd0 <USBD_LL_Start>
 800e44e:	4603      	mov	r3, r0
}
 800e450:	4618      	mov	r0, r3
 800e452:	3708      	adds	r7, #8
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}

0800e458 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e458:	b480      	push	{r7}
 800e45a:	b083      	sub	sp, #12
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e460:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e462:	4618      	mov	r0, r3
 800e464:	370c      	adds	r7, #12
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr

0800e46e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b084      	sub	sp, #16
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
 800e476:	460b      	mov	r3, r1
 800e478:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e47a:	2300      	movs	r3, #0
 800e47c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e484:	2b00      	cmp	r3, #0
 800e486:	d009      	beq.n	800e49c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	78fa      	ldrb	r2, [r7, #3]
 800e492:	4611      	mov	r1, r2
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	4798      	blx	r3
 800e498:	4603      	mov	r3, r0
 800e49a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e49c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e49e:	4618      	mov	r0, r3
 800e4a0:	3710      	adds	r7, #16
 800e4a2:	46bd      	mov	sp, r7
 800e4a4:	bd80      	pop	{r7, pc}

0800e4a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4a6:	b580      	push	{r7, lr}
 800e4a8:	b084      	sub	sp, #16
 800e4aa:	af00      	add	r7, sp, #0
 800e4ac:	6078      	str	r0, [r7, #4]
 800e4ae:	460b      	mov	r3, r1
 800e4b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	78fa      	ldrb	r2, [r7, #3]
 800e4c0:	4611      	mov	r1, r2
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	4798      	blx	r3
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d001      	beq.n	800e4d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e4cc:	2303      	movs	r3, #3
 800e4ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3710      	adds	r7, #16
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	6078      	str	r0, [r7, #4]
 800e4e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e4ea:	6839      	ldr	r1, [r7, #0]
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	f001 f8a4 	bl	800f63a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2201      	movs	r2, #1
 800e4f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e500:	461a      	mov	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e50e:	f003 031f 	and.w	r3, r3, #31
 800e512:	2b02      	cmp	r3, #2
 800e514:	d01a      	beq.n	800e54c <USBD_LL_SetupStage+0x72>
 800e516:	2b02      	cmp	r3, #2
 800e518:	d822      	bhi.n	800e560 <USBD_LL_SetupStage+0x86>
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d002      	beq.n	800e524 <USBD_LL_SetupStage+0x4a>
 800e51e:	2b01      	cmp	r3, #1
 800e520:	d00a      	beq.n	800e538 <USBD_LL_SetupStage+0x5e>
 800e522:	e01d      	b.n	800e560 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e52a:	4619      	mov	r1, r3
 800e52c:	6878      	ldr	r0, [r7, #4]
 800e52e:	f000 fad1 	bl	800ead4 <USBD_StdDevReq>
 800e532:	4603      	mov	r3, r0
 800e534:	73fb      	strb	r3, [r7, #15]
      break;
 800e536:	e020      	b.n	800e57a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f000 fb39 	bl	800ebb8 <USBD_StdItfReq>
 800e546:	4603      	mov	r3, r0
 800e548:	73fb      	strb	r3, [r7, #15]
      break;
 800e54a:	e016      	b.n	800e57a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e552:	4619      	mov	r1, r3
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f000 fb9b 	bl	800ec90 <USBD_StdEPReq>
 800e55a:	4603      	mov	r3, r0
 800e55c:	73fb      	strb	r3, [r7, #15]
      break;
 800e55e:	e00c      	b.n	800e57a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e566:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e56a:	b2db      	uxtb	r3, r3
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f006 fd8e 	bl	8015090 <USBD_LL_StallEP>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]
      break;
 800e578:	bf00      	nop
  }

  return ret;
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3710      	adds	r7, #16
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}

0800e584 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	460b      	mov	r3, r1
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e592:	2300      	movs	r3, #0
 800e594:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e596:	7afb      	ldrb	r3, [r7, #11]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d16e      	bne.n	800e67a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e5a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e5aa:	2b03      	cmp	r3, #3
 800e5ac:	f040 8098 	bne.w	800e6e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	689a      	ldr	r2, [r3, #8]
 800e5b4:	693b      	ldr	r3, [r7, #16]
 800e5b6:	68db      	ldr	r3, [r3, #12]
 800e5b8:	429a      	cmp	r2, r3
 800e5ba:	d913      	bls.n	800e5e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e5bc:	693b      	ldr	r3, [r7, #16]
 800e5be:	689a      	ldr	r2, [r3, #8]
 800e5c0:	693b      	ldr	r3, [r7, #16]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	1ad2      	subs	r2, r2, r3
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	68da      	ldr	r2, [r3, #12]
 800e5ce:	693b      	ldr	r3, [r7, #16]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	bf28      	it	cs
 800e5d6:	4613      	movcs	r3, r2
 800e5d8:	461a      	mov	r2, r3
 800e5da:	6879      	ldr	r1, [r7, #4]
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f001 f920 	bl	800f822 <USBD_CtlContinueRx>
 800e5e2:	e07d      	b.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5ea:	f003 031f 	and.w	r3, r3, #31
 800e5ee:	2b02      	cmp	r3, #2
 800e5f0:	d014      	beq.n	800e61c <USBD_LL_DataOutStage+0x98>
 800e5f2:	2b02      	cmp	r3, #2
 800e5f4:	d81d      	bhi.n	800e632 <USBD_LL_DataOutStage+0xae>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d002      	beq.n	800e600 <USBD_LL_DataOutStage+0x7c>
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d003      	beq.n	800e606 <USBD_LL_DataOutStage+0x82>
 800e5fe:	e018      	b.n	800e632 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e600:	2300      	movs	r3, #0
 800e602:	75bb      	strb	r3, [r7, #22]
            break;
 800e604:	e018      	b.n	800e638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e60c:	b2db      	uxtb	r3, r3
 800e60e:	4619      	mov	r1, r3
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f000 f9d2 	bl	800e9ba <USBD_CoreFindIF>
 800e616:	4603      	mov	r3, r0
 800e618:	75bb      	strb	r3, [r7, #22]
            break;
 800e61a:	e00d      	b.n	800e638 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e622:	b2db      	uxtb	r3, r3
 800e624:	4619      	mov	r1, r3
 800e626:	68f8      	ldr	r0, [r7, #12]
 800e628:	f000 f9d4 	bl	800e9d4 <USBD_CoreFindEP>
 800e62c:	4603      	mov	r3, r0
 800e62e:	75bb      	strb	r3, [r7, #22]
            break;
 800e630:	e002      	b.n	800e638 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e632:	2300      	movs	r3, #0
 800e634:	75bb      	strb	r3, [r7, #22]
            break;
 800e636:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e638:	7dbb      	ldrb	r3, [r7, #22]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d119      	bne.n	800e672 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e644:	b2db      	uxtb	r3, r3
 800e646:	2b03      	cmp	r3, #3
 800e648:	d113      	bne.n	800e672 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e64a:	7dba      	ldrb	r2, [r7, #22]
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	32ae      	adds	r2, #174	@ 0xae
 800e650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e654:	691b      	ldr	r3, [r3, #16]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d00b      	beq.n	800e672 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e65a:	7dba      	ldrb	r2, [r7, #22]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e662:	7dba      	ldrb	r2, [r7, #22]
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	32ae      	adds	r2, #174	@ 0xae
 800e668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f001 f8e6 	bl	800f844 <USBD_CtlSendStatus>
 800e678:	e032      	b.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e67a:	7afb      	ldrb	r3, [r7, #11]
 800e67c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e680:	b2db      	uxtb	r3, r3
 800e682:	4619      	mov	r1, r3
 800e684:	68f8      	ldr	r0, [r7, #12]
 800e686:	f000 f9a5 	bl	800e9d4 <USBD_CoreFindEP>
 800e68a:	4603      	mov	r3, r0
 800e68c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e68e:	7dbb      	ldrb	r3, [r7, #22]
 800e690:	2bff      	cmp	r3, #255	@ 0xff
 800e692:	d025      	beq.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
 800e694:	7dbb      	ldrb	r3, [r7, #22]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d122      	bne.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	2b03      	cmp	r3, #3
 800e6a4:	d117      	bne.n	800e6d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e6a6:	7dba      	ldrb	r2, [r7, #22]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	32ae      	adds	r2, #174	@ 0xae
 800e6ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b0:	699b      	ldr	r3, [r3, #24]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d00f      	beq.n	800e6d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e6b6:	7dba      	ldrb	r2, [r7, #22]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e6be:	7dba      	ldrb	r2, [r7, #22]
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	32ae      	adds	r2, #174	@ 0xae
 800e6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c8:	699b      	ldr	r3, [r3, #24]
 800e6ca:	7afa      	ldrb	r2, [r7, #11]
 800e6cc:	4611      	mov	r1, r2
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	4798      	blx	r3
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d001      	beq.n	800e6e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e6dc:	7dfb      	ldrb	r3, [r7, #23]
 800e6de:	e000      	b.n	800e6e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e6e0:	2300      	movs	r3, #0
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	3718      	adds	r7, #24
 800e6e6:	46bd      	mov	sp, r7
 800e6e8:	bd80      	pop	{r7, pc}

0800e6ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e6ea:	b580      	push	{r7, lr}
 800e6ec:	b086      	sub	sp, #24
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	60f8      	str	r0, [r7, #12]
 800e6f2:	460b      	mov	r3, r1
 800e6f4:	607a      	str	r2, [r7, #4]
 800e6f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d16f      	bne.n	800e7de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	3314      	adds	r3, #20
 800e702:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d15a      	bne.n	800e7c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e70e:	693b      	ldr	r3, [r7, #16]
 800e710:	689a      	ldr	r2, [r3, #8]
 800e712:	693b      	ldr	r3, [r7, #16]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	429a      	cmp	r2, r3
 800e718:	d914      	bls.n	800e744 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	68db      	ldr	r3, [r3, #12]
 800e722:	1ad2      	subs	r2, r2, r3
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e728:	693b      	ldr	r3, [r7, #16]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	461a      	mov	r2, r3
 800e72e:	6879      	ldr	r1, [r7, #4]
 800e730:	68f8      	ldr	r0, [r7, #12]
 800e732:	f001 f848 	bl	800f7c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e736:	2300      	movs	r3, #0
 800e738:	2200      	movs	r2, #0
 800e73a:	2100      	movs	r1, #0
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f006 fd51 	bl	80151e4 <USBD_LL_PrepareReceive>
 800e742:	e03f      	b.n	800e7c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e744:	693b      	ldr	r3, [r7, #16]
 800e746:	68da      	ldr	r2, [r3, #12]
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	689b      	ldr	r3, [r3, #8]
 800e74c:	429a      	cmp	r2, r3
 800e74e:	d11c      	bne.n	800e78a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e750:	693b      	ldr	r3, [r7, #16]
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	693b      	ldr	r3, [r7, #16]
 800e756:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e758:	429a      	cmp	r2, r3
 800e75a:	d316      	bcc.n	800e78a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e75c:	693b      	ldr	r3, [r7, #16]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e766:	429a      	cmp	r2, r3
 800e768:	d20f      	bcs.n	800e78a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e76a:	2200      	movs	r2, #0
 800e76c:	2100      	movs	r1, #0
 800e76e:	68f8      	ldr	r0, [r7, #12]
 800e770:	f001 f829 	bl	800f7c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	2200      	movs	r2, #0
 800e778:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e77c:	2300      	movs	r3, #0
 800e77e:	2200      	movs	r2, #0
 800e780:	2100      	movs	r1, #0
 800e782:	68f8      	ldr	r0, [r7, #12]
 800e784:	f006 fd2e 	bl	80151e4 <USBD_LL_PrepareReceive>
 800e788:	e01c      	b.n	800e7c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e790:	b2db      	uxtb	r3, r3
 800e792:	2b03      	cmp	r3, #3
 800e794:	d10f      	bne.n	800e7b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e79c:	68db      	ldr	r3, [r3, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d009      	beq.n	800e7b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e7b0:	68db      	ldr	r3, [r3, #12]
 800e7b2:	68f8      	ldr	r0, [r7, #12]
 800e7b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7b6:	2180      	movs	r1, #128	@ 0x80
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f006 fc69 	bl	8015090 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e7be:	68f8      	ldr	r0, [r7, #12]
 800e7c0:	f001 f853 	bl	800f86a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d03a      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f7ff fe42 	bl	800e458 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	2200      	movs	r2, #0
 800e7d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e7dc:	e032      	b.n	800e844 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e7de:	7afb      	ldrb	r3, [r7, #11]
 800e7e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e7e4:	b2db      	uxtb	r3, r3
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	68f8      	ldr	r0, [r7, #12]
 800e7ea:	f000 f8f3 	bl	800e9d4 <USBD_CoreFindEP>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e7f2:	7dfb      	ldrb	r3, [r7, #23]
 800e7f4:	2bff      	cmp	r3, #255	@ 0xff
 800e7f6:	d025      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
 800e7f8:	7dfb      	ldrb	r3, [r7, #23]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d122      	bne.n	800e844 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b03      	cmp	r3, #3
 800e808:	d11c      	bne.n	800e844 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e80a:	7dfa      	ldrb	r2, [r7, #23]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	32ae      	adds	r2, #174	@ 0xae
 800e810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	2b00      	cmp	r3, #0
 800e818:	d014      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e81a:	7dfa      	ldrb	r2, [r7, #23]
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e822:	7dfa      	ldrb	r2, [r7, #23]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	32ae      	adds	r2, #174	@ 0xae
 800e828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e82c:	695b      	ldr	r3, [r3, #20]
 800e82e:	7afa      	ldrb	r2, [r7, #11]
 800e830:	4611      	mov	r1, r2
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	4798      	blx	r3
 800e836:	4603      	mov	r3, r0
 800e838:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e83a:	7dbb      	ldrb	r3, [r7, #22]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d001      	beq.n	800e844 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e840:	7dbb      	ldrb	r3, [r7, #22]
 800e842:	e000      	b.n	800e846 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3718      	adds	r7, #24
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e84e:	b580      	push	{r7, lr}
 800e850:	b084      	sub	sp, #16
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2200      	movs	r2, #0
 800e866:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	2200      	movs	r2, #0
 800e86e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2200      	movs	r2, #0
 800e874:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2200      	movs	r2, #0
 800e87c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e886:	2b00      	cmp	r3, #0
 800e888:	d014      	beq.n	800e8b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e890:	685b      	ldr	r3, [r3, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d00e      	beq.n	800e8b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e89c:	685b      	ldr	r3, [r3, #4]
 800e89e:	687a      	ldr	r2, [r7, #4]
 800e8a0:	6852      	ldr	r2, [r2, #4]
 800e8a2:	b2d2      	uxtb	r2, r2
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	4798      	blx	r3
 800e8aa:	4603      	mov	r3, r0
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d001      	beq.n	800e8b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8b4:	2340      	movs	r3, #64	@ 0x40
 800e8b6:	2200      	movs	r2, #0
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f006 fba3 	bl	8015006 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2240      	movs	r2, #64	@ 0x40
 800e8cc:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8d0:	2340      	movs	r3, #64	@ 0x40
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	2180      	movs	r1, #128	@ 0x80
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f006 fb95 	bl	8015006 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2240      	movs	r2, #64	@ 0x40
 800e8e6:	621a      	str	r2, [r3, #32]

  return ret;
 800e8e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e8f2:	b480      	push	{r7}
 800e8f4:	b083      	sub	sp, #12
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	78fa      	ldrb	r2, [r7, #3]
 800e902:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	370c      	adds	r7, #12
 800e90a:	46bd      	mov	sp, r7
 800e90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e910:	4770      	bx	lr

0800e912 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e912:	b480      	push	{r7}
 800e914:	b083      	sub	sp, #12
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e920:	b2db      	uxtb	r3, r3
 800e922:	2b04      	cmp	r3, #4
 800e924:	d006      	beq.n	800e934 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e92c:	b2da      	uxtb	r2, r3
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2204      	movs	r2, #4
 800e938:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	370c      	adds	r7, #12
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr

0800e94a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e94a:	b480      	push	{r7}
 800e94c:	b083      	sub	sp, #12
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	2b04      	cmp	r3, #4
 800e95c:	d106      	bne.n	800e96c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800e964:	b2da      	uxtb	r2, r3
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800e96c:	2300      	movs	r3, #0
}
 800e96e:	4618      	mov	r0, r3
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b082      	sub	sp, #8
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b03      	cmp	r3, #3
 800e98c:	d110      	bne.n	800e9b0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00b      	beq.n	800e9b0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e99e:	69db      	ldr	r3, [r3, #28]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d005      	beq.n	800e9b0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e9aa:	69db      	ldr	r3, [r3, #28]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e9b0:	2300      	movs	r3, #0
}
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e9ba:	b480      	push	{r7}
 800e9bc:	b083      	sub	sp, #12
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	6078      	str	r0, [r7, #4]
 800e9c2:	460b      	mov	r3, r1
 800e9c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e9c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	370c      	adds	r7, #12
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
 800e9dc:	460b      	mov	r3, r1
 800e9de:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e9e0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	370c      	adds	r7, #12
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr

0800e9ee <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e9ee:	b580      	push	{r7, lr}
 800e9f0:	b086      	sub	sp, #24
 800e9f2:	af00      	add	r7, sp, #0
 800e9f4:	6078      	str	r0, [r7, #4]
 800e9f6:	460b      	mov	r3, r1
 800e9f8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	885b      	ldrh	r3, [r3, #2]
 800ea0a:	b29b      	uxth	r3, r3
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	7812      	ldrb	r2, [r2, #0]
 800ea10:	4293      	cmp	r3, r2
 800ea12:	d91f      	bls.n	800ea54 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	781b      	ldrb	r3, [r3, #0]
 800ea18:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ea1a:	e013      	b.n	800ea44 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ea1c:	f107 030a 	add.w	r3, r7, #10
 800ea20:	4619      	mov	r1, r3
 800ea22:	6978      	ldr	r0, [r7, #20]
 800ea24:	f000 f81b 	bl	800ea5e <USBD_GetNextDesc>
 800ea28:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	785b      	ldrb	r3, [r3, #1]
 800ea2e:	2b05      	cmp	r3, #5
 800ea30:	d108      	bne.n	800ea44 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	789b      	ldrb	r3, [r3, #2]
 800ea3a:	78fa      	ldrb	r2, [r7, #3]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d008      	beq.n	800ea52 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ea40:	2300      	movs	r3, #0
 800ea42:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	885b      	ldrh	r3, [r3, #2]
 800ea48:	b29a      	uxth	r2, r3
 800ea4a:	897b      	ldrh	r3, [r7, #10]
 800ea4c:	429a      	cmp	r2, r3
 800ea4e:	d8e5      	bhi.n	800ea1c <USBD_GetEpDesc+0x2e>
 800ea50:	e000      	b.n	800ea54 <USBD_GetEpDesc+0x66>
          break;
 800ea52:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ea54:	693b      	ldr	r3, [r7, #16]
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3718      	adds	r7, #24
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b085      	sub	sp, #20
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	881b      	ldrh	r3, [r3, #0]
 800ea70:	68fa      	ldr	r2, [r7, #12]
 800ea72:	7812      	ldrb	r2, [r2, #0]
 800ea74:	4413      	add	r3, r2
 800ea76:	b29a      	uxth	r2, r3
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	781b      	ldrb	r3, [r3, #0]
 800ea80:	461a      	mov	r2, r3
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4413      	add	r3, r2
 800ea86:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ea88:	68fb      	ldr	r3, [r7, #12]
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3714      	adds	r7, #20
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea94:	4770      	bx	lr

0800ea96 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ea96:	b480      	push	{r7}
 800ea98:	b087      	sub	sp, #28
 800ea9a:	af00      	add	r7, sp, #0
 800ea9c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eaa2:	697b      	ldr	r3, [r7, #20]
 800eaa4:	781b      	ldrb	r3, [r3, #0]
 800eaa6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eaae:	697b      	ldr	r3, [r7, #20]
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eab4:	8a3b      	ldrh	r3, [r7, #16]
 800eab6:	021b      	lsls	r3, r3, #8
 800eab8:	b21a      	sxth	r2, r3
 800eaba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eabe:	4313      	orrs	r3, r2
 800eac0:	b21b      	sxth	r3, r3
 800eac2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eac4:	89fb      	ldrh	r3, [r7, #14]
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	371c      	adds	r7, #28
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr
	...

0800ead4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eade:	2300      	movs	r3, #0
 800eae0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eaea:	2b40      	cmp	r3, #64	@ 0x40
 800eaec:	d005      	beq.n	800eafa <USBD_StdDevReq+0x26>
 800eaee:	2b40      	cmp	r3, #64	@ 0x40
 800eaf0:	d857      	bhi.n	800eba2 <USBD_StdDevReq+0xce>
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00f      	beq.n	800eb16 <USBD_StdDevReq+0x42>
 800eaf6:	2b20      	cmp	r3, #32
 800eaf8:	d153      	bne.n	800eba2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	32ae      	adds	r2, #174	@ 0xae
 800eb04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	6839      	ldr	r1, [r7, #0]
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	4798      	blx	r3
 800eb10:	4603      	mov	r3, r0
 800eb12:	73fb      	strb	r3, [r7, #15]
      break;
 800eb14:	e04a      	b.n	800ebac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	785b      	ldrb	r3, [r3, #1]
 800eb1a:	2b09      	cmp	r3, #9
 800eb1c:	d83b      	bhi.n	800eb96 <USBD_StdDevReq+0xc2>
 800eb1e:	a201      	add	r2, pc, #4	@ (adr r2, 800eb24 <USBD_StdDevReq+0x50>)
 800eb20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb24:	0800eb79 	.word	0x0800eb79
 800eb28:	0800eb8d 	.word	0x0800eb8d
 800eb2c:	0800eb97 	.word	0x0800eb97
 800eb30:	0800eb83 	.word	0x0800eb83
 800eb34:	0800eb97 	.word	0x0800eb97
 800eb38:	0800eb57 	.word	0x0800eb57
 800eb3c:	0800eb4d 	.word	0x0800eb4d
 800eb40:	0800eb97 	.word	0x0800eb97
 800eb44:	0800eb6f 	.word	0x0800eb6f
 800eb48:	0800eb61 	.word	0x0800eb61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eb4c:	6839      	ldr	r1, [r7, #0]
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 fa3c 	bl	800efcc <USBD_GetDescriptor>
          break;
 800eb54:	e024      	b.n	800eba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eb56:	6839      	ldr	r1, [r7, #0]
 800eb58:	6878      	ldr	r0, [r7, #4]
 800eb5a:	f000 fbcb 	bl	800f2f4 <USBD_SetAddress>
          break;
 800eb5e:	e01f      	b.n	800eba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eb60:	6839      	ldr	r1, [r7, #0]
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f000 fc0a 	bl	800f37c <USBD_SetConfig>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	73fb      	strb	r3, [r7, #15]
          break;
 800eb6c:	e018      	b.n	800eba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eb6e:	6839      	ldr	r1, [r7, #0]
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 fcad 	bl	800f4d0 <USBD_GetConfig>
          break;
 800eb76:	e013      	b.n	800eba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eb78:	6839      	ldr	r1, [r7, #0]
 800eb7a:	6878      	ldr	r0, [r7, #4]
 800eb7c:	f000 fcde 	bl	800f53c <USBD_GetStatus>
          break;
 800eb80:	e00e      	b.n	800eba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eb82:	6839      	ldr	r1, [r7, #0]
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 fd0d 	bl	800f5a4 <USBD_SetFeature>
          break;
 800eb8a:	e009      	b.n	800eba0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eb8c:	6839      	ldr	r1, [r7, #0]
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f000 fd31 	bl	800f5f6 <USBD_ClrFeature>
          break;
 800eb94:	e004      	b.n	800eba0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800eb96:	6839      	ldr	r1, [r7, #0]
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f000 fd88 	bl	800f6ae <USBD_CtlError>
          break;
 800eb9e:	bf00      	nop
      }
      break;
 800eba0:	e004      	b.n	800ebac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800eba2:	6839      	ldr	r1, [r7, #0]
 800eba4:	6878      	ldr	r0, [r7, #4]
 800eba6:	f000 fd82 	bl	800f6ae <USBD_CtlError>
      break;
 800ebaa:	bf00      	nop
  }

  return ret;
 800ebac:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	3710      	adds	r7, #16
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	bd80      	pop	{r7, pc}
 800ebb6:	bf00      	nop

0800ebb8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ebce:	2b40      	cmp	r3, #64	@ 0x40
 800ebd0:	d005      	beq.n	800ebde <USBD_StdItfReq+0x26>
 800ebd2:	2b40      	cmp	r3, #64	@ 0x40
 800ebd4:	d852      	bhi.n	800ec7c <USBD_StdItfReq+0xc4>
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d001      	beq.n	800ebde <USBD_StdItfReq+0x26>
 800ebda:	2b20      	cmp	r3, #32
 800ebdc:	d14e      	bne.n	800ec7c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ebe4:	b2db      	uxtb	r3, r3
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	2b02      	cmp	r3, #2
 800ebea:	d840      	bhi.n	800ec6e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	889b      	ldrh	r3, [r3, #4]
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d836      	bhi.n	800ec64 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	889b      	ldrh	r3, [r3, #4]
 800ebfa:	b2db      	uxtb	r3, r3
 800ebfc:	4619      	mov	r1, r3
 800ebfe:	6878      	ldr	r0, [r7, #4]
 800ec00:	f7ff fedb 	bl	800e9ba <USBD_CoreFindIF>
 800ec04:	4603      	mov	r3, r0
 800ec06:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ec08:	7bbb      	ldrb	r3, [r7, #14]
 800ec0a:	2bff      	cmp	r3, #255	@ 0xff
 800ec0c:	d01d      	beq.n	800ec4a <USBD_StdItfReq+0x92>
 800ec0e:	7bbb      	ldrb	r3, [r7, #14]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d11a      	bne.n	800ec4a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ec14:	7bba      	ldrb	r2, [r7, #14]
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	32ae      	adds	r2, #174	@ 0xae
 800ec1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec1e:	689b      	ldr	r3, [r3, #8]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00f      	beq.n	800ec44 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ec24:	7bba      	ldrb	r2, [r7, #14]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ec2c:	7bba      	ldrb	r2, [r7, #14]
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	32ae      	adds	r2, #174	@ 0xae
 800ec32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	6839      	ldr	r1, [r7, #0]
 800ec3a:	6878      	ldr	r0, [r7, #4]
 800ec3c:	4798      	blx	r3
 800ec3e:	4603      	mov	r3, r0
 800ec40:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ec42:	e004      	b.n	800ec4e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ec44:	2303      	movs	r3, #3
 800ec46:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ec48:	e001      	b.n	800ec4e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ec4a:	2303      	movs	r3, #3
 800ec4c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	88db      	ldrh	r3, [r3, #6]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d110      	bne.n	800ec78 <USBD_StdItfReq+0xc0>
 800ec56:	7bfb      	ldrb	r3, [r7, #15]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d10d      	bne.n	800ec78 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 fdf1 	bl	800f844 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ec62:	e009      	b.n	800ec78 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fd21 	bl	800f6ae <USBD_CtlError>
          break;
 800ec6c:	e004      	b.n	800ec78 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fd1c 	bl	800f6ae <USBD_CtlError>
          break;
 800ec76:	e000      	b.n	800ec7a <USBD_StdItfReq+0xc2>
          break;
 800ec78:	bf00      	nop
      }
      break;
 800ec7a:	e004      	b.n	800ec86 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f000 fd15 	bl	800f6ae <USBD_CtlError>
      break;
 800ec84:	bf00      	nop
  }

  return ret;
 800ec86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	889b      	ldrh	r3, [r3, #4]
 800eca2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ecac:	2b40      	cmp	r3, #64	@ 0x40
 800ecae:	d007      	beq.n	800ecc0 <USBD_StdEPReq+0x30>
 800ecb0:	2b40      	cmp	r3, #64	@ 0x40
 800ecb2:	f200 817f 	bhi.w	800efb4 <USBD_StdEPReq+0x324>
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d02a      	beq.n	800ed10 <USBD_StdEPReq+0x80>
 800ecba:	2b20      	cmp	r3, #32
 800ecbc:	f040 817a 	bne.w	800efb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ecc0:	7bbb      	ldrb	r3, [r7, #14]
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f7ff fe85 	bl	800e9d4 <USBD_CoreFindEP>
 800ecca:	4603      	mov	r3, r0
 800eccc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ecce:	7b7b      	ldrb	r3, [r7, #13]
 800ecd0:	2bff      	cmp	r3, #255	@ 0xff
 800ecd2:	f000 8174 	beq.w	800efbe <USBD_StdEPReq+0x32e>
 800ecd6:	7b7b      	ldrb	r3, [r7, #13]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f040 8170 	bne.w	800efbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ecde:	7b7a      	ldrb	r2, [r7, #13]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ece6:	7b7a      	ldrb	r2, [r7, #13]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	32ae      	adds	r2, #174	@ 0xae
 800ecec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	f000 8163 	beq.w	800efbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ecf8:	7b7a      	ldrb	r2, [r7, #13]
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	32ae      	adds	r2, #174	@ 0xae
 800ecfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed02:	689b      	ldr	r3, [r3, #8]
 800ed04:	6839      	ldr	r1, [r7, #0]
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	4798      	blx	r3
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ed0e:	e156      	b.n	800efbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ed10:	683b      	ldr	r3, [r7, #0]
 800ed12:	785b      	ldrb	r3, [r3, #1]
 800ed14:	2b03      	cmp	r3, #3
 800ed16:	d008      	beq.n	800ed2a <USBD_StdEPReq+0x9a>
 800ed18:	2b03      	cmp	r3, #3
 800ed1a:	f300 8145 	bgt.w	800efa8 <USBD_StdEPReq+0x318>
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	f000 809b 	beq.w	800ee5a <USBD_StdEPReq+0x1ca>
 800ed24:	2b01      	cmp	r3, #1
 800ed26:	d03c      	beq.n	800eda2 <USBD_StdEPReq+0x112>
 800ed28:	e13e      	b.n	800efa8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d002      	beq.n	800ed3c <USBD_StdEPReq+0xac>
 800ed36:	2b03      	cmp	r3, #3
 800ed38:	d016      	beq.n	800ed68 <USBD_StdEPReq+0xd8>
 800ed3a:	e02c      	b.n	800ed96 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed3c:	7bbb      	ldrb	r3, [r7, #14]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d00d      	beq.n	800ed5e <USBD_StdEPReq+0xce>
 800ed42:	7bbb      	ldrb	r3, [r7, #14]
 800ed44:	2b80      	cmp	r3, #128	@ 0x80
 800ed46:	d00a      	beq.n	800ed5e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed48:	7bbb      	ldrb	r3, [r7, #14]
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f006 f99f 	bl	8015090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed52:	2180      	movs	r1, #128	@ 0x80
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f006 f99b 	bl	8015090 <USBD_LL_StallEP>
 800ed5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ed5c:	e020      	b.n	800eda0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 fca4 	bl	800f6ae <USBD_CtlError>
              break;
 800ed66:	e01b      	b.n	800eda0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	885b      	ldrh	r3, [r3, #2]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d10e      	bne.n	800ed8e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ed70:	7bbb      	ldrb	r3, [r7, #14]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d00b      	beq.n	800ed8e <USBD_StdEPReq+0xfe>
 800ed76:	7bbb      	ldrb	r3, [r7, #14]
 800ed78:	2b80      	cmp	r3, #128	@ 0x80
 800ed7a:	d008      	beq.n	800ed8e <USBD_StdEPReq+0xfe>
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	88db      	ldrh	r3, [r3, #6]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d104      	bne.n	800ed8e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ed84:	7bbb      	ldrb	r3, [r7, #14]
 800ed86:	4619      	mov	r1, r3
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f006 f981 	bl	8015090 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 fd58 	bl	800f844 <USBD_CtlSendStatus>

              break;
 800ed94:	e004      	b.n	800eda0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ed96:	6839      	ldr	r1, [r7, #0]
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f000 fc88 	bl	800f6ae <USBD_CtlError>
              break;
 800ed9e:	bf00      	nop
          }
          break;
 800eda0:	e107      	b.n	800efb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	2b02      	cmp	r3, #2
 800edac:	d002      	beq.n	800edb4 <USBD_StdEPReq+0x124>
 800edae:	2b03      	cmp	r3, #3
 800edb0:	d016      	beq.n	800ede0 <USBD_StdEPReq+0x150>
 800edb2:	e04b      	b.n	800ee4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800edb4:	7bbb      	ldrb	r3, [r7, #14]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d00d      	beq.n	800edd6 <USBD_StdEPReq+0x146>
 800edba:	7bbb      	ldrb	r3, [r7, #14]
 800edbc:	2b80      	cmp	r3, #128	@ 0x80
 800edbe:	d00a      	beq.n	800edd6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800edc0:	7bbb      	ldrb	r3, [r7, #14]
 800edc2:	4619      	mov	r1, r3
 800edc4:	6878      	ldr	r0, [r7, #4]
 800edc6:	f006 f963 	bl	8015090 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800edca:	2180      	movs	r1, #128	@ 0x80
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f006 f95f 	bl	8015090 <USBD_LL_StallEP>
 800edd2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800edd4:	e040      	b.n	800ee58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800edd6:	6839      	ldr	r1, [r7, #0]
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 fc68 	bl	800f6ae <USBD_CtlError>
              break;
 800edde:	e03b      	b.n	800ee58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	885b      	ldrh	r3, [r3, #2]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d136      	bne.n	800ee56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ede8:	7bbb      	ldrb	r3, [r7, #14]
 800edea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d004      	beq.n	800edfc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800edf2:	7bbb      	ldrb	r3, [r7, #14]
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f006 f969 	bl	80150ce <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 fd21 	bl	800f844 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ee02:	7bbb      	ldrb	r3, [r7, #14]
 800ee04:	4619      	mov	r1, r3
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7ff fde4 	bl	800e9d4 <USBD_CoreFindEP>
 800ee0c:	4603      	mov	r3, r0
 800ee0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee10:	7b7b      	ldrb	r3, [r7, #13]
 800ee12:	2bff      	cmp	r3, #255	@ 0xff
 800ee14:	d01f      	beq.n	800ee56 <USBD_StdEPReq+0x1c6>
 800ee16:	7b7b      	ldrb	r3, [r7, #13]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d11c      	bne.n	800ee56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800ee1c:	7b7a      	ldrb	r2, [r7, #13]
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800ee24:	7b7a      	ldrb	r2, [r7, #13]
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	32ae      	adds	r2, #174	@ 0xae
 800ee2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee2e:	689b      	ldr	r3, [r3, #8]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d010      	beq.n	800ee56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ee34:	7b7a      	ldrb	r2, [r7, #13]
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	32ae      	adds	r2, #174	@ 0xae
 800ee3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee3e:	689b      	ldr	r3, [r3, #8]
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	4798      	blx	r3
 800ee46:	4603      	mov	r3, r0
 800ee48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ee4a:	e004      	b.n	800ee56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ee4c:	6839      	ldr	r1, [r7, #0]
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 fc2d 	bl	800f6ae <USBD_CtlError>
              break;
 800ee54:	e000      	b.n	800ee58 <USBD_StdEPReq+0x1c8>
              break;
 800ee56:	bf00      	nop
          }
          break;
 800ee58:	e0ab      	b.n	800efb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee60:	b2db      	uxtb	r3, r3
 800ee62:	2b02      	cmp	r3, #2
 800ee64:	d002      	beq.n	800ee6c <USBD_StdEPReq+0x1dc>
 800ee66:	2b03      	cmp	r3, #3
 800ee68:	d032      	beq.n	800eed0 <USBD_StdEPReq+0x240>
 800ee6a:	e097      	b.n	800ef9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee6c:	7bbb      	ldrb	r3, [r7, #14]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d007      	beq.n	800ee82 <USBD_StdEPReq+0x1f2>
 800ee72:	7bbb      	ldrb	r3, [r7, #14]
 800ee74:	2b80      	cmp	r3, #128	@ 0x80
 800ee76:	d004      	beq.n	800ee82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fc17 	bl	800f6ae <USBD_CtlError>
                break;
 800ee80:	e091      	b.n	800efa6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ee82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	da0b      	bge.n	800eea2 <USBD_StdEPReq+0x212>
 800ee8a:	7bbb      	ldrb	r3, [r7, #14]
 800ee8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee90:	4613      	mov	r3, r2
 800ee92:	009b      	lsls	r3, r3, #2
 800ee94:	4413      	add	r3, r2
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	3310      	adds	r3, #16
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	3304      	adds	r3, #4
 800eea0:	e00b      	b.n	800eeba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800eea2:	7bbb      	ldrb	r3, [r7, #14]
 800eea4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	3304      	adds	r3, #4
 800eeba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	2200      	movs	r2, #0
 800eec0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	2202      	movs	r2, #2
 800eec6:	4619      	mov	r1, r3
 800eec8:	6878      	ldr	r0, [r7, #4]
 800eeca:	f000 fc61 	bl	800f790 <USBD_CtlSendData>
              break;
 800eece:	e06a      	b.n	800efa6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800eed0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	da11      	bge.n	800eefc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
 800eeda:	f003 020f 	and.w	r2, r3, #15
 800eede:	6879      	ldr	r1, [r7, #4]
 800eee0:	4613      	mov	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	4413      	add	r3, r2
 800eee6:	009b      	lsls	r3, r3, #2
 800eee8:	440b      	add	r3, r1
 800eeea:	3324      	adds	r3, #36	@ 0x24
 800eeec:	881b      	ldrh	r3, [r3, #0]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d117      	bne.n	800ef22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800eef2:	6839      	ldr	r1, [r7, #0]
 800eef4:	6878      	ldr	r0, [r7, #4]
 800eef6:	f000 fbda 	bl	800f6ae <USBD_CtlError>
                  break;
 800eefa:	e054      	b.n	800efa6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800eefc:	7bbb      	ldrb	r3, [r7, #14]
 800eefe:	f003 020f 	and.w	r2, r3, #15
 800ef02:	6879      	ldr	r1, [r7, #4]
 800ef04:	4613      	mov	r3, r2
 800ef06:	009b      	lsls	r3, r3, #2
 800ef08:	4413      	add	r3, r2
 800ef0a:	009b      	lsls	r3, r3, #2
 800ef0c:	440b      	add	r3, r1
 800ef0e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d104      	bne.n	800ef22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800ef18:	6839      	ldr	r1, [r7, #0]
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fbc7 	bl	800f6ae <USBD_CtlError>
                  break;
 800ef20:	e041      	b.n	800efa6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	da0b      	bge.n	800ef42 <USBD_StdEPReq+0x2b2>
 800ef2a:	7bbb      	ldrb	r3, [r7, #14]
 800ef2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef30:	4613      	mov	r3, r2
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	4413      	add	r3, r2
 800ef36:	009b      	lsls	r3, r3, #2
 800ef38:	3310      	adds	r3, #16
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	3304      	adds	r3, #4
 800ef40:	e00b      	b.n	800ef5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef42:	7bbb      	ldrb	r3, [r7, #14]
 800ef44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef48:	4613      	mov	r3, r2
 800ef4a:	009b      	lsls	r3, r3, #2
 800ef4c:	4413      	add	r3, r2
 800ef4e:	009b      	lsls	r3, r3, #2
 800ef50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ef54:	687a      	ldr	r2, [r7, #4]
 800ef56:	4413      	add	r3, r2
 800ef58:	3304      	adds	r3, #4
 800ef5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ef5c:	7bbb      	ldrb	r3, [r7, #14]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <USBD_StdEPReq+0x2d8>
 800ef62:	7bbb      	ldrb	r3, [r7, #14]
 800ef64:	2b80      	cmp	r3, #128	@ 0x80
 800ef66:	d103      	bne.n	800ef70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ef68:	68bb      	ldr	r3, [r7, #8]
 800ef6a:	2200      	movs	r2, #0
 800ef6c:	601a      	str	r2, [r3, #0]
 800ef6e:	e00e      	b.n	800ef8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ef70:	7bbb      	ldrb	r3, [r7, #14]
 800ef72:	4619      	mov	r1, r3
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	f006 f8c9 	bl	801510c <USBD_LL_IsStallEP>
 800ef7a:	4603      	mov	r3, r0
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2201      	movs	r2, #1
 800ef84:	601a      	str	r2, [r3, #0]
 800ef86:	e002      	b.n	800ef8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	2202      	movs	r2, #2
 800ef92:	4619      	mov	r1, r3
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 fbfb 	bl	800f790 <USBD_CtlSendData>
              break;
 800ef9a:	e004      	b.n	800efa6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ef9c:	6839      	ldr	r1, [r7, #0]
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f000 fb85 	bl	800f6ae <USBD_CtlError>
              break;
 800efa4:	bf00      	nop
          }
          break;
 800efa6:	e004      	b.n	800efb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800efa8:	6839      	ldr	r1, [r7, #0]
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f000 fb7f 	bl	800f6ae <USBD_CtlError>
          break;
 800efb0:	bf00      	nop
      }
      break;
 800efb2:	e005      	b.n	800efc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 fb79 	bl	800f6ae <USBD_CtlError>
      break;
 800efbc:	e000      	b.n	800efc0 <USBD_StdEPReq+0x330>
      break;
 800efbe:	bf00      	nop
  }

  return ret;
 800efc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efc2:	4618      	mov	r0, r3
 800efc4:	3710      	adds	r7, #16
 800efc6:	46bd      	mov	sp, r7
 800efc8:	bd80      	pop	{r7, pc}
	...

0800efcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b084      	sub	sp, #16
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800efd6:	2300      	movs	r3, #0
 800efd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800efda:	2300      	movs	r3, #0
 800efdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800efde:	2300      	movs	r3, #0
 800efe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	885b      	ldrh	r3, [r3, #2]
 800efe6:	0a1b      	lsrs	r3, r3, #8
 800efe8:	b29b      	uxth	r3, r3
 800efea:	3b01      	subs	r3, #1
 800efec:	2b0e      	cmp	r3, #14
 800efee:	f200 8152 	bhi.w	800f296 <USBD_GetDescriptor+0x2ca>
 800eff2:	a201      	add	r2, pc, #4	@ (adr r2, 800eff8 <USBD_GetDescriptor+0x2c>)
 800eff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff8:	0800f069 	.word	0x0800f069
 800effc:	0800f081 	.word	0x0800f081
 800f000:	0800f0c1 	.word	0x0800f0c1
 800f004:	0800f297 	.word	0x0800f297
 800f008:	0800f297 	.word	0x0800f297
 800f00c:	0800f237 	.word	0x0800f237
 800f010:	0800f263 	.word	0x0800f263
 800f014:	0800f297 	.word	0x0800f297
 800f018:	0800f297 	.word	0x0800f297
 800f01c:	0800f297 	.word	0x0800f297
 800f020:	0800f297 	.word	0x0800f297
 800f024:	0800f297 	.word	0x0800f297
 800f028:	0800f297 	.word	0x0800f297
 800f02c:	0800f297 	.word	0x0800f297
 800f030:	0800f035 	.word	0x0800f035
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f03a:	69db      	ldr	r3, [r3, #28]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00b      	beq.n	800f058 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f046:	69db      	ldr	r3, [r3, #28]
 800f048:	687a      	ldr	r2, [r7, #4]
 800f04a:	7c12      	ldrb	r2, [r2, #16]
 800f04c:	f107 0108 	add.w	r1, r7, #8
 800f050:	4610      	mov	r0, r2
 800f052:	4798      	blx	r3
 800f054:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f056:	e126      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f058:	6839      	ldr	r1, [r7, #0]
 800f05a:	6878      	ldr	r0, [r7, #4]
 800f05c:	f000 fb27 	bl	800f6ae <USBD_CtlError>
        err++;
 800f060:	7afb      	ldrb	r3, [r7, #11]
 800f062:	3301      	adds	r3, #1
 800f064:	72fb      	strb	r3, [r7, #11]
      break;
 800f066:	e11e      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	7c12      	ldrb	r2, [r2, #16]
 800f074:	f107 0108 	add.w	r1, r7, #8
 800f078:	4610      	mov	r0, r2
 800f07a:	4798      	blx	r3
 800f07c:	60f8      	str	r0, [r7, #12]
      break;
 800f07e:	e112      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	7c1b      	ldrb	r3, [r3, #16]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d10d      	bne.n	800f0a4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f090:	f107 0208 	add.w	r2, r7, #8
 800f094:	4610      	mov	r0, r2
 800f096:	4798      	blx	r3
 800f098:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	3301      	adds	r3, #1
 800f09e:	2202      	movs	r2, #2
 800f0a0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f0a2:	e100      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ac:	f107 0208 	add.w	r2, r7, #8
 800f0b0:	4610      	mov	r0, r2
 800f0b2:	4798      	blx	r3
 800f0b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3301      	adds	r3, #1
 800f0ba:	2202      	movs	r2, #2
 800f0bc:	701a      	strb	r2, [r3, #0]
      break;
 800f0be:	e0f2      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	885b      	ldrh	r3, [r3, #2]
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	2b05      	cmp	r3, #5
 800f0c8:	f200 80ac 	bhi.w	800f224 <USBD_GetDescriptor+0x258>
 800f0cc:	a201      	add	r2, pc, #4	@ (adr r2, 800f0d4 <USBD_GetDescriptor+0x108>)
 800f0ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0d2:	bf00      	nop
 800f0d4:	0800f0ed 	.word	0x0800f0ed
 800f0d8:	0800f121 	.word	0x0800f121
 800f0dc:	0800f155 	.word	0x0800f155
 800f0e0:	0800f189 	.word	0x0800f189
 800f0e4:	0800f1bd 	.word	0x0800f1bd
 800f0e8:	0800f1f1 	.word	0x0800f1f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0f2:	685b      	ldr	r3, [r3, #4]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d00b      	beq.n	800f110 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0fe:	685b      	ldr	r3, [r3, #4]
 800f100:	687a      	ldr	r2, [r7, #4]
 800f102:	7c12      	ldrb	r2, [r2, #16]
 800f104:	f107 0108 	add.w	r1, r7, #8
 800f108:	4610      	mov	r0, r2
 800f10a:	4798      	blx	r3
 800f10c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f10e:	e091      	b.n	800f234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f110:	6839      	ldr	r1, [r7, #0]
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f000 facb 	bl	800f6ae <USBD_CtlError>
            err++;
 800f118:	7afb      	ldrb	r3, [r7, #11]
 800f11a:	3301      	adds	r3, #1
 800f11c:	72fb      	strb	r3, [r7, #11]
          break;
 800f11e:	e089      	b.n	800f234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f126:	689b      	ldr	r3, [r3, #8]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d00b      	beq.n	800f144 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f132:	689b      	ldr	r3, [r3, #8]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	7c12      	ldrb	r2, [r2, #16]
 800f138:	f107 0108 	add.w	r1, r7, #8
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
 800f140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f142:	e077      	b.n	800f234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f144:	6839      	ldr	r1, [r7, #0]
 800f146:	6878      	ldr	r0, [r7, #4]
 800f148:	f000 fab1 	bl	800f6ae <USBD_CtlError>
            err++;
 800f14c:	7afb      	ldrb	r3, [r7, #11]
 800f14e:	3301      	adds	r3, #1
 800f150:	72fb      	strb	r3, [r7, #11]
          break;
 800f152:	e06f      	b.n	800f234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f15a:	68db      	ldr	r3, [r3, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d00b      	beq.n	800f178 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	7c12      	ldrb	r2, [r2, #16]
 800f16c:	f107 0108 	add.w	r1, r7, #8
 800f170:	4610      	mov	r0, r2
 800f172:	4798      	blx	r3
 800f174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f176:	e05d      	b.n	800f234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f178:	6839      	ldr	r1, [r7, #0]
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 fa97 	bl	800f6ae <USBD_CtlError>
            err++;
 800f180:	7afb      	ldrb	r3, [r7, #11]
 800f182:	3301      	adds	r3, #1
 800f184:	72fb      	strb	r3, [r7, #11]
          break;
 800f186:	e055      	b.n	800f234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d00b      	beq.n	800f1ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f19a:	691b      	ldr	r3, [r3, #16]
 800f19c:	687a      	ldr	r2, [r7, #4]
 800f19e:	7c12      	ldrb	r2, [r2, #16]
 800f1a0:	f107 0108 	add.w	r1, r7, #8
 800f1a4:	4610      	mov	r0, r2
 800f1a6:	4798      	blx	r3
 800f1a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1aa:	e043      	b.n	800f234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	6878      	ldr	r0, [r7, #4]
 800f1b0:	f000 fa7d 	bl	800f6ae <USBD_CtlError>
            err++;
 800f1b4:	7afb      	ldrb	r3, [r7, #11]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	72fb      	strb	r3, [r7, #11]
          break;
 800f1ba:	e03b      	b.n	800f234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1c2:	695b      	ldr	r3, [r3, #20]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d00b      	beq.n	800f1e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1ce:	695b      	ldr	r3, [r3, #20]
 800f1d0:	687a      	ldr	r2, [r7, #4]
 800f1d2:	7c12      	ldrb	r2, [r2, #16]
 800f1d4:	f107 0108 	add.w	r1, r7, #8
 800f1d8:	4610      	mov	r0, r2
 800f1da:	4798      	blx	r3
 800f1dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1de:	e029      	b.n	800f234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1e0:	6839      	ldr	r1, [r7, #0]
 800f1e2:	6878      	ldr	r0, [r7, #4]
 800f1e4:	f000 fa63 	bl	800f6ae <USBD_CtlError>
            err++;
 800f1e8:	7afb      	ldrb	r3, [r7, #11]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	72fb      	strb	r3, [r7, #11]
          break;
 800f1ee:	e021      	b.n	800f234 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1f6:	699b      	ldr	r3, [r3, #24]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00b      	beq.n	800f214 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f202:	699b      	ldr	r3, [r3, #24]
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	7c12      	ldrb	r2, [r2, #16]
 800f208:	f107 0108 	add.w	r1, r7, #8
 800f20c:	4610      	mov	r0, r2
 800f20e:	4798      	blx	r3
 800f210:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f212:	e00f      	b.n	800f234 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 fa49 	bl	800f6ae <USBD_CtlError>
            err++;
 800f21c:	7afb      	ldrb	r3, [r7, #11]
 800f21e:	3301      	adds	r3, #1
 800f220:	72fb      	strb	r3, [r7, #11]
          break;
 800f222:	e007      	b.n	800f234 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 fa41 	bl	800f6ae <USBD_CtlError>
          err++;
 800f22c:	7afb      	ldrb	r3, [r7, #11]
 800f22e:	3301      	adds	r3, #1
 800f230:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f232:	bf00      	nop
      }
      break;
 800f234:	e037      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	7c1b      	ldrb	r3, [r3, #16]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d109      	bne.n	800f252 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f246:	f107 0208 	add.w	r2, r7, #8
 800f24a:	4610      	mov	r0, r2
 800f24c:	4798      	blx	r3
 800f24e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f250:	e029      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f252:	6839      	ldr	r1, [r7, #0]
 800f254:	6878      	ldr	r0, [r7, #4]
 800f256:	f000 fa2a 	bl	800f6ae <USBD_CtlError>
        err++;
 800f25a:	7afb      	ldrb	r3, [r7, #11]
 800f25c:	3301      	adds	r3, #1
 800f25e:	72fb      	strb	r3, [r7, #11]
      break;
 800f260:	e021      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	7c1b      	ldrb	r3, [r3, #16]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10d      	bne.n	800f286 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f272:	f107 0208 	add.w	r2, r7, #8
 800f276:	4610      	mov	r0, r2
 800f278:	4798      	blx	r3
 800f27a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	3301      	adds	r3, #1
 800f280:	2207      	movs	r2, #7
 800f282:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f284:	e00f      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f286:	6839      	ldr	r1, [r7, #0]
 800f288:	6878      	ldr	r0, [r7, #4]
 800f28a:	f000 fa10 	bl	800f6ae <USBD_CtlError>
        err++;
 800f28e:	7afb      	ldrb	r3, [r7, #11]
 800f290:	3301      	adds	r3, #1
 800f292:	72fb      	strb	r3, [r7, #11]
      break;
 800f294:	e007      	b.n	800f2a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fa08 	bl	800f6ae <USBD_CtlError>
      err++;
 800f29e:	7afb      	ldrb	r3, [r7, #11]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	72fb      	strb	r3, [r7, #11]
      break;
 800f2a4:	bf00      	nop
  }

  if (err != 0U)
 800f2a6:	7afb      	ldrb	r3, [r7, #11]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d11e      	bne.n	800f2ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	88db      	ldrh	r3, [r3, #6]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d016      	beq.n	800f2e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f2b4:	893b      	ldrh	r3, [r7, #8]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00e      	beq.n	800f2d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	88da      	ldrh	r2, [r3, #6]
 800f2be:	893b      	ldrh	r3, [r7, #8]
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	bf28      	it	cs
 800f2c4:	4613      	movcs	r3, r2
 800f2c6:	b29b      	uxth	r3, r3
 800f2c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f2ca:	893b      	ldrh	r3, [r7, #8]
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	68f9      	ldr	r1, [r7, #12]
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f000 fa5d 	bl	800f790 <USBD_CtlSendData>
 800f2d6:	e009      	b.n	800f2ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 f9e7 	bl	800f6ae <USBD_CtlError>
 800f2e0:	e004      	b.n	800f2ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 faae 	bl	800f844 <USBD_CtlSendStatus>
 800f2e8:	e000      	b.n	800f2ec <USBD_GetDescriptor+0x320>
    return;
 800f2ea:	bf00      	nop
  }
}
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}
 800f2f2:	bf00      	nop

0800f2f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b084      	sub	sp, #16
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	889b      	ldrh	r3, [r3, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d131      	bne.n	800f36a <USBD_SetAddress+0x76>
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	88db      	ldrh	r3, [r3, #6]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d12d      	bne.n	800f36a <USBD_SetAddress+0x76>
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	885b      	ldrh	r3, [r3, #2]
 800f312:	2b7f      	cmp	r3, #127	@ 0x7f
 800f314:	d829      	bhi.n	800f36a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	885b      	ldrh	r3, [r3, #2]
 800f31a:	b2db      	uxtb	r3, r3
 800f31c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f320:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	2b03      	cmp	r3, #3
 800f32c:	d104      	bne.n	800f338 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f32e:	6839      	ldr	r1, [r7, #0]
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 f9bc 	bl	800f6ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f336:	e01d      	b.n	800f374 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	7bfa      	ldrb	r2, [r7, #15]
 800f33c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f340:	7bfb      	ldrb	r3, [r7, #15]
 800f342:	4619      	mov	r1, r3
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f005 ff0d 	bl	8015164 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f000 fa7a 	bl	800f844 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f350:	7bfb      	ldrb	r3, [r7, #15]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d004      	beq.n	800f360 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2202      	movs	r2, #2
 800f35a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f35e:	e009      	b.n	800f374 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	2201      	movs	r2, #1
 800f364:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f368:	e004      	b.n	800f374 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f36a:	6839      	ldr	r1, [r7, #0]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f000 f99e 	bl	800f6ae <USBD_CtlError>
  }
}
 800f372:	bf00      	nop
 800f374:	bf00      	nop
 800f376:	3710      	adds	r7, #16
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}

0800f37c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b084      	sub	sp, #16
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f386:	2300      	movs	r3, #0
 800f388:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	885b      	ldrh	r3, [r3, #2]
 800f38e:	b2da      	uxtb	r2, r3
 800f390:	4b4e      	ldr	r3, [pc, #312]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f392:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f394:	4b4d      	ldr	r3, [pc, #308]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	2b01      	cmp	r3, #1
 800f39a:	d905      	bls.n	800f3a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 f985 	bl	800f6ae <USBD_CtlError>
    return USBD_FAIL;
 800f3a4:	2303      	movs	r3, #3
 800f3a6:	e08c      	b.n	800f4c2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3ae:	b2db      	uxtb	r3, r3
 800f3b0:	2b02      	cmp	r3, #2
 800f3b2:	d002      	beq.n	800f3ba <USBD_SetConfig+0x3e>
 800f3b4:	2b03      	cmp	r3, #3
 800f3b6:	d029      	beq.n	800f40c <USBD_SetConfig+0x90>
 800f3b8:	e075      	b.n	800f4a6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f3ba:	4b44      	ldr	r3, [pc, #272]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d020      	beq.n	800f404 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f3c2:	4b42      	ldr	r3, [pc, #264]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	461a      	mov	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3cc:	4b3f      	ldr	r3, [pc, #252]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	4619      	mov	r1, r3
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f7ff f84b 	bl	800e46e <USBD_SetClassConfig>
 800f3d8:	4603      	mov	r3, r0
 800f3da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f3dc:	7bfb      	ldrb	r3, [r7, #15]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d008      	beq.n	800f3f4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f000 f962 	bl	800f6ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2202      	movs	r2, #2
 800f3ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f3f2:	e065      	b.n	800f4c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 fa25 	bl	800f844 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2203      	movs	r2, #3
 800f3fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f402:	e05d      	b.n	800f4c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f404:	6878      	ldr	r0, [r7, #4]
 800f406:	f000 fa1d 	bl	800f844 <USBD_CtlSendStatus>
      break;
 800f40a:	e059      	b.n	800f4c0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f40c:	4b2f      	ldr	r3, [pc, #188]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d112      	bne.n	800f43a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2202      	movs	r2, #2
 800f418:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f41c:	4b2b      	ldr	r3, [pc, #172]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	461a      	mov	r2, r3
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f426:	4b29      	ldr	r3, [pc, #164]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f428:	781b      	ldrb	r3, [r3, #0]
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f7ff f83a 	bl	800e4a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 fa06 	bl	800f844 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f438:	e042      	b.n	800f4c0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f43a:	4b24      	ldr	r3, [pc, #144]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f43c:	781b      	ldrb	r3, [r3, #0]
 800f43e:	461a      	mov	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	685b      	ldr	r3, [r3, #4]
 800f444:	429a      	cmp	r2, r3
 800f446:	d02a      	beq.n	800f49e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	685b      	ldr	r3, [r3, #4]
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	4619      	mov	r1, r3
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7ff f828 	bl	800e4a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f456:	4b1d      	ldr	r3, [pc, #116]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	461a      	mov	r2, r3
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f460:	4b1a      	ldr	r3, [pc, #104]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f462:	781b      	ldrb	r3, [r3, #0]
 800f464:	4619      	mov	r1, r3
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f7ff f801 	bl	800e46e <USBD_SetClassConfig>
 800f46c:	4603      	mov	r3, r0
 800f46e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f470:	7bfb      	ldrb	r3, [r7, #15]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00f      	beq.n	800f496 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f476:	6839      	ldr	r1, [r7, #0]
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 f918 	bl	800f6ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	b2db      	uxtb	r3, r3
 800f484:	4619      	mov	r1, r3
 800f486:	6878      	ldr	r0, [r7, #4]
 800f488:	f7ff f80d 	bl	800e4a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2202      	movs	r2, #2
 800f490:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f494:	e014      	b.n	800f4c0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f9d4 	bl	800f844 <USBD_CtlSendStatus>
      break;
 800f49c:	e010      	b.n	800f4c0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 f9d0 	bl	800f844 <USBD_CtlSendStatus>
      break;
 800f4a4:	e00c      	b.n	800f4c0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f4a6:	6839      	ldr	r1, [r7, #0]
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 f900 	bl	800f6ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4ae:	4b07      	ldr	r3, [pc, #28]	@ (800f4cc <USBD_SetConfig+0x150>)
 800f4b0:	781b      	ldrb	r3, [r3, #0]
 800f4b2:	4619      	mov	r1, r3
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7fe fff6 	bl	800e4a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f4ba:	2303      	movs	r3, #3
 800f4bc:	73fb      	strb	r3, [r7, #15]
      break;
 800f4be:	bf00      	nop
  }

  return ret;
 800f4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	3710      	adds	r7, #16
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	bd80      	pop	{r7, pc}
 800f4ca:	bf00      	nop
 800f4cc:	2000115c 	.word	0x2000115c

0800f4d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	88db      	ldrh	r3, [r3, #6]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d004      	beq.n	800f4ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f8e2 	bl	800f6ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f4ea:	e023      	b.n	800f534 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b02      	cmp	r3, #2
 800f4f6:	dc02      	bgt.n	800f4fe <USBD_GetConfig+0x2e>
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	dc03      	bgt.n	800f504 <USBD_GetConfig+0x34>
 800f4fc:	e015      	b.n	800f52a <USBD_GetConfig+0x5a>
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d00b      	beq.n	800f51a <USBD_GetConfig+0x4a>
 800f502:	e012      	b.n	800f52a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	3308      	adds	r3, #8
 800f50e:	2201      	movs	r2, #1
 800f510:	4619      	mov	r1, r3
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f93c 	bl	800f790 <USBD_CtlSendData>
        break;
 800f518:	e00c      	b.n	800f534 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	3304      	adds	r3, #4
 800f51e:	2201      	movs	r2, #1
 800f520:	4619      	mov	r1, r3
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 f934 	bl	800f790 <USBD_CtlSendData>
        break;
 800f528:	e004      	b.n	800f534 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f52a:	6839      	ldr	r1, [r7, #0]
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f000 f8be 	bl	800f6ae <USBD_CtlError>
        break;
 800f532:	bf00      	nop
}
 800f534:	bf00      	nop
 800f536:	3708      	adds	r7, #8
 800f538:	46bd      	mov	sp, r7
 800f53a:	bd80      	pop	{r7, pc}

0800f53c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f53c:	b580      	push	{r7, lr}
 800f53e:	b082      	sub	sp, #8
 800f540:	af00      	add	r7, sp, #0
 800f542:	6078      	str	r0, [r7, #4]
 800f544:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	3b01      	subs	r3, #1
 800f550:	2b02      	cmp	r3, #2
 800f552:	d81e      	bhi.n	800f592 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	88db      	ldrh	r3, [r3, #6]
 800f558:	2b02      	cmp	r3, #2
 800f55a:	d004      	beq.n	800f566 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f55c:	6839      	ldr	r1, [r7, #0]
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 f8a5 	bl	800f6ae <USBD_CtlError>
        break;
 800f564:	e01a      	b.n	800f59c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	2201      	movs	r2, #1
 800f56a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f572:	2b00      	cmp	r3, #0
 800f574:	d005      	beq.n	800f582 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	f043 0202 	orr.w	r2, r3, #2
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	330c      	adds	r3, #12
 800f586:	2202      	movs	r2, #2
 800f588:	4619      	mov	r1, r3
 800f58a:	6878      	ldr	r0, [r7, #4]
 800f58c:	f000 f900 	bl	800f790 <USBD_CtlSendData>
      break;
 800f590:	e004      	b.n	800f59c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f592:	6839      	ldr	r1, [r7, #0]
 800f594:	6878      	ldr	r0, [r7, #4]
 800f596:	f000 f88a 	bl	800f6ae <USBD_CtlError>
      break;
 800f59a:	bf00      	nop
  }
}
 800f59c:	bf00      	nop
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}

0800f5a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
 800f5ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	885b      	ldrh	r3, [r3, #2]
 800f5b2:	2b01      	cmp	r3, #1
 800f5b4:	d107      	bne.n	800f5c6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2201      	movs	r2, #1
 800f5ba:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 f940 	bl	800f844 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f5c4:	e013      	b.n	800f5ee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	885b      	ldrh	r3, [r3, #2]
 800f5ca:	2b02      	cmp	r3, #2
 800f5cc:	d10b      	bne.n	800f5e6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	889b      	ldrh	r3, [r3, #4]
 800f5d2:	0a1b      	lsrs	r3, r3, #8
 800f5d4:	b29b      	uxth	r3, r3
 800f5d6:	b2da      	uxtb	r2, r3
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f000 f930 	bl	800f844 <USBD_CtlSendStatus>
}
 800f5e4:	e003      	b.n	800f5ee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f5e6:	6839      	ldr	r1, [r7, #0]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f000 f860 	bl	800f6ae <USBD_CtlError>
}
 800f5ee:	bf00      	nop
 800f5f0:	3708      	adds	r7, #8
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b082      	sub	sp, #8
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f606:	b2db      	uxtb	r3, r3
 800f608:	3b01      	subs	r3, #1
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	d80b      	bhi.n	800f626 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	885b      	ldrh	r3, [r3, #2]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d10c      	bne.n	800f630 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 f910 	bl	800f844 <USBD_CtlSendStatus>
      }
      break;
 800f624:	e004      	b.n	800f630 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f626:	6839      	ldr	r1, [r7, #0]
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f000 f840 	bl	800f6ae <USBD_CtlError>
      break;
 800f62e:	e000      	b.n	800f632 <USBD_ClrFeature+0x3c>
      break;
 800f630:	bf00      	nop
  }
}
 800f632:	bf00      	nop
 800f634:	3708      	adds	r7, #8
 800f636:	46bd      	mov	sp, r7
 800f638:	bd80      	pop	{r7, pc}

0800f63a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f63a:	b580      	push	{r7, lr}
 800f63c:	b084      	sub	sp, #16
 800f63e:	af00      	add	r7, sp, #0
 800f640:	6078      	str	r0, [r7, #4]
 800f642:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f644:	683b      	ldr	r3, [r7, #0]
 800f646:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	781a      	ldrb	r2, [r3, #0]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	3301      	adds	r3, #1
 800f654:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	781a      	ldrb	r2, [r3, #0]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	3301      	adds	r3, #1
 800f662:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f664:	68f8      	ldr	r0, [r7, #12]
 800f666:	f7ff fa16 	bl	800ea96 <SWAPBYTE>
 800f66a:	4603      	mov	r3, r0
 800f66c:	461a      	mov	r2, r3
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	3301      	adds	r3, #1
 800f676:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	3301      	adds	r3, #1
 800f67c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f67e:	68f8      	ldr	r0, [r7, #12]
 800f680:	f7ff fa09 	bl	800ea96 <SWAPBYTE>
 800f684:	4603      	mov	r3, r0
 800f686:	461a      	mov	r2, r3
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	3301      	adds	r3, #1
 800f690:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	3301      	adds	r3, #1
 800f696:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f698:	68f8      	ldr	r0, [r7, #12]
 800f69a:	f7ff f9fc 	bl	800ea96 <SWAPBYTE>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	80da      	strh	r2, [r3, #6]
}
 800f6a6:	bf00      	nop
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}

0800f6ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6ae:	b580      	push	{r7, lr}
 800f6b0:	b082      	sub	sp, #8
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
 800f6b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f6b8:	2180      	movs	r1, #128	@ 0x80
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f005 fce8 	bl	8015090 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f6c0:	2100      	movs	r1, #0
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f005 fce4 	bl	8015090 <USBD_LL_StallEP>
}
 800f6c8:	bf00      	nop
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b086      	sub	sp, #24
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	60f8      	str	r0, [r7, #12]
 800f6d8:	60b9      	str	r1, [r7, #8]
 800f6da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d036      	beq.n	800f754 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f6ea:	6938      	ldr	r0, [r7, #16]
 800f6ec:	f000 f836 	bl	800f75c <USBD_GetLen>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	3301      	adds	r3, #1
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f6fe:	7dfb      	ldrb	r3, [r7, #23]
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	4413      	add	r3, r2
 800f704:	687a      	ldr	r2, [r7, #4]
 800f706:	7812      	ldrb	r2, [r2, #0]
 800f708:	701a      	strb	r2, [r3, #0]
  idx++;
 800f70a:	7dfb      	ldrb	r3, [r7, #23]
 800f70c:	3301      	adds	r3, #1
 800f70e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f710:	7dfb      	ldrb	r3, [r7, #23]
 800f712:	68ba      	ldr	r2, [r7, #8]
 800f714:	4413      	add	r3, r2
 800f716:	2203      	movs	r2, #3
 800f718:	701a      	strb	r2, [r3, #0]
  idx++;
 800f71a:	7dfb      	ldrb	r3, [r7, #23]
 800f71c:	3301      	adds	r3, #1
 800f71e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f720:	e013      	b.n	800f74a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f722:	7dfb      	ldrb	r3, [r7, #23]
 800f724:	68ba      	ldr	r2, [r7, #8]
 800f726:	4413      	add	r3, r2
 800f728:	693a      	ldr	r2, [r7, #16]
 800f72a:	7812      	ldrb	r2, [r2, #0]
 800f72c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	3301      	adds	r3, #1
 800f732:	613b      	str	r3, [r7, #16]
    idx++;
 800f734:	7dfb      	ldrb	r3, [r7, #23]
 800f736:	3301      	adds	r3, #1
 800f738:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f73a:	7dfb      	ldrb	r3, [r7, #23]
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	4413      	add	r3, r2
 800f740:	2200      	movs	r2, #0
 800f742:	701a      	strb	r2, [r3, #0]
    idx++;
 800f744:	7dfb      	ldrb	r3, [r7, #23]
 800f746:	3301      	adds	r3, #1
 800f748:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d1e7      	bne.n	800f722 <USBD_GetString+0x52>
 800f752:	e000      	b.n	800f756 <USBD_GetString+0x86>
    return;
 800f754:	bf00      	nop
  }
}
 800f756:	3718      	adds	r7, #24
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd80      	pop	{r7, pc}

0800f75c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b085      	sub	sp, #20
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f764:	2300      	movs	r3, #0
 800f766:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f76c:	e005      	b.n	800f77a <USBD_GetLen+0x1e>
  {
    len++;
 800f76e:	7bfb      	ldrb	r3, [r7, #15]
 800f770:	3301      	adds	r3, #1
 800f772:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f774:	68bb      	ldr	r3, [r7, #8]
 800f776:	3301      	adds	r3, #1
 800f778:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	781b      	ldrb	r3, [r3, #0]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d1f5      	bne.n	800f76e <USBD_GetLen+0x12>
  }

  return len;
 800f782:	7bfb      	ldrb	r3, [r7, #15]
}
 800f784:	4618      	mov	r0, r3
 800f786:	3714      	adds	r7, #20
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2202      	movs	r2, #2
 800f7a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	68ba      	ldr	r2, [r7, #8]
 800f7b4:	2100      	movs	r1, #0
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f005 fcf3 	bl	80151a2 <USBD_LL_Transmit>

  return USBD_OK;
 800f7bc:	2300      	movs	r3, #0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3710      	adds	r7, #16
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b084      	sub	sp, #16
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	60f8      	str	r0, [r7, #12]
 800f7ce:	60b9      	str	r1, [r7, #8]
 800f7d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	68ba      	ldr	r2, [r7, #8]
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f005 fce2 	bl	80151a2 <USBD_LL_Transmit>

  return USBD_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3710      	adds	r7, #16
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd80      	pop	{r7, pc}

0800f7e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b084      	sub	sp, #16
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	2203      	movs	r2, #3
 800f7f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	687a      	ldr	r2, [r7, #4]
 800f800:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	687a      	ldr	r2, [r7, #4]
 800f808:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	68ba      	ldr	r2, [r7, #8]
 800f810:	2100      	movs	r1, #0
 800f812:	68f8      	ldr	r0, [r7, #12]
 800f814:	f005 fce6 	bl	80151e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	3710      	adds	r7, #16
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd80      	pop	{r7, pc}

0800f822 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f822:	b580      	push	{r7, lr}
 800f824:	b084      	sub	sp, #16
 800f826:	af00      	add	r7, sp, #0
 800f828:	60f8      	str	r0, [r7, #12]
 800f82a:	60b9      	str	r1, [r7, #8]
 800f82c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	68ba      	ldr	r2, [r7, #8]
 800f832:	2100      	movs	r1, #0
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f005 fcd5 	bl	80151e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f83a:	2300      	movs	r3, #0
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3710      	adds	r7, #16
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2204      	movs	r2, #4
 800f850:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f854:	2300      	movs	r3, #0
 800f856:	2200      	movs	r2, #0
 800f858:	2100      	movs	r1, #0
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f005 fca1 	bl	80151a2 <USBD_LL_Transmit>

  return USBD_OK;
 800f860:	2300      	movs	r3, #0
}
 800f862:	4618      	mov	r0, r3
 800f864:	3708      	adds	r7, #8
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	2205      	movs	r2, #5
 800f876:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f87a:	2300      	movs	r3, #0
 800f87c:	2200      	movs	r2, #0
 800f87e:	2100      	movs	r1, #0
 800f880:	6878      	ldr	r0, [r7, #4]
 800f882:	f005 fcaf 	bl	80151e4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f886:	2300      	movs	r3, #0
}
 800f888:	4618      	mov	r0, r3
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b088      	sub	sp, #32
 800f894:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f896:	2300      	movs	r3, #0
 800f898:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f89a:	f107 0308 	add.w	r3, r7, #8
 800f89e:	2218      	movs	r2, #24
 800f8a0:	2100      	movs	r1, #0
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	f001 fa21 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 800f8a8:	233f      	movs	r3, #63	@ 0x3f
 800f8aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800f8ac:	2381      	movs	r3, #129	@ 0x81
 800f8ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f8b0:	1dfb      	adds	r3, r7, #7
 800f8b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f8b8:	f107 0308 	add.w	r3, r7, #8
 800f8bc:	2100      	movs	r1, #0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f001 fc9c 	bl	80111fc <hci_send_req>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	da01      	bge.n	800f8ce <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f8ca:	23ff      	movs	r3, #255	@ 0xff
 800f8cc:	e000      	b.n	800f8d0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800f8ce:	79fb      	ldrb	r3, [r7, #7]
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3720      	adds	r7, #32
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}

0800f8d8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800f8d8:	b5b0      	push	{r4, r5, r7, lr}
 800f8da:	b0ce      	sub	sp, #312	@ 0x138
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	4605      	mov	r5, r0
 800f8e0:	460c      	mov	r4, r1
 800f8e2:	4610      	mov	r0, r2
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f8ea:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f8ee:	462a      	mov	r2, r5
 800f8f0:	701a      	strb	r2, [r3, #0]
 800f8f2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f8f6:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f8fa:	4622      	mov	r2, r4
 800f8fc:	801a      	strh	r2, [r3, #0]
 800f8fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f902:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800f906:	4602      	mov	r2, r0
 800f908:	801a      	strh	r2, [r3, #0]
 800f90a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f90e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f912:	460a      	mov	r2, r1
 800f914:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800f916:	f107 0310 	add.w	r3, r7, #16
 800f91a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f91e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800f922:	3308      	adds	r3, #8
 800f924:	f107 0210 	add.w	r2, r7, #16
 800f928:	4413      	add	r3, r2
 800f92a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800f92e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800f932:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800f936:	4413      	add	r3, r2
 800f938:	3309      	adds	r3, #9
 800f93a:	f107 0210 	add.w	r2, r7, #16
 800f93e:	4413      	add	r3, r2
 800f940:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f944:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f948:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f94c:	2200      	movs	r2, #0
 800f94e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f950:	2300      	movs	r3, #0
 800f952:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800f956:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f95a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f95e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800f962:	7812      	ldrb	r2, [r2, #0]
 800f964:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f966:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f96a:	3301      	adds	r3, #1
 800f96c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800f970:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f974:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f978:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800f97c:	8812      	ldrh	r2, [r2, #0]
 800f97e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800f982:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f986:	3302      	adds	r3, #2
 800f988:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800f98c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f990:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f994:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800f998:	8812      	ldrh	r2, [r2, #0]
 800f99a:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800f99e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9a2:	3302      	adds	r3, #2
 800f9a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800f9a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f9ac:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f9b0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f9b4:	7812      	ldrb	r2, [r2, #0]
 800f9b6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f9b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9bc:	3301      	adds	r3, #1
 800f9be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800f9c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f9c6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800f9ca:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800f9cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9d0:	3301      	adds	r3, #1
 800f9d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800f9d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f9da:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800f9de:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800f9e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800f9ea:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f9ee:	3308      	adds	r3, #8
 800f9f0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800f9f4:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f001 f966 	bl	8010cca <Osal_MemCpy>
    index_input += Local_Name_Length;
 800f9fe:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800fa02:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800fa06:	4413      	add	r3, r2
 800fa08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800fa0c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fa10:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800fa14:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800fa16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800fa20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fa24:	3301      	adds	r3, #1
 800fa26:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800fa2a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f001 f94b 	bl	8010cca <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800fa34:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800fa38:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800fa3c:	4413      	add	r3, r2
 800fa3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800fa42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa46:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800fa4a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800fa4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa50:	3302      	adds	r3, #2
 800fa52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800fa56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa5a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800fa5e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800fa60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa64:	3302      	adds	r3, #2
 800fa66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fa6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa6e:	2218      	movs	r2, #24
 800fa70:	2100      	movs	r1, #0
 800fa72:	4618      	mov	r0, r3
 800fa74:	f001 f939 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 800fa78:	233f      	movs	r3, #63	@ 0x3f
 800fa7a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800fa7e:	2383      	movs	r3, #131	@ 0x83
 800fa80:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fa84:	f107 0310 	add.w	r3, r7, #16
 800fa88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fa8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa90:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fa94:	f107 030f 	add.w	r3, r7, #15
 800fa98:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800faa2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800faa6:	2100      	movs	r1, #0
 800faa8:	4618      	mov	r0, r3
 800faaa:	f001 fba7 	bl	80111fc <hci_send_req>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	da01      	bge.n	800fab8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800fab4:	23ff      	movs	r3, #255	@ 0xff
 800fab6:	e004      	b.n	800fac2 <aci_gap_set_discoverable+0x1ea>
  return status;
 800fab8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fabc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fac0:	781b      	ldrb	r3, [r3, #0]
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800fac8:	46bd      	mov	sp, r7
 800faca:	bdb0      	pop	{r4, r5, r7, pc}

0800facc <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800facc:	b580      	push	{r7, lr}
 800face:	b0cc      	sub	sp, #304	@ 0x130
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4602      	mov	r2, r0
 800fad4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fad8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fadc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800fade:	f107 0310 	add.w	r3, r7, #16
 800fae2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fae6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800faea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800faee:	2200      	movs	r2, #0
 800faf0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800faf2:	2300      	movs	r3, #0
 800faf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800faf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fafc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb00:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fb04:	7812      	ldrb	r2, [r2, #0]
 800fb06:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fb08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fb12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fb16:	2218      	movs	r2, #24
 800fb18:	2100      	movs	r1, #0
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f001 f8e5 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 800fb20:	233f      	movs	r3, #63	@ 0x3f
 800fb22:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800fb26:	2385      	movs	r3, #133	@ 0x85
 800fb28:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fb2c:	f107 0310 	add.w	r3, r7, #16
 800fb30:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fb34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb38:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fb3c:	f107 030f 	add.w	r3, r7, #15
 800fb40:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fb44:	2301      	movs	r3, #1
 800fb46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fb4e:	2100      	movs	r1, #0
 800fb50:	4618      	mov	r0, r3
 800fb52:	f001 fb53 	bl	80111fc <hci_send_req>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	da01      	bge.n	800fb60 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800fb5c:	23ff      	movs	r3, #255	@ 0xff
 800fb5e:	e004      	b.n	800fb6a <aci_gap_set_io_capability+0x9e>
  return status;
 800fb60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fb68:	781b      	ldrb	r3, [r3, #0]
}
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}

0800fb74 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800fb74:	b5b0      	push	{r4, r5, r7, lr}
 800fb76:	b0cc      	sub	sp, #304	@ 0x130
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	460c      	mov	r4, r1
 800fb7e:	4610      	mov	r0, r2
 800fb80:	4619      	mov	r1, r3
 800fb82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb86:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fb8a:	462a      	mov	r2, r5
 800fb8c:	701a      	strb	r2, [r3, #0]
 800fb8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb92:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fb96:	4622      	mov	r2, r4
 800fb98:	701a      	strb	r2, [r3, #0]
 800fb9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb9e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fba2:	4602      	mov	r2, r0
 800fba4:	701a      	strb	r2, [r3, #0]
 800fba6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbaa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fbae:	460a      	mov	r2, r1
 800fbb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800fbb2:	f107 0310 	add.w	r3, r7, #16
 800fbb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fbba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800fbcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbd4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fbd8:	7812      	ldrb	r2, [r2, #0]
 800fbda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fbdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800fbe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbea:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbee:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fbf2:	7812      	ldrb	r2, [r2, #0]
 800fbf4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fbf6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800fc00:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc04:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc08:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fc0c:	7812      	ldrb	r2, [r2, #0]
 800fc0e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fc10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc14:	3301      	adds	r3, #1
 800fc16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800fc1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc22:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fc26:	7812      	ldrb	r2, [r2, #0]
 800fc28:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800fc2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc2e:	3301      	adds	r3, #1
 800fc30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800fc34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc38:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800fc3c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800fc3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc42:	3301      	adds	r3, #1
 800fc44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800fc48:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc4c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800fc50:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fc52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc56:	3301      	adds	r3, #1
 800fc58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800fc5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc60:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800fc64:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800fc66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc6a:	3301      	adds	r3, #1
 800fc6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800fc70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc74:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800fc78:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800fc7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc80:	3304      	adds	r3, #4
 800fc82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800fc86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc8a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800fc8e:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800fc90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc94:	3301      	adds	r3, #1
 800fc96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc9e:	2218      	movs	r2, #24
 800fca0:	2100      	movs	r1, #0
 800fca2:	4618      	mov	r0, r3
 800fca4:	f001 f821 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 800fca8:	233f      	movs	r3, #63	@ 0x3f
 800fcaa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800fcae:	2386      	movs	r3, #134	@ 0x86
 800fcb0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fcb4:	f107 0310 	add.w	r3, r7, #16
 800fcb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fcbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fcc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fcc4:	f107 030f 	add.w	r3, r7, #15
 800fcc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fccc:	2301      	movs	r3, #1
 800fcce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fcd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f001 fa8f 	bl	80111fc <hci_send_req>
 800fcde:	4603      	mov	r3, r0
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	da01      	bge.n	800fce8 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800fce4:	23ff      	movs	r3, #255	@ 0xff
 800fce6:	e004      	b.n	800fcf2 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800fce8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fcf0:	781b      	ldrb	r3, [r3, #0]
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bdb0      	pop	{r4, r5, r7, pc}

0800fcfc <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b0cc      	sub	sp, #304	@ 0x130
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	4602      	mov	r2, r0
 800fd04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd08:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fd0c:	6019      	str	r1, [r3, #0]
 800fd0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd12:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fd16:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800fd18:	f107 0310 	add.w	r3, r7, #16
 800fd1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fd20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fd28:	2200      	movs	r2, #0
 800fd2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800fd32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fd3a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fd3e:	8812      	ldrh	r2, [r2, #0]
 800fd40:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fd42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd46:	3302      	adds	r3, #2
 800fd48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800fd4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd50:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fd54:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fd58:	6812      	ldr	r2, [r2, #0]
 800fd5a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800fd5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd62:	3304      	adds	r3, #4
 800fd64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fd68:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd6c:	2218      	movs	r2, #24
 800fd6e:	2100      	movs	r1, #0
 800fd70:	4618      	mov	r0, r3
 800fd72:	f000 ffba 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 800fd76:	233f      	movs	r3, #63	@ 0x3f
 800fd78:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800fd7c:	2388      	movs	r3, #136	@ 0x88
 800fd7e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fd82:	f107 0310 	add.w	r3, r7, #16
 800fd86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fd8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fd92:	f107 030f 	add.w	r3, r7, #15
 800fd96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fd9a:	2301      	movs	r3, #1
 800fd9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fda0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fda4:	2100      	movs	r1, #0
 800fda6:	4618      	mov	r0, r3
 800fda8:	f001 fa28 	bl	80111fc <hci_send_req>
 800fdac:	4603      	mov	r3, r0
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	da01      	bge.n	800fdb6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800fdb2:	23ff      	movs	r3, #255	@ 0xff
 800fdb4:	e004      	b.n	800fdc0 <aci_gap_pass_key_resp+0xc4>
  return status;
 800fdb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fdbe:	781b      	ldrb	r3, [r3, #0]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800fdca:	b590      	push	{r4, r7, lr}
 800fdcc:	b0cd      	sub	sp, #308	@ 0x134
 800fdce:	af00      	add	r7, sp, #0
 800fdd0:	4604      	mov	r4, r0
 800fdd2:	4608      	mov	r0, r1
 800fdd4:	4611      	mov	r1, r2
 800fdd6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fdda:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fdde:	6013      	str	r3, [r2, #0]
 800fde0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fde4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fde8:	4622      	mov	r2, r4
 800fdea:	701a      	strb	r2, [r3, #0]
 800fdec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdf0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	701a      	strb	r2, [r3, #0]
 800fdf8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdfc:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fe00:	460a      	mov	r2, r1
 800fe02:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800fe04:	f107 0310 	add.w	r3, r7, #16
 800fe08:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800fe0c:	f107 0308 	add.w	r3, r7, #8
 800fe10:	2207      	movs	r2, #7
 800fe12:	2100      	movs	r1, #0
 800fe14:	4618      	mov	r0, r3
 800fe16:	f000 ff68 	bl	8010cea <Osal_MemSet>
  int index_input = 0;
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800fe20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe28:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fe2c:	7812      	ldrb	r2, [r2, #0]
 800fe2e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fe30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe34:	3301      	adds	r3, #1
 800fe36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800fe3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe42:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fe46:	7812      	ldrb	r2, [r2, #0]
 800fe48:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fe4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe4e:	3301      	adds	r3, #1
 800fe50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800fe54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe5c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fe60:	7812      	ldrb	r2, [r2, #0]
 800fe62:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fe64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe68:	3301      	adds	r3, #1
 800fe6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe72:	2218      	movs	r2, #24
 800fe74:	2100      	movs	r1, #0
 800fe76:	4618      	mov	r0, r3
 800fe78:	f000 ff37 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 800fe7c:	233f      	movs	r3, #63	@ 0x3f
 800fe7e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800fe82:	238a      	movs	r3, #138	@ 0x8a
 800fe84:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fe88:	f107 0310 	add.w	r3, r7, #16
 800fe8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fe90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800fe98:	f107 0308 	add.w	r3, r7, #8
 800fe9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800fea0:	2307      	movs	r3, #7
 800fea2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800feaa:	2100      	movs	r1, #0
 800feac:	4618      	mov	r0, r3
 800feae:	f001 f9a5 	bl	80111fc <hci_send_req>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	da01      	bge.n	800febc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800feb8:	23ff      	movs	r3, #255	@ 0xff
 800feba:	e02e      	b.n	800ff1a <aci_gap_init+0x150>
  if ( resp.Status )
 800febc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fec0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fec4:	781b      	ldrb	r3, [r3, #0]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d005      	beq.n	800fed6 <aci_gap_init+0x10c>
    return resp.Status;
 800feca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fece:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	e021      	b.n	800ff1a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800fed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800feda:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fede:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fee8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800fef0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fef4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800fef8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800fefc:	b29a      	uxth	r2, r3
 800fefe:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ff02:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800ff04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff08:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ff0c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ff10:	b29a      	uxth	r2, r3
 800ff12:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800ff16:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ff18:	2300      	movs	r3, #0
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd90      	pop	{r4, r7, pc}

0800ff24 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b0cc      	sub	sp, #304	@ 0x130
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	4602      	mov	r2, r0
 800ff2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff30:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ff34:	6019      	str	r1, [r3, #0]
 800ff36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff3a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ff3e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800ff40:	f107 0310 	add.w	r3, r7, #16
 800ff44:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ff48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff4c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ff50:	2200      	movs	r2, #0
 800ff52:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ff54:	2300      	movs	r3, #0
 800ff56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800ff5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ff62:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ff66:	7812      	ldrb	r2, [r2, #0]
 800ff68:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ff6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff6e:	3301      	adds	r3, #1
 800ff70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800ff74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff78:	1c58      	adds	r0, r3, #1
 800ff7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff7e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ff82:	781a      	ldrb	r2, [r3, #0]
 800ff84:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff88:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ff8c:	6819      	ldr	r1, [r3, #0]
 800ff8e:	f000 fe9c 	bl	8010cca <Osal_MemCpy>
  index_input += AdvDataLen;
 800ff92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff96:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ff9a:	781b      	ldrb	r3, [r3, #0]
 800ff9c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ffa0:	4413      	add	r3, r2
 800ffa2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ffa6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffaa:	2218      	movs	r2, #24
 800ffac:	2100      	movs	r1, #0
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f000 fe9b 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 800ffb4:	233f      	movs	r3, #63	@ 0x3f
 800ffb6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800ffba:	238e      	movs	r3, #142	@ 0x8e
 800ffbc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ffc0:	f107 0310 	add.w	r3, r7, #16
 800ffc4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ffc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ffcc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ffd0:	f107 030f 	add.w	r3, r7, #15
 800ffd4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ffde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ffe2:	2100      	movs	r1, #0
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	f001 f909 	bl	80111fc <hci_send_req>
 800ffea:	4603      	mov	r3, r0
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	da01      	bge.n	800fff4 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800fff0:	23ff      	movs	r3, #255	@ 0xff
 800fff2:	e004      	b.n	800fffe <aci_gap_update_adv_data+0xda>
  return status;
 800fff4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fff8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fffc:	781b      	ldrb	r3, [r3, #0]
}
 800fffe:	4618      	mov	r0, r3
 8010000:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}

08010008 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b088      	sub	sp, #32
 801000c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010012:	f107 0308 	add.w	r3, r7, #8
 8010016:	2218      	movs	r2, #24
 8010018:	2100      	movs	r1, #0
 801001a:	4618      	mov	r0, r3
 801001c:	f000 fe65 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 8010020:	233f      	movs	r3, #63	@ 0x3f
 8010022:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8010024:	2392      	movs	r3, #146	@ 0x92
 8010026:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010028:	1dfb      	adds	r3, r7, #7
 801002a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801002c:	2301      	movs	r3, #1
 801002e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010030:	f107 0308 	add.w	r3, r7, #8
 8010034:	2100      	movs	r1, #0
 8010036:	4618      	mov	r0, r3
 8010038:	f001 f8e0 	bl	80111fc <hci_send_req>
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	da01      	bge.n	8010046 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010042:	23ff      	movs	r3, #255	@ 0xff
 8010044:	e000      	b.n	8010048 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8010046:	79fb      	ldrb	r3, [r7, #7]
}
 8010048:	4618      	mov	r0, r3
 801004a:	3720      	adds	r7, #32
 801004c:	46bd      	mov	sp, r7
 801004e:	bd80      	pop	{r7, pc}

08010050 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b0cc      	sub	sp, #304	@ 0x130
 8010054:	af00      	add	r7, sp, #0
 8010056:	4602      	mov	r2, r0
 8010058:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801005c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010060:	801a      	strh	r2, [r3, #0]
 8010062:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010066:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801006a:	460a      	mov	r2, r1
 801006c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 801006e:	f107 0310 	add.w	r3, r7, #16
 8010072:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010076:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801007a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801007e:	2200      	movs	r2, #0
 8010080:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010088:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801008c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010090:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010094:	8812      	ldrh	r2, [r2, #0]
 8010096:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010098:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801009c:	3302      	adds	r3, #2
 801009e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 80100a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80100a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80100aa:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80100ae:	7812      	ldrb	r2, [r2, #0]
 80100b0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80100b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80100b6:	3301      	adds	r3, #1
 80100b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80100bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80100c0:	2218      	movs	r2, #24
 80100c2:	2100      	movs	r1, #0
 80100c4:	4618      	mov	r0, r3
 80100c6:	f000 fe10 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 80100ca:	233f      	movs	r3, #63	@ 0x3f
 80100cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80100d0:	23a5      	movs	r3, #165	@ 0xa5
 80100d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80100d6:	f107 0310 	add.w	r3, r7, #16
 80100da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80100de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80100e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80100e6:	f107 030f 	add.w	r3, r7, #15
 80100ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80100ee:	2301      	movs	r3, #1
 80100f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80100f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80100f8:	2100      	movs	r1, #0
 80100fa:	4618      	mov	r0, r3
 80100fc:	f001 f87e 	bl	80111fc <hci_send_req>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	da01      	bge.n	801010a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8010106:	23ff      	movs	r3, #255	@ 0xff
 8010108:	e004      	b.n	8010114 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 801010a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801010e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010112:	781b      	ldrb	r3, [r3, #0]
}
 8010114:	4618      	mov	r0, r3
 8010116:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801011a:	46bd      	mov	sp, r7
 801011c:	bd80      	pop	{r7, pc}

0801011e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 801011e:	b580      	push	{r7, lr}
 8010120:	b088      	sub	sp, #32
 8010122:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010124:	2300      	movs	r3, #0
 8010126:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010128:	f107 0308 	add.w	r3, r7, #8
 801012c:	2218      	movs	r2, #24
 801012e:	2100      	movs	r1, #0
 8010130:	4618      	mov	r0, r3
 8010132:	f000 fdda 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 8010136:	233f      	movs	r3, #63	@ 0x3f
 8010138:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 801013a:	f240 1301 	movw	r3, #257	@ 0x101
 801013e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010140:	1dfb      	adds	r3, r7, #7
 8010142:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010144:	2301      	movs	r3, #1
 8010146:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010148:	f107 0308 	add.w	r3, r7, #8
 801014c:	2100      	movs	r1, #0
 801014e:	4618      	mov	r0, r3
 8010150:	f001 f854 	bl	80111fc <hci_send_req>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	da01      	bge.n	801015e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801015a:	23ff      	movs	r3, #255	@ 0xff
 801015c:	e000      	b.n	8010160 <aci_gatt_init+0x42>
  return status;
 801015e:	79fb      	ldrb	r3, [r7, #7]
}
 8010160:	4618      	mov	r0, r3
 8010162:	3720      	adds	r7, #32
 8010164:	46bd      	mov	sp, r7
 8010166:	bd80      	pop	{r7, pc}

08010168 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8010168:	b590      	push	{r4, r7, lr}
 801016a:	b0cf      	sub	sp, #316	@ 0x13c
 801016c:	af00      	add	r7, sp, #0
 801016e:	4604      	mov	r4, r0
 8010170:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010174:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8010178:	6001      	str	r1, [r0, #0]
 801017a:	4610      	mov	r0, r2
 801017c:	4619      	mov	r1, r3
 801017e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010182:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010186:	4622      	mov	r2, r4
 8010188:	701a      	strb	r2, [r3, #0]
 801018a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801018e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010192:	4602      	mov	r2, r0
 8010194:	701a      	strb	r2, [r3, #0]
 8010196:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801019a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801019e:	460a      	mov	r2, r1
 80101a0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 80101a2:	f107 0310 	add.w	r3, r7, #16
 80101a6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 80101aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101ae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d00a      	beq.n	80101ce <aci_gatt_add_service+0x66>
 80101b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80101bc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80101c0:	781b      	ldrb	r3, [r3, #0]
 80101c2:	2b02      	cmp	r3, #2
 80101c4:	d101      	bne.n	80101ca <aci_gatt_add_service+0x62>
 80101c6:	2311      	movs	r3, #17
 80101c8:	e002      	b.n	80101d0 <aci_gatt_add_service+0x68>
 80101ca:	2301      	movs	r3, #1
 80101cc:	e000      	b.n	80101d0 <aci_gatt_add_service+0x68>
 80101ce:	2303      	movs	r3, #3
 80101d0:	f107 0210 	add.w	r2, r7, #16
 80101d4:	4413      	add	r3, r2
 80101d6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80101da:	f107 030c 	add.w	r3, r7, #12
 80101de:	2203      	movs	r2, #3
 80101e0:	2100      	movs	r1, #0
 80101e2:	4618      	mov	r0, r3
 80101e4:	f000 fd81 	bl	8010cea <Osal_MemSet>
  int index_input = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80101ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80101f2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80101f6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80101fa:	7812      	ldrb	r2, [r2, #0]
 80101fc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80101fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010202:	3301      	adds	r3, #1
 8010204:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8010208:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801020c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010210:	781b      	ldrb	r3, [r3, #0]
 8010212:	2b01      	cmp	r3, #1
 8010214:	d002      	beq.n	801021c <aci_gatt_add_service+0xb4>
 8010216:	2b02      	cmp	r3, #2
 8010218:	d004      	beq.n	8010224 <aci_gatt_add_service+0xbc>
 801021a:	e007      	b.n	801022c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 801021c:	2302      	movs	r3, #2
 801021e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010222:	e005      	b.n	8010230 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8010224:	2310      	movs	r3, #16
 8010226:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 801022a:	e001      	b.n	8010230 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 801022c:	2397      	movs	r3, #151	@ 0x97
 801022e:	e06c      	b.n	801030a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8010230:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010234:	1c58      	adds	r0, r3, #1
 8010236:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 801023a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801023e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010242:	6819      	ldr	r1, [r3, #0]
 8010244:	f000 fd41 	bl	8010cca <Osal_MemCpy>
    index_input += size;
 8010248:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 801024c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010250:	4413      	add	r3, r2
 8010252:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8010256:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801025a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801025e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010262:	7812      	ldrb	r2, [r2, #0]
 8010264:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010266:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801026a:	3301      	adds	r3, #1
 801026c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010270:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010274:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010278:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 801027c:	7812      	ldrb	r2, [r2, #0]
 801027e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010280:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010284:	3301      	adds	r3, #1
 8010286:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801028a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801028e:	2218      	movs	r2, #24
 8010290:	2100      	movs	r1, #0
 8010292:	4618      	mov	r0, r3
 8010294:	f000 fd29 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 8010298:	233f      	movs	r3, #63	@ 0x3f
 801029a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 801029e:	f44f 7381 	mov.w	r3, #258	@ 0x102
 80102a2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80102a6:	f107 0310 	add.w	r3, r7, #16
 80102aa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80102ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80102b2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80102b6:	f107 030c 	add.w	r3, r7, #12
 80102ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80102be:	2303      	movs	r3, #3
 80102c0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80102c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80102c8:	2100      	movs	r1, #0
 80102ca:	4618      	mov	r0, r3
 80102cc:	f000 ff96 	bl	80111fc <hci_send_req>
 80102d0:	4603      	mov	r3, r0
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	da01      	bge.n	80102da <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80102d6:	23ff      	movs	r3, #255	@ 0xff
 80102d8:	e017      	b.n	801030a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80102da:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80102de:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d005      	beq.n	80102f4 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80102e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80102ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	e00a      	b.n	801030a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80102f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80102f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80102fc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010300:	b29a      	uxth	r2, r3
 8010302:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010306:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010308:	2300      	movs	r3, #0
}
 801030a:	4618      	mov	r0, r3
 801030c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8010310:	46bd      	mov	sp, r7
 8010312:	bd90      	pop	{r4, r7, pc}

08010314 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8010314:	b590      	push	{r4, r7, lr}
 8010316:	b0d1      	sub	sp, #324	@ 0x144
 8010318:	af00      	add	r7, sp, #0
 801031a:	4604      	mov	r4, r0
 801031c:	4608      	mov	r0, r1
 801031e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8010322:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8010326:	600a      	str	r2, [r1, #0]
 8010328:	4619      	mov	r1, r3
 801032a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801032e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010332:	4622      	mov	r2, r4
 8010334:	801a      	strh	r2, [r3, #0]
 8010336:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801033a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801033e:	4602      	mov	r2, r0
 8010340:	701a      	strb	r2, [r3, #0]
 8010342:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010346:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801034a:	460a      	mov	r2, r1
 801034c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 801034e:	f107 0318 	add.w	r3, r7, #24
 8010352:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8010356:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801035a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	2b01      	cmp	r3, #1
 8010362:	d00a      	beq.n	801037a <aci_gatt_add_char+0x66>
 8010364:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010368:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d101      	bne.n	8010376 <aci_gatt_add_char+0x62>
 8010372:	2313      	movs	r3, #19
 8010374:	e002      	b.n	801037c <aci_gatt_add_char+0x68>
 8010376:	2303      	movs	r3, #3
 8010378:	e000      	b.n	801037c <aci_gatt_add_char+0x68>
 801037a:	2305      	movs	r3, #5
 801037c:	f107 0218 	add.w	r2, r7, #24
 8010380:	4413      	add	r3, r2
 8010382:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010386:	f107 0314 	add.w	r3, r7, #20
 801038a:	2203      	movs	r2, #3
 801038c:	2100      	movs	r1, #0
 801038e:	4618      	mov	r0, r3
 8010390:	f000 fcab 	bl	8010cea <Osal_MemSet>
  int index_input = 0;
 8010394:	2300      	movs	r3, #0
 8010396:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 801039a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801039e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80103a2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 80103a6:	8812      	ldrh	r2, [r2, #0]
 80103a8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80103aa:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80103ae:	3302      	adds	r3, #2
 80103b0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 80103b4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80103b8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80103bc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 80103c0:	7812      	ldrb	r2, [r2, #0]
 80103c2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80103c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80103c8:	3301      	adds	r3, #1
 80103ca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80103ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80103d2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d002      	beq.n	80103e2 <aci_gatt_add_char+0xce>
 80103dc:	2b02      	cmp	r3, #2
 80103de:	d004      	beq.n	80103ea <aci_gatt_add_char+0xd6>
 80103e0:	e007      	b.n	80103f2 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80103e2:	2302      	movs	r3, #2
 80103e4:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80103e8:	e005      	b.n	80103f6 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80103ea:	2310      	movs	r3, #16
 80103ec:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80103f0:	e001      	b.n	80103f6 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80103f2:	2397      	movs	r3, #151	@ 0x97
 80103f4:	e091      	b.n	801051a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80103f6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80103fa:	1cd8      	adds	r0, r3, #3
 80103fc:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8010400:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010404:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010408:	6819      	ldr	r1, [r3, #0]
 801040a:	f000 fc5e 	bl	8010cca <Osal_MemCpy>
    index_input += size;
 801040e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8010412:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8010416:	4413      	add	r3, r2
 8010418:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 801041c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010420:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010424:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8010428:	8812      	ldrh	r2, [r2, #0]
 801042a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 801042c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010430:	3302      	adds	r3, #2
 8010432:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8010436:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801043a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 801043e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010440:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010444:	3301      	adds	r3, #1
 8010446:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 801044a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801044e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010452:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010454:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010458:	3301      	adds	r3, #1
 801045a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 801045e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010462:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8010466:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8010468:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801046c:	3301      	adds	r3, #1
 801046e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010472:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010476:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 801047a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 801047c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010480:	3301      	adds	r3, #1
 8010482:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8010486:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801048a:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 801048e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010490:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010494:	3301      	adds	r3, #1
 8010496:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801049a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801049e:	2218      	movs	r2, #24
 80104a0:	2100      	movs	r1, #0
 80104a2:	4618      	mov	r0, r3
 80104a4:	f000 fc21 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 80104a8:	233f      	movs	r3, #63	@ 0x3f
 80104aa:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 80104ae:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80104b2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 80104b6:	f107 0318 	add.w	r3, r7, #24
 80104ba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 80104be:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80104c2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 80104c6:	f107 0314 	add.w	r3, r7, #20
 80104ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80104ce:	2303      	movs	r3, #3
 80104d0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80104d4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80104d8:	2100      	movs	r1, #0
 80104da:	4618      	mov	r0, r3
 80104dc:	f000 fe8e 	bl	80111fc <hci_send_req>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	da01      	bge.n	80104ea <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80104e6:	23ff      	movs	r3, #255	@ 0xff
 80104e8:	e017      	b.n	801051a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80104ea:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80104ee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d005      	beq.n	8010504 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80104f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80104fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	e00a      	b.n	801051a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010504:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010508:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801050c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010510:	b29a      	uxth	r2, r3
 8010512:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010516:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010518:	2300      	movs	r3, #0
}
 801051a:	4618      	mov	r0, r3
 801051c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8010520:	46bd      	mov	sp, r7
 8010522:	bd90      	pop	{r4, r7, pc}

08010524 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010524:	b5b0      	push	{r4, r5, r7, lr}
 8010526:	b0cc      	sub	sp, #304	@ 0x130
 8010528:	af00      	add	r7, sp, #0
 801052a:	4605      	mov	r5, r0
 801052c:	460c      	mov	r4, r1
 801052e:	4610      	mov	r0, r2
 8010530:	4619      	mov	r1, r3
 8010532:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010536:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801053a:	462a      	mov	r2, r5
 801053c:	801a      	strh	r2, [r3, #0]
 801053e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010542:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010546:	4622      	mov	r2, r4
 8010548:	801a      	strh	r2, [r3, #0]
 801054a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801054e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8010552:	4602      	mov	r2, r0
 8010554:	701a      	strb	r2, [r3, #0]
 8010556:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801055a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801055e:	460a      	mov	r2, r1
 8010560:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010562:	f107 0310 	add.w	r3, r7, #16
 8010566:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801056a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801056e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010572:	2200      	movs	r2, #0
 8010574:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010576:	2300      	movs	r3, #0
 8010578:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 801057c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010580:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010584:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010588:	8812      	ldrh	r2, [r2, #0]
 801058a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801058c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010590:	3302      	adds	r3, #2
 8010592:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8010596:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801059a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801059e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 80105a2:	8812      	ldrh	r2, [r2, #0]
 80105a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80105a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80105aa:	3302      	adds	r3, #2
 80105ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 80105b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80105b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80105b8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 80105bc:	7812      	ldrb	r2, [r2, #0]
 80105be:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80105c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80105c4:	3301      	adds	r3, #1
 80105c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80105ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80105ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80105d2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80105d6:	7812      	ldrb	r2, [r2, #0]
 80105d8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80105da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80105de:	3301      	adds	r3, #1
 80105e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80105e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80105e8:	1d98      	adds	r0, r3, #6
 80105ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105ee:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80105f2:	781b      	ldrb	r3, [r3, #0]
 80105f4:	461a      	mov	r2, r3
 80105f6:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80105fa:	f000 fb66 	bl	8010cca <Osal_MemCpy>
  index_input += Char_Value_Length;
 80105fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010602:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801060c:	4413      	add	r3, r2
 801060e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010612:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010616:	2218      	movs	r2, #24
 8010618:	2100      	movs	r1, #0
 801061a:	4618      	mov	r0, r3
 801061c:	f000 fb65 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 8010620:	233f      	movs	r3, #63	@ 0x3f
 8010622:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8010626:	f44f 7383 	mov.w	r3, #262	@ 0x106
 801062a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801062e:	f107 0310 	add.w	r3, r7, #16
 8010632:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010636:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801063a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801063e:	f107 030f 	add.w	r3, r7, #15
 8010642:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010646:	2301      	movs	r3, #1
 8010648:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801064c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010650:	2100      	movs	r1, #0
 8010652:	4618      	mov	r0, r3
 8010654:	f000 fdd2 	bl	80111fc <hci_send_req>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	da01      	bge.n	8010662 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 801065e:	23ff      	movs	r3, #255	@ 0xff
 8010660:	e004      	b.n	801066c <aci_gatt_update_char_value+0x148>
  return status;
 8010662:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010666:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801066a:	781b      	ldrb	r3, [r3, #0]
}
 801066c:	4618      	mov	r0, r3
 801066e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010672:	46bd      	mov	sp, r7
 8010674:	bdb0      	pop	{r4, r5, r7, pc}

08010676 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 8010676:	b580      	push	{r7, lr}
 8010678:	b0cc      	sub	sp, #304	@ 0x130
 801067a:	af00      	add	r7, sp, #0
 801067c:	4602      	mov	r2, r0
 801067e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010682:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010686:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 8010688:	f107 0310 	add.w	r3, r7, #16
 801068c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010690:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010694:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010698:	2200      	movs	r2, #0
 801069a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801069c:	2300      	movs	r3, #0
 801069e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80106a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106a6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80106aa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80106ae:	8812      	ldrh	r2, [r2, #0]
 80106b0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80106b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106b6:	3302      	adds	r3, #2
 80106b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80106bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106c0:	2218      	movs	r2, #24
 80106c2:	2100      	movs	r1, #0
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 fb10 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 80106ca:	233f      	movs	r3, #63	@ 0x3f
 80106cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80106d0:	f240 1325 	movw	r3, #293	@ 0x125
 80106d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80106d8:	f107 0310 	add.w	r3, r7, #16
 80106dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80106e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80106e8:	f107 030f 	add.w	r3, r7, #15
 80106ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80106f0:	2301      	movs	r3, #1
 80106f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80106f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106fa:	2100      	movs	r1, #0
 80106fc:	4618      	mov	r0, r3
 80106fe:	f000 fd7d 	bl	80111fc <hci_send_req>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	da01      	bge.n	801070c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8010708:	23ff      	movs	r3, #255	@ 0xff
 801070a:	e004      	b.n	8010716 <aci_gatt_confirm_indication+0xa0>
  return status;
 801070c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010710:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010714:	781b      	ldrb	r3, [r3, #0]
}
 8010716:	4618      	mov	r0, r3
 8010718:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}

08010720 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b0cc      	sub	sp, #304	@ 0x130
 8010724:	af00      	add	r7, sp, #0
 8010726:	4602      	mov	r2, r0
 8010728:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801072c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010730:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8010732:	f107 0310 	add.w	r3, r7, #16
 8010736:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801073a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801073e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010742:	2200      	movs	r2, #0
 8010744:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010746:	2300      	movs	r3, #0
 8010748:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801074c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010750:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010754:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010758:	8812      	ldrh	r2, [r2, #0]
 801075a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801075c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010760:	3302      	adds	r3, #2
 8010762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010766:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801076a:	2218      	movs	r2, #24
 801076c:	2100      	movs	r1, #0
 801076e:	4618      	mov	r0, r3
 8010770:	f000 fabb 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 8010774:	233f      	movs	r3, #63	@ 0x3f
 8010776:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 801077a:	f240 1327 	movw	r3, #295	@ 0x127
 801077e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010782:	f107 0310 	add.w	r3, r7, #16
 8010786:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801078a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801078e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010792:	f107 030f 	add.w	r3, r7, #15
 8010796:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801079a:	2301      	movs	r3, #1
 801079c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80107a0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107a4:	2100      	movs	r1, #0
 80107a6:	4618      	mov	r0, r3
 80107a8:	f000 fd28 	bl	80111fc <hci_send_req>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	da01      	bge.n	80107b6 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 80107b2:	23ff      	movs	r3, #255	@ 0xff
 80107b4:	e004      	b.n	80107c0 <aci_gatt_allow_read+0xa0>
  return status;
 80107b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107ba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80107be:	781b      	ldrb	r3, [r3, #0]
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80107c6:	46bd      	mov	sp, r7
 80107c8:	bd80      	pop	{r7, pc}

080107ca <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80107ca:	b580      	push	{r7, lr}
 80107cc:	b0cc      	sub	sp, #304	@ 0x130
 80107ce:	af00      	add	r7, sp, #0
 80107d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107d4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80107d8:	601a      	str	r2, [r3, #0]
 80107da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107de:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80107e2:	4602      	mov	r2, r0
 80107e4:	701a      	strb	r2, [r3, #0]
 80107e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107ea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80107ee:	460a      	mov	r2, r1
 80107f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80107f2:	f107 0310 	add.w	r3, r7, #16
 80107f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80107fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010802:	2200      	movs	r2, #0
 8010804:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 801080c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010810:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010814:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010818:	7812      	ldrb	r2, [r2, #0]
 801081a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801081c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010820:	3301      	adds	r3, #1
 8010822:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8010826:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801082a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801082e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010832:	7812      	ldrb	r2, [r2, #0]
 8010834:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010836:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801083a:	3301      	adds	r3, #1
 801083c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8010840:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010844:	1c98      	adds	r0, r3, #2
 8010846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801084a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801084e:	781a      	ldrb	r2, [r3, #0]
 8010850:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010854:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010858:	6819      	ldr	r1, [r3, #0]
 801085a:	f000 fa36 	bl	8010cca <Osal_MemCpy>
  index_input += Length;
 801085e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010862:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 801086c:	4413      	add	r3, r2
 801086e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010872:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010876:	2218      	movs	r2, #24
 8010878:	2100      	movs	r1, #0
 801087a:	4618      	mov	r0, r3
 801087c:	f000 fa35 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 8010880:	233f      	movs	r3, #63	@ 0x3f
 8010882:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8010886:	230c      	movs	r3, #12
 8010888:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801088c:	f107 0310 	add.w	r3, r7, #16
 8010890:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010894:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010898:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801089c:	f107 030f 	add.w	r3, r7, #15
 80108a0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80108a4:	2301      	movs	r3, #1
 80108a6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80108aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80108ae:	2100      	movs	r1, #0
 80108b0:	4618      	mov	r0, r3
 80108b2:	f000 fca3 	bl	80111fc <hci_send_req>
 80108b6:	4603      	mov	r3, r0
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	da01      	bge.n	80108c0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 80108bc:	23ff      	movs	r3, #255	@ 0xff
 80108be:	e004      	b.n	80108ca <aci_hal_write_config_data+0x100>
  return status;
 80108c0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108c4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80108c8:	781b      	ldrb	r3, [r3, #0]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}

080108d4 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b0cc      	sub	sp, #304	@ 0x130
 80108d8:	af00      	add	r7, sp, #0
 80108da:	4602      	mov	r2, r0
 80108dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108e0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80108e4:	701a      	strb	r2, [r3, #0]
 80108e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108ea:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80108ee:	460a      	mov	r2, r1
 80108f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80108f2:	f107 0310 	add.w	r3, r7, #16
 80108f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80108fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010902:	2200      	movs	r2, #0
 8010904:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010906:	2300      	movs	r3, #0
 8010908:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 801090c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010910:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010914:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010918:	7812      	ldrb	r2, [r2, #0]
 801091a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801091c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010920:	3301      	adds	r3, #1
 8010922:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8010926:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801092a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801092e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010932:	7812      	ldrb	r2, [r2, #0]
 8010934:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010936:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801093a:	3301      	adds	r3, #1
 801093c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010940:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010944:	2218      	movs	r2, #24
 8010946:	2100      	movs	r1, #0
 8010948:	4618      	mov	r0, r3
 801094a:	f000 f9ce 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 801094e:	233f      	movs	r3, #63	@ 0x3f
 8010950:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8010954:	230f      	movs	r3, #15
 8010956:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801095a:	f107 0310 	add.w	r3, r7, #16
 801095e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010962:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010966:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801096a:	f107 030f 	add.w	r3, r7, #15
 801096e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010972:	2301      	movs	r3, #1
 8010974:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010978:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801097c:	2100      	movs	r1, #0
 801097e:	4618      	mov	r0, r3
 8010980:	f000 fc3c 	bl	80111fc <hci_send_req>
 8010984:	4603      	mov	r3, r0
 8010986:	2b00      	cmp	r3, #0
 8010988:	da01      	bge.n	801098e <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 801098a:	23ff      	movs	r3, #255	@ 0xff
 801098c:	e004      	b.n	8010998 <aci_hal_set_tx_power_level+0xc4>
  return status;
 801098e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010992:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010996:	781b      	ldrb	r3, [r3, #0]
}
 8010998:	4618      	mov	r0, r3
 801099a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b0cc      	sub	sp, #304	@ 0x130
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	4602      	mov	r2, r0
 80109aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109ae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80109b2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80109b4:	f107 0310 	add.w	r3, r7, #16
 80109b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80109bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109c0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80109c4:	2200      	movs	r2, #0
 80109c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80109c8:	2300      	movs	r3, #0
 80109ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80109ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80109d6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80109da:	8812      	ldrh	r2, [r2, #0]
 80109dc:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80109de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109e2:	3302      	adds	r3, #2
 80109e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80109e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80109ec:	2218      	movs	r2, #24
 80109ee:	2100      	movs	r1, #0
 80109f0:	4618      	mov	r0, r3
 80109f2:	f000 f97a 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 80109f6:	233f      	movs	r3, #63	@ 0x3f
 80109f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 80109fc:	2318      	movs	r3, #24
 80109fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010a02:	f107 0310 	add.w	r3, r7, #16
 8010a06:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010a12:	f107 030f 	add.w	r3, r7, #15
 8010a16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a24:	2100      	movs	r1, #0
 8010a26:	4618      	mov	r0, r3
 8010a28:	f000 fbe8 	bl	80111fc <hci_send_req>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	da01      	bge.n	8010a36 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8010a32:	23ff      	movs	r3, #255	@ 0xff
 8010a34:	e004      	b.n	8010a40 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8010a36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a3a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010a3e:	781b      	ldrb	r3, [r3, #0]
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}

08010a4a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8010a4a:	b580      	push	{r7, lr}
 8010a4c:	b088      	sub	sp, #32
 8010a4e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010a50:	2300      	movs	r3, #0
 8010a52:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a54:	f107 0308 	add.w	r3, r7, #8
 8010a58:	2218      	movs	r2, #24
 8010a5a:	2100      	movs	r1, #0
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f000 f944 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x03;
 8010a62:	2303      	movs	r3, #3
 8010a64:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8010a66:	2303      	movs	r3, #3
 8010a68:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010a6a:	1dfb      	adds	r3, r7, #7
 8010a6c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a72:	f107 0308 	add.w	r3, r7, #8
 8010a76:	2100      	movs	r1, #0
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f000 fbbf 	bl	80111fc <hci_send_req>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	da01      	bge.n	8010a88 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010a84:	23ff      	movs	r3, #255	@ 0xff
 8010a86:	e000      	b.n	8010a8a <hci_reset+0x40>
  return status;
 8010a88:	79fb      	ldrb	r3, [r7, #7]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3720      	adds	r7, #32
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8010a92:	b590      	push	{r4, r7, lr}
 8010a94:	b0cd      	sub	sp, #308	@ 0x134
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	4604      	mov	r4, r0
 8010a9a:	4608      	mov	r0, r1
 8010a9c:	4611      	mov	r1, r2
 8010a9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010aa2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010aa6:	4622      	mov	r2, r4
 8010aa8:	701a      	strb	r2, [r3, #0]
 8010aaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010aae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	701a      	strb	r2, [r3, #0]
 8010ab6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010aba:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8010abe:	460a      	mov	r2, r1
 8010ac0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8010ac2:	f107 0310 	add.w	r3, r7, #16
 8010ac6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010aca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ace:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010ad6:	2300      	movs	r3, #0
 8010ad8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8010adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ae0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010ae4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010ae8:	7812      	ldrb	r2, [r2, #0]
 8010aea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010aec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010af0:	3301      	adds	r3, #1
 8010af2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8010af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010afa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010afe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010b02:	7812      	ldrb	r2, [r2, #0]
 8010b04:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010b06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b0a:	3301      	adds	r3, #1
 8010b0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8010b10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b14:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b18:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010b1c:	7812      	ldrb	r2, [r2, #0]
 8010b1e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010b20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b24:	3301      	adds	r3, #1
 8010b26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b2e:	2218      	movs	r2, #24
 8010b30:	2100      	movs	r1, #0
 8010b32:	4618      	mov	r0, r3
 8010b34:	f000 f8d9 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x08;
 8010b38:	2308      	movs	r3, #8
 8010b3a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8010b3e:	2331      	movs	r3, #49	@ 0x31
 8010b40:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010b44:	f107 0310 	add.w	r3, r7, #16
 8010b48:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010b4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b50:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010b54:	f107 030f 	add.w	r3, r7, #15
 8010b58:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010b5c:	2301      	movs	r3, #1
 8010b5e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010b62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b66:	2100      	movs	r1, #0
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fb47 	bl	80111fc <hci_send_req>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	da01      	bge.n	8010b78 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8010b74:	23ff      	movs	r3, #255	@ 0xff
 8010b76:	e004      	b.n	8010b82 <hci_le_set_default_phy+0xf0>
  return status;
 8010b78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b7c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010b80:	781b      	ldrb	r3, [r3, #0]
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd90      	pop	{r4, r7, pc}

08010b8c <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8010b8c:	b5b0      	push	{r4, r5, r7, lr}
 8010b8e:	b0cc      	sub	sp, #304	@ 0x130
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	4605      	mov	r5, r0
 8010b94:	460c      	mov	r4, r1
 8010b96:	4610      	mov	r0, r2
 8010b98:	4619      	mov	r1, r3
 8010b9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b9e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010ba2:	462a      	mov	r2, r5
 8010ba4:	801a      	strh	r2, [r3, #0]
 8010ba6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010baa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010bae:	4622      	mov	r2, r4
 8010bb0:	801a      	strh	r2, [r3, #0]
 8010bb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010bb6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010bba:	4602      	mov	r2, r0
 8010bbc:	801a      	strh	r2, [r3, #0]
 8010bbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010bc2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010bc6:	460a      	mov	r2, r1
 8010bc8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8010bca:	f107 0310 	add.w	r3, r7, #16
 8010bce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010bd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010bd6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010bda:	2200      	movs	r2, #0
 8010bdc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010bde:	2300      	movs	r3, #0
 8010be0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010be4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010be8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010bec:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010bf0:	8812      	ldrh	r2, [r2, #0]
 8010bf2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010bf8:	3302      	adds	r3, #2
 8010bfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8010bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010c02:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010c06:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010c0a:	8812      	ldrh	r2, [r2, #0]
 8010c0c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8010c0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c12:	3302      	adds	r3, #2
 8010c14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8010c18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010c1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010c20:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8010c24:	8812      	ldrh	r2, [r2, #0]
 8010c26:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8010c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c2c:	3302      	adds	r3, #2
 8010c2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 8010c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010c36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010c3a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8010c3e:	8812      	ldrh	r2, [r2, #0]
 8010c40:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8010c42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c46:	3302      	adds	r3, #2
 8010c48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8010c4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010c50:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8010c54:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8010c56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c5a:	3302      	adds	r3, #2
 8010c5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010c60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010c64:	2218      	movs	r2, #24
 8010c66:	2100      	movs	r1, #0
 8010c68:	4618      	mov	r0, r3
 8010c6a:	f000 f83e 	bl	8010cea <Osal_MemSet>
  rq.ogf = 0x3f;
 8010c6e:	233f      	movs	r3, #63	@ 0x3f
 8010c70:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8010c74:	f240 1381 	movw	r3, #385	@ 0x181
 8010c78:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8010c7c:	230f      	movs	r3, #15
 8010c7e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8010c82:	f107 0310 	add.w	r3, r7, #16
 8010c86:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c8e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010c92:	f107 030f 	add.w	r3, r7, #15
 8010c96:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010c9a:	2301      	movs	r3, #1
 8010c9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010ca0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010ca4:	2100      	movs	r1, #0
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	f000 faa8 	bl	80111fc <hci_send_req>
 8010cac:	4603      	mov	r3, r0
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	da01      	bge.n	8010cb6 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8010cb2:	23ff      	movs	r3, #255	@ 0xff
 8010cb4:	e004      	b.n	8010cc0 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8010cb6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010cba:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010cbe:	781b      	ldrb	r3, [r3, #0]
}
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bdb0      	pop	{r4, r5, r7, pc}

08010cca <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b084      	sub	sp, #16
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	60f8      	str	r0, [r7, #12]
 8010cd2:	60b9      	str	r1, [r7, #8]
 8010cd4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8010cd6:	687a      	ldr	r2, [r7, #4]
 8010cd8:	68b9      	ldr	r1, [r7, #8]
 8010cda:	68f8      	ldr	r0, [r7, #12]
 8010cdc:	f005 f89f 	bl	8015e1e <memcpy>
 8010ce0:	4603      	mov	r3, r0
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3710      	adds	r7, #16
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b084      	sub	sp, #16
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	60f8      	str	r0, [r7, #12]
 8010cf2:	60b9      	str	r1, [r7, #8]
 8010cf4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8010cf6:	687a      	ldr	r2, [r7, #4]
 8010cf8:	68b9      	ldr	r1, [r7, #8]
 8010cfa:	68f8      	ldr	r0, [r7, #12]
 8010cfc:	f004 ffec 	bl	8015cd8 <memset>
 8010d00:	4603      	mov	r3, r0
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3710      	adds	r7, #16
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}

08010d0a <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8010d0a:	b480      	push	{r7}
 8010d0c:	af00      	add	r7, sp, #0
  return;
 8010d0e:	bf00      	nop
}
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr

08010d18 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8010d18:	b480      	push	{r7}
 8010d1a:	af00      	add	r7, sp, #0
  return;
 8010d1c:	bf00      	nop
}
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr

08010d26 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8010d26:	b480      	push	{r7}
 8010d28:	af00      	add	r7, sp, #0
  return;
 8010d2a:	bf00      	nop
}
 8010d2c:	46bd      	mov	sp, r7
 8010d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d32:	4770      	bx	lr

08010d34 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8010d34:	b480      	push	{r7}
 8010d36:	af00      	add	r7, sp, #0
  return;
 8010d38:	bf00      	nop
}
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8010d42:	b480      	push	{r7}
 8010d44:	af00      	add	r7, sp, #0
  return;
 8010d46:	bf00      	nop
}
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4e:	4770      	bx	lr

08010d50 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8010d50:	b480      	push	{r7}
 8010d52:	af00      	add	r7, sp, #0
  return;
 8010d54:	bf00      	nop
}
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr

08010d5e <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8010d5e:	b480      	push	{r7}
 8010d60:	af00      	add	r7, sp, #0
  return;
 8010d62:	bf00      	nop
}
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr

08010d6c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	af00      	add	r7, sp, #0
  return;
 8010d70:	bf00      	nop
}
 8010d72:	46bd      	mov	sp, r7
 8010d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d78:	4770      	bx	lr

08010d7a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8010d7a:	b480      	push	{r7}
 8010d7c:	af00      	add	r7, sp, #0
  return;
 8010d7e:	bf00      	nop
}
 8010d80:	46bd      	mov	sp, r7
 8010d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d86:	4770      	bx	lr

08010d88 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8010d88:	b480      	push	{r7}
 8010d8a:	af00      	add	r7, sp, #0
  return;
 8010d8c:	bf00      	nop
}
 8010d8e:	46bd      	mov	sp, r7
 8010d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d94:	4770      	bx	lr

08010d96 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010d96:	b480      	push	{r7}
 8010d98:	af00      	add	r7, sp, #0
  return;
 8010d9a:	bf00      	nop
}
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8010da4:	b480      	push	{r7}
 8010da6:	af00      	add	r7, sp, #0
  return;
 8010da8:	bf00      	nop
}
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr

08010db2 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8010db2:	b480      	push	{r7}
 8010db4:	af00      	add	r7, sp, #0
  return;
 8010db6:	bf00      	nop
}
 8010db8:	46bd      	mov	sp, r7
 8010dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dbe:	4770      	bx	lr

08010dc0 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8010dc0:	b480      	push	{r7}
 8010dc2:	af00      	add	r7, sp, #0
  return;
 8010dc4:	bf00      	nop
}
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dcc:	4770      	bx	lr

08010dce <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010dce:	b480      	push	{r7}
 8010dd0:	af00      	add	r7, sp, #0
  return;
 8010dd2:	bf00      	nop
}
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010ddc:	b480      	push	{r7}
 8010dde:	af00      	add	r7, sp, #0
  return;
 8010de0:	bf00      	nop
}
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010dea:	b480      	push	{r7}
 8010dec:	af00      	add	r7, sp, #0
  return;
 8010dee:	bf00      	nop
}
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010dfc:	4b04      	ldr	r3, [pc, #16]	@ (8010e10 <SVCCTL_Init+0x18>)
 8010dfe:	2200      	movs	r2, #0
 8010e00:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8010e02:	4b04      	ldr	r3, [pc, #16]	@ (8010e14 <SVCCTL_Init+0x1c>)
 8010e04:	2200      	movs	r2, #0
 8010e06:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8010e08:	f000 f806 	bl	8010e18 <SVCCTL_SvcInit>

  return;
 8010e0c:	bf00      	nop
}
 8010e0e:	bd80      	pop	{r7, pc}
 8010e10:	20000188 	.word	0x20000188
 8010e14:	200001a8 	.word	0x200001a8

08010e18 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	af00      	add	r7, sp, #0
  BAS_Init();
 8010e1c:	f7ff ff75 	bl	8010d0a <BAS_Init>

  BLS_Init();
 8010e20:	f7ff ff7a 	bl	8010d18 <BLS_Init>

  CRS_STM_Init();
 8010e24:	f7ff ff7f 	bl	8010d26 <CRS_STM_Init>

  DIS_Init();
 8010e28:	f7ff ff84 	bl	8010d34 <DIS_Init>

  EDS_STM_Init();
 8010e2c:	f7ff ff89 	bl	8010d42 <EDS_STM_Init>

  HIDS_Init();
 8010e30:	f7ff ff8e 	bl	8010d50 <HIDS_Init>

  HRS_Init();
 8010e34:	f7ff ff93 	bl	8010d5e <HRS_Init>

  HTS_Init();
 8010e38:	f7ff ff98 	bl	8010d6c <HTS_Init>

  IAS_Init();
 8010e3c:	f7ff ff9d 	bl	8010d7a <IAS_Init>

  LLS_Init();
 8010e40:	f7ff ffa2 	bl	8010d88 <LLS_Init>

  TPS_Init();
 8010e44:	f7ff ffa7 	bl	8010d96 <TPS_Init>

  MOTENV_STM_Init();
 8010e48:	f7ff ffac 	bl	8010da4 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8010e4c:	f7ff ffb1 	bl	8010db2 <P2PS_STM_Init>

  ZDD_STM_Init();
 8010e50:	f7ff ffb6 	bl	8010dc0 <ZDD_STM_Init>

  OTAS_STM_Init();
 8010e54:	f7ff ffbb 	bl	8010dce <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8010e58:	f7ff ffc7 	bl	8010dea <BVOPUS_STM_Init>

  MESH_Init();
 8010e5c:	f7ff ffbe 	bl	8010ddc <MESH_Init>

  SVCCTL_InitCustomSvc();
 8010e60:	f002 ff2a 	bl	8013cb8 <SVCCTL_InitCustomSvc>
  
  return;
 8010e64:	bf00      	nop
}
 8010e66:	bd80      	pop	{r7, pc}

08010e68 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b083      	sub	sp, #12
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8010e70:	4b09      	ldr	r3, [pc, #36]	@ (8010e98 <SVCCTL_RegisterSvcHandler+0x30>)
 8010e72:	7f1b      	ldrb	r3, [r3, #28]
 8010e74:	4619      	mov	r1, r3
 8010e76:	4a08      	ldr	r2, [pc, #32]	@ (8010e98 <SVCCTL_RegisterSvcHandler+0x30>)
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8010e7e:	4b06      	ldr	r3, [pc, #24]	@ (8010e98 <SVCCTL_RegisterSvcHandler+0x30>)
 8010e80:	7f1b      	ldrb	r3, [r3, #28]
 8010e82:	3301      	adds	r3, #1
 8010e84:	b2da      	uxtb	r2, r3
 8010e86:	4b04      	ldr	r3, [pc, #16]	@ (8010e98 <SVCCTL_RegisterSvcHandler+0x30>)
 8010e88:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010e8a:	bf00      	nop
}
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	20000188 	.word	0x20000188

08010e9c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b086      	sub	sp, #24
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	781b      	ldrb	r3, [r3, #0]
 8010eb2:	2bff      	cmp	r3, #255	@ 0xff
 8010eb4:	d125      	bne.n	8010f02 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	3302      	adds	r3, #2
 8010eba:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	881b      	ldrh	r3, [r3, #0]
 8010ec0:	b29b      	uxth	r3, r3
 8010ec2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010ec6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010eca:	d118      	bne.n	8010efe <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010ecc:	2300      	movs	r3, #0
 8010ece:	757b      	strb	r3, [r7, #21]
 8010ed0:	e00d      	b.n	8010eee <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8010ed2:	7d7b      	ldrb	r3, [r7, #21]
 8010ed4:	4a1a      	ldr	r2, [pc, #104]	@ (8010f40 <SVCCTL_UserEvtRx+0xa4>)
 8010ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	4798      	blx	r3
 8010ede:	4603      	mov	r3, r0
 8010ee0:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d108      	bne.n	8010efa <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010ee8:	7d7b      	ldrb	r3, [r7, #21]
 8010eea:	3301      	adds	r3, #1
 8010eec:	757b      	strb	r3, [r7, #21]
 8010eee:	4b14      	ldr	r3, [pc, #80]	@ (8010f40 <SVCCTL_UserEvtRx+0xa4>)
 8010ef0:	7f1b      	ldrb	r3, [r3, #28]
 8010ef2:	7d7a      	ldrb	r2, [r7, #21]
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d3ec      	bcc.n	8010ed2 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010ef8:	e002      	b.n	8010f00 <SVCCTL_UserEvtRx+0x64>
              break;
 8010efa:	bf00      	nop
          break;
 8010efc:	e000      	b.n	8010f00 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8010efe:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8010f00:	e000      	b.n	8010f04 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8010f02:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8010f04:	7dfb      	ldrb	r3, [r7, #23]
 8010f06:	2b02      	cmp	r3, #2
 8010f08:	d00f      	beq.n	8010f2a <SVCCTL_UserEvtRx+0x8e>
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	dc10      	bgt.n	8010f30 <SVCCTL_UserEvtRx+0x94>
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d002      	beq.n	8010f18 <SVCCTL_UserEvtRx+0x7c>
 8010f12:	2b01      	cmp	r3, #1
 8010f14:	d006      	beq.n	8010f24 <SVCCTL_UserEvtRx+0x88>
 8010f16:	e00b      	b.n	8010f30 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8010f18:	6878      	ldr	r0, [r7, #4]
 8010f1a:	f001 fc7d 	bl	8012818 <SVCCTL_App_Notification>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	75bb      	strb	r3, [r7, #22]
      break;
 8010f22:	e008      	b.n	8010f36 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010f24:	2301      	movs	r3, #1
 8010f26:	75bb      	strb	r3, [r7, #22]
      break;
 8010f28:	e005      	b.n	8010f36 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	75bb      	strb	r3, [r7, #22]
      break;
 8010f2e:	e002      	b.n	8010f36 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010f30:	2301      	movs	r3, #1
 8010f32:	75bb      	strb	r3, [r7, #22]
      break;
 8010f34:	bf00      	nop
  }

  return (return_status);
 8010f36:	7dbb      	ldrb	r3, [r7, #22]
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	20000188 	.word	0x20000188

08010f44 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b088      	sub	sp, #32
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010f4c:	f107 030c 	add.w	r3, r7, #12
 8010f50:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8010f58:	69fb      	ldr	r3, [r7, #28]
 8010f5a:	212e      	movs	r1, #46	@ 0x2e
 8010f5c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8010f60:	f000 fae8 	bl	8011534 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	330b      	adds	r3, #11
 8010f68:	78db      	ldrb	r3, [r3, #3]
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3720      	adds	r7, #32
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}

08010f72 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b088      	sub	sp, #32
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010f7a:	f107 030c 	add.w	r3, r7, #12
 8010f7e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8010f86:	69fb      	ldr	r3, [r7, #28]
 8010f88:	210f      	movs	r1, #15
 8010f8a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8010f8e:	f000 fad1 	bl	8011534 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010f92:	69fb      	ldr	r3, [r7, #28]
 8010f94:	330b      	adds	r3, #11
 8010f96:	78db      	ldrb	r3, [r3, #3]
}
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3720      	adds	r7, #32
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bd80      	pop	{r7, pc}

08010fa0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b088      	sub	sp, #32
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8010fa8:	f107 030c 	add.w	r3, r7, #12
 8010fac:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	2110      	movs	r1, #16
 8010fb4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8010fb8:	f000 fabc 	bl	8011534 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8010fbc:	69fb      	ldr	r3, [r7, #28]
 8010fbe:	330b      	adds	r3, #11
 8010fc0:	78db      	ldrb	r3, [r3, #3]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3720      	adds	r7, #32
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bd80      	pop	{r7, pc}
	...

08010fcc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b08b      	sub	sp, #44	@ 0x2c
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8010fd4:	2300      	movs	r3, #0
 8010fd6:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8010fd8:	2300      	movs	r3, #0
 8010fda:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8010fdc:	2300      	movs	r3, #0
 8010fde:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8010fe8:	2300      	movs	r3, #0
 8010fea:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8010fec:	2300      	movs	r3, #0
 8010fee:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8010ff0:	2300      	movs	r3, #0
 8010ff2:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8010ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8011120 <SHCI_GetWirelessFwInfo+0x154>)
 8010ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ff8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010ffc:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	009b      	lsls	r3, r3, #2
 8011002:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011006:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801100e:	68bb      	ldr	r3, [r7, #8]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4a44      	ldr	r2, [pc, #272]	@ (8011124 <SHCI_GetWirelessFwInfo+0x158>)
 8011014:	4293      	cmp	r3, r2
 8011016:	d10f      	bne.n	8011038 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8011018:	68bb      	ldr	r3, [r7, #8]
 801101a:	695b      	ldr	r3, [r3, #20]
 801101c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801101e:	68bb      	ldr	r3, [r7, #8]
 8011020:	699b      	ldr	r3, [r3, #24]
 8011022:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	69db      	ldr	r3, [r3, #28]
 8011028:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	691b      	ldr	r3, [r3, #16]
 8011034:	617b      	str	r3, [r7, #20]
 8011036:	e01a      	b.n	801106e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8011038:	693b      	ldr	r3, [r7, #16]
 801103a:	009b      	lsls	r3, r3, #2
 801103c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011040:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011044:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	691b      	ldr	r3, [r3, #16]
 801104c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	695b      	ldr	r3, [r3, #20]
 8011054:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	699b      	ldr	r3, [r3, #24]
 801105c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	685b      	ldr	r3, [r3, #4]
 8011064:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	689b      	ldr	r3, [r3, #8]
 801106c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801106e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011070:	0e1b      	lsrs	r3, r3, #24
 8011072:	b2da      	uxtb	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107a:	0c1b      	lsrs	r3, r3, #16
 801107c:	b2da      	uxtb	r2, r3
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011084:	0a1b      	lsrs	r3, r3, #8
 8011086:	b2da      	uxtb	r2, r3
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801108e:	091b      	lsrs	r3, r3, #4
 8011090:	b2db      	uxtb	r3, r3
 8011092:	f003 030f 	and.w	r3, r3, #15
 8011096:	b2da      	uxtb	r2, r3
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801109c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	f003 030f 	and.w	r3, r3, #15
 80110a4:	b2da      	uxtb	r2, r3
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80110aa:	6a3b      	ldr	r3, [r7, #32]
 80110ac:	0e1b      	lsrs	r3, r3, #24
 80110ae:	b2da      	uxtb	r2, r3
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80110b4:	6a3b      	ldr	r3, [r7, #32]
 80110b6:	0c1b      	lsrs	r3, r3, #16
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 80110be:	6a3b      	ldr	r3, [r7, #32]
 80110c0:	0a1b      	lsrs	r3, r3, #8
 80110c2:	b2da      	uxtb	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80110c8:	6a3b      	ldr	r3, [r7, #32]
 80110ca:	b2da      	uxtb	r2, r3
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80110d0:	69fb      	ldr	r3, [r7, #28]
 80110d2:	b2da      	uxtb	r2, r3
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80110d8:	69bb      	ldr	r3, [r7, #24]
 80110da:	0e1b      	lsrs	r3, r3, #24
 80110dc:	b2da      	uxtb	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80110e2:	69bb      	ldr	r3, [r7, #24]
 80110e4:	0c1b      	lsrs	r3, r3, #16
 80110e6:	b2da      	uxtb	r2, r3
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80110ec:	69bb      	ldr	r3, [r7, #24]
 80110ee:	0a1b      	lsrs	r3, r3, #8
 80110f0:	b2da      	uxtb	r2, r3
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80110f6:	697b      	ldr	r3, [r7, #20]
 80110f8:	0e1b      	lsrs	r3, r3, #24
 80110fa:	b2da      	uxtb	r2, r3
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011100:	697b      	ldr	r3, [r7, #20]
 8011102:	0c1b      	lsrs	r3, r3, #16
 8011104:	b2da      	uxtb	r2, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801110a:	697b      	ldr	r3, [r7, #20]
 801110c:	b2da      	uxtb	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	372c      	adds	r7, #44	@ 0x2c
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr
 8011120:	58004000 	.word	0x58004000
 8011124:	a94656b9 	.word	0xa94656b9

08011128 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011132:	683b      	ldr	r3, [r7, #0]
 8011134:	685b      	ldr	r3, [r3, #4]
 8011136:	4a08      	ldr	r2, [pc, #32]	@ (8011158 <hci_init+0x30>)
 8011138:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801113a:	4a08      	ldr	r2, [pc, #32]	@ (801115c <hci_init+0x34>)
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011140:	4806      	ldr	r0, [pc, #24]	@ (801115c <hci_init+0x34>)
 8011142:	f000 f979 	bl	8011438 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	4618      	mov	r0, r3
 801114c:	f000 f8da 	bl	8011304 <TlInit>

  return;
 8011150:	bf00      	nop
}
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	20001188 	.word	0x20001188
 801115c:	20001160 	.word	0x20001160

08011160 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011166:	4822      	ldr	r0, [pc, #136]	@ (80111f0 <hci_user_evt_proc+0x90>)
 8011168:	f000 fdfa 	bl	8011d60 <LST_is_empty>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d12b      	bne.n	80111ca <hci_user_evt_proc+0x6a>
 8011172:	4b20      	ldr	r3, [pc, #128]	@ (80111f4 <hci_user_evt_proc+0x94>)
 8011174:	781b      	ldrb	r3, [r3, #0]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d027      	beq.n	80111ca <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801117a:	f107 030c 	add.w	r3, r7, #12
 801117e:	4619      	mov	r1, r3
 8011180:	481b      	ldr	r0, [pc, #108]	@ (80111f0 <hci_user_evt_proc+0x90>)
 8011182:	f000 fe7c 	bl	8011e7e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8011186:	4b1c      	ldr	r3, [pc, #112]	@ (80111f8 <hci_user_evt_proc+0x98>)
 8011188:	69db      	ldr	r3, [r3, #28]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d00c      	beq.n	80111a8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011192:	2301      	movs	r3, #1
 8011194:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011196:	4b18      	ldr	r3, [pc, #96]	@ (80111f8 <hci_user_evt_proc+0x98>)
 8011198:	69db      	ldr	r3, [r3, #28]
 801119a:	1d3a      	adds	r2, r7, #4
 801119c:	4610      	mov	r0, r2
 801119e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80111a0:	793a      	ldrb	r2, [r7, #4]
 80111a2:	4b14      	ldr	r3, [pc, #80]	@ (80111f4 <hci_user_evt_proc+0x94>)
 80111a4:	701a      	strb	r2, [r3, #0]
 80111a6:	e002      	b.n	80111ae <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80111a8:	4b12      	ldr	r3, [pc, #72]	@ (80111f4 <hci_user_evt_proc+0x94>)
 80111aa:	2201      	movs	r2, #1
 80111ac:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80111ae:	4b11      	ldr	r3, [pc, #68]	@ (80111f4 <hci_user_evt_proc+0x94>)
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d004      	beq.n	80111c0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	4618      	mov	r0, r3
 80111ba:	f000 fc0d 	bl	80119d8 <TL_MM_EvtDone>
 80111be:	e004      	b.n	80111ca <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	4619      	mov	r1, r3
 80111c4:	480a      	ldr	r0, [pc, #40]	@ (80111f0 <hci_user_evt_proc+0x90>)
 80111c6:	f000 fded 	bl	8011da4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80111ca:	4809      	ldr	r0, [pc, #36]	@ (80111f0 <hci_user_evt_proc+0x90>)
 80111cc:	f000 fdc8 	bl	8011d60 <LST_is_empty>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d107      	bne.n	80111e6 <hci_user_evt_proc+0x86>
 80111d6:	4b07      	ldr	r3, [pc, #28]	@ (80111f4 <hci_user_evt_proc+0x94>)
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d003      	beq.n	80111e6 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80111de:	4804      	ldr	r0, [pc, #16]	@ (80111f0 <hci_user_evt_proc+0x90>)
 80111e0:	f002 fabe 	bl	8013760 <hci_notify_asynch_evt>
  }


  return;
 80111e4:	bf00      	nop
 80111e6:	bf00      	nop
}
 80111e8:	3710      	adds	r7, #16
 80111ea:	46bd      	mov	sp, r7
 80111ec:	bd80      	pop	{r7, pc}
 80111ee:	bf00      	nop
 80111f0:	200001b0 	.word	0x200001b0
 80111f4:	200001bc 	.word	0x200001bc
 80111f8:	20001160 	.word	0x20001160

080111fc <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b088      	sub	sp, #32
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
 8011204:	460b      	mov	r3, r1
 8011206:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8011208:	2000      	movs	r0, #0
 801120a:	f000 f8d1 	bl	80113b0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 801120e:	2300      	movs	r3, #0
 8011210:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	885b      	ldrh	r3, [r3, #2]
 8011216:	b21b      	sxth	r3, r3
 8011218:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801121c:	b21a      	sxth	r2, r3
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	881b      	ldrh	r3, [r3, #0]
 8011222:	029b      	lsls	r3, r3, #10
 8011224:	b21b      	sxth	r3, r3
 8011226:	4313      	orrs	r3, r2
 8011228:	b21b      	sxth	r3, r3
 801122a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 801122c:	4b33      	ldr	r3, [pc, #204]	@ (80112fc <hci_send_req+0x100>)
 801122e:	2201      	movs	r2, #1
 8011230:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	68db      	ldr	r3, [r3, #12]
 8011236:	b2d9      	uxtb	r1, r3
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	689a      	ldr	r2, [r3, #8]
 801123c:	8bbb      	ldrh	r3, [r7, #28]
 801123e:	4618      	mov	r0, r3
 8011240:	f000 f890 	bl	8011364 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011244:	e04e      	b.n	80112e4 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8011246:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801124a:	f002 faa0 	bl	801378e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801124e:	e043      	b.n	80112d8 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011250:	f107 030c 	add.w	r3, r7, #12
 8011254:	4619      	mov	r1, r3
 8011256:	482a      	ldr	r0, [pc, #168]	@ (8011300 <hci_send_req+0x104>)
 8011258:	f000 fe11 	bl	8011e7e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	7a5b      	ldrb	r3, [r3, #9]
 8011260:	2b0f      	cmp	r3, #15
 8011262:	d114      	bne.n	801128e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	330b      	adds	r3, #11
 8011268:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	885b      	ldrh	r3, [r3, #2]
 801126e:	b29b      	uxth	r3, r3
 8011270:	8bba      	ldrh	r2, [r7, #28]
 8011272:	429a      	cmp	r2, r3
 8011274:	d104      	bne.n	8011280 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	691b      	ldr	r3, [r3, #16]
 801127a:	693a      	ldr	r2, [r7, #16]
 801127c:	7812      	ldrb	r2, [r2, #0]
 801127e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011280:	693b      	ldr	r3, [r7, #16]
 8011282:	785b      	ldrb	r3, [r3, #1]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d027      	beq.n	80112d8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011288:	2301      	movs	r3, #1
 801128a:	77fb      	strb	r3, [r7, #31]
 801128c:	e024      	b.n	80112d8 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	330b      	adds	r3, #11
 8011292:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801129a:	b29b      	uxth	r3, r3
 801129c:	8bba      	ldrh	r2, [r7, #28]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d114      	bne.n	80112cc <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	7a9b      	ldrb	r3, [r3, #10]
 80112a6:	3b03      	subs	r3, #3
 80112a8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	695a      	ldr	r2, [r3, #20]
 80112ae:	7dfb      	ldrb	r3, [r7, #23]
 80112b0:	429a      	cmp	r2, r3
 80112b2:	bfa8      	it	ge
 80112b4:	461a      	movge	r2, r3
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6918      	ldr	r0, [r3, #16]
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	1cd9      	adds	r1, r3, #3
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	695b      	ldr	r3, [r3, #20]
 80112c6:	461a      	mov	r2, r3
 80112c8:	f004 fda9 	bl	8015e1e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80112cc:	69bb      	ldr	r3, [r7, #24]
 80112ce:	781b      	ldrb	r3, [r3, #0]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d001      	beq.n	80112d8 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80112d4:	2301      	movs	r3, #1
 80112d6:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80112d8:	4809      	ldr	r0, [pc, #36]	@ (8011300 <hci_send_req+0x104>)
 80112da:	f000 fd41 	bl	8011d60 <LST_is_empty>
 80112de:	4603      	mov	r3, r0
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d0b5      	beq.n	8011250 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80112e4:	7ffb      	ldrb	r3, [r7, #31]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d0ad      	beq.n	8011246 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80112ea:	2001      	movs	r0, #1
 80112ec:	f000 f860 	bl	80113b0 <NotifyCmdStatus>

  return 0;
 80112f0:	2300      	movs	r3, #0
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3720      	adds	r7, #32
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	2000118c 	.word	0x2000118c
 8011300:	20001180 	.word	0x20001180

08011304 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b086      	sub	sp, #24
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 801130c:	480f      	ldr	r0, [pc, #60]	@ (801134c <TlInit+0x48>)
 801130e:	f000 fd17 	bl	8011d40 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8011312:	4a0f      	ldr	r2, [pc, #60]	@ (8011350 <TlInit+0x4c>)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8011318:	480e      	ldr	r0, [pc, #56]	@ (8011354 <TlInit+0x50>)
 801131a:	f000 fd11 	bl	8011d40 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801131e:	4b0e      	ldr	r3, [pc, #56]	@ (8011358 <TlInit+0x54>)
 8011320:	2201      	movs	r2, #1
 8011322:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011324:	4b0d      	ldr	r3, [pc, #52]	@ (801135c <TlInit+0x58>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00a      	beq.n	8011342 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011330:	4b0b      	ldr	r3, [pc, #44]	@ (8011360 <TlInit+0x5c>)
 8011332:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011334:	4b09      	ldr	r3, [pc, #36]	@ (801135c <TlInit+0x58>)
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f107 0208 	add.w	r2, r7, #8
 801133c:	4610      	mov	r0, r2
 801133e:	4798      	blx	r3
  }

  return;
 8011340:	bf00      	nop
 8011342:	bf00      	nop
}
 8011344:	3718      	adds	r7, #24
 8011346:	46bd      	mov	sp, r7
 8011348:	bd80      	pop	{r7, pc}
 801134a:	bf00      	nop
 801134c:	20001180 	.word	0x20001180
 8011350:	200001b8 	.word	0x200001b8
 8011354:	200001b0 	.word	0x200001b0
 8011358:	200001bc 	.word	0x200001bc
 801135c:	20001160 	.word	0x20001160
 8011360:	080113f1 	.word	0x080113f1

08011364 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	4603      	mov	r3, r0
 801136c:	603a      	str	r2, [r7, #0]
 801136e:	80fb      	strh	r3, [r7, #6]
 8011370:	460b      	mov	r3, r1
 8011372:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011374:	4b0c      	ldr	r3, [pc, #48]	@ (80113a8 <SendCmd+0x44>)
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	88fa      	ldrh	r2, [r7, #6]
 801137a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801137e:	4b0a      	ldr	r3, [pc, #40]	@ (80113a8 <SendCmd+0x44>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	797a      	ldrb	r2, [r7, #5]
 8011384:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011386:	4b08      	ldr	r3, [pc, #32]	@ (80113a8 <SendCmd+0x44>)
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	330c      	adds	r3, #12
 801138c:	797a      	ldrb	r2, [r7, #5]
 801138e:	6839      	ldr	r1, [r7, #0]
 8011390:	4618      	mov	r0, r3
 8011392:	f004 fd44 	bl	8015e1e <memcpy>

  hciContext.io.Send(0,0);
 8011396:	4b05      	ldr	r3, [pc, #20]	@ (80113ac <SendCmd+0x48>)
 8011398:	691b      	ldr	r3, [r3, #16]
 801139a:	2100      	movs	r1, #0
 801139c:	2000      	movs	r0, #0
 801139e:	4798      	blx	r3

  return;
 80113a0:	bf00      	nop
}
 80113a2:	3708      	adds	r7, #8
 80113a4:	46bd      	mov	sp, r7
 80113a6:	bd80      	pop	{r7, pc}
 80113a8:	200001b8 	.word	0x200001b8
 80113ac:	20001160 	.word	0x20001160

080113b0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	4603      	mov	r3, r0
 80113b8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80113ba:	79fb      	ldrb	r3, [r7, #7]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d108      	bne.n	80113d2 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80113c0:	4b0a      	ldr	r3, [pc, #40]	@ (80113ec <NotifyCmdStatus+0x3c>)
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d00d      	beq.n	80113e4 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 80113c8:	4b08      	ldr	r3, [pc, #32]	@ (80113ec <NotifyCmdStatus+0x3c>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	2000      	movs	r0, #0
 80113ce:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80113d0:	e008      	b.n	80113e4 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80113d2:	4b06      	ldr	r3, [pc, #24]	@ (80113ec <NotifyCmdStatus+0x3c>)
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d004      	beq.n	80113e4 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80113da:	4b04      	ldr	r3, [pc, #16]	@ (80113ec <NotifyCmdStatus+0x3c>)
 80113dc:	681b      	ldr	r3, [r3, #0]
 80113de:	2001      	movs	r0, #1
 80113e0:	4798      	blx	r3
  return;
 80113e2:	bf00      	nop
 80113e4:	bf00      	nop
}
 80113e6:	3708      	adds	r7, #8
 80113e8:	46bd      	mov	sp, r7
 80113ea:	bd80      	pop	{r7, pc}
 80113ec:	20001188 	.word	0x20001188

080113f0 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	7a5b      	ldrb	r3, [r3, #9]
 80113fc:	2b0f      	cmp	r3, #15
 80113fe:	d003      	beq.n	8011408 <TlEvtReceived+0x18>
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	7a5b      	ldrb	r3, [r3, #9]
 8011404:	2b0e      	cmp	r3, #14
 8011406:	d107      	bne.n	8011418 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011408:	6879      	ldr	r1, [r7, #4]
 801140a:	4809      	ldr	r0, [pc, #36]	@ (8011430 <TlEvtReceived+0x40>)
 801140c:	f000 fcf0 	bl	8011df0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8011410:	2000      	movs	r0, #0
 8011412:	f002 f9b1 	bl	8013778 <hci_cmd_resp_release>
 8011416:	e006      	b.n	8011426 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011418:	6879      	ldr	r1, [r7, #4]
 801141a:	4806      	ldr	r0, [pc, #24]	@ (8011434 <TlEvtReceived+0x44>)
 801141c:	f000 fce8 	bl	8011df0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011420:	4804      	ldr	r0, [pc, #16]	@ (8011434 <TlEvtReceived+0x44>)
 8011422:	f002 f99d 	bl	8013760 <hci_notify_asynch_evt>
  }

  return;
 8011426:	bf00      	nop
}
 8011428:	3708      	adds	r7, #8
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20001180 	.word	0x20001180
 8011434:	200001b0 	.word	0x200001b0

08011438 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8011438:	b480      	push	{r7}
 801143a:	b083      	sub	sp, #12
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	4a05      	ldr	r2, [pc, #20]	@ (8011458 <hci_register_io_bus+0x20>)
 8011444:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	4a04      	ldr	r2, [pc, #16]	@ (801145c <hci_register_io_bus+0x24>)
 801144a:	611a      	str	r2, [r3, #16]

  return;
 801144c:	bf00      	nop
}
 801144e:	370c      	adds	r7, #12
 8011450:	46bd      	mov	sp, r7
 8011452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011456:	4770      	bx	lr
 8011458:	08011751 	.word	0x08011751
 801145c:	080117b9 	.word	0x080117b9

08011460 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	685b      	ldr	r3, [r3, #4]
 801146e:	4a08      	ldr	r2, [pc, #32]	@ (8011490 <shci_init+0x30>)
 8011470:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011472:	4a08      	ldr	r2, [pc, #32]	@ (8011494 <shci_init+0x34>)
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011478:	4806      	ldr	r0, [pc, #24]	@ (8011494 <shci_init+0x34>)
 801147a:	f000 f915 	bl	80116a8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	4618      	mov	r0, r3
 8011484:	f000 f898 	bl	80115b8 <TlInit>

  return;
 8011488:	bf00      	nop
}
 801148a:	3708      	adds	r7, #8
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	200011b0 	.word	0x200011b0
 8011494:	20001190 	.word	0x20001190

08011498 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801149e:	4822      	ldr	r0, [pc, #136]	@ (8011528 <shci_user_evt_proc+0x90>)
 80114a0:	f000 fc5e 	bl	8011d60 <LST_is_empty>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d12b      	bne.n	8011502 <shci_user_evt_proc+0x6a>
 80114aa:	4b20      	ldr	r3, [pc, #128]	@ (801152c <shci_user_evt_proc+0x94>)
 80114ac:	781b      	ldrb	r3, [r3, #0]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d027      	beq.n	8011502 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80114b2:	f107 030c 	add.w	r3, r7, #12
 80114b6:	4619      	mov	r1, r3
 80114b8:	481b      	ldr	r0, [pc, #108]	@ (8011528 <shci_user_evt_proc+0x90>)
 80114ba:	f000 fce0 	bl	8011e7e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80114be:	4b1c      	ldr	r3, [pc, #112]	@ (8011530 <shci_user_evt_proc+0x98>)
 80114c0:	69db      	ldr	r3, [r3, #28]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d00c      	beq.n	80114e0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80114ca:	2301      	movs	r3, #1
 80114cc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80114ce:	4b18      	ldr	r3, [pc, #96]	@ (8011530 <shci_user_evt_proc+0x98>)
 80114d0:	69db      	ldr	r3, [r3, #28]
 80114d2:	1d3a      	adds	r2, r7, #4
 80114d4:	4610      	mov	r0, r2
 80114d6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80114d8:	793a      	ldrb	r2, [r7, #4]
 80114da:	4b14      	ldr	r3, [pc, #80]	@ (801152c <shci_user_evt_proc+0x94>)
 80114dc:	701a      	strb	r2, [r3, #0]
 80114de:	e002      	b.n	80114e6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80114e0:	4b12      	ldr	r3, [pc, #72]	@ (801152c <shci_user_evt_proc+0x94>)
 80114e2:	2201      	movs	r2, #1
 80114e4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80114e6:	4b11      	ldr	r3, [pc, #68]	@ (801152c <shci_user_evt_proc+0x94>)
 80114e8:	781b      	ldrb	r3, [r3, #0]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d004      	beq.n	80114f8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f000 fa71 	bl	80119d8 <TL_MM_EvtDone>
 80114f6:	e004      	b.n	8011502 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	4619      	mov	r1, r3
 80114fc:	480a      	ldr	r0, [pc, #40]	@ (8011528 <shci_user_evt_proc+0x90>)
 80114fe:	f000 fc51 	bl	8011da4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011502:	4809      	ldr	r0, [pc, #36]	@ (8011528 <shci_user_evt_proc+0x90>)
 8011504:	f000 fc2c 	bl	8011d60 <LST_is_empty>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d107      	bne.n	801151e <shci_user_evt_proc+0x86>
 801150e:	4b07      	ldr	r3, [pc, #28]	@ (801152c <shci_user_evt_proc+0x94>)
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d003      	beq.n	801151e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8011516:	4804      	ldr	r0, [pc, #16]	@ (8011528 <shci_user_evt_proc+0x90>)
 8011518:	f7f0 ff6b 	bl	80023f2 <shci_notify_asynch_evt>
  }


  return;
 801151c:	bf00      	nop
 801151e:	bf00      	nop
}
 8011520:	3710      	adds	r7, #16
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}
 8011526:	bf00      	nop
 8011528:	200001c0 	.word	0x200001c0
 801152c:	200001d0 	.word	0x200001d0
 8011530:	20001190 	.word	0x20001190

08011534 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b084      	sub	sp, #16
 8011538:	af00      	add	r7, sp, #0
 801153a:	60ba      	str	r2, [r7, #8]
 801153c:	607b      	str	r3, [r7, #4]
 801153e:	4603      	mov	r3, r0
 8011540:	81fb      	strh	r3, [r7, #14]
 8011542:	460b      	mov	r3, r1
 8011544:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8011546:	2000      	movs	r0, #0
 8011548:	f000 f868 	bl	801161c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 801154c:	4b17      	ldr	r3, [pc, #92]	@ (80115ac <shci_send+0x78>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	89fa      	ldrh	r2, [r7, #14]
 8011552:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8011556:	4b15      	ldr	r3, [pc, #84]	@ (80115ac <shci_send+0x78>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	7b7a      	ldrb	r2, [r7, #13]
 801155c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 801155e:	4b13      	ldr	r3, [pc, #76]	@ (80115ac <shci_send+0x78>)
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	330c      	adds	r3, #12
 8011564:	7b7a      	ldrb	r2, [r7, #13]
 8011566:	68b9      	ldr	r1, [r7, #8]
 8011568:	4618      	mov	r0, r3
 801156a:	f004 fc58 	bl	8015e1e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801156e:	4b10      	ldr	r3, [pc, #64]	@ (80115b0 <shci_send+0x7c>)
 8011570:	2201      	movs	r2, #1
 8011572:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011574:	4b0f      	ldr	r3, [pc, #60]	@ (80115b4 <shci_send+0x80>)
 8011576:	691b      	ldr	r3, [r3, #16]
 8011578:	2100      	movs	r1, #0
 801157a:	2000      	movs	r0, #0
 801157c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801157e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011582:	f7f0 ff4d 	bl	8002420 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	f103 0008 	add.w	r0, r3, #8
 801158c:	4b07      	ldr	r3, [pc, #28]	@ (80115ac <shci_send+0x78>)
 801158e:	6819      	ldr	r1, [r3, #0]
 8011590:	4b06      	ldr	r3, [pc, #24]	@ (80115ac <shci_send+0x78>)
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	789b      	ldrb	r3, [r3, #2]
 8011596:	3303      	adds	r3, #3
 8011598:	461a      	mov	r2, r3
 801159a:	f004 fc40 	bl	8015e1e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801159e:	2001      	movs	r0, #1
 80115a0:	f000 f83c 	bl	801161c <Cmd_SetStatus>

  return;
 80115a4:	bf00      	nop
}
 80115a6:	3710      	adds	r7, #16
 80115a8:	46bd      	mov	sp, r7
 80115aa:	bd80      	pop	{r7, pc}
 80115ac:	200001cc 	.word	0x200001cc
 80115b0:	200011b4 	.word	0x200011b4
 80115b4:	20001190 	.word	0x20001190

080115b8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80115b8:	b580      	push	{r7, lr}
 80115ba:	b086      	sub	sp, #24
 80115bc:	af00      	add	r7, sp, #0
 80115be:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80115c0:	4a10      	ldr	r2, [pc, #64]	@ (8011604 <TlInit+0x4c>)
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80115c6:	4810      	ldr	r0, [pc, #64]	@ (8011608 <TlInit+0x50>)
 80115c8:	f000 fbba 	bl	8011d40 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80115cc:	2001      	movs	r0, #1
 80115ce:	f000 f825 	bl	801161c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80115d2:	4b0e      	ldr	r3, [pc, #56]	@ (801160c <TlInit+0x54>)
 80115d4:	2201      	movs	r2, #1
 80115d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80115d8:	4b0d      	ldr	r3, [pc, #52]	@ (8011610 <TlInit+0x58>)
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00c      	beq.n	80115fa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80115e4:	4b0b      	ldr	r3, [pc, #44]	@ (8011614 <TlInit+0x5c>)
 80115e6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80115e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011618 <TlInit+0x60>)
 80115ea:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80115ec:	4b08      	ldr	r3, [pc, #32]	@ (8011610 <TlInit+0x58>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f107 020c 	add.w	r2, r7, #12
 80115f4:	4610      	mov	r0, r2
 80115f6:	4798      	blx	r3
  }

  return;
 80115f8:	bf00      	nop
 80115fa:	bf00      	nop
}
 80115fc:	3718      	adds	r7, #24
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	200001cc 	.word	0x200001cc
 8011608:	200001c0 	.word	0x200001c0
 801160c:	200001d0 	.word	0x200001d0
 8011610:	20001190 	.word	0x20001190
 8011614:	0801166d 	.word	0x0801166d
 8011618:	08011685 	.word	0x08011685

0801161c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	4603      	mov	r3, r0
 8011624:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8011626:	79fb      	ldrb	r3, [r7, #7]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d10b      	bne.n	8011644 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 801162c:	4b0d      	ldr	r3, [pc, #52]	@ (8011664 <Cmd_SetStatus+0x48>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d003      	beq.n	801163c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8011634:	4b0b      	ldr	r3, [pc, #44]	@ (8011664 <Cmd_SetStatus+0x48>)
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	2000      	movs	r0, #0
 801163a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 801163c:	4b0a      	ldr	r3, [pc, #40]	@ (8011668 <Cmd_SetStatus+0x4c>)
 801163e:	2200      	movs	r2, #0
 8011640:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011642:	e00b      	b.n	801165c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011644:	4b08      	ldr	r3, [pc, #32]	@ (8011668 <Cmd_SetStatus+0x4c>)
 8011646:	2201      	movs	r2, #1
 8011648:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801164a:	4b06      	ldr	r3, [pc, #24]	@ (8011664 <Cmd_SetStatus+0x48>)
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d004      	beq.n	801165c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011652:	4b04      	ldr	r3, [pc, #16]	@ (8011664 <Cmd_SetStatus+0x48>)
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	2001      	movs	r0, #1
 8011658:	4798      	blx	r3
  return;
 801165a:	bf00      	nop
 801165c:	bf00      	nop
}
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	200011b0 	.word	0x200011b0
 8011668:	200001c8 	.word	0x200001c8

0801166c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b082      	sub	sp, #8
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011674:	2000      	movs	r0, #0
 8011676:	f7f0 fec8 	bl	800240a <shci_cmd_resp_release>

  return;
 801167a:	bf00      	nop
}
 801167c:	3708      	adds	r7, #8
 801167e:	46bd      	mov	sp, r7
 8011680:	bd80      	pop	{r7, pc}
	...

08011684 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801168c:	6879      	ldr	r1, [r7, #4]
 801168e:	4805      	ldr	r0, [pc, #20]	@ (80116a4 <TlUserEvtReceived+0x20>)
 8011690:	f000 fbae 	bl	8011df0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011694:	4803      	ldr	r0, [pc, #12]	@ (80116a4 <TlUserEvtReceived+0x20>)
 8011696:	f7f0 feac 	bl	80023f2 <shci_notify_asynch_evt>

  return;
 801169a:	bf00      	nop
}
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	200001c0 	.word	0x200001c0

080116a8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	4a05      	ldr	r2, [pc, #20]	@ (80116c8 <shci_register_io_bus+0x20>)
 80116b4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	4a04      	ldr	r2, [pc, #16]	@ (80116cc <shci_register_io_bus+0x24>)
 80116ba:	611a      	str	r2, [r3, #16]

  return;
 80116bc:	bf00      	nop
}
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	08011865 	.word	0x08011865
 80116cc:	080118b9 	.word	0x080118b9

080116d0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80116d4:	f003 f808 	bl	80146e8 <HW_IPCC_Enable>

  return;
 80116d8:	bf00      	nop
}
 80116da:	bd80      	pop	{r7, pc}

080116dc <TL_Init>:


void TL_Init( void )
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80116e0:	4b10      	ldr	r3, [pc, #64]	@ (8011724 <TL_Init+0x48>)
 80116e2:	4a11      	ldr	r2, [pc, #68]	@ (8011728 <TL_Init+0x4c>)
 80116e4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80116e6:	4b0f      	ldr	r3, [pc, #60]	@ (8011724 <TL_Init+0x48>)
 80116e8:	4a10      	ldr	r2, [pc, #64]	@ (801172c <TL_Init+0x50>)
 80116ea:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80116ec:	4b0d      	ldr	r3, [pc, #52]	@ (8011724 <TL_Init+0x48>)
 80116ee:	4a10      	ldr	r2, [pc, #64]	@ (8011730 <TL_Init+0x54>)
 80116f0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80116f2:	4b0c      	ldr	r3, [pc, #48]	@ (8011724 <TL_Init+0x48>)
 80116f4:	4a0f      	ldr	r2, [pc, #60]	@ (8011734 <TL_Init+0x58>)
 80116f6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80116f8:	4b0a      	ldr	r3, [pc, #40]	@ (8011724 <TL_Init+0x48>)
 80116fa:	4a0f      	ldr	r2, [pc, #60]	@ (8011738 <TL_Init+0x5c>)
 80116fc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80116fe:	4b09      	ldr	r3, [pc, #36]	@ (8011724 <TL_Init+0x48>)
 8011700:	4a0e      	ldr	r2, [pc, #56]	@ (801173c <TL_Init+0x60>)
 8011702:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8011704:	4b07      	ldr	r3, [pc, #28]	@ (8011724 <TL_Init+0x48>)
 8011706:	4a0e      	ldr	r2, [pc, #56]	@ (8011740 <TL_Init+0x64>)
 8011708:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801170a:	4b06      	ldr	r3, [pc, #24]	@ (8011724 <TL_Init+0x48>)
 801170c:	4a0d      	ldr	r2, [pc, #52]	@ (8011744 <TL_Init+0x68>)
 801170e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8011710:	4b04      	ldr	r3, [pc, #16]	@ (8011724 <TL_Init+0x48>)
 8011712:	4a0d      	ldr	r2, [pc, #52]	@ (8011748 <TL_Init+0x6c>)
 8011714:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8011716:	4b03      	ldr	r3, [pc, #12]	@ (8011724 <TL_Init+0x48>)
 8011718:	4a0c      	ldr	r2, [pc, #48]	@ (801174c <TL_Init+0x70>)
 801171a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 801171c:	f002 fff8 	bl	8014710 <HW_IPCC_Init>

  return;
 8011720:	bf00      	nop
}
 8011722:	bd80      	pop	{r7, pc}
 8011724:	20030000 	.word	0x20030000
 8011728:	20030028 	.word	0x20030028
 801172c:	20030048 	.word	0x20030048
 8011730:	20030058 	.word	0x20030058
 8011734:	20030068 	.word	0x20030068
 8011738:	20030070 	.word	0x20030070
 801173c:	20030078 	.word	0x20030078
 8011740:	20030080 	.word	0x20030080
 8011744:	2003009c 	.word	0x2003009c
 8011748:	200300a0 	.word	0x200300a0
 801174c:	200300ac 	.word	0x200300ac

08011750 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b084      	sub	sp, #16
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 801175c:	4811      	ldr	r0, [pc, #68]	@ (80117a4 <TL_BLE_Init+0x54>)
 801175e:	f000 faef 	bl	8011d40 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8011762:	4b11      	ldr	r3, [pc, #68]	@ (80117a8 <TL_BLE_Init+0x58>)
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	689a      	ldr	r2, [r3, #8]
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	68da      	ldr	r2, [r3, #12]
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8011778:	68bb      	ldr	r3, [r7, #8]
 801177a:	4a0c      	ldr	r2, [pc, #48]	@ (80117ac <TL_BLE_Init+0x5c>)
 801177c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	4a08      	ldr	r2, [pc, #32]	@ (80117a4 <TL_BLE_Init+0x54>)
 8011782:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8011784:	f002 ffda 	bl	801473c <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4a08      	ldr	r2, [pc, #32]	@ (80117b0 <TL_BLE_Init+0x60>)
 801178e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	685b      	ldr	r3, [r3, #4]
 8011794:	4a07      	ldr	r2, [pc, #28]	@ (80117b4 <TL_BLE_Init+0x64>)
 8011796:	6013      	str	r3, [r2, #0]

  return 0;
 8011798:	2300      	movs	r3, #0
}
 801179a:	4618      	mov	r0, r3
 801179c:	3710      	adds	r7, #16
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	200300c8 	.word	0x200300c8
 80117a8:	20030000 	.word	0x20030000
 80117ac:	20031f48 	.word	0x20031f48
 80117b0:	200011c0 	.word	0x200011c0
 80117b4:	200011c4 	.word	0x200011c4

080117b8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b082      	sub	sp, #8
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
 80117c0:	460b      	mov	r3, r1
 80117c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80117c4:	4b09      	ldr	r3, [pc, #36]	@ (80117ec <TL_BLE_SendCmd+0x34>)
 80117c6:	685b      	ldr	r3, [r3, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2201      	movs	r2, #1
 80117cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80117ce:	4b07      	ldr	r3, [pc, #28]	@ (80117ec <TL_BLE_SendCmd+0x34>)
 80117d0:	685b      	ldr	r3, [r3, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	4619      	mov	r1, r3
 80117d6:	2001      	movs	r0, #1
 80117d8:	f000 f96c 	bl	8011ab4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80117dc:	f002 ffb8 	bl	8014750 <HW_IPCC_BLE_SendCmd>

  return 0;
 80117e0:	2300      	movs	r3, #0
}
 80117e2:	4618      	mov	r0, r3
 80117e4:	3708      	adds	r7, #8
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	20030000 	.word	0x20030000

080117f0 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80117f6:	e01c      	b.n	8011832 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80117f8:	1d3b      	adds	r3, r7, #4
 80117fa:	4619      	mov	r1, r3
 80117fc:	4812      	ldr	r0, [pc, #72]	@ (8011848 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80117fe:	f000 fb3e 	bl	8011e7e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	7a5b      	ldrb	r3, [r3, #9]
 8011806:	2b0f      	cmp	r3, #15
 8011808:	d003      	beq.n	8011812 <HW_IPCC_BLE_RxEvtNot+0x22>
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	7a5b      	ldrb	r3, [r3, #9]
 801180e:	2b0e      	cmp	r3, #14
 8011810:	d105      	bne.n	801181e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	4619      	mov	r1, r3
 8011816:	2002      	movs	r0, #2
 8011818:	f000 f94c 	bl	8011ab4 <OutputDbgTrace>
 801181c:	e004      	b.n	8011828 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	4619      	mov	r1, r3
 8011822:	2003      	movs	r0, #3
 8011824:	f000 f946 	bl	8011ab4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8011828:	4b08      	ldr	r3, [pc, #32]	@ (801184c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	4610      	mov	r0, r2
 8011830:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8011832:	4805      	ldr	r0, [pc, #20]	@ (8011848 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011834:	f000 fa94 	bl	8011d60 <LST_is_empty>
 8011838:	4603      	mov	r3, r0
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0dc      	beq.n	80117f8 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801183e:	bf00      	nop
}
 8011840:	3708      	adds	r7, #8
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}
 8011846:	bf00      	nop
 8011848:	200300c8 	.word	0x200300c8
 801184c:	200011c0 	.word	0x200011c0

08011850 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8011854:	4b02      	ldr	r3, [pc, #8]	@ (8011860 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	4798      	blx	r3

  return;
 801185a:	bf00      	nop
}
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	200011c4 	.word	0x200011c4

08011864 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b084      	sub	sp, #16
 8011868:	af00      	add	r7, sp, #0
 801186a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8011870:	480d      	ldr	r0, [pc, #52]	@ (80118a8 <TL_SYS_Init+0x44>)
 8011872:	f000 fa65 	bl	8011d40 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8011876:	4b0d      	ldr	r3, [pc, #52]	@ (80118ac <TL_SYS_Init+0x48>)
 8011878:	68db      	ldr	r3, [r3, #12]
 801187a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	689a      	ldr	r2, [r3, #8]
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	4a08      	ldr	r2, [pc, #32]	@ (80118a8 <TL_SYS_Init+0x44>)
 8011888:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801188a:	f002 ff83 	bl	8014794 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	4a07      	ldr	r2, [pc, #28]	@ (80118b0 <TL_SYS_Init+0x4c>)
 8011894:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	685b      	ldr	r3, [r3, #4]
 801189a:	4a06      	ldr	r2, [pc, #24]	@ (80118b4 <TL_SYS_Init+0x50>)
 801189c:	6013      	str	r3, [r2, #0]

  return 0;
 801189e:	2300      	movs	r3, #0
}
 80118a0:	4618      	mov	r0, r3
 80118a2:	3710      	adds	r7, #16
 80118a4:	46bd      	mov	sp, r7
 80118a6:	bd80      	pop	{r7, pc}
 80118a8:	200300d0 	.word	0x200300d0
 80118ac:	20030000 	.word	0x20030000
 80118b0:	200011c8 	.word	0x200011c8
 80118b4:	200011cc 	.word	0x200011cc

080118b8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b082      	sub	sp, #8
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
 80118c0:	460b      	mov	r3, r1
 80118c2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80118c4:	4b09      	ldr	r3, [pc, #36]	@ (80118ec <TL_SYS_SendCmd+0x34>)
 80118c6:	68db      	ldr	r3, [r3, #12]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	2210      	movs	r2, #16
 80118cc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80118ce:	4b07      	ldr	r3, [pc, #28]	@ (80118ec <TL_SYS_SendCmd+0x34>)
 80118d0:	68db      	ldr	r3, [r3, #12]
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	4619      	mov	r1, r3
 80118d6:	2004      	movs	r0, #4
 80118d8:	f000 f8ec 	bl	8011ab4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80118dc:	f002 ff64 	bl	80147a8 <HW_IPCC_SYS_SendCmd>

  return 0;
 80118e0:	2300      	movs	r3, #0
}
 80118e2:	4618      	mov	r0, r3
 80118e4:	3708      	adds	r7, #8
 80118e6:	46bd      	mov	sp, r7
 80118e8:	bd80      	pop	{r7, pc}
 80118ea:	bf00      	nop
 80118ec:	20030000 	.word	0x20030000

080118f0 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80118f4:	4b07      	ldr	r3, [pc, #28]	@ (8011914 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80118f6:	68db      	ldr	r3, [r3, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	4619      	mov	r1, r3
 80118fc:	2005      	movs	r0, #5
 80118fe:	f000 f8d9 	bl	8011ab4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011902:	4b05      	ldr	r3, [pc, #20]	@ (8011918 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8011904:	681b      	ldr	r3, [r3, #0]
 8011906:	4a03      	ldr	r2, [pc, #12]	@ (8011914 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011908:	68d2      	ldr	r2, [r2, #12]
 801190a:	6812      	ldr	r2, [r2, #0]
 801190c:	4610      	mov	r0, r2
 801190e:	4798      	blx	r3

  return;
 8011910:	bf00      	nop
}
 8011912:	bd80      	pop	{r7, pc}
 8011914:	20030000 	.word	0x20030000
 8011918:	200011c8 	.word	0x200011c8

0801191c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b082      	sub	sp, #8
 8011920:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011922:	e00e      	b.n	8011942 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8011924:	1d3b      	adds	r3, r7, #4
 8011926:	4619      	mov	r1, r3
 8011928:	480b      	ldr	r0, [pc, #44]	@ (8011958 <HW_IPCC_SYS_EvtNot+0x3c>)
 801192a:	f000 faa8 	bl	8011e7e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	4619      	mov	r1, r3
 8011932:	2006      	movs	r0, #6
 8011934:	f000 f8be 	bl	8011ab4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8011938:	4b08      	ldr	r3, [pc, #32]	@ (801195c <HW_IPCC_SYS_EvtNot+0x40>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	687a      	ldr	r2, [r7, #4]
 801193e:	4610      	mov	r0, r2
 8011940:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011942:	4805      	ldr	r0, [pc, #20]	@ (8011958 <HW_IPCC_SYS_EvtNot+0x3c>)
 8011944:	f000 fa0c 	bl	8011d60 <LST_is_empty>
 8011948:	4603      	mov	r3, r0
 801194a:	2b00      	cmp	r3, #0
 801194c:	d0ea      	beq.n	8011924 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801194e:	bf00      	nop
}
 8011950:	3708      	adds	r7, #8
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	200300d0 	.word	0x200300d0
 801195c:	200011cc 	.word	0x200011cc

08011960 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b082      	sub	sp, #8
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8011968:	4817      	ldr	r0, [pc, #92]	@ (80119c8 <TL_MM_Init+0x68>)
 801196a:	f000 f9e9 	bl	8011d40 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801196e:	4817      	ldr	r0, [pc, #92]	@ (80119cc <TL_MM_Init+0x6c>)
 8011970:	f000 f9e6 	bl	8011d40 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8011974:	4b16      	ldr	r3, [pc, #88]	@ (80119d0 <TL_MM_Init+0x70>)
 8011976:	691b      	ldr	r3, [r3, #16]
 8011978:	4a16      	ldr	r2, [pc, #88]	@ (80119d4 <TL_MM_Init+0x74>)
 801197a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801197c:	4b15      	ldr	r3, [pc, #84]	@ (80119d4 <TL_MM_Init+0x74>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	687a      	ldr	r2, [r7, #4]
 8011982:	6892      	ldr	r2, [r2, #8]
 8011984:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8011986:	4b13      	ldr	r3, [pc, #76]	@ (80119d4 <TL_MM_Init+0x74>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	68d2      	ldr	r2, [r2, #12]
 801198e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011990:	4b10      	ldr	r3, [pc, #64]	@ (80119d4 <TL_MM_Init+0x74>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	4a0c      	ldr	r2, [pc, #48]	@ (80119c8 <TL_MM_Init+0x68>)
 8011996:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011998:	4b0e      	ldr	r3, [pc, #56]	@ (80119d4 <TL_MM_Init+0x74>)
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	687a      	ldr	r2, [r7, #4]
 801199e:	6812      	ldr	r2, [r2, #0]
 80119a0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80119a2:	4b0c      	ldr	r3, [pc, #48]	@ (80119d4 <TL_MM_Init+0x74>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	687a      	ldr	r2, [r7, #4]
 80119a8:	6852      	ldr	r2, [r2, #4]
 80119aa:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80119ac:	4b09      	ldr	r3, [pc, #36]	@ (80119d4 <TL_MM_Init+0x74>)
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	687a      	ldr	r2, [r7, #4]
 80119b2:	6912      	ldr	r2, [r2, #16]
 80119b4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80119b6:	4b07      	ldr	r3, [pc, #28]	@ (80119d4 <TL_MM_Init+0x74>)
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	687a      	ldr	r2, [r7, #4]
 80119bc:	6952      	ldr	r2, [r2, #20]
 80119be:	619a      	str	r2, [r3, #24]

  return;
 80119c0:	bf00      	nop
}
 80119c2:	3708      	adds	r7, #8
 80119c4:	46bd      	mov	sp, r7
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	200300b8 	.word	0x200300b8
 80119cc:	200011b8 	.word	0x200011b8
 80119d0:	20030000 	.word	0x20030000
 80119d4:	200011d0 	.word	0x200011d0

080119d8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80119e0:	6879      	ldr	r1, [r7, #4]
 80119e2:	4807      	ldr	r0, [pc, #28]	@ (8011a00 <TL_MM_EvtDone+0x28>)
 80119e4:	f000 fa04 	bl	8011df0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80119e8:	6879      	ldr	r1, [r7, #4]
 80119ea:	2000      	movs	r0, #0
 80119ec:	f000 f862 	bl	8011ab4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80119f0:	4804      	ldr	r0, [pc, #16]	@ (8011a04 <TL_MM_EvtDone+0x2c>)
 80119f2:	f002 feff 	bl	80147f4 <HW_IPCC_MM_SendFreeBuf>

  return;
 80119f6:	bf00      	nop
}
 80119f8:	3708      	adds	r7, #8
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}
 80119fe:	bf00      	nop
 8011a00:	200011b8 	.word	0x200011b8
 8011a04:	08011a09 	.word	0x08011a09

08011a08 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011a0e:	e00c      	b.n	8011a2a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011a10:	1d3b      	adds	r3, r7, #4
 8011a12:	4619      	mov	r1, r3
 8011a14:	480a      	ldr	r0, [pc, #40]	@ (8011a40 <SendFreeBuf+0x38>)
 8011a16:	f000 fa32 	bl	8011e7e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8011a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8011a44 <SendFreeBuf+0x3c>)
 8011a1c:	691b      	ldr	r3, [r3, #16]
 8011a1e:	691b      	ldr	r3, [r3, #16]
 8011a20:	687a      	ldr	r2, [r7, #4]
 8011a22:	4611      	mov	r1, r2
 8011a24:	4618      	mov	r0, r3
 8011a26:	f000 f9e3 	bl	8011df0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011a2a:	4805      	ldr	r0, [pc, #20]	@ (8011a40 <SendFreeBuf+0x38>)
 8011a2c:	f000 f998 	bl	8011d60 <LST_is_empty>
 8011a30:	4603      	mov	r3, r0
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d0ec      	beq.n	8011a10 <SendFreeBuf+0x8>
  }

  return;
 8011a36:	bf00      	nop
}
 8011a38:	3708      	adds	r7, #8
 8011a3a:	46bd      	mov	sp, r7
 8011a3c:	bd80      	pop	{r7, pc}
 8011a3e:	bf00      	nop
 8011a40:	200011b8 	.word	0x200011b8
 8011a44:	20030000 	.word	0x20030000

08011a48 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8011a4c:	4805      	ldr	r0, [pc, #20]	@ (8011a64 <TL_TRACES_Init+0x1c>)
 8011a4e:	f000 f977 	bl	8011d40 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8011a52:	4b05      	ldr	r3, [pc, #20]	@ (8011a68 <TL_TRACES_Init+0x20>)
 8011a54:	695b      	ldr	r3, [r3, #20]
 8011a56:	4a03      	ldr	r2, [pc, #12]	@ (8011a64 <TL_TRACES_Init+0x1c>)
 8011a58:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8011a5a:	f002 ff01 	bl	8014860 <HW_IPCC_TRACES_Init>

  return;
 8011a5e:	bf00      	nop
}
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	200300c0 	.word	0x200300c0
 8011a68:	20030000 	.word	0x20030000

08011a6c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011a72:	e008      	b.n	8011a86 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8011a74:	1d3b      	adds	r3, r7, #4
 8011a76:	4619      	mov	r1, r3
 8011a78:	4808      	ldr	r0, [pc, #32]	@ (8011a9c <HW_IPCC_TRACES_EvtNot+0x30>)
 8011a7a:	f000 fa00 	bl	8011e7e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	4618      	mov	r0, r3
 8011a82:	f000 f80d 	bl	8011aa0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011a86:	4805      	ldr	r0, [pc, #20]	@ (8011a9c <HW_IPCC_TRACES_EvtNot+0x30>)
 8011a88:	f000 f96a 	bl	8011d60 <LST_is_empty>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d0f0      	beq.n	8011a74 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8011a92:	bf00      	nop
}
 8011a94:	3708      	adds	r7, #8
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	200300c0 	.word	0x200300c0

08011aa0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8011aa8:	bf00      	nop
 8011aaa:	370c      	adds	r7, #12
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b085      	sub	sp, #20
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	4603      	mov	r3, r0
 8011abc:	6039      	str	r1, [r7, #0]
 8011abe:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8011ac0:	79fb      	ldrb	r3, [r7, #7]
 8011ac2:	2b06      	cmp	r3, #6
 8011ac4:	d845      	bhi.n	8011b52 <OutputDbgTrace+0x9e>
 8011ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8011acc <OutputDbgTrace+0x18>)
 8011ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011acc:	08011ae9 	.word	0x08011ae9
 8011ad0:	08011b0d 	.word	0x08011b0d
 8011ad4:	08011b13 	.word	0x08011b13
 8011ad8:	08011b27 	.word	0x08011b27
 8011adc:	08011b33 	.word	0x08011b33
 8011ae0:	08011b39 	.word	0x08011b39
 8011ae4:	08011b47 	.word	0x08011b47
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	7a5b      	ldrb	r3, [r3, #9]
 8011af0:	2bff      	cmp	r3, #255	@ 0xff
 8011af2:	d005      	beq.n	8011b00 <OutputDbgTrace+0x4c>
 8011af4:	2bff      	cmp	r3, #255	@ 0xff
 8011af6:	dc05      	bgt.n	8011b04 <OutputDbgTrace+0x50>
 8011af8:	2b0e      	cmp	r3, #14
 8011afa:	d005      	beq.n	8011b08 <OutputDbgTrace+0x54>
 8011afc:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8011afe:	e001      	b.n	8011b04 <OutputDbgTrace+0x50>
          break;
 8011b00:	bf00      	nop
 8011b02:	e027      	b.n	8011b54 <OutputDbgTrace+0xa0>
          break;
 8011b04:	bf00      	nop
 8011b06:	e025      	b.n	8011b54 <OutputDbgTrace+0xa0>
          break;
 8011b08:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8011b0a:	e023      	b.n	8011b54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011b10:	e020      	b.n	8011b54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	7a5b      	ldrb	r3, [r3, #9]
 8011b1a:	2b0e      	cmp	r3, #14
 8011b1c:	d001      	beq.n	8011b22 <OutputDbgTrace+0x6e>
 8011b1e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011b20:	e000      	b.n	8011b24 <OutputDbgTrace+0x70>
          break;
 8011b22:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011b24:	e016      	b.n	8011b54 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	7a5b      	ldrb	r3, [r3, #9]
 8011b2e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011b30:	e010      	b.n	8011b54 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011b36:	e00d      	b.n	8011b54 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	7a5b      	ldrb	r3, [r3, #9]
 8011b40:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011b42:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011b44:	e006      	b.n	8011b54 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	7a5b      	ldrb	r3, [r3, #9]
 8011b4e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011b50:	e000      	b.n	8011b54 <OutputDbgTrace+0xa0>

    default:
      break;
 8011b52:	bf00      	nop
  }

  return;
 8011b54:	bf00      	nop
}
 8011b56:	3714      	adds	r7, #20
 8011b58:	46bd      	mov	sp, r7
 8011b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5e:	4770      	bx	lr

08011b60 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b084      	sub	sp, #16
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8011b6c:	215c      	movs	r1, #92	@ 0x5c
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	f004 f8cc 	bl	8015d0c <strrchr>
 8011b74:	4603      	mov	r3, r0
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d007      	beq.n	8011b8a <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8011b7a:	215c      	movs	r1, #92	@ 0x5c
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f004 f8c5 	bl	8015d0c <strrchr>
 8011b82:	4603      	mov	r3, r0
 8011b84:	3301      	adds	r3, #1
 8011b86:	60fb      	str	r3, [r7, #12]
 8011b88:	e00d      	b.n	8011ba6 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8011b8a:	212f      	movs	r1, #47	@ 0x2f
 8011b8c:	6878      	ldr	r0, [r7, #4]
 8011b8e:	f004 f8bd 	bl	8015d0c <strrchr>
 8011b92:	4603      	mov	r3, r0
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d006      	beq.n	8011ba6 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8011b98:	212f      	movs	r1, #47	@ 0x2f
 8011b9a:	6878      	ldr	r0, [r7, #4]
 8011b9c:	f004 f8b6 	bl	8015d0c <strrchr>
 8011ba0:	4603      	mov	r3, r0
 8011ba2:	3301      	adds	r3, #1
 8011ba4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3710      	adds	r7, #16
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b086      	sub	sp, #24
 8011bb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8011bba:	60fb      	str	r3, [r7, #12]
  return(result);
 8011bbc:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8011bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011bc0:	b672      	cpsid	i
}
 8011bc2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8011bc4:	1cbb      	adds	r3, r7, #2
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	4812      	ldr	r0, [pc, #72]	@ (8011c14 <DbgTrace_TxCpltCallback+0x64>)
 8011bca:	f000 fb9d 	bl	8012308 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8011bce:	1cbb      	adds	r3, r7, #2
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	4810      	ldr	r0, [pc, #64]	@ (8011c14 <DbgTrace_TxCpltCallback+0x64>)
 8011bd4:	f000 fc87 	bl	80124e6 <CircularQueue_Sense>
 8011bd8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00c      	beq.n	8011bfa <DbgTrace_TxCpltCallback+0x4a>
 8011be0:	697b      	ldr	r3, [r7, #20]
 8011be2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011be4:	68bb      	ldr	r3, [r7, #8]
 8011be6:	f383 8810 	msr	PRIMASK, r3
}
 8011bea:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8011bec:	887b      	ldrh	r3, [r7, #2]
 8011bee:	4a0a      	ldr	r2, [pc, #40]	@ (8011c18 <DbgTrace_TxCpltCallback+0x68>)
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	6938      	ldr	r0, [r7, #16]
 8011bf4:	f7ef fefa 	bl	80019ec <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8011bf8:	e008      	b.n	8011c0c <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8011bfa:	4b08      	ldr	r3, [pc, #32]	@ (8011c1c <DbgTrace_TxCpltCallback+0x6c>)
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	701a      	strb	r2, [r3, #0]
 8011c00:	697b      	ldr	r3, [r7, #20]
 8011c02:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	f383 8810 	msr	PRIMASK, r3
}
 8011c0a:	bf00      	nop
}
 8011c0c:	bf00      	nop
 8011c0e:	3718      	adds	r7, #24
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	200011d4 	.word	0x200011d4
 8011c18:	08011bb1 	.word	0x08011bb1
 8011c1c:	200000a2 	.word	0x200000a2

08011c20 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	60f8      	str	r0, [r7, #12]
 8011c28:	60b9      	str	r1, [r7, #8]
 8011c2a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8011c2c:	687a      	ldr	r2, [r7, #4]
 8011c2e:	68b9      	ldr	r1, [r7, #8]
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	f000 f805 	bl	8011c40 <DbgTraceWrite>
 8011c36:	4603      	mov	r3, r0
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3710      	adds	r7, #16
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b08a      	sub	sp, #40	@ 0x28
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c50:	f3ef 8310 	mrs	r3, PRIMASK
 8011c54:	61bb      	str	r3, [r7, #24]
  return(result);
 8011c56:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8011c58:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c60:	d102      	bne.n	8011c68 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8011c62:	2300      	movs	r3, #0
 8011c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c66:	e037      	b.n	8011cd8 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d006      	beq.n	8011c7c <DbgTraceWrite+0x3c>
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	2b02      	cmp	r3, #2
 8011c72:	d003      	beq.n	8011c7c <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8011c74:	f04f 33ff 	mov.w	r3, #4294967295
 8011c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c7a:	e02d      	b.n	8011cd8 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d02a      	beq.n	8011cd8 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8011c86:	b672      	cpsid	i
}
 8011c88:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	b29a      	uxth	r2, r3
 8011c8e:	2301      	movs	r3, #1
 8011c90:	68b9      	ldr	r1, [r7, #8]
 8011c92:	4814      	ldr	r0, [pc, #80]	@ (8011ce4 <DbgTraceWrite+0xa4>)
 8011c94:	f000 f912 	bl	8011ebc <CircularQueue_Add>
 8011c98:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8011c9a:	69fb      	ldr	r3, [r7, #28]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d015      	beq.n	8011ccc <DbgTraceWrite+0x8c>
 8011ca0:	4b11      	ldr	r3, [pc, #68]	@ (8011ce8 <DbgTraceWrite+0xa8>)
 8011ca2:	781b      	ldrb	r3, [r3, #0]
 8011ca4:	b2db      	uxtb	r3, r3
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d010      	beq.n	8011ccc <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8011caa:	4b0f      	ldr	r3, [pc, #60]	@ (8011ce8 <DbgTraceWrite+0xa8>)
 8011cac:	2200      	movs	r2, #0
 8011cae:	701a      	strb	r2, [r3, #0]
 8011cb0:	6a3b      	ldr	r3, [r7, #32]
 8011cb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	f383 8810 	msr	PRIMASK, r3
}
 8011cba:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	b29b      	uxth	r3, r3
 8011cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8011cec <DbgTraceWrite+0xac>)
 8011cc2:	4619      	mov	r1, r3
 8011cc4:	69f8      	ldr	r0, [r7, #28]
 8011cc6:	f7ef fe91 	bl	80019ec <DbgOutputTraces>
 8011cca:	e005      	b.n	8011cd8 <DbgTraceWrite+0x98>
 8011ccc:	6a3b      	ldr	r3, [r7, #32]
 8011cce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cd0:	693b      	ldr	r3, [r7, #16]
 8011cd2:	f383 8810 	msr	PRIMASK, r3
}
 8011cd6:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8011cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3728      	adds	r7, #40	@ 0x28
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	200011d4 	.word	0x200011d4
 8011ce8:	200000a2 	.word	0x200000a2
 8011cec:	08011bb1 	.word	0x08011bb1

08011cf0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011cf0:	b480      	push	{r7}
 8011cf2:	b085      	sub	sp, #20
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	4603      	mov	r3, r0
 8011cf8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8011cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8011d38 <OTP_Read+0x48>)
 8011cfc:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011cfe:	e002      	b.n	8011d06 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	3b08      	subs	r3, #8
 8011d04:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	3307      	adds	r3, #7
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	79fa      	ldrb	r2, [r7, #7]
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d003      	beq.n	8011d1a <OTP_Read+0x2a>
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	4a09      	ldr	r2, [pc, #36]	@ (8011d3c <OTP_Read+0x4c>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d1f2      	bne.n	8011d00 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	3307      	adds	r3, #7
 8011d1e:	781b      	ldrb	r3, [r3, #0]
 8011d20:	79fa      	ldrb	r2, [r7, #7]
 8011d22:	429a      	cmp	r2, r3
 8011d24:	d001      	beq.n	8011d2a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8011d26:	2300      	movs	r3, #0
 8011d28:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8011d2a:	68fb      	ldr	r3, [r7, #12]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3714      	adds	r7, #20
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr
 8011d38:	1fff73f8 	.word	0x1fff73f8
 8011d3c:	1fff7000 	.word	0x1fff7000

08011d40 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8011d40:	b480      	push	{r7}
 8011d42:	b083      	sub	sp, #12
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	605a      	str	r2, [r3, #4]
}
 8011d54:	bf00      	nop
 8011d56:	370c      	adds	r7, #12
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5e:	4770      	bx	lr

08011d60 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b087      	sub	sp, #28
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d68:	f3ef 8310 	mrs	r3, PRIMASK
 8011d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d6e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d72:	b672      	cpsid	i
}
 8011d74:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	687a      	ldr	r2, [r7, #4]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d102      	bne.n	8011d86 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8011d80:	2301      	movs	r3, #1
 8011d82:	75fb      	strb	r3, [r7, #23]
 8011d84:	e001      	b.n	8011d8a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8011d86:	2300      	movs	r3, #0
 8011d88:	75fb      	strb	r3, [r7, #23]
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	f383 8810 	msr	PRIMASK, r3
}
 8011d94:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8011d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	371c      	adds	r7, #28
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011da2:	4770      	bx	lr

08011da4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8011da4:	b480      	push	{r7}
 8011da6:	b087      	sub	sp, #28
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
 8011dac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011dae:	f3ef 8310 	mrs	r3, PRIMASK
 8011db2:	60fb      	str	r3, [r7, #12]
  return(result);
 8011db4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011db6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011db8:	b672      	cpsid	i
}
 8011dba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	681a      	ldr	r2, [r3, #0]
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	687a      	ldr	r2, [r7, #4]
 8011dc8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	683a      	ldr	r2, [r7, #0]
 8011dd6:	605a      	str	r2, [r3, #4]
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ddc:	693b      	ldr	r3, [r7, #16]
 8011dde:	f383 8810 	msr	PRIMASK, r3
}
 8011de2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011de4:	bf00      	nop
 8011de6:	371c      	adds	r7, #28
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b087      	sub	sp, #28
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8011dfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e00:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011e02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e04:	b672      	cpsid	i
}
 8011e06:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	685a      	ldr	r2, [r3, #4]
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	683a      	ldr	r2, [r7, #0]
 8011e1a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8011e1c:	683b      	ldr	r3, [r7, #0]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	683a      	ldr	r2, [r7, #0]
 8011e22:	601a      	str	r2, [r3, #0]
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e28:	693b      	ldr	r3, [r7, #16]
 8011e2a:	f383 8810 	msr	PRIMASK, r3
}
 8011e2e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011e30:	bf00      	nop
 8011e32:	371c      	adds	r7, #28
 8011e34:	46bd      	mov	sp, r7
 8011e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e3a:	4770      	bx	lr

08011e3c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b087      	sub	sp, #28
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e44:	f3ef 8310 	mrs	r3, PRIMASK
 8011e48:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011e4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e4e:	b672      	cpsid	i
}
 8011e50:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	687a      	ldr	r2, [r7, #4]
 8011e58:	6812      	ldr	r2, [r2, #0]
 8011e5a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	687a      	ldr	r2, [r7, #4]
 8011e62:	6852      	ldr	r2, [r2, #4]
 8011e64:	605a      	str	r2, [r3, #4]
 8011e66:	697b      	ldr	r3, [r7, #20]
 8011e68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	f383 8810 	msr	PRIMASK, r3
}
 8011e70:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011e72:	bf00      	nop
 8011e74:	371c      	adds	r7, #28
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8011e7e:	b580      	push	{r7, lr}
 8011e80:	b086      	sub	sp, #24
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
 8011e86:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e88:	f3ef 8310 	mrs	r3, PRIMASK
 8011e8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e8e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011e90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e92:	b672      	cpsid	i
}
 8011e94:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	681a      	ldr	r2, [r3, #0]
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7ff ffca 	bl	8011e3c <LST_remove_node>
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	f383 8810 	msr	PRIMASK, r3
}
 8011eb2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011eb4:	bf00      	nop
 8011eb6:	3718      	adds	r7, #24
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	bd80      	pop	{r7, pc}

08011ebc <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b08e      	sub	sp, #56	@ 0x38
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	60f8      	str	r0, [r7, #12]
 8011ec4:	60b9      	str	r1, [r7, #8]
 8011ec6:	603b      	str	r3, [r7, #0]
 8011ec8:	4613      	mov	r3, r2
 8011eca:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8011ecc:	2300      	movs	r3, #0
 8011ece:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8011ed0:	2300      	movs	r3, #0
 8011ed2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8011ed8:	2300      	movs	r3, #0
 8011eda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011edc:	2300      	movs	r3, #0
 8011ede:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	891b      	ldrh	r3, [r3, #8]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d101      	bne.n	8011ef4 <CircularQueue_Add+0x38>
 8011ef0:	2302      	movs	r3, #2
 8011ef2:	e000      	b.n	8011ef6 <CircularQueue_Add+0x3a>
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	695b      	ldr	r3, [r3, #20]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d029      	beq.n	8011f54 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	891b      	ldrh	r3, [r3, #8]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d122      	bne.n	8011f4e <CircularQueue_Add+0x92>
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	691b      	ldr	r3, [r3, #16]
 8011f10:	4413      	add	r3, r2
 8011f12:	781b      	ldrb	r3, [r3, #0]
 8011f14:	4618      	mov	r0, r3
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681a      	ldr	r2, [r3, #0]
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	691b      	ldr	r3, [r3, #16]
 8011f1e:	1c59      	adds	r1, r3, #1
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	4299      	cmp	r1, r3
 8011f26:	d306      	bcc.n	8011f36 <CircularQueue_Add+0x7a>
 8011f28:	68fb      	ldr	r3, [r7, #12]
 8011f2a:	6919      	ldr	r1, [r3, #16]
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	685b      	ldr	r3, [r3, #4]
 8011f30:	1acb      	subs	r3, r1, r3
 8011f32:	3301      	adds	r3, #1
 8011f34:	e002      	b.n	8011f3c <CircularQueue_Add+0x80>
 8011f36:	68fb      	ldr	r3, [r7, #12]
 8011f38:	691b      	ldr	r3, [r3, #16]
 8011f3a:	3301      	adds	r3, #1
 8011f3c:	4413      	add	r3, r2
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	021b      	lsls	r3, r3, #8
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	4403      	add	r3, r0
 8011f46:	b29b      	uxth	r3, r3
 8011f48:	3302      	adds	r3, #2
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	e001      	b.n	8011f52 <CircularQueue_Add+0x96>
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	891b      	ldrh	r3, [r3, #8]
 8011f52:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	891b      	ldrh	r3, [r3, #8]
 8011f58:	2b00      	cmp	r3, #0
 8011f5a:	d002      	beq.n	8011f62 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	891b      	ldrh	r3, [r3, #8]
 8011f60:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	691a      	ldr	r2, [r3, #16]
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	68db      	ldr	r3, [r3, #12]
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d307      	bcc.n	8011f7e <CircularQueue_Add+0xc2>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	685a      	ldr	r2, [r3, #4]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	6919      	ldr	r1, [r3, #16]
 8011f76:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011f78:	440b      	add	r3, r1
 8011f7a:	1ad3      	subs	r3, r2, r3
 8011f7c:	e000      	b.n	8011f80 <CircularQueue_Add+0xc4>
 8011f7e:	2300      	movs	r3, #0
 8011f80:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8011f82:	88fa      	ldrh	r2, [r7, #6]
 8011f84:	7ffb      	ldrb	r3, [r7, #31]
 8011f86:	4413      	add	r3, r2
 8011f88:	461a      	mov	r2, r3
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	fb02 f303 	mul.w	r3, r2, r3
 8011f90:	69ba      	ldr	r2, [r7, #24]
 8011f92:	429a      	cmp	r2, r3
 8011f94:	d80b      	bhi.n	8011fae <CircularQueue_Add+0xf2>
 8011f96:	88fa      	ldrh	r2, [r7, #6]
 8011f98:	7ffb      	ldrb	r3, [r7, #31]
 8011f9a:	4413      	add	r3, r2
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	69bb      	ldr	r3, [r7, #24]
 8011fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011fa4:	fb01 f202 	mul.w	r2, r1, r2
 8011fa8:	1a9b      	subs	r3, r3, r2
 8011faa:	b2db      	uxtb	r3, r3
 8011fac:	e000      	b.n	8011fb0 <CircularQueue_Add+0xf4>
 8011fae:	2300      	movs	r3, #0
 8011fb0:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8011fb2:	7dfa      	ldrb	r2, [r7, #23]
 8011fb4:	7ffb      	ldrb	r3, [r7, #31]
 8011fb6:	429a      	cmp	r2, r3
 8011fb8:	bf8c      	ite	hi
 8011fba:	2301      	movhi	r3, #1
 8011fbc:	2300      	movls	r3, #0
 8011fbe:	b2db      	uxtb	r3, r3
 8011fc0:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8011fc2:	7fbb      	ldrb	r3, [r7, #30]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d008      	beq.n	8011fda <CircularQueue_Add+0x11e>
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	7f1b      	ldrb	r3, [r3, #28]
 8011fcc:	f003 0301 	and.w	r3, r3, #1
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d002      	beq.n	8011fda <CircularQueue_Add+0x11e>
 8011fd4:	7dfb      	ldrb	r3, [r7, #23]
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	e000      	b.n	8011fdc <CircularQueue_Add+0x120>
 8011fda:	8bbb      	ldrh	r3, [r7, #28]
 8011fdc:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8011fde:	7fbb      	ldrb	r3, [r7, #30]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d008      	beq.n	8011ff6 <CircularQueue_Add+0x13a>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	7f1b      	ldrb	r3, [r3, #28]
 8011fe8:	f003 0302 	and.w	r3, r3, #2
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d002      	beq.n	8011ff6 <CircularQueue_Add+0x13a>
 8011ff0:	7ffb      	ldrb	r3, [r7, #31]
 8011ff2:	b29b      	uxth	r3, r3
 8011ff4:	e000      	b.n	8011ff8 <CircularQueue_Add+0x13c>
 8011ff6:	8bbb      	ldrh	r3, [r7, #28]
 8011ff8:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8011ffa:	88fb      	ldrh	r3, [r7, #6]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	f000 817e 	beq.w	80122fe <CircularQueue_Add+0x442>
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	695a      	ldr	r2, [r3, #20]
 8012006:	88f9      	ldrh	r1, [r7, #6]
 8012008:	7ffb      	ldrb	r3, [r7, #31]
 801200a:	440b      	add	r3, r1
 801200c:	4619      	mov	r1, r3
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	fb01 f303 	mul.w	r3, r1, r3
 8012014:	441a      	add	r2, r3
 8012016:	8bbb      	ldrh	r3, [r7, #28]
 8012018:	441a      	add	r2, r3
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	429a      	cmp	r2, r3
 8012020:	f200 816d 	bhi.w	80122fe <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8012024:	2300      	movs	r3, #0
 8012026:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012028:	e14a      	b.n	80122c0 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	691a      	ldr	r2, [r3, #16]
 801202e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012030:	441a      	add	r2, r3
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	429a      	cmp	r2, r3
 8012038:	d307      	bcc.n	801204a <CircularQueue_Add+0x18e>
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	691a      	ldr	r2, [r3, #16]
 801203e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012040:	441a      	add	r2, r3
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	685b      	ldr	r3, [r3, #4]
 8012046:	1ad3      	subs	r3, r2, r3
 8012048:	e003      	b.n	8012052 <CircularQueue_Add+0x196>
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	691a      	ldr	r2, [r3, #16]
 801204e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012050:	4413      	add	r3, r2
 8012052:	68fa      	ldr	r2, [r7, #12]
 8012054:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	691b      	ldr	r3, [r3, #16]
 801205a:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	891b      	ldrh	r3, [r3, #8]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d130      	bne.n	80120c6 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	681a      	ldr	r2, [r3, #0]
 8012068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801206a:	1c59      	adds	r1, r3, #1
 801206c:	6339      	str	r1, [r7, #48]	@ 0x30
 801206e:	4413      	add	r3, r2
 8012070:	88fa      	ldrh	r2, [r7, #6]
 8012072:	b2d2      	uxtb	r2, r2
 8012074:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	685b      	ldr	r3, [r3, #4]
 801207a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801207c:	429a      	cmp	r2, r3
 801207e:	d304      	bcc.n	801208a <CircularQueue_Add+0x1ce>
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012086:	1ad3      	subs	r3, r2, r3
 8012088:	e000      	b.n	801208c <CircularQueue_Add+0x1d0>
 801208a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801208c:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 801208e:	88fb      	ldrh	r3, [r7, #6]
 8012090:	0a1b      	lsrs	r3, r3, #8
 8012092:	b298      	uxth	r0, r3
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	681a      	ldr	r2, [r3, #0]
 8012098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801209a:	1c59      	adds	r1, r3, #1
 801209c:	6339      	str	r1, [r7, #48]	@ 0x30
 801209e:	4413      	add	r3, r2
 80120a0:	b2c2      	uxtb	r2, r0
 80120a2:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120aa:	429a      	cmp	r2, r3
 80120ac:	d304      	bcc.n	80120b8 <CircularQueue_Add+0x1fc>
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	685b      	ldr	r3, [r3, #4]
 80120b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80120b4:	1ad3      	subs	r3, r2, r3
 80120b6:	e000      	b.n	80120ba <CircularQueue_Add+0x1fe>
 80120b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ba:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	695b      	ldr	r3, [r3, #20]
 80120c0:	1c9a      	adds	r2, r3, #2
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 80120c6:	88fa      	ldrh	r2, [r7, #6]
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	6859      	ldr	r1, [r3, #4]
 80120cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ce:	1acb      	subs	r3, r1, r3
 80120d0:	4293      	cmp	r3, r2
 80120d2:	bf28      	it	cs
 80120d4:	4613      	movcs	r3, r2
 80120d6:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80120d8:	88fb      	ldrh	r3, [r7, #6]
 80120da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120dc:	429a      	cmp	r2, r3
 80120de:	d007      	beq.n	80120f0 <CircularQueue_Add+0x234>
 80120e0:	88fb      	ldrh	r3, [r7, #6]
 80120e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120e4:	429a      	cmp	r2, r3
 80120e6:	d225      	bcs.n	8012134 <CircularQueue_Add+0x278>
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	7f1b      	ldrb	r3, [r3, #28]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d121      	bne.n	8012134 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120f6:	18d0      	adds	r0, r2, r3
 80120f8:	88fb      	ldrh	r3, [r7, #6]
 80120fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80120fc:	fb02 f303 	mul.w	r3, r2, r3
 8012100:	68ba      	ldr	r2, [r7, #8]
 8012102:	4413      	add	r3, r2
 8012104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012106:	4619      	mov	r1, r3
 8012108:	f003 fe89 	bl	8015e1e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	695a      	ldr	r2, [r3, #20]
 8012110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012112:	441a      	add	r2, r3
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8012118:	2300      	movs	r3, #0
 801211a:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 801211c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801211e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012120:	88fa      	ldrh	r2, [r7, #6]
 8012122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012124:	1ad3      	subs	r3, r2, r3
 8012126:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8012128:	7ffb      	ldrb	r3, [r7, #31]
 801212a:	b29a      	uxth	r2, r3
 801212c:	88fb      	ldrh	r3, [r7, #6]
 801212e:	4413      	add	r3, r2
 8012130:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012132:	e0a4      	b.n	801227e <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012136:	2b00      	cmp	r3, #0
 8012138:	f000 80a1 	beq.w	801227e <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 801213c:	68fb      	ldr	r3, [r7, #12]
 801213e:	7f1b      	ldrb	r3, [r3, #28]
 8012140:	f003 0301 	and.w	r3, r3, #1
 8012144:	2b00      	cmp	r3, #0
 8012146:	d03a      	beq.n	80121be <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	891b      	ldrh	r3, [r3, #8]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d10d      	bne.n	801216c <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012156:	3b02      	subs	r3, #2
 8012158:	4413      	add	r3, r2
 801215a:	22ff      	movs	r2, #255	@ 0xff
 801215c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	681a      	ldr	r2, [r3, #0]
 8012162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012164:	3b01      	subs	r3, #1
 8012166:	4413      	add	r3, r2
 8012168:	22ff      	movs	r2, #255	@ 0xff
 801216a:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	695a      	ldr	r2, [r3, #20]
 8012170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012172:	441a      	add	r2, r3
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8012178:	2300      	movs	r3, #0
 801217a:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 801217c:	88fb      	ldrh	r3, [r7, #6]
 801217e:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012180:	2300      	movs	r3, #0
 8012182:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	891b      	ldrh	r3, [r3, #8]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d16f      	bne.n	801226c <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012192:	1c59      	adds	r1, r3, #1
 8012194:	6339      	str	r1, [r7, #48]	@ 0x30
 8012196:	4413      	add	r3, r2
 8012198:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801219a:	b2d2      	uxtb	r2, r2
 801219c:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801219e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a0:	0a18      	lsrs	r0, r3, #8
 80121a2:	68fb      	ldr	r3, [r7, #12]
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121a8:	1c59      	adds	r1, r3, #1
 80121aa:	6339      	str	r1, [r7, #48]	@ 0x30
 80121ac:	4413      	add	r3, r2
 80121ae:	b2c2      	uxtb	r2, r0
 80121b0:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	695b      	ldr	r3, [r3, #20]
 80121b6:	1c9a      	adds	r2, r3, #2
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	615a      	str	r2, [r3, #20]
 80121bc:	e056      	b.n	801226c <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 80121be:	68fb      	ldr	r3, [r7, #12]
 80121c0:	7f1b      	ldrb	r3, [r3, #28]
 80121c2:	f003 0302 	and.w	r3, r3, #2
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d050      	beq.n	801226c <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	891b      	ldrh	r3, [r3, #8]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d14a      	bne.n	8012268 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681a      	ldr	r2, [r3, #0]
 80121d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121d8:	3b02      	subs	r3, #2
 80121da:	4413      	add	r3, r2
 80121dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121de:	b2d2      	uxtb	r2, r2
 80121e0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80121e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e4:	0a19      	lsrs	r1, r3, #8
 80121e6:	68fb      	ldr	r3, [r7, #12]
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ec:	3b01      	subs	r3, #1
 80121ee:	4413      	add	r3, r2
 80121f0:	b2ca      	uxtb	r2, r1
 80121f2:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	681a      	ldr	r2, [r3, #0]
 80121f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121fa:	18d0      	adds	r0, r2, r3
 80121fc:	88fb      	ldrh	r3, [r7, #6]
 80121fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012200:	fb02 f303 	mul.w	r3, r2, r3
 8012204:	68ba      	ldr	r2, [r7, #8]
 8012206:	4413      	add	r3, r2
 8012208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801220a:	4619      	mov	r1, r3
 801220c:	f003 fe07 	bl	8015e1e <memcpy>
             q->byteCount += NbBytesToCopy; 
 8012210:	68fb      	ldr	r3, [r7, #12]
 8012212:	695a      	ldr	r2, [r3, #20]
 8012214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012216:	441a      	add	r2, r3
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 801221c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801221e:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8012220:	88fa      	ldrh	r2, [r7, #6]
 8012222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012224:	1ad3      	subs	r3, r2, r3
 8012226:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8012228:	68fb      	ldr	r3, [r7, #12]
 801222a:	699b      	ldr	r3, [r3, #24]
 801222c:	1c5a      	adds	r2, r3, #1
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8012232:	2300      	movs	r3, #0
 8012234:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	681a      	ldr	r2, [r3, #0]
 801223a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801223c:	1c59      	adds	r1, r3, #1
 801223e:	6339      	str	r1, [r7, #48]	@ 0x30
 8012240:	4413      	add	r3, r2
 8012242:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012244:	b2d2      	uxtb	r2, r2
 8012246:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801224a:	0a18      	lsrs	r0, r3, #8
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	681a      	ldr	r2, [r3, #0]
 8012250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012252:	1c59      	adds	r1, r3, #1
 8012254:	6339      	str	r1, [r7, #48]	@ 0x30
 8012256:	4413      	add	r3, r2
 8012258:	b2c2      	uxtb	r2, r0
 801225a:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	695b      	ldr	r3, [r3, #20]
 8012260:	1c9a      	adds	r2, r3, #2
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	615a      	str	r2, [r3, #20]
 8012266:	e001      	b.n	801226c <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8012268:	2300      	movs	r3, #0
 801226a:	e049      	b.n	8012300 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 801226c:	7ffb      	ldrb	r3, [r7, #31]
 801226e:	b29a      	uxth	r2, r3
 8012270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012272:	b29b      	uxth	r3, r3
 8012274:	4413      	add	r3, r2
 8012276:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	2200      	movs	r2, #0
 801227c:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 801227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012280:	2b00      	cmp	r3, #0
 8012282:	d015      	beq.n	80122b0 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801228a:	18d0      	adds	r0, r2, r3
 801228c:	88fb      	ldrh	r3, [r7, #6]
 801228e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012290:	fb03 f202 	mul.w	r2, r3, r2
 8012294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012296:	4413      	add	r3, r2
 8012298:	68ba      	ldr	r2, [r7, #8]
 801229a:	4413      	add	r3, r2
 801229c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801229e:	4619      	mov	r1, r3
 80122a0:	f003 fdbd 	bl	8015e1e <memcpy>
        q->byteCount += NbBytesToCopy;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	695a      	ldr	r2, [r3, #20]
 80122a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122aa:	441a      	add	r2, r3
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	1c5a      	adds	r2, r3, #1
 80122b6:	68fb      	ldr	r3, [r7, #12]
 80122b8:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 80122ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122bc:	3301      	adds	r3, #1
 80122be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80122c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	429a      	cmp	r2, r3
 80122c6:	f4ff aeb0 	bcc.w	801202a <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	681a      	ldr	r2, [r3, #0]
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	6919      	ldr	r1, [r3, #16]
 80122d2:	7ffb      	ldrb	r3, [r7, #31]
 80122d4:	4419      	add	r1, r3
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	685b      	ldr	r3, [r3, #4]
 80122da:	4299      	cmp	r1, r3
 80122dc:	d307      	bcc.n	80122ee <CircularQueue_Add+0x432>
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	6919      	ldr	r1, [r3, #16]
 80122e2:	7ffb      	ldrb	r3, [r7, #31]
 80122e4:	4419      	add	r1, r3
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	685b      	ldr	r3, [r3, #4]
 80122ea:	1acb      	subs	r3, r1, r3
 80122ec:	e003      	b.n	80122f6 <CircularQueue_Add+0x43a>
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	6919      	ldr	r1, [r3, #16]
 80122f2:	7ffb      	ldrb	r3, [r7, #31]
 80122f4:	440b      	add	r3, r1
 80122f6:	4413      	add	r3, r2
 80122f8:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80122fa:	6a3b      	ldr	r3, [r7, #32]
 80122fc:	e000      	b.n	8012300 <CircularQueue_Add+0x444>
    return NULL;
 80122fe:	2300      	movs	r3, #0
}
 8012300:	4618      	mov	r0, r3
 8012302:	3738      	adds	r7, #56	@ 0x38
 8012304:	46bd      	mov	sp, r7
 8012306:	bd80      	pop	{r7, pc}

08012308 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8012308:	b480      	push	{r7}
 801230a:	b085      	sub	sp, #20
 801230c:	af00      	add	r7, sp, #0
 801230e:	6078      	str	r0, [r7, #4]
 8012310:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8012316:	2300      	movs	r3, #0
 8012318:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	891b      	ldrh	r3, [r3, #8]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d101      	bne.n	8012326 <CircularQueue_Remove+0x1e>
 8012322:	2302      	movs	r3, #2
 8012324:	e000      	b.n	8012328 <CircularQueue_Remove+0x20>
 8012326:	2300      	movs	r3, #0
 8012328:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 801232a:	2300      	movs	r3, #0
 801232c:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	695b      	ldr	r3, [r3, #20]
 8012332:	2b00      	cmp	r3, #0
 8012334:	f000 80ca 	beq.w	80124cc <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	891b      	ldrh	r3, [r3, #8]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d120      	bne.n	8012382 <CircularQueue_Remove+0x7a>
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	681a      	ldr	r2, [r3, #0]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	68db      	ldr	r3, [r3, #12]
 8012348:	4413      	add	r3, r2
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	4618      	mov	r0, r3
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	68db      	ldr	r3, [r3, #12]
 8012356:	1c59      	adds	r1, r3, #1
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	685b      	ldr	r3, [r3, #4]
 801235c:	4299      	cmp	r1, r3
 801235e:	d306      	bcc.n	801236e <CircularQueue_Remove+0x66>
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	68d9      	ldr	r1, [r3, #12]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	685b      	ldr	r3, [r3, #4]
 8012368:	1acb      	subs	r3, r1, r3
 801236a:	3301      	adds	r3, #1
 801236c:	e002      	b.n	8012374 <CircularQueue_Remove+0x6c>
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	3301      	adds	r3, #1
 8012374:	4413      	add	r3, r2
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	021b      	lsls	r3, r3, #8
 801237a:	b29b      	uxth	r3, r3
 801237c:	4403      	add	r3, r0
 801237e:	b29b      	uxth	r3, r3
 8012380:	e001      	b.n	8012386 <CircularQueue_Remove+0x7e>
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	891b      	ldrh	r3, [r3, #8]
 8012386:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	7f1b      	ldrb	r3, [r3, #28]
 801238c:	f003 0301 	and.w	r3, r3, #1
 8012390:	2b00      	cmp	r3, #0
 8012392:	d056      	beq.n	8012442 <CircularQueue_Remove+0x13a>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	7f1b      	ldrb	r3, [r3, #28]
 8012398:	f003 0302 	and.w	r3, r3, #2
 801239c:	2b00      	cmp	r3, #0
 801239e:	d150      	bne.n	8012442 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80123a0:	897b      	ldrh	r3, [r7, #10]
 80123a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80123a6:	4293      	cmp	r3, r2
 80123a8:	d103      	bne.n	80123b2 <CircularQueue_Remove+0xaa>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	891b      	ldrh	r3, [r3, #8]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d012      	beq.n	80123d8 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	68da      	ldr	r2, [r3, #12]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80123ba:	429a      	cmp	r2, r3
 80123bc:	d941      	bls.n	8012442 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	891b      	ldrh	r3, [r3, #8]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d03d      	beq.n	8012442 <CircularQueue_Remove+0x13a>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	685a      	ldr	r2, [r3, #4]
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	68db      	ldr	r3, [r3, #12]
 80123ce:	1ad3      	subs	r3, r2, r3
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	8912      	ldrh	r2, [r2, #8]
 80123d4:	4293      	cmp	r3, r2
 80123d6:	d234      	bcs.n	8012442 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	695a      	ldr	r2, [r3, #20]
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	68d9      	ldr	r1, [r3, #12]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	685b      	ldr	r3, [r3, #4]
 80123e4:	1acb      	subs	r3, r1, r3
 80123e6:	441a      	add	r2, r3
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	891b      	ldrh	r3, [r3, #8]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	d120      	bne.n	801243c <CircularQueue_Remove+0x134>
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	681a      	ldr	r2, [r3, #0]
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	68db      	ldr	r3, [r3, #12]
 8012402:	4413      	add	r3, r2
 8012404:	781b      	ldrb	r3, [r3, #0]
 8012406:	4618      	mov	r0, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	681a      	ldr	r2, [r3, #0]
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	1c59      	adds	r1, r3, #1
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	685b      	ldr	r3, [r3, #4]
 8012416:	4299      	cmp	r1, r3
 8012418:	d306      	bcc.n	8012428 <CircularQueue_Remove+0x120>
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	68d9      	ldr	r1, [r3, #12]
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	685b      	ldr	r3, [r3, #4]
 8012422:	1acb      	subs	r3, r1, r3
 8012424:	3301      	adds	r3, #1
 8012426:	e002      	b.n	801242e <CircularQueue_Remove+0x126>
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	68db      	ldr	r3, [r3, #12]
 801242c:	3301      	adds	r3, #1
 801242e:	4413      	add	r3, r2
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	021b      	lsls	r3, r3, #8
 8012434:	b29b      	uxth	r3, r3
 8012436:	4403      	add	r3, r0
 8012438:	b29b      	uxth	r3, r3
 801243a:	e001      	b.n	8012440 <CircularQueue_Remove+0x138>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	891b      	ldrh	r3, [r3, #8]
 8012440:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	681a      	ldr	r2, [r3, #0]
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	68d9      	ldr	r1, [r3, #12]
 801244a:	7a7b      	ldrb	r3, [r7, #9]
 801244c:	4419      	add	r1, r3
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	685b      	ldr	r3, [r3, #4]
 8012452:	4299      	cmp	r1, r3
 8012454:	d307      	bcc.n	8012466 <CircularQueue_Remove+0x15e>
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	68d9      	ldr	r1, [r3, #12]
 801245a:	7a7b      	ldrb	r3, [r7, #9]
 801245c:	4419      	add	r1, r3
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	685b      	ldr	r3, [r3, #4]
 8012462:	1acb      	subs	r3, r1, r3
 8012464:	e003      	b.n	801246e <CircularQueue_Remove+0x166>
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	68d9      	ldr	r1, [r3, #12]
 801246a:	7a7b      	ldrb	r3, [r7, #9]
 801246c:	440b      	add	r3, r1
 801246e:	4413      	add	r3, r2
 8012470:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	695b      	ldr	r3, [r3, #20]
 8012476:	8979      	ldrh	r1, [r7, #10]
 8012478:	7a7a      	ldrb	r2, [r7, #9]
 801247a:	440a      	add	r2, r1
 801247c:	1a9a      	subs	r2, r3, r2
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	695b      	ldr	r3, [r3, #20]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d01b      	beq.n	80124c2 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	68da      	ldr	r2, [r3, #12]
 801248e:	897b      	ldrh	r3, [r7, #10]
 8012490:	441a      	add	r2, r3
 8012492:	7a7b      	ldrb	r3, [r7, #9]
 8012494:	441a      	add	r2, r3
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	685b      	ldr	r3, [r3, #4]
 801249a:	429a      	cmp	r2, r3
 801249c:	d309      	bcc.n	80124b2 <CircularQueue_Remove+0x1aa>
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	68da      	ldr	r2, [r3, #12]
 80124a2:	897b      	ldrh	r3, [r7, #10]
 80124a4:	441a      	add	r2, r3
 80124a6:	7a7b      	ldrb	r3, [r7, #9]
 80124a8:	441a      	add	r2, r3
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	1ad3      	subs	r3, r2, r3
 80124b0:	e005      	b.n	80124be <CircularQueue_Remove+0x1b6>
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	68da      	ldr	r2, [r3, #12]
 80124b6:	897b      	ldrh	r3, [r7, #10]
 80124b8:	441a      	add	r2, r3
 80124ba:	7a7b      	ldrb	r3, [r7, #9]
 80124bc:	4413      	add	r3, r2
 80124be:	687a      	ldr	r2, [r7, #4]
 80124c0:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	699b      	ldr	r3, [r3, #24]
 80124c6:	1e5a      	subs	r2, r3, #1
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d002      	beq.n	80124d8 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 80124d2:	683b      	ldr	r3, [r7, #0]
 80124d4:	897a      	ldrh	r2, [r7, #10]
 80124d6:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80124d8:	68fb      	ldr	r3, [r7, #12]
}
 80124da:	4618      	mov	r0, r3
 80124dc:	3714      	adds	r7, #20
 80124de:	46bd      	mov	sp, r7
 80124e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e4:	4770      	bx	lr

080124e6 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80124e6:	b480      	push	{r7}
 80124e8:	b087      	sub	sp, #28
 80124ea:	af00      	add	r7, sp, #0
 80124ec:	6078      	str	r0, [r7, #4]
 80124ee:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80124f0:	2300      	movs	r3, #0
 80124f2:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80124f4:	2300      	movs	r3, #0
 80124f6:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	891b      	ldrh	r3, [r3, #8]
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d101      	bne.n	8012504 <CircularQueue_Sense+0x1e>
 8012500:	2302      	movs	r3, #2
 8012502:	e000      	b.n	8012506 <CircularQueue_Sense+0x20>
 8012504:	2300      	movs	r3, #0
 8012506:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8012508:	2300      	movs	r3, #0
 801250a:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 801250c:	2300      	movs	r3, #0
 801250e:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	695b      	ldr	r3, [r3, #20]
 8012514:	2b00      	cmp	r3, #0
 8012516:	f000 808e 	beq.w	8012636 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	68db      	ldr	r3, [r3, #12]
 801251e:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	891b      	ldrh	r3, [r3, #8]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d120      	bne.n	801256a <CircularQueue_Sense+0x84>
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	681a      	ldr	r2, [r3, #0]
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	4413      	add	r3, r2
 8012532:	781b      	ldrb	r3, [r3, #0]
 8012534:	4618      	mov	r0, r3
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681a      	ldr	r2, [r3, #0]
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	1c59      	adds	r1, r3, #1
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	4299      	cmp	r1, r3
 8012546:	d306      	bcc.n	8012556 <CircularQueue_Sense+0x70>
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	68d9      	ldr	r1, [r3, #12]
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	685b      	ldr	r3, [r3, #4]
 8012550:	1acb      	subs	r3, r1, r3
 8012552:	3301      	adds	r3, #1
 8012554:	e002      	b.n	801255c <CircularQueue_Sense+0x76>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	68db      	ldr	r3, [r3, #12]
 801255a:	3301      	adds	r3, #1
 801255c:	4413      	add	r3, r2
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	021b      	lsls	r3, r3, #8
 8012562:	b29b      	uxth	r3, r3
 8012564:	4403      	add	r3, r0
 8012566:	b29b      	uxth	r3, r3
 8012568:	e001      	b.n	801256e <CircularQueue_Sense+0x88>
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	891b      	ldrh	r3, [r3, #8]
 801256e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	7f1b      	ldrb	r3, [r3, #28]
 8012574:	f003 0301 	and.w	r3, r3, #1
 8012578:	2b00      	cmp	r3, #0
 801257a:	d047      	beq.n	801260c <CircularQueue_Sense+0x126>
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	7f1b      	ldrb	r3, [r3, #28]
 8012580:	f003 0302 	and.w	r3, r3, #2
 8012584:	2b00      	cmp	r3, #0
 8012586:	d141      	bne.n	801260c <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012588:	8a7b      	ldrh	r3, [r7, #18]
 801258a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801258e:	4293      	cmp	r3, r2
 8012590:	d103      	bne.n	801259a <CircularQueue_Sense+0xb4>
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	891b      	ldrh	r3, [r3, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d012      	beq.n	80125c0 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	68da      	ldr	r2, [r3, #12]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d932      	bls.n	801260c <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	891b      	ldrh	r3, [r3, #8]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d02e      	beq.n	801260c <CircularQueue_Sense+0x126>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	685a      	ldr	r2, [r3, #4]
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	1ad3      	subs	r3, r2, r3
 80125b8:	687a      	ldr	r2, [r7, #4]
 80125ba:	8912      	ldrh	r2, [r2, #8]
 80125bc:	4293      	cmp	r3, r2
 80125be:	d225      	bcs.n	801260c <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 80125c0:	2300      	movs	r3, #0
 80125c2:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	891b      	ldrh	r3, [r3, #8]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d11c      	bne.n	8012606 <CircularQueue_Sense+0x120>
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	681a      	ldr	r2, [r3, #0]
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	4413      	add	r3, r2
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	4618      	mov	r0, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681a      	ldr	r2, [r3, #0]
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	1c59      	adds	r1, r3, #1
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	685b      	ldr	r3, [r3, #4]
 80125e4:	4299      	cmp	r1, r3
 80125e6:	d305      	bcc.n	80125f4 <CircularQueue_Sense+0x10e>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	685b      	ldr	r3, [r3, #4]
 80125ec:	68f9      	ldr	r1, [r7, #12]
 80125ee:	1acb      	subs	r3, r1, r3
 80125f0:	3301      	adds	r3, #1
 80125f2:	e001      	b.n	80125f8 <CircularQueue_Sense+0x112>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	3301      	adds	r3, #1
 80125f8:	4413      	add	r3, r2
 80125fa:	781b      	ldrb	r3, [r3, #0]
 80125fc:	021b      	lsls	r3, r3, #8
 80125fe:	b29b      	uxth	r3, r3
 8012600:	4403      	add	r3, r0
 8012602:	b29b      	uxth	r3, r3
 8012604:	e001      	b.n	801260a <CircularQueue_Sense+0x124>
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	891b      	ldrh	r3, [r3, #8]
 801260a:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681a      	ldr	r2, [r3, #0]
 8012610:	7af9      	ldrb	r1, [r7, #11]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	4419      	add	r1, r3
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	685b      	ldr	r3, [r3, #4]
 801261a:	4299      	cmp	r1, r3
 801261c:	d306      	bcc.n	801262c <CircularQueue_Sense+0x146>
 801261e:	7af9      	ldrb	r1, [r7, #11]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	4419      	add	r1, r3
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	1acb      	subs	r3, r1, r3
 801262a:	e002      	b.n	8012632 <CircularQueue_Sense+0x14c>
 801262c:	7af9      	ldrb	r1, [r7, #11]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	440b      	add	r3, r1
 8012632:	4413      	add	r3, r2
 8012634:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8012636:	683b      	ldr	r3, [r7, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d002      	beq.n	8012642 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 801263c:	683b      	ldr	r3, [r7, #0]
 801263e:	8a7a      	ldrh	r2, [r7, #18]
 8012640:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8012642:	697b      	ldr	r3, [r7, #20]
}
 8012644:	4618      	mov	r0, r3
 8012646:	371c      	adds	r7, #28
 8012648:	46bd      	mov	sp, r7
 801264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264e:	4770      	bx	lr

08012650 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012650:	b480      	push	{r7}
 8012652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012654:	4b03      	ldr	r3, [pc, #12]	@ (8012664 <LL_FLASH_GetUDN+0x14>)
 8012656:	681b      	ldr	r3, [r3, #0]
}
 8012658:	4618      	mov	r0, r3
 801265a:	46bd      	mov	sp, r7
 801265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	1fff7580 	.word	0x1fff7580

08012668 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8012668:	b480      	push	{r7}
 801266a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 801266c:	4b03      	ldr	r3, [pc, #12]	@ (801267c <LL_FLASH_GetDeviceID+0x14>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	b2db      	uxtb	r3, r3
}
 8012672:	4618      	mov	r0, r3
 8012674:	46bd      	mov	sp, r7
 8012676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267a:	4770      	bx	lr
 801267c:	1fff7584 	.word	0x1fff7584

08012680 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8012680:	b480      	push	{r7}
 8012682:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8012684:	4b03      	ldr	r3, [pc, #12]	@ (8012694 <LL_FLASH_GetSTCompanyID+0x14>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	0a1b      	lsrs	r3, r3, #8
}
 801268a:	4618      	mov	r0, r3
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr
 8012694:	1fff7584 	.word	0x1fff7584

08012698 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8012698:	b5b0      	push	{r4, r5, r7, lr}
 801269a:	b090      	sub	sp, #64	@ 0x40
 801269c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801269e:	2392      	movs	r3, #146	@ 0x92
 80126a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ALL_TASK, UTIL_SEQ_RFU, ALL_SENs_Task);
 80126a4:	4a4d      	ldr	r2, [pc, #308]	@ (80127dc <APP_BLE_Init+0x144>)
 80126a6:	2100      	movs	r1, #0
 80126a8:	2020      	movs	r0, #32
 80126aa:	f002 ff8d 	bl	80155c8 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ACC_TASK, UTIL_SEQ_RFU, ACCEL_Task);
 80126ae:	4a4c      	ldr	r2, [pc, #304]	@ (80127e0 <APP_BLE_Init+0x148>)
 80126b0:	2100      	movs	r1, #0
 80126b2:	2008      	movs	r0, #8
 80126b4:	f002 ff88 	bl	80155c8 <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80126b8:	4b4a      	ldr	r3, [pc, #296]	@ (80127e4 <APP_BLE_Init+0x14c>)
 80126ba:	1d3c      	adds	r4, r7, #4
 80126bc:	461d      	mov	r5, r3
 80126be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80126ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80126ce:	c403      	stmia	r4!, {r0, r1}
 80126d0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80126d2:	f000 fba3 	bl	8012e1c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80126d6:	2101      	movs	r1, #1
 80126d8:	2002      	movs	r0, #2
 80126da:	f002 fe49 	bl	8015370 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80126de:	4a42      	ldr	r2, [pc, #264]	@ (80127e8 <APP_BLE_Init+0x150>)
 80126e0:	2100      	movs	r1, #0
 80126e2:	2004      	movs	r0, #4
 80126e4:	f002 ff70 	bl	80155c8 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80126e8:	1d3b      	adds	r3, r7, #4
 80126ea:	4618      	mov	r0, r3
 80126ec:	f7fe fc2a 	bl	8010f44 <SHCI_C2_BLE_Init>
 80126f0:	4603      	mov	r3, r0
 80126f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80126f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d012      	beq.n	8012724 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80126fe:	483b      	ldr	r0, [pc, #236]	@ (80127ec <APP_BLE_Init+0x154>)
 8012700:	f7ff fa2e 	bl	8011b60 <DbgTraceGetFileName>
 8012704:	4601      	mov	r1, r0
 8012706:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 801270a:	4a39      	ldr	r2, [pc, #228]	@ (80127f0 <APP_BLE_Init+0x158>)
 801270c:	4839      	ldr	r0, [pc, #228]	@ (80127f4 <APP_BLE_Init+0x15c>)
 801270e:	f003 f95b 	bl	80159c8 <iprintf>
 8012712:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8012716:	4619      	mov	r1, r3
 8012718:	4837      	ldr	r0, [pc, #220]	@ (80127f8 <APP_BLE_Init+0x160>)
 801271a:	f003 f955 	bl	80159c8 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801271e:	f7f1 fa93 	bl	8003c48 <Error_Handler>
 8012722:	e00c      	b.n	801273e <APP_BLE_Init+0xa6>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8012724:	4831      	ldr	r0, [pc, #196]	@ (80127ec <APP_BLE_Init+0x154>)
 8012726:	f7ff fa1b 	bl	8011b60 <DbgTraceGetFileName>
 801272a:	4601      	mov	r1, r0
 801272c:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 8012730:	4a2f      	ldr	r2, [pc, #188]	@ (80127f0 <APP_BLE_Init+0x158>)
 8012732:	4830      	ldr	r0, [pc, #192]	@ (80127f4 <APP_BLE_Init+0x15c>)
 8012734:	f003 f948 	bl	80159c8 <iprintf>
 8012738:	4830      	ldr	r0, [pc, #192]	@ (80127fc <APP_BLE_Init+0x164>)
 801273a:	f003 f945 	bl	80159c8 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 801273e:	f000 fb83 	bl	8012e48 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8012742:	f7fe fb59 	bl	8010df8 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012746:	4b2e      	ldr	r3, [pc, #184]	@ (8012800 <APP_BLE_Init+0x168>)
 8012748:	2200      	movs	r2, #0
 801274a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801274e:	4b2c      	ldr	r3, [pc, #176]	@ (8012800 <APP_BLE_Init+0x168>)
 8012750:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012754:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8012756:	4a2b      	ldr	r2, [pc, #172]	@ (8012804 <APP_BLE_Init+0x16c>)
 8012758:	2100      	movs	r1, #0
 801275a:	2001      	movs	r0, #1
 801275c:	f002 ff34 	bl	80155c8 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8012760:	2006      	movs	r0, #6
 8012762:	f7fe f91e 	bl	80109a2 <aci_hal_set_radio_activity_mask>
 8012766:	4603      	mov	r3, r0
 8012768:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 801276c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012770:	2b00      	cmp	r3, #0
 8012772:	d010      	beq.n	8012796 <APP_BLE_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8012774:	481d      	ldr	r0, [pc, #116]	@ (80127ec <APP_BLE_Init+0x154>)
 8012776:	f7ff f9f3 	bl	8011b60 <DbgTraceGetFileName>
 801277a:	4601      	mov	r1, r0
 801277c:	f44f 73c3 	mov.w	r3, #390	@ 0x186
 8012780:	4a1b      	ldr	r2, [pc, #108]	@ (80127f0 <APP_BLE_Init+0x158>)
 8012782:	481c      	ldr	r0, [pc, #112]	@ (80127f4 <APP_BLE_Init+0x15c>)
 8012784:	f003 f920 	bl	80159c8 <iprintf>
 8012788:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801278c:	4619      	mov	r1, r3
 801278e:	481e      	ldr	r0, [pc, #120]	@ (8012808 <APP_BLE_Init+0x170>)
 8012790:	f003 f91a 	bl	80159c8 <iprintf>
 8012794:	e00c      	b.n	80127b0 <APP_BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8012796:	4815      	ldr	r0, [pc, #84]	@ (80127ec <APP_BLE_Init+0x154>)
 8012798:	f7ff f9e2 	bl	8011b60 <DbgTraceGetFileName>
 801279c:	4601      	mov	r1, r0
 801279e:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 80127a2:	4a13      	ldr	r2, [pc, #76]	@ (80127f0 <APP_BLE_Init+0x158>)
 80127a4:	4813      	ldr	r0, [pc, #76]	@ (80127f4 <APP_BLE_Init+0x15c>)
 80127a6:	f003 f90f 	bl	80159c8 <iprintf>
 80127aa:	4818      	ldr	r0, [pc, #96]	@ (801280c <APP_BLE_Init+0x174>)
 80127ac:	f003 f90c 	bl	80159c8 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 80127b0:	4b17      	ldr	r3, [pc, #92]	@ (8012810 <APP_BLE_Init+0x178>)
 80127b2:	2200      	movs	r2, #0
 80127b4:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80127b6:	4b17      	ldr	r3, [pc, #92]	@ (8012814 <APP_BLE_Init+0x17c>)
 80127b8:	2201      	movs	r2, #1
 80127ba:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80127bc:	f001 f8b0 	bl	8013920 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80127c0:	4b0f      	ldr	r3, [pc, #60]	@ (8012800 <APP_BLE_Init+0x168>)
 80127c2:	2200      	movs	r2, #0
 80127c4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80127c6:	4b0e      	ldr	r3, [pc, #56]	@ (8012800 <APP_BLE_Init+0x168>)
 80127c8:	2200      	movs	r2, #0
 80127ca:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80127cc:	2001      	movs	r0, #1
 80127ce:	f000 fdcf 	bl	8013370 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80127d2:	bf00      	nop
}
 80127d4:	3740      	adds	r7, #64	@ 0x40
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bdb0      	pop	{r4, r5, r7, pc}
 80127da:	bf00      	nop
 80127dc:	08013815 	.word	0x08013815
 80127e0:	0801383d 	.word	0x0801383d
 80127e4:	08017238 	.word	0x08017238
 80127e8:	08011161 	.word	0x08011161
 80127ec:	0801712c 	.word	0x0801712c
 80127f0:	08018858 	.word	0x08018858
 80127f4:	08017148 	.word	0x08017148
 80127f8:	0801715c 	.word	0x0801715c
 80127fc:	08017194 	.word	0x08017194
 8012800:	20001208 	.word	0x20001208
 8012804:	080134f5 	.word	0x080134f5
 8012808:	080171bc 	.word	0x080171bc
 801280c:	08017200 	.word	0x08017200
 8012810:	20001290 	.word	0x20001290
 8012814:	20001291 	.word	0x20001291

08012818 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8012818:	b5b0      	push	{r4, r5, r7, lr}
 801281a:	b08e      	sub	sp, #56	@ 0x38
 801281c:	af04      	add	r7, sp, #16
 801281e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8012820:	2392      	movs	r3, #146	@ 0x92
 8012822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	3301      	adds	r3, #1
 801282a:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 801282c:	6a3b      	ldr	r3, [r7, #32]
 801282e:	781b      	ldrb	r3, [r3, #0]
 8012830:	2bff      	cmp	r3, #255	@ 0xff
 8012832:	f000 8173 	beq.w	8012b1c <SVCCTL_App_Notification+0x304>
 8012836:	2bff      	cmp	r3, #255	@ 0xff
 8012838:	f300 82c0 	bgt.w	8012dbc <SVCCTL_App_Notification+0x5a4>
 801283c:	2b05      	cmp	r3, #5
 801283e:	d002      	beq.n	8012846 <SVCCTL_App_Notification+0x2e>
 8012840:	2b3e      	cmp	r3, #62	@ 0x3e
 8012842:	d04a      	beq.n	80128da <SVCCTL_App_Notification+0xc2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8012844:	e2ba      	b.n	8012dbc <SVCCTL_App_Notification+0x5a4>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8012846:	6a3b      	ldr	r3, [r7, #32]
 8012848:	3302      	adds	r3, #2
 801284a:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012852:	b29a      	uxth	r2, r3
 8012854:	4ba1      	ldr	r3, [pc, #644]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 8012856:	8adb      	ldrh	r3, [r3, #22]
 8012858:	429a      	cmp	r2, r3
 801285a:	d12d      	bne.n	80128b8 <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 801285c:	4b9f      	ldr	r3, [pc, #636]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 801285e:	2200      	movs	r2, #0
 8012860:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012862:	4b9e      	ldr	r3, [pc, #632]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 8012864:	2200      	movs	r2, #0
 8012866:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 801286a:	489d      	ldr	r0, [pc, #628]	@ (8012ae0 <SVCCTL_App_Notification+0x2c8>)
 801286c:	f7ff f978 	bl	8011b60 <DbgTraceGetFileName>
 8012870:	4601      	mov	r1, r0
 8012872:	f44f 73e7 	mov.w	r3, #462	@ 0x1ce
 8012876:	4a9b      	ldr	r2, [pc, #620]	@ (8012ae4 <SVCCTL_App_Notification+0x2cc>)
 8012878:	489b      	ldr	r0, [pc, #620]	@ (8012ae8 <SVCCTL_App_Notification+0x2d0>)
 801287a:	f003 f8a5 	bl	80159c8 <iprintf>
 801287e:	489b      	ldr	r0, [pc, #620]	@ (8012aec <SVCCTL_App_Notification+0x2d4>)
 8012880:	f003 f912 	bl	8015aa8 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8012884:	4896      	ldr	r0, [pc, #600]	@ (8012ae0 <SVCCTL_App_Notification+0x2c8>)
 8012886:	f7ff f96b 	bl	8011b60 <DbgTraceGetFileName>
 801288a:	4601      	mov	r1, r0
 801288c:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8012890:	4a94      	ldr	r2, [pc, #592]	@ (8012ae4 <SVCCTL_App_Notification+0x2cc>)
 8012892:	4895      	ldr	r0, [pc, #596]	@ (8012ae8 <SVCCTL_App_Notification+0x2d0>)
 8012894:	f003 f898 	bl	80159c8 <iprintf>
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801289e:	b29b      	uxth	r3, r3
 80128a0:	4619      	mov	r1, r3
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	78db      	ldrb	r3, [r3, #3]
 80128a6:	461a      	mov	r2, r3
 80128a8:	4891      	ldr	r0, [pc, #580]	@ (8012af0 <SVCCTL_App_Notification+0x2d8>)
 80128aa:	f003 f88d 	bl	80159c8 <iprintf>
        tsBle.Connected = false;
 80128ae:	4b91      	ldr	r3, [pc, #580]	@ (8012af4 <SVCCTL_App_Notification+0x2dc>)
 80128b0:	2200      	movs	r2, #0
 80128b2:	701a      	strb	r2, [r3, #0]
			APP_BLE_Init();
 80128b4:	f7ff fef0 	bl	8012698 <APP_BLE_Init>
      Adv_Request(APP_BLE_FAST_ADV);
 80128b8:	2001      	movs	r0, #1
 80128ba:	f000 fd59 	bl	8013370 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80128be:	4b8e      	ldr	r3, [pc, #568]	@ (8012af8 <SVCCTL_App_Notification+0x2e0>)
 80128c0:	2201      	movs	r2, #1
 80128c2:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80128c4:	4b85      	ldr	r3, [pc, #532]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 80128c6:	8ada      	ldrh	r2, [r3, #22]
 80128c8:	4b8b      	ldr	r3, [pc, #556]	@ (8012af8 <SVCCTL_App_Notification+0x2e0>)
 80128ca:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80128cc:	488a      	ldr	r0, [pc, #552]	@ (8012af8 <SVCCTL_App_Notification+0x2e0>)
 80128ce:	f001 f813 	bl	80138f8 <Custom_APP_Notification>
      tsCmd.LED = false;
 80128d2:	4b8a      	ldr	r3, [pc, #552]	@ (8012afc <SVCCTL_App_Notification+0x2e4>)
 80128d4:	2200      	movs	r2, #0
 80128d6:	75da      	strb	r2, [r3, #23]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80128d8:	e273      	b.n	8012dc2 <SVCCTL_App_Notification+0x5aa>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80128da:	6a3b      	ldr	r3, [r7, #32]
 80128dc:	3302      	adds	r3, #2
 80128de:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b01      	cmp	r3, #1
 80128e6:	d06c      	beq.n	80129c2 <SVCCTL_App_Notification+0x1aa>
 80128e8:	2b03      	cmp	r3, #3
 80128ea:	f040 80f4 	bne.w	8012ad6 <SVCCTL_App_Notification+0x2be>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	3301      	adds	r3, #1
 80128f2:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80128f4:	487a      	ldr	r0, [pc, #488]	@ (8012ae0 <SVCCTL_App_Notification+0x2c8>)
 80128f6:	f7ff f933 	bl	8011b60 <DbgTraceGetFileName>
 80128fa:	4601      	mov	r1, r0
 80128fc:	f240 2303 	movw	r3, #515	@ 0x203
 8012900:	4a78      	ldr	r2, [pc, #480]	@ (8012ae4 <SVCCTL_App_Notification+0x2cc>)
 8012902:	4879      	ldr	r0, [pc, #484]	@ (8012ae8 <SVCCTL_App_Notification+0x2d0>)
 8012904:	f003 f860 	bl	80159c8 <iprintf>
 8012908:	487d      	ldr	r0, [pc, #500]	@ (8012b00 <SVCCTL_App_Notification+0x2e8>)
 801290a:	f003 f8cd 	bl	8015aa8 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 801290e:	4874      	ldr	r0, [pc, #464]	@ (8012ae0 <SVCCTL_App_Notification+0x2c8>)
 8012910:	f7ff f926 	bl	8011b60 <DbgTraceGetFileName>
 8012914:	4601      	mov	r1, r0
 8012916:	f44f 7301 	mov.w	r3, #516	@ 0x204
 801291a:	4a72      	ldr	r2, [pc, #456]	@ (8012ae4 <SVCCTL_App_Notification+0x2cc>)
 801291c:	4872      	ldr	r0, [pc, #456]	@ (8012ae8 <SVCCTL_App_Notification+0x2d0>)
 801291e:	f003 f853 	bl	80159c8 <iprintf>
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012928:	b29b      	uxth	r3, r3
 801292a:	4618      	mov	r0, r3
 801292c:	f7ed fdd2 	bl	80004d4 <__aeabi_i2d>
 8012930:	f04f 0200 	mov.w	r2, #0
 8012934:	4b73      	ldr	r3, [pc, #460]	@ (8012b04 <SVCCTL_App_Notification+0x2ec>)
 8012936:	f7ed fe37 	bl	80005a8 <__aeabi_dmul>
 801293a:	4602      	mov	r2, r0
 801293c:	460b      	mov	r3, r1
 801293e:	4610      	mov	r0, r2
 8012940:	4619      	mov	r1, r3
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8012948:	b29b      	uxth	r3, r3
 801294a:	461c      	mov	r4, r3
 801294c:	693b      	ldr	r3, [r7, #16]
 801294e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8012952:	b29b      	uxth	r3, r3
 8012954:	461a      	mov	r2, r3
 8012956:	4613      	mov	r3, r2
 8012958:	009b      	lsls	r3, r3, #2
 801295a:	4413      	add	r3, r2
 801295c:	005b      	lsls	r3, r3, #1
 801295e:	9301      	str	r3, [sp, #4]
 8012960:	9400      	str	r4, [sp, #0]
 8012962:	4602      	mov	r2, r0
 8012964:	460b      	mov	r3, r1
 8012966:	4868      	ldr	r0, [pc, #416]	@ (8012b08 <SVCCTL_App_Notification+0x2f0>)
 8012968:	f003 f82e 	bl	80159c8 <iprintf>
          DIAG(" BLE Debug ->\t>>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 801296c:	4867      	ldr	r0, [pc, #412]	@ (8012b0c <SVCCTL_App_Notification+0x2f4>)
 801296e:	f7ef fd8b 	bl	8002488 <DIAG>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8012972:	693b      	ldr	r3, [r7, #16]
 8012974:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012978:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801297a:	4618      	mov	r0, r3
 801297c:	f7ed fdaa 	bl	80004d4 <__aeabi_i2d>
 8012980:	f04f 0200 	mov.w	r2, #0
 8012984:	4b5f      	ldr	r3, [pc, #380]	@ (8012b04 <SVCCTL_App_Notification+0x2ec>)
 8012986:	f7ed fe0f 	bl	80005a8 <__aeabi_dmul>
 801298a:	4602      	mov	r2, r0
 801298c:	460b      	mov	r3, r1
 801298e:	4610      	mov	r0, r2
 8012990:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8012998:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801299a:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 801299c:	693b      	ldr	r3, [r7, #16]
 801299e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	461a      	mov	r2, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 80129a6:	4613      	mov	r3, r2
 80129a8:	009b      	lsls	r3, r3, #2
 80129aa:	4413      	add	r3, r2
 80129ac:	005b      	lsls	r3, r3, #1
 80129ae:	9301      	str	r3, [sp, #4]
 80129b0:	9400      	str	r4, [sp, #0]
 80129b2:	4602      	mov	r2, r0
 80129b4:	460b      	mov	r3, r1
 80129b6:	4856      	ldr	r0, [pc, #344]	@ (8012b10 <SVCCTL_App_Notification+0x2f8>)
 80129b8:	f7ef fd66 	bl	8002488 <DIAG>
          Connection_Interval_Update_Req();
 80129bc:	f000 feba 	bl	8013734 <Connection_Interval_Update_Req>
          break;
 80129c0:	e08a      	b.n	8012ad8 <SVCCTL_App_Notification+0x2c0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	3301      	adds	r3, #1
 80129c6:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 80129c8:	4845      	ldr	r0, [pc, #276]	@ (8012ae0 <SVCCTL_App_Notification+0x2c8>)
 80129ca:	f7ff f8c9 	bl	8011b60 <DbgTraceGetFileName>
 80129ce:	4601      	mov	r1, r0
 80129d0:	f240 231f 	movw	r3, #543	@ 0x21f
 80129d4:	4a43      	ldr	r2, [pc, #268]	@ (8012ae4 <SVCCTL_App_Notification+0x2cc>)
 80129d6:	4844      	ldr	r0, [pc, #272]	@ (8012ae8 <SVCCTL_App_Notification+0x2d0>)
 80129d8:	f002 fff6 	bl	80159c8 <iprintf>
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80129e2:	b29b      	uxth	r3, r3
 80129e4:	4619      	mov	r1, r3
 80129e6:	484b      	ldr	r0, [pc, #300]	@ (8012b14 <SVCCTL_App_Notification+0x2fc>)
 80129e8:	f002 ffee 	bl	80159c8 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80129ec:	483c      	ldr	r0, [pc, #240]	@ (8012ae0 <SVCCTL_App_Notification+0x2c8>)
 80129ee:	f7ff f8b7 	bl	8011b60 <DbgTraceGetFileName>
 80129f2:	4601      	mov	r1, r0
 80129f4:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80129f8:	4a3a      	ldr	r2, [pc, #232]	@ (8012ae4 <SVCCTL_App_Notification+0x2cc>)
 80129fa:	483b      	ldr	r0, [pc, #236]	@ (8012ae8 <SVCCTL_App_Notification+0x2d0>)
 80129fc:	f002 ffe4 	bl	80159c8 <iprintf>
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	7a9b      	ldrb	r3, [r3, #10]
 8012a04:	4618      	mov	r0, r3
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	7a5b      	ldrb	r3, [r3, #9]
 8012a0a:	461c      	mov	r4, r3
 8012a0c:	68fb      	ldr	r3, [r7, #12]
 8012a0e:	7a1b      	ldrb	r3, [r3, #8]
 8012a10:	461d      	mov	r5, r3
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	79db      	ldrb	r3, [r3, #7]
 8012a16:	461a      	mov	r2, r3
 8012a18:	68fb      	ldr	r3, [r7, #12]
 8012a1a:	799b      	ldrb	r3, [r3, #6]
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	795b      	ldrb	r3, [r3, #5]
 8012a22:	9302      	str	r3, [sp, #8]
 8012a24:	9101      	str	r1, [sp, #4]
 8012a26:	9200      	str	r2, [sp, #0]
 8012a28:	462b      	mov	r3, r5
 8012a2a:	4622      	mov	r2, r4
 8012a2c:	4601      	mov	r1, r0
 8012a2e:	483a      	ldr	r0, [pc, #232]	@ (8012b18 <SVCCTL_App_Notification+0x300>)
 8012a30:	f002 ffca 	bl	80159c8 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8012a34:	482a      	ldr	r0, [pc, #168]	@ (8012ae0 <SVCCTL_App_Notification+0x2c8>)
 8012a36:	f7ff f893 	bl	8011b60 <DbgTraceGetFileName>
 8012a3a:	4601      	mov	r1, r0
 8012a3c:	f240 2327 	movw	r3, #551	@ 0x227
 8012a40:	4a28      	ldr	r2, [pc, #160]	@ (8012ae4 <SVCCTL_App_Notification+0x2cc>)
 8012a42:	4829      	ldr	r0, [pc, #164]	@ (8012ae8 <SVCCTL_App_Notification+0x2d0>)
 8012a44:	f002 ffc0 	bl	80159c8 <iprintf>
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7ed fd3f 	bl	80004d4 <__aeabi_i2d>
 8012a56:	f04f 0200 	mov.w	r2, #0
 8012a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8012b04 <SVCCTL_App_Notification+0x2ec>)
 8012a5c:	f7ed fda4 	bl	80005a8 <__aeabi_dmul>
 8012a60:	4602      	mov	r2, r0
 8012a62:	460b      	mov	r3, r1
 8012a64:	4610      	mov	r0, r2
 8012a66:	4619      	mov	r1, r3
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8012a6e:	b29b      	uxth	r3, r3
 8012a70:	461c      	mov	r4, r3
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8012a78:	b29b      	uxth	r3, r3
 8012a7a:	461a      	mov	r2, r3
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	009b      	lsls	r3, r3, #2
 8012a80:	4413      	add	r3, r2
 8012a82:	005b      	lsls	r3, r3, #1
 8012a84:	9301      	str	r3, [sp, #4]
 8012a86:	9400      	str	r4, [sp, #0]
 8012a88:	4602      	mov	r2, r0
 8012a8a:	460b      	mov	r3, r1
 8012a8c:	481e      	ldr	r0, [pc, #120]	@ (8012b08 <SVCCTL_App_Notification+0x2f0>)
 8012a8e:	f002 ff9b 	bl	80159c8 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8012a92:	4b12      	ldr	r3, [pc, #72]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 8012a94:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012a98:	2b04      	cmp	r3, #4
 8012a9a:	d104      	bne.n	8012aa6 <SVCCTL_App_Notification+0x28e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8012a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 8012a9e:	2206      	movs	r2, #6
 8012aa0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8012aa4:	e003      	b.n	8012aae <SVCCTL_App_Notification+0x296>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8012aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 8012aa8:	2205      	movs	r2, #5
 8012aaa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012ab4:	b29a      	uxth	r2, r3
 8012ab6:	4b09      	ldr	r3, [pc, #36]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 8012ab8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8012aba:	4b0f      	ldr	r3, [pc, #60]	@ (8012af8 <SVCCTL_App_Notification+0x2e0>)
 8012abc:	2200      	movs	r2, #0
 8012abe:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012ac0:	4b06      	ldr	r3, [pc, #24]	@ (8012adc <SVCCTL_App_Notification+0x2c4>)
 8012ac2:	8ada      	ldrh	r2, [r3, #22]
 8012ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8012af8 <SVCCTL_App_Notification+0x2e0>)
 8012ac6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8012ac8:	480b      	ldr	r0, [pc, #44]	@ (8012af8 <SVCCTL_App_Notification+0x2e0>)
 8012aca:	f000 ff15 	bl	80138f8 <Custom_APP_Notification>
          tsBle.Connected = true;
 8012ace:	4b09      	ldr	r3, [pc, #36]	@ (8012af4 <SVCCTL_App_Notification+0x2dc>)
 8012ad0:	2201      	movs	r2, #1
 8012ad2:	701a      	strb	r2, [r3, #0]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8012ad4:	e000      	b.n	8012ad8 <SVCCTL_App_Notification+0x2c0>
          break;
 8012ad6:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8012ad8:	e173      	b.n	8012dc2 <SVCCTL_App_Notification+0x5aa>
 8012ada:	bf00      	nop
 8012adc:	20001208 	.word	0x20001208
 8012ae0:	0801712c 	.word	0x0801712c
 8012ae4:	08018868 	.word	0x08018868
 8012ae8:	08017148 	.word	0x08017148
 8012aec:	08017274 	.word	0x08017274
 8012af0:	080172a0 	.word	0x080172a0
 8012af4:	200011f4 	.word	0x200011f4
 8012af8:	2000128c 	.word	0x2000128c
 8012afc:	20000eb4 	.word	0x20000eb4
 8012b00:	080172dc 	.word	0x080172dc
 8012b04:	3ff40000 	.word	0x3ff40000
 8012b08:	08017310 	.word	0x08017310
 8012b0c:	0801737c 	.word	0x0801737c
 8012b10:	080173c0 	.word	0x080173c0
 8012b14:	08017420 	.word	0x08017420
 8012b18:	08017468 	.word	0x08017468
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8012b1c:	6a3b      	ldr	r3, [r7, #32]
 8012b1e:	3302      	adds	r3, #2
 8012b20:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	881b      	ldrh	r3, [r3, #0]
 8012b26:	b29b      	uxth	r3, r3
 8012b28:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	f000 8130 	beq.w	8012d92 <SVCCTL_App_Notification+0x57a>
 8012b32:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012b36:	4293      	cmp	r3, r2
 8012b38:	f300 8142 	bgt.w	8012dc0 <SVCCTL_App_Notification+0x5a8>
 8012b3c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012b40:	d02e      	beq.n	8012ba0 <SVCCTL_App_Notification+0x388>
 8012b42:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012b46:	f300 813b 	bgt.w	8012dc0 <SVCCTL_App_Notification+0x5a8>
 8012b4a:	2b04      	cmp	r3, #4
 8012b4c:	f000 8134 	beq.w	8012db8 <SVCCTL_App_Notification+0x5a0>
 8012b50:	2b04      	cmp	r3, #4
 8012b52:	f2c0 8135 	blt.w	8012dc0 <SVCCTL_App_Notification+0x5a8>
 8012b56:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012b5a:	4293      	cmp	r3, r2
 8012b5c:	f300 8130 	bgt.w	8012dc0 <SVCCTL_App_Notification+0x5a8>
 8012b60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012b64:	f340 812c 	ble.w	8012dc0 <SVCCTL_App_Notification+0x5a8>
 8012b68:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8012b6c:	2b09      	cmp	r3, #9
 8012b6e:	f200 8127 	bhi.w	8012dc0 <SVCCTL_App_Notification+0x5a8>
 8012b72:	a201      	add	r2, pc, #4	@ (adr r2, 8012b78 <SVCCTL_App_Notification+0x360>)
 8012b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b78:	08012d0d 	.word	0x08012d0d
 8012b7c:	08012be1 	.word	0x08012be1
 8012b80:	08012dc1 	.word	0x08012dc1
 8012b84:	08012dc1 	.word	0x08012dc1
 8012b88:	08012dc1 	.word	0x08012dc1
 8012b8c:	08012dc1 	.word	0x08012dc1
 8012b90:	08012ba9 	.word	0x08012ba9
 8012b94:	08012dc1 	.word	0x08012dc1
 8012b98:	08012c53 	.word	0x08012c53
 8012b9c:	08012bc5 	.word	0x08012bc5
          mutex = 1;
 8012ba0:	4b8a      	ldr	r3, [pc, #552]	@ (8012dcc <SVCCTL_App_Notification+0x5b4>)
 8012ba2:	2201      	movs	r2, #1
 8012ba4:	701a      	strb	r2, [r3, #0]
          break;
 8012ba6:	e108      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8012ba8:	4889      	ldr	r0, [pc, #548]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012baa:	f7fe ffd9 	bl	8011b60 <DbgTraceGetFileName>
 8012bae:	4601      	mov	r1, r0
 8012bb0:	f240 237f 	movw	r3, #639	@ 0x27f
 8012bb4:	4a87      	ldr	r2, [pc, #540]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012bb6:	4888      	ldr	r0, [pc, #544]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012bb8:	f002 ff06 	bl	80159c8 <iprintf>
 8012bbc:	4887      	ldr	r0, [pc, #540]	@ (8012ddc <SVCCTL_App_Notification+0x5c4>)
 8012bbe:	f002 ff03 	bl	80159c8 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8012bc2:	e0fa      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8012bc4:	4882      	ldr	r0, [pc, #520]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012bc6:	f7fe ffcb 	bl	8011b60 <DbgTraceGetFileName>
 8012bca:	4601      	mov	r1, r0
 8012bcc:	f240 238f 	movw	r3, #655	@ 0x28f
 8012bd0:	4a80      	ldr	r2, [pc, #512]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012bd2:	4881      	ldr	r0, [pc, #516]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012bd4:	f002 fef8 	bl	80159c8 <iprintf>
 8012bd8:	4881      	ldr	r0, [pc, #516]	@ (8012de0 <SVCCTL_App_Notification+0x5c8>)
 8012bda:	f002 ff65 	bl	8015aa8 <puts>
          break;
 8012bde:	e0ec      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8012be0:	487b      	ldr	r0, [pc, #492]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012be2:	f7fe ffbd 	bl	8011b60 <DbgTraceGetFileName>
 8012be6:	4601      	mov	r1, r0
 8012be8:	f240 2396 	movw	r3, #662	@ 0x296
 8012bec:	4a79      	ldr	r2, [pc, #484]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012bee:	487a      	ldr	r0, [pc, #488]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012bf0:	f002 feea 	bl	80159c8 <iprintf>
 8012bf4:	487b      	ldr	r0, [pc, #492]	@ (8012de4 <SVCCTL_App_Notification+0x5cc>)
 8012bf6:	f002 ff57 	bl	8015aa8 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8012bfa:	4b7b      	ldr	r3, [pc, #492]	@ (8012de8 <SVCCTL_App_Notification+0x5d0>)
 8012bfc:	8adb      	ldrh	r3, [r3, #22]
 8012bfe:	497b      	ldr	r1, [pc, #492]	@ (8012dec <SVCCTL_App_Notification+0x5d4>)
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fd f87b 	bl	800fcfc <aci_gap_pass_key_resp>
 8012c06:	4603      	mov	r3, r0
 8012c08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8012c0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c10:	2b00      	cmp	r3, #0
 8012c12:	d010      	beq.n	8012c36 <SVCCTL_App_Notification+0x41e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8012c14:	486e      	ldr	r0, [pc, #440]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012c16:	f7fe ffa3 	bl	8011b60 <DbgTraceGetFileName>
 8012c1a:	4601      	mov	r1, r0
 8012c1c:	f240 239b 	movw	r3, #667	@ 0x29b
 8012c20:	4a6c      	ldr	r2, [pc, #432]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012c22:	486d      	ldr	r0, [pc, #436]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012c24:	f002 fed0 	bl	80159c8 <iprintf>
 8012c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012c2c:	4619      	mov	r1, r3
 8012c2e:	4870      	ldr	r0, [pc, #448]	@ (8012df0 <SVCCTL_App_Notification+0x5d8>)
 8012c30:	f002 feca 	bl	80159c8 <iprintf>
          break;
 8012c34:	e0c1      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8012c36:	4866      	ldr	r0, [pc, #408]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012c38:	f7fe ff92 	bl	8011b60 <DbgTraceGetFileName>
 8012c3c:	4601      	mov	r1, r0
 8012c3e:	f240 239f 	movw	r3, #671	@ 0x29f
 8012c42:	4a64      	ldr	r2, [pc, #400]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012c44:	4864      	ldr	r0, [pc, #400]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012c46:	f002 febf 	bl	80159c8 <iprintf>
 8012c4a:	486a      	ldr	r0, [pc, #424]	@ (8012df4 <SVCCTL_App_Notification+0x5dc>)
 8012c4c:	f002 ff2c 	bl	8015aa8 <puts>
          break;
 8012c50:	e0b3      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8012c52:	485f      	ldr	r0, [pc, #380]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012c54:	f7fe ff84 	bl	8011b60 <DbgTraceGetFileName>
 8012c58:	4601      	mov	r1, r0
 8012c5a:	f240 23a7 	movw	r3, #679	@ 0x2a7
 8012c5e:	4a5d      	ldr	r2, [pc, #372]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012c60:	485d      	ldr	r0, [pc, #372]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012c62:	f002 feb1 	bl	80159c8 <iprintf>
 8012c66:	4864      	ldr	r0, [pc, #400]	@ (8012df8 <SVCCTL_App_Notification+0x5e0>)
 8012c68:	f002 ff1e 	bl	8015aa8 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8012c6c:	4858      	ldr	r0, [pc, #352]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012c6e:	f7fe ff77 	bl	8011b60 <DbgTraceGetFileName>
 8012c72:	4601      	mov	r1, r0
 8012c74:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8012c78:	4a56      	ldr	r2, [pc, #344]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012c7a:	4857      	ldr	r0, [pc, #348]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012c7c:	f002 fea4 	bl	80159c8 <iprintf>
 8012c80:	69fb      	ldr	r3, [r7, #28]
 8012c82:	3302      	adds	r3, #2
 8012c84:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012c88:	4619      	mov	r1, r3
 8012c8a:	485c      	ldr	r0, [pc, #368]	@ (8012dfc <SVCCTL_App_Notification+0x5e4>)
 8012c8c:	f002 fe9c 	bl	80159c8 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8012c90:	484f      	ldr	r0, [pc, #316]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012c92:	f7fe ff65 	bl	8011b60 <DbgTraceGetFileName>
 8012c96:	4601      	mov	r1, r0
 8012c98:	f240 23aa 	movw	r3, #682	@ 0x2aa
 8012c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012c9e:	484e      	ldr	r0, [pc, #312]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012ca0:	f002 fe92 	bl	80159c8 <iprintf>
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	3302      	adds	r3, #2
 8012ca8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012cac:	4619      	mov	r1, r3
 8012cae:	4854      	ldr	r0, [pc, #336]	@ (8012e00 <SVCCTL_App_Notification+0x5e8>)
 8012cb0:	f002 fe8a 	bl	80159c8 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8012cb4:	4b4c      	ldr	r3, [pc, #304]	@ (8012de8 <SVCCTL_App_Notification+0x5d0>)
 8012cb6:	8adb      	ldrh	r3, [r3, #22]
 8012cb8:	2101      	movs	r1, #1
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f7fd f9c8 	bl	8010050 <aci_gap_numeric_comparison_value_confirm_yesno>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8012cc6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d010      	beq.n	8012cf0 <SVCCTL_App_Notification+0x4d8>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8012cce:	4840      	ldr	r0, [pc, #256]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012cd0:	f7fe ff46 	bl	8011b60 <DbgTraceGetFileName>
 8012cd4:	4601      	mov	r1, r0
 8012cd6:	f240 23af 	movw	r3, #687	@ 0x2af
 8012cda:	4a3e      	ldr	r2, [pc, #248]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012cdc:	483e      	ldr	r0, [pc, #248]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012cde:	f002 fe73 	bl	80159c8 <iprintf>
 8012ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	4846      	ldr	r0, [pc, #280]	@ (8012e04 <SVCCTL_App_Notification+0x5ec>)
 8012cea:	f002 fe6d 	bl	80159c8 <iprintf>
          break;
 8012cee:	e064      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8012cf0:	4837      	ldr	r0, [pc, #220]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012cf2:	f7fe ff35 	bl	8011b60 <DbgTraceGetFileName>
 8012cf6:	4601      	mov	r1, r0
 8012cf8:	f240 23b3 	movw	r3, #691	@ 0x2b3
 8012cfc:	4a35      	ldr	r2, [pc, #212]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012cfe:	4836      	ldr	r0, [pc, #216]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012d00:	f002 fe62 	bl	80159c8 <iprintf>
 8012d04:	4840      	ldr	r0, [pc, #256]	@ (8012e08 <SVCCTL_App_Notification+0x5f0>)
 8012d06:	f002 fecf 	bl	8015aa8 <puts>
          break;
 8012d0a:	e056      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8012d0c:	69fb      	ldr	r3, [r7, #28]
 8012d0e:	3302      	adds	r3, #2
 8012d10:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8012d12:	482f      	ldr	r0, [pc, #188]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012d14:	f7fe ff24 	bl	8011b60 <DbgTraceGetFileName>
 8012d18:	4601      	mov	r1, r0
 8012d1a:	f240 23bd 	movw	r3, #701	@ 0x2bd
 8012d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012d20:	482d      	ldr	r0, [pc, #180]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012d22:	f002 fe51 	bl	80159c8 <iprintf>
 8012d26:	4839      	ldr	r0, [pc, #228]	@ (8012e0c <SVCCTL_App_Notification+0x5f4>)
 8012d28:	f002 febe 	bl	8015aa8 <puts>
          if (p_pairing_complete->Status != 0)
 8012d2c:	69bb      	ldr	r3, [r7, #24]
 8012d2e:	789b      	ldrb	r3, [r3, #2]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d013      	beq.n	8012d5c <SVCCTL_App_Notification+0x544>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8012d34:	4826      	ldr	r0, [pc, #152]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012d36:	f7fe ff13 	bl	8011b60 <DbgTraceGetFileName>
 8012d3a:	4601      	mov	r1, r0
 8012d3c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8012d40:	4a24      	ldr	r2, [pc, #144]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012d42:	4825      	ldr	r0, [pc, #148]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012d44:	f002 fe40 	bl	80159c8 <iprintf>
 8012d48:	69bb      	ldr	r3, [r7, #24]
 8012d4a:	789b      	ldrb	r3, [r3, #2]
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	69bb      	ldr	r3, [r7, #24]
 8012d50:	78db      	ldrb	r3, [r3, #3]
 8012d52:	461a      	mov	r2, r3
 8012d54:	482e      	ldr	r0, [pc, #184]	@ (8012e10 <SVCCTL_App_Notification+0x5f8>)
 8012d56:	f002 fe37 	bl	80159c8 <iprintf>
 8012d5a:	e00c      	b.n	8012d76 <SVCCTL_App_Notification+0x55e>
            APP_DBG_MSG("     - Pairing Success\n");
 8012d5c:	481c      	ldr	r0, [pc, #112]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012d5e:	f7fe feff 	bl	8011b60 <DbgTraceGetFileName>
 8012d62:	4601      	mov	r1, r0
 8012d64:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
 8012d68:	4a1a      	ldr	r2, [pc, #104]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012d6a:	481b      	ldr	r0, [pc, #108]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012d6c:	f002 fe2c 	bl	80159c8 <iprintf>
 8012d70:	4828      	ldr	r0, [pc, #160]	@ (8012e14 <SVCCTL_App_Notification+0x5fc>)
 8012d72:	f002 fe99 	bl	8015aa8 <puts>
          APP_DBG_MSG("\n");
 8012d76:	4816      	ldr	r0, [pc, #88]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012d78:	f7fe fef2 	bl	8011b60 <DbgTraceGetFileName>
 8012d7c:	4601      	mov	r1, r0
 8012d7e:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8012d82:	4a14      	ldr	r2, [pc, #80]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012d84:	4814      	ldr	r0, [pc, #80]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012d86:	f002 fe1f 	bl	80159c8 <iprintf>
 8012d8a:	200a      	movs	r0, #10
 8012d8c:	f002 fe2e 	bl	80159ec <putchar>
          break;
 8012d90:	e013      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8012d92:	480f      	ldr	r0, [pc, #60]	@ (8012dd0 <SVCCTL_App_Notification+0x5b8>)
 8012d94:	f7fe fee4 	bl	8011b60 <DbgTraceGetFileName>
 8012d98:	4601      	mov	r1, r0
 8012d9a:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8012d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8012dd4 <SVCCTL_App_Notification+0x5bc>)
 8012da0:	480d      	ldr	r0, [pc, #52]	@ (8012dd8 <SVCCTL_App_Notification+0x5c0>)
 8012da2:	f002 fe11 	bl	80159c8 <iprintf>
 8012da6:	481c      	ldr	r0, [pc, #112]	@ (8012e18 <SVCCTL_App_Notification+0x600>)
 8012da8:	f002 fe0e 	bl	80159c8 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8012dac:	4b0e      	ldr	r3, [pc, #56]	@ (8012de8 <SVCCTL_App_Notification+0x5d0>)
 8012dae:	8adb      	ldrh	r3, [r3, #22]
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7fd fc60 	bl	8010676 <aci_gatt_confirm_indication>
        break;
 8012db6:	e000      	b.n	8012dba <SVCCTL_App_Notification+0x5a2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8012db8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012dba:	e001      	b.n	8012dc0 <SVCCTL_App_Notification+0x5a8>
      break;
 8012dbc:	bf00      	nop
 8012dbe:	e000      	b.n	8012dc2 <SVCCTL_App_Notification+0x5aa>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012dc0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8012dc2:	2301      	movs	r3, #1
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3728      	adds	r7, #40	@ 0x28
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bdb0      	pop	{r4, r5, r7, pc}
 8012dcc:	20001291 	.word	0x20001291
 8012dd0:	0801712c 	.word	0x0801712c
 8012dd4:	08018868 	.word	0x08018868
 8012dd8:	08017148 	.word	0x08017148
 8012ddc:	080174b8 	.word	0x080174b8
 8012de0:	080174e0 	.word	0x080174e0
 8012de4:	08017510 	.word	0x08017510
 8012de8:	20001208 	.word	0x20001208
 8012dec:	0001b207 	.word	0x0001b207
 8012df0:	08017538 	.word	0x08017538
 8012df4:	0801756c 	.word	0x0801756c
 8012df8:	08017594 	.word	0x08017594
 8012dfc:	080175c8 	.word	0x080175c8
 8012e00:	080175e4 	.word	0x080175e4
 8012e04:	080175fc 	.word	0x080175fc
 8012e08:	0801764c 	.word	0x0801764c
 8012e0c:	08017694 	.word	0x08017694
 8012e10:	080176c0 	.word	0x080176c0
 8012e14:	080176fc 	.word	0x080176fc
 8012e18:	08017714 	.word	0x08017714

08012e1c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8012e1c:	b580      	push	{r7, lr}
 8012e1e:	b082      	sub	sp, #8
 8012e20:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8012e22:	4b06      	ldr	r3, [pc, #24]	@ (8012e3c <Ble_Tl_Init+0x20>)
 8012e24:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8012e26:	4b06      	ldr	r3, [pc, #24]	@ (8012e40 <Ble_Tl_Init+0x24>)
 8012e28:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8012e2a:	463b      	mov	r3, r7
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	4805      	ldr	r0, [pc, #20]	@ (8012e44 <Ble_Tl_Init+0x28>)
 8012e30:	f7fe f97a 	bl	8011128 <hci_init>

  return;
 8012e34:	bf00      	nop
}
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	200300d8 	.word	0x200300d8
 8012e40:	080137dd 	.word	0x080137dd
 8012e44:	080137a5 	.word	0x080137a5

08012e48 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8012e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012e4a:	b08d      	sub	sp, #52	@ 0x34
 8012e4c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8012e4e:	2300      	movs	r3, #0
 8012e50:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012e52:	2392      	movs	r3, #146	@ 0x92
 8012e54:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8012e56:	48a3      	ldr	r0, [pc, #652]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012e58:	f7fe fe82 	bl	8011b60 <DbgTraceGetFileName>
 8012e5c:	4601      	mov	r1, r0
 8012e5e:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8012e62:	4aa1      	ldr	r2, [pc, #644]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012e64:	48a1      	ldr	r0, [pc, #644]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012e66:	f002 fdaf 	bl	80159c8 <iprintf>
 8012e6a:	48a1      	ldr	r0, [pc, #644]	@ (80130f0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8012e6c:	f002 fe1c 	bl	8015aa8 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8012e70:	f7fd fdeb 	bl	8010a4a <hci_reset>
 8012e74:	4603      	mov	r3, r0
 8012e76:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012e78:	7dfb      	ldrb	r3, [r7, #23]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d00f      	beq.n	8012e9e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8012e7e:	4899      	ldr	r0, [pc, #612]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012e80:	f7fe fe6e 	bl	8011b60 <DbgTraceGetFileName>
 8012e84:	4601      	mov	r1, r0
 8012e86:	f240 3315 	movw	r3, #789	@ 0x315
 8012e8a:	4a97      	ldr	r2, [pc, #604]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012e8c:	4897      	ldr	r0, [pc, #604]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012e8e:	f002 fd9b 	bl	80159c8 <iprintf>
 8012e92:	7dfb      	ldrb	r3, [r7, #23]
 8012e94:	4619      	mov	r1, r3
 8012e96:	4897      	ldr	r0, [pc, #604]	@ (80130f4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8012e98:	f002 fd96 	bl	80159c8 <iprintf>
 8012e9c:	e00c      	b.n	8012eb8 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8012e9e:	4891      	ldr	r0, [pc, #580]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012ea0:	f7fe fe5e 	bl	8011b60 <DbgTraceGetFileName>
 8012ea4:	4601      	mov	r1, r0
 8012ea6:	f240 3319 	movw	r3, #793	@ 0x319
 8012eaa:	4a8f      	ldr	r2, [pc, #572]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012eac:	488f      	ldr	r0, [pc, #572]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012eae:	f002 fd8b 	bl	80159c8 <iprintf>
 8012eb2:	4891      	ldr	r0, [pc, #580]	@ (80130f8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8012eb4:	f002 fdf8 	bl	8015aa8 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8012eb8:	f000 fad8 	bl	801346c <BleGetBdAddress>
 8012ebc:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8012ebe:	693a      	ldr	r2, [r7, #16]
 8012ec0:	2106      	movs	r1, #6
 8012ec2:	2000      	movs	r0, #0
 8012ec4:	f7fd fc81 	bl	80107ca <aci_hal_write_config_data>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012ecc:	7dfb      	ldrb	r3, [r7, #23]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d00f      	beq.n	8012ef2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8012ed2:	4884      	ldr	r0, [pc, #528]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012ed4:	f7fe fe44 	bl	8011b60 <DbgTraceGetFileName>
 8012ed8:	4601      	mov	r1, r0
 8012eda:	f240 3323 	movw	r3, #803	@ 0x323
 8012ede:	4a82      	ldr	r2, [pc, #520]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012ee0:	4882      	ldr	r0, [pc, #520]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012ee2:	f002 fd71 	bl	80159c8 <iprintf>
 8012ee6:	7dfb      	ldrb	r3, [r7, #23]
 8012ee8:	4619      	mov	r1, r3
 8012eea:	4884      	ldr	r0, [pc, #528]	@ (80130fc <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8012eec:	f002 fd6c 	bl	80159c8 <iprintf>
 8012ef0:	e035      	b.n	8012f5e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8012ef2:	487c      	ldr	r0, [pc, #496]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012ef4:	f7fe fe34 	bl	8011b60 <DbgTraceGetFileName>
 8012ef8:	4601      	mov	r1, r0
 8012efa:	f240 3327 	movw	r3, #807	@ 0x327
 8012efe:	4a7a      	ldr	r2, [pc, #488]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f00:	487a      	ldr	r0, [pc, #488]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f02:	f002 fd61 	bl	80159c8 <iprintf>
 8012f06:	487e      	ldr	r0, [pc, #504]	@ (8013100 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8012f08:	f002 fdce 	bl	8015aa8 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8012f0c:	4875      	ldr	r0, [pc, #468]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f0e:	f7fe fe27 	bl	8011b60 <DbgTraceGetFileName>
 8012f12:	4601      	mov	r1, r0
 8012f14:	f44f 734a 	mov.w	r3, #808	@ 0x328
 8012f18:	4a73      	ldr	r2, [pc, #460]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f1a:	4874      	ldr	r0, [pc, #464]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f1c:	f002 fd54 	bl	80159c8 <iprintf>
 8012f20:	693b      	ldr	r3, [r7, #16]
 8012f22:	3305      	adds	r3, #5
 8012f24:	781b      	ldrb	r3, [r3, #0]
 8012f26:	4618      	mov	r0, r3
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	3304      	adds	r3, #4
 8012f2c:	781b      	ldrb	r3, [r3, #0]
 8012f2e:	461c      	mov	r4, r3
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	3303      	adds	r3, #3
 8012f34:	781b      	ldrb	r3, [r3, #0]
 8012f36:	461d      	mov	r5, r3
 8012f38:	693b      	ldr	r3, [r7, #16]
 8012f3a:	3302      	adds	r3, #2
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	461a      	mov	r2, r3
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	3301      	adds	r3, #1
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	4619      	mov	r1, r3
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	781b      	ldrb	r3, [r3, #0]
 8012f4c:	9302      	str	r3, [sp, #8]
 8012f4e:	9101      	str	r1, [sp, #4]
 8012f50:	9200      	str	r2, [sp, #0]
 8012f52:	462b      	mov	r3, r5
 8012f54:	4622      	mov	r2, r4
 8012f56:	4601      	mov	r1, r0
 8012f58:	486a      	ldr	r0, [pc, #424]	@ (8013104 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8012f5a:	f002 fd35 	bl	80159c8 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8012f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8013108 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8012f60:	2110      	movs	r1, #16
 8012f62:	2018      	movs	r0, #24
 8012f64:	f7fd fc31 	bl	80107ca <aci_hal_write_config_data>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012f6c:	7dfb      	ldrb	r3, [r7, #23]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00f      	beq.n	8012f92 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8012f72:	485c      	ldr	r0, [pc, #368]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f74:	f7fe fdf4 	bl	8011b60 <DbgTraceGetFileName>
 8012f78:	4601      	mov	r1, r0
 8012f7a:	f240 3372 	movw	r3, #882	@ 0x372
 8012f7e:	4a5a      	ldr	r2, [pc, #360]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f80:	485a      	ldr	r0, [pc, #360]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f82:	f002 fd21 	bl	80159c8 <iprintf>
 8012f86:	7dfb      	ldrb	r3, [r7, #23]
 8012f88:	4619      	mov	r1, r3
 8012f8a:	4860      	ldr	r0, [pc, #384]	@ (801310c <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8012f8c:	f002 fd1c 	bl	80159c8 <iprintf>
 8012f90:	e00c      	b.n	8012fac <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8012f92:	4854      	ldr	r0, [pc, #336]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f94:	f7fe fde4 	bl	8011b60 <DbgTraceGetFileName>
 8012f98:	4601      	mov	r1, r0
 8012f9a:	f240 3376 	movw	r3, #886	@ 0x376
 8012f9e:	4a52      	ldr	r2, [pc, #328]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fa0:	4852      	ldr	r0, [pc, #328]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012fa2:	f002 fd11 	bl	80159c8 <iprintf>
 8012fa6:	485a      	ldr	r0, [pc, #360]	@ (8013110 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8012fa8:	f002 fd7e 	bl	8015aa8 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8012fac:	4a59      	ldr	r2, [pc, #356]	@ (8013114 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8012fae:	2110      	movs	r1, #16
 8012fb0:	2008      	movs	r0, #8
 8012fb2:	f7fd fc0a 	bl	80107ca <aci_hal_write_config_data>
 8012fb6:	4603      	mov	r3, r0
 8012fb8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012fba:	7dfb      	ldrb	r3, [r7, #23]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00f      	beq.n	8012fe0 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8012fc0:	4848      	ldr	r0, [pc, #288]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012fc2:	f7fe fdcd 	bl	8011b60 <DbgTraceGetFileName>
 8012fc6:	4601      	mov	r1, r0
 8012fc8:	f240 337f 	movw	r3, #895	@ 0x37f
 8012fcc:	4a46      	ldr	r2, [pc, #280]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fce:	4847      	ldr	r0, [pc, #284]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012fd0:	f002 fcfa 	bl	80159c8 <iprintf>
 8012fd4:	7dfb      	ldrb	r3, [r7, #23]
 8012fd6:	4619      	mov	r1, r3
 8012fd8:	484f      	ldr	r0, [pc, #316]	@ (8013118 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8012fda:	f002 fcf5 	bl	80159c8 <iprintf>
 8012fde:	e00c      	b.n	8012ffa <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8012fe0:	4840      	ldr	r0, [pc, #256]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012fe2:	f7fe fdbd 	bl	8011b60 <DbgTraceGetFileName>
 8012fe6:	4601      	mov	r1, r0
 8012fe8:	f240 3383 	movw	r3, #899	@ 0x383
 8012fec:	4a3e      	ldr	r2, [pc, #248]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fee:	483f      	ldr	r0, [pc, #252]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012ff0:	f002 fcea 	bl	80159c8 <iprintf>
 8012ff4:	4849      	ldr	r0, [pc, #292]	@ (801311c <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8012ff6:	f002 fd57 	bl	8015aa8 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8012ffa:	2119      	movs	r1, #25
 8012ffc:	2001      	movs	r0, #1
 8012ffe:	f7fd fc69 	bl	80108d4 <aci_hal_set_tx_power_level>
 8013002:	4603      	mov	r3, r0
 8013004:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013006:	7dfb      	ldrb	r3, [r7, #23]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d00f      	beq.n	801302c <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 801300c:	4835      	ldr	r0, [pc, #212]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801300e:	f7fe fda7 	bl	8011b60 <DbgTraceGetFileName>
 8013012:	4601      	mov	r1, r0
 8013014:	f44f 7363 	mov.w	r3, #908	@ 0x38c
 8013018:	4a33      	ldr	r2, [pc, #204]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801301a:	4834      	ldr	r0, [pc, #208]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801301c:	f002 fcd4 	bl	80159c8 <iprintf>
 8013020:	7dfb      	ldrb	r3, [r7, #23]
 8013022:	4619      	mov	r1, r3
 8013024:	483e      	ldr	r0, [pc, #248]	@ (8013120 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8013026:	f002 fccf 	bl	80159c8 <iprintf>
 801302a:	e00c      	b.n	8013046 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 801302c:	482d      	ldr	r0, [pc, #180]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801302e:	f7fe fd97 	bl	8011b60 <DbgTraceGetFileName>
 8013032:	4601      	mov	r1, r0
 8013034:	f44f 7364 	mov.w	r3, #912	@ 0x390
 8013038:	4a2b      	ldr	r2, [pc, #172]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801303a:	482c      	ldr	r0, [pc, #176]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801303c:	f002 fcc4 	bl	80159c8 <iprintf>
 8013040:	4838      	ldr	r0, [pc, #224]	@ (8013124 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8013042:	f002 fd31 	bl	8015aa8 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8013046:	f7fd f86a 	bl	801011e <aci_gatt_init>
 801304a:	4603      	mov	r3, r0
 801304c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801304e:	7dfb      	ldrb	r3, [r7, #23]
 8013050:	2b00      	cmp	r3, #0
 8013052:	d00f      	beq.n	8013074 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8013054:	4823      	ldr	r0, [pc, #140]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013056:	f7fe fd83 	bl	8011b60 <DbgTraceGetFileName>
 801305a:	4601      	mov	r1, r0
 801305c:	f240 3399 	movw	r3, #921	@ 0x399
 8013060:	4a21      	ldr	r2, [pc, #132]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013062:	4822      	ldr	r0, [pc, #136]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013064:	f002 fcb0 	bl	80159c8 <iprintf>
 8013068:	7dfb      	ldrb	r3, [r7, #23]
 801306a:	4619      	mov	r1, r3
 801306c:	482e      	ldr	r0, [pc, #184]	@ (8013128 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801306e:	f002 fcab 	bl	80159c8 <iprintf>
 8013072:	e00c      	b.n	801308e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8013074:	481b      	ldr	r0, [pc, #108]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013076:	f7fe fd73 	bl	8011b60 <DbgTraceGetFileName>
 801307a:	4601      	mov	r1, r0
 801307c:	f240 339d 	movw	r3, #925	@ 0x39d
 8013080:	4a19      	ldr	r2, [pc, #100]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013082:	481a      	ldr	r0, [pc, #104]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013084:	f002 fca0 	bl	80159c8 <iprintf>
 8013088:	4828      	ldr	r0, [pc, #160]	@ (801312c <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801308a:	f002 fd0d 	bl	8015aa8 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801308e:	2300      	movs	r3, #0
 8013090:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8013092:	7bfb      	ldrb	r3, [r7, #15]
 8013094:	f043 0301 	orr.w	r3, r3, #1
 8013098:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801309a:	7bfb      	ldrb	r3, [r7, #15]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d069      	beq.n	8013174 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80130a0:	4b23      	ldr	r3, [pc, #140]	@ (8013130 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 80130a2:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80130a4:	1dba      	adds	r2, r7, #6
 80130a6:	7bf8      	ldrb	r0, [r7, #15]
 80130a8:	1cbb      	adds	r3, r7, #2
 80130aa:	9301      	str	r3, [sp, #4]
 80130ac:	1d3b      	adds	r3, r7, #4
 80130ae:	9300      	str	r3, [sp, #0]
 80130b0:	4613      	mov	r3, r2
 80130b2:	2209      	movs	r2, #9
 80130b4:	2100      	movs	r1, #0
 80130b6:	f7fc fe88 	bl	800fdca <aci_gap_init>
 80130ba:	4603      	mov	r3, r0
 80130bc:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 80130be:	7dfb      	ldrb	r3, [r7, #23]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d039      	beq.n	8013138 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 80130c4:	4807      	ldr	r0, [pc, #28]	@ (80130e4 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80130c6:	f7fe fd4b 	bl	8011b60 <DbgTraceGetFileName>
 80130ca:	4601      	mov	r1, r0
 80130cc:	f240 33bd 	movw	r3, #957	@ 0x3bd
 80130d0:	4a05      	ldr	r2, [pc, #20]	@ (80130e8 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80130d2:	4806      	ldr	r0, [pc, #24]	@ (80130ec <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80130d4:	f002 fc78 	bl	80159c8 <iprintf>
 80130d8:	7dfb      	ldrb	r3, [r7, #23]
 80130da:	4619      	mov	r1, r3
 80130dc:	4815      	ldr	r0, [pc, #84]	@ (8013134 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80130de:	f002 fc73 	bl	80159c8 <iprintf>
 80130e2:	e036      	b.n	8013152 <Ble_Hci_Gap_Gatt_Init+0x30a>
 80130e4:	0801712c 	.word	0x0801712c
 80130e8:	08018880 	.word	0x08018880
 80130ec:	08017148 	.word	0x08017148
 80130f0:	0801773c 	.word	0x0801773c
 80130f4:	08017768 	.word	0x08017768
 80130f8:	08017798 	.word	0x08017798
 80130fc:	080177b8 	.word	0x080177b8
 8013100:	08017814 	.word	0x08017814
 8013104:	08017860 	.word	0x08017860
 8013108:	08018838 	.word	0x08018838
 801310c:	0801789c 	.word	0x0801789c
 8013110:	080178f4 	.word	0x080178f4
 8013114:	08018848 	.word	0x08018848
 8013118:	0801793c 	.word	0x0801793c
 801311c:	08017994 	.word	0x08017994
 8013120:	080179dc 	.word	0x080179dc
 8013124:	08017a1c 	.word	0x08017a1c
 8013128:	08017a4c 	.word	0x08017a4c
 801312c:	08017a80 	.word	0x08017a80
 8013130:	08017aa4 	.word	0x08017aa4
 8013134:	08017ab0 	.word	0x08017ab0
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8013138:	487e      	ldr	r0, [pc, #504]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801313a:	f7fe fd11 	bl	8011b60 <DbgTraceGetFileName>
 801313e:	4601      	mov	r1, r0
 8013140:	f240 33c1 	movw	r3, #961	@ 0x3c1
 8013144:	4a7c      	ldr	r2, [pc, #496]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013146:	487d      	ldr	r0, [pc, #500]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013148:	f002 fc3e 	bl	80159c8 <iprintf>
 801314c:	487c      	ldr	r0, [pc, #496]	@ (8013340 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 801314e:	f002 fcab 	bl	8015aa8 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8013152:	88fc      	ldrh	r4, [r7, #6]
 8013154:	88bd      	ldrh	r5, [r7, #4]
 8013156:	68b8      	ldr	r0, [r7, #8]
 8013158:	f7ed f812 	bl	8000180 <strlen>
 801315c:	4603      	mov	r3, r0
 801315e:	b2da      	uxtb	r2, r3
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	9300      	str	r3, [sp, #0]
 8013164:	4613      	mov	r3, r2
 8013166:	2200      	movs	r2, #0
 8013168:	4629      	mov	r1, r5
 801316a:	4620      	mov	r0, r4
 801316c:	f7fd f9da 	bl	8010524 <aci_gatt_update_char_value>
 8013170:	4603      	mov	r3, r0
 8013172:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8013174:	88f8      	ldrh	r0, [r7, #6]
 8013176:	8879      	ldrh	r1, [r7, #2]
 8013178:	463b      	mov	r3, r7
 801317a:	9300      	str	r3, [sp, #0]
 801317c:	2302      	movs	r3, #2
 801317e:	2200      	movs	r2, #0
 8013180:	f7fd f9d0 	bl	8010524 <aci_gatt_update_char_value>
 8013184:	4603      	mov	r3, r0
 8013186:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8013188:	2202      	movs	r2, #2
 801318a:	2102      	movs	r1, #2
 801318c:	2000      	movs	r0, #0
 801318e:	f7fd fc80 	bl	8010a92 <hci_le_set_default_phy>
 8013192:	4603      	mov	r3, r0
 8013194:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013196:	7dfb      	ldrb	r3, [r7, #23]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00f      	beq.n	80131bc <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 801319c:	4865      	ldr	r0, [pc, #404]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801319e:	f7fe fcdf 	bl	8011b60 <DbgTraceGetFileName>
 80131a2:	4601      	mov	r1, r0
 80131a4:	f240 33e3 	movw	r3, #995	@ 0x3e3
 80131a8:	4a63      	ldr	r2, [pc, #396]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80131aa:	4864      	ldr	r0, [pc, #400]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80131ac:	f002 fc0c 	bl	80159c8 <iprintf>
 80131b0:	7dfb      	ldrb	r3, [r7, #23]
 80131b2:	4619      	mov	r1, r3
 80131b4:	4863      	ldr	r0, [pc, #396]	@ (8013344 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 80131b6:	f002 fc07 	bl	80159c8 <iprintf>
 80131ba:	e00c      	b.n	80131d6 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 80131bc:	485d      	ldr	r0, [pc, #372]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80131be:	f7fe fccf 	bl	8011b60 <DbgTraceGetFileName>
 80131c2:	4601      	mov	r1, r0
 80131c4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80131c8:	4a5b      	ldr	r2, [pc, #364]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80131ca:	485c      	ldr	r0, [pc, #368]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80131cc:	f002 fbfc 	bl	80159c8 <iprintf>
 80131d0:	485d      	ldr	r0, [pc, #372]	@ (8013348 <Ble_Hci_Gap_Gatt_Init+0x500>)
 80131d2:	f002 fc69 	bl	8015aa8 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80131d6:	4b5d      	ldr	r3, [pc, #372]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 80131d8:	2201      	movs	r2, #1
 80131da:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80131dc:	4b5b      	ldr	r3, [pc, #364]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 80131de:	781b      	ldrb	r3, [r3, #0]
 80131e0:	4618      	mov	r0, r3
 80131e2:	f7fc fc73 	bl	800facc <aci_gap_set_io_capability>
 80131e6:	4603      	mov	r3, r0
 80131e8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80131ea:	7dfb      	ldrb	r3, [r7, #23]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00f      	beq.n	8013210 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80131f0:	4850      	ldr	r0, [pc, #320]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80131f2:	f7fe fcb5 	bl	8011b60 <DbgTraceGetFileName>
 80131f6:	4601      	mov	r1, r0
 80131f8:	f240 33f1 	movw	r3, #1009	@ 0x3f1
 80131fc:	4a4e      	ldr	r2, [pc, #312]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80131fe:	484f      	ldr	r0, [pc, #316]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013200:	f002 fbe2 	bl	80159c8 <iprintf>
 8013204:	7dfb      	ldrb	r3, [r7, #23]
 8013206:	4619      	mov	r1, r3
 8013208:	4851      	ldr	r0, [pc, #324]	@ (8013350 <Ble_Hci_Gap_Gatt_Init+0x508>)
 801320a:	f002 fbdd 	bl	80159c8 <iprintf>
 801320e:	e00c      	b.n	801322a <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8013210:	4848      	ldr	r0, [pc, #288]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013212:	f7fe fca5 	bl	8011b60 <DbgTraceGetFileName>
 8013216:	4601      	mov	r1, r0
 8013218:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 801321c:	4a46      	ldr	r2, [pc, #280]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801321e:	4847      	ldr	r0, [pc, #284]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013220:	f002 fbd2 	bl	80159c8 <iprintf>
 8013224:	484b      	ldr	r0, [pc, #300]	@ (8013354 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 8013226:	f002 fc3f 	bl	8015aa8 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801322a:	4b48      	ldr	r3, [pc, #288]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801322c:	2201      	movs	r2, #1
 801322e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8013230:	4b46      	ldr	r3, [pc, #280]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013232:	2208      	movs	r2, #8
 8013234:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8013236:	4b45      	ldr	r3, [pc, #276]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013238:	2210      	movs	r2, #16
 801323a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 801323c:	4b43      	ldr	r3, [pc, #268]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801323e:	2200      	movs	r2, #0
 8013240:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8013242:	4b42      	ldr	r3, [pc, #264]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013244:	4a44      	ldr	r2, [pc, #272]	@ (8013358 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8013246:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8013248:	4b40      	ldr	r3, [pc, #256]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801324a:	2200      	movs	r2, #0
 801324c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801324e:	4b3f      	ldr	r3, [pc, #252]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013250:	789c      	ldrb	r4, [r3, #2]
 8013252:	4b3e      	ldr	r3, [pc, #248]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013254:	785d      	ldrb	r5, [r3, #1]
 8013256:	4b3d      	ldr	r3, [pc, #244]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013258:	791b      	ldrb	r3, [r3, #4]
 801325a:	4a3c      	ldr	r2, [pc, #240]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 801325c:	7952      	ldrb	r2, [r2, #5]
 801325e:	493b      	ldr	r1, [pc, #236]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013260:	78c9      	ldrb	r1, [r1, #3]
 8013262:	483a      	ldr	r0, [pc, #232]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013264:	6880      	ldr	r0, [r0, #8]
 8013266:	2600      	movs	r6, #0
 8013268:	9604      	str	r6, [sp, #16]
 801326a:	9003      	str	r0, [sp, #12]
 801326c:	9102      	str	r1, [sp, #8]
 801326e:	9201      	str	r2, [sp, #4]
 8013270:	9300      	str	r3, [sp, #0]
 8013272:	2300      	movs	r3, #0
 8013274:	2201      	movs	r2, #1
 8013276:	4629      	mov	r1, r5
 8013278:	4620      	mov	r0, r4
 801327a:	f7fc fc7b 	bl	800fb74 <aci_gap_set_authentication_requirement>
 801327e:	4603      	mov	r3, r0
 8013280:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8013282:	7dfb      	ldrb	r3, [r7, #23]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d00f      	beq.n	80132a8 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8013288:	482a      	ldr	r0, [pc, #168]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801328a:	f7fe fc69 	bl	8011b60 <DbgTraceGetFileName>
 801328e:	4601      	mov	r1, r0
 8013290:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8013294:	4a28      	ldr	r2, [pc, #160]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013296:	4829      	ldr	r0, [pc, #164]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013298:	f002 fb96 	bl	80159c8 <iprintf>
 801329c:	7dfb      	ldrb	r3, [r7, #23]
 801329e:	4619      	mov	r1, r3
 80132a0:	482e      	ldr	r0, [pc, #184]	@ (801335c <Ble_Hci_Gap_Gatt_Init+0x514>)
 80132a2:	f002 fb91 	bl	80159c8 <iprintf>
 80132a6:	e00c      	b.n	80132c2 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80132a8:	4822      	ldr	r0, [pc, #136]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132aa:	f7fe fc59 	bl	8011b60 <DbgTraceGetFileName>
 80132ae:	4601      	mov	r1, r0
 80132b0:	f240 4314 	movw	r3, #1044	@ 0x414
 80132b4:	4a20      	ldr	r2, [pc, #128]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80132b6:	4821      	ldr	r0, [pc, #132]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80132b8:	f002 fb86 	bl	80159c8 <iprintf>
 80132bc:	4828      	ldr	r0, [pc, #160]	@ (8013360 <Ble_Hci_Gap_Gatt_Init+0x518>)
 80132be:	f002 fbf3 	bl	8015aa8 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80132c2:	4b22      	ldr	r3, [pc, #136]	@ (801334c <Ble_Hci_Gap_Gatt_Init+0x504>)
 80132c4:	789b      	ldrb	r3, [r3, #2]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d023      	beq.n	8013312 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 80132ca:	f7fc fe9d 	bl	8010008 <aci_gap_configure_filter_accept_list>
 80132ce:	4603      	mov	r3, r0
 80132d0:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80132d2:	7dfb      	ldrb	r3, [r7, #23]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d00f      	beq.n	80132f8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80132d8:	4816      	ldr	r0, [pc, #88]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132da:	f7fe fc41 	bl	8011b60 <DbgTraceGetFileName>
 80132de:	4601      	mov	r1, r0
 80132e0:	f240 431f 	movw	r3, #1055	@ 0x41f
 80132e4:	4a14      	ldr	r2, [pc, #80]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80132e6:	4815      	ldr	r0, [pc, #84]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80132e8:	f002 fb6e 	bl	80159c8 <iprintf>
 80132ec:	7dfb      	ldrb	r3, [r7, #23]
 80132ee:	4619      	mov	r1, r3
 80132f0:	481c      	ldr	r0, [pc, #112]	@ (8013364 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 80132f2:	f002 fb69 	bl	80159c8 <iprintf>
 80132f6:	e00c      	b.n	8013312 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80132f8:	480e      	ldr	r0, [pc, #56]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132fa:	f7fe fc31 	bl	8011b60 <DbgTraceGetFileName>
 80132fe:	4601      	mov	r1, r0
 8013300:	f240 4323 	movw	r3, #1059	@ 0x423
 8013304:	4a0c      	ldr	r2, [pc, #48]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013306:	480d      	ldr	r0, [pc, #52]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013308:	f002 fb5e 	bl	80159c8 <iprintf>
 801330c:	4816      	ldr	r0, [pc, #88]	@ (8013368 <Ble_Hci_Gap_Gatt_Init+0x520>)
 801330e:	f002 fbcb 	bl	8015aa8 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8013312:	4808      	ldr	r0, [pc, #32]	@ (8013334 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013314:	f7fe fc24 	bl	8011b60 <DbgTraceGetFileName>
 8013318:	4601      	mov	r1, r0
 801331a:	f240 4326 	movw	r3, #1062	@ 0x426
 801331e:	4a06      	ldr	r2, [pc, #24]	@ (8013338 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013320:	4806      	ldr	r0, [pc, #24]	@ (801333c <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013322:	f002 fb51 	bl	80159c8 <iprintf>
 8013326:	4811      	ldr	r0, [pc, #68]	@ (801336c <Ble_Hci_Gap_Gatt_Init+0x524>)
 8013328:	f002 fb4e 	bl	80159c8 <iprintf>
}
 801332c:	bf00      	nop
 801332e:	371c      	adds	r7, #28
 8013330:	46bd      	mov	sp, r7
 8013332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013334:	0801712c 	.word	0x0801712c
 8013338:	08018880 	.word	0x08018880
 801333c:	08017148 	.word	0x08017148
 8013340:	08017ae0 	.word	0x08017ae0
 8013344:	08017b00 	.word	0x08017b00
 8013348:	08017b3c 	.word	0x08017b3c
 801334c:	20001208 	.word	0x20001208
 8013350:	08017b68 	.word	0x08017b68
 8013354:	08017ba8 	.word	0x08017ba8
 8013358:	0001b207 	.word	0x0001b207
 801335c:	08017bd8 	.word	0x08017bd8
 8013360:	08017c24 	.word	0x08017c24
 8013364:	08017c60 	.word	0x08017c60
 8013368:	08017ca0 	.word	0x08017ca0
 801336c:	08017cd0 	.word	0x08017cd0

08013370 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b08c      	sub	sp, #48	@ 0x30
 8013374:	af08      	add	r7, sp, #32
 8013376:	4603      	mov	r3, r0
 8013378:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801337a:	2392      	movs	r3, #146	@ 0x92
 801337c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801337e:	4a32      	ldr	r2, [pc, #200]	@ (8013448 <Adv_Request+0xd8>)
 8013380:	79fb      	ldrb	r3, [r7, #7]
 8013382:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8013386:	2300      	movs	r3, #0
 8013388:	9306      	str	r3, [sp, #24]
 801338a:	2300      	movs	r3, #0
 801338c:	9305      	str	r3, [sp, #20]
 801338e:	2300      	movs	r3, #0
 8013390:	9304      	str	r3, [sp, #16]
 8013392:	2300      	movs	r3, #0
 8013394:	9303      	str	r3, [sp, #12]
 8013396:	2300      	movs	r3, #0
 8013398:	9302      	str	r3, [sp, #8]
 801339a:	2300      	movs	r3, #0
 801339c:	9301      	str	r3, [sp, #4]
 801339e:	2300      	movs	r3, #0
 80133a0:	9300      	str	r3, [sp, #0]
 80133a2:	2300      	movs	r3, #0
 80133a4:	22a0      	movs	r2, #160	@ 0xa0
 80133a6:	2180      	movs	r1, #128	@ 0x80
 80133a8:	2000      	movs	r0, #0
 80133aa:	f7fc fa95 	bl	800f8d8 <aci_gap_set_discoverable>
 80133ae:	4603      	mov	r3, r0
 80133b0:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 80133b2:	7bfb      	ldrb	r3, [r7, #15]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d00f      	beq.n	80133d8 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80133b8:	4824      	ldr	r0, [pc, #144]	@ (801344c <Adv_Request+0xdc>)
 80133ba:	f7fe fbd1 	bl	8011b60 <DbgTraceGetFileName>
 80133be:	4601      	mov	r1, r0
 80133c0:	f240 433c 	movw	r3, #1084	@ 0x43c
 80133c4:	4a22      	ldr	r2, [pc, #136]	@ (8013450 <Adv_Request+0xe0>)
 80133c6:	4823      	ldr	r0, [pc, #140]	@ (8013454 <Adv_Request+0xe4>)
 80133c8:	f002 fafe 	bl	80159c8 <iprintf>
 80133cc:	7bfb      	ldrb	r3, [r7, #15]
 80133ce:	4619      	mov	r1, r3
 80133d0:	4821      	ldr	r0, [pc, #132]	@ (8013458 <Adv_Request+0xe8>)
 80133d2:	f002 faf9 	bl	80159c8 <iprintf>
 80133d6:	e00c      	b.n	80133f2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80133d8:	481c      	ldr	r0, [pc, #112]	@ (801344c <Adv_Request+0xdc>)
 80133da:	f7fe fbc1 	bl	8011b60 <DbgTraceGetFileName>
 80133de:	4601      	mov	r1, r0
 80133e0:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80133e4:	4a1a      	ldr	r2, [pc, #104]	@ (8013450 <Adv_Request+0xe0>)
 80133e6:	481b      	ldr	r0, [pc, #108]	@ (8013454 <Adv_Request+0xe4>)
 80133e8:	f002 faee 	bl	80159c8 <iprintf>
 80133ec:	481b      	ldr	r0, [pc, #108]	@ (801345c <Adv_Request+0xec>)
 80133ee:	f002 fb5b 	bl	8015aa8 <puts>
#endif

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80133f2:	491b      	ldr	r1, [pc, #108]	@ (8013460 <Adv_Request+0xf0>)
 80133f4:	2013      	movs	r0, #19
 80133f6:	f7fc fd95 	bl	800ff24 <aci_gap_update_adv_data>
 80133fa:	4603      	mov	r3, r0
 80133fc:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 80133fe:	7bfb      	ldrb	r3, [r7, #15]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d00f      	beq.n	8013424 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8013404:	4811      	ldr	r0, [pc, #68]	@ (801344c <Adv_Request+0xdc>)
 8013406:	f7fe fbab 	bl	8011b60 <DbgTraceGetFileName>
 801340a:	4601      	mov	r1, r0
 801340c:	f240 434f 	movw	r3, #1103	@ 0x44f
 8013410:	4a0f      	ldr	r2, [pc, #60]	@ (8013450 <Adv_Request+0xe0>)
 8013412:	4810      	ldr	r0, [pc, #64]	@ (8013454 <Adv_Request+0xe4>)
 8013414:	f002 fad8 	bl	80159c8 <iprintf>
 8013418:	7bfb      	ldrb	r3, [r7, #15]
 801341a:	4619      	mov	r1, r3
 801341c:	4811      	ldr	r0, [pc, #68]	@ (8013464 <Adv_Request+0xf4>)
 801341e:	f002 fad3 	bl	80159c8 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8013422:	e00d      	b.n	8013440 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8013424:	4809      	ldr	r0, [pc, #36]	@ (801344c <Adv_Request+0xdc>)
 8013426:	f7fe fb9b 	bl	8011b60 <DbgTraceGetFileName>
 801342a:	4601      	mov	r1, r0
 801342c:	f240 4353 	movw	r3, #1107	@ 0x453
 8013430:	4a07      	ldr	r2, [pc, #28]	@ (8013450 <Adv_Request+0xe0>)
 8013432:	4808      	ldr	r0, [pc, #32]	@ (8013454 <Adv_Request+0xe4>)
 8013434:	f002 fac8 	bl	80159c8 <iprintf>
 8013438:	480b      	ldr	r0, [pc, #44]	@ (8013468 <Adv_Request+0xf8>)
 801343a:	f002 fac5 	bl	80159c8 <iprintf>
  return;
 801343e:	bf00      	nop
}
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}
 8013446:	bf00      	nop
 8013448:	20001208 	.word	0x20001208
 801344c:	0801712c 	.word	0x0801712c
 8013450:	08018898 	.word	0x08018898
 8013454:	08017148 	.word	0x08017148
 8013458:	08017cfc 	.word	0x08017cfc
 801345c:	08017d34 	.word	0x08017d34
 8013460:	200000a4 	.word	0x200000a4
 8013464:	08017d5c 	.word	0x08017d5c
 8013468:	08017d90 	.word	0x08017d90

0801346c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801346c:	b580      	push	{r7, lr}
 801346e:	b086      	sub	sp, #24
 8013470:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013472:	f7ff f8ed 	bl	8012650 <LL_FLASH_GetUDN>
 8013476:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8013478:	693b      	ldr	r3, [r7, #16]
 801347a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801347e:	d023      	beq.n	80134c8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013480:	f7ff f8fe 	bl	8012680 <LL_FLASH_GetSTCompanyID>
 8013484:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8013486:	f7ff f8ef 	bl	8012668 <LL_FLASH_GetDeviceID>
 801348a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801348c:	693b      	ldr	r3, [r7, #16]
 801348e:	b2da      	uxtb	r2, r3
 8013490:	4b16      	ldr	r3, [pc, #88]	@ (80134ec <BleGetBdAddress+0x80>)
 8013492:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	0a1b      	lsrs	r3, r3, #8
 8013498:	b2da      	uxtb	r2, r3
 801349a:	4b14      	ldr	r3, [pc, #80]	@ (80134ec <BleGetBdAddress+0x80>)
 801349c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	b2da      	uxtb	r2, r3
 80134a2:	4b12      	ldr	r3, [pc, #72]	@ (80134ec <BleGetBdAddress+0x80>)
 80134a4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	b2da      	uxtb	r2, r3
 80134aa:	4b10      	ldr	r3, [pc, #64]	@ (80134ec <BleGetBdAddress+0x80>)
 80134ac:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80134ae:	68bb      	ldr	r3, [r7, #8]
 80134b0:	0a1b      	lsrs	r3, r3, #8
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	4b0d      	ldr	r3, [pc, #52]	@ (80134ec <BleGetBdAddress+0x80>)
 80134b6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80134b8:	68bb      	ldr	r3, [r7, #8]
 80134ba:	0c1b      	lsrs	r3, r3, #16
 80134bc:	b2da      	uxtb	r2, r3
 80134be:	4b0b      	ldr	r3, [pc, #44]	@ (80134ec <BleGetBdAddress+0x80>)
 80134c0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80134c2:	4b0a      	ldr	r3, [pc, #40]	@ (80134ec <BleGetBdAddress+0x80>)
 80134c4:	617b      	str	r3, [r7, #20]
 80134c6:	e00b      	b.n	80134e0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80134c8:	2000      	movs	r0, #0
 80134ca:	f7fe fc11 	bl	8011cf0 <OTP_Read>
 80134ce:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d002      	beq.n	80134dc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	617b      	str	r3, [r7, #20]
 80134da:	e001      	b.n	80134e0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80134dc:	4b04      	ldr	r3, [pc, #16]	@ (80134f0 <BleGetBdAddress+0x84>)
 80134de:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80134e0:	697b      	ldr	r3, [r7, #20]
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3718      	adds	r7, #24
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	20001200 	.word	0x20001200
 80134f0:	08018830 	.word	0x08018830

080134f4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80134f4:	b580      	push	{r7, lr}
 80134f6:	b082      	sub	sp, #8
 80134f8:	af00      	add	r7, sp, #0
	  DIAG (" BLE Debug ->\tAdvertising cancelled\n\r" );
#endif

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80134fa:	4b1f      	ldr	r3, [pc, #124]	@ (8013578 <Adv_Cancel+0x84>)
 80134fc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013500:	2b05      	cmp	r3, #5
 8013502:	d035      	beq.n	8013570 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013504:	2392      	movs	r3, #146	@ 0x92
 8013506:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8013508:	f7fc f9c2 	bl	800f890 <aci_gap_set_non_discoverable>
 801350c:	4603      	mov	r3, r0
 801350e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8013510:	4b19      	ldr	r3, [pc, #100]	@ (8013578 <Adv_Cancel+0x84>)
 8013512:	2200      	movs	r2, #0
 8013514:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8013518:	79fb      	ldrb	r3, [r7, #7]
 801351a:	2b00      	cmp	r3, #0
 801351c:	d00d      	beq.n	801353a <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 801351e:	4817      	ldr	r0, [pc, #92]	@ (801357c <Adv_Cancel+0x88>)
 8013520:	f7fe fb1e 	bl	8011b60 <DbgTraceGetFileName>
 8013524:	4601      	mov	r1, r0
 8013526:	f240 43a5 	movw	r3, #1189	@ 0x4a5
 801352a:	4a15      	ldr	r2, [pc, #84]	@ (8013580 <Adv_Cancel+0x8c>)
 801352c:	4815      	ldr	r0, [pc, #84]	@ (8013584 <Adv_Cancel+0x90>)
 801352e:	f002 fa4b 	bl	80159c8 <iprintf>
 8013532:	4815      	ldr	r0, [pc, #84]	@ (8013588 <Adv_Cancel+0x94>)
 8013534:	f002 fa48 	bl	80159c8 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8013538:	e01a      	b.n	8013570 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 801353a:	4810      	ldr	r0, [pc, #64]	@ (801357c <Adv_Cancel+0x88>)
 801353c:	f7fe fb10 	bl	8011b60 <DbgTraceGetFileName>
 8013540:	4601      	mov	r1, r0
 8013542:	f240 43a9 	movw	r3, #1193	@ 0x4a9
 8013546:	4a0e      	ldr	r2, [pc, #56]	@ (8013580 <Adv_Cancel+0x8c>)
 8013548:	480e      	ldr	r0, [pc, #56]	@ (8013584 <Adv_Cancel+0x90>)
 801354a:	f002 fa3d 	bl	80159c8 <iprintf>
 801354e:	480f      	ldr	r0, [pc, #60]	@ (801358c <Adv_Cancel+0x98>)
 8013550:	f002 fa3a 	bl	80159c8 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8013554:	4809      	ldr	r0, [pc, #36]	@ (801357c <Adv_Cancel+0x88>)
 8013556:	f7fe fb03 	bl	8011b60 <DbgTraceGetFileName>
 801355a:	4601      	mov	r1, r0
 801355c:	f240 43aa 	movw	r3, #1194	@ 0x4aa
 8013560:	4a07      	ldr	r2, [pc, #28]	@ (8013580 <Adv_Cancel+0x8c>)
 8013562:	4808      	ldr	r0, [pc, #32]	@ (8013584 <Adv_Cancel+0x90>)
 8013564:	f002 fa30 	bl	80159c8 <iprintf>
 8013568:	4809      	ldr	r0, [pc, #36]	@ (8013590 <Adv_Cancel+0x9c>)
 801356a:	f002 fa2d 	bl	80159c8 <iprintf>
  return;
 801356e:	bf00      	nop
 8013570:	bf00      	nop
}
 8013572:	3708      	adds	r7, #8
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	20001208 	.word	0x20001208
 801357c:	0801712c 	.word	0x0801712c
 8013580:	080188a4 	.word	0x080188a4
 8013584:	08017148 	.word	0x08017148
 8013588:	08017db8 	.word	0x08017db8
 801358c:	08017ddc 	.word	0x08017ddc
 8013590:	08017de4 	.word	0x08017de4

08013594 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8013594:	b590      	push	{r4, r7, lr}
 8013596:	b08d      	sub	sp, #52	@ 0x34
 8013598:	af02      	add	r7, sp, #8
 801359a:	4603      	mov	r3, r0
 801359c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	float a_ConnInterval[SIZE_TAB_CONN_INT] = {10, 25}; /* ms */
 801359e:	4a59      	ldr	r2, [pc, #356]	@ (8013704 <BLE_SVC_L2CAP_Conn_Update+0x170>)
 80135a0:	f107 030c 	add.w	r3, r7, #12
 80135a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80135a8:	e883 0003 	stmia.w	r3, {r0, r1}


    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80135ac:	4b56      	ldr	r3, [pc, #344]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80135ae:	781b      	ldrb	r3, [r3, #0]
 80135b0:	3301      	adds	r3, #1
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	f003 0301 	and.w	r3, r3, #1
 80135b8:	bfb8      	it	lt
 80135ba:	425b      	neglt	r3, r3
 80135bc:	b2da      	uxtb	r2, r3
 80135be:	4b52      	ldr	r3, [pc, #328]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80135c0:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80135c2:	4b51      	ldr	r3, [pc, #324]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80135c4:	781b      	ldrb	r3, [r3, #0]
 80135c6:	009b      	lsls	r3, r3, #2
 80135c8:	3328      	adds	r3, #40	@ 0x28
 80135ca:	443b      	add	r3, r7
 80135cc:	3b1c      	subs	r3, #28
 80135ce:	ed93 7a00 	vldr	s14, [r3]
 80135d2:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80135d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80135da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80135de:	ee17 3a90 	vmov	r3, s15
 80135e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 80135e4:	4b48      	ldr	r3, [pc, #288]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	009b      	lsls	r3, r3, #2
 80135ea:	3328      	adds	r3, #40	@ 0x28
 80135ec:	443b      	add	r3, r7
 80135ee:	3b1c      	subs	r3, #28
 80135f0:	ed93 7a00 	vldr	s14, [r3]
 80135f4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80135f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80135fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013600:	ee17 3a90 	vmov	r3, s15
 8013604:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8013606:	2300      	movs	r3, #0
 8013608:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 801360a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 801360e:	843b      	strh	r3, [r7, #32]



  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 8013610:	4b3e      	ldr	r3, [pc, #248]	@ (801370c <BLE_SVC_L2CAP_Conn_Update+0x178>)
 8013612:	781b      	ldrb	r3, [r3, #0]
 8013614:	2b01      	cmp	r3, #1
 8013616:	d15e      	bne.n	80136d6 <BLE_SVC_L2CAP_Conn_Update+0x142>
  {
    mutex = 0;
 8013618:	4b3c      	ldr	r3, [pc, #240]	@ (801370c <BLE_SVC_L2CAP_Conn_Update+0x178>)
 801361a:	2200      	movs	r2, #0
 801361c:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 801361e:	4b3a      	ldr	r3, [pc, #232]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013620:	781b      	ldrb	r3, [r3, #0]
 8013622:	3301      	adds	r3, #1
 8013624:	2b00      	cmp	r3, #0
 8013626:	f003 0301 	and.w	r3, r3, #1
 801362a:	bfb8      	it	lt
 801362c:	425b      	neglt	r3, r3
 801362e:	b2da      	uxtb	r2, r3
 8013630:	4b35      	ldr	r3, [pc, #212]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013632:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8013634:	4b34      	ldr	r3, [pc, #208]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	3328      	adds	r3, #40	@ 0x28
 801363c:	443b      	add	r3, r7
 801363e:	3b1c      	subs	r3, #28
 8013640:	ed93 7a00 	vldr	s14, [r3]
 8013644:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8013648:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801364c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013650:	ee17 3a90 	vmov	r3, s15
 8013654:	83fb      	strh	r3, [r7, #30]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8013656:	4b2c      	ldr	r3, [pc, #176]	@ (8013708 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013658:	781b      	ldrb	r3, [r3, #0]
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	3328      	adds	r3, #40	@ 0x28
 801365e:	443b      	add	r3, r7
 8013660:	3b1c      	subs	r3, #28
 8013662:	ed93 7a00 	vldr	s14, [r3]
 8013666:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801366a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801366e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013672:	ee17 3a90 	vmov	r3, s15
 8013676:	83bb      	strh	r3, [r7, #28]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8013678:	2300      	movs	r3, #0
 801367a:	837b      	strh	r3, [r7, #26]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 801367c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013680:	833b      	strh	r3, [r7, #24]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8013682:	4b23      	ldr	r3, [pc, #140]	@ (8013710 <BLE_SVC_L2CAP_Conn_Update+0x17c>)
 8013684:	8ad8      	ldrh	r0, [r3, #22]
 8013686:	8b7c      	ldrh	r4, [r7, #26]
 8013688:	8bba      	ldrh	r2, [r7, #28]
 801368a:	8bf9      	ldrh	r1, [r7, #30]
 801368c:	8b3b      	ldrh	r3, [r7, #24]
 801368e:	9300      	str	r3, [sp, #0]
 8013690:	4623      	mov	r3, r4
 8013692:	f7fd fa7b 	bl	8010b8c <aci_l2cap_connection_parameter_update_req>
 8013696:	4603      	mov	r3, r0
 8013698:	75fb      	strb	r3, [r7, #23]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 801369a:	7dfb      	ldrb	r3, [r7, #23]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d00d      	beq.n	80136bc <BLE_SVC_L2CAP_Conn_Update+0x128>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 80136a0:	481c      	ldr	r0, [pc, #112]	@ (8013714 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 80136a2:	f7fe fa5d 	bl	8011b60 <DbgTraceGetFileName>
 80136a6:	4601      	mov	r1, r0
 80136a8:	f240 43d7 	movw	r3, #1239	@ 0x4d7
 80136ac:	4a1a      	ldr	r2, [pc, #104]	@ (8013718 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 80136ae:	481b      	ldr	r0, [pc, #108]	@ (801371c <BLE_SVC_L2CAP_Conn_Update+0x188>)
 80136b0:	f002 f98a 	bl	80159c8 <iprintf>
 80136b4:	481a      	ldr	r0, [pc, #104]	@ (8013720 <BLE_SVC_L2CAP_Conn_Update+0x18c>)
 80136b6:	f002 f987 	bl	80159c8 <iprintf>
 80136ba:	e00c      	b.n	80136d6 <BLE_SVC_L2CAP_Conn_Update+0x142>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 80136bc:	4815      	ldr	r0, [pc, #84]	@ (8013714 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 80136be:	f7fe fa4f 	bl	8011b60 <DbgTraceGetFileName>
 80136c2:	4601      	mov	r1, r0
 80136c4:	f240 43db 	movw	r3, #1243	@ 0x4db
 80136c8:	4a13      	ldr	r2, [pc, #76]	@ (8013718 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 80136ca:	4814      	ldr	r0, [pc, #80]	@ (801371c <BLE_SVC_L2CAP_Conn_Update+0x188>)
 80136cc:	f002 f97c 	bl	80159c8 <iprintf>
 80136d0:	4814      	ldr	r0, [pc, #80]	@ (8013724 <BLE_SVC_L2CAP_Conn_Update+0x190>)
 80136d2:	f002 f979 	bl	80159c8 <iprintf>
  }
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */



  if (ret != BLE_STATUS_SUCCESS)
 80136d6:	7dbb      	ldrb	r3, [r7, #22]
 80136d8:	2b00      	cmp	r3, #0
 80136da:	d003      	beq.n	80136e4 <BLE_SVC_L2CAP_Conn_Update+0x150>
  {
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 80136dc:	4812      	ldr	r0, [pc, #72]	@ (8013728 <BLE_SVC_L2CAP_Conn_Update+0x194>)
 80136de:	f7ee fed3 	bl	8002488 <DIAG>
  }


  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 80136e2:	e00c      	b.n	80136fe <BLE_SVC_L2CAP_Conn_Update+0x16a>
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 80136e4:	4811      	ldr	r0, [pc, #68]	@ (801372c <BLE_SVC_L2CAP_Conn_Update+0x198>)
 80136e6:	f7ee fecf 	bl	8002488 <DIAG>
    DIAG("\t\t- Connection Interval:   %d - %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 80136ea:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80136ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80136ee:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80136f0:	8c3b      	ldrh	r3, [r7, #32]
 80136f2:	9300      	str	r3, [sp, #0]
 80136f4:	4603      	mov	r3, r0
 80136f6:	480e      	ldr	r0, [pc, #56]	@ (8013730 <BLE_SVC_L2CAP_Conn_Update+0x19c>)
 80136f8:	f7ee fec6 	bl	8002488 <DIAG>
  return;
 80136fc:	bf00      	nop
}
 80136fe:	372c      	adds	r7, #44	@ 0x2c
 8013700:	46bd      	mov	sp, r7
 8013702:	bd90      	pop	{r4, r7, pc}
 8013704:	08017f34 	.word	0x08017f34
 8013708:	20001290 	.word	0x20001290
 801370c:	20001291 	.word	0x20001291
 8013710:	20001208 	.word	0x20001208
 8013714:	0801712c 	.word	0x0801712c
 8013718:	080188b0 	.word	0x080188b0
 801371c:	08017148 	.word	0x08017148
 8013720:	08017e00 	.word	0x08017e00
 8013724:	08017e28 	.word	0x08017e28
 8013728:	08017e58 	.word	0x08017e58
 801372c:	08017e90 	.word	0x08017e90
 8013730:	08017ecc 	.word	0x08017ecc

08013734 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8013738:	4b08      	ldr	r3, [pc, #32]	@ (801375c <Connection_Interval_Update_Req+0x28>)
 801373a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801373e:	2b01      	cmp	r3, #1
 8013740:	d00a      	beq.n	8013758 <Connection_Interval_Update_Req+0x24>
 8013742:	4b06      	ldr	r3, [pc, #24]	@ (801375c <Connection_Interval_Update_Req+0x28>)
 8013744:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013748:	2b00      	cmp	r3, #0
 801374a:	d005      	beq.n	8013758 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 801374c:	4b03      	ldr	r3, [pc, #12]	@ (801375c <Connection_Interval_Update_Req+0x28>)
 801374e:	8adb      	ldrh	r3, [r3, #22]
 8013750:	4618      	mov	r0, r3
 8013752:	f7ff ff1f 	bl	8013594 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8013756:	bf00      	nop
 8013758:	bf00      	nop
}
 801375a:	bd80      	pop	{r7, pc}
 801375c:	20001208 	.word	0x20001208

08013760 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b082      	sub	sp, #8
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8013768:	2100      	movs	r1, #0
 801376a:	2004      	movs	r0, #4
 801376c:	f001 ff4e 	bl	801560c <UTIL_SEQ_SetTask>

  return;
 8013770:	bf00      	nop
}
 8013772:	3708      	adds	r7, #8
 8013774:	46bd      	mov	sp, r7
 8013776:	bd80      	pop	{r7, pc}

08013778 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b082      	sub	sp, #8
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8013780:	2001      	movs	r0, #1
 8013782:	f001 ffaf 	bl	80156e4 <UTIL_SEQ_SetEvt>

  return;
 8013786:	bf00      	nop
}
 8013788:	3708      	adds	r7, #8
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}

0801378e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 801378e:	b580      	push	{r7, lr}
 8013790:	b082      	sub	sp, #8
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8013796:	2001      	movs	r0, #1
 8013798:	f001 ffc4 	bl	8015724 <UTIL_SEQ_WaitEvt>

  return;
 801379c:	bf00      	nop
}
 801379e:	3708      	adds	r7, #8
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}

080137a4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b084      	sub	sp, #16
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	685b      	ldr	r3, [r3, #4]
 80137b4:	3308      	adds	r3, #8
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fd fb70 	bl	8010e9c <SVCCTL_UserEvtRx>
 80137bc:	4603      	mov	r3, r0
 80137be:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 80137c0:	7afb      	ldrb	r3, [r7, #11]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d003      	beq.n	80137ce <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2201      	movs	r2, #1
 80137ca:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 80137cc:	e003      	b.n	80137d6 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2200      	movs	r2, #0
 80137d2:	701a      	strb	r2, [r3, #0]
  return;
 80137d4:	bf00      	nop
}
 80137d6:	3710      	adds	r7, #16
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	4603      	mov	r3, r0
 80137e4:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80137e6:	79fb      	ldrb	r3, [r7, #7]
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d002      	beq.n	80137f2 <BLE_StatusNot+0x16>
 80137ec:	2b01      	cmp	r3, #1
 80137ee:	d006      	beq.n	80137fe <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80137f0:	e00b      	b.n	801380a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80137f2:	233f      	movs	r3, #63	@ 0x3f
 80137f4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80137f6:	68f8      	ldr	r0, [r7, #12]
 80137f8:	f001 ff34 	bl	8015664 <UTIL_SEQ_PauseTask>
      break;
 80137fc:	e005      	b.n	801380a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80137fe:	233f      	movs	r3, #63	@ 0x3f
 8013800:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8013802:	68f8      	ldr	r0, [r7, #12]
 8013804:	f001 ff4e 	bl	80156a4 <UTIL_SEQ_ResumeTask>
      break;
 8013808:	bf00      	nop
  }

  return;
 801380a:	bf00      	nop
}
 801380c:	3710      	adds	r7, #16
 801380e:	46bd      	mov	sp, r7
 8013810:	bd80      	pop	{r7, pc}
	...

08013814 <ALL_SENs_Task>:

/* USER CODE BEGIN PFP */


void ALL_SENs_Task (void)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	af00      	add	r7, sp, #0
	if ( tsBle.App.ScgSetTask )
 8013818:	4b06      	ldr	r3, [pc, #24]	@ (8013834 <ALL_SENs_Task+0x20>)
 801381a:	7a5b      	ldrb	r3, [r3, #9]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d006      	beq.n	801382e <ALL_SENs_Task+0x1a>
	{
		tsBle.App.ScgSetTask = false;
 8013820:	4b04      	ldr	r3, [pc, #16]	@ (8013834 <ALL_SENs_Task+0x20>)
 8013822:	2200      	movs	r2, #0
 8013824:	725a      	strb	r2, [r3, #9]
		Custom_STM_App_Update_Char(CUSTOM_STM_ALL_SENS, (uint8_t*)(tsStreamSCG.u8TxData));
 8013826:	4904      	ldr	r1, [pc, #16]	@ (8013838 <ALL_SENs_Task+0x24>)
 8013828:	2003      	movs	r0, #3
 801382a:	f000 fc95 	bl	8014158 <Custom_STM_App_Update_Char>
	}
}
 801382e:	bf00      	nop
 8013830:	bd80      	pop	{r7, pc}
 8013832:	bf00      	nop
 8013834:	200011f4 	.word	0x200011f4
 8013838:	2000063a 	.word	0x2000063a

0801383c <ACCEL_Task>:
//--------------------------------------------------------------------------------------------

void ACCEL_Task(void)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	af00      	add	r7, sp, #0
	if ( tsBle.App.AccelSetTask )
 8013840:	4b06      	ldr	r3, [pc, #24]	@ (801385c <ACCEL_Task+0x20>)
 8013842:	7a9b      	ldrb	r3, [r3, #10]
 8013844:	2b00      	cmp	r3, #0
 8013846:	d006      	beq.n	8013856 <ACCEL_Task+0x1a>
	{
		tsBle.App.AccelSetTask = false;
 8013848:	4b04      	ldr	r3, [pc, #16]	@ (801385c <ACCEL_Task+0x20>)
 801384a:	2200      	movs	r2, #0
 801384c:	729a      	strb	r2, [r3, #10]
		Custom_STM_App_Update_Char(CUSTOM_STM_ACCEL_S, (uint8_t*)(tsStreamIMU.u8TxData));
 801384e:	4904      	ldr	r1, [pc, #16]	@ (8013860 <ACCEL_Task+0x24>)
 8013850:	2000      	movs	r0, #0
 8013852:	f000 fc81 	bl	8014158 <Custom_STM_App_Update_Char>
	}
}
 8013856:	bf00      	nop
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	200011f4 	.word	0x200011f4
 8013860:	2000095e 	.word	0x2000095e

08013864 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8013864:	b580      	push	{r7, lr}
 8013866:	b082      	sub	sp, #8
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	2b08      	cmp	r3, #8
 8013872:	d831      	bhi.n	80138d8 <Custom_STM_App_Notification+0x74>
 8013874:	a201      	add	r2, pc, #4	@ (adr r2, 801387c <Custom_STM_App_Notification+0x18>)
 8013876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801387a:	bf00      	nop
 801387c:	080138a1 	.word	0x080138a1
 8013880:	080138b5 	.word	0x080138b5
 8013884:	080138d9 	.word	0x080138d9
 8013888:	080138d9 	.word	0x080138d9
 801388c:	080138d9 	.word	0x080138d9
 8013890:	080138c3 	.word	0x080138c3
 8013894:	080138cb 	.word	0x080138cb
 8013898:	080138d9 	.word	0x080138d9
 801389c:	080138d9 	.word	0x080138d9

    /* SENSOR_DATA */
    case CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */

    	tsBle.App.McgNotification = true;
 80138a0:	4b10      	ldr	r3, [pc, #64]	@ (80138e4 <Custom_STM_App_Notification+0x80>)
 80138a2:	2201      	movs	r2, #1
 80138a4:	719a      	strb	r2, [r3, #6]
    	tsBle.App.AccelNotification = true;
 80138a6:	4b0f      	ldr	r3, [pc, #60]	@ (80138e4 <Custom_STM_App_Notification+0x80>)
 80138a8:	2201      	movs	r2, #1
 80138aa:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Enabled ]\n\r");
 80138ac:	480e      	ldr	r0, [pc, #56]	@ (80138e8 <Custom_STM_App_Notification+0x84>)
 80138ae:	f7ee fdeb 	bl	8002488 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */
      break;
 80138b2:	e012      	b.n	80138da <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */


    	tsBle.App.AccelNotification = false;
 80138b4:	4b0b      	ldr	r3, [pc, #44]	@ (80138e4 <Custom_STM_App_Notification+0x80>)
 80138b6:	2200      	movs	r2, #0
 80138b8:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Disabled ]\n\r");
 80138ba:	480c      	ldr	r0, [pc, #48]	@ (80138ec <Custom_STM_App_Notification+0x88>)
 80138bc:	f7ee fde4 	bl	8002488 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */
      break;
 80138c0:	e00b      	b.n	80138da <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */

//    	tsBle.App.McgNotification = true;
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Enabled ]\n\r");
 80138c2:	480b      	ldr	r0, [pc, #44]	@ (80138f0 <Custom_STM_App_Notification+0x8c>)
 80138c4:	f7ee fde0 	bl	8002488 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */
      break;
 80138c8:	e007      	b.n	80138da <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */

    	tsBle.App.McgNotification = false;
 80138ca:	4b06      	ldr	r3, [pc, #24]	@ (80138e4 <Custom_STM_App_Notification+0x80>)
 80138cc:	2200      	movs	r2, #0
 80138ce:	719a      	strb	r2, [r3, #6]
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Disabled ]\n\r");
 80138d0:	4808      	ldr	r0, [pc, #32]	@ (80138f4 <Custom_STM_App_Notification+0x90>)
 80138d2:	f7ee fdd9 	bl	8002488 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */
      break;
 80138d6:	e000      	b.n	80138da <Custom_STM_App_Notification+0x76>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80138d8:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80138da:	bf00      	nop
}
 80138dc:	3708      	adds	r7, #8
 80138de:	46bd      	mov	sp, r7
 80138e0:	bd80      	pop	{r7, pc}
 80138e2:	bf00      	nop
 80138e4:	200011f4 	.word	0x200011f4
 80138e8:	08017f3c 	.word	0x08017f3c
 80138ec:	08017f6c 	.word	0x08017f6c
 80138f0:	08017fa0 	.word	0x08017fa0
 80138f4:	08017fd0 	.word	0x08017fd0

080138f8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b083      	sub	sp, #12
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	781b      	ldrb	r3, [r3, #0]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d002      	beq.n	801390e <Custom_APP_Notification+0x16>
 8013908:	2b01      	cmp	r3, #1
 801390a:	d002      	beq.n	8013912 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 801390c:	e002      	b.n	8013914 <Custom_APP_Notification+0x1c>
      break;
 801390e:	bf00      	nop
 8013910:	e000      	b.n	8013914 <Custom_APP_Notification+0x1c>
      break;
 8013912:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8013914:	bf00      	nop
}
 8013916:	370c      	adds	r7, #12
 8013918:	46bd      	mov	sp, r7
 801391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801391e:	4770      	bx	lr

08013920 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8013920:	b480      	push	{r7}
 8013922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8013924:	bf00      	nop
}
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr
	...

08013930 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b090      	sub	sp, #64	@ 0x40
 8013934:	af02      	add	r7, sp, #8
 8013936:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8013938:	2300      	movs	r3, #0
 801393a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	3301      	adds	r3, #1
 8013942:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8013944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013946:	781b      	ldrb	r3, [r3, #0]
 8013948:	2bff      	cmp	r3, #255	@ 0xff
 801394a:	f040 81ae 	bne.w	8013caa <Custom_STM_Event_Handler+0x37a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 801394e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013950:	3302      	adds	r3, #2
 8013952:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8013954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013956:	881b      	ldrh	r3, [r3, #0]
 8013958:	b29b      	uxth	r3, r3
 801395a:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 801395e:	2b1a      	cmp	r3, #26
 8013960:	f200 819d 	bhi.w	8013c9e <Custom_STM_Event_Handler+0x36e>
 8013964:	a201      	add	r2, pc, #4	@ (adr r2, 801396c <Custom_STM_Event_Handler+0x3c>)
 8013966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801396a:	bf00      	nop
 801396c:	080139d9 	.word	0x080139d9
 8013970:	08013c9f 	.word	0x08013c9f
 8013974:	08013c9f 	.word	0x08013c9f
 8013978:	08013c9f 	.word	0x08013c9f
 801397c:	08013c9f 	.word	0x08013c9f
 8013980:	08013c9f 	.word	0x08013c9f
 8013984:	08013c9f 	.word	0x08013c9f
 8013988:	08013c9f 	.word	0x08013c9f
 801398c:	08013c9f 	.word	0x08013c9f
 8013990:	08013c9f 	.word	0x08013c9f
 8013994:	08013c9f 	.word	0x08013c9f
 8013998:	08013c9f 	.word	0x08013c9f
 801399c:	08013c9f 	.word	0x08013c9f
 80139a0:	08013c9f 	.word	0x08013c9f
 80139a4:	08013c9f 	.word	0x08013c9f
 80139a8:	08013c9f 	.word	0x08013c9f
 80139ac:	08013c9f 	.word	0x08013c9f
 80139b0:	08013c9f 	.word	0x08013c9f
 80139b4:	08013c9f 	.word	0x08013c9f
 80139b8:	08013c27 	.word	0x08013c27
 80139bc:	08013c9f 	.word	0x08013c9f
 80139c0:	08013c9f 	.word	0x08013c9f
 80139c4:	08013c9f 	.word	0x08013c9f
 80139c8:	08013c9f 	.word	0x08013c9f
 80139cc:	08013c9f 	.word	0x08013c9f
 80139d0:	08013c9f 	.word	0x08013c9f
 80139d4:	08013c81 	.word	0x08013c81
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80139d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139da:	3302      	adds	r3, #2
 80139dc:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80139de:	6a3b      	ldr	r3, [r7, #32]
 80139e0:	885b      	ldrh	r3, [r3, #2]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	461a      	mov	r2, r3
 80139e6:	4ba0      	ldr	r3, [pc, #640]	@ (8013c68 <Custom_STM_Event_Handler+0x338>)
 80139e8:	885b      	ldrh	r3, [r3, #2]
 80139ea:	3302      	adds	r3, #2
 80139ec:	429a      	cmp	r2, r3
 80139ee:	d119      	bne.n	8013a24 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80139f0:	2301      	movs	r3, #1
 80139f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 80139f6:	6a3b      	ldr	r3, [r7, #32]
 80139f8:	7a1b      	ldrb	r3, [r3, #8]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d002      	beq.n	8013a04 <Custom_STM_Event_Handler+0xd4>
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d008      	beq.n	8013a14 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8013a02:	e10f      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT;
 8013a04:	2301      	movs	r3, #1
 8013a06:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a08:	f107 030c 	add.w	r3, r7, #12
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	f7ff ff29 	bl	8013864 <Custom_STM_App_Notification>
                break;
 8013a12:	e107      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT;
 8013a14:	2300      	movs	r3, #0
 8013a16:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a18:	f107 030c 	add.w	r3, r7, #12
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	f7ff ff21 	bl	8013864 <Custom_STM_App_Notification>
                break;
 8013a22:	e0ff      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013a24:	6a3b      	ldr	r3, [r7, #32]
 8013a26:	885b      	ldrh	r3, [r3, #2]
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	4b8e      	ldr	r3, [pc, #568]	@ (8013c68 <Custom_STM_Event_Handler+0x338>)
 8013a2e:	889b      	ldrh	r3, [r3, #4]
 8013a30:	3302      	adds	r3, #2
 8013a32:	429a      	cmp	r2, r3
 8013a34:	d119      	bne.n	8013a6a <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013a36:	2301      	movs	r3, #1
 8013a38:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8013a3c:	6a3b      	ldr	r3, [r7, #32]
 8013a3e:	7a1b      	ldrb	r3, [r3, #8]
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d002      	beq.n	8013a4a <Custom_STM_Event_Handler+0x11a>
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d008      	beq.n	8013a5a <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8013a48:	e0ec      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_DISABLED_EVT;
 8013a4a:	2303      	movs	r3, #3
 8013a4c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a4e:	f107 030c 	add.w	r3, r7, #12
 8013a52:	4618      	mov	r0, r3
 8013a54:	f7ff ff06 	bl	8013864 <Custom_STM_App_Notification>
                break;
 8013a58:	e0e4      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_ENABLED_EVT;
 8013a5a:	2302      	movs	r3, #2
 8013a5c:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a5e:	f107 030c 	add.w	r3, r7, #12
 8013a62:	4618      	mov	r0, r3
 8013a64:	f7ff fefe 	bl	8013864 <Custom_STM_App_Notification>
                break;
 8013a68:	e0dc      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013a6a:	6a3b      	ldr	r3, [r7, #32]
 8013a6c:	885b      	ldrh	r3, [r3, #2]
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	461a      	mov	r2, r3
 8013a72:	4b7d      	ldr	r3, [pc, #500]	@ (8013c68 <Custom_STM_Event_Handler+0x338>)
 8013a74:	891b      	ldrh	r3, [r3, #8]
 8013a76:	3302      	adds	r3, #2
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d119      	bne.n	8013ab0 <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013a7c:	2301      	movs	r3, #1
 8013a7e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8013a82:	6a3b      	ldr	r3, [r7, #32]
 8013a84:	7a1b      	ldrb	r3, [r3, #8]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d002      	beq.n	8013a90 <Custom_STM_Event_Handler+0x160>
 8013a8a:	2b01      	cmp	r3, #1
 8013a8c:	d008      	beq.n	8013aa0 <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 8013a8e:	e0c9      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT;
 8013a90:	2306      	movs	r3, #6
 8013a92:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013a94:	f107 030c 	add.w	r3, r7, #12
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7ff fee3 	bl	8013864 <Custom_STM_App_Notification>
                break;
 8013a9e:	e0c1      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT;
 8013aa0:	2305      	movs	r3, #5
 8013aa2:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013aa4:	f107 030c 	add.w	r3, r7, #12
 8013aa8:	4618      	mov	r0, r3
 8013aaa:	f7ff fedb 	bl	8013864 <Custom_STM_App_Notification>
                break;
 8013aae:	e0b9      	b.n	8013c24 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013ab0:	6a3b      	ldr	r3, [r7, #32]
 8013ab2:	885b      	ldrh	r3, [r3, #2]
 8013ab4:	b29b      	uxth	r3, r3
 8013ab6:	461a      	mov	r2, r3
 8013ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8013c68 <Custom_STM_Event_Handler+0x338>)
 8013aba:	88db      	ldrh	r3, [r3, #6]
 8013abc:	3301      	adds	r3, #1
 8013abe:	429a      	cmp	r2, r3
 8013ac0:	f040 80ef 	bne.w	8013ca2 <Custom_STM_Event_Handler+0x372>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */



            memcpy (tsCmd.u8RxCmd, attribute_modified->Attr_Data, 10);
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	f103 0208 	add.w	r2, r3, #8
 8013ad0:	4b66      	ldr	r3, [pc, #408]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013ad2:	3301      	adds	r3, #1
 8013ad4:	6810      	ldr	r0, [r2, #0]
 8013ad6:	6851      	ldr	r1, [r2, #4]
 8013ad8:	6018      	str	r0, [r3, #0]
 8013ada:	6059      	str	r1, [r3, #4]
 8013adc:	8912      	ldrh	r2, [r2, #8]
 8013ade:	811a      	strh	r2, [r3, #8]
            printf (tsCmd.c8RxCmd, tsCmd.u8RxCmd, 10);
 8013ae0:	220a      	movs	r2, #10
 8013ae2:	4963      	ldr	r1, [pc, #396]	@ (8013c70 <Custom_STM_Event_Handler+0x340>)
 8013ae4:	4863      	ldr	r0, [pc, #396]	@ (8013c74 <Custom_STM_Event_Handler+0x344>)
 8013ae6:	f001 ff6f 	bl	80159c8 <iprintf>
        	//DIAG( "CMD In -> %c%c%c%c%c%c%d%c %d%d\r\n", tsCmd.u8RxCmd[0], tsCmd.u8RxCmd[1], tsCmd.u8RxCmd[2], tsCmd.u8RxCmd[3], tsCmd.u8RxCmd[4], tsCmd.u8RxCmd[5], tsCmd.u8RxCmd[6], tsCmd.u8RxCmd[7], tsCmd.u8RxCmd[8], tsCmd.u8RxCmd[9] );

            char str[]="";
 8013aea:	2300      	movs	r3, #0
 8013aec:	723b      	strb	r3, [r7, #8]
            for (uint8_t i=0 ; i < 10 ; i++)
 8013aee:	2300      	movs	r3, #0
 8013af0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013af4:	e090      	b.n	8013c18 <Custom_STM_Event_Handler+0x2e8>
            {
            	// Check for CMD:  'SN'
            	if( strncmp( &tsCmd.u8RxCmd[i], "WS,", 3 ) == 0 )
 8013af6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013afa:	4a5c      	ldr	r2, [pc, #368]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013afc:	4413      	add	r3, r2
 8013afe:	3301      	adds	r3, #1
 8013b00:	2203      	movs	r2, #3
 8013b02:	495d      	ldr	r1, [pc, #372]	@ (8013c78 <Custom_STM_Event_Handler+0x348>)
 8013b04:	4618      	mov	r0, r3
 8013b06:	f002 f8ef 	bl	8015ce8 <strncmp>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d17e      	bne.n	8013c0e <Custom_STM_Event_Handler+0x2de>
                    {
							 if (tsCmd.u8RxCmd[8] == STOP)			{ tsCmd.MODE 	= Stop;}
 8013b10:	4b56      	ldr	r3, [pc, #344]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b12:	7a5b      	ldrb	r3, [r3, #9]
 8013b14:	2b01      	cmp	r3, #1
 8013b16:	d103      	bne.n	8013b20 <Custom_STM_Event_Handler+0x1f0>
 8013b18:	4b54      	ldr	r3, [pc, #336]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b1a:	2200      	movs	r2, #0
 8013b1c:	755a      	strb	r2, [r3, #21]
 8013b1e:	e076      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == START)			{ tsCmd.MODE 	= Start;}
 8013b20:	4b52      	ldr	r3, [pc, #328]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b22:	7a5b      	ldrb	r3, [r3, #9]
 8013b24:	2b02      	cmp	r3, #2
 8013b26:	d103      	bne.n	8013b30 <Custom_STM_Event_Handler+0x200>
 8013b28:	4b50      	ldr	r3, [pc, #320]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	755a      	strb	r2, [r3, #21]
 8013b2e:	e06e      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_ON)		{ tsCmd.ECG 	= true; }
 8013b30:	4b4e      	ldr	r3, [pc, #312]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b32:	7a5b      	ldrb	r3, [r3, #9]
 8013b34:	2b03      	cmp	r3, #3
 8013b36:	d103      	bne.n	8013b40 <Custom_STM_Event_Handler+0x210>
 8013b38:	4b4c      	ldr	r3, [pc, #304]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b3a:	2201      	movs	r2, #1
 8013b3c:	761a      	strb	r2, [r3, #24]
 8013b3e:	e066      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_OFF)		{ tsCmd.ECG 	= false;}
 8013b40:	4b4a      	ldr	r3, [pc, #296]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b42:	7a5b      	ldrb	r3, [r3, #9]
 8013b44:	2b04      	cmp	r3, #4
 8013b46:	d103      	bne.n	8013b50 <Custom_STM_Event_Handler+0x220>
 8013b48:	4b48      	ldr	r3, [pc, #288]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	761a      	strb	r2, [r3, #24]
 8013b4e:	e05e      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_ON)	{ tsCmd.ECG_N50 = true;}
 8013b50:	4b46      	ldr	r3, [pc, #280]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b52:	7a5b      	ldrb	r3, [r3, #9]
 8013b54:	2b05      	cmp	r3, #5
 8013b56:	d103      	bne.n	8013b60 <Custom_STM_Event_Handler+0x230>
 8013b58:	4b44      	ldr	r3, [pc, #272]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	765a      	strb	r2, [r3, #25]
 8013b5e:	e056      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_OFF)	{ tsCmd.ECG_N50 = false;}
 8013b60:	4b42      	ldr	r3, [pc, #264]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b62:	7a5b      	ldrb	r3, [r3, #9]
 8013b64:	2b06      	cmp	r3, #6
 8013b66:	d103      	bne.n	8013b70 <Custom_STM_Event_Handler+0x240>
 8013b68:	4b40      	ldr	r3, [pc, #256]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	765a      	strb	r2, [r3, #25]
 8013b6e:	e04e      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_ON)	{ tsCmd.ECG_HPF = true;}
 8013b70:	4b3e      	ldr	r3, [pc, #248]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b72:	7a5b      	ldrb	r3, [r3, #9]
 8013b74:	2b07      	cmp	r3, #7
 8013b76:	d103      	bne.n	8013b80 <Custom_STM_Event_Handler+0x250>
 8013b78:	4b3c      	ldr	r3, [pc, #240]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b7a:	2201      	movs	r2, #1
 8013b7c:	769a      	strb	r2, [r3, #26]
 8013b7e:	e046      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_OFF)	{ tsCmd.ECG_HPF = false;}
 8013b80:	4b3a      	ldr	r3, [pc, #232]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b82:	7a5b      	ldrb	r3, [r3, #9]
 8013b84:	2b08      	cmp	r3, #8
 8013b86:	d103      	bne.n	8013b90 <Custom_STM_Event_Handler+0x260>
 8013b88:	4b38      	ldr	r3, [pc, #224]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	769a      	strb	r2, [r3, #26]
 8013b8e:	e03e      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_ON)		{ tsCmd.MCG 	= true;}
 8013b90:	4b36      	ldr	r3, [pc, #216]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b92:	7a5b      	ldrb	r3, [r3, #9]
 8013b94:	2b09      	cmp	r3, #9
 8013b96:	d103      	bne.n	8013ba0 <Custom_STM_Event_Handler+0x270>
 8013b98:	4b34      	ldr	r3, [pc, #208]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	76da      	strb	r2, [r3, #27]
 8013b9e:	e036      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_OFF)		{ tsCmd.MCG 	= false;}
 8013ba0:	4b32      	ldr	r3, [pc, #200]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013ba2:	7a5b      	ldrb	r3, [r3, #9]
 8013ba4:	2b0a      	cmp	r3, #10
 8013ba6:	d103      	bne.n	8013bb0 <Custom_STM_Event_Handler+0x280>
 8013ba8:	4b30      	ldr	r3, [pc, #192]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013baa:	2200      	movs	r2, #0
 8013bac:	76da      	strb	r2, [r3, #27]
 8013bae:	e02e      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_ON)	{ tsCmd.MCG_N50 = true;}
 8013bb0:	4b2e      	ldr	r3, [pc, #184]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bb2:	7a5b      	ldrb	r3, [r3, #9]
 8013bb4:	2b0b      	cmp	r3, #11
 8013bb6:	d103      	bne.n	8013bc0 <Custom_STM_Event_Handler+0x290>
 8013bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bba:	2201      	movs	r2, #1
 8013bbc:	771a      	strb	r2, [r3, #28]
 8013bbe:	e026      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_OFF)	{ tsCmd.MCG_N50 = false;}
 8013bc0:	4b2a      	ldr	r3, [pc, #168]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bc2:	7a5b      	ldrb	r3, [r3, #9]
 8013bc4:	2b0c      	cmp	r3, #12
 8013bc6:	d103      	bne.n	8013bd0 <Custom_STM_Event_Handler+0x2a0>
 8013bc8:	4b28      	ldr	r3, [pc, #160]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bca:	2200      	movs	r2, #0
 8013bcc:	771a      	strb	r2, [r3, #28]
 8013bce:	e01e      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_ON)	{ tsCmd.MCG_HPF = true;}
 8013bd0:	4b26      	ldr	r3, [pc, #152]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bd2:	7a5b      	ldrb	r3, [r3, #9]
 8013bd4:	2b0d      	cmp	r3, #13
 8013bd6:	d103      	bne.n	8013be0 <Custom_STM_Event_Handler+0x2b0>
 8013bd8:	4b24      	ldr	r3, [pc, #144]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bda:	2201      	movs	r2, #1
 8013bdc:	775a      	strb	r2, [r3, #29]
 8013bde:	e016      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_OFF)	{ tsCmd.MCG_HPF = false;}
 8013be0:	4b22      	ldr	r3, [pc, #136]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013be2:	7a5b      	ldrb	r3, [r3, #9]
 8013be4:	2b0e      	cmp	r3, #14
 8013be6:	d103      	bne.n	8013bf0 <Custom_STM_Event_Handler+0x2c0>
 8013be8:	4b20      	ldr	r3, [pc, #128]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bea:	2200      	movs	r2, #0
 8013bec:	775a      	strb	r2, [r3, #29]
 8013bee:	e00e      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_ON)		{ tsCmd.LED 	= true; }
 8013bf0:	4b1e      	ldr	r3, [pc, #120]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bf2:	7a5b      	ldrb	r3, [r3, #9]
 8013bf4:	2b0f      	cmp	r3, #15
 8013bf6:	d103      	bne.n	8013c00 <Custom_STM_Event_Handler+0x2d0>
 8013bf8:	4b1c      	ldr	r3, [pc, #112]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013bfa:	2201      	movs	r2, #1
 8013bfc:	75da      	strb	r2, [r3, #23]
 8013bfe:	e006      	b.n	8013c0e <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_OFF)  		{ tsCmd.LED 	= false; }
 8013c00:	4b1a      	ldr	r3, [pc, #104]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013c02:	7a5b      	ldrb	r3, [r3, #9]
 8013c04:	2b10      	cmp	r3, #16
 8013c06:	d102      	bne.n	8013c0e <Custom_STM_Event_Handler+0x2de>
 8013c08:	4b18      	ldr	r3, [pc, #96]	@ (8013c6c <Custom_STM_Event_Handler+0x33c>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	75da      	strb	r2, [r3, #23]
            for (uint8_t i=0 ; i < 10 ; i++)
 8013c0e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013c12:	3301      	adds	r3, #1
 8013c14:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013c18:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013c1c:	2b09      	cmp	r3, #9
 8013c1e:	f67f af6a 	bls.w	8013af6 <Custom_STM_Event_Handler+0x1c6>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8013c22:	e03e      	b.n	8013ca2 <Custom_STM_Event_Handler+0x372>
 8013c24:	e03d      	b.n	8013ca2 <Custom_STM_Event_Handler+0x372>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8013c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c28:	3302      	adds	r3, #2
 8013c2a:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c2e:	885b      	ldrh	r3, [r3, #2]
 8013c30:	b29b      	uxth	r3, r3
 8013c32:	461a      	mov	r2, r3
 8013c34:	4b0c      	ldr	r3, [pc, #48]	@ (8013c68 <Custom_STM_Event_Handler+0x338>)
 8013c36:	895b      	ldrh	r3, [r3, #10]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d133      	bne.n	8013ca6 <Custom_STM_Event_Handler+0x376>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013c3e:	2301      	movs	r3, #1
 8013c40:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 8013c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c46:	881b      	ldrh	r3, [r3, #0]
 8013c48:	b29b      	uxth	r3, r3
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f7fc fd68 	bl	8010720 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */


 			aci_gatt_update_char_value(	CustomContext.CustomS_DataHdle,
 8013c50:	4b05      	ldr	r3, [pc, #20]	@ (8013c68 <Custom_STM_Event_Handler+0x338>)
 8013c52:	8818      	ldrh	r0, [r3, #0]
 8013c54:	4b04      	ldr	r3, [pc, #16]	@ (8013c68 <Custom_STM_Event_Handler+0x338>)
 8013c56:	8959      	ldrh	r1, [r3, #10]
 8013c58:	4b08      	ldr	r3, [pc, #32]	@ (8013c7c <Custom_STM_Event_Handler+0x34c>)
 8013c5a:	9300      	str	r3, [sp, #0]
 8013c5c:	2314      	movs	r3, #20
 8013c5e:	2200      	movs	r2, #0
 8013c60:	f7fc fc60 	bl	8010524 <aci_gatt_update_char_value>
            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 8013c64:	e01f      	b.n	8013ca6 <Custom_STM_Event_Handler+0x376>
 8013c66:	bf00      	nop
 8013c68:	20001294 	.word	0x20001294
 8013c6c:	20000eb4 	.word	0x20000eb4
 8013c70:	20000eb5 	.word	0x20000eb5
 8013c74:	20000ebf 	.word	0x20000ebf
 8013c78:	08018008 	.word	0x08018008
 8013c7c:	0801800c 	.word	0x0801800c
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8013c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c82:	3302      	adds	r3, #2
 8013c84:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8013c86:	2308      	movs	r3, #8
 8013c88:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8013c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013c8c:	881b      	ldrh	r3, [r3, #0]
 8013c8e:	b29b      	uxth	r3, r3
 8013c90:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8013c92:	f107 030c 	add.w	r3, r7, #12
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7ff fde4 	bl	8013864 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8013c9c:	e004      	b.n	8013ca8 <Custom_STM_Event_Handler+0x378>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8013c9e:	bf00      	nop
 8013ca0:	e004      	b.n	8013cac <Custom_STM_Event_Handler+0x37c>
          break;
 8013ca2:	bf00      	nop
 8013ca4:	e002      	b.n	8013cac <Custom_STM_Event_Handler+0x37c>
          break;
 8013ca6:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013ca8:	e000      	b.n	8013cac <Custom_STM_Event_Handler+0x37c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8013caa:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8013cac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3738      	adds	r7, #56	@ 0x38
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}

08013cb8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8013cb8:	b580      	push	{r7, lr}
 8013cba:	b08c      	sub	sp, #48	@ 0x30
 8013cbc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013cbe:	2392      	movs	r3, #146	@ 0x92
 8013cc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8013cc2:	48a5      	ldr	r0, [pc, #660]	@ (8013f58 <SVCCTL_InitCustomSvc+0x2a0>)
 8013cc4:	f7fd f8d0 	bl	8010e68 <SVCCTL_RegisterSvcHandler>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 8013cc8:	230e      	movs	r3, #14
 8013cca:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 8013ccc:	238f      	movs	r3, #143	@ 0x8f
 8013cce:	713b      	strb	r3, [r7, #4]
 8013cd0:	23e5      	movs	r3, #229	@ 0xe5
 8013cd2:	717b      	strb	r3, [r7, #5]
 8013cd4:	23b3      	movs	r3, #179	@ 0xb3
 8013cd6:	71bb      	strb	r3, [r7, #6]
 8013cd8:	23d5      	movs	r3, #213	@ 0xd5
 8013cda:	71fb      	strb	r3, [r7, #7]
 8013cdc:	232e      	movs	r3, #46	@ 0x2e
 8013cde:	723b      	strb	r3, [r7, #8]
 8013ce0:	237f      	movs	r3, #127	@ 0x7f
 8013ce2:	727b      	strb	r3, [r7, #9]
 8013ce4:	234a      	movs	r3, #74	@ 0x4a
 8013ce6:	72bb      	strb	r3, [r7, #10]
 8013ce8:	2398      	movs	r3, #152	@ 0x98
 8013cea:	72fb      	strb	r3, [r7, #11]
 8013cec:	232a      	movs	r3, #42	@ 0x2a
 8013cee:	733b      	strb	r3, [r7, #12]
 8013cf0:	2348      	movs	r3, #72	@ 0x48
 8013cf2:	737b      	strb	r3, [r7, #13]
 8013cf4:	237a      	movs	r3, #122	@ 0x7a
 8013cf6:	73bb      	strb	r3, [r7, #14]
 8013cf8:	23cc      	movs	r3, #204	@ 0xcc
 8013cfa:	73fb      	strb	r3, [r7, #15]
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	743b      	strb	r3, [r7, #16]
 8013d00:	2300      	movs	r3, #0
 8013d02:	747b      	strb	r3, [r7, #17]
 8013d04:	2300      	movs	r3, #0
 8013d06:	74bb      	strb	r3, [r7, #18]
 8013d08:	2300      	movs	r3, #0
 8013d0a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8013d0c:	7dbb      	ldrb	r3, [r7, #22]
 8013d0e:	1d39      	adds	r1, r7, #4
 8013d10:	4a92      	ldr	r2, [pc, #584]	@ (8013f5c <SVCCTL_InitCustomSvc+0x2a4>)
 8013d12:	9200      	str	r2, [sp, #0]
 8013d14:	2201      	movs	r2, #1
 8013d16:	2002      	movs	r0, #2
 8013d18:	f7fc fa26 	bl	8010168 <aci_gatt_add_service>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomS_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013d20:	7dfb      	ldrb	r3, [r7, #23]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d00f      	beq.n	8013d46 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: S_DATA, error code: 0x%x \n\r", ret);
 8013d26:	488e      	ldr	r0, [pc, #568]	@ (8013f60 <SVCCTL_InitCustomSvc+0x2a8>)
 8013d28:	f7fd ff1a 	bl	8011b60 <DbgTraceGetFileName>
 8013d2c:	4601      	mov	r1, r0
 8013d2e:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 8013d32:	4a8c      	ldr	r2, [pc, #560]	@ (8013f64 <SVCCTL_InitCustomSvc+0x2ac>)
 8013d34:	488c      	ldr	r0, [pc, #560]	@ (8013f68 <SVCCTL_InitCustomSvc+0x2b0>)
 8013d36:	f001 fe47 	bl	80159c8 <iprintf>
 8013d3a:	7dfb      	ldrb	r3, [r7, #23]
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	488b      	ldr	r0, [pc, #556]	@ (8013f6c <SVCCTL_InitCustomSvc+0x2b4>)
 8013d40:	f001 fe42 	bl	80159c8 <iprintf>
 8013d44:	e00c      	b.n	8013d60 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: S_DATA \n\r");
 8013d46:	4886      	ldr	r0, [pc, #536]	@ (8013f60 <SVCCTL_InitCustomSvc+0x2a8>)
 8013d48:	f7fd ff0a 	bl	8011b60 <DbgTraceGetFileName>
 8013d4c:	4601      	mov	r1, r0
 8013d4e:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8013d52:	4a84      	ldr	r2, [pc, #528]	@ (8013f64 <SVCCTL_InitCustomSvc+0x2ac>)
 8013d54:	4884      	ldr	r0, [pc, #528]	@ (8013f68 <SVCCTL_InitCustomSvc+0x2b0>)
 8013d56:	f001 fe37 	bl	80159c8 <iprintf>
 8013d5a:	4885      	ldr	r0, [pc, #532]	@ (8013f70 <SVCCTL_InitCustomSvc+0x2b8>)
 8013d5c:	f001 fe34 	bl	80159c8 <iprintf>
  }

  /**
   *  IMU_ACCEL
   */
  COPY_IMU_ACCEL_UUID(uuid.Char_UUID_128);
 8013d60:	2319      	movs	r3, #25
 8013d62:	713b      	strb	r3, [r7, #4]
 8013d64:	23ed      	movs	r3, #237	@ 0xed
 8013d66:	717b      	strb	r3, [r7, #5]
 8013d68:	2382      	movs	r3, #130	@ 0x82
 8013d6a:	71bb      	strb	r3, [r7, #6]
 8013d6c:	23ae      	movs	r3, #174	@ 0xae
 8013d6e:	71fb      	strb	r3, [r7, #7]
 8013d70:	23ed      	movs	r3, #237	@ 0xed
 8013d72:	723b      	strb	r3, [r7, #8]
 8013d74:	2321      	movs	r3, #33	@ 0x21
 8013d76:	727b      	strb	r3, [r7, #9]
 8013d78:	234c      	movs	r3, #76	@ 0x4c
 8013d7a:	72bb      	strb	r3, [r7, #10]
 8013d7c:	239d      	movs	r3, #157	@ 0x9d
 8013d7e:	72fb      	strb	r3, [r7, #11]
 8013d80:	2341      	movs	r3, #65	@ 0x41
 8013d82:	733b      	strb	r3, [r7, #12]
 8013d84:	2345      	movs	r3, #69	@ 0x45
 8013d86:	737b      	strb	r3, [r7, #13]
 8013d88:	2322      	movs	r3, #34	@ 0x22
 8013d8a:	73bb      	strb	r3, [r7, #14]
 8013d8c:	238e      	movs	r3, #142	@ 0x8e
 8013d8e:	73fb      	strb	r3, [r7, #15]
 8013d90:	2336      	movs	r3, #54	@ 0x36
 8013d92:	743b      	strb	r3, [r7, #16]
 8013d94:	232a      	movs	r3, #42	@ 0x2a
 8013d96:	747b      	strb	r3, [r7, #17]
 8013d98:	2300      	movs	r3, #0
 8013d9a:	74bb      	strb	r3, [r7, #18]
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013da0:	4b6e      	ldr	r3, [pc, #440]	@ (8013f5c <SVCCTL_InitCustomSvc+0x2a4>)
 8013da2:	8818      	ldrh	r0, [r3, #0]
 8013da4:	4b73      	ldr	r3, [pc, #460]	@ (8013f74 <SVCCTL_InitCustomSvc+0x2bc>)
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	4619      	mov	r1, r3
 8013daa:	1d3a      	adds	r2, r7, #4
 8013dac:	4b72      	ldr	r3, [pc, #456]	@ (8013f78 <SVCCTL_InitCustomSvc+0x2c0>)
 8013dae:	9305      	str	r3, [sp, #20]
 8013db0:	2300      	movs	r3, #0
 8013db2:	9304      	str	r3, [sp, #16]
 8013db4:	2310      	movs	r3, #16
 8013db6:	9303      	str	r3, [sp, #12]
 8013db8:	2307      	movs	r3, #7
 8013dba:	9302      	str	r3, [sp, #8]
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	9301      	str	r3, [sp, #4]
 8013dc0:	2310      	movs	r3, #16
 8013dc2:	9300      	str	r3, [sp, #0]
 8013dc4:	460b      	mov	r3, r1
 8013dc6:	2102      	movs	r1, #2
 8013dc8:	f7fc faa4 	bl	8010314 <aci_gatt_add_char>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAccel_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013dd0:	7dfb      	ldrb	r3, [r7, #23]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d00f      	beq.n	8013df6 <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCEL_S, error code: 0x%x \n\r", ret);
 8013dd6:	4862      	ldr	r0, [pc, #392]	@ (8013f60 <SVCCTL_InitCustomSvc+0x2a8>)
 8013dd8:	f7fd fec2 	bl	8011b60 <DbgTraceGetFileName>
 8013ddc:	4601      	mov	r1, r0
 8013dde:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8013de2:	4a60      	ldr	r2, [pc, #384]	@ (8013f64 <SVCCTL_InitCustomSvc+0x2ac>)
 8013de4:	4860      	ldr	r0, [pc, #384]	@ (8013f68 <SVCCTL_InitCustomSvc+0x2b0>)
 8013de6:	f001 fdef 	bl	80159c8 <iprintf>
 8013dea:	7dfb      	ldrb	r3, [r7, #23]
 8013dec:	4619      	mov	r1, r3
 8013dee:	4863      	ldr	r0, [pc, #396]	@ (8013f7c <SVCCTL_InitCustomSvc+0x2c4>)
 8013df0:	f001 fdea 	bl	80159c8 <iprintf>
 8013df4:	e00c      	b.n	8013e10 <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCEL_S \n\r");
 8013df6:	485a      	ldr	r0, [pc, #360]	@ (8013f60 <SVCCTL_InitCustomSvc+0x2a8>)
 8013df8:	f7fd feb2 	bl	8011b60 <DbgTraceGetFileName>
 8013dfc:	4601      	mov	r1, r0
 8013dfe:	f44f 7305 	mov.w	r3, #532	@ 0x214
 8013e02:	4a58      	ldr	r2, [pc, #352]	@ (8013f64 <SVCCTL_InitCustomSvc+0x2ac>)
 8013e04:	4858      	ldr	r0, [pc, #352]	@ (8013f68 <SVCCTL_InitCustomSvc+0x2b0>)
 8013e06:	f001 fddf 	bl	80159c8 <iprintf>
 8013e0a:	485d      	ldr	r0, [pc, #372]	@ (8013f80 <SVCCTL_InitCustomSvc+0x2c8>)
 8013e0c:	f001 fddc 	bl	80159c8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  ECG_SENSOR
   */
  COPY_ECG_SENSOR_UUID(uuid.Char_UUID_128);
 8013e10:	2319      	movs	r3, #25
 8013e12:	713b      	strb	r3, [r7, #4]
 8013e14:	23ed      	movs	r3, #237	@ 0xed
 8013e16:	717b      	strb	r3, [r7, #5]
 8013e18:	2382      	movs	r3, #130	@ 0x82
 8013e1a:	71bb      	strb	r3, [r7, #6]
 8013e1c:	23ae      	movs	r3, #174	@ 0xae
 8013e1e:	71fb      	strb	r3, [r7, #7]
 8013e20:	23ed      	movs	r3, #237	@ 0xed
 8013e22:	723b      	strb	r3, [r7, #8]
 8013e24:	2321      	movs	r3, #33	@ 0x21
 8013e26:	727b      	strb	r3, [r7, #9]
 8013e28:	234c      	movs	r3, #76	@ 0x4c
 8013e2a:	72bb      	strb	r3, [r7, #10]
 8013e2c:	239d      	movs	r3, #157	@ 0x9d
 8013e2e:	72fb      	strb	r3, [r7, #11]
 8013e30:	2341      	movs	r3, #65	@ 0x41
 8013e32:	733b      	strb	r3, [r7, #12]
 8013e34:	2345      	movs	r3, #69	@ 0x45
 8013e36:	737b      	strb	r3, [r7, #13]
 8013e38:	2322      	movs	r3, #34	@ 0x22
 8013e3a:	73bb      	strb	r3, [r7, #14]
 8013e3c:	238e      	movs	r3, #142	@ 0x8e
 8013e3e:	73fb      	strb	r3, [r7, #15]
 8013e40:	2337      	movs	r3, #55	@ 0x37
 8013e42:	743b      	strb	r3, [r7, #16]
 8013e44:	232a      	movs	r3, #42	@ 0x2a
 8013e46:	747b      	strb	r3, [r7, #17]
 8013e48:	2300      	movs	r3, #0
 8013e4a:	74bb      	strb	r3, [r7, #18]
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013e50:	4b42      	ldr	r3, [pc, #264]	@ (8013f5c <SVCCTL_InitCustomSvc+0x2a4>)
 8013e52:	8818      	ldrh	r0, [r3, #0]
 8013e54:	4b4b      	ldr	r3, [pc, #300]	@ (8013f84 <SVCCTL_InitCustomSvc+0x2cc>)
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	4619      	mov	r1, r3
 8013e5a:	1d3a      	adds	r2, r7, #4
 8013e5c:	4b4a      	ldr	r3, [pc, #296]	@ (8013f88 <SVCCTL_InitCustomSvc+0x2d0>)
 8013e5e:	9305      	str	r3, [sp, #20]
 8013e60:	2300      	movs	r3, #0
 8013e62:	9304      	str	r3, [sp, #16]
 8013e64:	2310      	movs	r3, #16
 8013e66:	9303      	str	r3, [sp, #12]
 8013e68:	2307      	movs	r3, #7
 8013e6a:	9302      	str	r3, [sp, #8]
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	9301      	str	r3, [sp, #4]
 8013e70:	2310      	movs	r3, #16
 8013e72:	9300      	str	r3, [sp, #0]
 8013e74:	460b      	mov	r3, r1
 8013e76:	2102      	movs	r1, #2
 8013e78:	f7fc fa4c 	bl	8010314 <aci_gatt_add_char>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcg_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013e80:	7dfb      	ldrb	r3, [r7, #23]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d00f      	beq.n	8013ea6 <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ECG_S, error code: 0x%x \n\r", ret);
 8013e86:	4836      	ldr	r0, [pc, #216]	@ (8013f60 <SVCCTL_InitCustomSvc+0x2a8>)
 8013e88:	f7fd fe6a 	bl	8011b60 <DbgTraceGetFileName>
 8013e8c:	4601      	mov	r1, r0
 8013e8e:	f240 232a 	movw	r3, #554	@ 0x22a
 8013e92:	4a34      	ldr	r2, [pc, #208]	@ (8013f64 <SVCCTL_InitCustomSvc+0x2ac>)
 8013e94:	4834      	ldr	r0, [pc, #208]	@ (8013f68 <SVCCTL_InitCustomSvc+0x2b0>)
 8013e96:	f001 fd97 	bl	80159c8 <iprintf>
 8013e9a:	7dfb      	ldrb	r3, [r7, #23]
 8013e9c:	4619      	mov	r1, r3
 8013e9e:	483b      	ldr	r0, [pc, #236]	@ (8013f8c <SVCCTL_InitCustomSvc+0x2d4>)
 8013ea0:	f001 fd92 	bl	80159c8 <iprintf>
 8013ea4:	e00c      	b.n	8013ec0 <SVCCTL_InitCustomSvc+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ECG_S \n\r");
 8013ea6:	482e      	ldr	r0, [pc, #184]	@ (8013f60 <SVCCTL_InitCustomSvc+0x2a8>)
 8013ea8:	f7fd fe5a 	bl	8011b60 <DbgTraceGetFileName>
 8013eac:	4601      	mov	r1, r0
 8013eae:	f240 232e 	movw	r3, #558	@ 0x22e
 8013eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8013f64 <SVCCTL_InitCustomSvc+0x2ac>)
 8013eb4:	482c      	ldr	r0, [pc, #176]	@ (8013f68 <SVCCTL_InitCustomSvc+0x2b0>)
 8013eb6:	f001 fd87 	bl	80159c8 <iprintf>
 8013eba:	4835      	ldr	r0, [pc, #212]	@ (8013f90 <SVCCTL_InitCustomSvc+0x2d8>)
 8013ebc:	f001 fd84 	bl	80159c8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  COMMAND
   */
  COPY_COMMAND_UUID(uuid.Char_UUID_128);
 8013ec0:	2319      	movs	r3, #25
 8013ec2:	713b      	strb	r3, [r7, #4]
 8013ec4:	23ed      	movs	r3, #237	@ 0xed
 8013ec6:	717b      	strb	r3, [r7, #5]
 8013ec8:	2382      	movs	r3, #130	@ 0x82
 8013eca:	71bb      	strb	r3, [r7, #6]
 8013ecc:	23ae      	movs	r3, #174	@ 0xae
 8013ece:	71fb      	strb	r3, [r7, #7]
 8013ed0:	23ed      	movs	r3, #237	@ 0xed
 8013ed2:	723b      	strb	r3, [r7, #8]
 8013ed4:	2321      	movs	r3, #33	@ 0x21
 8013ed6:	727b      	strb	r3, [r7, #9]
 8013ed8:	234c      	movs	r3, #76	@ 0x4c
 8013eda:	72bb      	strb	r3, [r7, #10]
 8013edc:	239d      	movs	r3, #157	@ 0x9d
 8013ede:	72fb      	strb	r3, [r7, #11]
 8013ee0:	2341      	movs	r3, #65	@ 0x41
 8013ee2:	733b      	strb	r3, [r7, #12]
 8013ee4:	2345      	movs	r3, #69	@ 0x45
 8013ee6:	737b      	strb	r3, [r7, #13]
 8013ee8:	2322      	movs	r3, #34	@ 0x22
 8013eea:	73bb      	strb	r3, [r7, #14]
 8013eec:	238e      	movs	r3, #142	@ 0x8e
 8013eee:	73fb      	strb	r3, [r7, #15]
 8013ef0:	2338      	movs	r3, #56	@ 0x38
 8013ef2:	743b      	strb	r3, [r7, #16]
 8013ef4:	232a      	movs	r3, #42	@ 0x2a
 8013ef6:	747b      	strb	r3, [r7, #17]
 8013ef8:	2300      	movs	r3, #0
 8013efa:	74bb      	strb	r3, [r7, #18]
 8013efc:	2300      	movs	r3, #0
 8013efe:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013f00:	4b16      	ldr	r3, [pc, #88]	@ (8013f5c <SVCCTL_InitCustomSvc+0x2a4>)
 8013f02:	8818      	ldrh	r0, [r3, #0]
 8013f04:	4b23      	ldr	r3, [pc, #140]	@ (8013f94 <SVCCTL_InitCustomSvc+0x2dc>)
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	4619      	mov	r1, r3
 8013f0a:	1d3a      	adds	r2, r7, #4
 8013f0c:	4b22      	ldr	r3, [pc, #136]	@ (8013f98 <SVCCTL_InitCustomSvc+0x2e0>)
 8013f0e:	9305      	str	r3, [sp, #20]
 8013f10:	2300      	movs	r3, #0
 8013f12:	9304      	str	r3, [sp, #16]
 8013f14:	2310      	movs	r3, #16
 8013f16:	9303      	str	r3, [sp, #12]
 8013f18:	2301      	movs	r3, #1
 8013f1a:	9302      	str	r3, [sp, #8]
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	9301      	str	r3, [sp, #4]
 8013f20:	2308      	movs	r3, #8
 8013f22:	9300      	str	r3, [sp, #0]
 8013f24:	460b      	mov	r3, r1
 8013f26:	2102      	movs	r1, #2
 8013f28:	f7fc f9f4 	bl	8010314 <aci_gatt_add_char>
 8013f2c:	4603      	mov	r3, r0
 8013f2e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCmdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013f30:	7dfb      	ldrb	r3, [r7, #23]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d034      	beq.n	8013fa0 <SVCCTL_InitCustomSvc+0x2e8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CMD, error code: 0x%x \n\r", ret);
 8013f36:	480a      	ldr	r0, [pc, #40]	@ (8013f60 <SVCCTL_InitCustomSvc+0x2a8>)
 8013f38:	f7fd fe12 	bl	8011b60 <DbgTraceGetFileName>
 8013f3c:	4601      	mov	r1, r0
 8013f3e:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8013f42:	4a08      	ldr	r2, [pc, #32]	@ (8013f64 <SVCCTL_InitCustomSvc+0x2ac>)
 8013f44:	4808      	ldr	r0, [pc, #32]	@ (8013f68 <SVCCTL_InitCustomSvc+0x2b0>)
 8013f46:	f001 fd3f 	bl	80159c8 <iprintf>
 8013f4a:	7dfb      	ldrb	r3, [r7, #23]
 8013f4c:	4619      	mov	r1, r3
 8013f4e:	4813      	ldr	r0, [pc, #76]	@ (8013f9c <SVCCTL_InitCustomSvc+0x2e4>)
 8013f50:	f001 fd3a 	bl	80159c8 <iprintf>
 8013f54:	e031      	b.n	8013fba <SVCCTL_InitCustomSvc+0x302>
 8013f56:	bf00      	nop
 8013f58:	08013931 	.word	0x08013931
 8013f5c:	20001294 	.word	0x20001294
 8013f60:	08018020 	.word	0x08018020
 8013f64:	080188cc 	.word	0x080188cc
 8013f68:	08018040 	.word	0x08018040
 8013f6c:	08018054 	.word	0x08018054
 8013f70:	0801809c 	.word	0x0801809c
 8013f74:	200000b7 	.word	0x200000b7
 8013f78:	20001296 	.word	0x20001296
 8013f7c:	080180d0 	.word	0x080180d0
 8013f80:	08018118 	.word	0x08018118
 8013f84:	200000b8 	.word	0x200000b8
 8013f88:	20001298 	.word	0x20001298
 8013f8c:	0801814c 	.word	0x0801814c
 8013f90:	08018190 	.word	0x08018190
 8013f94:	200000b9 	.word	0x200000b9
 8013f98:	2000129a 	.word	0x2000129a
 8013f9c:	080181c4 	.word	0x080181c4
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CMD \n\r");
 8013fa0:	4860      	ldr	r0, [pc, #384]	@ (8014124 <SVCCTL_InitCustomSvc+0x46c>)
 8013fa2:	f7fd fddd 	bl	8011b60 <DbgTraceGetFileName>
 8013fa6:	4601      	mov	r1, r0
 8013fa8:	f44f 7312 	mov.w	r3, #584	@ 0x248
 8013fac:	4a5e      	ldr	r2, [pc, #376]	@ (8014128 <SVCCTL_InitCustomSvc+0x470>)
 8013fae:	485f      	ldr	r0, [pc, #380]	@ (801412c <SVCCTL_InitCustomSvc+0x474>)
 8013fb0:	f001 fd0a 	bl	80159c8 <iprintf>
 8013fb4:	485e      	ldr	r0, [pc, #376]	@ (8014130 <SVCCTL_InitCustomSvc+0x478>)
 8013fb6:	f001 fd07 	bl	80159c8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  ALL_SENSOR
   */
  COPY_ALL_SENSOR_UUID(uuid.Char_UUID_128);
 8013fba:	2319      	movs	r3, #25
 8013fbc:	713b      	strb	r3, [r7, #4]
 8013fbe:	23ed      	movs	r3, #237	@ 0xed
 8013fc0:	717b      	strb	r3, [r7, #5]
 8013fc2:	2382      	movs	r3, #130	@ 0x82
 8013fc4:	71bb      	strb	r3, [r7, #6]
 8013fc6:	23ae      	movs	r3, #174	@ 0xae
 8013fc8:	71fb      	strb	r3, [r7, #7]
 8013fca:	23ed      	movs	r3, #237	@ 0xed
 8013fcc:	723b      	strb	r3, [r7, #8]
 8013fce:	2321      	movs	r3, #33	@ 0x21
 8013fd0:	727b      	strb	r3, [r7, #9]
 8013fd2:	234c      	movs	r3, #76	@ 0x4c
 8013fd4:	72bb      	strb	r3, [r7, #10]
 8013fd6:	239d      	movs	r3, #157	@ 0x9d
 8013fd8:	72fb      	strb	r3, [r7, #11]
 8013fda:	2341      	movs	r3, #65	@ 0x41
 8013fdc:	733b      	strb	r3, [r7, #12]
 8013fde:	2345      	movs	r3, #69	@ 0x45
 8013fe0:	737b      	strb	r3, [r7, #13]
 8013fe2:	2322      	movs	r3, #34	@ 0x22
 8013fe4:	73bb      	strb	r3, [r7, #14]
 8013fe6:	238e      	movs	r3, #142	@ 0x8e
 8013fe8:	73fb      	strb	r3, [r7, #15]
 8013fea:	2339      	movs	r3, #57	@ 0x39
 8013fec:	743b      	strb	r3, [r7, #16]
 8013fee:	232a      	movs	r3, #42	@ 0x2a
 8013ff0:	747b      	strb	r3, [r7, #17]
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	74bb      	strb	r3, [r7, #18]
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013ffa:	4b4e      	ldr	r3, [pc, #312]	@ (8014134 <SVCCTL_InitCustomSvc+0x47c>)
 8013ffc:	8818      	ldrh	r0, [r3, #0]
 8013ffe:	4b4e      	ldr	r3, [pc, #312]	@ (8014138 <SVCCTL_InitCustomSvc+0x480>)
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	4619      	mov	r1, r3
 8014004:	1d3a      	adds	r2, r7, #4
 8014006:	4b4d      	ldr	r3, [pc, #308]	@ (801413c <SVCCTL_InitCustomSvc+0x484>)
 8014008:	9305      	str	r3, [sp, #20]
 801400a:	2300      	movs	r3, #0
 801400c:	9304      	str	r3, [sp, #16]
 801400e:	2310      	movs	r3, #16
 8014010:	9303      	str	r3, [sp, #12]
 8014012:	2307      	movs	r3, #7
 8014014:	9302      	str	r3, [sp, #8]
 8014016:	2300      	movs	r3, #0
 8014018:	9301      	str	r3, [sp, #4]
 801401a:	2310      	movs	r3, #16
 801401c:	9300      	str	r3, [sp, #0]
 801401e:	460b      	mov	r3, r1
 8014020:	2102      	movs	r1, #2
 8014022:	f7fc f977 	bl	8010314 <aci_gatt_add_char>
 8014026:	4603      	mov	r3, r0
 8014028:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAll_SensHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801402a:	7dfb      	ldrb	r3, [r7, #23]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d00f      	beq.n	8014050 <SVCCTL_InitCustomSvc+0x398>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ALL_SENS, error code: 0x%x \n\r", ret);
 8014030:	483c      	ldr	r0, [pc, #240]	@ (8014124 <SVCCTL_InitCustomSvc+0x46c>)
 8014032:	f7fd fd95 	bl	8011b60 <DbgTraceGetFileName>
 8014036:	4601      	mov	r1, r0
 8014038:	f240 235e 	movw	r3, #606	@ 0x25e
 801403c:	4a3a      	ldr	r2, [pc, #232]	@ (8014128 <SVCCTL_InitCustomSvc+0x470>)
 801403e:	483b      	ldr	r0, [pc, #236]	@ (801412c <SVCCTL_InitCustomSvc+0x474>)
 8014040:	f001 fcc2 	bl	80159c8 <iprintf>
 8014044:	7dfb      	ldrb	r3, [r7, #23]
 8014046:	4619      	mov	r1, r3
 8014048:	483d      	ldr	r0, [pc, #244]	@ (8014140 <SVCCTL_InitCustomSvc+0x488>)
 801404a:	f001 fcbd 	bl	80159c8 <iprintf>
 801404e:	e00c      	b.n	801406a <SVCCTL_InitCustomSvc+0x3b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ALL_SENS \n\r");
 8014050:	4834      	ldr	r0, [pc, #208]	@ (8014124 <SVCCTL_InitCustomSvc+0x46c>)
 8014052:	f7fd fd85 	bl	8011b60 <DbgTraceGetFileName>
 8014056:	4601      	mov	r1, r0
 8014058:	f240 2362 	movw	r3, #610	@ 0x262
 801405c:	4a32      	ldr	r2, [pc, #200]	@ (8014128 <SVCCTL_InitCustomSvc+0x470>)
 801405e:	4833      	ldr	r0, [pc, #204]	@ (801412c <SVCCTL_InitCustomSvc+0x474>)
 8014060:	f001 fcb2 	bl	80159c8 <iprintf>
 8014064:	4837      	ldr	r0, [pc, #220]	@ (8014144 <SVCCTL_InitCustomSvc+0x48c>)
 8014066:	f001 fcaf 	bl	80159c8 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  READ_DEVICE_INFO
   */
  COPY_READ_DEVICE_INFO_UUID(uuid.Char_UUID_128);
 801406a:	2319      	movs	r3, #25
 801406c:	713b      	strb	r3, [r7, #4]
 801406e:	23ed      	movs	r3, #237	@ 0xed
 8014070:	717b      	strb	r3, [r7, #5]
 8014072:	2382      	movs	r3, #130	@ 0x82
 8014074:	71bb      	strb	r3, [r7, #6]
 8014076:	23ae      	movs	r3, #174	@ 0xae
 8014078:	71fb      	strb	r3, [r7, #7]
 801407a:	23ed      	movs	r3, #237	@ 0xed
 801407c:	723b      	strb	r3, [r7, #8]
 801407e:	2321      	movs	r3, #33	@ 0x21
 8014080:	727b      	strb	r3, [r7, #9]
 8014082:	234c      	movs	r3, #76	@ 0x4c
 8014084:	72bb      	strb	r3, [r7, #10]
 8014086:	239d      	movs	r3, #157	@ 0x9d
 8014088:	72fb      	strb	r3, [r7, #11]
 801408a:	2341      	movs	r3, #65	@ 0x41
 801408c:	733b      	strb	r3, [r7, #12]
 801408e:	2345      	movs	r3, #69	@ 0x45
 8014090:	737b      	strb	r3, [r7, #13]
 8014092:	2322      	movs	r3, #34	@ 0x22
 8014094:	73bb      	strb	r3, [r7, #14]
 8014096:	238e      	movs	r3, #142	@ 0x8e
 8014098:	73fb      	strb	r3, [r7, #15]
 801409a:	2340      	movs	r3, #64	@ 0x40
 801409c:	743b      	strb	r3, [r7, #16]
 801409e:	232a      	movs	r3, #42	@ 0x2a
 80140a0:	747b      	strb	r3, [r7, #17]
 80140a2:	2300      	movs	r3, #0
 80140a4:	74bb      	strb	r3, [r7, #18]
 80140a6:	2300      	movs	r3, #0
 80140a8:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 80140aa:	4b22      	ldr	r3, [pc, #136]	@ (8014134 <SVCCTL_InitCustomSvc+0x47c>)
 80140ac:	8818      	ldrh	r0, [r3, #0]
 80140ae:	4b26      	ldr	r3, [pc, #152]	@ (8014148 <SVCCTL_InitCustomSvc+0x490>)
 80140b0:	781b      	ldrb	r3, [r3, #0]
 80140b2:	4619      	mov	r1, r3
 80140b4:	1d3a      	adds	r2, r7, #4
 80140b6:	4b25      	ldr	r3, [pc, #148]	@ (801414c <SVCCTL_InitCustomSvc+0x494>)
 80140b8:	9305      	str	r3, [sp, #20]
 80140ba:	2300      	movs	r3, #0
 80140bc:	9304      	str	r3, [sp, #16]
 80140be:	2310      	movs	r3, #16
 80140c0:	9303      	str	r3, [sp, #12]
 80140c2:	2304      	movs	r3, #4
 80140c4:	9302      	str	r3, [sp, #8]
 80140c6:	2300      	movs	r3, #0
 80140c8:	9301      	str	r3, [sp, #4]
 80140ca:	2302      	movs	r3, #2
 80140cc:	9300      	str	r3, [sp, #0]
 80140ce:	460b      	mov	r3, r1
 80140d0:	2102      	movs	r1, #2
 80140d2:	f7fc f91f 	bl	8010314 <aci_gatt_add_char>
 80140d6:	4603      	mov	r3, r0
 80140d8:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDevice_InfoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80140da:	7dfb      	ldrb	r3, [r7, #23]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d00f      	beq.n	8014100 <SVCCTL_InitCustomSvc+0x448>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DEVICE_INFO, error code: 0x%x \n\r", ret);
 80140e0:	4810      	ldr	r0, [pc, #64]	@ (8014124 <SVCCTL_InitCustomSvc+0x46c>)
 80140e2:	f7fd fd3d 	bl	8011b60 <DbgTraceGetFileName>
 80140e6:	4601      	mov	r1, r0
 80140e8:	f44f 731e 	mov.w	r3, #632	@ 0x278
 80140ec:	4a0e      	ldr	r2, [pc, #56]	@ (8014128 <SVCCTL_InitCustomSvc+0x470>)
 80140ee:	480f      	ldr	r0, [pc, #60]	@ (801412c <SVCCTL_InitCustomSvc+0x474>)
 80140f0:	f001 fc6a 	bl	80159c8 <iprintf>
 80140f4:	7dfb      	ldrb	r3, [r7, #23]
 80140f6:	4619      	mov	r1, r3
 80140f8:	4815      	ldr	r0, [pc, #84]	@ (8014150 <SVCCTL_InitCustomSvc+0x498>)
 80140fa:	f001 fc65 	bl	80159c8 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80140fe:	e00d      	b.n	801411c <SVCCTL_InitCustomSvc+0x464>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DEVICE_INFO \n\r");
 8014100:	4808      	ldr	r0, [pc, #32]	@ (8014124 <SVCCTL_InitCustomSvc+0x46c>)
 8014102:	f7fd fd2d 	bl	8011b60 <DbgTraceGetFileName>
 8014106:	4601      	mov	r1, r0
 8014108:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 801410c:	4a06      	ldr	r2, [pc, #24]	@ (8014128 <SVCCTL_InitCustomSvc+0x470>)
 801410e:	4807      	ldr	r0, [pc, #28]	@ (801412c <SVCCTL_InitCustomSvc+0x474>)
 8014110:	f001 fc5a 	bl	80159c8 <iprintf>
 8014114:	480f      	ldr	r0, [pc, #60]	@ (8014154 <SVCCTL_InitCustomSvc+0x49c>)
 8014116:	f001 fc57 	bl	80159c8 <iprintf>
  return;
 801411a:	bf00      	nop
}
 801411c:	3718      	adds	r7, #24
 801411e:	46bd      	mov	sp, r7
 8014120:	bd80      	pop	{r7, pc}
 8014122:	bf00      	nop
 8014124:	08018020 	.word	0x08018020
 8014128:	080188cc 	.word	0x080188cc
 801412c:	08018040 	.word	0x08018040
 8014130:	08018208 	.word	0x08018208
 8014134:	20001294 	.word	0x20001294
 8014138:	200000ba 	.word	0x200000ba
 801413c:	2000129c 	.word	0x2000129c
 8014140:	08018238 	.word	0x08018238
 8014144:	08018280 	.word	0x08018280
 8014148:	200000bb 	.word	0x200000bb
 801414c:	2000129e 	.word	0x2000129e
 8014150:	080182b8 	.word	0x080182b8
 8014154:	08018304 	.word	0x08018304

08014158 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8014158:	b580      	push	{r7, lr}
 801415a:	b086      	sub	sp, #24
 801415c:	af02      	add	r7, sp, #8
 801415e:	4603      	mov	r3, r0
 8014160:	6039      	str	r1, [r7, #0]
 8014162:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014164:	2392      	movs	r3, #146	@ 0x92
 8014166:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8014168:	79fb      	ldrb	r3, [r7, #7]
 801416a:	2b04      	cmp	r3, #4
 801416c:	f200 8115 	bhi.w	801439a <Custom_STM_App_Update_Char+0x242>
 8014170:	a201      	add	r2, pc, #4	@ (adr r2, 8014178 <Custom_STM_App_Update_Char+0x20>)
 8014172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014176:	bf00      	nop
 8014178:	0801418d 	.word	0x0801418d
 801417c:	080141f9 	.word	0x080141f9
 8014180:	08014257 	.word	0x08014257
 8014184:	080142b5 	.word	0x080142b5
 8014188:	0801433d 	.word	0x0801433d
  {

    case CUSTOM_STM_ACCEL_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 801418c:	4b87      	ldr	r3, [pc, #540]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 801418e:	8818      	ldrh	r0, [r3, #0]
 8014190:	4b86      	ldr	r3, [pc, #536]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 8014192:	8859      	ldrh	r1, [r3, #2]
 8014194:	4b86      	ldr	r3, [pc, #536]	@ (80143b0 <Custom_STM_App_Update_Char+0x258>)
 8014196:	781a      	ldrb	r2, [r3, #0]
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	4613      	mov	r3, r2
 801419e:	2200      	movs	r2, #0
 80141a0:	f7fc f9c0 	bl	8010524 <aci_gatt_update_char_value>
 80141a4:	4603      	mov	r3, r0
 80141a6:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccel_SHdle,
                                       0, /* charValOffset */
                                       SizeAccel_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80141a8:	7bfb      	ldrb	r3, [r7, #15]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d00f      	beq.n	80141ce <Custom_STM_App_Update_Char+0x76>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCEL_S command, result : 0x%x \n\r", ret);
 80141ae:	4881      	ldr	r0, [pc, #516]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 80141b0:	f7fd fcd6 	bl	8011b60 <DbgTraceGetFileName>
 80141b4:	4601      	mov	r1, r0
 80141b6:	f240 23a3 	movw	r3, #675	@ 0x2a3
 80141ba:	4a7f      	ldr	r2, [pc, #508]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 80141bc:	487f      	ldr	r0, [pc, #508]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 80141be:	f001 fc03 	bl	80159c8 <iprintf>
 80141c2:	7bfb      	ldrb	r3, [r7, #15]
 80141c4:	4619      	mov	r1, r3
 80141c6:	487e      	ldr	r0, [pc, #504]	@ (80143c0 <Custom_STM_App_Update_Char+0x268>)
 80141c8:	f001 fbfe 	bl	80159c8 <iprintf>
 80141cc:	e00c      	b.n	80141e8 <Custom_STM_App_Update_Char+0x90>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCEL_S command\n\r");
 80141ce:	4879      	ldr	r0, [pc, #484]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 80141d0:	f7fd fcc6 	bl	8011b60 <DbgTraceGetFileName>
 80141d4:	4601      	mov	r1, r0
 80141d6:	f240 23a7 	movw	r3, #679	@ 0x2a7
 80141da:	4a77      	ldr	r2, [pc, #476]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 80141dc:	4877      	ldr	r0, [pc, #476]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 80141de:	f001 fbf3 	bl	80159c8 <iprintf>
 80141e2:	4878      	ldr	r0, [pc, #480]	@ (80143c4 <Custom_STM_App_Update_Char+0x26c>)
 80141e4:	f001 fbf0 	bl	80159c8 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      if (ret == BLE_STATUS_SUCCESS)
 80141e8:	7bfb      	ldrb	r3, [r7, #15]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	f040 80d7 	bne.w	801439e <Custom_STM_App_Update_Char+0x246>
      {
    	  tsBle.ACCEL_XferComplete = true;
 80141f0:	4b75      	ldr	r3, [pc, #468]	@ (80143c8 <Custom_STM_App_Update_Char+0x270>)
 80141f2:	2201      	movs	r2, #1
 80141f4:	70da      	strb	r2, [r3, #3]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 80141f6:	e0d2      	b.n	801439e <Custom_STM_App_Update_Char+0x246>

    case CUSTOM_STM_ECG_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80141f8:	4b6c      	ldr	r3, [pc, #432]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 80141fa:	8818      	ldrh	r0, [r3, #0]
 80141fc:	4b6b      	ldr	r3, [pc, #428]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 80141fe:	8899      	ldrh	r1, [r3, #4]
 8014200:	4b72      	ldr	r3, [pc, #456]	@ (80143cc <Custom_STM_App_Update_Char+0x274>)
 8014202:	781a      	ldrb	r2, [r3, #0]
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	9300      	str	r3, [sp, #0]
 8014208:	4613      	mov	r3, r2
 801420a:	2200      	movs	r2, #0
 801420c:	f7fc f98a 	bl	8010524 <aci_gatt_update_char_value>
 8014210:	4603      	mov	r3, r0
 8014212:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcg_SHdle,
                                       0, /* charValOffset */
                                       SizeEcg_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014214:	7bfb      	ldrb	r3, [r7, #15]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d00f      	beq.n	801423a <Custom_STM_App_Update_Char+0xe2>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ECG_S command, result : 0x%x \n\r", ret);
 801421a:	4866      	ldr	r0, [pc, #408]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 801421c:	f7fd fca0 	bl	8011b60 <DbgTraceGetFileName>
 8014220:	4601      	mov	r1, r0
 8014222:	f240 23c5 	movw	r3, #709	@ 0x2c5
 8014226:	4a64      	ldr	r2, [pc, #400]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 8014228:	4864      	ldr	r0, [pc, #400]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 801422a:	f001 fbcd 	bl	80159c8 <iprintf>
 801422e:	7bfb      	ldrb	r3, [r7, #15]
 8014230:	4619      	mov	r1, r3
 8014232:	4867      	ldr	r0, [pc, #412]	@ (80143d0 <Custom_STM_App_Update_Char+0x278>)
 8014234:	f001 fbc8 	bl	80159c8 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8014238:	e0b2      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
 801423a:	485e      	ldr	r0, [pc, #376]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 801423c:	f7fd fc90 	bl	8011b60 <DbgTraceGetFileName>
 8014240:	4601      	mov	r1, r0
 8014242:	f240 23c9 	movw	r3, #713	@ 0x2c9
 8014246:	4a5c      	ldr	r2, [pc, #368]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 8014248:	485c      	ldr	r0, [pc, #368]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 801424a:	f001 fbbd 	bl	80159c8 <iprintf>
 801424e:	4861      	ldr	r0, [pc, #388]	@ (80143d4 <Custom_STM_App_Update_Char+0x27c>)
 8014250:	f001 fbba 	bl	80159c8 <iprintf>
      break;
 8014254:	e0a4      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_CMD:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014256:	4b55      	ldr	r3, [pc, #340]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 8014258:	8818      	ldrh	r0, [r3, #0]
 801425a:	4b54      	ldr	r3, [pc, #336]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 801425c:	88d9      	ldrh	r1, [r3, #6]
 801425e:	4b5e      	ldr	r3, [pc, #376]	@ (80143d8 <Custom_STM_App_Update_Char+0x280>)
 8014260:	781a      	ldrb	r2, [r3, #0]
 8014262:	683b      	ldr	r3, [r7, #0]
 8014264:	9300      	str	r3, [sp, #0]
 8014266:	4613      	mov	r3, r2
 8014268:	2200      	movs	r2, #0
 801426a:	f7fc f95b 	bl	8010524 <aci_gatt_update_char_value>
 801426e:	4603      	mov	r3, r0
 8014270:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomCmdHdle,
                                       0, /* charValOffset */
                                       SizeCmd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014272:	7bfb      	ldrb	r3, [r7, #15]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00f      	beq.n	8014298 <Custom_STM_App_Update_Char+0x140>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CMD command, result : 0x%x \n\r", ret);
 8014278:	484e      	ldr	r0, [pc, #312]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 801427a:	f7fd fc71 	bl	8011b60 <DbgTraceGetFileName>
 801427e:	4601      	mov	r1, r0
 8014280:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8014284:	4a4c      	ldr	r2, [pc, #304]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 8014286:	484d      	ldr	r0, [pc, #308]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 8014288:	f001 fb9e 	bl	80159c8 <iprintf>
 801428c:	7bfb      	ldrb	r3, [r7, #15]
 801428e:	4619      	mov	r1, r3
 8014290:	4852      	ldr	r0, [pc, #328]	@ (80143dc <Custom_STM_App_Update_Char+0x284>)
 8014292:	f001 fb99 	bl	80159c8 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8014296:	e083      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
 8014298:	4846      	ldr	r0, [pc, #280]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 801429a:	f7fd fc61 	bl	8011b60 <DbgTraceGetFileName>
 801429e:	4601      	mov	r1, r0
 80142a0:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 80142a4:	4a44      	ldr	r2, [pc, #272]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 80142a6:	4845      	ldr	r0, [pc, #276]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 80142a8:	f001 fb8e 	bl	80159c8 <iprintf>
 80142ac:	484c      	ldr	r0, [pc, #304]	@ (80143e0 <Custom_STM_App_Update_Char+0x288>)
 80142ae:	f001 fb8b 	bl	80159c8 <iprintf>
      break;
 80142b2:	e075      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_ALL_SENS:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80142b4:	4b3d      	ldr	r3, [pc, #244]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 80142b6:	8818      	ldrh	r0, [r3, #0]
 80142b8:	4b3c      	ldr	r3, [pc, #240]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 80142ba:	8919      	ldrh	r1, [r3, #8]
 80142bc:	4b49      	ldr	r3, [pc, #292]	@ (80143e4 <Custom_STM_App_Update_Char+0x28c>)
 80142be:	781a      	ldrb	r2, [r3, #0]
 80142c0:	683b      	ldr	r3, [r7, #0]
 80142c2:	9300      	str	r3, [sp, #0]
 80142c4:	4613      	mov	r3, r2
 80142c6:	2200      	movs	r2, #0
 80142c8:	f7fc f92c 	bl	8010524 <aci_gatt_update_char_value>
 80142cc:	4603      	mov	r3, r0
 80142ce:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAll_SensHdle,
                                       0, /* charValOffset */
                                       SizeAll_Sens, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80142d0:	7bfb      	ldrb	r3, [r7, #15]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d00f      	beq.n	80142f6 <Custom_STM_App_Update_Char+0x19e>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ALL_SENS command, result : 0x%x \n\r", ret);
 80142d6:	4837      	ldr	r0, [pc, #220]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 80142d8:	f7fd fc42 	bl	8011b60 <DbgTraceGetFileName>
 80142dc:	4601      	mov	r1, r0
 80142de:	f240 23eb 	movw	r3, #747	@ 0x2eb
 80142e2:	4a35      	ldr	r2, [pc, #212]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 80142e4:	4835      	ldr	r0, [pc, #212]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 80142e6:	f001 fb6f 	bl	80159c8 <iprintf>
 80142ea:	7bfb      	ldrb	r3, [r7, #15]
 80142ec:	4619      	mov	r1, r3
 80142ee:	483e      	ldr	r0, [pc, #248]	@ (80143e8 <Custom_STM_App_Update_Char+0x290>)
 80142f0:	f001 fb6a 	bl	80159c8 <iprintf>
 80142f4:	e00c      	b.n	8014310 <Custom_STM_App_Update_Char+0x1b8>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ALL_SENS command\n\r");
 80142f6:	482f      	ldr	r0, [pc, #188]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 80142f8:	f7fd fc32 	bl	8011b60 <DbgTraceGetFileName>
 80142fc:	4601      	mov	r1, r0
 80142fe:	f240 23ef 	movw	r3, #751	@ 0x2ef
 8014302:	4a2d      	ldr	r2, [pc, #180]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 8014304:	482d      	ldr	r0, [pc, #180]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 8014306:	f001 fb5f 	bl	80159c8 <iprintf>
 801430a:	4838      	ldr	r0, [pc, #224]	@ (80143ec <Custom_STM_App_Update_Char+0x294>)
 801430c:	f001 fb5c 	bl	80159c8 <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/


      if (ret == BLE_STATUS_SUCCESS)
 8014310:	7bfb      	ldrb	r3, [r7, #15]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d103      	bne.n	801431e <Custom_STM_App_Update_Char+0x1c6>
      {
    	  tsBle.SCG_XferComplete = true;
 8014316:	4b2c      	ldr	r3, [pc, #176]	@ (80143c8 <Custom_STM_App_Update_Char+0x270>)
 8014318:	2201      	movs	r2, #1
 801431a:	709a      	strb	r2, [r3, #2]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 801431c:	e040      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>
			      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 801431e:	4b23      	ldr	r3, [pc, #140]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 8014320:	8818      	ldrh	r0, [r3, #0]
 8014322:	4b22      	ldr	r3, [pc, #136]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 8014324:	8919      	ldrh	r1, [r3, #8]
 8014326:	4b2f      	ldr	r3, [pc, #188]	@ (80143e4 <Custom_STM_App_Update_Char+0x28c>)
 8014328:	781a      	ldrb	r2, [r3, #0]
 801432a:	683b      	ldr	r3, [r7, #0]
 801432c:	9300      	str	r3, [sp, #0]
 801432e:	4613      	mov	r3, r2
 8014330:	2200      	movs	r2, #0
 8014332:	f7fc f8f7 	bl	8010524 <aci_gatt_update_char_value>
 8014336:	4603      	mov	r3, r0
 8014338:	73fb      	strb	r3, [r7, #15]
      break;
 801433a:	e031      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_DEVICE_INFO:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 801433c:	4b1b      	ldr	r3, [pc, #108]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 801433e:	8818      	ldrh	r0, [r3, #0]
 8014340:	4b1a      	ldr	r3, [pc, #104]	@ (80143ac <Custom_STM_App_Update_Char+0x254>)
 8014342:	8959      	ldrh	r1, [r3, #10]
 8014344:	4b2a      	ldr	r3, [pc, #168]	@ (80143f0 <Custom_STM_App_Update_Char+0x298>)
 8014346:	781a      	ldrb	r2, [r3, #0]
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	9300      	str	r3, [sp, #0]
 801434c:	4613      	mov	r3, r2
 801434e:	2200      	movs	r2, #0
 8014350:	f7fc f8e8 	bl	8010524 <aci_gatt_update_char_value>
 8014354:	4603      	mov	r3, r0
 8014356:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDevice_InfoHdle,
                                       0, /* charValOffset */
                                       SizeDevice_Info, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014358:	7bfb      	ldrb	r3, [r7, #15]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00f      	beq.n	801437e <Custom_STM_App_Update_Char+0x226>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DEVICE_INFO command, result : 0x%x \n\r", ret);
 801435e:	4815      	ldr	r0, [pc, #84]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 8014360:	f7fd fbfe 	bl	8011b60 <DbgTraceGetFileName>
 8014364:	4601      	mov	r1, r0
 8014366:	f240 3317 	movw	r3, #791	@ 0x317
 801436a:	4a13      	ldr	r2, [pc, #76]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 801436c:	4813      	ldr	r0, [pc, #76]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 801436e:	f001 fb2b 	bl	80159c8 <iprintf>
 8014372:	7bfb      	ldrb	r3, [r7, #15]
 8014374:	4619      	mov	r1, r3
 8014376:	481f      	ldr	r0, [pc, #124]	@ (80143f4 <Custom_STM_App_Update_Char+0x29c>)
 8014378:	f001 fb26 	bl	80159c8 <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 801437c:	e010      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
 801437e:	480d      	ldr	r0, [pc, #52]	@ (80143b4 <Custom_STM_App_Update_Char+0x25c>)
 8014380:	f7fd fbee 	bl	8011b60 <DbgTraceGetFileName>
 8014384:	4601      	mov	r1, r0
 8014386:	f240 331b 	movw	r3, #795	@ 0x31b
 801438a:	4a0b      	ldr	r2, [pc, #44]	@ (80143b8 <Custom_STM_App_Update_Char+0x260>)
 801438c:	480b      	ldr	r0, [pc, #44]	@ (80143bc <Custom_STM_App_Update_Char+0x264>)
 801438e:	f001 fb1b 	bl	80159c8 <iprintf>
 8014392:	4819      	ldr	r0, [pc, #100]	@ (80143f8 <Custom_STM_App_Update_Char+0x2a0>)
 8014394:	f001 fb18 	bl	80159c8 <iprintf>
      break;
 8014398:	e002      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>

    default:
      break;
 801439a:	bf00      	nop
 801439c:	e000      	b.n	80143a0 <Custom_STM_App_Update_Char+0x248>
      break;
 801439e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 80143a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80143a2:	4618      	mov	r0, r3
 80143a4:	3710      	adds	r7, #16
 80143a6:	46bd      	mov	sp, r7
 80143a8:	bd80      	pop	{r7, pc}
 80143aa:	bf00      	nop
 80143ac:	20001294 	.word	0x20001294
 80143b0:	200000b7 	.word	0x200000b7
 80143b4:	08018020 	.word	0x08018020
 80143b8:	080188e4 	.word	0x080188e4
 80143bc:	08018040 	.word	0x08018040
 80143c0:	0801833c 	.word	0x0801833c
 80143c4:	08018384 	.word	0x08018384
 80143c8:	200011f4 	.word	0x200011f4
 80143cc:	200000b8 	.word	0x200000b8
 80143d0:	080183bc 	.word	0x080183bc
 80143d4:	08018404 	.word	0x08018404
 80143d8:	200000b9 	.word	0x200000b9
 80143dc:	0801843c 	.word	0x0801843c
 80143e0:	08018480 	.word	0x08018480
 80143e4:	200000ba 	.word	0x200000ba
 80143e8:	080184b4 	.word	0x080184b4
 80143ec:	08018500 	.word	0x08018500
 80143f0:	200000bb 	.word	0x200000bb
 80143f4:	0801853c 	.word	0x0801853c
 80143f8:	08018588 	.word	0x08018588

080143fc <LL_PWR_EnableBootC2>:
{
 80143fc:	b480      	push	{r7}
 80143fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8014400:	4b05      	ldr	r3, [pc, #20]	@ (8014418 <LL_PWR_EnableBootC2+0x1c>)
 8014402:	68db      	ldr	r3, [r3, #12]
 8014404:	4a04      	ldr	r2, [pc, #16]	@ (8014418 <LL_PWR_EnableBootC2+0x1c>)
 8014406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801440a:	60d3      	str	r3, [r2, #12]
}
 801440c:	bf00      	nop
 801440e:	46bd      	mov	sp, r7
 8014410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014414:	4770      	bx	lr
 8014416:	bf00      	nop
 8014418:	58000400 	.word	0x58000400

0801441c <LL_C2_EXTI_EnableEvent_32_63>:
{
 801441c:	b480      	push	{r7}
 801441e:	b083      	sub	sp, #12
 8014420:	af00      	add	r7, sp, #0
 8014422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014424:	4b06      	ldr	r3, [pc, #24]	@ (8014440 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014426:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801442a:	4905      	ldr	r1, [pc, #20]	@ (8014440 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	4313      	orrs	r3, r2
 8014430:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8014434:	bf00      	nop
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr
 8014440:	58000800 	.word	0x58000800

08014444 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014444:	b480      	push	{r7}
 8014446:	b083      	sub	sp, #12
 8014448:	af00      	add	r7, sp, #0
 801444a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 801444c:	4b05      	ldr	r3, [pc, #20]	@ (8014464 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801444e:	6a1a      	ldr	r2, [r3, #32]
 8014450:	4904      	ldr	r1, [pc, #16]	@ (8014464 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	4313      	orrs	r3, r2
 8014456:	620b      	str	r3, [r1, #32]
}
 8014458:	bf00      	nop
 801445a:	370c      	adds	r7, #12
 801445c:	46bd      	mov	sp, r7
 801445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014462:	4770      	bx	lr
 8014464:	58000800 	.word	0x58000800

08014468 <LL_AHB3_GRP1_EnableClock>:
{
 8014468:	b480      	push	{r7}
 801446a:	b085      	sub	sp, #20
 801446c:	af00      	add	r7, sp, #0
 801446e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	4313      	orrs	r3, r2
 801447e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014484:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	4013      	ands	r3, r2
 801448a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801448c:	68fb      	ldr	r3, [r7, #12]
}
 801448e:	bf00      	nop
 8014490:	3714      	adds	r7, #20
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801449a:	b480      	push	{r7}
 801449c:	b085      	sub	sp, #20
 801449e:	af00      	add	r7, sp, #0
 80144a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80144a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80144a6:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80144aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	4313      	orrs	r3, r2
 80144b2:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80144b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80144ba:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	4013      	ands	r3, r2
 80144c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80144c4:	68fb      	ldr	r3, [r7, #12]
}
 80144c6:	bf00      	nop
 80144c8:	3714      	adds	r7, #20
 80144ca:	46bd      	mov	sp, r7
 80144cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d0:	4770      	bx	lr

080144d2 <LL_C1_IPCC_EnableIT_TXF>:
{
 80144d2:	b480      	push	{r7}
 80144d4:	b083      	sub	sp, #12
 80144d6:	af00      	add	r7, sp, #0
 80144d8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	601a      	str	r2, [r3, #0]
}
 80144e6:	bf00      	nop
 80144e8:	370c      	adds	r7, #12
 80144ea:	46bd      	mov	sp, r7
 80144ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f0:	4770      	bx	lr

080144f2 <LL_C1_IPCC_EnableIT_RXO>:
{
 80144f2:	b480      	push	{r7}
 80144f4:	b083      	sub	sp, #12
 80144f6:	af00      	add	r7, sp, #0
 80144f8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	f043 0201 	orr.w	r2, r3, #1
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	601a      	str	r2, [r3, #0]
}
 8014506:	bf00      	nop
 8014508:	370c      	adds	r7, #12
 801450a:	46bd      	mov	sp, r7
 801450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014510:	4770      	bx	lr

08014512 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8014512:	b480      	push	{r7}
 8014514:	b083      	sub	sp, #12
 8014516:	af00      	add	r7, sp, #0
 8014518:	6078      	str	r0, [r7, #4]
 801451a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	685a      	ldr	r2, [r3, #4]
 8014520:	683b      	ldr	r3, [r7, #0]
 8014522:	041b      	lsls	r3, r3, #16
 8014524:	43db      	mvns	r3, r3
 8014526:	401a      	ands	r2, r3
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	605a      	str	r2, [r3, #4]
}
 801452c:	bf00      	nop
 801452e:	370c      	adds	r7, #12
 8014530:	46bd      	mov	sp, r7
 8014532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014536:	4770      	bx	lr

08014538 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8014538:	b480      	push	{r7}
 801453a:	b083      	sub	sp, #12
 801453c:	af00      	add	r7, sp, #0
 801453e:	6078      	str	r0, [r7, #4]
 8014540:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	685a      	ldr	r2, [r3, #4]
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	041b      	lsls	r3, r3, #16
 801454a:	431a      	orrs	r2, r3
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	605a      	str	r2, [r3, #4]
}
 8014550:	bf00      	nop
 8014552:	370c      	adds	r7, #12
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr

0801455c <LL_C1_IPCC_EnableReceiveChannel>:
{
 801455c:	b480      	push	{r7}
 801455e:	b083      	sub	sp, #12
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	685a      	ldr	r2, [r3, #4]
 801456a:	683b      	ldr	r3, [r7, #0]
 801456c:	43db      	mvns	r3, r3
 801456e:	401a      	ands	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	605a      	str	r2, [r3, #4]
}
 8014574:	bf00      	nop
 8014576:	370c      	adds	r7, #12
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr

08014580 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014580:	b480      	push	{r7}
 8014582:	b083      	sub	sp, #12
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	683a      	ldr	r2, [r7, #0]
 801458e:	609a      	str	r2, [r3, #8]
}
 8014590:	bf00      	nop
 8014592:	370c      	adds	r7, #12
 8014594:	46bd      	mov	sp, r7
 8014596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801459a:	4770      	bx	lr

0801459c <LL_C1_IPCC_SetFlag_CHx>:
{
 801459c:	b480      	push	{r7}
 801459e:	b083      	sub	sp, #12
 80145a0:	af00      	add	r7, sp, #0
 80145a2:	6078      	str	r0, [r7, #4]
 80145a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80145a6:	683b      	ldr	r3, [r7, #0]
 80145a8:	041a      	lsls	r2, r3, #16
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	609a      	str	r2, [r3, #8]
}
 80145ae:	bf00      	nop
 80145b0:	370c      	adds	r7, #12
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr

080145ba <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80145ba:	b480      	push	{r7}
 80145bc:	b083      	sub	sp, #12
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
 80145c2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	68da      	ldr	r2, [r3, #12]
 80145c8:	683b      	ldr	r3, [r7, #0]
 80145ca:	4013      	ands	r3, r2
 80145cc:	683a      	ldr	r2, [r7, #0]
 80145ce:	429a      	cmp	r2, r3
 80145d0:	d101      	bne.n	80145d6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80145d2:	2301      	movs	r3, #1
 80145d4:	e000      	b.n	80145d8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80145d6:	2300      	movs	r3, #0
}
 80145d8:	4618      	mov	r0, r3
 80145da:	370c      	adds	r7, #12
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr

080145e4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80145e4:	b480      	push	{r7}
 80145e6:	b083      	sub	sp, #12
 80145e8:	af00      	add	r7, sp, #0
 80145ea:	6078      	str	r0, [r7, #4]
 80145ec:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	69da      	ldr	r2, [r3, #28]
 80145f2:	683b      	ldr	r3, [r7, #0]
 80145f4:	4013      	ands	r3, r2
 80145f6:	683a      	ldr	r2, [r7, #0]
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d101      	bne.n	8014600 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80145fc:	2301      	movs	r3, #1
 80145fe:	e000      	b.n	8014602 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014600:	2300      	movs	r3, #0
}
 8014602:	4618      	mov	r0, r3
 8014604:	370c      	adds	r7, #12
 8014606:	46bd      	mov	sp, r7
 8014608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460c:	4770      	bx	lr
	...

08014610 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014610:	b580      	push	{r7, lr}
 8014612:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014614:	2102      	movs	r1, #2
 8014616:	4818      	ldr	r0, [pc, #96]	@ (8014678 <HW_IPCC_Rx_Handler+0x68>)
 8014618:	f7ff ffe4 	bl	80145e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 801461c:	4603      	mov	r3, r0
 801461e:	2b00      	cmp	r3, #0
 8014620:	d008      	beq.n	8014634 <HW_IPCC_Rx_Handler+0x24>
 8014622:	4b15      	ldr	r3, [pc, #84]	@ (8014678 <HW_IPCC_Rx_Handler+0x68>)
 8014624:	685b      	ldr	r3, [r3, #4]
 8014626:	f003 0302 	and.w	r3, r3, #2
 801462a:	2b00      	cmp	r3, #0
 801462c:	d102      	bne.n	8014634 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 801462e:	f000 f8d5 	bl	80147dc <HW_IPCC_SYS_EvtHandler>
 8014632:	e01e      	b.n	8014672 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014634:	2101      	movs	r1, #1
 8014636:	4810      	ldr	r0, [pc, #64]	@ (8014678 <HW_IPCC_Rx_Handler+0x68>)
 8014638:	f7ff ffd4 	bl	80145e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 801463c:	4603      	mov	r3, r0
 801463e:	2b00      	cmp	r3, #0
 8014640:	d008      	beq.n	8014654 <HW_IPCC_Rx_Handler+0x44>
 8014642:	4b0d      	ldr	r3, [pc, #52]	@ (8014678 <HW_IPCC_Rx_Handler+0x68>)
 8014644:	685b      	ldr	r3, [r3, #4]
 8014646:	f003 0301 	and.w	r3, r3, #1
 801464a:	2b00      	cmp	r3, #0
 801464c:	d102      	bne.n	8014654 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801464e:	f000 f889 	bl	8014764 <HW_IPCC_BLE_EvtHandler>
 8014652:	e00e      	b.n	8014672 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014654:	2108      	movs	r1, #8
 8014656:	4808      	ldr	r0, [pc, #32]	@ (8014678 <HW_IPCC_Rx_Handler+0x68>)
 8014658:	f7ff ffc4 	bl	80145e4 <LL_C2_IPCC_IsActiveFlag_CHx>
 801465c:	4603      	mov	r3, r0
 801465e:	2b00      	cmp	r3, #0
 8014660:	d008      	beq.n	8014674 <HW_IPCC_Rx_Handler+0x64>
 8014662:	4b05      	ldr	r3, [pc, #20]	@ (8014678 <HW_IPCC_Rx_Handler+0x68>)
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	f003 0308 	and.w	r3, r3, #8
 801466a:	2b00      	cmp	r3, #0
 801466c:	d102      	bne.n	8014674 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801466e:	f000 f901 	bl	8014874 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014672:	bf00      	nop
 8014674:	bf00      	nop
}
 8014676:	bd80      	pop	{r7, pc}
 8014678:	58000c00 	.word	0x58000c00

0801467c <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 801467c:	b580      	push	{r7, lr}
 801467e:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014680:	2102      	movs	r1, #2
 8014682:	4818      	ldr	r0, [pc, #96]	@ (80146e4 <HW_IPCC_Tx_Handler+0x68>)
 8014684:	f7ff ff99 	bl	80145ba <LL_C1_IPCC_IsActiveFlag_CHx>
 8014688:	4603      	mov	r3, r0
 801468a:	2b00      	cmp	r3, #0
 801468c:	d108      	bne.n	80146a0 <HW_IPCC_Tx_Handler+0x24>
 801468e:	4b15      	ldr	r3, [pc, #84]	@ (80146e4 <HW_IPCC_Tx_Handler+0x68>)
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014696:	2b00      	cmp	r3, #0
 8014698:	d102      	bne.n	80146a0 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801469a:	f000 f893 	bl	80147c4 <HW_IPCC_SYS_CmdEvtHandler>
 801469e:	e01e      	b.n	80146de <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80146a0:	2108      	movs	r1, #8
 80146a2:	4810      	ldr	r0, [pc, #64]	@ (80146e4 <HW_IPCC_Tx_Handler+0x68>)
 80146a4:	f7ff ff89 	bl	80145ba <LL_C1_IPCC_IsActiveFlag_CHx>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d108      	bne.n	80146c0 <HW_IPCC_Tx_Handler+0x44>
 80146ae:	4b0d      	ldr	r3, [pc, #52]	@ (80146e4 <HW_IPCC_Tx_Handler+0x68>)
 80146b0:	685b      	ldr	r3, [r3, #4]
 80146b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d102      	bne.n	80146c0 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80146ba:	f000 f8bd 	bl	8014838 <HW_IPCC_MM_FreeBufHandler>
 80146be:	e00e      	b.n	80146de <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80146c0:	2120      	movs	r1, #32
 80146c2:	4808      	ldr	r0, [pc, #32]	@ (80146e4 <HW_IPCC_Tx_Handler+0x68>)
 80146c4:	f7ff ff79 	bl	80145ba <LL_C1_IPCC_IsActiveFlag_CHx>
 80146c8:	4603      	mov	r3, r0
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d108      	bne.n	80146e0 <HW_IPCC_Tx_Handler+0x64>
 80146ce:	4b05      	ldr	r3, [pc, #20]	@ (80146e4 <HW_IPCC_Tx_Handler+0x68>)
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d102      	bne.n	80146e0 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80146da:	f000 f84f 	bl	801477c <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80146de:	bf00      	nop
 80146e0:	bf00      	nop
}
 80146e2:	bd80      	pop	{r7, pc}
 80146e4:	58000c00 	.word	0x58000c00

080146e8 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80146e8:	b580      	push	{r7, lr}
 80146ea:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80146ec:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80146f0:	f7ff fed3 	bl	801449a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80146f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80146f8:	f7ff fea4 	bl	8014444 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80146fc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8014700:	f7ff fe8c 	bl	801441c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8014704:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8014706:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8014708:	f7ff fe78 	bl	80143fc <LL_PWR_EnableBootC2>

  return;
 801470c:	bf00      	nop
}
 801470e:	bd80      	pop	{r7, pc}

08014710 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8014710:	b580      	push	{r7, lr}
 8014712:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8014714:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8014718:	f7ff fea6 	bl	8014468 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 801471c:	4806      	ldr	r0, [pc, #24]	@ (8014738 <HW_IPCC_Init+0x28>)
 801471e:	f7ff fee8 	bl	80144f2 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8014722:	4805      	ldr	r0, [pc, #20]	@ (8014738 <HW_IPCC_Init+0x28>)
 8014724:	f7ff fed5 	bl	80144d2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8014728:	202c      	movs	r0, #44	@ 0x2c
 801472a:	f7f0 f80c 	bl	8004746 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 801472e:	202d      	movs	r0, #45	@ 0x2d
 8014730:	f7f0 f809 	bl	8004746 <HAL_NVIC_EnableIRQ>

  return;
 8014734:	bf00      	nop
}
 8014736:	bd80      	pop	{r7, pc}
 8014738:	58000c00 	.word	0x58000c00

0801473c <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 801473c:	b580      	push	{r7, lr}
 801473e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014740:	2101      	movs	r1, #1
 8014742:	4802      	ldr	r0, [pc, #8]	@ (801474c <HW_IPCC_BLE_Init+0x10>)
 8014744:	f7ff ff0a 	bl	801455c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014748:	bf00      	nop
}
 801474a:	bd80      	pop	{r7, pc}
 801474c:	58000c00 	.word	0x58000c00

08014750 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8014750:	b580      	push	{r7, lr}
 8014752:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8014754:	2101      	movs	r1, #1
 8014756:	4802      	ldr	r0, [pc, #8]	@ (8014760 <HW_IPCC_BLE_SendCmd+0x10>)
 8014758:	f7ff ff20 	bl	801459c <LL_C1_IPCC_SetFlag_CHx>

  return;
 801475c:	bf00      	nop
}
 801475e:	bd80      	pop	{r7, pc}
 8014760:	58000c00 	.word	0x58000c00

08014764 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014764:	b580      	push	{r7, lr}
 8014766:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8014768:	f7fd f842 	bl	80117f0 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 801476c:	2101      	movs	r1, #1
 801476e:	4802      	ldr	r0, [pc, #8]	@ (8014778 <HW_IPCC_BLE_EvtHandler+0x14>)
 8014770:	f7ff ff06 	bl	8014580 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014774:	bf00      	nop
}
 8014776:	bd80      	pop	{r7, pc}
 8014778:	58000c00 	.word	0x58000c00

0801477c <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 801477c:	b580      	push	{r7, lr}
 801477e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014780:	2120      	movs	r1, #32
 8014782:	4803      	ldr	r0, [pc, #12]	@ (8014790 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014784:	f7ff fed8 	bl	8014538 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8014788:	f7fd f862 	bl	8011850 <HW_IPCC_BLE_AclDataAckNot>

  return;
 801478c:	bf00      	nop
}
 801478e:	bd80      	pop	{r7, pc}
 8014790:	58000c00 	.word	0x58000c00

08014794 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014794:	b580      	push	{r7, lr}
 8014796:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014798:	2102      	movs	r1, #2
 801479a:	4802      	ldr	r0, [pc, #8]	@ (80147a4 <HW_IPCC_SYS_Init+0x10>)
 801479c:	f7ff fede 	bl	801455c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80147a0:	bf00      	nop
}
 80147a2:	bd80      	pop	{r7, pc}
 80147a4:	58000c00 	.word	0x58000c00

080147a8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80147a8:	b580      	push	{r7, lr}
 80147aa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80147ac:	2102      	movs	r1, #2
 80147ae:	4804      	ldr	r0, [pc, #16]	@ (80147c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80147b0:	f7ff fef4 	bl	801459c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80147b4:	2102      	movs	r1, #2
 80147b6:	4802      	ldr	r0, [pc, #8]	@ (80147c0 <HW_IPCC_SYS_SendCmd+0x18>)
 80147b8:	f7ff feab 	bl	8014512 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80147bc:	bf00      	nop
}
 80147be:	bd80      	pop	{r7, pc}
 80147c0:	58000c00 	.word	0x58000c00

080147c4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80147c4:	b580      	push	{r7, lr}
 80147c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80147c8:	2102      	movs	r1, #2
 80147ca:	4803      	ldr	r0, [pc, #12]	@ (80147d8 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80147cc:	f7ff feb4 	bl	8014538 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80147d0:	f7fd f88e 	bl	80118f0 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80147d4:	bf00      	nop
}
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	58000c00 	.word	0x58000c00

080147dc <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80147e0:	f7fd f89c 	bl	801191c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80147e4:	2102      	movs	r1, #2
 80147e6:	4802      	ldr	r0, [pc, #8]	@ (80147f0 <HW_IPCC_SYS_EvtHandler+0x14>)
 80147e8:	f7ff feca 	bl	8014580 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80147ec:	bf00      	nop
}
 80147ee:	bd80      	pop	{r7, pc}
 80147f0:	58000c00 	.word	0x58000c00

080147f4 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80147f4:	b580      	push	{r7, lr}
 80147f6:	b082      	sub	sp, #8
 80147f8:	af00      	add	r7, sp, #0
 80147fa:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80147fc:	2108      	movs	r1, #8
 80147fe:	480c      	ldr	r0, [pc, #48]	@ (8014830 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014800:	f7ff fedb 	bl	80145ba <LL_C1_IPCC_IsActiveFlag_CHx>
 8014804:	4603      	mov	r3, r0
 8014806:	2b00      	cmp	r3, #0
 8014808:	d007      	beq.n	801481a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801480a:	4a0a      	ldr	r2, [pc, #40]	@ (8014834 <HW_IPCC_MM_SendFreeBuf+0x40>)
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014810:	2108      	movs	r1, #8
 8014812:	4807      	ldr	r0, [pc, #28]	@ (8014830 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014814:	f7ff fe7d 	bl	8014512 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8014818:	e006      	b.n	8014828 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801481e:	2108      	movs	r1, #8
 8014820:	4803      	ldr	r0, [pc, #12]	@ (8014830 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8014822:	f7ff febb 	bl	801459c <LL_C1_IPCC_SetFlag_CHx>
  return;
 8014826:	bf00      	nop
}
 8014828:	3708      	adds	r7, #8
 801482a:	46bd      	mov	sp, r7
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	58000c00 	.word	0x58000c00
 8014834:	200012a0 	.word	0x200012a0

08014838 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8014838:	b580      	push	{r7, lr}
 801483a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801483c:	2108      	movs	r1, #8
 801483e:	4806      	ldr	r0, [pc, #24]	@ (8014858 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014840:	f7ff fe7a 	bl	8014538 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8014844:	4b05      	ldr	r3, [pc, #20]	@ (801485c <HW_IPCC_MM_FreeBufHandler+0x24>)
 8014846:	681b      	ldr	r3, [r3, #0]
 8014848:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801484a:	2108      	movs	r1, #8
 801484c:	4802      	ldr	r0, [pc, #8]	@ (8014858 <HW_IPCC_MM_FreeBufHandler+0x20>)
 801484e:	f7ff fea5 	bl	801459c <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014852:	bf00      	nop
}
 8014854:	bd80      	pop	{r7, pc}
 8014856:	bf00      	nop
 8014858:	58000c00 	.word	0x58000c00
 801485c:	200012a0 	.word	0x200012a0

08014860 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014860:	b580      	push	{r7, lr}
 8014862:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014864:	2108      	movs	r1, #8
 8014866:	4802      	ldr	r0, [pc, #8]	@ (8014870 <HW_IPCC_TRACES_Init+0x10>)
 8014868:	f7ff fe78 	bl	801455c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801486c:	bf00      	nop
}
 801486e:	bd80      	pop	{r7, pc}
 8014870:	58000c00 	.word	0x58000c00

08014874 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014874:	b580      	push	{r7, lr}
 8014876:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8014878:	f7fd f8f8 	bl	8011a6c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 801487c:	2108      	movs	r1, #8
 801487e:	4802      	ldr	r0, [pc, #8]	@ (8014888 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014880:	f7ff fe7e 	bl	8014580 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014884:	bf00      	nop
}
 8014886:	bd80      	pop	{r7, pc}
 8014888:	58000c00 	.word	0x58000c00

0801488c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801488c:	b580      	push	{r7, lr}
 801488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014890:	2200      	movs	r2, #0
 8014892:	4912      	ldr	r1, [pc, #72]	@ (80148dc <MX_USB_Device_Init+0x50>)
 8014894:	4812      	ldr	r0, [pc, #72]	@ (80148e0 <MX_USB_Device_Init+0x54>)
 8014896:	f7f9 fd6d 	bl	800e374 <USBD_Init>
 801489a:	4603      	mov	r3, r0
 801489c:	2b00      	cmp	r3, #0
 801489e:	d001      	beq.n	80148a4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80148a0:	f7ef f9d2 	bl	8003c48 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80148a4:	490f      	ldr	r1, [pc, #60]	@ (80148e4 <MX_USB_Device_Init+0x58>)
 80148a6:	480e      	ldr	r0, [pc, #56]	@ (80148e0 <MX_USB_Device_Init+0x54>)
 80148a8:	f7f9 fd94 	bl	800e3d4 <USBD_RegisterClass>
 80148ac:	4603      	mov	r3, r0
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d001      	beq.n	80148b6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80148b2:	f7ef f9c9 	bl	8003c48 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80148b6:	490c      	ldr	r1, [pc, #48]	@ (80148e8 <MX_USB_Device_Init+0x5c>)
 80148b8:	4809      	ldr	r0, [pc, #36]	@ (80148e0 <MX_USB_Device_Init+0x54>)
 80148ba:	f7f9 fc8b 	bl	800e1d4 <USBD_CDC_RegisterInterface>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d001      	beq.n	80148c8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80148c4:	f7ef f9c0 	bl	8003c48 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80148c8:	4805      	ldr	r0, [pc, #20]	@ (80148e0 <MX_USB_Device_Init+0x54>)
 80148ca:	f7f9 fdb9 	bl	800e440 <USBD_Start>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d001      	beq.n	80148d8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 80148d4:	f7ef f9b8 	bl	8003c48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 80148d8:	bf00      	nop
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	200000d0 	.word	0x200000d0
 80148e0:	200012a4 	.word	0x200012a4
 80148e4:	20000024 	.word	0x20000024
 80148e8:	200000bc 	.word	0x200000bc

080148ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80148f0:	2200      	movs	r2, #0
 80148f2:	4905      	ldr	r1, [pc, #20]	@ (8014908 <CDC_Init_FS+0x1c>)
 80148f4:	4805      	ldr	r0, [pc, #20]	@ (801490c <CDC_Init_FS+0x20>)
 80148f6:	f7f9 fc87 	bl	800e208 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80148fa:	4905      	ldr	r1, [pc, #20]	@ (8014910 <CDC_Init_FS+0x24>)
 80148fc:	4803      	ldr	r0, [pc, #12]	@ (801490c <CDC_Init_FS+0x20>)
 80148fe:	f7f9 fca5 	bl	800e24c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014902:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014904:	4618      	mov	r0, r3
 8014906:	bd80      	pop	{r7, pc}
 8014908:	20001d80 	.word	0x20001d80
 801490c:	200012a4 	.word	0x200012a4
 8014910:	20001580 	.word	0x20001580

08014914 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014914:	b480      	push	{r7}
 8014916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014918:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801491a:	4618      	mov	r0, r3
 801491c:	46bd      	mov	sp, r7
 801491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014922:	4770      	bx	lr

08014924 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014924:	b480      	push	{r7}
 8014926:	b083      	sub	sp, #12
 8014928:	af00      	add	r7, sp, #0
 801492a:	4603      	mov	r3, r0
 801492c:	6039      	str	r1, [r7, #0]
 801492e:	71fb      	strb	r3, [r7, #7]
 8014930:	4613      	mov	r3, r2
 8014932:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014934:	79fb      	ldrb	r3, [r7, #7]
 8014936:	2b23      	cmp	r3, #35	@ 0x23
 8014938:	d84a      	bhi.n	80149d0 <CDC_Control_FS+0xac>
 801493a:	a201      	add	r2, pc, #4	@ (adr r2, 8014940 <CDC_Control_FS+0x1c>)
 801493c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014940:	080149d1 	.word	0x080149d1
 8014944:	080149d1 	.word	0x080149d1
 8014948:	080149d1 	.word	0x080149d1
 801494c:	080149d1 	.word	0x080149d1
 8014950:	080149d1 	.word	0x080149d1
 8014954:	080149d1 	.word	0x080149d1
 8014958:	080149d1 	.word	0x080149d1
 801495c:	080149d1 	.word	0x080149d1
 8014960:	080149d1 	.word	0x080149d1
 8014964:	080149d1 	.word	0x080149d1
 8014968:	080149d1 	.word	0x080149d1
 801496c:	080149d1 	.word	0x080149d1
 8014970:	080149d1 	.word	0x080149d1
 8014974:	080149d1 	.word	0x080149d1
 8014978:	080149d1 	.word	0x080149d1
 801497c:	080149d1 	.word	0x080149d1
 8014980:	080149d1 	.word	0x080149d1
 8014984:	080149d1 	.word	0x080149d1
 8014988:	080149d1 	.word	0x080149d1
 801498c:	080149d1 	.word	0x080149d1
 8014990:	080149d1 	.word	0x080149d1
 8014994:	080149d1 	.word	0x080149d1
 8014998:	080149d1 	.word	0x080149d1
 801499c:	080149d1 	.word	0x080149d1
 80149a0:	080149d1 	.word	0x080149d1
 80149a4:	080149d1 	.word	0x080149d1
 80149a8:	080149d1 	.word	0x080149d1
 80149ac:	080149d1 	.word	0x080149d1
 80149b0:	080149d1 	.word	0x080149d1
 80149b4:	080149d1 	.word	0x080149d1
 80149b8:	080149d1 	.word	0x080149d1
 80149bc:	080149d1 	.word	0x080149d1
 80149c0:	080149d1 	.word	0x080149d1
 80149c4:	080149d1 	.word	0x080149d1
 80149c8:	080149d1 	.word	0x080149d1
 80149cc:	080149d1 	.word	0x080149d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80149d0:	bf00      	nop
  }

  return (USBD_OK);
 80149d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80149d4:	4618      	mov	r0, r3
 80149d6:	370c      	adds	r7, #12
 80149d8:	46bd      	mov	sp, r7
 80149da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149de:	4770      	bx	lr

080149e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b082      	sub	sp, #8
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	6078      	str	r0, [r7, #4]
 80149e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80149ea:	6879      	ldr	r1, [r7, #4]
 80149ec:	4805      	ldr	r0, [pc, #20]	@ (8014a04 <CDC_Receive_FS+0x24>)
 80149ee:	f7f9 fc2d 	bl	800e24c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80149f2:	4804      	ldr	r0, [pc, #16]	@ (8014a04 <CDC_Receive_FS+0x24>)
 80149f4:	f7f9 fc88 	bl	800e308 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80149f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	200012a4 	.word	0x200012a4

08014a08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014a08:	b580      	push	{r7, lr}
 8014a0a:	b084      	sub	sp, #16
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	460b      	mov	r3, r1
 8014a12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014a14:	2300      	movs	r3, #0
 8014a16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014a18:	4b0d      	ldr	r3, [pc, #52]	@ (8014a50 <CDC_Transmit_FS+0x48>)
 8014a1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014a1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d001      	beq.n	8014a2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014a2a:	2301      	movs	r3, #1
 8014a2c:	e00b      	b.n	8014a46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014a2e:	887b      	ldrh	r3, [r7, #2]
 8014a30:	461a      	mov	r2, r3
 8014a32:	6879      	ldr	r1, [r7, #4]
 8014a34:	4806      	ldr	r0, [pc, #24]	@ (8014a50 <CDC_Transmit_FS+0x48>)
 8014a36:	f7f9 fbe7 	bl	800e208 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014a3a:	4805      	ldr	r0, [pc, #20]	@ (8014a50 <CDC_Transmit_FS+0x48>)
 8014a3c:	f7f9 fc24 	bl	800e288 <USBD_CDC_TransmitPacket>
 8014a40:	4603      	mov	r3, r0
 8014a42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3710      	adds	r7, #16
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	200012a4 	.word	0x200012a4

08014a54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014a54:	b480      	push	{r7}
 8014a56:	b087      	sub	sp, #28
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014a62:	2300      	movs	r3, #0
 8014a64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	371c      	adds	r7, #28
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a74:	4770      	bx	lr
	...

08014a78 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a78:	b480      	push	{r7}
 8014a7a:	b083      	sub	sp, #12
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	4603      	mov	r3, r0
 8014a80:	6039      	str	r1, [r7, #0]
 8014a82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	2212      	movs	r2, #18
 8014a88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014a8a:	4b03      	ldr	r3, [pc, #12]	@ (8014a98 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	370c      	adds	r7, #12
 8014a90:	46bd      	mov	sp, r7
 8014a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a96:	4770      	bx	lr
 8014a98:	200000f0 	.word	0x200000f0

08014a9c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014a9c:	b480      	push	{r7}
 8014a9e:	b083      	sub	sp, #12
 8014aa0:	af00      	add	r7, sp, #0
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	6039      	str	r1, [r7, #0]
 8014aa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014aa8:	683b      	ldr	r3, [r7, #0]
 8014aaa:	2204      	movs	r2, #4
 8014aac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014aae:	4b03      	ldr	r3, [pc, #12]	@ (8014abc <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	370c      	adds	r7, #12
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aba:	4770      	bx	lr
 8014abc:	20000104 	.word	0x20000104

08014ac0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	6039      	str	r1, [r7, #0]
 8014aca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014acc:	79fb      	ldrb	r3, [r7, #7]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d105      	bne.n	8014ade <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014ad2:	683a      	ldr	r2, [r7, #0]
 8014ad4:	4907      	ldr	r1, [pc, #28]	@ (8014af4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014ad6:	4808      	ldr	r0, [pc, #32]	@ (8014af8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014ad8:	f7fa fdfa 	bl	800f6d0 <USBD_GetString>
 8014adc:	e004      	b.n	8014ae8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014ade:	683a      	ldr	r2, [r7, #0]
 8014ae0:	4904      	ldr	r1, [pc, #16]	@ (8014af4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014ae2:	4805      	ldr	r0, [pc, #20]	@ (8014af8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8014ae4:	f7fa fdf4 	bl	800f6d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014ae8:	4b02      	ldr	r3, [pc, #8]	@ (8014af4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3708      	adds	r7, #8
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}
 8014af2:	bf00      	nop
 8014af4:	20002580 	.word	0x20002580
 8014af8:	080185c4 	.word	0x080185c4

08014afc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	4603      	mov	r3, r0
 8014b04:	6039      	str	r1, [r7, #0]
 8014b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014b08:	683a      	ldr	r2, [r7, #0]
 8014b0a:	4904      	ldr	r1, [pc, #16]	@ (8014b1c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014b0c:	4804      	ldr	r0, [pc, #16]	@ (8014b20 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8014b0e:	f7fa fddf 	bl	800f6d0 <USBD_GetString>
  return USBD_StrDesc;
 8014b12:	4b02      	ldr	r3, [pc, #8]	@ (8014b1c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014b14:	4618      	mov	r0, r3
 8014b16:	3708      	adds	r7, #8
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}
 8014b1c:	20002580 	.word	0x20002580
 8014b20:	080185dc 	.word	0x080185dc

08014b24 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b082      	sub	sp, #8
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	4603      	mov	r3, r0
 8014b2c:	6039      	str	r1, [r7, #0]
 8014b2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	221a      	movs	r2, #26
 8014b34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014b36:	f000 f843 	bl	8014bc0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014b3a:	4b02      	ldr	r3, [pc, #8]	@ (8014b44 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	3708      	adds	r7, #8
 8014b40:	46bd      	mov	sp, r7
 8014b42:	bd80      	pop	{r7, pc}
 8014b44:	20000108 	.word	0x20000108

08014b48 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	4603      	mov	r3, r0
 8014b50:	6039      	str	r1, [r7, #0]
 8014b52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014b54:	79fb      	ldrb	r3, [r7, #7]
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	d105      	bne.n	8014b66 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014b5a:	683a      	ldr	r2, [r7, #0]
 8014b5c:	4907      	ldr	r1, [pc, #28]	@ (8014b7c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014b5e:	4808      	ldr	r0, [pc, #32]	@ (8014b80 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014b60:	f7fa fdb6 	bl	800f6d0 <USBD_GetString>
 8014b64:	e004      	b.n	8014b70 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014b66:	683a      	ldr	r2, [r7, #0]
 8014b68:	4904      	ldr	r1, [pc, #16]	@ (8014b7c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014b6a:	4805      	ldr	r0, [pc, #20]	@ (8014b80 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014b6c:	f7fa fdb0 	bl	800f6d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014b70:	4b02      	ldr	r3, [pc, #8]	@ (8014b7c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	3708      	adds	r7, #8
 8014b76:	46bd      	mov	sp, r7
 8014b78:	bd80      	pop	{r7, pc}
 8014b7a:	bf00      	nop
 8014b7c:	20002580 	.word	0x20002580
 8014b80:	080185f0 	.word	0x080185f0

08014b84 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	6039      	str	r1, [r7, #0]
 8014b8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014b90:	79fb      	ldrb	r3, [r7, #7]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d105      	bne.n	8014ba2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014b96:	683a      	ldr	r2, [r7, #0]
 8014b98:	4907      	ldr	r1, [pc, #28]	@ (8014bb8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014b9a:	4808      	ldr	r0, [pc, #32]	@ (8014bbc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014b9c:	f7fa fd98 	bl	800f6d0 <USBD_GetString>
 8014ba0:	e004      	b.n	8014bac <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014ba2:	683a      	ldr	r2, [r7, #0]
 8014ba4:	4904      	ldr	r1, [pc, #16]	@ (8014bb8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014ba6:	4805      	ldr	r0, [pc, #20]	@ (8014bbc <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014ba8:	f7fa fd92 	bl	800f6d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014bac:	4b02      	ldr	r3, [pc, #8]	@ (8014bb8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3708      	adds	r7, #8
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	20002580 	.word	0x20002580
 8014bbc:	080185fc 	.word	0x080185fc

08014bc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014bc6:	4b0f      	ldr	r3, [pc, #60]	@ (8014c04 <Get_SerialNum+0x44>)
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8014c08 <Get_SerialNum+0x48>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8014c0c <Get_SerialNum+0x4c>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014bd8:	68fa      	ldr	r2, [r7, #12]
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	4413      	add	r3, r2
 8014bde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d009      	beq.n	8014bfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014be6:	2208      	movs	r2, #8
 8014be8:	4909      	ldr	r1, [pc, #36]	@ (8014c10 <Get_SerialNum+0x50>)
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f000 f814 	bl	8014c18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014bf0:	2204      	movs	r2, #4
 8014bf2:	4908      	ldr	r1, [pc, #32]	@ (8014c14 <Get_SerialNum+0x54>)
 8014bf4:	68b8      	ldr	r0, [r7, #8]
 8014bf6:	f000 f80f 	bl	8014c18 <IntToUnicode>
  }
}
 8014bfa:	bf00      	nop
 8014bfc:	3710      	adds	r7, #16
 8014bfe:	46bd      	mov	sp, r7
 8014c00:	bd80      	pop	{r7, pc}
 8014c02:	bf00      	nop
 8014c04:	1fff7590 	.word	0x1fff7590
 8014c08:	1fff7594 	.word	0x1fff7594
 8014c0c:	1fff7598 	.word	0x1fff7598
 8014c10:	2000010a 	.word	0x2000010a
 8014c14:	2000011a 	.word	0x2000011a

08014c18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014c18:	b480      	push	{r7}
 8014c1a:	b087      	sub	sp, #28
 8014c1c:	af00      	add	r7, sp, #0
 8014c1e:	60f8      	str	r0, [r7, #12]
 8014c20:	60b9      	str	r1, [r7, #8]
 8014c22:	4613      	mov	r3, r2
 8014c24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014c26:	2300      	movs	r3, #0
 8014c28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	75fb      	strb	r3, [r7, #23]
 8014c2e:	e027      	b.n	8014c80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	0f1b      	lsrs	r3, r3, #28
 8014c34:	2b09      	cmp	r3, #9
 8014c36:	d80b      	bhi.n	8014c50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	0f1b      	lsrs	r3, r3, #28
 8014c3c:	b2da      	uxtb	r2, r3
 8014c3e:	7dfb      	ldrb	r3, [r7, #23]
 8014c40:	005b      	lsls	r3, r3, #1
 8014c42:	4619      	mov	r1, r3
 8014c44:	68bb      	ldr	r3, [r7, #8]
 8014c46:	440b      	add	r3, r1
 8014c48:	3230      	adds	r2, #48	@ 0x30
 8014c4a:	b2d2      	uxtb	r2, r2
 8014c4c:	701a      	strb	r2, [r3, #0]
 8014c4e:	e00a      	b.n	8014c66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014c50:	68fb      	ldr	r3, [r7, #12]
 8014c52:	0f1b      	lsrs	r3, r3, #28
 8014c54:	b2da      	uxtb	r2, r3
 8014c56:	7dfb      	ldrb	r3, [r7, #23]
 8014c58:	005b      	lsls	r3, r3, #1
 8014c5a:	4619      	mov	r1, r3
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	440b      	add	r3, r1
 8014c60:	3237      	adds	r2, #55	@ 0x37
 8014c62:	b2d2      	uxtb	r2, r2
 8014c64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	011b      	lsls	r3, r3, #4
 8014c6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014c6c:	7dfb      	ldrb	r3, [r7, #23]
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	3301      	adds	r3, #1
 8014c72:	68ba      	ldr	r2, [r7, #8]
 8014c74:	4413      	add	r3, r2
 8014c76:	2200      	movs	r2, #0
 8014c78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014c7a:	7dfb      	ldrb	r3, [r7, #23]
 8014c7c:	3301      	adds	r3, #1
 8014c7e:	75fb      	strb	r3, [r7, #23]
 8014c80:	7dfa      	ldrb	r2, [r7, #23]
 8014c82:	79fb      	ldrb	r3, [r7, #7]
 8014c84:	429a      	cmp	r2, r3
 8014c86:	d3d3      	bcc.n	8014c30 <IntToUnicode+0x18>
  }
}
 8014c88:	bf00      	nop
 8014c8a:	bf00      	nop
 8014c8c:	371c      	adds	r7, #28
 8014c8e:	46bd      	mov	sp, r7
 8014c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c94:	4770      	bx	lr

08014c96 <LL_AHB2_GRP1_EnableClock>:
{
 8014c96:	b480      	push	{r7}
 8014c98:	b085      	sub	sp, #20
 8014c9a:	af00      	add	r7, sp, #0
 8014c9c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014c9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ca2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	4313      	orrs	r3, r2
 8014cac:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014cae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	4013      	ands	r3, r2
 8014cb8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014cba:	68fb      	ldr	r3, [r7, #12]
}
 8014cbc:	bf00      	nop
 8014cbe:	3714      	adds	r7, #20
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc6:	4770      	bx	lr

08014cc8 <LL_APB1_GRP1_EnableClock>:
{
 8014cc8:	b480      	push	{r7}
 8014cca:	b085      	sub	sp, #20
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8014cd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014cd4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014cd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	4313      	orrs	r3, r2
 8014cde:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014ce0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014ce4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	4013      	ands	r3, r2
 8014cea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014cec:	68fb      	ldr	r3, [r7, #12]
}
 8014cee:	bf00      	nop
 8014cf0:	3714      	adds	r7, #20
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf8:	4770      	bx	lr
	...

08014cfc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b09c      	sub	sp, #112	@ 0x70
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014d04:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014d08:	2200      	movs	r2, #0
 8014d0a:	601a      	str	r2, [r3, #0]
 8014d0c:	605a      	str	r2, [r3, #4]
 8014d0e:	609a      	str	r2, [r3, #8]
 8014d10:	60da      	str	r2, [r3, #12]
 8014d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014d14:	f107 030c 	add.w	r3, r7, #12
 8014d18:	2250      	movs	r2, #80	@ 0x50
 8014d1a:	2100      	movs	r1, #0
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f000 ffdb 	bl	8015cd8 <memset>
  if(pcdHandle->Instance==USB)
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	4a23      	ldr	r2, [pc, #140]	@ (8014db4 <HAL_PCD_MspInit+0xb8>)
 8014d28:	4293      	cmp	r3, r2
 8014d2a:	d13e      	bne.n	8014daa <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014d30:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8014d32:	2306      	movs	r3, #6
 8014d34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8014d36:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014d3a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8014d3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014d40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8014d42:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8014d46:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8014d48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014d4c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8014d4e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8014d52:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014d54:	f107 030c 	add.w	r3, r7, #12
 8014d58:	4618      	mov	r0, r3
 8014d5a:	f7f3 fe79 	bl	8008a50 <HAL_RCCEx_PeriphCLKConfig>
 8014d5e:	4603      	mov	r3, r0
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d001      	beq.n	8014d68 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8014d64:	f7ee ff70 	bl	8003c48 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014d68:	2001      	movs	r0, #1
 8014d6a:	f7ff ff94 	bl	8014c96 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014d6e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d74:	2302      	movs	r3, #2
 8014d76:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d78:	2300      	movs	r3, #0
 8014d7a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8014d80:	230a      	movs	r3, #10
 8014d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014d84:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014d88:	4619      	mov	r1, r3
 8014d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8014d8e:	f7ef ff45 	bl	8004c1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014d92:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8014d96:	f7ff ff97 	bl	8014cc8 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8014d9a:	2200      	movs	r2, #0
 8014d9c:	2105      	movs	r1, #5
 8014d9e:	2014      	movs	r0, #20
 8014da0:	f7ef fcb7 	bl	8004712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014da4:	2014      	movs	r0, #20
 8014da6:	f7ef fcce 	bl	8004746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014daa:	bf00      	nop
 8014dac:	3770      	adds	r7, #112	@ 0x70
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	40006800 	.word	0x40006800

08014db8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b082      	sub	sp, #8
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8014dcc:	4619      	mov	r1, r3
 8014dce:	4610      	mov	r0, r2
 8014dd0:	f7f9 fb83 	bl	800e4da <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014dd4:	bf00      	nop
 8014dd6:	3708      	adds	r7, #8
 8014dd8:	46bd      	mov	sp, r7
 8014dda:	bd80      	pop	{r7, pc}

08014ddc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b082      	sub	sp, #8
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	6078      	str	r0, [r7, #4]
 8014de4:	460b      	mov	r3, r1
 8014de6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014de8:	687b      	ldr	r3, [r7, #4]
 8014dea:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014dee:	78fa      	ldrb	r2, [r7, #3]
 8014df0:	6879      	ldr	r1, [r7, #4]
 8014df2:	4613      	mov	r3, r2
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	4413      	add	r3, r2
 8014df8:	00db      	lsls	r3, r3, #3
 8014dfa:	440b      	add	r3, r1
 8014dfc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014e00:	681a      	ldr	r2, [r3, #0]
 8014e02:	78fb      	ldrb	r3, [r7, #3]
 8014e04:	4619      	mov	r1, r3
 8014e06:	f7f9 fbbd 	bl	800e584 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014e0a:	bf00      	nop
 8014e0c:	3708      	adds	r7, #8
 8014e0e:	46bd      	mov	sp, r7
 8014e10:	bd80      	pop	{r7, pc}

08014e12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e12:	b580      	push	{r7, lr}
 8014e14:	b082      	sub	sp, #8
 8014e16:	af00      	add	r7, sp, #0
 8014e18:	6078      	str	r0, [r7, #4]
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014e24:	78fa      	ldrb	r2, [r7, #3]
 8014e26:	6879      	ldr	r1, [r7, #4]
 8014e28:	4613      	mov	r3, r2
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	4413      	add	r3, r2
 8014e2e:	00db      	lsls	r3, r3, #3
 8014e30:	440b      	add	r3, r1
 8014e32:	3324      	adds	r3, #36	@ 0x24
 8014e34:	681a      	ldr	r2, [r3, #0]
 8014e36:	78fb      	ldrb	r3, [r7, #3]
 8014e38:	4619      	mov	r1, r3
 8014e3a:	f7f9 fc56 	bl	800e6ea <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014e3e:	bf00      	nop
 8014e40:	3708      	adds	r7, #8
 8014e42:	46bd      	mov	sp, r7
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b082      	sub	sp, #8
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7f9 fd90 	bl	800e97a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014e5a:	bf00      	nop
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}

08014e62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e62:	b580      	push	{r7, lr}
 8014e64:	b084      	sub	sp, #16
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014e6a:	2301      	movs	r3, #1
 8014e6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	795b      	ldrb	r3, [r3, #5]
 8014e72:	2b02      	cmp	r3, #2
 8014e74:	d001      	beq.n	8014e7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014e76:	f7ee fee7 	bl	8003c48 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014e80:	7bfa      	ldrb	r2, [r7, #15]
 8014e82:	4611      	mov	r1, r2
 8014e84:	4618      	mov	r0, r3
 8014e86:	f7f9 fd34 	bl	800e8f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7f9 fcdc 	bl	800e84e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014e96:	bf00      	nop
 8014e98:	3710      	adds	r7, #16
 8014e9a:	46bd      	mov	sp, r7
 8014e9c:	bd80      	pop	{r7, pc}
	...

08014ea0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014eae:	4618      	mov	r0, r3
 8014eb0:	f7f9 fd2f 	bl	800e912 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	7a5b      	ldrb	r3, [r3, #9]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d005      	beq.n	8014ec8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ebc:	4b04      	ldr	r3, [pc, #16]	@ (8014ed0 <HAL_PCD_SuspendCallback+0x30>)
 8014ebe:	691b      	ldr	r3, [r3, #16]
 8014ec0:	4a03      	ldr	r2, [pc, #12]	@ (8014ed0 <HAL_PCD_SuspendCallback+0x30>)
 8014ec2:	f043 0306 	orr.w	r3, r3, #6
 8014ec6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014ec8:	bf00      	nop
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	e000ed00 	.word	0xe000ed00

08014ed4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	7a5b      	ldrb	r3, [r3, #9]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d007      	beq.n	8014ef4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014ee4:	4b08      	ldr	r3, [pc, #32]	@ (8014f08 <HAL_PCD_ResumeCallback+0x34>)
 8014ee6:	691b      	ldr	r3, [r3, #16]
 8014ee8:	4a07      	ldr	r2, [pc, #28]	@ (8014f08 <HAL_PCD_ResumeCallback+0x34>)
 8014eea:	f023 0306 	bic.w	r3, r3, #6
 8014eee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014ef0:	f000 f9fa 	bl	80152e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7f9 fd25 	bl	800e94a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014f00:	bf00      	nop
 8014f02:	3708      	adds	r7, #8
 8014f04:	46bd      	mov	sp, r7
 8014f06:	bd80      	pop	{r7, pc}
 8014f08:	e000ed00 	.word	0xe000ed00

08014f0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014f14:	4a2c      	ldr	r2, [pc, #176]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f20:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014f24:	f7f2 fa7c 	bl	8007420 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8014f28:	4b27      	ldr	r3, [pc, #156]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f2a:	4a28      	ldr	r2, [pc, #160]	@ (8014fcc <USBD_LL_Init+0xc0>)
 8014f2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014f2e:	4b26      	ldr	r3, [pc, #152]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f30:	2208      	movs	r2, #8
 8014f32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014f34:	4b24      	ldr	r3, [pc, #144]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f36:	2202      	movs	r2, #2
 8014f38:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014f3a:	4b23      	ldr	r3, [pc, #140]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f3c:	2202      	movs	r2, #2
 8014f3e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8014f40:	4b21      	ldr	r3, [pc, #132]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f42:	2200      	movs	r2, #0
 8014f44:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8014f46:	4b20      	ldr	r3, [pc, #128]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f48:	2200      	movs	r2, #0
 8014f4a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8014f4c:	4b1e      	ldr	r3, [pc, #120]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f4e:	2200      	movs	r2, #0
 8014f50:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8014f52:	4b1d      	ldr	r3, [pc, #116]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f54:	2200      	movs	r2, #0
 8014f56:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8014f58:	481b      	ldr	r0, [pc, #108]	@ (8014fc8 <USBD_LL_Init+0xbc>)
 8014f5a:	f7f0 fd0f 	bl	800597c <HAL_PCD_Init>
 8014f5e:	4603      	mov	r3, r0
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d001      	beq.n	8014f68 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8014f64:	f7ee fe70 	bl	8003c48 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f6e:	2318      	movs	r3, #24
 8014f70:	2200      	movs	r2, #0
 8014f72:	2100      	movs	r1, #0
 8014f74:	f7f2 f9c8 	bl	8007308 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f7e:	2358      	movs	r3, #88	@ 0x58
 8014f80:	2200      	movs	r2, #0
 8014f82:	2180      	movs	r1, #128	@ 0x80
 8014f84:	f7f2 f9c0 	bl	8007308 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f8e:	23c0      	movs	r3, #192	@ 0xc0
 8014f90:	2200      	movs	r2, #0
 8014f92:	2181      	movs	r1, #129	@ 0x81
 8014f94:	f7f2 f9b8 	bl	8007308 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014f9e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8014fa2:	2200      	movs	r2, #0
 8014fa4:	2101      	movs	r1, #1
 8014fa6:	f7f2 f9af 	bl	8007308 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8014fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	2182      	movs	r1, #130	@ 0x82
 8014fb8:	f7f2 f9a6 	bl	8007308 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8014fbc:	2300      	movs	r3, #0
}
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	3708      	adds	r7, #8
 8014fc2:	46bd      	mov	sp, r7
 8014fc4:	bd80      	pop	{r7, pc}
 8014fc6:	bf00      	nop
 8014fc8:	20002780 	.word	0x20002780
 8014fcc:	40006800 	.word	0x40006800

08014fd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b084      	sub	sp, #16
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014fd8:	2300      	movs	r3, #0
 8014fda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014fdc:	2300      	movs	r3, #0
 8014fde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8014fe6:	4618      	mov	r0, r3
 8014fe8:	f7f0 fd96 	bl	8005b18 <HAL_PCD_Start>
 8014fec:	4603      	mov	r3, r0
 8014fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014ff0:	7bfb      	ldrb	r3, [r7, #15]
 8014ff2:	4618      	mov	r0, r3
 8014ff4:	f000 f97e 	bl	80152f4 <USBD_Get_USB_Status>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3710      	adds	r7, #16
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}

08015006 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015006:	b580      	push	{r7, lr}
 8015008:	b084      	sub	sp, #16
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
 801500e:	4608      	mov	r0, r1
 8015010:	4611      	mov	r1, r2
 8015012:	461a      	mov	r2, r3
 8015014:	4603      	mov	r3, r0
 8015016:	70fb      	strb	r3, [r7, #3]
 8015018:	460b      	mov	r3, r1
 801501a:	70bb      	strb	r3, [r7, #2]
 801501c:	4613      	mov	r3, r2
 801501e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015020:	2300      	movs	r3, #0
 8015022:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015024:	2300      	movs	r3, #0
 8015026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801502e:	78bb      	ldrb	r3, [r7, #2]
 8015030:	883a      	ldrh	r2, [r7, #0]
 8015032:	78f9      	ldrb	r1, [r7, #3]
 8015034:	f7f0 fedd 	bl	8005df2 <HAL_PCD_EP_Open>
 8015038:	4603      	mov	r3, r0
 801503a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801503c:	7bfb      	ldrb	r3, [r7, #15]
 801503e:	4618      	mov	r0, r3
 8015040:	f000 f958 	bl	80152f4 <USBD_Get_USB_Status>
 8015044:	4603      	mov	r3, r0
 8015046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015048:	7bbb      	ldrb	r3, [r7, #14]
}
 801504a:	4618      	mov	r0, r3
 801504c:	3710      	adds	r7, #16
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}

08015052 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015052:	b580      	push	{r7, lr}
 8015054:	b084      	sub	sp, #16
 8015056:	af00      	add	r7, sp, #0
 8015058:	6078      	str	r0, [r7, #4]
 801505a:	460b      	mov	r3, r1
 801505c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801505e:	2300      	movs	r3, #0
 8015060:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015062:	2300      	movs	r3, #0
 8015064:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801506c:	78fa      	ldrb	r2, [r7, #3]
 801506e:	4611      	mov	r1, r2
 8015070:	4618      	mov	r0, r3
 8015072:	f7f0 ff1b 	bl	8005eac <HAL_PCD_EP_Close>
 8015076:	4603      	mov	r3, r0
 8015078:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801507a:	7bfb      	ldrb	r3, [r7, #15]
 801507c:	4618      	mov	r0, r3
 801507e:	f000 f939 	bl	80152f4 <USBD_Get_USB_Status>
 8015082:	4603      	mov	r3, r0
 8015084:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015086:	7bbb      	ldrb	r3, [r7, #14]
}
 8015088:	4618      	mov	r0, r3
 801508a:	3710      	adds	r7, #16
 801508c:	46bd      	mov	sp, r7
 801508e:	bd80      	pop	{r7, pc}

08015090 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b084      	sub	sp, #16
 8015094:	af00      	add	r7, sp, #0
 8015096:	6078      	str	r0, [r7, #4]
 8015098:	460b      	mov	r3, r1
 801509a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801509c:	2300      	movs	r3, #0
 801509e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150a0:	2300      	movs	r3, #0
 80150a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80150aa:	78fa      	ldrb	r2, [r7, #3]
 80150ac:	4611      	mov	r1, r2
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7f0 ffc4 	bl	800603c <HAL_PCD_EP_SetStall>
 80150b4:	4603      	mov	r3, r0
 80150b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150b8:	7bfb      	ldrb	r3, [r7, #15]
 80150ba:	4618      	mov	r0, r3
 80150bc:	f000 f91a 	bl	80152f4 <USBD_Get_USB_Status>
 80150c0:	4603      	mov	r3, r0
 80150c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80150c6:	4618      	mov	r0, r3
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}

080150ce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80150ce:	b580      	push	{r7, lr}
 80150d0:	b084      	sub	sp, #16
 80150d2:	af00      	add	r7, sp, #0
 80150d4:	6078      	str	r0, [r7, #4]
 80150d6:	460b      	mov	r3, r1
 80150d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150da:	2300      	movs	r3, #0
 80150dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150de:	2300      	movs	r3, #0
 80150e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80150e8:	78fa      	ldrb	r2, [r7, #3]
 80150ea:	4611      	mov	r1, r2
 80150ec:	4618      	mov	r0, r3
 80150ee:	f7f0 fff7 	bl	80060e0 <HAL_PCD_EP_ClrStall>
 80150f2:	4603      	mov	r3, r0
 80150f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150f6:	7bfb      	ldrb	r3, [r7, #15]
 80150f8:	4618      	mov	r0, r3
 80150fa:	f000 f8fb 	bl	80152f4 <USBD_Get_USB_Status>
 80150fe:	4603      	mov	r3, r0
 8015100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015102:	7bbb      	ldrb	r3, [r7, #14]
}
 8015104:	4618      	mov	r0, r3
 8015106:	3710      	adds	r7, #16
 8015108:	46bd      	mov	sp, r7
 801510a:	bd80      	pop	{r7, pc}

0801510c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801510c:	b480      	push	{r7}
 801510e:	b085      	sub	sp, #20
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	460b      	mov	r3, r1
 8015116:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801511e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015124:	2b00      	cmp	r3, #0
 8015126:	da0b      	bge.n	8015140 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015128:	78fb      	ldrb	r3, [r7, #3]
 801512a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801512e:	68f9      	ldr	r1, [r7, #12]
 8015130:	4613      	mov	r3, r2
 8015132:	009b      	lsls	r3, r3, #2
 8015134:	4413      	add	r3, r2
 8015136:	00db      	lsls	r3, r3, #3
 8015138:	440b      	add	r3, r1
 801513a:	3312      	adds	r3, #18
 801513c:	781b      	ldrb	r3, [r3, #0]
 801513e:	e00b      	b.n	8015158 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015140:	78fb      	ldrb	r3, [r7, #3]
 8015142:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015146:	68f9      	ldr	r1, [r7, #12]
 8015148:	4613      	mov	r3, r2
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	4413      	add	r3, r2
 801514e:	00db      	lsls	r3, r3, #3
 8015150:	440b      	add	r3, r1
 8015152:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8015156:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015158:	4618      	mov	r0, r3
 801515a:	3714      	adds	r7, #20
 801515c:	46bd      	mov	sp, r7
 801515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015162:	4770      	bx	lr

08015164 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b084      	sub	sp, #16
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
 801516c:	460b      	mov	r3, r1
 801516e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015170:	2300      	movs	r3, #0
 8015172:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015174:	2300      	movs	r3, #0
 8015176:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801517e:	78fa      	ldrb	r2, [r7, #3]
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7f0 fe11 	bl	8005daa <HAL_PCD_SetAddress>
 8015188:	4603      	mov	r3, r0
 801518a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801518c:	7bfb      	ldrb	r3, [r7, #15]
 801518e:	4618      	mov	r0, r3
 8015190:	f000 f8b0 	bl	80152f4 <USBD_Get_USB_Status>
 8015194:	4603      	mov	r3, r0
 8015196:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015198:	7bbb      	ldrb	r3, [r7, #14]
}
 801519a:	4618      	mov	r0, r3
 801519c:	3710      	adds	r7, #16
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}

080151a2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80151a2:	b580      	push	{r7, lr}
 80151a4:	b086      	sub	sp, #24
 80151a6:	af00      	add	r7, sp, #0
 80151a8:	60f8      	str	r0, [r7, #12]
 80151aa:	607a      	str	r2, [r7, #4]
 80151ac:	603b      	str	r3, [r7, #0]
 80151ae:	460b      	mov	r3, r1
 80151b0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151b2:	2300      	movs	r3, #0
 80151b4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151b6:	2300      	movs	r3, #0
 80151b8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80151c0:	7af9      	ldrb	r1, [r7, #11]
 80151c2:	683b      	ldr	r3, [r7, #0]
 80151c4:	687a      	ldr	r2, [r7, #4]
 80151c6:	f7f0 ff02 	bl	8005fce <HAL_PCD_EP_Transmit>
 80151ca:	4603      	mov	r3, r0
 80151cc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151ce:	7dfb      	ldrb	r3, [r7, #23]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f000 f88f 	bl	80152f4 <USBD_Get_USB_Status>
 80151d6:	4603      	mov	r3, r0
 80151d8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80151da:	7dbb      	ldrb	r3, [r7, #22]
}
 80151dc:	4618      	mov	r0, r3
 80151de:	3718      	adds	r7, #24
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b086      	sub	sp, #24
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	60f8      	str	r0, [r7, #12]
 80151ec:	607a      	str	r2, [r7, #4]
 80151ee:	603b      	str	r3, [r7, #0]
 80151f0:	460b      	mov	r3, r1
 80151f2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151f4:	2300      	movs	r3, #0
 80151f6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151f8:	2300      	movs	r3, #0
 80151fa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015202:	7af9      	ldrb	r1, [r7, #11]
 8015204:	683b      	ldr	r3, [r7, #0]
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	f7f0 fe98 	bl	8005f3c <HAL_PCD_EP_Receive>
 801520c:	4603      	mov	r3, r0
 801520e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015210:	7dfb      	ldrb	r3, [r7, #23]
 8015212:	4618      	mov	r0, r3
 8015214:	f000 f86e 	bl	80152f4 <USBD_Get_USB_Status>
 8015218:	4603      	mov	r3, r0
 801521a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801521c:	7dbb      	ldrb	r3, [r7, #22]
}
 801521e:	4618      	mov	r0, r3
 8015220:	3718      	adds	r7, #24
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}

08015226 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015226:	b580      	push	{r7, lr}
 8015228:	b082      	sub	sp, #8
 801522a:	af00      	add	r7, sp, #0
 801522c:	6078      	str	r0, [r7, #4]
 801522e:	460b      	mov	r3, r1
 8015230:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015238:	78fa      	ldrb	r2, [r7, #3]
 801523a:	4611      	mov	r1, r2
 801523c:	4618      	mov	r0, r3
 801523e:	f7f0 feae 	bl	8005f9e <HAL_PCD_EP_GetRxCount>
 8015242:	4603      	mov	r3, r0
}
 8015244:	4618      	mov	r0, r3
 8015246:	3708      	adds	r7, #8
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}

0801524c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801524c:	b580      	push	{r7, lr}
 801524e:	b082      	sub	sp, #8
 8015250:	af00      	add	r7, sp, #0
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	460b      	mov	r3, r1
 8015256:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015258:	78fb      	ldrb	r3, [r7, #3]
 801525a:	2b00      	cmp	r3, #0
 801525c:	d002      	beq.n	8015264 <HAL_PCDEx_LPM_Callback+0x18>
 801525e:	2b01      	cmp	r3, #1
 8015260:	d013      	beq.n	801528a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015262:	e023      	b.n	80152ac <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	7a5b      	ldrb	r3, [r3, #9]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d007      	beq.n	801527c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801526c:	f000 f83c 	bl	80152e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015270:	4b10      	ldr	r3, [pc, #64]	@ (80152b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015272:	691b      	ldr	r3, [r3, #16]
 8015274:	4a0f      	ldr	r2, [pc, #60]	@ (80152b4 <HAL_PCDEx_LPM_Callback+0x68>)
 8015276:	f023 0306 	bic.w	r3, r3, #6
 801527a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015282:	4618      	mov	r0, r3
 8015284:	f7f9 fb61 	bl	800e94a <USBD_LL_Resume>
    break;
 8015288:	e010      	b.n	80152ac <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015290:	4618      	mov	r0, r3
 8015292:	f7f9 fb3e 	bl	800e912 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	7a5b      	ldrb	r3, [r3, #9]
 801529a:	2b00      	cmp	r3, #0
 801529c:	d005      	beq.n	80152aa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801529e:	4b05      	ldr	r3, [pc, #20]	@ (80152b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80152a0:	691b      	ldr	r3, [r3, #16]
 80152a2:	4a04      	ldr	r2, [pc, #16]	@ (80152b4 <HAL_PCDEx_LPM_Callback+0x68>)
 80152a4:	f043 0306 	orr.w	r3, r3, #6
 80152a8:	6113      	str	r3, [r2, #16]
    break;
 80152aa:	bf00      	nop
}
 80152ac:	bf00      	nop
 80152ae:	3708      	adds	r7, #8
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd80      	pop	{r7, pc}
 80152b4:	e000ed00 	.word	0xe000ed00

080152b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b083      	sub	sp, #12
 80152bc:	af00      	add	r7, sp, #0
 80152be:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80152c0:	4b03      	ldr	r3, [pc, #12]	@ (80152d0 <USBD_static_malloc+0x18>)
}
 80152c2:	4618      	mov	r0, r3
 80152c4:	370c      	adds	r7, #12
 80152c6:	46bd      	mov	sp, r7
 80152c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152cc:	4770      	bx	lr
 80152ce:	bf00      	nop
 80152d0:	20002a5c 	.word	0x20002a5c

080152d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80152d4:	b480      	push	{r7}
 80152d6:	b083      	sub	sp, #12
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80152dc:	bf00      	nop
 80152de:	370c      	adds	r7, #12
 80152e0:	46bd      	mov	sp, r7
 80152e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e6:	4770      	bx	lr

080152e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80152ec:	f7ee fa36 	bl	800375c <SystemClock_Config>
}
 80152f0:	bf00      	nop
 80152f2:	bd80      	pop	{r7, pc}

080152f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80152f4:	b480      	push	{r7}
 80152f6:	b085      	sub	sp, #20
 80152f8:	af00      	add	r7, sp, #0
 80152fa:	4603      	mov	r3, r0
 80152fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152fe:	2300      	movs	r3, #0
 8015300:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015302:	79fb      	ldrb	r3, [r7, #7]
 8015304:	2b03      	cmp	r3, #3
 8015306:	d817      	bhi.n	8015338 <USBD_Get_USB_Status+0x44>
 8015308:	a201      	add	r2, pc, #4	@ (adr r2, 8015310 <USBD_Get_USB_Status+0x1c>)
 801530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801530e:	bf00      	nop
 8015310:	08015321 	.word	0x08015321
 8015314:	08015327 	.word	0x08015327
 8015318:	0801532d 	.word	0x0801532d
 801531c:	08015333 	.word	0x08015333
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015320:	2300      	movs	r3, #0
 8015322:	73fb      	strb	r3, [r7, #15]
    break;
 8015324:	e00b      	b.n	801533e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015326:	2303      	movs	r3, #3
 8015328:	73fb      	strb	r3, [r7, #15]
    break;
 801532a:	e008      	b.n	801533e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801532c:	2301      	movs	r3, #1
 801532e:	73fb      	strb	r3, [r7, #15]
    break;
 8015330:	e005      	b.n	801533e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015332:	2303      	movs	r3, #3
 8015334:	73fb      	strb	r3, [r7, #15]
    break;
 8015336:	e002      	b.n	801533e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015338:	2303      	movs	r3, #3
 801533a:	73fb      	strb	r3, [r7, #15]
    break;
 801533c:	bf00      	nop
  }
  return usb_status;
 801533e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015340:	4618      	mov	r0, r3
 8015342:	3714      	adds	r7, #20
 8015344:	46bd      	mov	sp, r7
 8015346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801534a:	4770      	bx	lr

0801534c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 801534c:	b480      	push	{r7}
 801534e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015350:	4b05      	ldr	r3, [pc, #20]	@ (8015368 <UTIL_LPM_Init+0x1c>)
 8015352:	2200      	movs	r2, #0
 8015354:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015356:	4b05      	ldr	r3, [pc, #20]	@ (801536c <UTIL_LPM_Init+0x20>)
 8015358:	2200      	movs	r2, #0
 801535a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801535c:	bf00      	nop
 801535e:	46bd      	mov	sp, r7
 8015360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015364:	4770      	bx	lr
 8015366:	bf00      	nop
 8015368:	20002c7c 	.word	0x20002c7c
 801536c:	20002c80 	.word	0x20002c80

08015370 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015370:	b480      	push	{r7}
 8015372:	b087      	sub	sp, #28
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	460b      	mov	r3, r1
 801537a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801537c:	f3ef 8310 	mrs	r3, PRIMASK
 8015380:	613b      	str	r3, [r7, #16]
  return(result);
 8015382:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015384:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015386:	b672      	cpsid	i
}
 8015388:	bf00      	nop
  
  switch(state)
 801538a:	78fb      	ldrb	r3, [r7, #3]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d008      	beq.n	80153a2 <UTIL_LPM_SetOffMode+0x32>
 8015390:	2b01      	cmp	r3, #1
 8015392:	d10e      	bne.n	80153b2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015394:	4b0d      	ldr	r3, [pc, #52]	@ (80153cc <UTIL_LPM_SetOffMode+0x5c>)
 8015396:	681a      	ldr	r2, [r3, #0]
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	4313      	orrs	r3, r2
 801539c:	4a0b      	ldr	r2, [pc, #44]	@ (80153cc <UTIL_LPM_SetOffMode+0x5c>)
 801539e:	6013      	str	r3, [r2, #0]
      break;
 80153a0:	e008      	b.n	80153b4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	43da      	mvns	r2, r3
 80153a6:	4b09      	ldr	r3, [pc, #36]	@ (80153cc <UTIL_LPM_SetOffMode+0x5c>)
 80153a8:	681b      	ldr	r3, [r3, #0]
 80153aa:	4013      	ands	r3, r2
 80153ac:	4a07      	ldr	r2, [pc, #28]	@ (80153cc <UTIL_LPM_SetOffMode+0x5c>)
 80153ae:	6013      	str	r3, [r2, #0]
      break;
 80153b0:	e000      	b.n	80153b4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80153b2:	bf00      	nop
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	f383 8810 	msr	PRIMASK, r3
}
 80153be:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80153c0:	bf00      	nop
 80153c2:	371c      	adds	r7, #28
 80153c4:	46bd      	mov	sp, r7
 80153c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ca:	4770      	bx	lr
 80153cc:	20002c80 	.word	0x20002c80

080153d0 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b090      	sub	sp, #64	@ 0x40
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80153d8:	4b73      	ldr	r3, [pc, #460]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80153de:	4b72      	ldr	r3, [pc, #456]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 80153e0:	681a      	ldr	r2, [r3, #0]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	4013      	ands	r3, r2
 80153e6:	4a70      	ldr	r2, [pc, #448]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 80153e8:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80153ea:	4b70      	ldr	r3, [pc, #448]	@ (80155ac <UTIL_SEQ_Run+0x1dc>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80153f0:	4b6f      	ldr	r3, [pc, #444]	@ (80155b0 <UTIL_SEQ_Run+0x1e0>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80153f6:	4b6f      	ldr	r3, [pc, #444]	@ (80155b4 <UTIL_SEQ_Run+0x1e4>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80153fc:	4b6e      	ldr	r3, [pc, #440]	@ (80155b8 <UTIL_SEQ_Run+0x1e8>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015402:	e08d      	b.n	8015520 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8015404:	2300      	movs	r3, #0
 8015406:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015408:	e002      	b.n	8015410 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801540a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801540c:	3301      	adds	r3, #1
 801540e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015410:	4a6a      	ldr	r2, [pc, #424]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 8015412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015414:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801541a:	401a      	ands	r2, r3
 801541c:	4b62      	ldr	r3, [pc, #392]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 801541e:	681b      	ldr	r3, [r3, #0]
 8015420:	4013      	ands	r3, r2
 8015422:	2b00      	cmp	r3, #0
 8015424:	d0f1      	beq.n	801540a <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8015426:	4a65      	ldr	r2, [pc, #404]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 8015428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801542a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015430:	401a      	ands	r2, r3
 8015432:	4b5d      	ldr	r3, [pc, #372]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	4013      	ands	r3, r2
 8015438:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801543a:	4a60      	ldr	r2, [pc, #384]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 801543c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801543e:	00db      	lsls	r3, r3, #3
 8015440:	4413      	add	r3, r2
 8015442:	685a      	ldr	r2, [r3, #4]
 8015444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015446:	4013      	ands	r3, r2
 8015448:	2b00      	cmp	r3, #0
 801544a:	d106      	bne.n	801545a <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801544c:	4a5b      	ldr	r2, [pc, #364]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 801544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015450:	00db      	lsls	r3, r3, #3
 8015452:	4413      	add	r3, r2
 8015454:	f04f 32ff 	mov.w	r2, #4294967295
 8015458:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801545a:	4a58      	ldr	r2, [pc, #352]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 801545c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801545e:	00db      	lsls	r3, r3, #3
 8015460:	4413      	add	r3, r2
 8015462:	685a      	ldr	r2, [r3, #4]
 8015464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015466:	4013      	ands	r3, r2
 8015468:	4618      	mov	r0, r3
 801546a:	f000 f9b3 	bl	80157d4 <SEQ_BitPosition>
 801546e:	4603      	mov	r3, r0
 8015470:	461a      	mov	r2, r3
 8015472:	4b53      	ldr	r3, [pc, #332]	@ (80155c0 <UTIL_SEQ_Run+0x1f0>)
 8015474:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8015476:	4a51      	ldr	r2, [pc, #324]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 8015478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801547a:	00db      	lsls	r3, r3, #3
 801547c:	4413      	add	r3, r2
 801547e:	685a      	ldr	r2, [r3, #4]
 8015480:	4b4f      	ldr	r3, [pc, #316]	@ (80155c0 <UTIL_SEQ_Run+0x1f0>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	2101      	movs	r1, #1
 8015486:	fa01 f303 	lsl.w	r3, r1, r3
 801548a:	43db      	mvns	r3, r3
 801548c:	401a      	ands	r2, r3
 801548e:	494b      	ldr	r1, [pc, #300]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 8015490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015492:	00db      	lsls	r3, r3, #3
 8015494:	440b      	add	r3, r1
 8015496:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015498:	f3ef 8310 	mrs	r3, PRIMASK
 801549c:	61bb      	str	r3, [r7, #24]
  return(result);
 801549e:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80154a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80154a2:	b672      	cpsid	i
}
 80154a4:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80154a6:	4b46      	ldr	r3, [pc, #280]	@ (80155c0 <UTIL_SEQ_Run+0x1f0>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	2201      	movs	r2, #1
 80154ac:	fa02 f303 	lsl.w	r3, r2, r3
 80154b0:	43da      	mvns	r2, r3
 80154b2:	4b3e      	ldr	r3, [pc, #248]	@ (80155ac <UTIL_SEQ_Run+0x1dc>)
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	4013      	ands	r3, r2
 80154b8:	4a3c      	ldr	r2, [pc, #240]	@ (80155ac <UTIL_SEQ_Run+0x1dc>)
 80154ba:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80154bc:	2302      	movs	r3, #2
 80154be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154c0:	e013      	b.n	80154ea <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80154c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154c4:	3b01      	subs	r3, #1
 80154c6:	4a3d      	ldr	r2, [pc, #244]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 80154c8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80154cc:	4b3c      	ldr	r3, [pc, #240]	@ (80155c0 <UTIL_SEQ_Run+0x1f0>)
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	2201      	movs	r2, #1
 80154d2:	fa02 f303 	lsl.w	r3, r2, r3
 80154d6:	43da      	mvns	r2, r3
 80154d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154da:	3b01      	subs	r3, #1
 80154dc:	400a      	ands	r2, r1
 80154de:	4937      	ldr	r1, [pc, #220]	@ (80155bc <UTIL_SEQ_Run+0x1ec>)
 80154e0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80154e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154e6:	3b01      	subs	r3, #1
 80154e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80154ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d1e8      	bne.n	80154c2 <UTIL_SEQ_Run+0xf2>
 80154f0:	6a3b      	ldr	r3, [r7, #32]
 80154f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	f383 8810 	msr	PRIMASK, r3
}
 80154fa:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80154fc:	4b30      	ldr	r3, [pc, #192]	@ (80155c0 <UTIL_SEQ_Run+0x1f0>)
 80154fe:	681b      	ldr	r3, [r3, #0]
 8015500:	4a30      	ldr	r2, [pc, #192]	@ (80155c4 <UTIL_SEQ_Run+0x1f4>)
 8015502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015506:	4798      	blx	r3

    local_taskset = TaskSet;
 8015508:	4b28      	ldr	r3, [pc, #160]	@ (80155ac <UTIL_SEQ_Run+0x1dc>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801550e:	4b28      	ldr	r3, [pc, #160]	@ (80155b0 <UTIL_SEQ_Run+0x1e0>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8015514:	4b27      	ldr	r3, [pc, #156]	@ (80155b4 <UTIL_SEQ_Run+0x1e4>)
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801551a:	4b27      	ldr	r3, [pc, #156]	@ (80155b8 <UTIL_SEQ_Run+0x1e8>)
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015524:	401a      	ands	r2, r3
 8015526:	4b20      	ldr	r3, [pc, #128]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 8015528:	681b      	ldr	r3, [r3, #0]
 801552a:	4013      	ands	r3, r2
 801552c:	2b00      	cmp	r3, #0
 801552e:	d005      	beq.n	801553c <UTIL_SEQ_Run+0x16c>
 8015530:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015534:	4013      	ands	r3, r2
 8015536:	2b00      	cmp	r3, #0
 8015538:	f43f af64 	beq.w	8015404 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801553c:	4b20      	ldr	r3, [pc, #128]	@ (80155c0 <UTIL_SEQ_Run+0x1f0>)
 801553e:	f04f 32ff 	mov.w	r2, #4294967295
 8015542:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8015544:	f000 f938 	bl	80157b8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015548:	f3ef 8310 	mrs	r3, PRIMASK
 801554c:	613b      	str	r3, [r7, #16]
  return(result);
 801554e:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8015550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015552:	b672      	cpsid	i
}
 8015554:	bf00      	nop
  local_taskset = TaskSet;
 8015556:	4b15      	ldr	r3, [pc, #84]	@ (80155ac <UTIL_SEQ_Run+0x1dc>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801555c:	4b14      	ldr	r3, [pc, #80]	@ (80155b0 <UTIL_SEQ_Run+0x1e0>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015562:	4b14      	ldr	r3, [pc, #80]	@ (80155b4 <UTIL_SEQ_Run+0x1e4>)
 8015564:	681b      	ldr	r3, [r3, #0]
 8015566:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8015568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801556c:	401a      	ands	r2, r3
 801556e:	4b0e      	ldr	r3, [pc, #56]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	4013      	ands	r3, r2
 8015574:	2b00      	cmp	r3, #0
 8015576:	d107      	bne.n	8015588 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8015578:	4b0f      	ldr	r3, [pc, #60]	@ (80155b8 <UTIL_SEQ_Run+0x1e8>)
 801557a:	681a      	ldr	r2, [r3, #0]
 801557c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801557e:	4013      	ands	r3, r2
 8015580:	2b00      	cmp	r3, #0
 8015582:	d101      	bne.n	8015588 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8015584:	f7ec ff21 	bl	80023ca <UTIL_SEQ_Idle>
 8015588:	69fb      	ldr	r3, [r7, #28]
 801558a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	f383 8810 	msr	PRIMASK, r3
}
 8015592:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8015594:	f000 f917 	bl	80157c6 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8015598:	4a03      	ldr	r2, [pc, #12]	@ (80155a8 <UTIL_SEQ_Run+0x1d8>)
 801559a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801559c:	6013      	str	r3, [r2, #0]

  return;
 801559e:	bf00      	nop
}
 80155a0:	3740      	adds	r7, #64	@ 0x40
 80155a2:	46bd      	mov	sp, r7
 80155a4:	bd80      	pop	{r7, pc}
 80155a6:	bf00      	nop
 80155a8:	20000128 	.word	0x20000128
 80155ac:	20002c84 	.word	0x20002c84
 80155b0:	20002c88 	.word	0x20002c88
 80155b4:	20000124 	.word	0x20000124
 80155b8:	20002c8c 	.word	0x20002c8c
 80155bc:	20002d14 	.word	0x20002d14
 80155c0:	20002c90 	.word	0x20002c90
 80155c4:	20002c94 	.word	0x20002c94

080155c8 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80155c8:	b580      	push	{r7, lr}
 80155ca:	b088      	sub	sp, #32
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	60f8      	str	r0, [r7, #12]
 80155d0:	60b9      	str	r1, [r7, #8]
 80155d2:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80155d4:	f3ef 8310 	mrs	r3, PRIMASK
 80155d8:	617b      	str	r3, [r7, #20]
  return(result);
 80155da:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80155dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80155de:	b672      	cpsid	i
}
 80155e0:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	f000 f8f6 	bl	80157d4 <SEQ_BitPosition>
 80155e8:	4603      	mov	r3, r0
 80155ea:	4619      	mov	r1, r3
 80155ec:	4a06      	ldr	r2, [pc, #24]	@ (8015608 <UTIL_SEQ_RegTask+0x40>)
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80155f4:	69fb      	ldr	r3, [r7, #28]
 80155f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155f8:	69bb      	ldr	r3, [r7, #24]
 80155fa:	f383 8810 	msr	PRIMASK, r3
}
 80155fe:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8015600:	bf00      	nop
}
 8015602:	3720      	adds	r7, #32
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}
 8015608:	20002c94 	.word	0x20002c94

0801560c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801560c:	b480      	push	{r7}
 801560e:	b087      	sub	sp, #28
 8015610:	af00      	add	r7, sp, #0
 8015612:	6078      	str	r0, [r7, #4]
 8015614:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015616:	f3ef 8310 	mrs	r3, PRIMASK
 801561a:	60fb      	str	r3, [r7, #12]
  return(result);
 801561c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801561e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015620:	b672      	cpsid	i
}
 8015622:	bf00      	nop

  TaskSet |= TaskId_bm;
 8015624:	4b0d      	ldr	r3, [pc, #52]	@ (801565c <UTIL_SEQ_SetTask+0x50>)
 8015626:	681a      	ldr	r2, [r3, #0]
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	4313      	orrs	r3, r2
 801562c:	4a0b      	ldr	r2, [pc, #44]	@ (801565c <UTIL_SEQ_SetTask+0x50>)
 801562e:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8015630:	4a0b      	ldr	r2, [pc, #44]	@ (8015660 <UTIL_SEQ_SetTask+0x54>)
 8015632:	683b      	ldr	r3, [r7, #0]
 8015634:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	431a      	orrs	r2, r3
 801563c:	4908      	ldr	r1, [pc, #32]	@ (8015660 <UTIL_SEQ_SetTask+0x54>)
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015648:	693b      	ldr	r3, [r7, #16]
 801564a:	f383 8810 	msr	PRIMASK, r3
}
 801564e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015650:	bf00      	nop
}
 8015652:	371c      	adds	r7, #28
 8015654:	46bd      	mov	sp, r7
 8015656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565a:	4770      	bx	lr
 801565c:	20002c84 	.word	0x20002c84
 8015660:	20002d14 	.word	0x20002d14

08015664 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015664:	b480      	push	{r7}
 8015666:	b087      	sub	sp, #28
 8015668:	af00      	add	r7, sp, #0
 801566a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801566c:	f3ef 8310 	mrs	r3, PRIMASK
 8015670:	60fb      	str	r3, [r7, #12]
  return(result);
 8015672:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015676:	b672      	cpsid	i
}
 8015678:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	43da      	mvns	r2, r3
 801567e:	4b08      	ldr	r3, [pc, #32]	@ (80156a0 <UTIL_SEQ_PauseTask+0x3c>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	4013      	ands	r3, r2
 8015684:	4a06      	ldr	r2, [pc, #24]	@ (80156a0 <UTIL_SEQ_PauseTask+0x3c>)
 8015686:	6013      	str	r3, [r2, #0]
 8015688:	697b      	ldr	r3, [r7, #20]
 801568a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801568c:	693b      	ldr	r3, [r7, #16]
 801568e:	f383 8810 	msr	PRIMASK, r3
}
 8015692:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015694:	bf00      	nop
}
 8015696:	371c      	adds	r7, #28
 8015698:	46bd      	mov	sp, r7
 801569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569e:	4770      	bx	lr
 80156a0:	20000124 	.word	0x20000124

080156a4 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80156a4:	b480      	push	{r7}
 80156a6:	b087      	sub	sp, #28
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156ac:	f3ef 8310 	mrs	r3, PRIMASK
 80156b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80156b2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80156b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80156b6:	b672      	cpsid	i
}
 80156b8:	bf00      	nop

  TaskMask |= TaskId_bm;
 80156ba:	4b09      	ldr	r3, [pc, #36]	@ (80156e0 <UTIL_SEQ_ResumeTask+0x3c>)
 80156bc:	681a      	ldr	r2, [r3, #0]
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	4313      	orrs	r3, r2
 80156c2:	4a07      	ldr	r2, [pc, #28]	@ (80156e0 <UTIL_SEQ_ResumeTask+0x3c>)
 80156c4:	6013      	str	r3, [r2, #0]
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156ca:	693b      	ldr	r3, [r7, #16]
 80156cc:	f383 8810 	msr	PRIMASK, r3
}
 80156d0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80156d2:	bf00      	nop
}
 80156d4:	371c      	adds	r7, #28
 80156d6:	46bd      	mov	sp, r7
 80156d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156dc:	4770      	bx	lr
 80156de:	bf00      	nop
 80156e0:	20000124 	.word	0x20000124

080156e4 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80156e4:	b480      	push	{r7}
 80156e6:	b087      	sub	sp, #28
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156ec:	f3ef 8310 	mrs	r3, PRIMASK
 80156f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80156f2:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80156f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80156f6:	b672      	cpsid	i
}
 80156f8:	bf00      	nop

  EvtSet |= EvtId_bm;
 80156fa:	4b09      	ldr	r3, [pc, #36]	@ (8015720 <UTIL_SEQ_SetEvt+0x3c>)
 80156fc:	681a      	ldr	r2, [r3, #0]
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	4313      	orrs	r3, r2
 8015702:	4a07      	ldr	r2, [pc, #28]	@ (8015720 <UTIL_SEQ_SetEvt+0x3c>)
 8015704:	6013      	str	r3, [r2, #0]
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801570a:	693b      	ldr	r3, [r7, #16]
 801570c:	f383 8810 	msr	PRIMASK, r3
}
 8015710:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015712:	bf00      	nop
}
 8015714:	371c      	adds	r7, #28
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr
 801571e:	bf00      	nop
 8015720:	20002c88 	.word	0x20002c88

08015724 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8015724:	b580      	push	{r7, lr}
 8015726:	b088      	sub	sp, #32
 8015728:	af00      	add	r7, sp, #0
 801572a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 801572c:	4b1f      	ldr	r3, [pc, #124]	@ (80157ac <UTIL_SEQ_WaitEvt+0x88>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8015732:	4b1e      	ldr	r3, [pc, #120]	@ (80157ac <UTIL_SEQ_WaitEvt+0x88>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801573a:	d102      	bne.n	8015742 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 801573c:	2300      	movs	r3, #0
 801573e:	61fb      	str	r3, [r7, #28]
 8015740:	e005      	b.n	801574e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8015742:	4b1a      	ldr	r3, [pc, #104]	@ (80157ac <UTIL_SEQ_WaitEvt+0x88>)
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	2201      	movs	r2, #1
 8015748:	fa02 f303 	lsl.w	r3, r2, r3
 801574c:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801574e:	4b18      	ldr	r3, [pc, #96]	@ (80157b0 <UTIL_SEQ_WaitEvt+0x8c>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8015754:	4a16      	ldr	r2, [pc, #88]	@ (80157b0 <UTIL_SEQ_WaitEvt+0x8c>)
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801575a:	e003      	b.n	8015764 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 801575c:	6879      	ldr	r1, [r7, #4]
 801575e:	69f8      	ldr	r0, [r7, #28]
 8015760:	f7ec fe3a 	bl	80023d8 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8015764:	4b13      	ldr	r3, [pc, #76]	@ (80157b4 <UTIL_SEQ_WaitEvt+0x90>)
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	4013      	ands	r3, r2
 801576c:	2b00      	cmp	r3, #0
 801576e:	d0f5      	beq.n	801575c <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8015770:	4a0e      	ldr	r2, [pc, #56]	@ (80157ac <UTIL_SEQ_WaitEvt+0x88>)
 8015772:	69bb      	ldr	r3, [r7, #24]
 8015774:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015776:	f3ef 8310 	mrs	r3, PRIMASK
 801577a:	60bb      	str	r3, [r7, #8]
  return(result);
 801577c:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801577e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015780:	b672      	cpsid	i
}
 8015782:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	43da      	mvns	r2, r3
 8015788:	4b0a      	ldr	r3, [pc, #40]	@ (80157b4 <UTIL_SEQ_WaitEvt+0x90>)
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	4013      	ands	r3, r2
 801578e:	4a09      	ldr	r2, [pc, #36]	@ (80157b4 <UTIL_SEQ_WaitEvt+0x90>)
 8015790:	6013      	str	r3, [r2, #0]
 8015792:	693b      	ldr	r3, [r7, #16]
 8015794:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	f383 8810 	msr	PRIMASK, r3
}
 801579c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801579e:	4a04      	ldr	r2, [pc, #16]	@ (80157b0 <UTIL_SEQ_WaitEvt+0x8c>)
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	6013      	str	r3, [r2, #0]
  return;
 80157a4:	bf00      	nop
}
 80157a6:	3720      	adds	r7, #32
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20002c90 	.word	0x20002c90
 80157b0:	20002c8c 	.word	0x20002c8c
 80157b4:	20002c88 	.word	0x20002c88

080157b8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80157b8:	b480      	push	{r7}
 80157ba:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80157bc:	bf00      	nop
}
 80157be:	46bd      	mov	sp, r7
 80157c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c4:	4770      	bx	lr

080157c6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80157c6:	b480      	push	{r7}
 80157c8:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80157ca:	bf00      	nop
}
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80157d4:	b480      	push	{r7}
 80157d6:	b085      	sub	sp, #20
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80157dc:	2300      	movs	r3, #0
 80157de:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80157ea:	d204      	bcs.n	80157f6 <SEQ_BitPosition+0x22>
 80157ec:	2310      	movs	r3, #16
 80157ee:	73fb      	strb	r3, [r7, #15]
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	041b      	lsls	r3, r3, #16
 80157f4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80157fc:	d205      	bcs.n	801580a <SEQ_BitPosition+0x36>
 80157fe:	7bfb      	ldrb	r3, [r7, #15]
 8015800:	3308      	adds	r3, #8
 8015802:	73fb      	strb	r3, [r7, #15]
 8015804:	68bb      	ldr	r3, [r7, #8]
 8015806:	021b      	lsls	r3, r3, #8
 8015808:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801580a:	68bb      	ldr	r3, [r7, #8]
 801580c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015810:	d205      	bcs.n	801581e <SEQ_BitPosition+0x4a>
 8015812:	7bfb      	ldrb	r3, [r7, #15]
 8015814:	3304      	adds	r3, #4
 8015816:	73fb      	strb	r3, [r7, #15]
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	011b      	lsls	r3, r3, #4
 801581c:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	0f1b      	lsrs	r3, r3, #28
 8015822:	4a07      	ldr	r2, [pc, #28]	@ (8015840 <SEQ_BitPosition+0x6c>)
 8015824:	5cd2      	ldrb	r2, [r2, r3]
 8015826:	7bfb      	ldrb	r3, [r7, #15]
 8015828:	4413      	add	r3, r2
 801582a:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801582c:	7bfb      	ldrb	r3, [r7, #15]
 801582e:	f1c3 031f 	rsb	r3, r3, #31
 8015832:	b2db      	uxtb	r3, r3
}
 8015834:	4618      	mov	r0, r3
 8015836:	3714      	adds	r7, #20
 8015838:	46bd      	mov	sp, r7
 801583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801583e:	4770      	bx	lr
 8015840:	08018900 	.word	0x08018900

08015844 <std>:
 8015844:	2300      	movs	r3, #0
 8015846:	b510      	push	{r4, lr}
 8015848:	4604      	mov	r4, r0
 801584a:	e9c0 3300 	strd	r3, r3, [r0]
 801584e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015852:	6083      	str	r3, [r0, #8]
 8015854:	8181      	strh	r1, [r0, #12]
 8015856:	6643      	str	r3, [r0, #100]	@ 0x64
 8015858:	81c2      	strh	r2, [r0, #14]
 801585a:	6183      	str	r3, [r0, #24]
 801585c:	4619      	mov	r1, r3
 801585e:	2208      	movs	r2, #8
 8015860:	305c      	adds	r0, #92	@ 0x5c
 8015862:	f000 fa39 	bl	8015cd8 <memset>
 8015866:	4b0d      	ldr	r3, [pc, #52]	@ (801589c <std+0x58>)
 8015868:	6263      	str	r3, [r4, #36]	@ 0x24
 801586a:	4b0d      	ldr	r3, [pc, #52]	@ (80158a0 <std+0x5c>)
 801586c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801586e:	4b0d      	ldr	r3, [pc, #52]	@ (80158a4 <std+0x60>)
 8015870:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015872:	4b0d      	ldr	r3, [pc, #52]	@ (80158a8 <std+0x64>)
 8015874:	6323      	str	r3, [r4, #48]	@ 0x30
 8015876:	4b0d      	ldr	r3, [pc, #52]	@ (80158ac <std+0x68>)
 8015878:	6224      	str	r4, [r4, #32]
 801587a:	429c      	cmp	r4, r3
 801587c:	d006      	beq.n	801588c <std+0x48>
 801587e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015882:	4294      	cmp	r4, r2
 8015884:	d002      	beq.n	801588c <std+0x48>
 8015886:	33d0      	adds	r3, #208	@ 0xd0
 8015888:	429c      	cmp	r4, r3
 801588a:	d105      	bne.n	8015898 <std+0x54>
 801588c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015894:	f000 bac0 	b.w	8015e18 <__retarget_lock_init_recursive>
 8015898:	bd10      	pop	{r4, pc}
 801589a:	bf00      	nop
 801589c:	08015ab9 	.word	0x08015ab9
 80158a0:	08015adb 	.word	0x08015adb
 80158a4:	08015b13 	.word	0x08015b13
 80158a8:	08015b37 	.word	0x08015b37
 80158ac:	20002d24 	.word	0x20002d24

080158b0 <stdio_exit_handler>:
 80158b0:	4a02      	ldr	r2, [pc, #8]	@ (80158bc <stdio_exit_handler+0xc>)
 80158b2:	4903      	ldr	r1, [pc, #12]	@ (80158c0 <stdio_exit_handler+0x10>)
 80158b4:	4803      	ldr	r0, [pc, #12]	@ (80158c4 <stdio_exit_handler+0x14>)
 80158b6:	f000 b869 	b.w	801598c <_fwalk_sglue>
 80158ba:	bf00      	nop
 80158bc:	2000012c 	.word	0x2000012c
 80158c0:	08016985 	.word	0x08016985
 80158c4:	2000013c 	.word	0x2000013c

080158c8 <cleanup_stdio>:
 80158c8:	6841      	ldr	r1, [r0, #4]
 80158ca:	4b0c      	ldr	r3, [pc, #48]	@ (80158fc <cleanup_stdio+0x34>)
 80158cc:	4299      	cmp	r1, r3
 80158ce:	b510      	push	{r4, lr}
 80158d0:	4604      	mov	r4, r0
 80158d2:	d001      	beq.n	80158d8 <cleanup_stdio+0x10>
 80158d4:	f001 f856 	bl	8016984 <_fflush_r>
 80158d8:	68a1      	ldr	r1, [r4, #8]
 80158da:	4b09      	ldr	r3, [pc, #36]	@ (8015900 <cleanup_stdio+0x38>)
 80158dc:	4299      	cmp	r1, r3
 80158de:	d002      	beq.n	80158e6 <cleanup_stdio+0x1e>
 80158e0:	4620      	mov	r0, r4
 80158e2:	f001 f84f 	bl	8016984 <_fflush_r>
 80158e6:	68e1      	ldr	r1, [r4, #12]
 80158e8:	4b06      	ldr	r3, [pc, #24]	@ (8015904 <cleanup_stdio+0x3c>)
 80158ea:	4299      	cmp	r1, r3
 80158ec:	d004      	beq.n	80158f8 <cleanup_stdio+0x30>
 80158ee:	4620      	mov	r0, r4
 80158f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80158f4:	f001 b846 	b.w	8016984 <_fflush_r>
 80158f8:	bd10      	pop	{r4, pc}
 80158fa:	bf00      	nop
 80158fc:	20002d24 	.word	0x20002d24
 8015900:	20002d8c 	.word	0x20002d8c
 8015904:	20002df4 	.word	0x20002df4

08015908 <global_stdio_init.part.0>:
 8015908:	b510      	push	{r4, lr}
 801590a:	4b0b      	ldr	r3, [pc, #44]	@ (8015938 <global_stdio_init.part.0+0x30>)
 801590c:	4c0b      	ldr	r4, [pc, #44]	@ (801593c <global_stdio_init.part.0+0x34>)
 801590e:	4a0c      	ldr	r2, [pc, #48]	@ (8015940 <global_stdio_init.part.0+0x38>)
 8015910:	601a      	str	r2, [r3, #0]
 8015912:	4620      	mov	r0, r4
 8015914:	2200      	movs	r2, #0
 8015916:	2104      	movs	r1, #4
 8015918:	f7ff ff94 	bl	8015844 <std>
 801591c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015920:	2201      	movs	r2, #1
 8015922:	2109      	movs	r1, #9
 8015924:	f7ff ff8e 	bl	8015844 <std>
 8015928:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801592c:	2202      	movs	r2, #2
 801592e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015932:	2112      	movs	r1, #18
 8015934:	f7ff bf86 	b.w	8015844 <std>
 8015938:	20002e5c 	.word	0x20002e5c
 801593c:	20002d24 	.word	0x20002d24
 8015940:	080158b1 	.word	0x080158b1

08015944 <__sfp_lock_acquire>:
 8015944:	4801      	ldr	r0, [pc, #4]	@ (801594c <__sfp_lock_acquire+0x8>)
 8015946:	f000 ba68 	b.w	8015e1a <__retarget_lock_acquire_recursive>
 801594a:	bf00      	nop
 801594c:	20002e65 	.word	0x20002e65

08015950 <__sfp_lock_release>:
 8015950:	4801      	ldr	r0, [pc, #4]	@ (8015958 <__sfp_lock_release+0x8>)
 8015952:	f000 ba63 	b.w	8015e1c <__retarget_lock_release_recursive>
 8015956:	bf00      	nop
 8015958:	20002e65 	.word	0x20002e65

0801595c <__sinit>:
 801595c:	b510      	push	{r4, lr}
 801595e:	4604      	mov	r4, r0
 8015960:	f7ff fff0 	bl	8015944 <__sfp_lock_acquire>
 8015964:	6a23      	ldr	r3, [r4, #32]
 8015966:	b11b      	cbz	r3, 8015970 <__sinit+0x14>
 8015968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801596c:	f7ff bff0 	b.w	8015950 <__sfp_lock_release>
 8015970:	4b04      	ldr	r3, [pc, #16]	@ (8015984 <__sinit+0x28>)
 8015972:	6223      	str	r3, [r4, #32]
 8015974:	4b04      	ldr	r3, [pc, #16]	@ (8015988 <__sinit+0x2c>)
 8015976:	681b      	ldr	r3, [r3, #0]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d1f5      	bne.n	8015968 <__sinit+0xc>
 801597c:	f7ff ffc4 	bl	8015908 <global_stdio_init.part.0>
 8015980:	e7f2      	b.n	8015968 <__sinit+0xc>
 8015982:	bf00      	nop
 8015984:	080158c9 	.word	0x080158c9
 8015988:	20002e5c 	.word	0x20002e5c

0801598c <_fwalk_sglue>:
 801598c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015990:	4607      	mov	r7, r0
 8015992:	4688      	mov	r8, r1
 8015994:	4614      	mov	r4, r2
 8015996:	2600      	movs	r6, #0
 8015998:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801599c:	f1b9 0901 	subs.w	r9, r9, #1
 80159a0:	d505      	bpl.n	80159ae <_fwalk_sglue+0x22>
 80159a2:	6824      	ldr	r4, [r4, #0]
 80159a4:	2c00      	cmp	r4, #0
 80159a6:	d1f7      	bne.n	8015998 <_fwalk_sglue+0xc>
 80159a8:	4630      	mov	r0, r6
 80159aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80159ae:	89ab      	ldrh	r3, [r5, #12]
 80159b0:	2b01      	cmp	r3, #1
 80159b2:	d907      	bls.n	80159c4 <_fwalk_sglue+0x38>
 80159b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80159b8:	3301      	adds	r3, #1
 80159ba:	d003      	beq.n	80159c4 <_fwalk_sglue+0x38>
 80159bc:	4629      	mov	r1, r5
 80159be:	4638      	mov	r0, r7
 80159c0:	47c0      	blx	r8
 80159c2:	4306      	orrs	r6, r0
 80159c4:	3568      	adds	r5, #104	@ 0x68
 80159c6:	e7e9      	b.n	801599c <_fwalk_sglue+0x10>

080159c8 <iprintf>:
 80159c8:	b40f      	push	{r0, r1, r2, r3}
 80159ca:	b507      	push	{r0, r1, r2, lr}
 80159cc:	4906      	ldr	r1, [pc, #24]	@ (80159e8 <iprintf+0x20>)
 80159ce:	ab04      	add	r3, sp, #16
 80159d0:	6808      	ldr	r0, [r1, #0]
 80159d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80159d6:	6881      	ldr	r1, [r0, #8]
 80159d8:	9301      	str	r3, [sp, #4]
 80159da:	f000 fca9 	bl	8016330 <_vfiprintf_r>
 80159de:	b003      	add	sp, #12
 80159e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80159e4:	b004      	add	sp, #16
 80159e6:	4770      	bx	lr
 80159e8:	20000138 	.word	0x20000138

080159ec <putchar>:
 80159ec:	4b02      	ldr	r3, [pc, #8]	@ (80159f8 <putchar+0xc>)
 80159ee:	4601      	mov	r1, r0
 80159f0:	6818      	ldr	r0, [r3, #0]
 80159f2:	6882      	ldr	r2, [r0, #8]
 80159f4:	f001 b850 	b.w	8016a98 <_putc_r>
 80159f8:	20000138 	.word	0x20000138

080159fc <_puts_r>:
 80159fc:	6a03      	ldr	r3, [r0, #32]
 80159fe:	b570      	push	{r4, r5, r6, lr}
 8015a00:	6884      	ldr	r4, [r0, #8]
 8015a02:	4605      	mov	r5, r0
 8015a04:	460e      	mov	r6, r1
 8015a06:	b90b      	cbnz	r3, 8015a0c <_puts_r+0x10>
 8015a08:	f7ff ffa8 	bl	801595c <__sinit>
 8015a0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a0e:	07db      	lsls	r3, r3, #31
 8015a10:	d405      	bmi.n	8015a1e <_puts_r+0x22>
 8015a12:	89a3      	ldrh	r3, [r4, #12]
 8015a14:	0598      	lsls	r0, r3, #22
 8015a16:	d402      	bmi.n	8015a1e <_puts_r+0x22>
 8015a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a1a:	f000 f9fe 	bl	8015e1a <__retarget_lock_acquire_recursive>
 8015a1e:	89a3      	ldrh	r3, [r4, #12]
 8015a20:	0719      	lsls	r1, r3, #28
 8015a22:	d502      	bpl.n	8015a2a <_puts_r+0x2e>
 8015a24:	6923      	ldr	r3, [r4, #16]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d135      	bne.n	8015a96 <_puts_r+0x9a>
 8015a2a:	4621      	mov	r1, r4
 8015a2c:	4628      	mov	r0, r5
 8015a2e:	f000 f8fd 	bl	8015c2c <__swsetup_r>
 8015a32:	b380      	cbz	r0, 8015a96 <_puts_r+0x9a>
 8015a34:	f04f 35ff 	mov.w	r5, #4294967295
 8015a38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015a3a:	07da      	lsls	r2, r3, #31
 8015a3c:	d405      	bmi.n	8015a4a <_puts_r+0x4e>
 8015a3e:	89a3      	ldrh	r3, [r4, #12]
 8015a40:	059b      	lsls	r3, r3, #22
 8015a42:	d402      	bmi.n	8015a4a <_puts_r+0x4e>
 8015a44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015a46:	f000 f9e9 	bl	8015e1c <__retarget_lock_release_recursive>
 8015a4a:	4628      	mov	r0, r5
 8015a4c:	bd70      	pop	{r4, r5, r6, pc}
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	da04      	bge.n	8015a5c <_puts_r+0x60>
 8015a52:	69a2      	ldr	r2, [r4, #24]
 8015a54:	429a      	cmp	r2, r3
 8015a56:	dc17      	bgt.n	8015a88 <_puts_r+0x8c>
 8015a58:	290a      	cmp	r1, #10
 8015a5a:	d015      	beq.n	8015a88 <_puts_r+0x8c>
 8015a5c:	6823      	ldr	r3, [r4, #0]
 8015a5e:	1c5a      	adds	r2, r3, #1
 8015a60:	6022      	str	r2, [r4, #0]
 8015a62:	7019      	strb	r1, [r3, #0]
 8015a64:	68a3      	ldr	r3, [r4, #8]
 8015a66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015a6a:	3b01      	subs	r3, #1
 8015a6c:	60a3      	str	r3, [r4, #8]
 8015a6e:	2900      	cmp	r1, #0
 8015a70:	d1ed      	bne.n	8015a4e <_puts_r+0x52>
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	da11      	bge.n	8015a9a <_puts_r+0x9e>
 8015a76:	4622      	mov	r2, r4
 8015a78:	210a      	movs	r1, #10
 8015a7a:	4628      	mov	r0, r5
 8015a7c:	f000 f898 	bl	8015bb0 <__swbuf_r>
 8015a80:	3001      	adds	r0, #1
 8015a82:	d0d7      	beq.n	8015a34 <_puts_r+0x38>
 8015a84:	250a      	movs	r5, #10
 8015a86:	e7d7      	b.n	8015a38 <_puts_r+0x3c>
 8015a88:	4622      	mov	r2, r4
 8015a8a:	4628      	mov	r0, r5
 8015a8c:	f000 f890 	bl	8015bb0 <__swbuf_r>
 8015a90:	3001      	adds	r0, #1
 8015a92:	d1e7      	bne.n	8015a64 <_puts_r+0x68>
 8015a94:	e7ce      	b.n	8015a34 <_puts_r+0x38>
 8015a96:	3e01      	subs	r6, #1
 8015a98:	e7e4      	b.n	8015a64 <_puts_r+0x68>
 8015a9a:	6823      	ldr	r3, [r4, #0]
 8015a9c:	1c5a      	adds	r2, r3, #1
 8015a9e:	6022      	str	r2, [r4, #0]
 8015aa0:	220a      	movs	r2, #10
 8015aa2:	701a      	strb	r2, [r3, #0]
 8015aa4:	e7ee      	b.n	8015a84 <_puts_r+0x88>
	...

08015aa8 <puts>:
 8015aa8:	4b02      	ldr	r3, [pc, #8]	@ (8015ab4 <puts+0xc>)
 8015aaa:	4601      	mov	r1, r0
 8015aac:	6818      	ldr	r0, [r3, #0]
 8015aae:	f7ff bfa5 	b.w	80159fc <_puts_r>
 8015ab2:	bf00      	nop
 8015ab4:	20000138 	.word	0x20000138

08015ab8 <__sread>:
 8015ab8:	b510      	push	{r4, lr}
 8015aba:	460c      	mov	r4, r1
 8015abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ac0:	f000 f95c 	bl	8015d7c <_read_r>
 8015ac4:	2800      	cmp	r0, #0
 8015ac6:	bfab      	itete	ge
 8015ac8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015aca:	89a3      	ldrhlt	r3, [r4, #12]
 8015acc:	181b      	addge	r3, r3, r0
 8015ace:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015ad2:	bfac      	ite	ge
 8015ad4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015ad6:	81a3      	strhlt	r3, [r4, #12]
 8015ad8:	bd10      	pop	{r4, pc}

08015ada <__swrite>:
 8015ada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ade:	461f      	mov	r7, r3
 8015ae0:	898b      	ldrh	r3, [r1, #12]
 8015ae2:	05db      	lsls	r3, r3, #23
 8015ae4:	4605      	mov	r5, r0
 8015ae6:	460c      	mov	r4, r1
 8015ae8:	4616      	mov	r6, r2
 8015aea:	d505      	bpl.n	8015af8 <__swrite+0x1e>
 8015aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015af0:	2302      	movs	r3, #2
 8015af2:	2200      	movs	r2, #0
 8015af4:	f000 f930 	bl	8015d58 <_lseek_r>
 8015af8:	89a3      	ldrh	r3, [r4, #12]
 8015afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015afe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015b02:	81a3      	strh	r3, [r4, #12]
 8015b04:	4632      	mov	r2, r6
 8015b06:	463b      	mov	r3, r7
 8015b08:	4628      	mov	r0, r5
 8015b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015b0e:	f000 b947 	b.w	8015da0 <_write_r>

08015b12 <__sseek>:
 8015b12:	b510      	push	{r4, lr}
 8015b14:	460c      	mov	r4, r1
 8015b16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b1a:	f000 f91d 	bl	8015d58 <_lseek_r>
 8015b1e:	1c43      	adds	r3, r0, #1
 8015b20:	89a3      	ldrh	r3, [r4, #12]
 8015b22:	bf15      	itete	ne
 8015b24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015b26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015b2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015b2e:	81a3      	strheq	r3, [r4, #12]
 8015b30:	bf18      	it	ne
 8015b32:	81a3      	strhne	r3, [r4, #12]
 8015b34:	bd10      	pop	{r4, pc}

08015b36 <__sclose>:
 8015b36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b3a:	f000 b8fd 	b.w	8015d38 <_close_r>

08015b3e <_vsniprintf_r>:
 8015b3e:	b530      	push	{r4, r5, lr}
 8015b40:	4614      	mov	r4, r2
 8015b42:	2c00      	cmp	r4, #0
 8015b44:	b09b      	sub	sp, #108	@ 0x6c
 8015b46:	4605      	mov	r5, r0
 8015b48:	461a      	mov	r2, r3
 8015b4a:	da05      	bge.n	8015b58 <_vsniprintf_r+0x1a>
 8015b4c:	238b      	movs	r3, #139	@ 0x8b
 8015b4e:	6003      	str	r3, [r0, #0]
 8015b50:	f04f 30ff 	mov.w	r0, #4294967295
 8015b54:	b01b      	add	sp, #108	@ 0x6c
 8015b56:	bd30      	pop	{r4, r5, pc}
 8015b58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015b5c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015b60:	bf14      	ite	ne
 8015b62:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015b66:	4623      	moveq	r3, r4
 8015b68:	9302      	str	r3, [sp, #8]
 8015b6a:	9305      	str	r3, [sp, #20]
 8015b6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015b70:	9100      	str	r1, [sp, #0]
 8015b72:	9104      	str	r1, [sp, #16]
 8015b74:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015b78:	4669      	mov	r1, sp
 8015b7a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015b7c:	f000 fab2 	bl	80160e4 <_svfiprintf_r>
 8015b80:	1c43      	adds	r3, r0, #1
 8015b82:	bfbc      	itt	lt
 8015b84:	238b      	movlt	r3, #139	@ 0x8b
 8015b86:	602b      	strlt	r3, [r5, #0]
 8015b88:	2c00      	cmp	r4, #0
 8015b8a:	d0e3      	beq.n	8015b54 <_vsniprintf_r+0x16>
 8015b8c:	9b00      	ldr	r3, [sp, #0]
 8015b8e:	2200      	movs	r2, #0
 8015b90:	701a      	strb	r2, [r3, #0]
 8015b92:	e7df      	b.n	8015b54 <_vsniprintf_r+0x16>

08015b94 <vsniprintf>:
 8015b94:	b507      	push	{r0, r1, r2, lr}
 8015b96:	9300      	str	r3, [sp, #0]
 8015b98:	4613      	mov	r3, r2
 8015b9a:	460a      	mov	r2, r1
 8015b9c:	4601      	mov	r1, r0
 8015b9e:	4803      	ldr	r0, [pc, #12]	@ (8015bac <vsniprintf+0x18>)
 8015ba0:	6800      	ldr	r0, [r0, #0]
 8015ba2:	f7ff ffcc 	bl	8015b3e <_vsniprintf_r>
 8015ba6:	b003      	add	sp, #12
 8015ba8:	f85d fb04 	ldr.w	pc, [sp], #4
 8015bac:	20000138 	.word	0x20000138

08015bb0 <__swbuf_r>:
 8015bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015bb2:	460e      	mov	r6, r1
 8015bb4:	4614      	mov	r4, r2
 8015bb6:	4605      	mov	r5, r0
 8015bb8:	b118      	cbz	r0, 8015bc2 <__swbuf_r+0x12>
 8015bba:	6a03      	ldr	r3, [r0, #32]
 8015bbc:	b90b      	cbnz	r3, 8015bc2 <__swbuf_r+0x12>
 8015bbe:	f7ff fecd 	bl	801595c <__sinit>
 8015bc2:	69a3      	ldr	r3, [r4, #24]
 8015bc4:	60a3      	str	r3, [r4, #8]
 8015bc6:	89a3      	ldrh	r3, [r4, #12]
 8015bc8:	071a      	lsls	r2, r3, #28
 8015bca:	d501      	bpl.n	8015bd0 <__swbuf_r+0x20>
 8015bcc:	6923      	ldr	r3, [r4, #16]
 8015bce:	b943      	cbnz	r3, 8015be2 <__swbuf_r+0x32>
 8015bd0:	4621      	mov	r1, r4
 8015bd2:	4628      	mov	r0, r5
 8015bd4:	f000 f82a 	bl	8015c2c <__swsetup_r>
 8015bd8:	b118      	cbz	r0, 8015be2 <__swbuf_r+0x32>
 8015bda:	f04f 37ff 	mov.w	r7, #4294967295
 8015bde:	4638      	mov	r0, r7
 8015be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015be2:	6823      	ldr	r3, [r4, #0]
 8015be4:	6922      	ldr	r2, [r4, #16]
 8015be6:	1a98      	subs	r0, r3, r2
 8015be8:	6963      	ldr	r3, [r4, #20]
 8015bea:	b2f6      	uxtb	r6, r6
 8015bec:	4283      	cmp	r3, r0
 8015bee:	4637      	mov	r7, r6
 8015bf0:	dc05      	bgt.n	8015bfe <__swbuf_r+0x4e>
 8015bf2:	4621      	mov	r1, r4
 8015bf4:	4628      	mov	r0, r5
 8015bf6:	f000 fec5 	bl	8016984 <_fflush_r>
 8015bfa:	2800      	cmp	r0, #0
 8015bfc:	d1ed      	bne.n	8015bda <__swbuf_r+0x2a>
 8015bfe:	68a3      	ldr	r3, [r4, #8]
 8015c00:	3b01      	subs	r3, #1
 8015c02:	60a3      	str	r3, [r4, #8]
 8015c04:	6823      	ldr	r3, [r4, #0]
 8015c06:	1c5a      	adds	r2, r3, #1
 8015c08:	6022      	str	r2, [r4, #0]
 8015c0a:	701e      	strb	r6, [r3, #0]
 8015c0c:	6962      	ldr	r2, [r4, #20]
 8015c0e:	1c43      	adds	r3, r0, #1
 8015c10:	429a      	cmp	r2, r3
 8015c12:	d004      	beq.n	8015c1e <__swbuf_r+0x6e>
 8015c14:	89a3      	ldrh	r3, [r4, #12]
 8015c16:	07db      	lsls	r3, r3, #31
 8015c18:	d5e1      	bpl.n	8015bde <__swbuf_r+0x2e>
 8015c1a:	2e0a      	cmp	r6, #10
 8015c1c:	d1df      	bne.n	8015bde <__swbuf_r+0x2e>
 8015c1e:	4621      	mov	r1, r4
 8015c20:	4628      	mov	r0, r5
 8015c22:	f000 feaf 	bl	8016984 <_fflush_r>
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d0d9      	beq.n	8015bde <__swbuf_r+0x2e>
 8015c2a:	e7d6      	b.n	8015bda <__swbuf_r+0x2a>

08015c2c <__swsetup_r>:
 8015c2c:	b538      	push	{r3, r4, r5, lr}
 8015c2e:	4b29      	ldr	r3, [pc, #164]	@ (8015cd4 <__swsetup_r+0xa8>)
 8015c30:	4605      	mov	r5, r0
 8015c32:	6818      	ldr	r0, [r3, #0]
 8015c34:	460c      	mov	r4, r1
 8015c36:	b118      	cbz	r0, 8015c40 <__swsetup_r+0x14>
 8015c38:	6a03      	ldr	r3, [r0, #32]
 8015c3a:	b90b      	cbnz	r3, 8015c40 <__swsetup_r+0x14>
 8015c3c:	f7ff fe8e 	bl	801595c <__sinit>
 8015c40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015c44:	0719      	lsls	r1, r3, #28
 8015c46:	d422      	bmi.n	8015c8e <__swsetup_r+0x62>
 8015c48:	06da      	lsls	r2, r3, #27
 8015c4a:	d407      	bmi.n	8015c5c <__swsetup_r+0x30>
 8015c4c:	2209      	movs	r2, #9
 8015c4e:	602a      	str	r2, [r5, #0]
 8015c50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015c54:	81a3      	strh	r3, [r4, #12]
 8015c56:	f04f 30ff 	mov.w	r0, #4294967295
 8015c5a:	e033      	b.n	8015cc4 <__swsetup_r+0x98>
 8015c5c:	0758      	lsls	r0, r3, #29
 8015c5e:	d512      	bpl.n	8015c86 <__swsetup_r+0x5a>
 8015c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015c62:	b141      	cbz	r1, 8015c76 <__swsetup_r+0x4a>
 8015c64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015c68:	4299      	cmp	r1, r3
 8015c6a:	d002      	beq.n	8015c72 <__swsetup_r+0x46>
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	f000 f8e5 	bl	8015e3c <_free_r>
 8015c72:	2300      	movs	r3, #0
 8015c74:	6363      	str	r3, [r4, #52]	@ 0x34
 8015c76:	89a3      	ldrh	r3, [r4, #12]
 8015c78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015c7c:	81a3      	strh	r3, [r4, #12]
 8015c7e:	2300      	movs	r3, #0
 8015c80:	6063      	str	r3, [r4, #4]
 8015c82:	6923      	ldr	r3, [r4, #16]
 8015c84:	6023      	str	r3, [r4, #0]
 8015c86:	89a3      	ldrh	r3, [r4, #12]
 8015c88:	f043 0308 	orr.w	r3, r3, #8
 8015c8c:	81a3      	strh	r3, [r4, #12]
 8015c8e:	6923      	ldr	r3, [r4, #16]
 8015c90:	b94b      	cbnz	r3, 8015ca6 <__swsetup_r+0x7a>
 8015c92:	89a3      	ldrh	r3, [r4, #12]
 8015c94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015c98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015c9c:	d003      	beq.n	8015ca6 <__swsetup_r+0x7a>
 8015c9e:	4621      	mov	r1, r4
 8015ca0:	4628      	mov	r0, r5
 8015ca2:	f000 febd 	bl	8016a20 <__smakebuf_r>
 8015ca6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015caa:	f013 0201 	ands.w	r2, r3, #1
 8015cae:	d00a      	beq.n	8015cc6 <__swsetup_r+0x9a>
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	60a2      	str	r2, [r4, #8]
 8015cb4:	6962      	ldr	r2, [r4, #20]
 8015cb6:	4252      	negs	r2, r2
 8015cb8:	61a2      	str	r2, [r4, #24]
 8015cba:	6922      	ldr	r2, [r4, #16]
 8015cbc:	b942      	cbnz	r2, 8015cd0 <__swsetup_r+0xa4>
 8015cbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015cc2:	d1c5      	bne.n	8015c50 <__swsetup_r+0x24>
 8015cc4:	bd38      	pop	{r3, r4, r5, pc}
 8015cc6:	0799      	lsls	r1, r3, #30
 8015cc8:	bf58      	it	pl
 8015cca:	6962      	ldrpl	r2, [r4, #20]
 8015ccc:	60a2      	str	r2, [r4, #8]
 8015cce:	e7f4      	b.n	8015cba <__swsetup_r+0x8e>
 8015cd0:	2000      	movs	r0, #0
 8015cd2:	e7f7      	b.n	8015cc4 <__swsetup_r+0x98>
 8015cd4:	20000138 	.word	0x20000138

08015cd8 <memset>:
 8015cd8:	4402      	add	r2, r0
 8015cda:	4603      	mov	r3, r0
 8015cdc:	4293      	cmp	r3, r2
 8015cde:	d100      	bne.n	8015ce2 <memset+0xa>
 8015ce0:	4770      	bx	lr
 8015ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8015ce6:	e7f9      	b.n	8015cdc <memset+0x4>

08015ce8 <strncmp>:
 8015ce8:	b510      	push	{r4, lr}
 8015cea:	b16a      	cbz	r2, 8015d08 <strncmp+0x20>
 8015cec:	3901      	subs	r1, #1
 8015cee:	1884      	adds	r4, r0, r2
 8015cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d103      	bne.n	8015d04 <strncmp+0x1c>
 8015cfc:	42a0      	cmp	r0, r4
 8015cfe:	d001      	beq.n	8015d04 <strncmp+0x1c>
 8015d00:	2a00      	cmp	r2, #0
 8015d02:	d1f5      	bne.n	8015cf0 <strncmp+0x8>
 8015d04:	1ad0      	subs	r0, r2, r3
 8015d06:	bd10      	pop	{r4, pc}
 8015d08:	4610      	mov	r0, r2
 8015d0a:	e7fc      	b.n	8015d06 <strncmp+0x1e>

08015d0c <strrchr>:
 8015d0c:	b538      	push	{r3, r4, r5, lr}
 8015d0e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8015d12:	4603      	mov	r3, r0
 8015d14:	d10e      	bne.n	8015d34 <strrchr+0x28>
 8015d16:	4621      	mov	r1, r4
 8015d18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015d1c:	f000 bf0a 	b.w	8016b34 <strchr>
 8015d20:	1c43      	adds	r3, r0, #1
 8015d22:	4605      	mov	r5, r0
 8015d24:	4621      	mov	r1, r4
 8015d26:	4618      	mov	r0, r3
 8015d28:	f000 ff04 	bl	8016b34 <strchr>
 8015d2c:	2800      	cmp	r0, #0
 8015d2e:	d1f7      	bne.n	8015d20 <strrchr+0x14>
 8015d30:	4628      	mov	r0, r5
 8015d32:	bd38      	pop	{r3, r4, r5, pc}
 8015d34:	2500      	movs	r5, #0
 8015d36:	e7f5      	b.n	8015d24 <strrchr+0x18>

08015d38 <_close_r>:
 8015d38:	b538      	push	{r3, r4, r5, lr}
 8015d3a:	4d06      	ldr	r5, [pc, #24]	@ (8015d54 <_close_r+0x1c>)
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	4604      	mov	r4, r0
 8015d40:	4608      	mov	r0, r1
 8015d42:	602b      	str	r3, [r5, #0]
 8015d44:	f7ee f9ef 	bl	8004126 <_close>
 8015d48:	1c43      	adds	r3, r0, #1
 8015d4a:	d102      	bne.n	8015d52 <_close_r+0x1a>
 8015d4c:	682b      	ldr	r3, [r5, #0]
 8015d4e:	b103      	cbz	r3, 8015d52 <_close_r+0x1a>
 8015d50:	6023      	str	r3, [r4, #0]
 8015d52:	bd38      	pop	{r3, r4, r5, pc}
 8015d54:	20002e60 	.word	0x20002e60

08015d58 <_lseek_r>:
 8015d58:	b538      	push	{r3, r4, r5, lr}
 8015d5a:	4d07      	ldr	r5, [pc, #28]	@ (8015d78 <_lseek_r+0x20>)
 8015d5c:	4604      	mov	r4, r0
 8015d5e:	4608      	mov	r0, r1
 8015d60:	4611      	mov	r1, r2
 8015d62:	2200      	movs	r2, #0
 8015d64:	602a      	str	r2, [r5, #0]
 8015d66:	461a      	mov	r2, r3
 8015d68:	f7ee fa04 	bl	8004174 <_lseek>
 8015d6c:	1c43      	adds	r3, r0, #1
 8015d6e:	d102      	bne.n	8015d76 <_lseek_r+0x1e>
 8015d70:	682b      	ldr	r3, [r5, #0]
 8015d72:	b103      	cbz	r3, 8015d76 <_lseek_r+0x1e>
 8015d74:	6023      	str	r3, [r4, #0]
 8015d76:	bd38      	pop	{r3, r4, r5, pc}
 8015d78:	20002e60 	.word	0x20002e60

08015d7c <_read_r>:
 8015d7c:	b538      	push	{r3, r4, r5, lr}
 8015d7e:	4d07      	ldr	r5, [pc, #28]	@ (8015d9c <_read_r+0x20>)
 8015d80:	4604      	mov	r4, r0
 8015d82:	4608      	mov	r0, r1
 8015d84:	4611      	mov	r1, r2
 8015d86:	2200      	movs	r2, #0
 8015d88:	602a      	str	r2, [r5, #0]
 8015d8a:	461a      	mov	r2, r3
 8015d8c:	f7ee f9ae 	bl	80040ec <_read>
 8015d90:	1c43      	adds	r3, r0, #1
 8015d92:	d102      	bne.n	8015d9a <_read_r+0x1e>
 8015d94:	682b      	ldr	r3, [r5, #0]
 8015d96:	b103      	cbz	r3, 8015d9a <_read_r+0x1e>
 8015d98:	6023      	str	r3, [r4, #0]
 8015d9a:	bd38      	pop	{r3, r4, r5, pc}
 8015d9c:	20002e60 	.word	0x20002e60

08015da0 <_write_r>:
 8015da0:	b538      	push	{r3, r4, r5, lr}
 8015da2:	4d07      	ldr	r5, [pc, #28]	@ (8015dc0 <_write_r+0x20>)
 8015da4:	4604      	mov	r4, r0
 8015da6:	4608      	mov	r0, r1
 8015da8:	4611      	mov	r1, r2
 8015daa:	2200      	movs	r2, #0
 8015dac:	602a      	str	r2, [r5, #0]
 8015dae:	461a      	mov	r2, r3
 8015db0:	f7fb ff36 	bl	8011c20 <_write>
 8015db4:	1c43      	adds	r3, r0, #1
 8015db6:	d102      	bne.n	8015dbe <_write_r+0x1e>
 8015db8:	682b      	ldr	r3, [r5, #0]
 8015dba:	b103      	cbz	r3, 8015dbe <_write_r+0x1e>
 8015dbc:	6023      	str	r3, [r4, #0]
 8015dbe:	bd38      	pop	{r3, r4, r5, pc}
 8015dc0:	20002e60 	.word	0x20002e60

08015dc4 <__errno>:
 8015dc4:	4b01      	ldr	r3, [pc, #4]	@ (8015dcc <__errno+0x8>)
 8015dc6:	6818      	ldr	r0, [r3, #0]
 8015dc8:	4770      	bx	lr
 8015dca:	bf00      	nop
 8015dcc:	20000138 	.word	0x20000138

08015dd0 <__libc_init_array>:
 8015dd0:	b570      	push	{r4, r5, r6, lr}
 8015dd2:	4d0d      	ldr	r5, [pc, #52]	@ (8015e08 <__libc_init_array+0x38>)
 8015dd4:	4c0d      	ldr	r4, [pc, #52]	@ (8015e0c <__libc_init_array+0x3c>)
 8015dd6:	1b64      	subs	r4, r4, r5
 8015dd8:	10a4      	asrs	r4, r4, #2
 8015dda:	2600      	movs	r6, #0
 8015ddc:	42a6      	cmp	r6, r4
 8015dde:	d109      	bne.n	8015df4 <__libc_init_array+0x24>
 8015de0:	4d0b      	ldr	r5, [pc, #44]	@ (8015e10 <__libc_init_array+0x40>)
 8015de2:	4c0c      	ldr	r4, [pc, #48]	@ (8015e14 <__libc_init_array+0x44>)
 8015de4:	f000 ff1c 	bl	8016c20 <_init>
 8015de8:	1b64      	subs	r4, r4, r5
 8015dea:	10a4      	asrs	r4, r4, #2
 8015dec:	2600      	movs	r6, #0
 8015dee:	42a6      	cmp	r6, r4
 8015df0:	d105      	bne.n	8015dfe <__libc_init_array+0x2e>
 8015df2:	bd70      	pop	{r4, r5, r6, pc}
 8015df4:	f855 3b04 	ldr.w	r3, [r5], #4
 8015df8:	4798      	blx	r3
 8015dfa:	3601      	adds	r6, #1
 8015dfc:	e7ee      	b.n	8015ddc <__libc_init_array+0xc>
 8015dfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015e02:	4798      	blx	r3
 8015e04:	3601      	adds	r6, #1
 8015e06:	e7f2      	b.n	8015dee <__libc_init_array+0x1e>
 8015e08:	0801894c 	.word	0x0801894c
 8015e0c:	0801894c 	.word	0x0801894c
 8015e10:	0801894c 	.word	0x0801894c
 8015e14:	08018950 	.word	0x08018950

08015e18 <__retarget_lock_init_recursive>:
 8015e18:	4770      	bx	lr

08015e1a <__retarget_lock_acquire_recursive>:
 8015e1a:	4770      	bx	lr

08015e1c <__retarget_lock_release_recursive>:
 8015e1c:	4770      	bx	lr

08015e1e <memcpy>:
 8015e1e:	440a      	add	r2, r1
 8015e20:	4291      	cmp	r1, r2
 8015e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8015e26:	d100      	bne.n	8015e2a <memcpy+0xc>
 8015e28:	4770      	bx	lr
 8015e2a:	b510      	push	{r4, lr}
 8015e2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015e30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015e34:	4291      	cmp	r1, r2
 8015e36:	d1f9      	bne.n	8015e2c <memcpy+0xe>
 8015e38:	bd10      	pop	{r4, pc}
	...

08015e3c <_free_r>:
 8015e3c:	b538      	push	{r3, r4, r5, lr}
 8015e3e:	4605      	mov	r5, r0
 8015e40:	2900      	cmp	r1, #0
 8015e42:	d041      	beq.n	8015ec8 <_free_r+0x8c>
 8015e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015e48:	1f0c      	subs	r4, r1, #4
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	bfb8      	it	lt
 8015e4e:	18e4      	addlt	r4, r4, r3
 8015e50:	f000 f8e0 	bl	8016014 <__malloc_lock>
 8015e54:	4a1d      	ldr	r2, [pc, #116]	@ (8015ecc <_free_r+0x90>)
 8015e56:	6813      	ldr	r3, [r2, #0]
 8015e58:	b933      	cbnz	r3, 8015e68 <_free_r+0x2c>
 8015e5a:	6063      	str	r3, [r4, #4]
 8015e5c:	6014      	str	r4, [r2, #0]
 8015e5e:	4628      	mov	r0, r5
 8015e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e64:	f000 b8dc 	b.w	8016020 <__malloc_unlock>
 8015e68:	42a3      	cmp	r3, r4
 8015e6a:	d908      	bls.n	8015e7e <_free_r+0x42>
 8015e6c:	6820      	ldr	r0, [r4, #0]
 8015e6e:	1821      	adds	r1, r4, r0
 8015e70:	428b      	cmp	r3, r1
 8015e72:	bf01      	itttt	eq
 8015e74:	6819      	ldreq	r1, [r3, #0]
 8015e76:	685b      	ldreq	r3, [r3, #4]
 8015e78:	1809      	addeq	r1, r1, r0
 8015e7a:	6021      	streq	r1, [r4, #0]
 8015e7c:	e7ed      	b.n	8015e5a <_free_r+0x1e>
 8015e7e:	461a      	mov	r2, r3
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	b10b      	cbz	r3, 8015e88 <_free_r+0x4c>
 8015e84:	42a3      	cmp	r3, r4
 8015e86:	d9fa      	bls.n	8015e7e <_free_r+0x42>
 8015e88:	6811      	ldr	r1, [r2, #0]
 8015e8a:	1850      	adds	r0, r2, r1
 8015e8c:	42a0      	cmp	r0, r4
 8015e8e:	d10b      	bne.n	8015ea8 <_free_r+0x6c>
 8015e90:	6820      	ldr	r0, [r4, #0]
 8015e92:	4401      	add	r1, r0
 8015e94:	1850      	adds	r0, r2, r1
 8015e96:	4283      	cmp	r3, r0
 8015e98:	6011      	str	r1, [r2, #0]
 8015e9a:	d1e0      	bne.n	8015e5e <_free_r+0x22>
 8015e9c:	6818      	ldr	r0, [r3, #0]
 8015e9e:	685b      	ldr	r3, [r3, #4]
 8015ea0:	6053      	str	r3, [r2, #4]
 8015ea2:	4408      	add	r0, r1
 8015ea4:	6010      	str	r0, [r2, #0]
 8015ea6:	e7da      	b.n	8015e5e <_free_r+0x22>
 8015ea8:	d902      	bls.n	8015eb0 <_free_r+0x74>
 8015eaa:	230c      	movs	r3, #12
 8015eac:	602b      	str	r3, [r5, #0]
 8015eae:	e7d6      	b.n	8015e5e <_free_r+0x22>
 8015eb0:	6820      	ldr	r0, [r4, #0]
 8015eb2:	1821      	adds	r1, r4, r0
 8015eb4:	428b      	cmp	r3, r1
 8015eb6:	bf04      	itt	eq
 8015eb8:	6819      	ldreq	r1, [r3, #0]
 8015eba:	685b      	ldreq	r3, [r3, #4]
 8015ebc:	6063      	str	r3, [r4, #4]
 8015ebe:	bf04      	itt	eq
 8015ec0:	1809      	addeq	r1, r1, r0
 8015ec2:	6021      	streq	r1, [r4, #0]
 8015ec4:	6054      	str	r4, [r2, #4]
 8015ec6:	e7ca      	b.n	8015e5e <_free_r+0x22>
 8015ec8:	bd38      	pop	{r3, r4, r5, pc}
 8015eca:	bf00      	nop
 8015ecc:	20002e6c 	.word	0x20002e6c

08015ed0 <sbrk_aligned>:
 8015ed0:	b570      	push	{r4, r5, r6, lr}
 8015ed2:	4e0f      	ldr	r6, [pc, #60]	@ (8015f10 <sbrk_aligned+0x40>)
 8015ed4:	460c      	mov	r4, r1
 8015ed6:	6831      	ldr	r1, [r6, #0]
 8015ed8:	4605      	mov	r5, r0
 8015eda:	b911      	cbnz	r1, 8015ee2 <sbrk_aligned+0x12>
 8015edc:	f000 fe5a 	bl	8016b94 <_sbrk_r>
 8015ee0:	6030      	str	r0, [r6, #0]
 8015ee2:	4621      	mov	r1, r4
 8015ee4:	4628      	mov	r0, r5
 8015ee6:	f000 fe55 	bl	8016b94 <_sbrk_r>
 8015eea:	1c43      	adds	r3, r0, #1
 8015eec:	d103      	bne.n	8015ef6 <sbrk_aligned+0x26>
 8015eee:	f04f 34ff 	mov.w	r4, #4294967295
 8015ef2:	4620      	mov	r0, r4
 8015ef4:	bd70      	pop	{r4, r5, r6, pc}
 8015ef6:	1cc4      	adds	r4, r0, #3
 8015ef8:	f024 0403 	bic.w	r4, r4, #3
 8015efc:	42a0      	cmp	r0, r4
 8015efe:	d0f8      	beq.n	8015ef2 <sbrk_aligned+0x22>
 8015f00:	1a21      	subs	r1, r4, r0
 8015f02:	4628      	mov	r0, r5
 8015f04:	f000 fe46 	bl	8016b94 <_sbrk_r>
 8015f08:	3001      	adds	r0, #1
 8015f0a:	d1f2      	bne.n	8015ef2 <sbrk_aligned+0x22>
 8015f0c:	e7ef      	b.n	8015eee <sbrk_aligned+0x1e>
 8015f0e:	bf00      	nop
 8015f10:	20002e68 	.word	0x20002e68

08015f14 <_malloc_r>:
 8015f14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f18:	1ccd      	adds	r5, r1, #3
 8015f1a:	f025 0503 	bic.w	r5, r5, #3
 8015f1e:	3508      	adds	r5, #8
 8015f20:	2d0c      	cmp	r5, #12
 8015f22:	bf38      	it	cc
 8015f24:	250c      	movcc	r5, #12
 8015f26:	2d00      	cmp	r5, #0
 8015f28:	4606      	mov	r6, r0
 8015f2a:	db01      	blt.n	8015f30 <_malloc_r+0x1c>
 8015f2c:	42a9      	cmp	r1, r5
 8015f2e:	d904      	bls.n	8015f3a <_malloc_r+0x26>
 8015f30:	230c      	movs	r3, #12
 8015f32:	6033      	str	r3, [r6, #0]
 8015f34:	2000      	movs	r0, #0
 8015f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016010 <_malloc_r+0xfc>
 8015f3e:	f000 f869 	bl	8016014 <__malloc_lock>
 8015f42:	f8d8 3000 	ldr.w	r3, [r8]
 8015f46:	461c      	mov	r4, r3
 8015f48:	bb44      	cbnz	r4, 8015f9c <_malloc_r+0x88>
 8015f4a:	4629      	mov	r1, r5
 8015f4c:	4630      	mov	r0, r6
 8015f4e:	f7ff ffbf 	bl	8015ed0 <sbrk_aligned>
 8015f52:	1c43      	adds	r3, r0, #1
 8015f54:	4604      	mov	r4, r0
 8015f56:	d158      	bne.n	801600a <_malloc_r+0xf6>
 8015f58:	f8d8 4000 	ldr.w	r4, [r8]
 8015f5c:	4627      	mov	r7, r4
 8015f5e:	2f00      	cmp	r7, #0
 8015f60:	d143      	bne.n	8015fea <_malloc_r+0xd6>
 8015f62:	2c00      	cmp	r4, #0
 8015f64:	d04b      	beq.n	8015ffe <_malloc_r+0xea>
 8015f66:	6823      	ldr	r3, [r4, #0]
 8015f68:	4639      	mov	r1, r7
 8015f6a:	4630      	mov	r0, r6
 8015f6c:	eb04 0903 	add.w	r9, r4, r3
 8015f70:	f000 fe10 	bl	8016b94 <_sbrk_r>
 8015f74:	4581      	cmp	r9, r0
 8015f76:	d142      	bne.n	8015ffe <_malloc_r+0xea>
 8015f78:	6821      	ldr	r1, [r4, #0]
 8015f7a:	1a6d      	subs	r5, r5, r1
 8015f7c:	4629      	mov	r1, r5
 8015f7e:	4630      	mov	r0, r6
 8015f80:	f7ff ffa6 	bl	8015ed0 <sbrk_aligned>
 8015f84:	3001      	adds	r0, #1
 8015f86:	d03a      	beq.n	8015ffe <_malloc_r+0xea>
 8015f88:	6823      	ldr	r3, [r4, #0]
 8015f8a:	442b      	add	r3, r5
 8015f8c:	6023      	str	r3, [r4, #0]
 8015f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8015f92:	685a      	ldr	r2, [r3, #4]
 8015f94:	bb62      	cbnz	r2, 8015ff0 <_malloc_r+0xdc>
 8015f96:	f8c8 7000 	str.w	r7, [r8]
 8015f9a:	e00f      	b.n	8015fbc <_malloc_r+0xa8>
 8015f9c:	6822      	ldr	r2, [r4, #0]
 8015f9e:	1b52      	subs	r2, r2, r5
 8015fa0:	d420      	bmi.n	8015fe4 <_malloc_r+0xd0>
 8015fa2:	2a0b      	cmp	r2, #11
 8015fa4:	d917      	bls.n	8015fd6 <_malloc_r+0xc2>
 8015fa6:	1961      	adds	r1, r4, r5
 8015fa8:	42a3      	cmp	r3, r4
 8015faa:	6025      	str	r5, [r4, #0]
 8015fac:	bf18      	it	ne
 8015fae:	6059      	strne	r1, [r3, #4]
 8015fb0:	6863      	ldr	r3, [r4, #4]
 8015fb2:	bf08      	it	eq
 8015fb4:	f8c8 1000 	streq.w	r1, [r8]
 8015fb8:	5162      	str	r2, [r4, r5]
 8015fba:	604b      	str	r3, [r1, #4]
 8015fbc:	4630      	mov	r0, r6
 8015fbe:	f000 f82f 	bl	8016020 <__malloc_unlock>
 8015fc2:	f104 000b 	add.w	r0, r4, #11
 8015fc6:	1d23      	adds	r3, r4, #4
 8015fc8:	f020 0007 	bic.w	r0, r0, #7
 8015fcc:	1ac2      	subs	r2, r0, r3
 8015fce:	bf1c      	itt	ne
 8015fd0:	1a1b      	subne	r3, r3, r0
 8015fd2:	50a3      	strne	r3, [r4, r2]
 8015fd4:	e7af      	b.n	8015f36 <_malloc_r+0x22>
 8015fd6:	6862      	ldr	r2, [r4, #4]
 8015fd8:	42a3      	cmp	r3, r4
 8015fda:	bf0c      	ite	eq
 8015fdc:	f8c8 2000 	streq.w	r2, [r8]
 8015fe0:	605a      	strne	r2, [r3, #4]
 8015fe2:	e7eb      	b.n	8015fbc <_malloc_r+0xa8>
 8015fe4:	4623      	mov	r3, r4
 8015fe6:	6864      	ldr	r4, [r4, #4]
 8015fe8:	e7ae      	b.n	8015f48 <_malloc_r+0x34>
 8015fea:	463c      	mov	r4, r7
 8015fec:	687f      	ldr	r7, [r7, #4]
 8015fee:	e7b6      	b.n	8015f5e <_malloc_r+0x4a>
 8015ff0:	461a      	mov	r2, r3
 8015ff2:	685b      	ldr	r3, [r3, #4]
 8015ff4:	42a3      	cmp	r3, r4
 8015ff6:	d1fb      	bne.n	8015ff0 <_malloc_r+0xdc>
 8015ff8:	2300      	movs	r3, #0
 8015ffa:	6053      	str	r3, [r2, #4]
 8015ffc:	e7de      	b.n	8015fbc <_malloc_r+0xa8>
 8015ffe:	230c      	movs	r3, #12
 8016000:	6033      	str	r3, [r6, #0]
 8016002:	4630      	mov	r0, r6
 8016004:	f000 f80c 	bl	8016020 <__malloc_unlock>
 8016008:	e794      	b.n	8015f34 <_malloc_r+0x20>
 801600a:	6005      	str	r5, [r0, #0]
 801600c:	e7d6      	b.n	8015fbc <_malloc_r+0xa8>
 801600e:	bf00      	nop
 8016010:	20002e6c 	.word	0x20002e6c

08016014 <__malloc_lock>:
 8016014:	4801      	ldr	r0, [pc, #4]	@ (801601c <__malloc_lock+0x8>)
 8016016:	f7ff bf00 	b.w	8015e1a <__retarget_lock_acquire_recursive>
 801601a:	bf00      	nop
 801601c:	20002e64 	.word	0x20002e64

08016020 <__malloc_unlock>:
 8016020:	4801      	ldr	r0, [pc, #4]	@ (8016028 <__malloc_unlock+0x8>)
 8016022:	f7ff befb 	b.w	8015e1c <__retarget_lock_release_recursive>
 8016026:	bf00      	nop
 8016028:	20002e64 	.word	0x20002e64

0801602c <__ssputs_r>:
 801602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016030:	688e      	ldr	r6, [r1, #8]
 8016032:	461f      	mov	r7, r3
 8016034:	42be      	cmp	r6, r7
 8016036:	680b      	ldr	r3, [r1, #0]
 8016038:	4682      	mov	sl, r0
 801603a:	460c      	mov	r4, r1
 801603c:	4690      	mov	r8, r2
 801603e:	d82d      	bhi.n	801609c <__ssputs_r+0x70>
 8016040:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016044:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016048:	d026      	beq.n	8016098 <__ssputs_r+0x6c>
 801604a:	6965      	ldr	r5, [r4, #20]
 801604c:	6909      	ldr	r1, [r1, #16]
 801604e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016052:	eba3 0901 	sub.w	r9, r3, r1
 8016056:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801605a:	1c7b      	adds	r3, r7, #1
 801605c:	444b      	add	r3, r9
 801605e:	106d      	asrs	r5, r5, #1
 8016060:	429d      	cmp	r5, r3
 8016062:	bf38      	it	cc
 8016064:	461d      	movcc	r5, r3
 8016066:	0553      	lsls	r3, r2, #21
 8016068:	d527      	bpl.n	80160ba <__ssputs_r+0x8e>
 801606a:	4629      	mov	r1, r5
 801606c:	f7ff ff52 	bl	8015f14 <_malloc_r>
 8016070:	4606      	mov	r6, r0
 8016072:	b360      	cbz	r0, 80160ce <__ssputs_r+0xa2>
 8016074:	6921      	ldr	r1, [r4, #16]
 8016076:	464a      	mov	r2, r9
 8016078:	f7ff fed1 	bl	8015e1e <memcpy>
 801607c:	89a3      	ldrh	r3, [r4, #12]
 801607e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016082:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016086:	81a3      	strh	r3, [r4, #12]
 8016088:	6126      	str	r6, [r4, #16]
 801608a:	6165      	str	r5, [r4, #20]
 801608c:	444e      	add	r6, r9
 801608e:	eba5 0509 	sub.w	r5, r5, r9
 8016092:	6026      	str	r6, [r4, #0]
 8016094:	60a5      	str	r5, [r4, #8]
 8016096:	463e      	mov	r6, r7
 8016098:	42be      	cmp	r6, r7
 801609a:	d900      	bls.n	801609e <__ssputs_r+0x72>
 801609c:	463e      	mov	r6, r7
 801609e:	6820      	ldr	r0, [r4, #0]
 80160a0:	4632      	mov	r2, r6
 80160a2:	4641      	mov	r1, r8
 80160a4:	f000 fd2c 	bl	8016b00 <memmove>
 80160a8:	68a3      	ldr	r3, [r4, #8]
 80160aa:	1b9b      	subs	r3, r3, r6
 80160ac:	60a3      	str	r3, [r4, #8]
 80160ae:	6823      	ldr	r3, [r4, #0]
 80160b0:	4433      	add	r3, r6
 80160b2:	6023      	str	r3, [r4, #0]
 80160b4:	2000      	movs	r0, #0
 80160b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160ba:	462a      	mov	r2, r5
 80160bc:	f000 fd7a 	bl	8016bb4 <_realloc_r>
 80160c0:	4606      	mov	r6, r0
 80160c2:	2800      	cmp	r0, #0
 80160c4:	d1e0      	bne.n	8016088 <__ssputs_r+0x5c>
 80160c6:	6921      	ldr	r1, [r4, #16]
 80160c8:	4650      	mov	r0, sl
 80160ca:	f7ff feb7 	bl	8015e3c <_free_r>
 80160ce:	230c      	movs	r3, #12
 80160d0:	f8ca 3000 	str.w	r3, [sl]
 80160d4:	89a3      	ldrh	r3, [r4, #12]
 80160d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80160da:	81a3      	strh	r3, [r4, #12]
 80160dc:	f04f 30ff 	mov.w	r0, #4294967295
 80160e0:	e7e9      	b.n	80160b6 <__ssputs_r+0x8a>
	...

080160e4 <_svfiprintf_r>:
 80160e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e8:	4698      	mov	r8, r3
 80160ea:	898b      	ldrh	r3, [r1, #12]
 80160ec:	061b      	lsls	r3, r3, #24
 80160ee:	b09d      	sub	sp, #116	@ 0x74
 80160f0:	4607      	mov	r7, r0
 80160f2:	460d      	mov	r5, r1
 80160f4:	4614      	mov	r4, r2
 80160f6:	d510      	bpl.n	801611a <_svfiprintf_r+0x36>
 80160f8:	690b      	ldr	r3, [r1, #16]
 80160fa:	b973      	cbnz	r3, 801611a <_svfiprintf_r+0x36>
 80160fc:	2140      	movs	r1, #64	@ 0x40
 80160fe:	f7ff ff09 	bl	8015f14 <_malloc_r>
 8016102:	6028      	str	r0, [r5, #0]
 8016104:	6128      	str	r0, [r5, #16]
 8016106:	b930      	cbnz	r0, 8016116 <_svfiprintf_r+0x32>
 8016108:	230c      	movs	r3, #12
 801610a:	603b      	str	r3, [r7, #0]
 801610c:	f04f 30ff 	mov.w	r0, #4294967295
 8016110:	b01d      	add	sp, #116	@ 0x74
 8016112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016116:	2340      	movs	r3, #64	@ 0x40
 8016118:	616b      	str	r3, [r5, #20]
 801611a:	2300      	movs	r3, #0
 801611c:	9309      	str	r3, [sp, #36]	@ 0x24
 801611e:	2320      	movs	r3, #32
 8016120:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016124:	f8cd 800c 	str.w	r8, [sp, #12]
 8016128:	2330      	movs	r3, #48	@ 0x30
 801612a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80162c8 <_svfiprintf_r+0x1e4>
 801612e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016132:	f04f 0901 	mov.w	r9, #1
 8016136:	4623      	mov	r3, r4
 8016138:	469a      	mov	sl, r3
 801613a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801613e:	b10a      	cbz	r2, 8016144 <_svfiprintf_r+0x60>
 8016140:	2a25      	cmp	r2, #37	@ 0x25
 8016142:	d1f9      	bne.n	8016138 <_svfiprintf_r+0x54>
 8016144:	ebba 0b04 	subs.w	fp, sl, r4
 8016148:	d00b      	beq.n	8016162 <_svfiprintf_r+0x7e>
 801614a:	465b      	mov	r3, fp
 801614c:	4622      	mov	r2, r4
 801614e:	4629      	mov	r1, r5
 8016150:	4638      	mov	r0, r7
 8016152:	f7ff ff6b 	bl	801602c <__ssputs_r>
 8016156:	3001      	adds	r0, #1
 8016158:	f000 80a7 	beq.w	80162aa <_svfiprintf_r+0x1c6>
 801615c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801615e:	445a      	add	r2, fp
 8016160:	9209      	str	r2, [sp, #36]	@ 0x24
 8016162:	f89a 3000 	ldrb.w	r3, [sl]
 8016166:	2b00      	cmp	r3, #0
 8016168:	f000 809f 	beq.w	80162aa <_svfiprintf_r+0x1c6>
 801616c:	2300      	movs	r3, #0
 801616e:	f04f 32ff 	mov.w	r2, #4294967295
 8016172:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016176:	f10a 0a01 	add.w	sl, sl, #1
 801617a:	9304      	str	r3, [sp, #16]
 801617c:	9307      	str	r3, [sp, #28]
 801617e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016182:	931a      	str	r3, [sp, #104]	@ 0x68
 8016184:	4654      	mov	r4, sl
 8016186:	2205      	movs	r2, #5
 8016188:	f814 1b01 	ldrb.w	r1, [r4], #1
 801618c:	484e      	ldr	r0, [pc, #312]	@ (80162c8 <_svfiprintf_r+0x1e4>)
 801618e:	f7e9 ffff 	bl	8000190 <memchr>
 8016192:	9a04      	ldr	r2, [sp, #16]
 8016194:	b9d8      	cbnz	r0, 80161ce <_svfiprintf_r+0xea>
 8016196:	06d0      	lsls	r0, r2, #27
 8016198:	bf44      	itt	mi
 801619a:	2320      	movmi	r3, #32
 801619c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161a0:	0711      	lsls	r1, r2, #28
 80161a2:	bf44      	itt	mi
 80161a4:	232b      	movmi	r3, #43	@ 0x2b
 80161a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80161aa:	f89a 3000 	ldrb.w	r3, [sl]
 80161ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80161b0:	d015      	beq.n	80161de <_svfiprintf_r+0xfa>
 80161b2:	9a07      	ldr	r2, [sp, #28]
 80161b4:	4654      	mov	r4, sl
 80161b6:	2000      	movs	r0, #0
 80161b8:	f04f 0c0a 	mov.w	ip, #10
 80161bc:	4621      	mov	r1, r4
 80161be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161c2:	3b30      	subs	r3, #48	@ 0x30
 80161c4:	2b09      	cmp	r3, #9
 80161c6:	d94b      	bls.n	8016260 <_svfiprintf_r+0x17c>
 80161c8:	b1b0      	cbz	r0, 80161f8 <_svfiprintf_r+0x114>
 80161ca:	9207      	str	r2, [sp, #28]
 80161cc:	e014      	b.n	80161f8 <_svfiprintf_r+0x114>
 80161ce:	eba0 0308 	sub.w	r3, r0, r8
 80161d2:	fa09 f303 	lsl.w	r3, r9, r3
 80161d6:	4313      	orrs	r3, r2
 80161d8:	9304      	str	r3, [sp, #16]
 80161da:	46a2      	mov	sl, r4
 80161dc:	e7d2      	b.n	8016184 <_svfiprintf_r+0xa0>
 80161de:	9b03      	ldr	r3, [sp, #12]
 80161e0:	1d19      	adds	r1, r3, #4
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	9103      	str	r1, [sp, #12]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	bfbb      	ittet	lt
 80161ea:	425b      	neglt	r3, r3
 80161ec:	f042 0202 	orrlt.w	r2, r2, #2
 80161f0:	9307      	strge	r3, [sp, #28]
 80161f2:	9307      	strlt	r3, [sp, #28]
 80161f4:	bfb8      	it	lt
 80161f6:	9204      	strlt	r2, [sp, #16]
 80161f8:	7823      	ldrb	r3, [r4, #0]
 80161fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80161fc:	d10a      	bne.n	8016214 <_svfiprintf_r+0x130>
 80161fe:	7863      	ldrb	r3, [r4, #1]
 8016200:	2b2a      	cmp	r3, #42	@ 0x2a
 8016202:	d132      	bne.n	801626a <_svfiprintf_r+0x186>
 8016204:	9b03      	ldr	r3, [sp, #12]
 8016206:	1d1a      	adds	r2, r3, #4
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	9203      	str	r2, [sp, #12]
 801620c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016210:	3402      	adds	r4, #2
 8016212:	9305      	str	r3, [sp, #20]
 8016214:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80162d8 <_svfiprintf_r+0x1f4>
 8016218:	7821      	ldrb	r1, [r4, #0]
 801621a:	2203      	movs	r2, #3
 801621c:	4650      	mov	r0, sl
 801621e:	f7e9 ffb7 	bl	8000190 <memchr>
 8016222:	b138      	cbz	r0, 8016234 <_svfiprintf_r+0x150>
 8016224:	9b04      	ldr	r3, [sp, #16]
 8016226:	eba0 000a 	sub.w	r0, r0, sl
 801622a:	2240      	movs	r2, #64	@ 0x40
 801622c:	4082      	lsls	r2, r0
 801622e:	4313      	orrs	r3, r2
 8016230:	3401      	adds	r4, #1
 8016232:	9304      	str	r3, [sp, #16]
 8016234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016238:	4824      	ldr	r0, [pc, #144]	@ (80162cc <_svfiprintf_r+0x1e8>)
 801623a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801623e:	2206      	movs	r2, #6
 8016240:	f7e9 ffa6 	bl	8000190 <memchr>
 8016244:	2800      	cmp	r0, #0
 8016246:	d036      	beq.n	80162b6 <_svfiprintf_r+0x1d2>
 8016248:	4b21      	ldr	r3, [pc, #132]	@ (80162d0 <_svfiprintf_r+0x1ec>)
 801624a:	bb1b      	cbnz	r3, 8016294 <_svfiprintf_r+0x1b0>
 801624c:	9b03      	ldr	r3, [sp, #12]
 801624e:	3307      	adds	r3, #7
 8016250:	f023 0307 	bic.w	r3, r3, #7
 8016254:	3308      	adds	r3, #8
 8016256:	9303      	str	r3, [sp, #12]
 8016258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801625a:	4433      	add	r3, r6
 801625c:	9309      	str	r3, [sp, #36]	@ 0x24
 801625e:	e76a      	b.n	8016136 <_svfiprintf_r+0x52>
 8016260:	fb0c 3202 	mla	r2, ip, r2, r3
 8016264:	460c      	mov	r4, r1
 8016266:	2001      	movs	r0, #1
 8016268:	e7a8      	b.n	80161bc <_svfiprintf_r+0xd8>
 801626a:	2300      	movs	r3, #0
 801626c:	3401      	adds	r4, #1
 801626e:	9305      	str	r3, [sp, #20]
 8016270:	4619      	mov	r1, r3
 8016272:	f04f 0c0a 	mov.w	ip, #10
 8016276:	4620      	mov	r0, r4
 8016278:	f810 2b01 	ldrb.w	r2, [r0], #1
 801627c:	3a30      	subs	r2, #48	@ 0x30
 801627e:	2a09      	cmp	r2, #9
 8016280:	d903      	bls.n	801628a <_svfiprintf_r+0x1a6>
 8016282:	2b00      	cmp	r3, #0
 8016284:	d0c6      	beq.n	8016214 <_svfiprintf_r+0x130>
 8016286:	9105      	str	r1, [sp, #20]
 8016288:	e7c4      	b.n	8016214 <_svfiprintf_r+0x130>
 801628a:	fb0c 2101 	mla	r1, ip, r1, r2
 801628e:	4604      	mov	r4, r0
 8016290:	2301      	movs	r3, #1
 8016292:	e7f0      	b.n	8016276 <_svfiprintf_r+0x192>
 8016294:	ab03      	add	r3, sp, #12
 8016296:	9300      	str	r3, [sp, #0]
 8016298:	462a      	mov	r2, r5
 801629a:	4b0e      	ldr	r3, [pc, #56]	@ (80162d4 <_svfiprintf_r+0x1f0>)
 801629c:	a904      	add	r1, sp, #16
 801629e:	4638      	mov	r0, r7
 80162a0:	f3af 8000 	nop.w
 80162a4:	1c42      	adds	r2, r0, #1
 80162a6:	4606      	mov	r6, r0
 80162a8:	d1d6      	bne.n	8016258 <_svfiprintf_r+0x174>
 80162aa:	89ab      	ldrh	r3, [r5, #12]
 80162ac:	065b      	lsls	r3, r3, #25
 80162ae:	f53f af2d 	bmi.w	801610c <_svfiprintf_r+0x28>
 80162b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80162b4:	e72c      	b.n	8016110 <_svfiprintf_r+0x2c>
 80162b6:	ab03      	add	r3, sp, #12
 80162b8:	9300      	str	r3, [sp, #0]
 80162ba:	462a      	mov	r2, r5
 80162bc:	4b05      	ldr	r3, [pc, #20]	@ (80162d4 <_svfiprintf_r+0x1f0>)
 80162be:	a904      	add	r1, sp, #16
 80162c0:	4638      	mov	r0, r7
 80162c2:	f000 f9bb 	bl	801663c <_printf_i>
 80162c6:	e7ed      	b.n	80162a4 <_svfiprintf_r+0x1c0>
 80162c8:	08018910 	.word	0x08018910
 80162cc:	0801891a 	.word	0x0801891a
 80162d0:	00000000 	.word	0x00000000
 80162d4:	0801602d 	.word	0x0801602d
 80162d8:	08018916 	.word	0x08018916

080162dc <__sfputc_r>:
 80162dc:	6893      	ldr	r3, [r2, #8]
 80162de:	3b01      	subs	r3, #1
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	b410      	push	{r4}
 80162e4:	6093      	str	r3, [r2, #8]
 80162e6:	da08      	bge.n	80162fa <__sfputc_r+0x1e>
 80162e8:	6994      	ldr	r4, [r2, #24]
 80162ea:	42a3      	cmp	r3, r4
 80162ec:	db01      	blt.n	80162f2 <__sfputc_r+0x16>
 80162ee:	290a      	cmp	r1, #10
 80162f0:	d103      	bne.n	80162fa <__sfputc_r+0x1e>
 80162f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162f6:	f7ff bc5b 	b.w	8015bb0 <__swbuf_r>
 80162fa:	6813      	ldr	r3, [r2, #0]
 80162fc:	1c58      	adds	r0, r3, #1
 80162fe:	6010      	str	r0, [r2, #0]
 8016300:	7019      	strb	r1, [r3, #0]
 8016302:	4608      	mov	r0, r1
 8016304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016308:	4770      	bx	lr

0801630a <__sfputs_r>:
 801630a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801630c:	4606      	mov	r6, r0
 801630e:	460f      	mov	r7, r1
 8016310:	4614      	mov	r4, r2
 8016312:	18d5      	adds	r5, r2, r3
 8016314:	42ac      	cmp	r4, r5
 8016316:	d101      	bne.n	801631c <__sfputs_r+0x12>
 8016318:	2000      	movs	r0, #0
 801631a:	e007      	b.n	801632c <__sfputs_r+0x22>
 801631c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016320:	463a      	mov	r2, r7
 8016322:	4630      	mov	r0, r6
 8016324:	f7ff ffda 	bl	80162dc <__sfputc_r>
 8016328:	1c43      	adds	r3, r0, #1
 801632a:	d1f3      	bne.n	8016314 <__sfputs_r+0xa>
 801632c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016330 <_vfiprintf_r>:
 8016330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016334:	460d      	mov	r5, r1
 8016336:	b09d      	sub	sp, #116	@ 0x74
 8016338:	4614      	mov	r4, r2
 801633a:	4698      	mov	r8, r3
 801633c:	4606      	mov	r6, r0
 801633e:	b118      	cbz	r0, 8016348 <_vfiprintf_r+0x18>
 8016340:	6a03      	ldr	r3, [r0, #32]
 8016342:	b90b      	cbnz	r3, 8016348 <_vfiprintf_r+0x18>
 8016344:	f7ff fb0a 	bl	801595c <__sinit>
 8016348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801634a:	07d9      	lsls	r1, r3, #31
 801634c:	d405      	bmi.n	801635a <_vfiprintf_r+0x2a>
 801634e:	89ab      	ldrh	r3, [r5, #12]
 8016350:	059a      	lsls	r2, r3, #22
 8016352:	d402      	bmi.n	801635a <_vfiprintf_r+0x2a>
 8016354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016356:	f7ff fd60 	bl	8015e1a <__retarget_lock_acquire_recursive>
 801635a:	89ab      	ldrh	r3, [r5, #12]
 801635c:	071b      	lsls	r3, r3, #28
 801635e:	d501      	bpl.n	8016364 <_vfiprintf_r+0x34>
 8016360:	692b      	ldr	r3, [r5, #16]
 8016362:	b99b      	cbnz	r3, 801638c <_vfiprintf_r+0x5c>
 8016364:	4629      	mov	r1, r5
 8016366:	4630      	mov	r0, r6
 8016368:	f7ff fc60 	bl	8015c2c <__swsetup_r>
 801636c:	b170      	cbz	r0, 801638c <_vfiprintf_r+0x5c>
 801636e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016370:	07dc      	lsls	r4, r3, #31
 8016372:	d504      	bpl.n	801637e <_vfiprintf_r+0x4e>
 8016374:	f04f 30ff 	mov.w	r0, #4294967295
 8016378:	b01d      	add	sp, #116	@ 0x74
 801637a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801637e:	89ab      	ldrh	r3, [r5, #12]
 8016380:	0598      	lsls	r0, r3, #22
 8016382:	d4f7      	bmi.n	8016374 <_vfiprintf_r+0x44>
 8016384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016386:	f7ff fd49 	bl	8015e1c <__retarget_lock_release_recursive>
 801638a:	e7f3      	b.n	8016374 <_vfiprintf_r+0x44>
 801638c:	2300      	movs	r3, #0
 801638e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016390:	2320      	movs	r3, #32
 8016392:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016396:	f8cd 800c 	str.w	r8, [sp, #12]
 801639a:	2330      	movs	r3, #48	@ 0x30
 801639c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801654c <_vfiprintf_r+0x21c>
 80163a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80163a4:	f04f 0901 	mov.w	r9, #1
 80163a8:	4623      	mov	r3, r4
 80163aa:	469a      	mov	sl, r3
 80163ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80163b0:	b10a      	cbz	r2, 80163b6 <_vfiprintf_r+0x86>
 80163b2:	2a25      	cmp	r2, #37	@ 0x25
 80163b4:	d1f9      	bne.n	80163aa <_vfiprintf_r+0x7a>
 80163b6:	ebba 0b04 	subs.w	fp, sl, r4
 80163ba:	d00b      	beq.n	80163d4 <_vfiprintf_r+0xa4>
 80163bc:	465b      	mov	r3, fp
 80163be:	4622      	mov	r2, r4
 80163c0:	4629      	mov	r1, r5
 80163c2:	4630      	mov	r0, r6
 80163c4:	f7ff ffa1 	bl	801630a <__sfputs_r>
 80163c8:	3001      	adds	r0, #1
 80163ca:	f000 80a7 	beq.w	801651c <_vfiprintf_r+0x1ec>
 80163ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80163d0:	445a      	add	r2, fp
 80163d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80163d4:	f89a 3000 	ldrb.w	r3, [sl]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	f000 809f 	beq.w	801651c <_vfiprintf_r+0x1ec>
 80163de:	2300      	movs	r3, #0
 80163e0:	f04f 32ff 	mov.w	r2, #4294967295
 80163e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80163e8:	f10a 0a01 	add.w	sl, sl, #1
 80163ec:	9304      	str	r3, [sp, #16]
 80163ee:	9307      	str	r3, [sp, #28]
 80163f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80163f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80163f6:	4654      	mov	r4, sl
 80163f8:	2205      	movs	r2, #5
 80163fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163fe:	4853      	ldr	r0, [pc, #332]	@ (801654c <_vfiprintf_r+0x21c>)
 8016400:	f7e9 fec6 	bl	8000190 <memchr>
 8016404:	9a04      	ldr	r2, [sp, #16]
 8016406:	b9d8      	cbnz	r0, 8016440 <_vfiprintf_r+0x110>
 8016408:	06d1      	lsls	r1, r2, #27
 801640a:	bf44      	itt	mi
 801640c:	2320      	movmi	r3, #32
 801640e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016412:	0713      	lsls	r3, r2, #28
 8016414:	bf44      	itt	mi
 8016416:	232b      	movmi	r3, #43	@ 0x2b
 8016418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801641c:	f89a 3000 	ldrb.w	r3, [sl]
 8016420:	2b2a      	cmp	r3, #42	@ 0x2a
 8016422:	d015      	beq.n	8016450 <_vfiprintf_r+0x120>
 8016424:	9a07      	ldr	r2, [sp, #28]
 8016426:	4654      	mov	r4, sl
 8016428:	2000      	movs	r0, #0
 801642a:	f04f 0c0a 	mov.w	ip, #10
 801642e:	4621      	mov	r1, r4
 8016430:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016434:	3b30      	subs	r3, #48	@ 0x30
 8016436:	2b09      	cmp	r3, #9
 8016438:	d94b      	bls.n	80164d2 <_vfiprintf_r+0x1a2>
 801643a:	b1b0      	cbz	r0, 801646a <_vfiprintf_r+0x13a>
 801643c:	9207      	str	r2, [sp, #28]
 801643e:	e014      	b.n	801646a <_vfiprintf_r+0x13a>
 8016440:	eba0 0308 	sub.w	r3, r0, r8
 8016444:	fa09 f303 	lsl.w	r3, r9, r3
 8016448:	4313      	orrs	r3, r2
 801644a:	9304      	str	r3, [sp, #16]
 801644c:	46a2      	mov	sl, r4
 801644e:	e7d2      	b.n	80163f6 <_vfiprintf_r+0xc6>
 8016450:	9b03      	ldr	r3, [sp, #12]
 8016452:	1d19      	adds	r1, r3, #4
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	9103      	str	r1, [sp, #12]
 8016458:	2b00      	cmp	r3, #0
 801645a:	bfbb      	ittet	lt
 801645c:	425b      	neglt	r3, r3
 801645e:	f042 0202 	orrlt.w	r2, r2, #2
 8016462:	9307      	strge	r3, [sp, #28]
 8016464:	9307      	strlt	r3, [sp, #28]
 8016466:	bfb8      	it	lt
 8016468:	9204      	strlt	r2, [sp, #16]
 801646a:	7823      	ldrb	r3, [r4, #0]
 801646c:	2b2e      	cmp	r3, #46	@ 0x2e
 801646e:	d10a      	bne.n	8016486 <_vfiprintf_r+0x156>
 8016470:	7863      	ldrb	r3, [r4, #1]
 8016472:	2b2a      	cmp	r3, #42	@ 0x2a
 8016474:	d132      	bne.n	80164dc <_vfiprintf_r+0x1ac>
 8016476:	9b03      	ldr	r3, [sp, #12]
 8016478:	1d1a      	adds	r2, r3, #4
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	9203      	str	r2, [sp, #12]
 801647e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016482:	3402      	adds	r4, #2
 8016484:	9305      	str	r3, [sp, #20]
 8016486:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801655c <_vfiprintf_r+0x22c>
 801648a:	7821      	ldrb	r1, [r4, #0]
 801648c:	2203      	movs	r2, #3
 801648e:	4650      	mov	r0, sl
 8016490:	f7e9 fe7e 	bl	8000190 <memchr>
 8016494:	b138      	cbz	r0, 80164a6 <_vfiprintf_r+0x176>
 8016496:	9b04      	ldr	r3, [sp, #16]
 8016498:	eba0 000a 	sub.w	r0, r0, sl
 801649c:	2240      	movs	r2, #64	@ 0x40
 801649e:	4082      	lsls	r2, r0
 80164a0:	4313      	orrs	r3, r2
 80164a2:	3401      	adds	r4, #1
 80164a4:	9304      	str	r3, [sp, #16]
 80164a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164aa:	4829      	ldr	r0, [pc, #164]	@ (8016550 <_vfiprintf_r+0x220>)
 80164ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80164b0:	2206      	movs	r2, #6
 80164b2:	f7e9 fe6d 	bl	8000190 <memchr>
 80164b6:	2800      	cmp	r0, #0
 80164b8:	d03f      	beq.n	801653a <_vfiprintf_r+0x20a>
 80164ba:	4b26      	ldr	r3, [pc, #152]	@ (8016554 <_vfiprintf_r+0x224>)
 80164bc:	bb1b      	cbnz	r3, 8016506 <_vfiprintf_r+0x1d6>
 80164be:	9b03      	ldr	r3, [sp, #12]
 80164c0:	3307      	adds	r3, #7
 80164c2:	f023 0307 	bic.w	r3, r3, #7
 80164c6:	3308      	adds	r3, #8
 80164c8:	9303      	str	r3, [sp, #12]
 80164ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80164cc:	443b      	add	r3, r7
 80164ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80164d0:	e76a      	b.n	80163a8 <_vfiprintf_r+0x78>
 80164d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80164d6:	460c      	mov	r4, r1
 80164d8:	2001      	movs	r0, #1
 80164da:	e7a8      	b.n	801642e <_vfiprintf_r+0xfe>
 80164dc:	2300      	movs	r3, #0
 80164de:	3401      	adds	r4, #1
 80164e0:	9305      	str	r3, [sp, #20]
 80164e2:	4619      	mov	r1, r3
 80164e4:	f04f 0c0a 	mov.w	ip, #10
 80164e8:	4620      	mov	r0, r4
 80164ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80164ee:	3a30      	subs	r2, #48	@ 0x30
 80164f0:	2a09      	cmp	r2, #9
 80164f2:	d903      	bls.n	80164fc <_vfiprintf_r+0x1cc>
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d0c6      	beq.n	8016486 <_vfiprintf_r+0x156>
 80164f8:	9105      	str	r1, [sp, #20]
 80164fa:	e7c4      	b.n	8016486 <_vfiprintf_r+0x156>
 80164fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8016500:	4604      	mov	r4, r0
 8016502:	2301      	movs	r3, #1
 8016504:	e7f0      	b.n	80164e8 <_vfiprintf_r+0x1b8>
 8016506:	ab03      	add	r3, sp, #12
 8016508:	9300      	str	r3, [sp, #0]
 801650a:	462a      	mov	r2, r5
 801650c:	4b12      	ldr	r3, [pc, #72]	@ (8016558 <_vfiprintf_r+0x228>)
 801650e:	a904      	add	r1, sp, #16
 8016510:	4630      	mov	r0, r6
 8016512:	f3af 8000 	nop.w
 8016516:	4607      	mov	r7, r0
 8016518:	1c78      	adds	r0, r7, #1
 801651a:	d1d6      	bne.n	80164ca <_vfiprintf_r+0x19a>
 801651c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801651e:	07d9      	lsls	r1, r3, #31
 8016520:	d405      	bmi.n	801652e <_vfiprintf_r+0x1fe>
 8016522:	89ab      	ldrh	r3, [r5, #12]
 8016524:	059a      	lsls	r2, r3, #22
 8016526:	d402      	bmi.n	801652e <_vfiprintf_r+0x1fe>
 8016528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801652a:	f7ff fc77 	bl	8015e1c <__retarget_lock_release_recursive>
 801652e:	89ab      	ldrh	r3, [r5, #12]
 8016530:	065b      	lsls	r3, r3, #25
 8016532:	f53f af1f 	bmi.w	8016374 <_vfiprintf_r+0x44>
 8016536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016538:	e71e      	b.n	8016378 <_vfiprintf_r+0x48>
 801653a:	ab03      	add	r3, sp, #12
 801653c:	9300      	str	r3, [sp, #0]
 801653e:	462a      	mov	r2, r5
 8016540:	4b05      	ldr	r3, [pc, #20]	@ (8016558 <_vfiprintf_r+0x228>)
 8016542:	a904      	add	r1, sp, #16
 8016544:	4630      	mov	r0, r6
 8016546:	f000 f879 	bl	801663c <_printf_i>
 801654a:	e7e4      	b.n	8016516 <_vfiprintf_r+0x1e6>
 801654c:	08018910 	.word	0x08018910
 8016550:	0801891a 	.word	0x0801891a
 8016554:	00000000 	.word	0x00000000
 8016558:	0801630b 	.word	0x0801630b
 801655c:	08018916 	.word	0x08018916

08016560 <_printf_common>:
 8016560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016564:	4616      	mov	r6, r2
 8016566:	4698      	mov	r8, r3
 8016568:	688a      	ldr	r2, [r1, #8]
 801656a:	690b      	ldr	r3, [r1, #16]
 801656c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016570:	4293      	cmp	r3, r2
 8016572:	bfb8      	it	lt
 8016574:	4613      	movlt	r3, r2
 8016576:	6033      	str	r3, [r6, #0]
 8016578:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801657c:	4607      	mov	r7, r0
 801657e:	460c      	mov	r4, r1
 8016580:	b10a      	cbz	r2, 8016586 <_printf_common+0x26>
 8016582:	3301      	adds	r3, #1
 8016584:	6033      	str	r3, [r6, #0]
 8016586:	6823      	ldr	r3, [r4, #0]
 8016588:	0699      	lsls	r1, r3, #26
 801658a:	bf42      	ittt	mi
 801658c:	6833      	ldrmi	r3, [r6, #0]
 801658e:	3302      	addmi	r3, #2
 8016590:	6033      	strmi	r3, [r6, #0]
 8016592:	6825      	ldr	r5, [r4, #0]
 8016594:	f015 0506 	ands.w	r5, r5, #6
 8016598:	d106      	bne.n	80165a8 <_printf_common+0x48>
 801659a:	f104 0a19 	add.w	sl, r4, #25
 801659e:	68e3      	ldr	r3, [r4, #12]
 80165a0:	6832      	ldr	r2, [r6, #0]
 80165a2:	1a9b      	subs	r3, r3, r2
 80165a4:	42ab      	cmp	r3, r5
 80165a6:	dc26      	bgt.n	80165f6 <_printf_common+0x96>
 80165a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80165ac:	6822      	ldr	r2, [r4, #0]
 80165ae:	3b00      	subs	r3, #0
 80165b0:	bf18      	it	ne
 80165b2:	2301      	movne	r3, #1
 80165b4:	0692      	lsls	r2, r2, #26
 80165b6:	d42b      	bmi.n	8016610 <_printf_common+0xb0>
 80165b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80165bc:	4641      	mov	r1, r8
 80165be:	4638      	mov	r0, r7
 80165c0:	47c8      	blx	r9
 80165c2:	3001      	adds	r0, #1
 80165c4:	d01e      	beq.n	8016604 <_printf_common+0xa4>
 80165c6:	6823      	ldr	r3, [r4, #0]
 80165c8:	6922      	ldr	r2, [r4, #16]
 80165ca:	f003 0306 	and.w	r3, r3, #6
 80165ce:	2b04      	cmp	r3, #4
 80165d0:	bf02      	ittt	eq
 80165d2:	68e5      	ldreq	r5, [r4, #12]
 80165d4:	6833      	ldreq	r3, [r6, #0]
 80165d6:	1aed      	subeq	r5, r5, r3
 80165d8:	68a3      	ldr	r3, [r4, #8]
 80165da:	bf0c      	ite	eq
 80165dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80165e0:	2500      	movne	r5, #0
 80165e2:	4293      	cmp	r3, r2
 80165e4:	bfc4      	itt	gt
 80165e6:	1a9b      	subgt	r3, r3, r2
 80165e8:	18ed      	addgt	r5, r5, r3
 80165ea:	2600      	movs	r6, #0
 80165ec:	341a      	adds	r4, #26
 80165ee:	42b5      	cmp	r5, r6
 80165f0:	d11a      	bne.n	8016628 <_printf_common+0xc8>
 80165f2:	2000      	movs	r0, #0
 80165f4:	e008      	b.n	8016608 <_printf_common+0xa8>
 80165f6:	2301      	movs	r3, #1
 80165f8:	4652      	mov	r2, sl
 80165fa:	4641      	mov	r1, r8
 80165fc:	4638      	mov	r0, r7
 80165fe:	47c8      	blx	r9
 8016600:	3001      	adds	r0, #1
 8016602:	d103      	bne.n	801660c <_printf_common+0xac>
 8016604:	f04f 30ff 	mov.w	r0, #4294967295
 8016608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801660c:	3501      	adds	r5, #1
 801660e:	e7c6      	b.n	801659e <_printf_common+0x3e>
 8016610:	18e1      	adds	r1, r4, r3
 8016612:	1c5a      	adds	r2, r3, #1
 8016614:	2030      	movs	r0, #48	@ 0x30
 8016616:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801661a:	4422      	add	r2, r4
 801661c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016620:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016624:	3302      	adds	r3, #2
 8016626:	e7c7      	b.n	80165b8 <_printf_common+0x58>
 8016628:	2301      	movs	r3, #1
 801662a:	4622      	mov	r2, r4
 801662c:	4641      	mov	r1, r8
 801662e:	4638      	mov	r0, r7
 8016630:	47c8      	blx	r9
 8016632:	3001      	adds	r0, #1
 8016634:	d0e6      	beq.n	8016604 <_printf_common+0xa4>
 8016636:	3601      	adds	r6, #1
 8016638:	e7d9      	b.n	80165ee <_printf_common+0x8e>
	...

0801663c <_printf_i>:
 801663c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016640:	7e0f      	ldrb	r7, [r1, #24]
 8016642:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016644:	2f78      	cmp	r7, #120	@ 0x78
 8016646:	4691      	mov	r9, r2
 8016648:	4680      	mov	r8, r0
 801664a:	460c      	mov	r4, r1
 801664c:	469a      	mov	sl, r3
 801664e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016652:	d807      	bhi.n	8016664 <_printf_i+0x28>
 8016654:	2f62      	cmp	r7, #98	@ 0x62
 8016656:	d80a      	bhi.n	801666e <_printf_i+0x32>
 8016658:	2f00      	cmp	r7, #0
 801665a:	f000 80d2 	beq.w	8016802 <_printf_i+0x1c6>
 801665e:	2f58      	cmp	r7, #88	@ 0x58
 8016660:	f000 80b9 	beq.w	80167d6 <_printf_i+0x19a>
 8016664:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016668:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801666c:	e03a      	b.n	80166e4 <_printf_i+0xa8>
 801666e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016672:	2b15      	cmp	r3, #21
 8016674:	d8f6      	bhi.n	8016664 <_printf_i+0x28>
 8016676:	a101      	add	r1, pc, #4	@ (adr r1, 801667c <_printf_i+0x40>)
 8016678:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801667c:	080166d5 	.word	0x080166d5
 8016680:	080166e9 	.word	0x080166e9
 8016684:	08016665 	.word	0x08016665
 8016688:	08016665 	.word	0x08016665
 801668c:	08016665 	.word	0x08016665
 8016690:	08016665 	.word	0x08016665
 8016694:	080166e9 	.word	0x080166e9
 8016698:	08016665 	.word	0x08016665
 801669c:	08016665 	.word	0x08016665
 80166a0:	08016665 	.word	0x08016665
 80166a4:	08016665 	.word	0x08016665
 80166a8:	080167e9 	.word	0x080167e9
 80166ac:	08016713 	.word	0x08016713
 80166b0:	080167a3 	.word	0x080167a3
 80166b4:	08016665 	.word	0x08016665
 80166b8:	08016665 	.word	0x08016665
 80166bc:	0801680b 	.word	0x0801680b
 80166c0:	08016665 	.word	0x08016665
 80166c4:	08016713 	.word	0x08016713
 80166c8:	08016665 	.word	0x08016665
 80166cc:	08016665 	.word	0x08016665
 80166d0:	080167ab 	.word	0x080167ab
 80166d4:	6833      	ldr	r3, [r6, #0]
 80166d6:	1d1a      	adds	r2, r3, #4
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	6032      	str	r2, [r6, #0]
 80166dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80166e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80166e4:	2301      	movs	r3, #1
 80166e6:	e09d      	b.n	8016824 <_printf_i+0x1e8>
 80166e8:	6833      	ldr	r3, [r6, #0]
 80166ea:	6820      	ldr	r0, [r4, #0]
 80166ec:	1d19      	adds	r1, r3, #4
 80166ee:	6031      	str	r1, [r6, #0]
 80166f0:	0606      	lsls	r6, r0, #24
 80166f2:	d501      	bpl.n	80166f8 <_printf_i+0xbc>
 80166f4:	681d      	ldr	r5, [r3, #0]
 80166f6:	e003      	b.n	8016700 <_printf_i+0xc4>
 80166f8:	0645      	lsls	r5, r0, #25
 80166fa:	d5fb      	bpl.n	80166f4 <_printf_i+0xb8>
 80166fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016700:	2d00      	cmp	r5, #0
 8016702:	da03      	bge.n	801670c <_printf_i+0xd0>
 8016704:	232d      	movs	r3, #45	@ 0x2d
 8016706:	426d      	negs	r5, r5
 8016708:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801670c:	4859      	ldr	r0, [pc, #356]	@ (8016874 <_printf_i+0x238>)
 801670e:	230a      	movs	r3, #10
 8016710:	e011      	b.n	8016736 <_printf_i+0xfa>
 8016712:	6821      	ldr	r1, [r4, #0]
 8016714:	6833      	ldr	r3, [r6, #0]
 8016716:	0608      	lsls	r0, r1, #24
 8016718:	f853 5b04 	ldr.w	r5, [r3], #4
 801671c:	d402      	bmi.n	8016724 <_printf_i+0xe8>
 801671e:	0649      	lsls	r1, r1, #25
 8016720:	bf48      	it	mi
 8016722:	b2ad      	uxthmi	r5, r5
 8016724:	2f6f      	cmp	r7, #111	@ 0x6f
 8016726:	4853      	ldr	r0, [pc, #332]	@ (8016874 <_printf_i+0x238>)
 8016728:	6033      	str	r3, [r6, #0]
 801672a:	bf14      	ite	ne
 801672c:	230a      	movne	r3, #10
 801672e:	2308      	moveq	r3, #8
 8016730:	2100      	movs	r1, #0
 8016732:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016736:	6866      	ldr	r6, [r4, #4]
 8016738:	60a6      	str	r6, [r4, #8]
 801673a:	2e00      	cmp	r6, #0
 801673c:	bfa2      	ittt	ge
 801673e:	6821      	ldrge	r1, [r4, #0]
 8016740:	f021 0104 	bicge.w	r1, r1, #4
 8016744:	6021      	strge	r1, [r4, #0]
 8016746:	b90d      	cbnz	r5, 801674c <_printf_i+0x110>
 8016748:	2e00      	cmp	r6, #0
 801674a:	d04b      	beq.n	80167e4 <_printf_i+0x1a8>
 801674c:	4616      	mov	r6, r2
 801674e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016752:	fb03 5711 	mls	r7, r3, r1, r5
 8016756:	5dc7      	ldrb	r7, [r0, r7]
 8016758:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801675c:	462f      	mov	r7, r5
 801675e:	42bb      	cmp	r3, r7
 8016760:	460d      	mov	r5, r1
 8016762:	d9f4      	bls.n	801674e <_printf_i+0x112>
 8016764:	2b08      	cmp	r3, #8
 8016766:	d10b      	bne.n	8016780 <_printf_i+0x144>
 8016768:	6823      	ldr	r3, [r4, #0]
 801676a:	07df      	lsls	r7, r3, #31
 801676c:	d508      	bpl.n	8016780 <_printf_i+0x144>
 801676e:	6923      	ldr	r3, [r4, #16]
 8016770:	6861      	ldr	r1, [r4, #4]
 8016772:	4299      	cmp	r1, r3
 8016774:	bfde      	ittt	le
 8016776:	2330      	movle	r3, #48	@ 0x30
 8016778:	f806 3c01 	strble.w	r3, [r6, #-1]
 801677c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016780:	1b92      	subs	r2, r2, r6
 8016782:	6122      	str	r2, [r4, #16]
 8016784:	f8cd a000 	str.w	sl, [sp]
 8016788:	464b      	mov	r3, r9
 801678a:	aa03      	add	r2, sp, #12
 801678c:	4621      	mov	r1, r4
 801678e:	4640      	mov	r0, r8
 8016790:	f7ff fee6 	bl	8016560 <_printf_common>
 8016794:	3001      	adds	r0, #1
 8016796:	d14a      	bne.n	801682e <_printf_i+0x1f2>
 8016798:	f04f 30ff 	mov.w	r0, #4294967295
 801679c:	b004      	add	sp, #16
 801679e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167a2:	6823      	ldr	r3, [r4, #0]
 80167a4:	f043 0320 	orr.w	r3, r3, #32
 80167a8:	6023      	str	r3, [r4, #0]
 80167aa:	4833      	ldr	r0, [pc, #204]	@ (8016878 <_printf_i+0x23c>)
 80167ac:	2778      	movs	r7, #120	@ 0x78
 80167ae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80167b2:	6823      	ldr	r3, [r4, #0]
 80167b4:	6831      	ldr	r1, [r6, #0]
 80167b6:	061f      	lsls	r7, r3, #24
 80167b8:	f851 5b04 	ldr.w	r5, [r1], #4
 80167bc:	d402      	bmi.n	80167c4 <_printf_i+0x188>
 80167be:	065f      	lsls	r7, r3, #25
 80167c0:	bf48      	it	mi
 80167c2:	b2ad      	uxthmi	r5, r5
 80167c4:	6031      	str	r1, [r6, #0]
 80167c6:	07d9      	lsls	r1, r3, #31
 80167c8:	bf44      	itt	mi
 80167ca:	f043 0320 	orrmi.w	r3, r3, #32
 80167ce:	6023      	strmi	r3, [r4, #0]
 80167d0:	b11d      	cbz	r5, 80167da <_printf_i+0x19e>
 80167d2:	2310      	movs	r3, #16
 80167d4:	e7ac      	b.n	8016730 <_printf_i+0xf4>
 80167d6:	4827      	ldr	r0, [pc, #156]	@ (8016874 <_printf_i+0x238>)
 80167d8:	e7e9      	b.n	80167ae <_printf_i+0x172>
 80167da:	6823      	ldr	r3, [r4, #0]
 80167dc:	f023 0320 	bic.w	r3, r3, #32
 80167e0:	6023      	str	r3, [r4, #0]
 80167e2:	e7f6      	b.n	80167d2 <_printf_i+0x196>
 80167e4:	4616      	mov	r6, r2
 80167e6:	e7bd      	b.n	8016764 <_printf_i+0x128>
 80167e8:	6833      	ldr	r3, [r6, #0]
 80167ea:	6825      	ldr	r5, [r4, #0]
 80167ec:	6961      	ldr	r1, [r4, #20]
 80167ee:	1d18      	adds	r0, r3, #4
 80167f0:	6030      	str	r0, [r6, #0]
 80167f2:	062e      	lsls	r6, r5, #24
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	d501      	bpl.n	80167fc <_printf_i+0x1c0>
 80167f8:	6019      	str	r1, [r3, #0]
 80167fa:	e002      	b.n	8016802 <_printf_i+0x1c6>
 80167fc:	0668      	lsls	r0, r5, #25
 80167fe:	d5fb      	bpl.n	80167f8 <_printf_i+0x1bc>
 8016800:	8019      	strh	r1, [r3, #0]
 8016802:	2300      	movs	r3, #0
 8016804:	6123      	str	r3, [r4, #16]
 8016806:	4616      	mov	r6, r2
 8016808:	e7bc      	b.n	8016784 <_printf_i+0x148>
 801680a:	6833      	ldr	r3, [r6, #0]
 801680c:	1d1a      	adds	r2, r3, #4
 801680e:	6032      	str	r2, [r6, #0]
 8016810:	681e      	ldr	r6, [r3, #0]
 8016812:	6862      	ldr	r2, [r4, #4]
 8016814:	2100      	movs	r1, #0
 8016816:	4630      	mov	r0, r6
 8016818:	f7e9 fcba 	bl	8000190 <memchr>
 801681c:	b108      	cbz	r0, 8016822 <_printf_i+0x1e6>
 801681e:	1b80      	subs	r0, r0, r6
 8016820:	6060      	str	r0, [r4, #4]
 8016822:	6863      	ldr	r3, [r4, #4]
 8016824:	6123      	str	r3, [r4, #16]
 8016826:	2300      	movs	r3, #0
 8016828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801682c:	e7aa      	b.n	8016784 <_printf_i+0x148>
 801682e:	6923      	ldr	r3, [r4, #16]
 8016830:	4632      	mov	r2, r6
 8016832:	4649      	mov	r1, r9
 8016834:	4640      	mov	r0, r8
 8016836:	47d0      	blx	sl
 8016838:	3001      	adds	r0, #1
 801683a:	d0ad      	beq.n	8016798 <_printf_i+0x15c>
 801683c:	6823      	ldr	r3, [r4, #0]
 801683e:	079b      	lsls	r3, r3, #30
 8016840:	d413      	bmi.n	801686a <_printf_i+0x22e>
 8016842:	68e0      	ldr	r0, [r4, #12]
 8016844:	9b03      	ldr	r3, [sp, #12]
 8016846:	4298      	cmp	r0, r3
 8016848:	bfb8      	it	lt
 801684a:	4618      	movlt	r0, r3
 801684c:	e7a6      	b.n	801679c <_printf_i+0x160>
 801684e:	2301      	movs	r3, #1
 8016850:	4632      	mov	r2, r6
 8016852:	4649      	mov	r1, r9
 8016854:	4640      	mov	r0, r8
 8016856:	47d0      	blx	sl
 8016858:	3001      	adds	r0, #1
 801685a:	d09d      	beq.n	8016798 <_printf_i+0x15c>
 801685c:	3501      	adds	r5, #1
 801685e:	68e3      	ldr	r3, [r4, #12]
 8016860:	9903      	ldr	r1, [sp, #12]
 8016862:	1a5b      	subs	r3, r3, r1
 8016864:	42ab      	cmp	r3, r5
 8016866:	dcf2      	bgt.n	801684e <_printf_i+0x212>
 8016868:	e7eb      	b.n	8016842 <_printf_i+0x206>
 801686a:	2500      	movs	r5, #0
 801686c:	f104 0619 	add.w	r6, r4, #25
 8016870:	e7f5      	b.n	801685e <_printf_i+0x222>
 8016872:	bf00      	nop
 8016874:	08018921 	.word	0x08018921
 8016878:	08018932 	.word	0x08018932

0801687c <__sflush_r>:
 801687c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016884:	0716      	lsls	r6, r2, #28
 8016886:	4605      	mov	r5, r0
 8016888:	460c      	mov	r4, r1
 801688a:	d454      	bmi.n	8016936 <__sflush_r+0xba>
 801688c:	684b      	ldr	r3, [r1, #4]
 801688e:	2b00      	cmp	r3, #0
 8016890:	dc02      	bgt.n	8016898 <__sflush_r+0x1c>
 8016892:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016894:	2b00      	cmp	r3, #0
 8016896:	dd48      	ble.n	801692a <__sflush_r+0xae>
 8016898:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801689a:	2e00      	cmp	r6, #0
 801689c:	d045      	beq.n	801692a <__sflush_r+0xae>
 801689e:	2300      	movs	r3, #0
 80168a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80168a4:	682f      	ldr	r7, [r5, #0]
 80168a6:	6a21      	ldr	r1, [r4, #32]
 80168a8:	602b      	str	r3, [r5, #0]
 80168aa:	d030      	beq.n	801690e <__sflush_r+0x92>
 80168ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80168ae:	89a3      	ldrh	r3, [r4, #12]
 80168b0:	0759      	lsls	r1, r3, #29
 80168b2:	d505      	bpl.n	80168c0 <__sflush_r+0x44>
 80168b4:	6863      	ldr	r3, [r4, #4]
 80168b6:	1ad2      	subs	r2, r2, r3
 80168b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80168ba:	b10b      	cbz	r3, 80168c0 <__sflush_r+0x44>
 80168bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80168be:	1ad2      	subs	r2, r2, r3
 80168c0:	2300      	movs	r3, #0
 80168c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80168c4:	6a21      	ldr	r1, [r4, #32]
 80168c6:	4628      	mov	r0, r5
 80168c8:	47b0      	blx	r6
 80168ca:	1c43      	adds	r3, r0, #1
 80168cc:	89a3      	ldrh	r3, [r4, #12]
 80168ce:	d106      	bne.n	80168de <__sflush_r+0x62>
 80168d0:	6829      	ldr	r1, [r5, #0]
 80168d2:	291d      	cmp	r1, #29
 80168d4:	d82b      	bhi.n	801692e <__sflush_r+0xb2>
 80168d6:	4a2a      	ldr	r2, [pc, #168]	@ (8016980 <__sflush_r+0x104>)
 80168d8:	410a      	asrs	r2, r1
 80168da:	07d6      	lsls	r6, r2, #31
 80168dc:	d427      	bmi.n	801692e <__sflush_r+0xb2>
 80168de:	2200      	movs	r2, #0
 80168e0:	6062      	str	r2, [r4, #4]
 80168e2:	04d9      	lsls	r1, r3, #19
 80168e4:	6922      	ldr	r2, [r4, #16]
 80168e6:	6022      	str	r2, [r4, #0]
 80168e8:	d504      	bpl.n	80168f4 <__sflush_r+0x78>
 80168ea:	1c42      	adds	r2, r0, #1
 80168ec:	d101      	bne.n	80168f2 <__sflush_r+0x76>
 80168ee:	682b      	ldr	r3, [r5, #0]
 80168f0:	b903      	cbnz	r3, 80168f4 <__sflush_r+0x78>
 80168f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80168f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80168f6:	602f      	str	r7, [r5, #0]
 80168f8:	b1b9      	cbz	r1, 801692a <__sflush_r+0xae>
 80168fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80168fe:	4299      	cmp	r1, r3
 8016900:	d002      	beq.n	8016908 <__sflush_r+0x8c>
 8016902:	4628      	mov	r0, r5
 8016904:	f7ff fa9a 	bl	8015e3c <_free_r>
 8016908:	2300      	movs	r3, #0
 801690a:	6363      	str	r3, [r4, #52]	@ 0x34
 801690c:	e00d      	b.n	801692a <__sflush_r+0xae>
 801690e:	2301      	movs	r3, #1
 8016910:	4628      	mov	r0, r5
 8016912:	47b0      	blx	r6
 8016914:	4602      	mov	r2, r0
 8016916:	1c50      	adds	r0, r2, #1
 8016918:	d1c9      	bne.n	80168ae <__sflush_r+0x32>
 801691a:	682b      	ldr	r3, [r5, #0]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d0c6      	beq.n	80168ae <__sflush_r+0x32>
 8016920:	2b1d      	cmp	r3, #29
 8016922:	d001      	beq.n	8016928 <__sflush_r+0xac>
 8016924:	2b16      	cmp	r3, #22
 8016926:	d11e      	bne.n	8016966 <__sflush_r+0xea>
 8016928:	602f      	str	r7, [r5, #0]
 801692a:	2000      	movs	r0, #0
 801692c:	e022      	b.n	8016974 <__sflush_r+0xf8>
 801692e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016932:	b21b      	sxth	r3, r3
 8016934:	e01b      	b.n	801696e <__sflush_r+0xf2>
 8016936:	690f      	ldr	r7, [r1, #16]
 8016938:	2f00      	cmp	r7, #0
 801693a:	d0f6      	beq.n	801692a <__sflush_r+0xae>
 801693c:	0793      	lsls	r3, r2, #30
 801693e:	680e      	ldr	r6, [r1, #0]
 8016940:	bf08      	it	eq
 8016942:	694b      	ldreq	r3, [r1, #20]
 8016944:	600f      	str	r7, [r1, #0]
 8016946:	bf18      	it	ne
 8016948:	2300      	movne	r3, #0
 801694a:	eba6 0807 	sub.w	r8, r6, r7
 801694e:	608b      	str	r3, [r1, #8]
 8016950:	f1b8 0f00 	cmp.w	r8, #0
 8016954:	dde9      	ble.n	801692a <__sflush_r+0xae>
 8016956:	6a21      	ldr	r1, [r4, #32]
 8016958:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801695a:	4643      	mov	r3, r8
 801695c:	463a      	mov	r2, r7
 801695e:	4628      	mov	r0, r5
 8016960:	47b0      	blx	r6
 8016962:	2800      	cmp	r0, #0
 8016964:	dc08      	bgt.n	8016978 <__sflush_r+0xfc>
 8016966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801696a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801696e:	81a3      	strh	r3, [r4, #12]
 8016970:	f04f 30ff 	mov.w	r0, #4294967295
 8016974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016978:	4407      	add	r7, r0
 801697a:	eba8 0800 	sub.w	r8, r8, r0
 801697e:	e7e7      	b.n	8016950 <__sflush_r+0xd4>
 8016980:	dfbffffe 	.word	0xdfbffffe

08016984 <_fflush_r>:
 8016984:	b538      	push	{r3, r4, r5, lr}
 8016986:	690b      	ldr	r3, [r1, #16]
 8016988:	4605      	mov	r5, r0
 801698a:	460c      	mov	r4, r1
 801698c:	b913      	cbnz	r3, 8016994 <_fflush_r+0x10>
 801698e:	2500      	movs	r5, #0
 8016990:	4628      	mov	r0, r5
 8016992:	bd38      	pop	{r3, r4, r5, pc}
 8016994:	b118      	cbz	r0, 801699e <_fflush_r+0x1a>
 8016996:	6a03      	ldr	r3, [r0, #32]
 8016998:	b90b      	cbnz	r3, 801699e <_fflush_r+0x1a>
 801699a:	f7fe ffdf 	bl	801595c <__sinit>
 801699e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d0f3      	beq.n	801698e <_fflush_r+0xa>
 80169a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80169a8:	07d0      	lsls	r0, r2, #31
 80169aa:	d404      	bmi.n	80169b6 <_fflush_r+0x32>
 80169ac:	0599      	lsls	r1, r3, #22
 80169ae:	d402      	bmi.n	80169b6 <_fflush_r+0x32>
 80169b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169b2:	f7ff fa32 	bl	8015e1a <__retarget_lock_acquire_recursive>
 80169b6:	4628      	mov	r0, r5
 80169b8:	4621      	mov	r1, r4
 80169ba:	f7ff ff5f 	bl	801687c <__sflush_r>
 80169be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80169c0:	07da      	lsls	r2, r3, #31
 80169c2:	4605      	mov	r5, r0
 80169c4:	d4e4      	bmi.n	8016990 <_fflush_r+0xc>
 80169c6:	89a3      	ldrh	r3, [r4, #12]
 80169c8:	059b      	lsls	r3, r3, #22
 80169ca:	d4e1      	bmi.n	8016990 <_fflush_r+0xc>
 80169cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80169ce:	f7ff fa25 	bl	8015e1c <__retarget_lock_release_recursive>
 80169d2:	e7dd      	b.n	8016990 <_fflush_r+0xc>

080169d4 <__swhatbuf_r>:
 80169d4:	b570      	push	{r4, r5, r6, lr}
 80169d6:	460c      	mov	r4, r1
 80169d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169dc:	2900      	cmp	r1, #0
 80169de:	b096      	sub	sp, #88	@ 0x58
 80169e0:	4615      	mov	r5, r2
 80169e2:	461e      	mov	r6, r3
 80169e4:	da0d      	bge.n	8016a02 <__swhatbuf_r+0x2e>
 80169e6:	89a3      	ldrh	r3, [r4, #12]
 80169e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80169ec:	f04f 0100 	mov.w	r1, #0
 80169f0:	bf14      	ite	ne
 80169f2:	2340      	movne	r3, #64	@ 0x40
 80169f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80169f8:	2000      	movs	r0, #0
 80169fa:	6031      	str	r1, [r6, #0]
 80169fc:	602b      	str	r3, [r5, #0]
 80169fe:	b016      	add	sp, #88	@ 0x58
 8016a00:	bd70      	pop	{r4, r5, r6, pc}
 8016a02:	466a      	mov	r2, sp
 8016a04:	f000 f8a4 	bl	8016b50 <_fstat_r>
 8016a08:	2800      	cmp	r0, #0
 8016a0a:	dbec      	blt.n	80169e6 <__swhatbuf_r+0x12>
 8016a0c:	9901      	ldr	r1, [sp, #4]
 8016a0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016a12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016a16:	4259      	negs	r1, r3
 8016a18:	4159      	adcs	r1, r3
 8016a1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016a1e:	e7eb      	b.n	80169f8 <__swhatbuf_r+0x24>

08016a20 <__smakebuf_r>:
 8016a20:	898b      	ldrh	r3, [r1, #12]
 8016a22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016a24:	079d      	lsls	r5, r3, #30
 8016a26:	4606      	mov	r6, r0
 8016a28:	460c      	mov	r4, r1
 8016a2a:	d507      	bpl.n	8016a3c <__smakebuf_r+0x1c>
 8016a2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016a30:	6023      	str	r3, [r4, #0]
 8016a32:	6123      	str	r3, [r4, #16]
 8016a34:	2301      	movs	r3, #1
 8016a36:	6163      	str	r3, [r4, #20]
 8016a38:	b003      	add	sp, #12
 8016a3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a3c:	ab01      	add	r3, sp, #4
 8016a3e:	466a      	mov	r2, sp
 8016a40:	f7ff ffc8 	bl	80169d4 <__swhatbuf_r>
 8016a44:	9f00      	ldr	r7, [sp, #0]
 8016a46:	4605      	mov	r5, r0
 8016a48:	4639      	mov	r1, r7
 8016a4a:	4630      	mov	r0, r6
 8016a4c:	f7ff fa62 	bl	8015f14 <_malloc_r>
 8016a50:	b948      	cbnz	r0, 8016a66 <__smakebuf_r+0x46>
 8016a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a56:	059a      	lsls	r2, r3, #22
 8016a58:	d4ee      	bmi.n	8016a38 <__smakebuf_r+0x18>
 8016a5a:	f023 0303 	bic.w	r3, r3, #3
 8016a5e:	f043 0302 	orr.w	r3, r3, #2
 8016a62:	81a3      	strh	r3, [r4, #12]
 8016a64:	e7e2      	b.n	8016a2c <__smakebuf_r+0xc>
 8016a66:	89a3      	ldrh	r3, [r4, #12]
 8016a68:	6020      	str	r0, [r4, #0]
 8016a6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a6e:	81a3      	strh	r3, [r4, #12]
 8016a70:	9b01      	ldr	r3, [sp, #4]
 8016a72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016a76:	b15b      	cbz	r3, 8016a90 <__smakebuf_r+0x70>
 8016a78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	f000 f879 	bl	8016b74 <_isatty_r>
 8016a82:	b128      	cbz	r0, 8016a90 <__smakebuf_r+0x70>
 8016a84:	89a3      	ldrh	r3, [r4, #12]
 8016a86:	f023 0303 	bic.w	r3, r3, #3
 8016a8a:	f043 0301 	orr.w	r3, r3, #1
 8016a8e:	81a3      	strh	r3, [r4, #12]
 8016a90:	89a3      	ldrh	r3, [r4, #12]
 8016a92:	431d      	orrs	r5, r3
 8016a94:	81a5      	strh	r5, [r4, #12]
 8016a96:	e7cf      	b.n	8016a38 <__smakebuf_r+0x18>

08016a98 <_putc_r>:
 8016a98:	b570      	push	{r4, r5, r6, lr}
 8016a9a:	460d      	mov	r5, r1
 8016a9c:	4614      	mov	r4, r2
 8016a9e:	4606      	mov	r6, r0
 8016aa0:	b118      	cbz	r0, 8016aaa <_putc_r+0x12>
 8016aa2:	6a03      	ldr	r3, [r0, #32]
 8016aa4:	b90b      	cbnz	r3, 8016aaa <_putc_r+0x12>
 8016aa6:	f7fe ff59 	bl	801595c <__sinit>
 8016aaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016aac:	07d8      	lsls	r0, r3, #31
 8016aae:	d405      	bmi.n	8016abc <_putc_r+0x24>
 8016ab0:	89a3      	ldrh	r3, [r4, #12]
 8016ab2:	0599      	lsls	r1, r3, #22
 8016ab4:	d402      	bmi.n	8016abc <_putc_r+0x24>
 8016ab6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016ab8:	f7ff f9af 	bl	8015e1a <__retarget_lock_acquire_recursive>
 8016abc:	68a3      	ldr	r3, [r4, #8]
 8016abe:	3b01      	subs	r3, #1
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	60a3      	str	r3, [r4, #8]
 8016ac4:	da05      	bge.n	8016ad2 <_putc_r+0x3a>
 8016ac6:	69a2      	ldr	r2, [r4, #24]
 8016ac8:	4293      	cmp	r3, r2
 8016aca:	db12      	blt.n	8016af2 <_putc_r+0x5a>
 8016acc:	b2eb      	uxtb	r3, r5
 8016ace:	2b0a      	cmp	r3, #10
 8016ad0:	d00f      	beq.n	8016af2 <_putc_r+0x5a>
 8016ad2:	6823      	ldr	r3, [r4, #0]
 8016ad4:	1c5a      	adds	r2, r3, #1
 8016ad6:	6022      	str	r2, [r4, #0]
 8016ad8:	701d      	strb	r5, [r3, #0]
 8016ada:	b2ed      	uxtb	r5, r5
 8016adc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ade:	07da      	lsls	r2, r3, #31
 8016ae0:	d405      	bmi.n	8016aee <_putc_r+0x56>
 8016ae2:	89a3      	ldrh	r3, [r4, #12]
 8016ae4:	059b      	lsls	r3, r3, #22
 8016ae6:	d402      	bmi.n	8016aee <_putc_r+0x56>
 8016ae8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016aea:	f7ff f997 	bl	8015e1c <__retarget_lock_release_recursive>
 8016aee:	4628      	mov	r0, r5
 8016af0:	bd70      	pop	{r4, r5, r6, pc}
 8016af2:	4629      	mov	r1, r5
 8016af4:	4622      	mov	r2, r4
 8016af6:	4630      	mov	r0, r6
 8016af8:	f7ff f85a 	bl	8015bb0 <__swbuf_r>
 8016afc:	4605      	mov	r5, r0
 8016afe:	e7ed      	b.n	8016adc <_putc_r+0x44>

08016b00 <memmove>:
 8016b00:	4288      	cmp	r0, r1
 8016b02:	b510      	push	{r4, lr}
 8016b04:	eb01 0402 	add.w	r4, r1, r2
 8016b08:	d902      	bls.n	8016b10 <memmove+0x10>
 8016b0a:	4284      	cmp	r4, r0
 8016b0c:	4623      	mov	r3, r4
 8016b0e:	d807      	bhi.n	8016b20 <memmove+0x20>
 8016b10:	1e43      	subs	r3, r0, #1
 8016b12:	42a1      	cmp	r1, r4
 8016b14:	d008      	beq.n	8016b28 <memmove+0x28>
 8016b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016b1e:	e7f8      	b.n	8016b12 <memmove+0x12>
 8016b20:	4402      	add	r2, r0
 8016b22:	4601      	mov	r1, r0
 8016b24:	428a      	cmp	r2, r1
 8016b26:	d100      	bne.n	8016b2a <memmove+0x2a>
 8016b28:	bd10      	pop	{r4, pc}
 8016b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016b32:	e7f7      	b.n	8016b24 <memmove+0x24>

08016b34 <strchr>:
 8016b34:	b2c9      	uxtb	r1, r1
 8016b36:	4603      	mov	r3, r0
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b3e:	b112      	cbz	r2, 8016b46 <strchr+0x12>
 8016b40:	428a      	cmp	r2, r1
 8016b42:	d1f9      	bne.n	8016b38 <strchr+0x4>
 8016b44:	4770      	bx	lr
 8016b46:	2900      	cmp	r1, #0
 8016b48:	bf18      	it	ne
 8016b4a:	2000      	movne	r0, #0
 8016b4c:	4770      	bx	lr
	...

08016b50 <_fstat_r>:
 8016b50:	b538      	push	{r3, r4, r5, lr}
 8016b52:	4d07      	ldr	r5, [pc, #28]	@ (8016b70 <_fstat_r+0x20>)
 8016b54:	2300      	movs	r3, #0
 8016b56:	4604      	mov	r4, r0
 8016b58:	4608      	mov	r0, r1
 8016b5a:	4611      	mov	r1, r2
 8016b5c:	602b      	str	r3, [r5, #0]
 8016b5e:	f7ed faee 	bl	800413e <_fstat>
 8016b62:	1c43      	adds	r3, r0, #1
 8016b64:	d102      	bne.n	8016b6c <_fstat_r+0x1c>
 8016b66:	682b      	ldr	r3, [r5, #0]
 8016b68:	b103      	cbz	r3, 8016b6c <_fstat_r+0x1c>
 8016b6a:	6023      	str	r3, [r4, #0]
 8016b6c:	bd38      	pop	{r3, r4, r5, pc}
 8016b6e:	bf00      	nop
 8016b70:	20002e60 	.word	0x20002e60

08016b74 <_isatty_r>:
 8016b74:	b538      	push	{r3, r4, r5, lr}
 8016b76:	4d06      	ldr	r5, [pc, #24]	@ (8016b90 <_isatty_r+0x1c>)
 8016b78:	2300      	movs	r3, #0
 8016b7a:	4604      	mov	r4, r0
 8016b7c:	4608      	mov	r0, r1
 8016b7e:	602b      	str	r3, [r5, #0]
 8016b80:	f7ed faed 	bl	800415e <_isatty>
 8016b84:	1c43      	adds	r3, r0, #1
 8016b86:	d102      	bne.n	8016b8e <_isatty_r+0x1a>
 8016b88:	682b      	ldr	r3, [r5, #0]
 8016b8a:	b103      	cbz	r3, 8016b8e <_isatty_r+0x1a>
 8016b8c:	6023      	str	r3, [r4, #0]
 8016b8e:	bd38      	pop	{r3, r4, r5, pc}
 8016b90:	20002e60 	.word	0x20002e60

08016b94 <_sbrk_r>:
 8016b94:	b538      	push	{r3, r4, r5, lr}
 8016b96:	4d06      	ldr	r5, [pc, #24]	@ (8016bb0 <_sbrk_r+0x1c>)
 8016b98:	2300      	movs	r3, #0
 8016b9a:	4604      	mov	r4, r0
 8016b9c:	4608      	mov	r0, r1
 8016b9e:	602b      	str	r3, [r5, #0]
 8016ba0:	f7ed faf6 	bl	8004190 <_sbrk>
 8016ba4:	1c43      	adds	r3, r0, #1
 8016ba6:	d102      	bne.n	8016bae <_sbrk_r+0x1a>
 8016ba8:	682b      	ldr	r3, [r5, #0]
 8016baa:	b103      	cbz	r3, 8016bae <_sbrk_r+0x1a>
 8016bac:	6023      	str	r3, [r4, #0]
 8016bae:	bd38      	pop	{r3, r4, r5, pc}
 8016bb0:	20002e60 	.word	0x20002e60

08016bb4 <_realloc_r>:
 8016bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bb8:	4680      	mov	r8, r0
 8016bba:	4615      	mov	r5, r2
 8016bbc:	460c      	mov	r4, r1
 8016bbe:	b921      	cbnz	r1, 8016bca <_realloc_r+0x16>
 8016bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016bc4:	4611      	mov	r1, r2
 8016bc6:	f7ff b9a5 	b.w	8015f14 <_malloc_r>
 8016bca:	b92a      	cbnz	r2, 8016bd8 <_realloc_r+0x24>
 8016bcc:	f7ff f936 	bl	8015e3c <_free_r>
 8016bd0:	2400      	movs	r4, #0
 8016bd2:	4620      	mov	r0, r4
 8016bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016bd8:	f000 f81a 	bl	8016c10 <_malloc_usable_size_r>
 8016bdc:	4285      	cmp	r5, r0
 8016bde:	4606      	mov	r6, r0
 8016be0:	d802      	bhi.n	8016be8 <_realloc_r+0x34>
 8016be2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016be6:	d8f4      	bhi.n	8016bd2 <_realloc_r+0x1e>
 8016be8:	4629      	mov	r1, r5
 8016bea:	4640      	mov	r0, r8
 8016bec:	f7ff f992 	bl	8015f14 <_malloc_r>
 8016bf0:	4607      	mov	r7, r0
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	d0ec      	beq.n	8016bd0 <_realloc_r+0x1c>
 8016bf6:	42b5      	cmp	r5, r6
 8016bf8:	462a      	mov	r2, r5
 8016bfa:	4621      	mov	r1, r4
 8016bfc:	bf28      	it	cs
 8016bfe:	4632      	movcs	r2, r6
 8016c00:	f7ff f90d 	bl	8015e1e <memcpy>
 8016c04:	4621      	mov	r1, r4
 8016c06:	4640      	mov	r0, r8
 8016c08:	f7ff f918 	bl	8015e3c <_free_r>
 8016c0c:	463c      	mov	r4, r7
 8016c0e:	e7e0      	b.n	8016bd2 <_realloc_r+0x1e>

08016c10 <_malloc_usable_size_r>:
 8016c10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016c14:	1f18      	subs	r0, r3, #4
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	bfbc      	itt	lt
 8016c1a:	580b      	ldrlt	r3, [r1, r0]
 8016c1c:	18c0      	addlt	r0, r0, r3
 8016c1e:	4770      	bx	lr

08016c20 <_init>:
 8016c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c22:	bf00      	nop
 8016c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c26:	bc08      	pop	{r3}
 8016c28:	469e      	mov	lr, r3
 8016c2a:	4770      	bx	lr

08016c2c <_fini>:
 8016c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c2e:	bf00      	nop
 8016c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c32:	bc08      	pop	{r3}
 8016c34:	469e      	mov	lr, r3
 8016c36:	4770      	bx	lr
