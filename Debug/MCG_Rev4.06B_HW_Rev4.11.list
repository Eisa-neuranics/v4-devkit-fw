
MCG_Rev4.06B_HW_Rev4.11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016bbc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d24  08016cfc  08016cfc  00017cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018a20  08018a20  00019a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018a28  08018a28  00019a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08018a2c  08018a2c  00019a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000180  20000008  08018a30  0001a008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000188  08018bb0  0001a188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001c0  08018be5  0001a1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002a88  200001d4  08018bf6  0001a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20002c5c  08018bf6  0001ac5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001bf57  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001c000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001c000  2**2
                  ALLOC
 14 .MB_MEM2      00001d73  200301e4  08018bf6  0001a1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000482d8  00000000  00000000  0001bf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a18d  00000000  00000000  0006425f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d48  00000000  00000000  0006e3f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002eff  00000000  00000000  00072138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037120  00000000  00000000  00075037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005113c  00000000  00000000  000ac157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001118c8  00000000  00000000  000fd293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  0020eb5b  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010a4c  00000000  00000000  0020eba0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000073  00000000  00000000  0021f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08016ce4 	.word	0x08016ce4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08016ce4 	.word	0x08016ce4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <ADS1293_Init>:
//  DESCRIPTION:
//  Configures the assigned interface to function as a SPI port and
//  initializes it.
//------------------------------------------------------------------------------
void ADS1293_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	ENABLE_RSTB_ADS;			// Reset ADS
 8000a70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a78:	619a      	str	r2, [r3, #24]
	HAL_Delay (25);
 8000a7a:	2019      	movs	r0, #25
 8000a7c:	f001 fcc8 	bl	8002410 <HAL_Delay>
	DISABLE_RSTB_ADS;			// Release Reset pin
 8000a80:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000a84:	2201      	movs	r2, #1
 8000a86:	619a      	str	r2, [r3, #24]
	HAL_Delay (100);
 8000a88:	2064      	movs	r0, #100	@ 0x64
 8000a8a:	f001 fcc1 	bl	8002410 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_CONFIG_REG			, ADS_STOP );
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2000      	movs	r0, #0
 8000a92:	f000 f87f 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000a96:	2019      	movs	r0, #25
 8000a98:	f001 fcba 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_OSC_CN_REG			, 0x04 );				// Use external crystal and feed the internal oscillator's output to the digital.
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	2012      	movs	r0, #18
 8000aa0:	f000 f878 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aa4:	2019      	movs	r0, #25
 8000aa6:	f001 fcb3 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH1_CN_REG	, 0x0A );				// CH1 is routed to: N = IN1 , P = IN2
 8000aaa:	210a      	movs	r1, #10
 8000aac:	2001      	movs	r0, #1
 8000aae:	f000 f871 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f001 fcac 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH3_CN_REG	, 0x00 );				// CH3 is routed to: N = IN6 , P = IN5   0x2E	0x35
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f86a 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ac0:	2019      	movs	r0, #25
 8000ac2:	f001 fca5 	bl	8002410 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_RLD_CN_REG			, 0x08 );				// 0x04: RLD amplifier powered down, 0x03: Right-leg drive output connected to IN3
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	200c      	movs	r0, #12
 8000aca:	f000 f863 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000ace:	2019      	movs	r0, #25
 8000ad0:	f001 fc9e 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CMDET_EN_REG		, 0x03 );				// 0x04: RLD amplifier powered down
 8000ad4:	2103      	movs	r1, #3
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 f85c 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000adc:	2019      	movs	r0, #25
 8000ade:	f001 fc97 	bl	8002410 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_R2_RATE_REG		, R2_5 );				// Configures the R2 decimation rate as 5 for all channels.
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	2021      	movs	r0, #33	@ 0x21
 8000ae6:	f000 f855 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000aea:	2019      	movs	r0, #25
 8000aec:	f001 fc90 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE1_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 1. (853 sps, 175 Hz)
 8000af0:	2104      	movs	r1, #4
 8000af2:	2022      	movs	r0, #34	@ 0x22
 8000af4:	f000 f84e 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000af8:	2019      	movs	r0, #25
 8000afa:	f001 fc89 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE2_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000afe:	2104      	movs	r1, #4
 8000b00:	2023      	movs	r0, #35	@ 0x23
 8000b02:	f000 f847 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b06:	2019      	movs	r0, #25
 8000b08:	f001 fc82 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE3_REG		, R3_8 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	2024      	movs	r0, #36	@ 0x24
 8000b10:	f000 f840 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b14:	2019      	movs	r0, #25
 8000b16:	f001 fc7b 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_DRDYB_SRC_REG		, 0x08 );				// Data Ready Pin Source CH1 ECG 0x08
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	2027      	movs	r0, #39	@ 0x27
 8000b1e:	f000 f839 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b22:	2019      	movs	r0, #25
 8000b24:	f001 fc74 	bl	8002410 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CH_CNFG_REG		, 0x10 );				// Channel for Loop Read Back: CH1
 8000b28:	2110      	movs	r1, #16
 8000b2a:	202f      	movs	r0, #47	@ 0x2f
 8000b2c:	f000 f832 	bl	8000b94 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000b30:	2019      	movs	r0, #25
 8000b32:	f001 fc6d 	bl	8002410 <HAL_Delay>
	//ADS1293_SPIWriteReg( ADS1293_DIS_EFILTER_REG	, 0x05 );				// Channel for Loop Read Back: CH1 and CH2
	//HAL_Delay (25);

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <ADS1293_SPIReadReg>:
//  DESCRIPTION:
//  Reads a single configuration register at address "addr" and returns the
//  value read.
//------------------------------------------------------------------------------
uint8_t ADS1293_SPIReadReg(uint8_t addr)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af02      	add	r7, sp, #8
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]
	TxData[0] = addr | ADS1293_READ_BIT;											// register address
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b50:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00;
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	705a      	strb	r2, [r3, #1]

	ENABLE_CS; 												// CS enable
 8000b58:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b5c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b60:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2,100);								// Send it, receive it
 8000b62:	2364      	movs	r3, #100	@ 0x64
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2302      	movs	r3, #2
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b6a:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <ADS1293_SPIReadReg+0x4c>)
 8000b6c:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <ADS1293_SPIReadReg+0x54>)
 8000b6e:	f008 ff05 	bl	800997c <HAL_SPI_TransmitReceive>
	DISABLE_CS; 											// CS disable
 8000b72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000b76:	2202      	movs	r2, #2
 8000b78:	619a      	str	r2, [r3, #24]
#ifdef ADS_DEBUG_EN
	DIAG(">>> Read Reg. -> [ Address= %0X, Value= %0X ]\r\n", addr, RxData[1]);				// Send DBG
	HAL_Delay(50);
#endif

	return RxData[1];
 8000b7a:	4b04      	ldr	r3, [pc, #16]	@ (8000b8c <ADS1293_SPIReadReg+0x50>)
 8000b7c:	785b      	ldrb	r3, [r3, #1]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200001f0 	.word	0x200001f0
 8000b8c:	200001fc 	.word	0x200001fc
 8000b90:	20000d94 	.word	0x20000d94

08000b94 <ADS1293_SPIWriteReg>:
//
//  DESCRIPTION:
//  Writes "value" to a single configuration register at address "addr".
//------------------------------------------------------------------------------
void ADS1293_SPIWriteReg(uint8_t addr, uint8_t value)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	71fb      	strb	r3, [r7, #7]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	71bb      	strb	r3, [r7, #6]
	TxData[0] = addr & ADS1293_WRITE_BIT;											// register address
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bae:	701a      	strb	r2, [r3, #0]
	TxData[1] = value;
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	7053      	strb	r3, [r2, #1]

	ENABLE_CS; 												// CS enable
 8000bb6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bba:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bbe:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, TxData, 2,100);						// Send it
 8000bc0:	2364      	movs	r3, #100	@ 0x64
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	4905      	ldr	r1, [pc, #20]	@ (8000bdc <ADS1293_SPIWriteReg+0x48>)
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <ADS1293_SPIWriteReg+0x4c>)
 8000bc8:	f008 fd63 	bl	8009692 <HAL_SPI_Transmit>
	DISABLE_CS; 											// CS disable
 8000bcc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	619a      	str	r2, [r3, #24]
	#ifdef ADS_DEBUG_EN
		DIAG(">>>Write Reg. -> [ Address= %0X, Value= %0X ]\r\n",addr, value);				// Send DBG
		HAL_Delay(50);
	#endif

}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200001f0 	.word	0x200001f0
 8000be0:	20000d94 	.word	0x20000d94

08000be4 <ADS1293_SPIStreamReadReg>:
//  Data Loop Register read is extended "count+1" times where "count" is number of source bytes
//  enabled in CH_CNFG. Data read are deposited sequentially starting at address "buffer"
//  until "count" bytes have been read.
//------------------------------------------------------------------------------
void ADS1293_SPIStreamReadReg(uint8_t *buffer, uint8_t count)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af02      	add	r7, sp, #8
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
	TxData[0] = ADS1293_READ_BIT | ADS1293_DATA_LOOP_REG;											// register address
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf2:	22d0      	movs	r2, #208	@ 0xd0
 8000bf4:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00; TxData[2] = 0x00; TxData[3] = 0x00; TxData[4] = 0x00; TxData[5] = 0x00; TxData[6] = 0x00; TxData[7] = 0x00; TxData[8] = 0x00; TxData[9] = 0x00;	// write dummy data to read
 8000bf6:	4b19      	ldr	r3, [pc, #100]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	705a      	strb	r2, [r3, #1]
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	709a      	strb	r2, [r3, #2]
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	70da      	strb	r2, [r3, #3]
 8000c08:	4b14      	ldr	r3, [pc, #80]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	711a      	strb	r2, [r3, #4]
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	715a      	strb	r2, [r3, #5]
 8000c14:	4b11      	ldr	r3, [pc, #68]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	719a      	strb	r2, [r3, #6]
 8000c1a:	4b10      	ldr	r3, [pc, #64]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	71da      	strb	r2, [r3, #7]
 8000c20:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	721a      	strb	r2, [r3, #8]
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	725a      	strb	r2, [r3, #9]

	ENABLE_CS; 																						// CS enable
 8000c2c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c30:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000c34:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, (uint8_t *)buffer, ( count + 1 ), 100);					// Send it, receive it
 8000c36:	78fb      	ldrb	r3, [r7, #3]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	2264      	movs	r2, #100	@ 0x64
 8000c40:	9200      	str	r2, [sp, #0]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4905      	ldr	r1, [pc, #20]	@ (8000c5c <ADS1293_SPIStreamReadReg+0x78>)
 8000c46:	4806      	ldr	r0, [pc, #24]	@ (8000c60 <ADS1293_SPIStreamReadReg+0x7c>)
 8000c48:	f008 fe98 	bl	800997c <HAL_SPI_TransmitReceive>
	DISABLE_CS;
 8000c4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000c50:	2202      	movs	r2, #2
 8000c52:	619a      	str	r2, [r3, #24]

	#ifdef ADS_DEBUG_EN
		DIAG(">>> Stream read. -> [ Address= %0X, Value= %0X - %0X - %0X - %0X ]\r\n", ADS1293_DATA_LOOP_REG, buffer[0], buffer[1], buffer[2], buffer[3] );				// Send DBG
		HAL_Delay(50);
	#endif
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001f0 	.word	0x200001f0
 8000c60:	20000d94 	.word	0x20000d94

08000c64 <AFE_Init>:
 uint8_t SpiTxData[10], Temp_buff_count, Output_buff_count;
 //------------------------------------------------------------------------------------------//
 //                                        Initialisation                                    //
 //------------------------------------------------------------------------------------------//
 void AFE_Init (void)
 {
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0



 	DIAG ("\t\tAFE initialised\r\n");
 8000c68:	4803      	ldr	r0, [pc, #12]	@ (8000c78 <AFE_Init+0x14>)
 8000c6a:	f001 fc5d 	bl	8002528 <DIAG>
 	HAL_Delay (10);
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f001 fbce 	bl	8002410 <HAL_Delay>
 }
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	08016cfc 	.word	0x08016cfc
 8000c7c:	00000000 	.word	0x00000000

08000c80 <AFE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void AFE_Control ( void )
 {
 8000c80:	b598      	push	{r3, r4, r7, lr}
 8000c82:	af00      	add	r7, sp, #0
 	  switch (eAFE_STATE)
 8000c84:	4b9e      	ldr	r3, [pc, #632]	@ (8000f00 <AFE_Control+0x280>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b07      	cmp	r3, #7
 8000c8a:	d813      	bhi.n	8000cb4 <AFE_Control+0x34>
 8000c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000c94 <AFE_Control+0x14>)
 8000c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c92:	bf00      	nop
 8000c94:	08000cbd 	.word	0x08000cbd
 8000c98:	08000ce3 	.word	0x08000ce3
 8000c9c:	08000cef 	.word	0x08000cef
 8000ca0:	08000d15 	.word	0x08000d15
 8000ca4:	08000d39 	.word	0x08000d39
 8000ca8:	08000d67 	.word	0x08000d67
 8000cac:	08000fc5 	.word	0x08000fc5
 8000cb0:	08000fcd 	.word	0x08000fcd
 	  	  default:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE STATE_DEFAULT\r\n");
 		  	  #endif

 	  	    eAFE_STATE = AFE_STATE_RESET;
 8000cb4:	4b92      	ldr	r3, [pc, #584]	@ (8000f00 <AFE_Control+0x280>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 	  		break;
 8000cba:	e18b      	b.n	8000fd4 <AFE_Control+0x354>

 	  	  case AFE_STATE_RESET:
 			  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_RESET\r\n");
 			  #endif
 	  		  ENABLE_RSTB_ADS; 											// Pull RESET low
 8000cbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000cc4:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(5); 											// Wait for a brief period
 8000cc6:	2005      	movs	r0, #5
 8000cc8:	f001 fba2 	bl	8002410 <HAL_Delay>
 	  		  DISABLE_RSTB_ADS; 										// Release RESET
 8000ccc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(25); 											// Wait for a brief period
 8000cd4:	2019      	movs	r0, #25
 8000cd6:	f001 fb9b 	bl	8002410 <HAL_Delay>

 	  	      eAFE_STATE = AFE_STATE_INIT;
 8000cda:	4b89      	ldr	r3, [pc, #548]	@ (8000f00 <AFE_Control+0x280>)
 8000cdc:	2201      	movs	r2, #1
 8000cde:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ce0:	e178      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_INIT:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_INIT\r\n");
 			  #endif
 		  	  ADS1293_Init();
 8000ce2:	f7ff fec3 	bl	8000a6c <ADS1293_Init>

 		  	  eAFE_STATE = AFE_STATE_ID;
 8000ce6:	4b86      	ldr	r3, [pc, #536]	@ (8000f00 <AFE_Control+0x280>)
 8000ce8:	2202      	movs	r2, #2
 8000cea:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000cec:	e172      	b.n	8000fd4 <AFE_Control+0x354>
 	  	  case AFE_STATE_ID:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_READ_DEVICE_ID\r\n");
 			  #endif

 	  		  u8temp = ADS1293_SPIReadReg(ADS1293_REVID_REG);
 8000cee:	2040      	movs	r0, #64	@ 0x40
 8000cf0:	f7ff ff24 	bl	8000b3c <ADS1293_SPIReadReg>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	4b82      	ldr	r3, [pc, #520]	@ (8000f04 <AFE_Control+0x284>)
 8000cfa:	701a      	strb	r2, [r3, #0]
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> DEVICE_ID = [%X] \r\n", u8temp );
 	  		  	  HAL_Delay(1000);
        	  #endif

 	  		  if ( u8temp == ADS1293_ID )
 8000cfc:	4b81      	ldr	r3, [pc, #516]	@ (8000f04 <AFE_Control+0x284>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d103      	bne.n	8000d0c <AFE_Control+0x8c>
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_START ;		//ADS_STATE_START ADS_STATE_ID
 8000d04:	4b7e      	ldr	r3, [pc, #504]	@ (8000f00 <AFE_Control+0x280>)
 8000d06:	2203      	movs	r2, #3
 8000d08:	701a      	strb	r2, [r3, #0]
 	  		  else
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 	  		  }

 	  		  break;
 8000d0a:	e163      	b.n	8000fd4 <AFE_Control+0x354>
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 8000d0c:	4b7c      	ldr	r3, [pc, #496]	@ (8000f00 <AFE_Control+0x280>)
 8000d0e:	2207      	movs	r2, #7
 8000d10:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d12:	e15f      	b.n	8000fd4 <AFE_Control+0x354>
 	  	  case AFE_STATE_START:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> AFE_START_CONVERSION\r\n");
 			  #endif

 		  	  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8000d14:	2100      	movs	r1, #0
 8000d16:	2000      	movs	r0, #0
 8000d18:	f7ff ff3c 	bl	8000b94 <ADS1293_SPIWriteReg>
 		  	  HAL_Delay(50);
 8000d1c:	2032      	movs	r0, #50	@ 0x32
 8000d1e:	f001 fb77 	bl	8002410 <HAL_Delay>
 	  		  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8000d22:	2101      	movs	r1, #1
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff ff35 	bl	8000b94 <ADS1293_SPIWriteReg>
 	  		  HAL_Delay(50);
 8000d2a:	2032      	movs	r0, #50	@ 0x32
 8000d2c:	f001 fb70 	bl	8002410 <HAL_Delay>

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d30:	4b73      	ldr	r3, [pc, #460]	@ (8000f00 <AFE_Control+0x280>)
 8000d32:	2204      	movs	r2, #4
 8000d34:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d36:	e14d      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_READ_DATA:


 	  		  // Check if DRDY pin is triggered, then start reading data.
 	  		  if (ADS.DRDY == true)
 8000d38:	4b73      	ldr	r3, [pc, #460]	@ (8000f08 <AFE_Control+0x288>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10d      	bne.n	8000d5e <AFE_Control+0xde>
 	  		  {
				 #ifdef AFE_DEBUG_EN
						  DIAG(">>> AFE_READ_DATA\r\n");
				 #endif
				// Each time we sample from AFE, sample forom IMU too
 	  			  tsTimer.bImuFlag = true;
 8000d42:	4b72      	ldr	r3, [pc, #456]	@ (8000f0c <AFE_Control+0x28c>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	70da      	strb	r2, [r3, #3]

 	  			  ADS.DRDY = false;
 8000d48:	4b6f      	ldr	r3, [pc, #444]	@ (8000f08 <AFE_Control+0x288>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 	  			  ADS1293_SPIStreamReadReg( SpiRxData, 3 );
 8000d4e:	2103      	movs	r1, #3
 8000d50:	486f      	ldr	r0, [pc, #444]	@ (8000f10 <AFE_Control+0x290>)
 8000d52:	f7ff ff47 	bl	8000be4 <ADS1293_SPIStreamReadReg>

 	  			  eAFE_STATE = AFE_STATE_PROCESS_DATA;
 8000d56:	4b6a      	ldr	r3, [pc, #424]	@ (8000f00 <AFE_Control+0x280>)
 8000d58:	2205      	movs	r2, #5
 8000d5a:	701a      	strb	r2, [r3, #0]
 	  		  }
 	  		  else
 	  		  {
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 	  		  }
 	  		  break;
 8000d5c:	e13a      	b.n	8000fd4 <AFE_Control+0x354>
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 8000d5e:	4b68      	ldr	r3, [pc, #416]	@ (8000f00 <AFE_Control+0x280>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000d64:	e136      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_PROCESS_DATA:

 	  		  MCG.Input = (int32_t)( (SpiRxData[1] << 16) | (uint16_t)(SpiRxData[2] << 8) | SpiRxData[3]);
 8000d66:	4b6a      	ldr	r3, [pc, #424]	@ (8000f10 <AFE_Control+0x290>)
 8000d68:	785b      	ldrb	r3, [r3, #1]
 8000d6a:	041b      	lsls	r3, r3, #16
 8000d6c:	4a68      	ldr	r2, [pc, #416]	@ (8000f10 <AFE_Control+0x290>)
 8000d6e:	7892      	ldrb	r2, [r2, #2]
 8000d70:	0212      	lsls	r2, r2, #8
 8000d72:	b292      	uxth	r2, r2
 8000d74:	4313      	orrs	r3, r2
 8000d76:	4a66      	ldr	r2, [pc, #408]	@ (8000f10 <AFE_Control+0x290>)
 8000d78:	78d2      	ldrb	r2, [r2, #3]
 8000d7a:	4313      	orrs	r3, r2
 8000d7c:	4a65      	ldr	r2, [pc, #404]	@ (8000f14 <AFE_Control+0x294>)
 8000d7e:	f8c2 3168 	str.w	r3, [r2, #360]	@ 0x168
 	  		  MCG.Vin = ( 2.4 * ( ( (2.0 * (double)MCG.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8000d82:	4b64      	ldr	r3, [pc, #400]	@ (8000f14 <AFE_Control+0x294>)
 8000d84:	f8d3 3168 	ldr.w	r3, [r3, #360]	@ 0x168
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff fba3 	bl	80004d4 <__aeabi_i2d>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	460b      	mov	r3, r1
 8000d92:	f7ff fa53 	bl	800023c <__adddf3>
 8000d96:	4602      	mov	r2, r0
 8000d98:	460b      	mov	r3, r1
 8000d9a:	4610      	mov	r0, r2
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	a354      	add	r3, pc, #336	@ (adr r3, 8000ef0 <AFE_Control+0x270>)
 8000da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da4:	f7ff fd2a 	bl	80007fc <__aeabi_ddiv>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 0200 	mov.w	r2, #0
 8000db4:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <AFE_Control+0x298>)
 8000db6:	f7ff fa3f 	bl	8000238 <__aeabi_dsub>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4610      	mov	r0, r2
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	a34d      	add	r3, pc, #308	@ (adr r3, 8000ef8 <AFE_Control+0x278>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fbee 	bl	80005a8 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b50      	ldr	r3, [pc, #320]	@ (8000f1c <AFE_Control+0x29c>)
 8000dda:	f7ff fd0f 	bl	80007fc <__aeabi_ddiv>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fdf1 	bl	80009cc <__aeabi_d2f>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a49      	ldr	r2, [pc, #292]	@ (8000f14 <AFE_Control+0x294>)
 8000dee:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208
 	  		  MCG.Raw[Temp_buff_count] = (int)(MCG.Vin * 1000000);
 8000df2:	4b48      	ldr	r3, [pc, #288]	@ (8000f14 <AFE_Control+0x294>)
 8000df4:	edd3 7a82 	vldr	s15, [r3, #520]	@ 0x208
 8000df8:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000f20 <AFE_Control+0x2a0>
 8000dfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e00:	4b48      	ldr	r3, [pc, #288]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	461a      	mov	r2, r3
 8000e06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e0a:	ee17 1a90 	vmov	r1, s15
 8000e0e:	4b41      	ldr	r3, [pc, #260]	@ (8000f14 <AFE_Control+0x294>)
 8000e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

// 	  		  MCG.Filtered [Temp_buff_count] = IIR_MCG_BPF_50_60Hz (Temp_buff_count);
 	  		  MCG.Filtered [Temp_buff_count] = IIR_MCG (Temp_buff_count);
 8000e14:	4b43      	ldr	r3, [pc, #268]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4a42      	ldr	r2, [pc, #264]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e1a:	7812      	ldrb	r2, [r2, #0]
 8000e1c:	4614      	mov	r4, r2
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f000 fab8 	bl	8001394 <IIR_MCG>
 8000e24:	4602      	mov	r2, r0
 8000e26:	493b      	ldr	r1, [pc, #236]	@ (8000f14 <AFE_Control+0x294>)
 8000e28:	f104 030e 	add.w	r3, r4, #14
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	440b      	add	r3, r1
 8000e30:	605a      	str	r2, [r3, #4]

 	  		  MCG.u8TxData[u8McgDataLen++] = ( (  		 MCG.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 8000e32:	4b3c      	ldr	r3, [pc, #240]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	4a37      	ldr	r2, [pc, #220]	@ (8000f14 <AFE_Control+0x294>)
 8000e38:	330e      	adds	r3, #14
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	4413      	add	r3, r2
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	1218      	asrs	r0, r3, #8
 8000e42:	4b39      	ldr	r3, [pc, #228]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	1c5a      	adds	r2, r3, #1
 8000e48:	b2d1      	uxtb	r1, r2
 8000e4a:	4a37      	ldr	r2, [pc, #220]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e4c:	7011      	strb	r1, [r2, #0]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	b2c2      	uxtb	r2, r0
 8000e52:	4b30      	ldr	r3, [pc, #192]	@ (8000f14 <AFE_Control+0x294>)
 8000e54:	440b      	add	r3, r1
 8000e56:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c
 	  		  MCG.u8TxData[u8McgDataLen++] = ( (uint8_t) MCG.Filtered [Temp_buff_count] & 0x00FF );
 8000e5a:	4b32      	ldr	r3, [pc, #200]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8000f14 <AFE_Control+0x294>)
 8000e60:	330e      	adds	r3, #14
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	6858      	ldr	r0, [r3, #4]
 8000e68:	4b2f      	ldr	r3, [pc, #188]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	b2d1      	uxtb	r1, r2
 8000e70:	4a2d      	ldr	r2, [pc, #180]	@ (8000f28 <AFE_Control+0x2a8>)
 8000e72:	7011      	strb	r1, [r2, #0]
 8000e74:	4619      	mov	r1, r3
 8000e76:	b2c2      	uxtb	r2, r0
 8000e78:	4b26      	ldr	r3, [pc, #152]	@ (8000f14 <AFE_Control+0x294>)
 8000e7a:	440b      	add	r3, r1
 8000e7c:	f883 216c 	strb.w	r2, [r3, #364]	@ 0x16c

 			  #ifdef DATA_DEBUG_EN
 				  if (tsCmd.ECG == true && tsCmd.MCG == true)
 8000e80:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <AFE_Control+0x2ac>)
 8000e82:	7e1b      	ldrb	r3, [r3, #24]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d11a      	bne.n	8000ebe <AFE_Control+0x23e>
 8000e88:	4b28      	ldr	r3, [pc, #160]	@ (8000f2c <AFE_Control+0x2ac>)
 8000e8a:	7edb      	ldrb	r3, [r3, #27]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d116      	bne.n	8000ebe <AFE_Control+0x23e>
 				  {
 					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000e90:	4b24      	ldr	r3, [pc, #144]	@ (8000f24 <AFE_Control+0x2a4>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4a1f      	ldr	r2, [pc, #124]	@ (8000f14 <AFE_Control+0x294>)
 8000e96:	330e      	adds	r3, #14
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	4413      	add	r3, r2
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <AFE_Control+0x2b0>)
 8000ea2:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <AFE_Control+0x2a4>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4a1a      	ldr	r2, [pc, #104]	@ (8000f14 <AFE_Control+0x294>)
 8000eac:	330e      	adds	r3, #14
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <AFE_Control+0x2b0>)
 8000eb8:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000ebc:	e058      	b.n	8000f70 <AFE_Control+0x2f0>
 				  }
 				  else if (tsCmd.ECG == true && tsCmd.MCG == false )
 8000ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <AFE_Control+0x2ac>)
 8000ec0:	7e1b      	ldrb	r3, [r3, #24]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d136      	bne.n	8000f34 <AFE_Control+0x2b4>
 8000ec6:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <AFE_Control+0x2ac>)
 8000ec8:	7edb      	ldrb	r3, [r3, #27]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d132      	bne.n	8000f34 <AFE_Control+0x2b4>
 				  {
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000ece:	4b15      	ldr	r3, [pc, #84]	@ (8000f24 <AFE_Control+0x2a4>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4a10      	ldr	r2, [pc, #64]	@ (8000f14 <AFE_Control+0x294>)
 8000ed4:	330e      	adds	r3, #14
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	4413      	add	r3, r2
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	b21a      	sxth	r2, r3
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <AFE_Control+0x2b0>)
 8000ee0:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxMCG = 0x00;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <AFE_Control+0x2b0>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 8000eec:	e040      	b.n	8000f70 <AFE_Control+0x2f0>
 8000eee:	bf00      	nop
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	41686a00 	.word	0x41686a00
 8000ef8:	33333333 	.word	0x33333333
 8000efc:	40033333 	.word	0x40033333
 8000f00:	20000206 	.word	0x20000206
 8000f04:	2000064a 	.word	0x2000064a
 8000f08:	20000208 	.word	0x20000208
 8000f0c:	20000f3c 	.word	0x20000f3c
 8000f10:	2000064c 	.word	0x2000064c
 8000f14:	2000020c 	.word	0x2000020c
 8000f18:	3ff00000 	.word	0x3ff00000
 8000f1c:	400c0000 	.word	0x400c0000
 8000f20:	49742400 	.word	0x49742400
 8000f24:	20000656 	.word	0x20000656
 8000f28:	2000064b 	.word	0x2000064b
 8000f2c:	20000ca0 	.word	0x20000ca0
 8000f30:	20000990 	.word	0x20000990
 				  }

 				  else if (tsCmd.ECG == false && tsCmd.MCG == true )
 8000f34:	4b28      	ldr	r3, [pc, #160]	@ (8000fd8 <AFE_Control+0x358>)
 8000f36:	7e1b      	ldrb	r3, [r3, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d119      	bne.n	8000f70 <AFE_Control+0x2f0>
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <AFE_Control+0x358>)
 8000f3e:	7edb      	ldrb	r3, [r3, #27]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d115      	bne.n	8000f70 <AFE_Control+0x2f0>
 				  {
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000f44:	4b25      	ldr	r3, [pc, #148]	@ (8000fdc <AFE_Control+0x35c>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4a25      	ldr	r2, [pc, #148]	@ (8000fe0 <AFE_Control+0x360>)
 8000f4a:	330e      	adds	r3, #14
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	b21a      	sxth	r2, r3
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <AFE_Control+0x364>)
 8000f56:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxMCG = MCG.Filtered [Temp_buff_count];
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <AFE_Control+0x35c>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4a20      	ldr	r2, [pc, #128]	@ (8000fe0 <AFE_Control+0x360>)
 8000f60:	330e      	adds	r3, #14
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	b21a      	sxth	r2, r3
 8000f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fe4 <AFE_Control+0x364>)
 8000f6c:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 				  }
 				 tsDebug.bReleaseAFEData= true;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <AFE_Control+0x364>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264
 			  #endif


 	  		  Temp_buff_count++;		if (Temp_buff_count  ==  15 ) 	{ Temp_buff_count = 0; }
 8000f78:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <AFE_Control+0x35c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b16      	ldr	r3, [pc, #88]	@ (8000fdc <AFE_Control+0x35c>)
 8000f82:	701a      	strb	r2, [r3, #0]
 8000f84:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <AFE_Control+0x35c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b0f      	cmp	r3, #15
 8000f8a:	d102      	bne.n	8000f92 <AFE_Control+0x312>
 8000f8c:	4b13      	ldr	r3, [pc, #76]	@ (8000fdc <AFE_Control+0x35c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]

 	  		if ( u8McgDataLen >=  BLE_Data_Length )
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <AFE_Control+0x368>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f98:	d910      	bls.n	8000fbc <AFE_Control+0x33c>
 	  		{
 	  			memcpy ( tsStreamSCG.u8McgTxCpy, MCG.u8TxData, 64 );
 8000f9a:	2240      	movs	r2, #64	@ 0x40
 8000f9c:	4913      	ldr	r1, [pc, #76]	@ (8000fec <AFE_Control+0x36c>)
 8000f9e:	4814      	ldr	r0, [pc, #80]	@ (8000ff0 <AFE_Control+0x370>)
 8000fa0:	f014 ff9f 	bl	8015ee2 <memcpy>

 	  			// Copy MCG data length
 	  			MCG.u8TxLen = u8McgDataLen;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	@ (8000fe8 <AFE_Control+0x368>)
 8000fa6:	781a      	ldrb	r2, [r3, #0]
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <AFE_Control+0x360>)
 8000faa:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202

 	  			// Enable BLE data transmission
 	  			tsStreamSCG.bReleaseScgData = true;
 8000fae:	4b11      	ldr	r3, [pc, #68]	@ (8000ff4 <AFE_Control+0x374>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
 	  			u8McgDataLen = 0;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <AFE_Control+0x368>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
 	  		}

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff8 <AFE_Control+0x378>)
 8000fbe:	2204      	movs	r2, #4
 8000fc0:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fc2:	e007      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_IDLE:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_IDLE\r\n");
 			  #endif
 	  		  eAFE_STATE = AFE_STATE_IDLE;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff8 <AFE_Control+0x378>)
 8000fc6:	2206      	movs	r2, #6
 8000fc8:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fca:	e003      	b.n	8000fd4 <AFE_Control+0x354>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_ERROR:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_ADS_ERROR\r\n");
      	 	  #endif
 	  		  eAFE_STATE = AFE_STATE_RESET;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff8 <AFE_Control+0x378>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000fd2:	bf00      	nop
 	  	  }
 }
 8000fd4:	bf00      	nop
 8000fd6:	bd98      	pop	{r3, r4, r7, pc}
 8000fd8:	20000ca0 	.word	0x20000ca0
 8000fdc:	20000656 	.word	0x20000656
 8000fe0:	2000020c 	.word	0x2000020c
 8000fe4:	20000990 	.word	0x20000990
 8000fe8:	2000064b 	.word	0x2000064b
 8000fec:	20000378 	.word	0x20000378
 8000ff0:	20000526 	.word	0x20000526
 8000ff4:	20000420 	.word	0x20000420
 8000ff8:	20000206 	.word	0x20000206

08000ffc <MCG_StreamDataPack>:
 //***********************************************************************************************
 //***********************************************************************************************

 void MCG_StreamDataPack ( uint8_t *ecgData, uint8_t ecgDataLen, uint8_t *mcgData, uint8_t mcgDataLen, uint8_t *outputString  )
 {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	461a      	mov	r2, r3
 8001008:	460b      	mov	r3, r1
 800100a:	72fb      	strb	r3, [r7, #11]
 800100c:	4613      	mov	r3, r2
 800100e:	72bb      	strb	r3, [r7, #10]
 	uint8_t index=0;
 8001010:	2300      	movs	r3, #0
 8001012:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamSCG.u8TxData, 0, sizeof(tsStreamSCG.u8TxData) );
 8001014:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001018:	2100      	movs	r1, #0
 800101a:	4845      	ldr	r0, [pc, #276]	@ (8001130 <MCG_StreamDataPack+0x134>)
 800101c:	f014 febe 	bl	8015d9c <memset>
 	outputString [index++] = ',';
 	memcpy ( outputString + index, mcgData, mcgDataLen );
#endif

#ifndef IMU_ENABLE
	outputString [index++] = 'S';
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	1c5a      	adds	r2, r3, #1
 8001024:	75fa      	strb	r2, [r7, #23]
 8001026:	461a      	mov	r2, r3
 8001028:	6a3b      	ldr	r3, [r7, #32]
 800102a:	4413      	add	r3, r2
 800102c:	2253      	movs	r2, #83	@ 0x53
 800102e:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'N';
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	75fa      	strb	r2, [r7, #23]
 8001036:	461a      	mov	r2, r3
 8001038:	6a3b      	ldr	r3, [r7, #32]
 800103a:	4413      	add	r3, r2
 800103c:	224e      	movs	r2, #78	@ 0x4e
 800103e:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 8001040:	7dfb      	ldrb	r3, [r7, #23]
 8001042:	1c5a      	adds	r2, r3, #1
 8001044:	75fa      	strb	r2, [r7, #23]
 8001046:	461a      	mov	r2, r3
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	4413      	add	r3, r2
 800104c:	222c      	movs	r2, #44	@ 0x2c
 800104e:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'R';
 8001050:	7dfb      	ldrb	r3, [r7, #23]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	75fa      	strb	r2, [r7, #23]
 8001056:	461a      	mov	r2, r3
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	4413      	add	r3, r2
 800105c:	2252      	movs	r2, #82	@ 0x52
 800105e:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'E';
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	75fa      	strb	r2, [r7, #23]
 8001066:	461a      	mov	r2, r3
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	4413      	add	r3, r2
 800106c:	2245      	movs	r2, #69	@ 0x45
 800106e:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	1c5a      	adds	r2, r3, #1
 8001074:	75fa      	strb	r2, [r7, #23]
 8001076:	461a      	mov	r2, r3
 8001078:	6a3b      	ldr	r3, [r7, #32]
 800107a:	4413      	add	r3, r2
 800107c:	222c      	movs	r2, #44	@ 0x2c
 800107e:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ecgDataLen;
 8001080:	7dfb      	ldrb	r3, [r7, #23]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	75fa      	strb	r2, [r7, #23]
 8001086:	461a      	mov	r2, r3
 8001088:	6a3b      	ldr	r3, [r7, #32]
 800108a:	4413      	add	r3, r2
 800108c:	7afa      	ldrb	r2, [r7, #11]
 800108e:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 8001090:	7dfb      	ldrb	r3, [r7, #23]
 8001092:	1c5a      	adds	r2, r3, #1
 8001094:	75fa      	strb	r2, [r7, #23]
 8001096:	461a      	mov	r2, r3
 8001098:	6a3b      	ldr	r3, [r7, #32]
 800109a:	4413      	add	r3, r2
 800109c:	222c      	movs	r2, #44	@ 0x2c
 800109e:	701a      	strb	r2, [r3, #0]

	memcpy ( outputString + index, ecgData, ecgDataLen );
 80010a0:	7dfb      	ldrb	r3, [r7, #23]
 80010a2:	6a3a      	ldr	r2, [r7, #32]
 80010a4:	4413      	add	r3, r2
 80010a6:	7afa      	ldrb	r2, [r7, #11]
 80010a8:	68f9      	ldr	r1, [r7, #12]
 80010aa:	4618      	mov	r0, r3
 80010ac:	f014 ff19 	bl	8015ee2 <memcpy>

	index += ecgDataLen;
 80010b0:	7dfa      	ldrb	r2, [r7, #23]
 80010b2:	7afb      	ldrb	r3, [r7, #11]
 80010b4:	4413      	add	r3, r2
 80010b6:	75fb      	strb	r3, [r7, #23]

	outputString [index++] = ',';
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	75fa      	strb	r2, [r7, #23]
 80010be:	461a      	mov	r2, r3
 80010c0:	6a3b      	ldr	r3, [r7, #32]
 80010c2:	4413      	add	r3, r2
 80010c4:	222c      	movs	r2, #44	@ 0x2c
 80010c6:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'R';
 80010c8:	7dfb      	ldrb	r3, [r7, #23]
 80010ca:	1c5a      	adds	r2, r3, #1
 80010cc:	75fa      	strb	r2, [r7, #23]
 80010ce:	461a      	mov	r2, r3
 80010d0:	6a3b      	ldr	r3, [r7, #32]
 80010d2:	4413      	add	r3, r2
 80010d4:	2252      	movs	r2, #82	@ 0x52
 80010d6:	701a      	strb	r2, [r3, #0]
	outputString [index++] = 'M';
 80010d8:	7dfb      	ldrb	r3, [r7, #23]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	75fa      	strb	r2, [r7, #23]
 80010de:	461a      	mov	r2, r3
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	4413      	add	r3, r2
 80010e4:	224d      	movs	r2, #77	@ 0x4d
 80010e6:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 80010e8:	7dfb      	ldrb	r3, [r7, #23]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	75fa      	strb	r2, [r7, #23]
 80010ee:	461a      	mov	r2, r3
 80010f0:	6a3b      	ldr	r3, [r7, #32]
 80010f2:	4413      	add	r3, r2
 80010f4:	222c      	movs	r2, #44	@ 0x2c
 80010f6:	701a      	strb	r2, [r3, #0]
	outputString [index++] = mcgDataLen;
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	75fa      	strb	r2, [r7, #23]
 80010fe:	461a      	mov	r2, r3
 8001100:	6a3b      	ldr	r3, [r7, #32]
 8001102:	4413      	add	r3, r2
 8001104:	7aba      	ldrb	r2, [r7, #10]
 8001106:	701a      	strb	r2, [r3, #0]
	outputString [index++] = ',';
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	75fa      	strb	r2, [r7, #23]
 800110e:	461a      	mov	r2, r3
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	4413      	add	r3, r2
 8001114:	222c      	movs	r2, #44	@ 0x2c
 8001116:	701a      	strb	r2, [r3, #0]

	memcpy ( outputString + index, mcgData, mcgDataLen );
 8001118:	7dfb      	ldrb	r3, [r7, #23]
 800111a:	6a3a      	ldr	r2, [r7, #32]
 800111c:	4413      	add	r3, r2
 800111e:	7aba      	ldrb	r2, [r7, #10]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4618      	mov	r0, r3
 8001124:	f014 fedd 	bl	8015ee2 <memcpy>
#endif

 }
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000426 	.word	0x20000426

08001134 <BLE_Init>:
 uint16_t u16temp;
//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
 void BLE_Init (void)
 {
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

	 tsBle.App.AccelNotification = false;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <BLE_Init+0x28>)
 800113a:	2200      	movs	r2, #0
 800113c:	71da      	strb	r2, [r3, #7]
	 tsBle.App.GyroNotification = false;
 800113e:	4b07      	ldr	r3, [pc, #28]	@ (800115c <BLE_Init+0x28>)
 8001140:	2200      	movs	r2, #0
 8001142:	721a      	strb	r2, [r3, #8]
	 tsBle.App.McgNotification = false;
 8001144:	4b05      	ldr	r3, [pc, #20]	@ (800115c <BLE_Init+0x28>)
 8001146:	2200      	movs	r2, #0
 8001148:	719a      	strb	r2, [r3, #6]

	 DIAG ("\t\tBLE initialised\r\n");
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <BLE_Init+0x2c>)
 800114c:	f001 f9ec 	bl	8002528 <DIAG>
	 HAL_Delay (10);
 8001150:	200a      	movs	r0, #10
 8001152:	f001 f95d 	bl	8002410 <HAL_Delay>
 }
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000fe0 	.word	0x20000fe0
 8001160:	08016d10 	.word	0x08016d10

08001164 <BLE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void BLE_Control ( void )
 {
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af02      	add	r7, sp, #8

	 switch( eBLE_STATE )
 800116a:	4b7e      	ldr	r3, [pc, #504]	@ (8001364 <BLE_Control+0x200>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b0c      	cmp	r3, #12
 8001170:	f200 80f1 	bhi.w	8001356 <BLE_Control+0x1f2>
 8001174:	a201      	add	r2, pc, #4	@ (adr r2, 800117c <BLE_Control+0x18>)
 8001176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800117a:	bf00      	nop
 800117c:	080011b1 	.word	0x080011b1
 8001180:	080011b9 	.word	0x080011b9
 8001184:	080011c1 	.word	0x080011c1
 8001188:	080011c9 	.word	0x080011c9
 800118c:	080011e3 	.word	0x080011e3
 8001190:	080011fd 	.word	0x080011fd
 8001194:	08001255 	.word	0x08001255
 8001198:	08001273 	.word	0x08001273
 800119c:	080012c9 	.word	0x080012c9
 80011a0:	080012e7 	.word	0x080012e7
 80011a4:	08001323 	.word	0x08001323
 80011a8:	08001347 	.word	0x08001347
 80011ac:	0800134f 	.word	0x0800134f
	 {
// ---------------------------------------------

	 case BLE_STATE_RESET:

		 eBLE_STATE = BLE_STATE_INIT;
 80011b0:	4b6c      	ldr	r3, [pc, #432]	@ (8001364 <BLE_Control+0x200>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	701a      	strb	r2, [r3, #0]
		 break;
 80011b6:	e0d2      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_INIT:

		 eBLE_STATE = BLE_STATE_ADV;
 80011b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001364 <BLE_Control+0x200>)
 80011ba:	2202      	movs	r2, #2
 80011bc:	701a      	strb	r2, [r3, #0]
		 break;
 80011be:	e0ce      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_ADV:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80011c0:	4b68      	ldr	r3, [pc, #416]	@ (8001364 <BLE_Control+0x200>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	701a      	strb	r2, [r3, #0]
		 break;
 80011c6:	e0ca      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_CHECK_CONNECTION:

		 if ( tsBle.Connected )
 80011c8:	4b67      	ldr	r3, [pc, #412]	@ (8001368 <BLE_Control+0x204>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d003      	beq.n	80011da <BLE_Control+0x76>
		 {
			 #if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
			 	 //BLE_SVC_L2CAP_Conn_Update(0x00);
			 #endif
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 80011d2:	4b64      	ldr	r3, [pc, #400]	@ (8001364 <BLE_Control+0x200>)
 80011d4:	2205      	movs	r2, #5
 80011d6:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
		 }
		 break;
 80011d8:	e0c1      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80011da:	4b62      	ldr	r3, [pc, #392]	@ (8001364 <BLE_Control+0x200>)
 80011dc:	2203      	movs	r2, #3
 80011de:	701a      	strb	r2, [r3, #0]
		 break;
 80011e0:	e0bd      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_CONNECTED:
		 if ( tsBle.Connected )
 80011e2:	4b61      	ldr	r3, [pc, #388]	@ (8001368 <BLE_Control+0x204>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d003      	beq.n	80011f4 <BLE_Control+0x90>
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 80011ec:	4b5d      	ldr	r3, [pc, #372]	@ (8001364 <BLE_Control+0x200>)
 80011ee:	2205      	movs	r2, #5
 80011f0:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_ADV;
		 }
		 break;
 80011f2:	e0b4      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_ADV;
 80011f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001364 <BLE_Control+0x200>)
 80011f6:	2202      	movs	r2, #2
 80011f8:	701a      	strb	r2, [r3, #0]
		 break;
 80011fa:	e0b0      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_SCG:

		 if ( tsBle.App.McgNotification )
 80011fc:	4b5a      	ldr	r3, [pc, #360]	@ (8001368 <BLE_Control+0x204>)
 80011fe:	799b      	ldrb	r3, [r3, #6]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d023      	beq.n	800124c <BLE_Control+0xe8>
		 {
			 if ( tsStreamSCG.bReleaseScgData == true )
 8001204:	4b59      	ldr	r3, [pc, #356]	@ (800136c <BLE_Control+0x208>)
 8001206:	f893 3229 	ldrb.w	r3, [r3, #553]	@ 0x229
 800120a:	2b01      	cmp	r3, #1
 800120c:	d11a      	bne.n	8001244 <BLE_Control+0xe0>
			 {
				 tsStreamSCG.bReleaseScgData = false;
 800120e:	4b57      	ldr	r3, [pc, #348]	@ (800136c <BLE_Control+0x208>)
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2229 	strb.w	r2, [r3, #553]	@ 0x229
				 MCG_StreamDataPack ( tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8McgTxCpy, MCG.u8TxLen, tsStreamSCG.u8TxData );
 8001216:	4b56      	ldr	r3, [pc, #344]	@ (8001370 <BLE_Control+0x20c>)
 8001218:	f893 1202 	ldrb.w	r1, [r3, #514]	@ 0x202
 800121c:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <BLE_Control+0x20c>)
 800121e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8001222:	4a54      	ldr	r2, [pc, #336]	@ (8001374 <BLE_Control+0x210>)
 8001224:	9200      	str	r2, [sp, #0]
 8001226:	4a54      	ldr	r2, [pc, #336]	@ (8001378 <BLE_Control+0x214>)
 8001228:	4853      	ldr	r0, [pc, #332]	@ (8001378 <BLE_Control+0x214>)
 800122a:	f7ff fee7 	bl	8000ffc <MCG_StreamDataPack>
				 // Reset data length
				 MCG.u8TxLen = 0;
 800122e:	4b50      	ldr	r3, [pc, #320]	@ (8001370 <BLE_Control+0x20c>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
				 // Set the task for BLE
				 tsBle.App.ScgSetTask = true;
 8001236:	4b4c      	ldr	r3, [pc, #304]	@ (8001368 <BLE_Control+0x204>)
 8001238:	2201      	movs	r2, #1
 800123a:	725a      	strb	r2, [r3, #9]
//				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

				 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 800123c:	4b49      	ldr	r3, [pc, #292]	@ (8001364 <BLE_Control+0x200>)
 800123e:	2206      	movs	r2, #6
 8001240:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
		 }
		 break;
 8001242:	e08c      	b.n	800135e <BLE_Control+0x1fa>
				 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001244:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <BLE_Control+0x200>)
 8001246:	2205      	movs	r2, #5
 8001248:	701a      	strb	r2, [r3, #0]
		 break;
 800124a:	e088      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 800124c:	4b45      	ldr	r3, [pc, #276]	@ (8001364 <BLE_Control+0x200>)
 800124e:	2207      	movs	r2, #7
 8001250:	701a      	strb	r2, [r3, #0]
		 break;
 8001252:	e084      	b.n	800135e <BLE_Control+0x1fa>


	 case BLE_STATE_XFER_SCG_Cmplt:


		 if ( tsBle.SCG_XferComplete )
 8001254:	4b44      	ldr	r3, [pc, #272]	@ (8001368 <BLE_Control+0x204>)
 8001256:	789b      	ldrb	r3, [r3, #2]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d006      	beq.n	800126a <BLE_Control+0x106>
		 {
			 tsBle.SCG_XferComplete = false;
 800125c:	4b42      	ldr	r3, [pc, #264]	@ (8001368 <BLE_Control+0x204>)
 800125e:	2200      	movs	r2, #0
 8001260:	709a      	strb	r2, [r3, #2]

			 // By default the next step is waiting another SCG/MCG data, but if IMU is enabled, so ACCEL would be the next step.
			 eBLE_STATE = BLE_STATE_IDLE;
 8001262:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <BLE_Control+0x200>)
 8001264:	220b      	movs	r2, #11
 8001266:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
		 }
		 break;
 8001268:	e079      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 800126a:	4b3e      	ldr	r3, [pc, #248]	@ (8001364 <BLE_Control+0x200>)
 800126c:	2206      	movs	r2, #6
 800126e:	701a      	strb	r2, [r3, #0]
		 break;
 8001270:	e075      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL:

		 if ( tsBle.App.AccelNotification )
 8001272:	4b3d      	ldr	r3, [pc, #244]	@ (8001368 <BLE_Control+0x204>)
 8001274:	79db      	ldrb	r3, [r3, #7]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d022      	beq.n	80012c0 <BLE_Control+0x15c>
		 {
			 if ( tsStreamIMU.bReleaseAccelData == true )
 800127a:	4b40      	ldr	r3, [pc, #256]	@ (800137c <BLE_Control+0x218>)
 800127c:	f893 3227 	ldrb.w	r3, [r3, #551]	@ 0x227
 8001280:	2b01      	cmp	r3, #1
 8001282:	d119      	bne.n	80012b8 <BLE_Control+0x154>
			 {
				 tsStreamIMU.bReleaseAccelData = false;
 8001284:	4b3d      	ldr	r3, [pc, #244]	@ (800137c <BLE_Control+0x218>)
 8001286:	2200      	movs	r2, #0
 8001288:	f883 2227 	strb.w	r2, [r3, #551]	@ 0x227
				 IMU_StreamDataPack ( IMU.u8AxTxData, IMU.u8AyTxData, IMU.u8AzTxData, tsStreamIMU.u8TxData );
 800128c:	4b3c      	ldr	r3, [pc, #240]	@ (8001380 <BLE_Control+0x21c>)
 800128e:	4a3d      	ldr	r2, [pc, #244]	@ (8001384 <BLE_Control+0x220>)
 8001290:	493d      	ldr	r1, [pc, #244]	@ (8001388 <BLE_Control+0x224>)
 8001292:	483e      	ldr	r0, [pc, #248]	@ (800138c <BLE_Control+0x228>)
 8001294:	f000 fab6 	bl	8001804 <IMU_StreamDataPack>
				 //Reset data length
				 IMU.u8AxTxLen = 0;
 8001298:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <BLE_Control+0x22c>)
 800129a:	2200      	movs	r2, #0
 800129c:	731a      	strb	r2, [r3, #12]
				 IMU.u8AyTxLen = 0;
 800129e:	4b3c      	ldr	r3, [pc, #240]	@ (8001390 <BLE_Control+0x22c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	735a      	strb	r2, [r3, #13]
				 IMU.u8AzTxLen = 0;
 80012a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <BLE_Control+0x22c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	739a      	strb	r2, [r3, #14]
				 // Set the task for BLE
				 tsBle.App.AccelSetTask= true;
 80012aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001368 <BLE_Control+0x204>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	729a      	strb	r2, [r3, #10]
				 //				 UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

				 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 80012b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <BLE_Control+0x200>)
 80012b2:	2208      	movs	r2, #8
 80012b4:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_IDLE;
		 }
		 break;
 80012b6:	e052      	b.n	800135e <BLE_Control+0x1fa>
				 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 80012b8:	4b2a      	ldr	r3, [pc, #168]	@ (8001364 <BLE_Control+0x200>)
 80012ba:	2207      	movs	r2, #7
 80012bc:	701a      	strb	r2, [r3, #0]
		 break;
 80012be:	e04e      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_IDLE;
 80012c0:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <BLE_Control+0x200>)
 80012c2:	220b      	movs	r2, #11
 80012c4:	701a      	strb	r2, [r3, #0]
		 break;
 80012c6:	e04a      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL_Cmplt:

		 if ( tsBle.ACCEL_XferComplete )
 80012c8:	4b27      	ldr	r3, [pc, #156]	@ (8001368 <BLE_Control+0x204>)
 80012ca:	78db      	ldrb	r3, [r3, #3]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <BLE_Control+0x17a>
		 {
			 tsBle.ACCEL_XferComplete = false;
 80012d0:	4b25      	ldr	r3, [pc, #148]	@ (8001368 <BLE_Control+0x204>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	70da      	strb	r2, [r3, #3]
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 80012d6:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <BLE_Control+0x200>)
 80012d8:	2209      	movs	r2, #9
 80012da:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
		 }
		 break;
 80012dc:	e03f      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 80012de:	4b21      	ldr	r3, [pc, #132]	@ (8001364 <BLE_Control+0x200>)
 80012e0:	2208      	movs	r2, #8
 80012e2:	701a      	strb	r2, [r3, #0]
		 break;
 80012e4:	e03b      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO:

		 tsStreamIMU.bReleaseGyroData = true;
 80012e6:	4b25      	ldr	r3, [pc, #148]	@ (800137c <BLE_Control+0x218>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
		 if ( tsStreamIMU.bReleaseGyroData == true )
 80012ee:	4b23      	ldr	r3, [pc, #140]	@ (800137c <BLE_Control+0x218>)
 80012f0:	f893 3228 	ldrb.w	r3, [r3, #552]	@ 0x228
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d110      	bne.n	800131a <BLE_Control+0x1b6>
		 {
			 // Pack all the data
			 	IMU.u8GxTxLen = 0;
 80012f8:	4b25      	ldr	r3, [pc, #148]	@ (8001390 <BLE_Control+0x22c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	73da      	strb	r2, [r3, #15]
			 	IMU.u8GyTxLen = 0;
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <BLE_Control+0x22c>)
 8001300:	2200      	movs	r2, #0
 8001302:	741a      	strb	r2, [r3, #16]
			 	IMU.u8GzTxLen = 0;
 8001304:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <BLE_Control+0x22c>)
 8001306:	2200      	movs	r2, #0
 8001308:	745a      	strb	r2, [r3, #17]

			 tsStreamIMU.bReleaseGyroData = false;
 800130a:	4b1c      	ldr	r3, [pc, #112]	@ (800137c <BLE_Control+0x218>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2228 	strb.w	r2, [r3, #552]	@ 0x228
			 eBLE_STATE = BLE_STATE_XFER_GYRO_Cmplt;
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <BLE_Control+0x200>)
 8001314:	220a      	movs	r2, #10
 8001316:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 8001318:	e021      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <BLE_Control+0x200>)
 800131c:	2209      	movs	r2, #9
 800131e:	701a      	strb	r2, [r3, #0]
		 break;
 8001320:	e01d      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO_Cmplt:

		 tsBle.GYRO_XferComplete = true;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <BLE_Control+0x204>)
 8001324:	2201      	movs	r2, #1
 8001326:	711a      	strb	r2, [r3, #4]
		 if ( tsBle.GYRO_XferComplete )
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <BLE_Control+0x204>)
 800132a:	791b      	ldrb	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d006      	beq.n	800133e <BLE_Control+0x1da>
		 {
			 tsBle.GYRO_XferComplete = false;
 8001330:	4b0d      	ldr	r3, [pc, #52]	@ (8001368 <BLE_Control+0x204>)
 8001332:	2200      	movs	r2, #0
 8001334:	711a      	strb	r2, [r3, #4]
			 eBLE_STATE = BLE_STATE_IDLE;
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <BLE_Control+0x200>)
 8001338:	220b      	movs	r2, #11
 800133a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 800133c:	e00f      	b.n	800135e <BLE_Control+0x1fa>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <BLE_Control+0x200>)
 8001340:	2209      	movs	r2, #9
 8001342:	701a      	strb	r2, [r3, #0]
		 break;
 8001344:	e00b      	b.n	800135e <BLE_Control+0x1fa>
// ---------------------------------------------

	 case BLE_STATE_IDLE:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <BLE_Control+0x200>)
 8001348:	2203      	movs	r2, #3
 800134a:	701a      	strb	r2, [r3, #0]
		 break;
 800134c:	e007      	b.n	800135e <BLE_Control+0x1fa>

	 case BLE_STATE_DISCONNECTED:

		 eBLE_STATE = BLE_STATE_ADV;
 800134e:	4b05      	ldr	r3, [pc, #20]	@ (8001364 <BLE_Control+0x200>)
 8001350:	2202      	movs	r2, #2
 8001352:	701a      	strb	r2, [r3, #0]
		 break;
 8001354:	e003      	b.n	800135e <BLE_Control+0x1fa>

// Unknown state--------------------------------

	 default:

		 eBLE_STATE = BLE_STATE_RESET;
 8001356:	4b03      	ldr	r3, [pc, #12]	@ (8001364 <BLE_Control+0x200>)
 8001358:	2200      	movs	r2, #0
 800135a:	701a      	strb	r2, [r3, #0]
		 break;
 800135c:	bf00      	nop

	 }
// ---------------------------------------------

 }
 800135e:	bf00      	nop
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20000657 	.word	0x20000657
 8001368:	20000fe0 	.word	0x20000fe0
 800136c:	20000420 	.word	0x20000420
 8001370:	2000020c 	.word	0x2000020c
 8001374:	20000426 	.word	0x20000426
 8001378:	20000526 	.word	0x20000526
 800137c:	20000744 	.word	0x20000744
 8001380:	2000074a 	.word	0x2000074a
 8001384:	200006fa 	.word	0x200006fa
 8001388:	200006b2 	.word	0x200006b2
 800138c:	2000066a 	.word	0x2000066a
 8001390:	20000658 	.word	0x20000658

08001394 <IIR_MCG>:

//--------------------------------------------------------------------------------------------
//								IIR Bandpass Filter
//--------------------------------------------------------------------------------------------
int32_t IIR_MCG ( uint8_t Temp_xyptr )
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]

	float  		convM = 0;
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
	float  		conv1M = 0, conv2M = 0;
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	f04f 0300 	mov.w	r3, #0
 80013ae:	61bb      	str	r3, [r7, #24]
	uint8_t 	o = 0;
 80013b0:	2300      	movs	r3, #0
 80013b2:	72fb      	strb	r3, [r7, #11]

	// BPF Implementation ------------------------------------------------------------------------------------
	if (tsCmd.MCG_HPF)
 80013b4:	4bc1      	ldr	r3, [pc, #772]	@ (80016bc <IIR_MCG+0x328>)
 80013b6:	7f5b      	ldrb	r3, [r3, #29]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d07e      	beq.n	80014ba <IIR_MCG+0x126>
	{
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
 80013c0:	e020      	b.n	8001404 <IIR_MCG+0x70>
		{
			o= RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80013c2:	7dfa      	ldrb	r2, [r7, #23]
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4619      	mov	r1, r3
 80013c8:	200f      	movs	r0, #15
 80013ca:	f000 f987 	bl	80016dc <RecentValueIndex>
 80013ce:	4603      	mov	r3, r0
 80013d0:	72fb      	strb	r3, [r7, #11]
			conv1M +=  b[i] * MCG.Raw[o];
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	4aba      	ldr	r2, [pc, #744]	@ (80016c0 <IIR_MCG+0x32c>)
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4413      	add	r3, r2
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	7afb      	ldrb	r3, [r7, #11]
 80013e0:	4ab8      	ldr	r2, [pc, #736]	@ (80016c4 <IIR_MCG+0x330>)
 80013e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e6:	ee07 3a90 	vmov	s15, r3
 80013ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80013f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013fa:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	3301      	adds	r3, #1
 8001402:	75fb      	strb	r3, [r7, #23]
 8001404:	7dfb      	ldrb	r3, [r7, #23]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d9db      	bls.n	80013c2 <IIR_MCG+0x2e>
		}

		o=0;
 800140a:	2300      	movs	r3, #0
 800140c:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 800140e:	2301      	movs	r3, #1
 8001410:	75bb      	strb	r3, [r7, #22]
 8001412:	e03f      	b.n	8001494 <IIR_MCG+0x100>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001414:	7dba      	ldrb	r2, [r7, #22]
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4619      	mov	r1, r3
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f95e 	bl	80016dc <RecentValueIndex>
 8001420:	4603      	mov	r3, r0
 8001422:	72fb      	strb	r3, [r7, #11]
			if (tsCmd.MCG_N50) {conv2M += a[i] * MCG.HPF [o];} else {conv2M += a[i] * MCG.Filtered [o];}
 8001424:	4ba5      	ldr	r3, [pc, #660]	@ (80016bc <IIR_MCG+0x328>)
 8001426:	7f1b      	ldrb	r3, [r3, #28]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d018      	beq.n	800145e <IIR_MCG+0xca>
 800142c:	7dbb      	ldrb	r3, [r7, #22]
 800142e:	4aa6      	ldr	r2, [pc, #664]	@ (80016c8 <IIR_MCG+0x334>)
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	4aa2      	ldr	r2, [pc, #648]	@ (80016c4 <IIR_MCG+0x330>)
 800143c:	332c      	adds	r3, #44	@ 0x2c
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	ed97 7a06 	vldr	s14, [r7, #24]
 8001454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001458:	edc7 7a06 	vstr	s15, [r7, #24]
 800145c:	e017      	b.n	800148e <IIR_MCG+0xfa>
 800145e:	7dbb      	ldrb	r3, [r7, #22]
 8001460:	4a99      	ldr	r2, [pc, #612]	@ (80016c8 <IIR_MCG+0x334>)
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	4413      	add	r3, r2
 8001466:	ed93 7a00 	vldr	s14, [r3]
 800146a:	7afb      	ldrb	r3, [r7, #11]
 800146c:	4a95      	ldr	r2, [pc, #596]	@ (80016c4 <IIR_MCG+0x330>)
 800146e:	330e      	adds	r3, #14
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001482:	ed97 7a06 	vldr	s14, [r7, #24]
 8001486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148a:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 800148e:	7dbb      	ldrb	r3, [r7, #22]
 8001490:	3301      	adds	r3, #1
 8001492:	75bb      	strb	r3, [r7, #22]
 8001494:	7dbb      	ldrb	r3, [r7, #22]
 8001496:	2b02      	cmp	r3, #2
 8001498:	d9bc      	bls.n	8001414 <IIR_MCG+0x80>
		}

		MCG.HPF [Temp_xyptr] =  conv1M -  conv2M ;
 800149a:	ed97 7a07 	vldr	s14, [r7, #28]
 800149e:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ac:	ee17 1a90 	vmov	r1, s15
 80014b0:	4a84      	ldr	r2, [pc, #528]	@ (80016c4 <IIR_MCG+0x330>)
 80014b2:	332c      	adds	r3, #44	@ 0x2c
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	6059      	str	r1, [r3, #4]
	}

	// Notch Filter implementation ---------------------------------------------------------------------------
	if (tsCmd.MCG_N50)
 80014ba:	4b80      	ldr	r3, [pc, #512]	@ (80016bc <IIR_MCG+0x328>)
 80014bc:	7f1b      	ldrb	r3, [r3, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	f000 80dc 	beq.w	800167c <IIR_MCG+0x2e8>
	{
		conv1M= 0;		conv2M= 0;
 80014c4:	f04f 0300 	mov.w	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]

		// 50 Notch Filter Implementation
		for ( uint8_t i=0 ; i < 3 ; i++ )
 80014d0:	2300      	movs	r3, #0
 80014d2:	757b      	strb	r3, [r7, #21]
 80014d4:	e03d      	b.n	8001552 <IIR_MCG+0x1be>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80014d6:	7d7a      	ldrb	r2, [r7, #21]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4619      	mov	r1, r3
 80014dc:	200f      	movs	r0, #15
 80014de:	f000 f8fd 	bl	80016dc <RecentValueIndex>
 80014e2:	4603      	mov	r3, r0
 80014e4:	72fb      	strb	r3, [r7, #11]
			if (tsCmd.MCG_HPF) { conv1M +=  b_N50[i] * MCG.HPF[o]; } else { conv1M +=  b_N50[i] * MCG.Raw[o]; }
 80014e6:	4b75      	ldr	r3, [pc, #468]	@ (80016bc <IIR_MCG+0x328>)
 80014e8:	7f5b      	ldrb	r3, [r3, #29]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d018      	beq.n	8001520 <IIR_MCG+0x18c>
 80014ee:	7d7b      	ldrb	r3, [r7, #21]
 80014f0:	4a76      	ldr	r2, [pc, #472]	@ (80016cc <IIR_MCG+0x338>)
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	ed93 7a00 	vldr	s14, [r3]
 80014fa:	7afb      	ldrb	r3, [r7, #11]
 80014fc:	4a71      	ldr	r2, [pc, #452]	@ (80016c4 <IIR_MCG+0x330>)
 80014fe:	332c      	adds	r3, #44	@ 0x2c
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	4413      	add	r3, r2
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800150e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001512:	ed97 7a07 	vldr	s14, [r7, #28]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	edc7 7a07 	vstr	s15, [r7, #28]
 800151e:	e015      	b.n	800154c <IIR_MCG+0x1b8>
 8001520:	7d7b      	ldrb	r3, [r7, #21]
 8001522:	4a6a      	ldr	r2, [pc, #424]	@ (80016cc <IIR_MCG+0x338>)
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	4a65      	ldr	r2, [pc, #404]	@ (80016c4 <IIR_MCG+0x330>)
 8001530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001534:	ee07 3a90 	vmov	s15, r3
 8001538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001540:	ed97 7a07 	vldr	s14, [r7, #28]
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i=0 ; i < 3 ; i++ )
 800154c:	7d7b      	ldrb	r3, [r7, #21]
 800154e:	3301      	adds	r3, #1
 8001550:	757b      	strb	r3, [r7, #21]
 8001552:	7d7b      	ldrb	r3, [r7, #21]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d9be      	bls.n	80014d6 <IIR_MCG+0x142>
		}

		o=0;
 8001558:	2300      	movs	r3, #0
 800155a:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i=1 ; i < 3 ; i++ )
 800155c:	2301      	movs	r3, #1
 800155e:	753b      	strb	r3, [r7, #20]
 8001560:	e021      	b.n	80015a6 <IIR_MCG+0x212>
		{
			o=RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001562:	7d3a      	ldrb	r2, [r7, #20]
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	4619      	mov	r1, r3
 8001568:	200f      	movs	r0, #15
 800156a:	f000 f8b7 	bl	80016dc <RecentValueIndex>
 800156e:	4603      	mov	r3, r0
 8001570:	72fb      	strb	r3, [r7, #11]
			 conv2M += a_N50[i] * MCG.Notch50[o] ;
 8001572:	7d3b      	ldrb	r3, [r7, #20]
 8001574:	4a56      	ldr	r2, [pc, #344]	@ (80016d0 <IIR_MCG+0x33c>)
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	ed93 7a00 	vldr	s14, [r3]
 800157e:	7afb      	ldrb	r3, [r7, #11]
 8001580:	4a50      	ldr	r2, [pc, #320]	@ (80016c4 <IIR_MCG+0x330>)
 8001582:	333c      	adds	r3, #60	@ 0x3c
 8001584:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001594:	ed97 7a06 	vldr	s14, [r7, #24]
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=1 ; i < 3 ; i++ )
 80015a0:	7d3b      	ldrb	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	753b      	strb	r3, [r7, #20]
 80015a6:	7d3b      	ldrb	r3, [r7, #20]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d9da      	bls.n	8001562 <IIR_MCG+0x1ce>
		}

		MCG.Notch50[Temp_xyptr]= conv1M - conv2M;
 80015ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80015b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80015b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015b8:	79fb      	ldrb	r3, [r7, #7]
 80015ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015be:	ee17 1a90 	vmov	r1, s15
 80015c2:	4a40      	ldr	r2, [pc, #256]	@ (80016c4 <IIR_MCG+0x330>)
 80015c4:	333c      	adds	r3, #60	@ 0x3c
 80015c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]


		conv1M= 0;		conv2M= 0;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
 80015d0:	f04f 0300 	mov.w	r3, #0
 80015d4:	61bb      	str	r3, [r7, #24]

		// 60 Notch Filter Implementation
		for ( uint8_t i=0 ; i < 3 ; i++ )
 80015d6:	2300      	movs	r3, #0
 80015d8:	74fb      	strb	r3, [r7, #19]
 80015da:	e021      	b.n	8001620 <IIR_MCG+0x28c>
		{
			o = RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 80015dc:	7cfa      	ldrb	r2, [r7, #19]
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	4619      	mov	r1, r3
 80015e2:	200f      	movs	r0, #15
 80015e4:	f000 f87a 	bl	80016dc <RecentValueIndex>
 80015e8:	4603      	mov	r3, r0
 80015ea:	72fb      	strb	r3, [r7, #11]
			conv1M +=  b_N60[i] * MCG.Notch50[o];
 80015ec:	7cfb      	ldrb	r3, [r7, #19]
 80015ee:	4a39      	ldr	r2, [pc, #228]	@ (80016d4 <IIR_MCG+0x340>)
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	ed93 7a00 	vldr	s14, [r3]
 80015f8:	7afb      	ldrb	r3, [r7, #11]
 80015fa:	4a32      	ldr	r2, [pc, #200]	@ (80016c4 <IIR_MCG+0x330>)
 80015fc:	333c      	adds	r3, #60	@ 0x3c
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001612:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001616:	edc7 7a07 	vstr	s15, [r7, #28]
		for ( uint8_t i=0 ; i < 3 ; i++ )
 800161a:	7cfb      	ldrb	r3, [r7, #19]
 800161c:	3301      	adds	r3, #1
 800161e:	74fb      	strb	r3, [r7, #19]
 8001620:	7cfb      	ldrb	r3, [r7, #19]
 8001622:	2b02      	cmp	r3, #2
 8001624:	d9da      	bls.n	80015dc <IIR_MCG+0x248>
		}

		o=0;
 8001626:	2300      	movs	r3, #0
 8001628:	72fb      	strb	r3, [r7, #11]

		for ( uint8_t i=1 ; i < 3 ; i++ )
 800162a:	2301      	movs	r3, #1
 800162c:	74bb      	strb	r3, [r7, #18]
 800162e:	e022      	b.n	8001676 <IIR_MCG+0x2e2>
		{
			o=RecentValueIndex ( 15, Temp_xyptr, i );					// Get buffer position for past values
 8001630:	7cba      	ldrb	r2, [r7, #18]
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	4619      	mov	r1, r3
 8001636:	200f      	movs	r0, #15
 8001638:	f000 f850 	bl	80016dc <RecentValueIndex>
 800163c:	4603      	mov	r3, r0
 800163e:	72fb      	strb	r3, [r7, #11]
			 conv2M += a_N60[i] * MCG.Filtered[o] ;
 8001640:	7cbb      	ldrb	r3, [r7, #18]
 8001642:	4a25      	ldr	r2, [pc, #148]	@ (80016d8 <IIR_MCG+0x344>)
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	ed93 7a00 	vldr	s14, [r3]
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	4a1d      	ldr	r2, [pc, #116]	@ (80016c4 <IIR_MCG+0x330>)
 8001650:	330e      	adds	r3, #14
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	ed97 7a06 	vldr	s14, [r7, #24]
 8001668:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166c:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=1 ; i < 3 ; i++ )
 8001670:	7cbb      	ldrb	r3, [r7, #18]
 8001672:	3301      	adds	r3, #1
 8001674:	74bb      	strb	r3, [r7, #18]
 8001676:	7cbb      	ldrb	r3, [r7, #18]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d9d9      	bls.n	8001630 <IIR_MCG+0x29c>
		}
	}

	convM =  conv1M - conv2M ;
 800167c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001680:	edd7 7a06 	vldr	s15, [r7, #24]
 8001684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001688:	edc7 7a03 	vstr	s15, [r7, #12]

	if (tsCmd.MCG_HPF == false && tsCmd.MCG_N50 == false)
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <IIR_MCG+0x328>)
 800168e:	7f5b      	ldrb	r3, [r3, #29]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d108      	bne.n	80016a6 <IIR_MCG+0x312>
 8001694:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <IIR_MCG+0x328>)
 8001696:	7f1b      	ldrb	r3, [r3, #28]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <IIR_MCG+0x312>
	{
		return MCG.Raw[Temp_xyptr];
 800169c:	79fb      	ldrb	r3, [r7, #7]
 800169e:	4a09      	ldr	r2, [pc, #36]	@ (80016c4 <IIR_MCG+0x330>)
 80016a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a4:	e005      	b.n	80016b2 <IIR_MCG+0x31e>
	}
	else
	{
		return  (int)convM; //(int)conv;
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ae:	ee17 3a90 	vmov	r3, s15
	}

}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3720      	adds	r7, #32
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	20000ca0 	.word	0x20000ca0
 80016c0:	080186d0 	.word	0x080186d0
 80016c4:	2000020c 	.word	0x2000020c
 80016c8:	080186dc 	.word	0x080186dc
 80016cc:	080186e8 	.word	0x080186e8
 80016d0:	080186f4 	.word	0x080186f4
 80016d4:	08018700 	.word	0x08018700
 80016d8:	0801870c 	.word	0x0801870c

080016dc <RecentValueIndex>:

//--------------------------------------------------------------------------------------------
//						Get buffer position for past values
//--------------------------------------------------------------------------------------------
uint8_t RecentValueIndex ( uint8_t BufferLen, uint8_t BufferPos, uint8_t in_dex )
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	460b      	mov	r3, r1
 80016e8:	71bb      	strb	r3, [r7, #6]
 80016ea:	4613      	mov	r3, r2
 80016ec:	717b      	strb	r3, [r7, #5]
	uint8_t out_xy = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	73fb      	strb	r3, [r7, #15]

	if ( ( BufferPos - in_dex ) <  0 )	{ out_xy = ( BufferLen + BufferPos ) - in_dex; }	// Calculate pointer of the circular buffer for previous values
 80016f2:	79ba      	ldrb	r2, [r7, #6]
 80016f4:	797b      	ldrb	r3, [r7, #5]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	da06      	bge.n	800170a <RecentValueIndex+0x2e>
 80016fc:	79fa      	ldrb	r2, [r7, #7]
 80016fe:	79bb      	ldrb	r3, [r7, #6]
 8001700:	4413      	add	r3, r2
 8001702:	b2da      	uxtb	r2, r3
 8001704:	797b      	ldrb	r3, [r7, #5]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	73fb      	strb	r3, [r7, #15]
	if ( ( BufferPos - in_dex ) >= 0 )	{ out_xy = BufferPos - in_dex; }				// Calculate pointer of the circular buffer for previous values
 800170a:	79ba      	ldrb	r2, [r7, #6]
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b00      	cmp	r3, #0
 8001712:	db03      	blt.n	800171c <RecentValueIndex+0x40>
 8001714:	79ba      	ldrb	r2, [r7, #6]
 8001716:	797b      	ldrb	r3, [r7, #5]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	73fb      	strb	r3, [r7, #15]

	return out_xy;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
	...

0800172c <IMU_Init>:

#define 	M_PI 			3.14159265358979323846

//----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_Init(I2C_HandleTypeDef *hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af02      	add	r7, sp, #8
 8001732:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set the HW address on IMU to 0x6A
    ADDR_IMU_6A;
 8001734:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <IMU_Init+0xc0>)
 8001736:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800173a:	619a      	str	r2, [r3, #24]

    // Enable accelerometer, 104 Hz, 2g
    config[0] = IMU_CTRL1_XL;
 800173c:	2310      	movs	r3, #16
 800173e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001740:	2340      	movs	r3, #64	@ 0x40
 8001742:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001744:	f107 020c 	add.w	r2, r7, #12
 8001748:	230a      	movs	r3, #10
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2302      	movs	r3, #2
 800174e:	21d4      	movs	r1, #212	@ 0xd4
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f003 fd25 	bl	80051a0 <HAL_I2C_Master_Transmit>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <IMU_Init+0x34>
    {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e041      	b.n	80017e4 <IMU_Init+0xb8>
    }

    // Enable gyroscope, 104 Hz, 250 dps
    config[0] = IMU_CTRL2_G;
 8001760:	2311      	movs	r3, #17
 8001762:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001764:	2340      	movs	r3, #64	@ 0x40
 8001766:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001768:	f107 020c 	add.w	r2, r7, #12
 800176c:	230a      	movs	r3, #10
 800176e:	9300      	str	r3, [sp, #0]
 8001770:	2302      	movs	r3, #2
 8001772:	21d4      	movs	r1, #212	@ 0xd4
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f003 fd13 	bl	80051a0 <HAL_I2C_Master_Transmit>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <IMU_Init+0x58>
    {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e02f      	b.n	80017e4 <IMU_Init+0xb8>
    }

    // BDU (Block Data Update) enabled
    config[0] = IMU_CTRL3_C;
 8001784:	2312      	movs	r3, #18
 8001786:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44;
 8001788:	2344      	movs	r3, #68	@ 0x44
 800178a:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 800178c:	f107 020c 	add.w	r2, r7, #12
 8001790:	230a      	movs	r3, #10
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2302      	movs	r3, #2
 8001796:	21d4      	movs	r1, #212	@ 0xd4
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f003 fd01 	bl	80051a0 <HAL_I2C_Master_Transmit>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <IMU_Init+0x7c>
    {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e01d      	b.n	80017e4 <IMU_Init+0xb8>
    }

    HighPassFilter_Init	( &accelFilter, cutoff_freq, 640 );
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <IMU_Init+0xc4>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	ee07 3a90 	vmov	s15, r3
 80017b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017b4:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80017f4 <IMU_Init+0xc8>
 80017b8:	eeb0 0a67 	vmov.f32	s0, s15
 80017bc:	480e      	ldr	r0, [pc, #56]	@ (80017f8 <IMU_Init+0xcc>)
 80017be:	f000 f8f7 	bl	80019b0 <HighPassFilter_Init>
    HighPassFilter_Init	( &gyroFilter , cutoff_freq, 640 );
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <IMU_Init+0xc4>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	ee07 3a90 	vmov	s15, r3
 80017ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ce:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80017f4 <IMU_Init+0xc8>
 80017d2:	eeb0 0a67 	vmov.f32	s0, s15
 80017d6:	4809      	ldr	r0, [pc, #36]	@ (80017fc <IMU_Init+0xd0>)
 80017d8:	f000 f8ea 	bl	80019b0 <HighPassFilter_Init>

    DIAG ("\t\tIMU initialised\r\n");
 80017dc:	4808      	ldr	r0, [pc, #32]	@ (8001800 <IMU_Init+0xd4>)
 80017de:	f000 fea3 	bl	8002528 <DIAG>

    return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	48000400 	.word	0x48000400
 80017f0:	20000008 	.word	0x20000008
 80017f4:	44200000 	.word	0x44200000
 80017f8:	20000970 	.word	0x20000970
 80017fc:	20000980 	.word	0x20000980
 8001800:	08016d24 	.word	0x08016d24

08001804 <IMU_StreamDataPack>:
	//tsSystem.u8Error |= eBus_Error;
}
//--------------------------------------------------------------------------------------------

void IMU_StreamDataPack ( uint8_t *Ax_pData, uint8_t *Ay_pData, uint8_t *Az_pData, uint8_t *outputString   )
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
 	uint8_t index=0;
 8001812:	2300      	movs	r3, #0
 8001814:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamIMU.u8TxData, 0, sizeof(tsStreamIMU.u8TxData) );
 8001816:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800181a:	2100      	movs	r1, #0
 800181c:	4862      	ldr	r0, [pc, #392]	@ (80019a8 <IMU_StreamDataPack+0x1a4>)
 800181e:	f014 fabd 	bl	8015d9c <memset>

 	outputString [index++] = 'S';
 8001822:	7dfb      	ldrb	r3, [r7, #23]
 8001824:	1c5a      	adds	r2, r3, #1
 8001826:	75fa      	strb	r2, [r7, #23]
 8001828:	461a      	mov	r2, r3
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	4413      	add	r3, r2
 800182e:	2253      	movs	r2, #83	@ 0x53
 8001830:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp;				//'N'
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	1c5a      	adds	r2, r3, #1
 8001836:	75fa      	strb	r2, [r7, #23]
 8001838:	461a      	mov	r2, r3
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	4413      	add	r3, r2
 800183e:	4a5b      	ldr	r2, [pc, #364]	@ (80019ac <IMU_StreamDataPack+0x1a8>)
 8001840:	7952      	ldrb	r2, [r2, #5]
 8001842:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001844:	7dfb      	ldrb	r3, [r7, #23]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	75fa      	strb	r2, [r7, #23]
 800184a:	461a      	mov	r2, r3
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4413      	add	r3, r2
 8001850:	222c      	movs	r2, #44	@ 0x2c
 8001852:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001854:	7dfb      	ldrb	r3, [r7, #23]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	75fa      	strb	r2, [r7, #23]
 800185a:	461a      	mov	r2, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	4413      	add	r3, r2
 8001860:	2243      	movs	r2, #67	@ 0x43
 8001862:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '1';
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	1c5a      	adds	r2, r3, #1
 8001868:	75fa      	strb	r2, [r7, #23]
 800186a:	461a      	mov	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4413      	add	r3, r2
 8001870:	2231      	movs	r2, #49	@ 0x31
 8001872:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	1c5a      	adds	r2, r3, #1
 8001878:	75fa      	strb	r2, [r7, #23]
 800187a:	461a      	mov	r2, r3
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4413      	add	r3, r2
 8001880:	222c      	movs	r2, #44	@ 0x2c
 8001882:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	1c5a      	adds	r2, r3, #1
 8001888:	75fa      	strb	r2, [r7, #23]
 800188a:	461a      	mov	r2, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	2240      	movs	r2, #64	@ 0x40
 8001892:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001894:	7dfb      	ldrb	r3, [r7, #23]
 8001896:	1c5a      	adds	r2, r3, #1
 8001898:	75fa      	strb	r2, [r7, #23]
 800189a:	461a      	mov	r2, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	222c      	movs	r2, #44	@ 0x2c
 80018a2:	701a      	strb	r2, [r3, #0]

 	//DIAG( "%d\r", tsStreamSCG.Counter);
 	memcpy ( outputString + index, Ax_pData, 64 );
 80018a4:	7dfb      	ldrb	r3, [r7, #23]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	4413      	add	r3, r2
 80018aa:	2240      	movs	r2, #64	@ 0x40
 80018ac:	68f9      	ldr	r1, [r7, #12]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f014 fb17 	bl	8015ee2 <memcpy>
 	index += 64;
 80018b4:	7dfb      	ldrb	r3, [r7, #23]
 80018b6:	3340      	adds	r3, #64	@ 0x40
 80018b8:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 80018ba:	7dfb      	ldrb	r3, [r7, #23]
 80018bc:	1c5a      	adds	r2, r3, #1
 80018be:	75fa      	strb	r2, [r7, #23]
 80018c0:	461a      	mov	r2, r3
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	222c      	movs	r2, #44	@ 0x2c
 80018c8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80018ca:	7dfb      	ldrb	r3, [r7, #23]
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	75fa      	strb	r2, [r7, #23]
 80018d0:	461a      	mov	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4413      	add	r3, r2
 80018d6:	2243      	movs	r2, #67	@ 0x43
 80018d8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '2';
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	1c5a      	adds	r2, r3, #1
 80018de:	75fa      	strb	r2, [r7, #23]
 80018e0:	461a      	mov	r2, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	4413      	add	r3, r2
 80018e6:	2232      	movs	r2, #50	@ 0x32
 80018e8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80018ea:	7dfb      	ldrb	r3, [r7, #23]
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	75fa      	strb	r2, [r7, #23]
 80018f0:	461a      	mov	r2, r3
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	4413      	add	r3, r2
 80018f6:	222c      	movs	r2, #44	@ 0x2c
 80018f8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 80018fa:	7dfb      	ldrb	r3, [r7, #23]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	75fa      	strb	r2, [r7, #23]
 8001900:	461a      	mov	r2, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	2240      	movs	r2, #64	@ 0x40
 8001908:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	75fa      	strb	r2, [r7, #23]
 8001910:	461a      	mov	r2, r3
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	4413      	add	r3, r2
 8001916:	222c      	movs	r2, #44	@ 0x2c
 8001918:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, Ay_pData, 64 );
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	4413      	add	r3, r2
 8001920:	2240      	movs	r2, #64	@ 0x40
 8001922:	68b9      	ldr	r1, [r7, #8]
 8001924:	4618      	mov	r0, r3
 8001926:	f014 fadc 	bl	8015ee2 <memcpy>
 	index += 64;
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	3340      	adds	r3, #64	@ 0x40
 800192e:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	75fa      	strb	r2, [r7, #23]
 8001936:	461a      	mov	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	4413      	add	r3, r2
 800193c:	222c      	movs	r2, #44	@ 0x2c
 800193e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	1c5a      	adds	r2, r3, #1
 8001944:	75fa      	strb	r2, [r7, #23]
 8001946:	461a      	mov	r2, r3
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	2243      	movs	r2, #67	@ 0x43
 800194e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '3';
 8001950:	7dfb      	ldrb	r3, [r7, #23]
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	75fa      	strb	r2, [r7, #23]
 8001956:	461a      	mov	r2, r3
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	4413      	add	r3, r2
 800195c:	2233      	movs	r2, #51	@ 0x33
 800195e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	75fa      	strb	r2, [r7, #23]
 8001966:	461a      	mov	r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	4413      	add	r3, r2
 800196c:	222c      	movs	r2, #44	@ 0x2c
 800196e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	75fa      	strb	r2, [r7, #23]
 8001976:	461a      	mov	r2, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	2240      	movs	r2, #64	@ 0x40
 800197e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001980:	7dfb      	ldrb	r3, [r7, #23]
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	75fa      	strb	r2, [r7, #23]
 8001986:	461a      	mov	r2, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	4413      	add	r3, r2
 800198c:	222c      	movs	r2, #44	@ 0x2c
 800198e:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, Az_pData, 64 );
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	4413      	add	r3, r2
 8001996:	2240      	movs	r2, #64	@ 0x40
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4618      	mov	r0, r3
 800199c:	f014 faa1 	bl	8015ee2 <memcpy>
}
 80019a0:	bf00      	nop
 80019a2:	3718      	adds	r7, #24
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	2000074a 	.word	0x2000074a
 80019ac:	20000fe0 	.word	0x20000fe0

080019b0 <HighPassFilter_Init>:
//--------------------------------------------------------------------------------------------

void HighPassFilter_Init(tsHighPassFilter *filter, float cutoff_freq, float sampling_rate)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019bc:	edc7 0a01 	vstr	s1, [r7, #4]
    float rc = 1.0 / (2.0 * M_PI * cutoff_freq);
 80019c0:	68b8      	ldr	r0, [r7, #8]
 80019c2:	f7fe fd99 	bl	80004f8 <__aeabi_f2d>
 80019c6:	a321      	add	r3, pc, #132	@ (adr r3, 8001a4c <HighPassFilter_Init+0x9c>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fdec 	bl	80005a8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	f04f 0000 	mov.w	r0, #0
 80019d8:	491b      	ldr	r1, [pc, #108]	@ (8001a48 <HighPassFilter_Init+0x98>)
 80019da:	f7fe ff0f 	bl	80007fc <__aeabi_ddiv>
 80019de:	4602      	mov	r2, r0
 80019e0:	460b      	mov	r3, r1
 80019e2:	4610      	mov	r0, r2
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7fe fff1 	bl	80009cc <__aeabi_d2f>
 80019ea:	4603      	mov	r3, r0
 80019ec:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / sampling_rate;
 80019ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80019f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019fa:	edc7 7a04 	vstr	s15, [r7, #16]
    filter->alpha = rc / (rc + dt);
 80019fe:	ed97 7a05 	vldr	s14, [r7, #20]
 8001a02:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	edc3 7a00 	vstr	s15, [r3]

    filter->prev_input.x = 0;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = 0;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2200      	movs	r2, #0
 8001a22:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = 0;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = 0;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = 0;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = 0;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	81da      	strh	r2, [r3, #14]
}
 8001a3c:	bf00      	nop
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	f3af 8000 	nop.w
 8001a48:	3ff00000 	.word	0x3ff00000
 8001a4c:	54442d18 	.word	0x54442d18
 8001a50:	401921fb 	.word	0x401921fb

08001a54 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001a54:	b5b0      	push	{r4, r5, r7, lr}
 8001a56:	b088      	sub	sp, #32
 8001a58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a88 <APPD_EnableCPU2+0x34>)
 8001a5c:	1d3c      	adds	r4, r7, #4
 8001a5e:	461d      	mov	r5, r3
 8001a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a68:	c403      	stmia	r4!, {r0, r1}
 8001a6a:	8022      	strh	r2, [r4, #0]
 8001a6c:	3402      	adds	r4, #2
 8001a6e:	0c13      	lsrs	r3, r2, #16
 8001a70:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001a72:	f010 f84b 	bl	8011b0c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f00f fadc 	bl	8011036 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001a7e:	bf00      	nop
}
 8001a80:	3720      	adds	r7, #32
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bdb0      	pop	{r4, r5, r7, pc}
 8001a86:	bf00      	nop
 8001a88:	08016d48 	.word	0x08016d48

08001a8c <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	460b      	mov	r3, r1
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001a9a:	897a      	ldrh	r2, [r7, #10]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68f9      	ldr	r1, [r7, #12]
 8001aa0:	2000      	movs	r0, #0
 8001aa2:	f001 fbab 	bl	80031fc <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001aa6:	bf00      	nop
}
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 8001ab4:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <LL_PWR_SMPS_Enable+0x1c>)
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <LL_PWR_SMPS_Enable+0x1c>)
 8001aba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001abe:	61d3      	str	r3, [r2, #28]
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	58000400 	.word	0x58000400

08001ad0 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ae0:	4904      	ldr	r1, [pc, #16]	@ (8001af4 <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	61cb      	str	r3, [r1, #28]
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	58000400 	.word	0x58000400

08001af8 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b087      	sub	sp, #28
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 030f 	and.w	r3, r3, #15
 8001b0a:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d108      	bne.n	8001b24 <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 8001b12:	4b15      	ldr	r3, [pc, #84]	@ (8001b68 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	f023 020f 	bic.w	r2, r3, #15
 8001b1a:	4913      	ldr	r1, [pc, #76]	@ (8001b68 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 8001b22:	e019      	b.n	8001b58 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3b06      	subs	r3, #6
 8001b28:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4413      	add	r3, r2
 8001b30:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	da02      	bge.n	8001b3e <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e004      	b.n	8001b48 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2b0f      	cmp	r3, #15
 8001b42:	dd01      	ble.n	8001b48 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 8001b44:	230f      	movs	r3, #15
 8001b46:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 8001b48:	4b07      	ldr	r3, [pc, #28]	@ (8001b68 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f023 020f 	bic.w	r2, r3, #15
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	4905      	ldr	r1, [pc, #20]	@ (8001b68 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61cb      	str	r3, [r1, #28]
}
 8001b58:	bf00      	nop
 8001b5a:	371c      	adds	r7, #28
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	1fff7558 	.word	0x1fff7558
 8001b68:	58000400 	.word	0x58000400

08001b6c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001b74:	4b07      	ldr	r3, [pc, #28]	@ (8001b94 <LL_C2_PWR_SetPowerMode+0x28>)
 8001b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b7a:	f023 0207 	bic.w	r2, r3, #7
 8001b7e:	4905      	ldr	r1, [pc, #20]	@ (8001b94 <LL_C2_PWR_SetPowerMode+0x28>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	58000400 	.word	0x58000400

08001b98 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	@ (8001bbc <LL_EXTI_EnableIT_32_63+0x24>)
 8001ba2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8001ba6:	4905      	ldr	r1, [pc, #20]	@ (8001bbc <LL_EXTI_EnableIT_32_63+0x24>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	58000800 	.word	0x58000800

08001bc0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001bce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001bda:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001be6:	4313      	orrs	r3, r2
 8001be8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	cafecafe 	.word	0xcafecafe

08001bfc <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001c04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001c0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	608b      	str	r3, [r1, #8]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001c5e:	bf00      	nop
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001c6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c7c:	d101      	bne.n	8001c82 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8001c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ca2:	d101      	bne.n	8001ca8 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001cbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001ccc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001cd0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	bf00      	nop
 8001cdc:	3714      	adds	r7, #20
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
	...

08001ce8 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001cec:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <LL_DBGMCU_GetDeviceID+0x18>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e0042000 	.word	0xe0042000

08001d04 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001d08:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <LL_DBGMCU_GetRevisionID+0x18>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	b29b      	uxth	r3, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e0042000 	.word	0xe0042000

08001d20 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	605a      	str	r2, [r3, #4]
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	431a      	orrs	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	605a      	str	r2, [r3, #4]
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	041b      	lsls	r3, r3, #16
 8001d78:	431a      	orrs	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	615a      	str	r2, [r3, #20]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
 8001d92:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695a      	ldr	r2, [r3, #20]
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	615a      	str	r2, [r3, #20]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	609a      	str	r2, [r3, #8]
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	619a      	str	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001de8:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <LL_LPM_EnableSleep+0x1c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	4a04      	ldr	r2, [pc, #16]	@ (8001e00 <LL_LPM_EnableSleep+0x1c>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6113      	str	r3, [r2, #16]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	22ff      	movs	r2, #255	@ 0xff
 8001e10:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr

08001e1e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	b083      	sub	sp, #12
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	22ca      	movs	r2, #202	@ 0xca
 8001e2a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2253      	movs	r2, #83	@ 0x53
 8001e30:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 0207 	bic.w	r2, r3, #7
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	609a      	str	r2, [r3, #8]
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001e68:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <MX_APPE_Config+0x18>)
 8001e6a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001e6e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001e70:	f000 f829 	bl	8001ec6 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001e74:	f000 f868 	bl	8001f48 <Config_HSE>

  return;
 8001e78:	bf00      	nop
}
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	58004000 	.word	0x58004000

08001e80 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001e84:	f000 f874 	bl	8001f70 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001e88:	f000 f88c 	bl	8001fa4 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001e8c:	4903      	ldr	r1, [pc, #12]	@ (8001e9c <MX_APPE_Init+0x1c>)
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f000 ffc2 	bl	8002e18 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001e94:	f000 f896 	bl	8001fc4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001e98:	bf00      	nop
}
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	20000d70 	.word	0x20000d70

08001ea0 <Init_Smps>:

void Init_Smps(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	f7ff fe13 	bl	8001ad0 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8001eaa:	2004      	movs	r0, #4
 8001eac:	f7ff fe24 	bl	8001af8 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8001eb0:	f7ff fdfe 	bl	8001ab0 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001eb4:	bf00      	nop
}
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <Init_Exti>:

void Init_Exti(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001ebc:	2050      	movs	r0, #80	@ 0x50
 8001ebe:	f7ff fe6b 	bl	8001b98 <LL_EXTI_EnableIT_32_63>

  return;
 8001ec2:	bf00      	nop
}
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001eca:	f000 f804 	bl	8001ed6 <Reset_BackupDomain>

  Reset_IPCC();
 8001ece:	f000 f819 	bl	8001f04 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001ed2:	bf00      	nop
}
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001eda:	f7ff fec5 	bl	8001c68 <LL_RCC_IsActiveFlag_PINRST>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00d      	beq.n	8001f00 <Reset_BackupDomain+0x2a>
 8001ee4:	f7ff fed3 	bl	8001c8e <LL_RCC_IsActiveFlag_SFTRST>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d108      	bne.n	8001f00 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001eee:	f005 fadb 	bl	80074a8 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001ef2:	f005 fad9 	bl	80074a8 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001ef6:	f7ff fe95 	bl	8001c24 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001efa:	f7ff fea4 	bl	8001c46 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
}
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001f08:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001f0c:	f7ff fed2 	bl	8001cb4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001f10:	213f      	movs	r1, #63	@ 0x3f
 8001f12:	480c      	ldr	r0, [pc, #48]	@ (8001f44 <Reset_IPCC+0x40>)
 8001f14:	f7ff ff4a 	bl	8001dac <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001f18:	213f      	movs	r1, #63	@ 0x3f
 8001f1a:	480a      	ldr	r0, [pc, #40]	@ (8001f44 <Reset_IPCC+0x40>)
 8001f1c:	f7ff ff54 	bl	8001dc8 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001f20:	213f      	movs	r1, #63	@ 0x3f
 8001f22:	4808      	ldr	r0, [pc, #32]	@ (8001f44 <Reset_IPCC+0x40>)
 8001f24:	f7ff fefc 	bl	8001d20 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001f28:	213f      	movs	r1, #63	@ 0x3f
 8001f2a:	4806      	ldr	r0, [pc, #24]	@ (8001f44 <Reset_IPCC+0x40>)
 8001f2c:	f7ff ff1b 	bl	8001d66 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001f30:	213f      	movs	r1, #63	@ 0x3f
 8001f32:	4804      	ldr	r0, [pc, #16]	@ (8001f44 <Reset_IPCC+0x40>)
 8001f34:	f7ff ff06 	bl	8001d44 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001f38:	213f      	movs	r1, #63	@ 0x3f
 8001f3a:	4802      	ldr	r0, [pc, #8]	@ (8001f44 <Reset_IPCC+0x40>)
 8001f3c:	f7ff ff25 	bl	8001d8a <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001f40:	bf00      	nop
}
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	58000c00 	.word	0x58000c00

08001f48 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f00f ff30 	bl	8011db4 <OTP_Read>
 8001f54:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	799b      	ldrb	r3, [r3, #6]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fe2d 	bl	8001bc0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
}
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <System_Init>:

static void System_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  Init_Smps();
 8001f74:	f7ff ff94 	bl	8001ea0 <Init_Smps>

  Init_Exti();
 8001f78:	f7ff ff9e 	bl	8001eb8 <Init_Exti>

  Init_Rtc();
 8001f7c:	f000 f802 	bl	8001f84 <Init_Rtc>

  return;
 8001f80:	bf00      	nop
}
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001f88:	4805      	ldr	r0, [pc, #20]	@ (8001fa0 <Init_Rtc+0x1c>)
 8001f8a:	f7ff ff48 	bl	8001e1e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4803      	ldr	r0, [pc, #12]	@ (8001fa0 <Init_Rtc+0x1c>)
 8001f92:	f7ff ff54 	bl	8001e3e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001f96:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <Init_Rtc+0x1c>)
 8001f98:	f7ff ff34 	bl	8001e04 <LL_RTC_EnableWriteProtection>

  return;
 8001f9c:	bf00      	nop
}
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40002800 	.word	0x40002800

08001fa4 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001fa8:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001fac:	f7ff fe26 	bl	8001bfc <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001fb0:	f013 fa2e 	bl	8015410 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001fb4:	2004      	movs	r0, #4
 8001fb6:	f7ff fdd9 	bl	8001b6c <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8001fba:	f005 fa93 	bl	80074e4 <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001fbe:	bf00      	nop
}
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001fca:	f00f fbe9 	bl	80117a0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001fce:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <appe_Tl_Init+0x50>)
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	2040      	movs	r0, #64	@ 0x40
 8001fd4:	f013 fb5a 	bl	801568c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <appe_Tl_Init+0x54>)
 8001fda:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <appe_Tl_Init+0x58>)
 8001fde:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480e      	ldr	r0, [pc, #56]	@ (8002020 <appe_Tl_Init+0x5c>)
 8001fe6:	f00f fa9d 	bl	8011524 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	@ (8002024 <appe_Tl_Init+0x60>)
 8001fec:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	@ (8002028 <appe_Tl_Init+0x64>)
 8001ff0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	@ (800202c <appe_Tl_Init+0x68>)
 8001ff4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001ff6:	f641 232c 	movw	r3, #6700	@ 0x1a2c
 8001ffa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001ffc:	f107 0308 	add.w	r3, r7, #8
 8002000:	4618      	mov	r0, r3
 8002002:	f00f fd0f 	bl	8011a24 <TL_MM_Init>

  TL_Enable();
 8002006:	f00f fbc5 	bl	8011794 <TL_Enable>

  return;
 800200a:	bf00      	nop
}
 800200c:	3720      	adds	r7, #32
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	0801155d 	.word	0x0801155d
 8002018:	20031c24 	.word	0x20031c24
 800201c:	08002031 	.word	0x08002031
 8002020:	08002049 	.word	0x08002049
 8002024:	20031e3c 	.word	0x20031e3c
 8002028:	20031d30 	.word	0x20031d30
 800202c:	200301f8 	.word	0x200301f8

08002030 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800203a:	bf00      	nop
}
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	330b      	adds	r3, #11
 8002056:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8002062:	2b07      	cmp	r3, #7
 8002064:	f200 80d0 	bhi.w	8002208 <APPE_SysUserEvtRx+0x1c0>
 8002068:	a201      	add	r2, pc, #4	@ (adr r2, 8002070 <APPE_SysUserEvtRx+0x28>)
 800206a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002091 	.word	0x08002091
 8002074:	08002123 	.word	0x08002123
 8002078:	08002145 	.word	0x08002145
 800207c:	08002209 	.word	0x08002209
 8002080:	08002189 	.word	0x08002189
 8002084:	080021ad 	.word	0x080021ad
 8002088:	080021c9 	.word	0x080021c9
 800208c:	080021ed 	.word	0x080021ed
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002090:	f107 030c 	add.w	r3, r7, #12
 8002094:	4618      	mov	r0, r3
 8002096:	f00e fffb 	bl	8011090 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800209a:	485e      	ldr	r0, [pc, #376]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 800209c:	f00f fdc2 	bl	8011c24 <DbgTraceGetFileName>
 80020a0:	4601      	mov	r1, r0
 80020a2:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 80020a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 80020a8:	485c      	ldr	r0, [pc, #368]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 80020aa:	f013 fcef 	bl	8015a8c <iprintf>
 80020ae:	7b3b      	ldrb	r3, [r7, #12]
 80020b0:	4619      	mov	r1, r3
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	461a      	mov	r2, r3
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	4859      	ldr	r0, [pc, #356]	@ (8002220 <APPE_SysUserEvtRx+0x1d8>)
 80020ba:	f013 fce7 	bl	8015a8c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80020be:	4855      	ldr	r0, [pc, #340]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 80020c0:	f00f fdb0 	bl	8011c24 <DbgTraceGetFileName>
 80020c4:	4601      	mov	r1, r0
 80020c6:	f240 136b 	movw	r3, #363	@ 0x16b
 80020ca:	4a53      	ldr	r2, [pc, #332]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 80020cc:	4853      	ldr	r0, [pc, #332]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 80020ce:	f013 fcdd 	bl	8015a8c <iprintf>
 80020d2:	7c3b      	ldrb	r3, [r7, #16]
 80020d4:	4619      	mov	r1, r3
 80020d6:	4853      	ldr	r0, [pc, #332]	@ (8002224 <APPE_SysUserEvtRx+0x1dc>)
 80020d8:	f013 fcd8 	bl	8015a8c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80020dc:	484d      	ldr	r0, [pc, #308]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 80020de:	f00f fda1 	bl	8011c24 <DbgTraceGetFileName>
 80020e2:	4601      	mov	r1, r0
 80020e4:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80020e8:	4a4b      	ldr	r2, [pc, #300]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 80020ea:	484c      	ldr	r0, [pc, #304]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 80020ec:	f013 fcce 	bl	8015a8c <iprintf>
 80020f0:	7dbb      	ldrb	r3, [r7, #22]
 80020f2:	4619      	mov	r1, r3
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
 80020f6:	461a      	mov	r2, r3
 80020f8:	7e3b      	ldrb	r3, [r7, #24]
 80020fa:	484b      	ldr	r0, [pc, #300]	@ (8002228 <APPE_SysUserEvtRx+0x1e0>)
 80020fc:	f013 fcc6 	bl	8015a8c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8002100:	4844      	ldr	r0, [pc, #272]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 8002102:	f00f fd8f 	bl	8011c24 <DbgTraceGetFileName>
 8002106:	4601      	mov	r1, r0
 8002108:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 800210c:	4a42      	ldr	r2, [pc, #264]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 800210e:	4843      	ldr	r0, [pc, #268]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 8002110:	f013 fcbc 	bl	8015a8c <iprintf>
 8002114:	4845      	ldr	r0, [pc, #276]	@ (800222c <APPE_SysUserEvtRx+0x1e4>)
 8002116:	f013 fcb9 	bl	8015a8c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f8e0 	bl	80022e0 <APPE_SysEvtReadyProcessing>
    break;
 8002120:	e073      	b.n	800220a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8002122:	483c      	ldr	r0, [pc, #240]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 8002124:	f00f fd7e 	bl	8011c24 <DbgTraceGetFileName>
 8002128:	4601      	mov	r1, r0
 800212a:	f240 1373 	movw	r3, #371	@ 0x173
 800212e:	4a3a      	ldr	r2, [pc, #232]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 8002130:	483a      	ldr	r0, [pc, #232]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 8002132:	f013 fcab 	bl	8015a8c <iprintf>
 8002136:	483e      	ldr	r0, [pc, #248]	@ (8002230 <APPE_SysUserEvtRx+0x1e8>)
 8002138:	f013 fca8 	bl	8015a8c <iprintf>
    APPE_SysEvtError(pPayload);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f885 	bl	800224c <APPE_SysEvtError>
    break;
 8002142:	e062      	b.n	800220a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8002144:	4833      	ldr	r0, [pc, #204]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 8002146:	f00f fd6d 	bl	8011c24 <DbgTraceGetFileName>
 800214a:	4601      	mov	r1, r0
 800214c:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8002150:	4a31      	ldr	r2, [pc, #196]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 8002152:	4832      	ldr	r0, [pc, #200]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 8002154:	f013 fc9a 	bl	8015a8c <iprintf>
 8002158:	4836      	ldr	r0, [pc, #216]	@ (8002234 <APPE_SysUserEvtRx+0x1ec>)
 800215a:	f013 fd07 	bl	8015b6c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800215e:	482d      	ldr	r0, [pc, #180]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 8002160:	f00f fd60 	bl	8011c24 <DbgTraceGetFileName>
 8002164:	4601      	mov	r1, r0
 8002166:	f240 1379 	movw	r3, #377	@ 0x179
 800216a:	4a2b      	ldr	r2, [pc, #172]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 800216c:	482b      	ldr	r0, [pc, #172]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 800216e:	f013 fc8d 	bl	8015a8c <iprintf>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	3302      	adds	r3, #2
 8002176:	6819      	ldr	r1, [r3, #0]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	3302      	adds	r3, #2
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	461a      	mov	r2, r3
 8002180:	482d      	ldr	r0, [pc, #180]	@ (8002238 <APPE_SysUserEvtRx+0x1f0>)
 8002182:	f013 fc83 	bl	8015a8c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8002186:	e040      	b.n	800220a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8002188:	4822      	ldr	r0, [pc, #136]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 800218a:	f00f fd4b 	bl	8011c24 <DbgTraceGetFileName>
 800218e:	4601      	mov	r1, r0
 8002190:	f240 137f 	movw	r3, #383	@ 0x17f
 8002194:	4a20      	ldr	r2, [pc, #128]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 8002196:	4821      	ldr	r0, [pc, #132]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 8002198:	f013 fc78 	bl	8015a8c <iprintf>
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	3302      	adds	r3, #2
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	4825      	ldr	r0, [pc, #148]	@ (800223c <APPE_SysUserEvtRx+0x1f4>)
 80021a6:	f013 fc71 	bl	8015a8c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 80021aa:	e02e      	b.n	800220a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 80021ac:	4819      	ldr	r0, [pc, #100]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 80021ae:	f00f fd39 	bl	8011c24 <DbgTraceGetFileName>
 80021b2:	4601      	mov	r1, r0
 80021b4:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 80021b8:	4a17      	ldr	r2, [pc, #92]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 80021ba:	4818      	ldr	r0, [pc, #96]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 80021bc:	f013 fc66 	bl	8015a8c <iprintf>
 80021c0:	481f      	ldr	r0, [pc, #124]	@ (8002240 <APPE_SysUserEvtRx+0x1f8>)
 80021c2:	f013 fc63 	bl	8015a8c <iprintf>
    break;
 80021c6:	e020      	b.n	800220a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 80021c8:	4812      	ldr	r0, [pc, #72]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 80021ca:	f00f fd2b 	bl	8011c24 <DbgTraceGetFileName>
 80021ce:	4601      	mov	r1, r0
 80021d0:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 80021d4:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 80021d6:	4811      	ldr	r0, [pc, #68]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 80021d8:	f013 fc58 	bl	8015a8c <iprintf>
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	3302      	adds	r3, #2
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4619      	mov	r1, r3
 80021e4:	4817      	ldr	r0, [pc, #92]	@ (8002244 <APPE_SysUserEvtRx+0x1fc>)
 80021e6:	f013 fc51 	bl	8015a8c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80021ea:	e00e      	b.n	800220a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80021ec:	4809      	ldr	r0, [pc, #36]	@ (8002214 <APPE_SysUserEvtRx+0x1cc>)
 80021ee:	f00f fd19 	bl	8011c24 <DbgTraceGetFileName>
 80021f2:	4601      	mov	r1, r0
 80021f4:	f240 138d 	movw	r3, #397	@ 0x18d
 80021f8:	4a07      	ldr	r2, [pc, #28]	@ (8002218 <APPE_SysUserEvtRx+0x1d0>)
 80021fa:	4808      	ldr	r0, [pc, #32]	@ (800221c <APPE_SysUserEvtRx+0x1d4>)
 80021fc:	f013 fc46 	bl	8015a8c <iprintf>
 8002200:	4811      	ldr	r0, [pc, #68]	@ (8002248 <APPE_SysUserEvtRx+0x200>)
 8002202:	f013 fc43 	bl	8015a8c <iprintf>
    break;
 8002206:	e000      	b.n	800220a <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8002208:	bf00      	nop
  }

  return;
 800220a:	bf00      	nop
}
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08016d64 	.word	0x08016d64
 8002218:	08018848 	.word	0x08018848
 800221c:	08016d7c 	.word	0x08016d7c
 8002220:	08016d90 	.word	0x08016d90
 8002224:	08016db4 	.word	0x08016db4
 8002228:	08016dd0 	.word	0x08016dd0
 800222c:	08016de8 	.word	0x08016de8
 8002230:	08016e08 	.word	0x08016e08
 8002234:	08016e2c 	.word	0x08016e2c
 8002238:	08016e7c 	.word	0x08016e7c
 800223c:	08016ea4 	.word	0x08016ea4
 8002240:	08016ee0 	.word	0x08016ee0
 8002244:	08016f04 	.word	0x08016f04
 8002248:	08016f40 	.word	0x08016f40

0800224c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	330b      	adds	r3, #11
 800225a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3302      	adds	r3, #2
 8002260:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8002262:	4819      	ldr	r0, [pc, #100]	@ (80022c8 <APPE_SysEvtError+0x7c>)
 8002264:	f00f fcde 	bl	8011c24 <DbgTraceGetFileName>
 8002268:	4601      	mov	r1, r0
 800226a:	f240 13a5 	movw	r3, #421	@ 0x1a5
 800226e:	4a17      	ldr	r2, [pc, #92]	@ (80022cc <APPE_SysEvtError+0x80>)
 8002270:	4817      	ldr	r0, [pc, #92]	@ (80022d0 <APPE_SysEvtError+0x84>)
 8002272:	f013 fc0b 	bl	8015a8c <iprintf>
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	4815      	ldr	r0, [pc, #84]	@ (80022d4 <APPE_SysEvtError+0x88>)
 800227e:	f013 fc05 	bl	8015a8c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10d      	bne.n	80022a6 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800228a:	480f      	ldr	r0, [pc, #60]	@ (80022c8 <APPE_SysEvtError+0x7c>)
 800228c:	f00f fcca 	bl	8011c24 <DbgTraceGetFileName>
 8002290:	4601      	mov	r1, r0
 8002292:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8002296:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <APPE_SysEvtError+0x80>)
 8002298:	480d      	ldr	r0, [pc, #52]	@ (80022d0 <APPE_SysEvtError+0x84>)
 800229a:	f013 fbf7 	bl	8015a8c <iprintf>
 800229e:	480e      	ldr	r0, [pc, #56]	@ (80022d8 <APPE_SysEvtError+0x8c>)
 80022a0:	f013 fc64 	bl	8015b6c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80022a4:	e00d      	b.n	80022c2 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80022a6:	4808      	ldr	r0, [pc, #32]	@ (80022c8 <APPE_SysEvtError+0x7c>)
 80022a8:	f00f fcbc 	bl	8011c24 <DbgTraceGetFileName>
 80022ac:	4601      	mov	r1, r0
 80022ae:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 80022b2:	4a06      	ldr	r2, [pc, #24]	@ (80022cc <APPE_SysEvtError+0x80>)
 80022b4:	4806      	ldr	r0, [pc, #24]	@ (80022d0 <APPE_SysEvtError+0x84>)
 80022b6:	f013 fbe9 	bl	8015a8c <iprintf>
 80022ba:	4808      	ldr	r0, [pc, #32]	@ (80022dc <APPE_SysEvtError+0x90>)
 80022bc:	f013 fc56 	bl	8015b6c <puts>
  return;
 80022c0:	bf00      	nop
}
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	08016d64 	.word	0x08016d64
 80022cc:	0801885c 	.word	0x0801885c
 80022d0:	08016d7c 	.word	0x08016d7c
 80022d4:	08016f64 	.word	0x08016f64
 80022d8:	08016f94 	.word	0x08016f94
 80022dc:	08016fd0 	.word	0x08016fd0

080022e0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80022e8:	f107 0308 	add.w	r3, r7, #8
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	330b      	adds	r3, #11
 8002304:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3302      	adds	r3, #2
 800230a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d146      	bne.n	80023a2 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8002314:	4836      	ldr	r0, [pc, #216]	@ (80023f0 <APPE_SysEvtReadyProcessing+0x110>)
 8002316:	f00f fc85 	bl	8011c24 <DbgTraceGetFileName>
 800231a:	4601      	mov	r1, r0
 800231c:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002320:	4a34      	ldr	r2, [pc, #208]	@ (80023f4 <APPE_SysEvtReadyProcessing+0x114>)
 8002322:	4835      	ldr	r0, [pc, #212]	@ (80023f8 <APPE_SysEvtReadyProcessing+0x118>)
 8002324:	f013 fbb2 	bl	8015a8c <iprintf>
 8002328:	4834      	ldr	r0, [pc, #208]	@ (80023fc <APPE_SysEvtReadyProcessing+0x11c>)
 800232a:	f013 fc1f 	bl	8015b6c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800232e:	f7ff fb91 	bl	8001a54 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002332:	230f      	movs	r3, #15
 8002334:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002336:	237f      	movs	r3, #127	@ 0x7f
 8002338:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 800233a:	f7ff fce3 	bl	8001d04 <LL_DBGMCU_GetRevisionID>
 800233e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002340:	482b      	ldr	r0, [pc, #172]	@ (80023f0 <APPE_SysEvtReadyProcessing+0x110>)
 8002342:	f00f fc6f 	bl	8011c24 <DbgTraceGetFileName>
 8002346:	4601      	mov	r1, r0
 8002348:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 800234c:	4a29      	ldr	r2, [pc, #164]	@ (80023f4 <APPE_SysEvtReadyProcessing+0x114>)
 800234e:	482a      	ldr	r0, [pc, #168]	@ (80023f8 <APPE_SysEvtReadyProcessing+0x118>)
 8002350:	f013 fb9c 	bl	8015a8c <iprintf>
 8002354:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002356:	482a      	ldr	r0, [pc, #168]	@ (8002400 <APPE_SysEvtReadyProcessing+0x120>)
 8002358:	f013 fb98 	bl	8015a8c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800235e:	b29b      	uxth	r3, r3
 8002360:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002362:	f7ff fcc1 	bl	8001ce8 <LL_DBGMCU_GetDeviceID>
 8002366:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8002368:	4821      	ldr	r0, [pc, #132]	@ (80023f0 <APPE_SysEvtReadyProcessing+0x110>)
 800236a:	f00f fc5b 	bl	8011c24 <DbgTraceGetFileName>
 800236e:	4601      	mov	r1, r0
 8002370:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8002374:	4a1f      	ldr	r2, [pc, #124]	@ (80023f4 <APPE_SysEvtReadyProcessing+0x114>)
 8002376:	4820      	ldr	r0, [pc, #128]	@ (80023f8 <APPE_SysEvtReadyProcessing+0x118>)
 8002378:	f013 fb88 	bl	8015a8c <iprintf>
 800237c:	6a39      	ldr	r1, [r7, #32]
 800237e:	4821      	ldr	r0, [pc, #132]	@ (8002404 <APPE_SysEvtReadyProcessing+0x124>)
 8002380:	f013 fb84 	bl	8015a8c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	b29b      	uxth	r3, r3
 8002388:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f00e fe68 	bl	8011064 <SHCI_C2_Config>

    APP_BLE_Init();
 8002394:	f010 f9e2 	bl	801275c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002398:	2100      	movs	r1, #0
 800239a:	2001      	movs	r0, #1
 800239c:	f013 f84a 	bl	8015434 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80023a0:	e022      	b.n	80023e8 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d110      	bne.n	80023cc <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80023aa:	4811      	ldr	r0, [pc, #68]	@ (80023f0 <APPE_SysEvtReadyProcessing+0x110>)
 80023ac:	f00f fc3a 	bl	8011c24 <DbgTraceGetFileName>
 80023b0:	4601      	mov	r1, r0
 80023b2:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 80023b6:	4a0f      	ldr	r2, [pc, #60]	@ (80023f4 <APPE_SysEvtReadyProcessing+0x114>)
 80023b8:	480f      	ldr	r0, [pc, #60]	@ (80023f8 <APPE_SysEvtReadyProcessing+0x118>)
 80023ba:	f013 fb67 	bl	8015a8c <iprintf>
 80023be:	4812      	ldr	r0, [pc, #72]	@ (8002408 <APPE_SysEvtReadyProcessing+0x128>)
 80023c0:	f013 fb64 	bl	8015a8c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
  return;
 80023ca:	e00d      	b.n	80023e8 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80023cc:	4808      	ldr	r0, [pc, #32]	@ (80023f0 <APPE_SysEvtReadyProcessing+0x110>)
 80023ce:	f00f fc29 	bl	8011c24 <DbgTraceGetFileName>
 80023d2:	4601      	mov	r1, r0
 80023d4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 80023d8:	4a06      	ldr	r2, [pc, #24]	@ (80023f4 <APPE_SysEvtReadyProcessing+0x114>)
 80023da:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <APPE_SysEvtReadyProcessing+0x118>)
 80023dc:	f013 fb56 	bl	8015a8c <iprintf>
 80023e0:	480a      	ldr	r0, [pc, #40]	@ (800240c <APPE_SysEvtReadyProcessing+0x12c>)
 80023e2:	f013 fb53 	bl	8015a8c <iprintf>
  return;
 80023e6:	bf00      	nop
}
 80023e8:	3728      	adds	r7, #40	@ 0x28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	08016d64 	.word	0x08016d64
 80023f4:	08018870 	.word	0x08018870
 80023f8:	08016d7c 	.word	0x08016d7c
 80023fc:	08017008 	.word	0x08017008
 8002400:	08017024 	.word	0x08017024
 8002404:	08017048 	.word	0x08017048
 8002408:	08017068 	.word	0x08017068
 800240c:	0801709c 	.word	0x0801709c

08002410 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002418:	f002 f87e 	bl	8004518 <HAL_GetTick>
 800241c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d00a      	beq.n	8002440 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800242a:	f002 f88d 	bl	8004548 <HAL_GetTickFreq>
 800242e:	4603      	mov	r3, r0
 8002430:	461a      	mov	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	4413      	add	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002438:	e002      	b.n	8002440 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800243a:	f7ff fcd3 	bl	8001de4 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 800243e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002440:	f002 f86a 	bl	8004518 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	429a      	cmp	r2, r3
 800244e:	d8f4      	bhi.n	800243a <HAL_Delay+0x2a>
  }
}
 8002450:	bf00      	nop
 8002452:	bf00      	nop
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800245e:	f04f 30ff 	mov.w	r0, #4294967295
 8002462:	f013 f817 	bl	8015494 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}

0800246a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800246e:	bf00      	nop
}
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002482:	f04f 30ff 	mov.w	r0, #4294967295
 8002486:	f013 f805 	bl	8015494 <UTIL_SEQ_Run>
  return;
 800248a:	bf00      	nop
}
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800249a:	2100      	movs	r1, #0
 800249c:	2040      	movs	r0, #64	@ 0x40
 800249e:	f013 f917 	bl	80156d0 <UTIL_SEQ_SetTask>
  return;
 80024a2:	bf00      	nop
}
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80024b2:	2002      	movs	r0, #2
 80024b4:	f013 f978 	bl	80157a8 <UTIL_SEQ_SetEvt>
  return;
 80024b8:	bf00      	nop
}
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80024c8:	2002      	movs	r0, #2
 80024ca:	f013 f98d 	bl	80157e8 <UTIL_SEQ_WaitEvt>
  return;
 80024ce:	bf00      	nop
}
 80024d0:	3708      	adds	r7, #8
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <Debug_Init>:



//-----------------------------------------------------------------------------------
void Debug_Init (void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

	DIAG ("\t\tDebug initialised\r\n");
 80024dc:	4803      	ldr	r0, [pc, #12]	@ (80024ec <Debug_Init+0x14>)
 80024de:	f000 f823 	bl	8002528 <DIAG>
	HAL_Delay(10);
 80024e2:	200a      	movs	r0, #10
 80024e4:	f7ff ff94 	bl	8002410 <HAL_Delay>
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	080170d0 	.word	0x080170d0

080024f0 <Debug_Control>:

//-----------------------------------------------------------------------------------
void Debug_Control (void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0

#ifndef BLE_Debug
#ifdef DATA_DEBUG_EN

		#ifndef IMU_ENABLE
			if ( tsDebug.bReleaseAFEData )
 80024f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <Debug_Control+0x30>)
 80024f6:	f893 3264 	ldrb.w	r3, [r3, #612]	@ 0x264
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00e      	beq.n	800251c <Debug_Control+0x2c>
			{
				DIAG ( "%d,%d\r\n", tsDebug.i16TxMCG, tsDebug.i16TxMCG );
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <Debug_Control+0x30>)
 8002500:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
 8002504:	4619      	mov	r1, r3
 8002506:	4b06      	ldr	r3, [pc, #24]	@ (8002520 <Debug_Control+0x30>)
 8002508:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
 800250c:	461a      	mov	r2, r3
 800250e:	4805      	ldr	r0, [pc, #20]	@ (8002524 <Debug_Control+0x34>)
 8002510:	f000 f80a 	bl	8002528 <DIAG>
				tsDebug.bReleaseAFEData= false;
 8002514:	4b02      	ldr	r3, [pc, #8]	@ (8002520 <Debug_Control+0x30>)
 8002516:	2200      	movs	r2, #0
 8002518:	f883 2264 	strb.w	r2, [r3, #612]	@ 0x264
			}
		#endif

#endif
#endif
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000990 	.word	0x20000990
 8002524:	080170e8 	.word	0x080170e8

08002528 <DIAG>:
   // HAL_UART_Transmit_DMA(&huart1, (uint8_t*)buffer, strlen(buffer) );
   // HAL_UART_DMAResume(&huart1);
}
#else

void DIAG(const char *fmt, ...) {
 8002528:	b40f      	push	{r0, r1, r2, r3}
 800252a:	b580      	push	{r7, lr}
 800252c:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8002530:	af00      	add	r7, sp, #0
    char buffer[4048];
    va_list args;
    va_start(args, fmt);
 8002532:	f607 72e4 	addw	r2, r7, #4068	@ 0xfe4
 8002536:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 800253a:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 800253e:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002540:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002544:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002548:	f107 0008 	add.w	r0, r7, #8
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	@ 0xfe0
 8002552:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8002556:	f013 fb7f 	bl	8015c58 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800255a:	f107 0308 	add.w	r3, r7, #8
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd fe0e 	bl	8000180 <strlen>
 8002564:	4603      	mov	r3, r0
 8002566:	b29a      	uxth	r2, r3
 8002568:	f107 0308 	add.w	r3, r7, #8
 800256c:	4611      	mov	r1, r2
 800256e:	4618      	mov	r0, r3
 8002570:	f012 faac 	bl	8014acc <CDC_Transmit_FS>
}
 8002574:	bf00      	nop
 8002576:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 800257a:	46bd      	mov	sp, r7
 800257c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002580:	b004      	add	sp, #16
 8002582:	4770      	bx	lr

08002584 <HAL_GPIO_EXTI_Callback>:
	HAL_Delay (10);
}

//----------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	80fb      	strh	r3, [r7, #6]

	//----------------------------------------------
	if (GPIO_Pin == ADS_DRDY_Pin)
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	2b80      	cmp	r3, #128	@ 0x80
 8002592:	d105      	bne.n	80025a0 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ADS.DRDY = true;
 8002594:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <HAL_GPIO_EXTI_Callback+0x58>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(ADS_DRDY_Pin);
 800259a:	4b11      	ldr	r3, [pc, #68]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x5c>)
 800259c:	2280      	movs	r2, #128	@ 0x80
 800259e:	60da      	str	r2, [r3, #12]
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT1_Pin)
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	2b10      	cmp	r3, #16
 80025a4:	d109      	bne.n	80025ba <HAL_GPIO_EXTI_Callback+0x36>
	{
		IMU.bInt1 = true;
 80025a6:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x60>)
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 20ea 	strb.w	r2, [r3, #234]	@ 0xea
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 80025ae:	4b0c      	ldr	r3, [pc, #48]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025b0:	2210      	movs	r2, #16
 80025b2:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT1 \r\n");
 80025b4:	480c      	ldr	r0, [pc, #48]	@ (80025e8 <HAL_GPIO_EXTI_Callback+0x64>)
 80025b6:	f7ff ffb7 	bl	8002528 <DIAG>
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT2_Pin)
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	2b20      	cmp	r3, #32
 80025be:	d109      	bne.n	80025d4 <HAL_GPIO_EXTI_Callback+0x50>
	{
		IMU.bInt2 = true;
 80025c0:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x60>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 20eb 	strb.w	r2, [r3, #235]	@ 0xeb
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT2_Pin);
 80025c8:	4b05      	ldr	r3, [pc, #20]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025ca:	2220      	movs	r2, #32
 80025cc:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT2 \r\n");
 80025ce:	4807      	ldr	r0, [pc, #28]	@ (80025ec <HAL_GPIO_EXTI_Callback+0x68>)
 80025d0:	f7ff ffaa 	bl	8002528 <DIAG>
	}

}
 80025d4:	bf00      	nop
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	20000208 	.word	0x20000208
 80025e0:	58000800 	.word	0x58000800
 80025e4:	20000658 	.word	0x20000658
 80025e8:	08017108 	.word	0x08017108
 80025ec:	08017118 	.word	0x08017118

080025f0 <LL_EXTI_EnableIT_0_31>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025f8:	4b06      	ldr	r3, [pc, #24]	@ (8002614 <LL_EXTI_EnableIT_0_31+0x24>)
 80025fa:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80025fe:	4905      	ldr	r1, [pc, #20]	@ (8002614 <LL_EXTI_EnableIT_0_31+0x24>)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	58000800 	.word	0x58000800

08002618 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002620:	4b05      	ldr	r3, [pc, #20]	@ (8002638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4904      	ldr	r1, [pc, #16]	@ (8002638 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4313      	orrs	r3, r2
 800262a:	600b      	str	r3, [r1, #0]

}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	58000800 	.word	0x58000800

0800263c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002642:	4b0d      	ldr	r3, [pc, #52]	@ (8002678 <ReadRtcSsrValue+0x3c>)
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	b29b      	uxth	r3, r3
 8002648:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800264a:	4b0b      	ldr	r3, [pc, #44]	@ (8002678 <ReadRtcSsrValue+0x3c>)
 800264c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800264e:	b29b      	uxth	r3, r3
 8002650:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002652:	e005      	b.n	8002660 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002658:	4b07      	ldr	r3, [pc, #28]	@ (8002678 <ReadRtcSsrValue+0x3c>)
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	b29b      	uxth	r3, r3
 800265e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d1f5      	bne.n	8002654 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002668:	683b      	ldr	r3, [r7, #0]
}
 800266a:	4618      	mov	r0, r3
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	40002800 	.word	0x40002800

0800267c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	4603      	mov	r3, r0
 8002684:	460a      	mov	r2, r1
 8002686:	71fb      	strb	r3, [r7, #7]
 8002688:	4613      	mov	r3, r2
 800268a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800268c:	79ba      	ldrb	r2, [r7, #6]
 800268e:	491d      	ldr	r1, [pc, #116]	@ (8002704 <LinkTimerAfter+0x88>)
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	440b      	add	r3, r1
 800269a:	3315      	adds	r3, #21
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d009      	beq.n	80026ba <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 80026a6:	7bfa      	ldrb	r2, [r7, #15]
 80026a8:	4916      	ldr	r1, [pc, #88]	@ (8002704 <LinkTimerAfter+0x88>)
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	00db      	lsls	r3, r3, #3
 80026b2:	440b      	add	r3, r1
 80026b4:	3314      	adds	r3, #20
 80026b6:	79fa      	ldrb	r2, [r7, #7]
 80026b8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 80026ba:	79fa      	ldrb	r2, [r7, #7]
 80026bc:	4911      	ldr	r1, [pc, #68]	@ (8002704 <LinkTimerAfter+0x88>)
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	440b      	add	r3, r1
 80026c8:	3315      	adds	r3, #21
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80026ce:	79fa      	ldrb	r2, [r7, #7]
 80026d0:	490c      	ldr	r1, [pc, #48]	@ (8002704 <LinkTimerAfter+0x88>)
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	440b      	add	r3, r1
 80026dc:	3314      	adds	r3, #20
 80026de:	79ba      	ldrb	r2, [r7, #6]
 80026e0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80026e2:	79ba      	ldrb	r2, [r7, #6]
 80026e4:	4907      	ldr	r1, [pc, #28]	@ (8002704 <LinkTimerAfter+0x88>)
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	440b      	add	r3, r1
 80026f0:	3315      	adds	r3, #21
 80026f2:	79fa      	ldrb	r2, [r7, #7]
 80026f4:	701a      	strb	r2, [r3, #0]

  return;
 80026f6:	bf00      	nop
}
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000bf8 	.word	0x20000bf8

08002708 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	460a      	mov	r2, r1
 8002712:	71fb      	strb	r3, [r7, #7]
 8002714:	4613      	mov	r3, r2
 8002716:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002718:	4b29      	ldr	r3, [pc, #164]	@ (80027c0 <LinkTimerBefore+0xb8>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	b2db      	uxtb	r3, r3
 800271e:	79ba      	ldrb	r2, [r7, #6]
 8002720:	429a      	cmp	r2, r3
 8002722:	d032      	beq.n	800278a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002724:	79ba      	ldrb	r2, [r7, #6]
 8002726:	4927      	ldr	r1, [pc, #156]	@ (80027c4 <LinkTimerBefore+0xbc>)
 8002728:	4613      	mov	r3, r2
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	4413      	add	r3, r2
 800272e:	00db      	lsls	r3, r3, #3
 8002730:	440b      	add	r3, r1
 8002732:	3314      	adds	r3, #20
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	4922      	ldr	r1, [pc, #136]	@ (80027c4 <LinkTimerBefore+0xbc>)
 800273c:	4613      	mov	r3, r2
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	4413      	add	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	440b      	add	r3, r1
 8002746:	3315      	adds	r3, #21
 8002748:	79fa      	ldrb	r2, [r7, #7]
 800274a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800274c:	79fa      	ldrb	r2, [r7, #7]
 800274e:	491d      	ldr	r1, [pc, #116]	@ (80027c4 <LinkTimerBefore+0xbc>)
 8002750:	4613      	mov	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4413      	add	r3, r2
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	440b      	add	r3, r1
 800275a:	3315      	adds	r3, #21
 800275c:	79ba      	ldrb	r2, [r7, #6]
 800275e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002760:	79fa      	ldrb	r2, [r7, #7]
 8002762:	4918      	ldr	r1, [pc, #96]	@ (80027c4 <LinkTimerBefore+0xbc>)
 8002764:	4613      	mov	r3, r2
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	3314      	adds	r3, #20
 8002770:	7bfa      	ldrb	r2, [r7, #15]
 8002772:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002774:	79ba      	ldrb	r2, [r7, #6]
 8002776:	4913      	ldr	r1, [pc, #76]	@ (80027c4 <LinkTimerBefore+0xbc>)
 8002778:	4613      	mov	r3, r2
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	3314      	adds	r3, #20
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002788:	e014      	b.n	80027b4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	490d      	ldr	r1, [pc, #52]	@ (80027c4 <LinkTimerBefore+0xbc>)
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	3315      	adds	r3, #21
 800279a:	79ba      	ldrb	r2, [r7, #6]
 800279c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800279e:	79ba      	ldrb	r2, [r7, #6]
 80027a0:	4908      	ldr	r1, [pc, #32]	@ (80027c4 <LinkTimerBefore+0xbc>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	440b      	add	r3, r1
 80027ac:	3314      	adds	r3, #20
 80027ae:	79fa      	ldrb	r2, [r7, #7]
 80027b0:	701a      	strb	r2, [r3, #0]
  return;
 80027b2:	bf00      	nop
}
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000c88 	.word	0x20000c88
 80027c4:	20000bf8 	.word	0x20000bf8

080027c8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80027d2:	4b4e      	ldr	r3, [pc, #312]	@ (800290c <linkTimer+0x144>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b06      	cmp	r3, #6
 80027da:	d118      	bne.n	800280e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80027dc:	4b4b      	ldr	r3, [pc, #300]	@ (800290c <linkTimer+0x144>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b4b      	ldr	r3, [pc, #300]	@ (8002910 <linkTimer+0x148>)
 80027e4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80027e6:	4a49      	ldr	r2, [pc, #292]	@ (800290c <linkTimer+0x144>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80027ec:	79fa      	ldrb	r2, [r7, #7]
 80027ee:	4949      	ldr	r1, [pc, #292]	@ (8002914 <linkTimer+0x14c>)
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	440b      	add	r3, r1
 80027fa:	3315      	adds	r3, #21
 80027fc:	2206      	movs	r2, #6
 80027fe:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002800:	4b45      	ldr	r3, [pc, #276]	@ (8002918 <linkTimer+0x150>)
 8002802:	f04f 32ff 	mov.w	r2, #4294967295
 8002806:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	81fb      	strh	r3, [r7, #14]
 800280c:	e078      	b.n	8002900 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800280e:	f000 f909 	bl	8002a24 <ReturnTimeElapsed>
 8002812:	4603      	mov	r3, r0
 8002814:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002816:	79fa      	ldrb	r2, [r7, #7]
 8002818:	493e      	ldr	r1, [pc, #248]	@ (8002914 <linkTimer+0x14c>)
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	440b      	add	r3, r1
 8002824:	3308      	adds	r3, #8
 8002826:	6819      	ldr	r1, [r3, #0]
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	79fa      	ldrb	r2, [r7, #7]
 800282c:	4419      	add	r1, r3
 800282e:	4839      	ldr	r0, [pc, #228]	@ (8002914 <linkTimer+0x14c>)
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4403      	add	r3, r0
 800283a:	3308      	adds	r3, #8
 800283c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800283e:	79fa      	ldrb	r2, [r7, #7]
 8002840:	4934      	ldr	r1, [pc, #208]	@ (8002914 <linkTimer+0x14c>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	3308      	adds	r3, #8
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002852:	4b2e      	ldr	r3, [pc, #184]	@ (800290c <linkTimer+0x144>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	b2db      	uxtb	r3, r3
 8002858:	4619      	mov	r1, r3
 800285a:	4a2e      	ldr	r2, [pc, #184]	@ (8002914 <linkTimer+0x14c>)
 800285c:	460b      	mov	r3, r1
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	440b      	add	r3, r1
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	3308      	adds	r3, #8
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	429a      	cmp	r2, r3
 800286e:	d337      	bcc.n	80028e0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002870:	4b26      	ldr	r3, [pc, #152]	@ (800290c <linkTimer+0x144>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002876:	7b7a      	ldrb	r2, [r7, #13]
 8002878:	4926      	ldr	r1, [pc, #152]	@ (8002914 <linkTimer+0x14c>)
 800287a:	4613      	mov	r3, r2
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	00db      	lsls	r3, r3, #3
 8002882:	440b      	add	r3, r1
 8002884:	3315      	adds	r3, #21
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800288a:	e013      	b.n	80028b4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800288c:	7b7a      	ldrb	r2, [r7, #13]
 800288e:	4921      	ldr	r1, [pc, #132]	@ (8002914 <linkTimer+0x14c>)
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	440b      	add	r3, r1
 800289a:	3315      	adds	r3, #21
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 80028a0:	7b7a      	ldrb	r2, [r7, #13]
 80028a2:	491c      	ldr	r1, [pc, #112]	@ (8002914 <linkTimer+0x14c>)
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	440b      	add	r3, r1
 80028ae:	3315      	adds	r3, #21
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80028b4:	7b3b      	ldrb	r3, [r7, #12]
 80028b6:	2b06      	cmp	r3, #6
 80028b8:	d00b      	beq.n	80028d2 <linkTimer+0x10a>
 80028ba:	7b3a      	ldrb	r2, [r7, #12]
 80028bc:	4915      	ldr	r1, [pc, #84]	@ (8002914 <linkTimer+0x14c>)
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	440b      	add	r3, r1
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d2dc      	bcs.n	800288c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80028d2:	7b7a      	ldrb	r2, [r7, #13]
 80028d4:	79fb      	ldrb	r3, [r7, #7]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff fecf 	bl	800267c <LinkTimerAfter>
 80028de:	e00f      	b.n	8002900 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80028e0:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <linkTimer+0x144>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff0c 	bl	8002708 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80028f0:	4b06      	ldr	r3, [pc, #24]	@ (800290c <linkTimer+0x144>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <linkTimer+0x148>)
 80028f8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80028fa:	4a04      	ldr	r2, [pc, #16]	@ (800290c <linkTimer+0x144>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002900:	89fb      	ldrh	r3, [r7, #14]
}
 8002902:	4618      	mov	r0, r3
 8002904:	3710      	adds	r7, #16
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20000c88 	.word	0x20000c88
 8002910:	20000c89 	.word	0x20000c89
 8002914:	20000bf8 	.word	0x20000bf8
 8002918:	20000c8c 	.word	0x20000c8c

0800291c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	460a      	mov	r2, r1
 8002926:	71fb      	strb	r3, [r7, #7]
 8002928:	4613      	mov	r3, r2
 800292a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800292c:	4b39      	ldr	r3, [pc, #228]	@ (8002a14 <UnlinkTimer+0xf8>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	b2db      	uxtb	r3, r3
 8002932:	79fa      	ldrb	r2, [r7, #7]
 8002934:	429a      	cmp	r2, r3
 8002936:	d111      	bne.n	800295c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002938:	4b36      	ldr	r3, [pc, #216]	@ (8002a14 <UnlinkTimer+0xf8>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	b2da      	uxtb	r2, r3
 800293e:	4b36      	ldr	r3, [pc, #216]	@ (8002a18 <UnlinkTimer+0xfc>)
 8002940:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002942:	79fa      	ldrb	r2, [r7, #7]
 8002944:	4935      	ldr	r1, [pc, #212]	@ (8002a1c <UnlinkTimer+0x100>)
 8002946:	4613      	mov	r3, r2
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	4413      	add	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	440b      	add	r3, r1
 8002950:	3315      	adds	r3, #21
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b2f      	ldr	r3, [pc, #188]	@ (8002a14 <UnlinkTimer+0xf8>)
 8002958:	701a      	strb	r2, [r3, #0]
 800295a:	e03e      	b.n	80029da <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800295c:	79fa      	ldrb	r2, [r7, #7]
 800295e:	492f      	ldr	r1, [pc, #188]	@ (8002a1c <UnlinkTimer+0x100>)
 8002960:	4613      	mov	r3, r2
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3314      	adds	r3, #20
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002970:	79fa      	ldrb	r2, [r7, #7]
 8002972:	492a      	ldr	r1, [pc, #168]	@ (8002a1c <UnlinkTimer+0x100>)
 8002974:	4613      	mov	r3, r2
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	3315      	adds	r3, #21
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002984:	79f9      	ldrb	r1, [r7, #7]
 8002986:	7bfa      	ldrb	r2, [r7, #15]
 8002988:	4824      	ldr	r0, [pc, #144]	@ (8002a1c <UnlinkTimer+0x100>)
 800298a:	460b      	mov	r3, r1
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	440b      	add	r3, r1
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	4403      	add	r3, r0
 8002994:	3315      	adds	r3, #21
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	b2d8      	uxtb	r0, r3
 800299a:	4920      	ldr	r1, [pc, #128]	@ (8002a1c <UnlinkTimer+0x100>)
 800299c:	4613      	mov	r3, r2
 800299e:	005b      	lsls	r3, r3, #1
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	3315      	adds	r3, #21
 80029a8:	4602      	mov	r2, r0
 80029aa:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80029ac:	7bbb      	ldrb	r3, [r7, #14]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d013      	beq.n	80029da <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80029b2:	79f9      	ldrb	r1, [r7, #7]
 80029b4:	7bba      	ldrb	r2, [r7, #14]
 80029b6:	4819      	ldr	r0, [pc, #100]	@ (8002a1c <UnlinkTimer+0x100>)
 80029b8:	460b      	mov	r3, r1
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	440b      	add	r3, r1
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	4403      	add	r3, r0
 80029c2:	3314      	adds	r3, #20
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b2d8      	uxtb	r0, r3
 80029c8:	4914      	ldr	r1, [pc, #80]	@ (8002a1c <UnlinkTimer+0x100>)
 80029ca:	4613      	mov	r3, r2
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	4413      	add	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	440b      	add	r3, r1
 80029d4:	3314      	adds	r3, #20
 80029d6:	4602      	mov	r2, r0
 80029d8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80029da:	79fa      	ldrb	r2, [r7, #7]
 80029dc:	490f      	ldr	r1, [pc, #60]	@ (8002a1c <UnlinkTimer+0x100>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	440b      	add	r3, r1
 80029e8:	330c      	adds	r3, #12
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80029ee:	4b09      	ldr	r3, [pc, #36]	@ (8002a14 <UnlinkTimer+0xf8>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b06      	cmp	r3, #6
 80029f6:	d107      	bne.n	8002a08 <UnlinkTimer+0xec>
 80029f8:	79bb      	ldrb	r3, [r7, #6]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d104      	bne.n	8002a08 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <UnlinkTimer+0x104>)
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	601a      	str	r2, [r3, #0]
  }

  return;
 8002a06:	bf00      	nop
 8002a08:	bf00      	nop
}
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	20000c88 	.word	0x20000c88
 8002a18:	20000c89 	.word	0x20000c89
 8002a1c:	20000bf8 	.word	0x20000bf8
 8002a20:	20000c8c 	.word	0x20000c8c

08002a24 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <ReturnTimeElapsed+0x70>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d026      	beq.n	8002a82 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002a34:	f7ff fe02 	bl	800263c <ReadRtcSsrValue>
 8002a38:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002a3a:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <ReturnTimeElapsed+0x70>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d805      	bhi.n	8002a50 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002a44:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <ReturnTimeElapsed+0x70>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	607b      	str	r3, [r7, #4]
 8002a4e:	e00a      	b.n	8002a66 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002a50:	4b11      	ldr	r3, [pc, #68]	@ (8002a98 <ReturnTimeElapsed+0x74>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	461a      	mov	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8002a94 <ReturnTimeElapsed+0x70>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002a66:	4b0d      	ldr	r3, [pc, #52]	@ (8002a9c <ReturnTimeElapsed+0x78>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002a74:	4b0a      	ldr	r3, [pc, #40]	@ (8002aa0 <ReturnTimeElapsed+0x7c>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	40d3      	lsrs	r3, r2
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	e001      	b.n	8002a86 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	b29b      	uxth	r3, r3
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000c8c 	.word	0x20000c8c
 8002a98:	20000c94 	.word	0x20000c94
 8002a9c:	20000c92 	.word	0x20000c92
 8002aa0:	20000c91 	.word	0x20000c91

08002aa4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d108      	bne.n	8002ac6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002ab4:	f7ff fdc2 	bl	800263c <ReadRtcSsrValue>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a21      	ldr	r2, [pc, #132]	@ (8002b40 <RestartWakeupCounter+0x9c>)
 8002abc:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002abe:	2003      	movs	r0, #3
 8002ac0:	f001 fecb 	bl	800485a <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002ac4:	e039      	b.n	8002b3a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002ac6:	88fb      	ldrh	r3, [r7, #6]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d803      	bhi.n	8002ad4 <RestartWakeupCounter+0x30>
 8002acc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <RestartWakeupCounter+0xa0>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d002      	beq.n	8002ada <RestartWakeupCounter+0x36>
      Value -= 1;
 8002ad4:	88fb      	ldrh	r3, [r7, #6]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002ada:	bf00      	nop
 8002adc:	4b1a      	ldr	r3, [pc, #104]	@ (8002b48 <RestartWakeupCounter+0xa4>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f8      	beq.n	8002adc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002aea:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <RestartWakeupCounter+0xa4>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b15      	ldr	r3, [pc, #84]	@ (8002b48 <RestartWakeupCounter+0xa4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002afa:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002afc:	4b13      	ldr	r3, [pc, #76]	@ (8002b4c <RestartWakeupCounter+0xa8>)
 8002afe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002b02:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002b04:	2003      	movs	r0, #3
 8002b06:	f001 feb6 	bl	8004876 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002b0a:	4b11      	ldr	r3, [pc, #68]	@ (8002b50 <RestartWakeupCounter+0xac>)
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	041b      	lsls	r3, r3, #16
 8002b12:	88fa      	ldrh	r2, [r7, #6]
 8002b14:	490e      	ldr	r1, [pc, #56]	@ (8002b50 <RestartWakeupCounter+0xac>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002b1a:	f7ff fd8f 	bl	800263c <ReadRtcSsrValue>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	4a07      	ldr	r2, [pc, #28]	@ (8002b40 <RestartWakeupCounter+0x9c>)
 8002b22:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002b24:	4b08      	ldr	r3, [pc, #32]	@ (8002b48 <RestartWakeupCounter+0xa4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	4b07      	ldr	r3, [pc, #28]	@ (8002b48 <RestartWakeupCounter+0xa4>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b32:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002b34:	f3af 8000 	nop.w
  return ;
 8002b38:	bf00      	nop
}
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000c8c 	.word	0x20000c8c
 8002b44:	20000c91 	.word	0x20000c91
 8002b48:	20000d70 	.word	0x20000d70
 8002b4c:	58000800 	.word	0x58000800
 8002b50:	40002800 	.word	0x40002800

08002b54 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b084      	sub	sp, #16
 8002b58:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002b5a:	4b45      	ldr	r3, [pc, #276]	@ (8002c70 <RescheduleTimerList+0x11c>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b66:	d107      	bne.n	8002b78 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002b68:	bf00      	nop
 8002b6a:	4b42      	ldr	r3, [pc, #264]	@ (8002c74 <RescheduleTimerList+0x120>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f8      	bne.n	8002b6a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002b78:	4b3e      	ldr	r3, [pc, #248]	@ (8002c74 <RescheduleTimerList+0x120>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c74 <RescheduleTimerList+0x120>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b86:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002b88:	4b3b      	ldr	r3, [pc, #236]	@ (8002c78 <RescheduleTimerList+0x124>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	493a      	ldr	r1, [pc, #232]	@ (8002c7c <RescheduleTimerList+0x128>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	005b      	lsls	r3, r3, #1
 8002b96:	4413      	add	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	440b      	add	r3, r1
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002ba2:	f7ff ff3f 	bl	8002a24 <ReturnTimeElapsed>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	68ba      	ldr	r2, [r7, #8]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d205      	bcs.n	8002bbe <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002bb6:	4b32      	ldr	r3, [pc, #200]	@ (8002c80 <RescheduleTimerList+0x12c>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
 8002bbc:	e04d      	b.n	8002c5a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002bbe:	88fb      	ldrh	r3, [r7, #6]
 8002bc0:	4a30      	ldr	r2, [pc, #192]	@ (8002c84 <RescheduleTimerList+0x130>)
 8002bc2:	8812      	ldrh	r2, [r2, #0]
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	4413      	add	r3, r2
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d906      	bls.n	8002bde <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002bd0:	4b2c      	ldr	r3, [pc, #176]	@ (8002c84 <RescheduleTimerList+0x130>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <RescheduleTimerList+0x12c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
 8002bdc:	e03d      	b.n	8002c5a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002be8:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <RescheduleTimerList+0x12c>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002bee:	e034      	b.n	8002c5a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002bf0:	7bfa      	ldrb	r2, [r7, #15]
 8002bf2:	4922      	ldr	r1, [pc, #136]	@ (8002c7c <RescheduleTimerList+0x128>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3308      	adds	r3, #8
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d20a      	bcs.n	8002c1e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002c08:	7bfa      	ldrb	r2, [r7, #15]
 8002c0a:	491c      	ldr	r1, [pc, #112]	@ (8002c7c <RescheduleTimerList+0x128>)
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	3308      	adds	r3, #8
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e013      	b.n	8002c46 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	4916      	ldr	r1, [pc, #88]	@ (8002c7c <RescheduleTimerList+0x128>)
 8002c22:	4613      	mov	r3, r2
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	3308      	adds	r3, #8
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	1ac9      	subs	r1, r1, r3
 8002c36:	4811      	ldr	r0, [pc, #68]	@ (8002c7c <RescheduleTimerList+0x128>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4403      	add	r3, r0
 8002c42:	3308      	adds	r3, #8
 8002c44:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	490c      	ldr	r1, [pc, #48]	@ (8002c7c <RescheduleTimerList+0x128>)
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	005b      	lsls	r3, r3, #1
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	3315      	adds	r3, #21
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c5a:	7bfb      	ldrb	r3, [r7, #15]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d1c7      	bne.n	8002bf0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002c60:	89bb      	ldrh	r3, [r7, #12]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff1e 	bl	8002aa4 <RestartWakeupCounter>

  return ;
 8002c68:	bf00      	nop
}
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40002800 	.word	0x40002800
 8002c74:	20000d70 	.word	0x20000d70
 8002c78:	20000c88 	.word	0x20000c88
 8002c7c:	20000bf8 	.word	0x20000bf8
 8002c80:	20000c90 	.word	0x20000c90
 8002c84:	20000c96 	.word	0x20000c96

08002c88 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	@ 0x28
 8002c8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002c92:	617b      	str	r3, [r7, #20]
  return(result);
 8002c94:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002c98:	b672      	cpsid	i
}
 8002c9a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002c9c:	4b59      	ldr	r3, [pc, #356]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	22ca      	movs	r2, #202	@ 0xca
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ca4:	4b57      	ldr	r3, [pc, #348]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2253      	movs	r2, #83	@ 0x53
 8002caa:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002cac:	4b55      	ldr	r3, [pc, #340]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	4b54      	ldr	r3, [pc, #336]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cba:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002cbc:	4b52      	ldr	r3, [pc, #328]	@ (8002e08 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002cc4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002cc8:	4950      	ldr	r1, [pc, #320]	@ (8002e0c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002cca:	4613      	mov	r3, r2
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d16e      	bne.n	8002dbc <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002cde:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002ce2:	494a      	ldr	r1, [pc, #296]	@ (8002e0c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002cf2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002cf6:	4945      	ldr	r1, [pc, #276]	@ (8002e0c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	3310      	adds	r3, #16
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002d08:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d04c      	beq.n	8002dac <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002d12:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d16:	493d      	ldr	r1, [pc, #244]	@ (8002e0c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	330d      	adds	r3, #13
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d124      	bne.n	8002d76 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d30:	2101      	movs	r1, #1
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff fdf2 	bl	800291c <UnlinkTimer>
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f383 8810 	msr	PRIMASK, r3
}
 8002d42:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002d44:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002d48:	4930      	ldr	r1, [pc, #192]	@ (8002e0c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	00db      	lsls	r3, r3, #3
 8002d52:	440b      	add	r3, r1
 8002d54:	3304      	adds	r3, #4
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f000 f9b8 	bl	80030d4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d64:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	22ca      	movs	r2, #202	@ 0xca
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2253      	movs	r2, #83	@ 0x53
 8002d72:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d74:	e012      	b.n	8002d9c <HW_TS_RTC_Wakeup_Handler+0x114>
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f383 8810 	msr	PRIMASK, r3
}
 8002d80:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002d82:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f920 	bl	8002fcc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	22ca      	movs	r2, #202	@ 0xca
 8002d92:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d94:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2253      	movs	r2, #83	@ 0x53
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002d9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	4619      	mov	r1, r3
 8002da4:	69b8      	ldr	r0, [r7, #24]
 8002da6:	f000 fa1b 	bl	80031e0 <HW_TS_RTC_Int_AppNot>
 8002daa:	e022      	b.n	8002df2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002dac:	f7ff fed2 	bl	8002b54 <RescheduleTimerList>
 8002db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	e01a      	b.n	8002df2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002dbc:	bf00      	nop
 8002dbe:	4b11      	ldr	r3, [pc, #68]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f8      	beq.n	8002dbe <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002ddc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002dde:	4b0d      	ldr	r3, [pc, #52]	@ (8002e14 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002de0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002de4:	60da      	str	r2, [r3, #12]
 8002de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f383 8810 	msr	PRIMASK, r3
}
 8002df0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002df2:	4b04      	ldr	r3, [pc, #16]	@ (8002e04 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	22ff      	movs	r2, #255	@ 0xff
 8002df8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8002dfa:	bf00      	nop
}
 8002dfc:	3728      	adds	r7, #40	@ 0x28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000d70 	.word	0x20000d70
 8002e08:	20000c88 	.word	0x20000c88
 8002e0c:	20000bf8 	.word	0x20000bf8
 8002e10:	20000c90 	.word	0x20000c90
 8002e14:	58000800 	.word	0x58000800

08002e18 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	4603      	mov	r3, r0
 8002e20:	6039      	str	r1, [r7, #0]
 8002e22:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002e24:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	22ca      	movs	r2, #202	@ 0xca
 8002e2a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002e2c:	4b5c      	ldr	r3, [pc, #368]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2253      	movs	r2, #83	@ 0x53
 8002e32:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002e34:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa4 <HW_TS_Init+0x18c>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa4 <HW_TS_Init+0x18c>)
 8002e3a:	f043 0320 	orr.w	r3, r3, #32
 8002e3e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002e40:	4b58      	ldr	r3, [pc, #352]	@ (8002fa4 <HW_TS_Init+0x18c>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f1c3 0304 	rsb	r3, r3, #4
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4b55      	ldr	r3, [pc, #340]	@ (8002fa8 <HW_TS_Init+0x190>)
 8002e54:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002e56:	4b53      	ldr	r3, [pc, #332]	@ (8002fa4 <HW_TS_Init+0x18c>)
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002e5e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002e62:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	fa92 f2a2 	rbit	r2, r2
 8002e6a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	2a00      	cmp	r2, #0
 8002e74:	d101      	bne.n	8002e7a <HW_TS_Init+0x62>
  {
    return 32U;
 8002e76:	2220      	movs	r2, #32
 8002e78:	e003      	b.n	8002e82 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002e7a:	697a      	ldr	r2, [r7, #20]
 8002e7c:	fab2 f282 	clz	r2, r2
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	40d3      	lsrs	r3, r2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	3301      	adds	r3, #1
 8002e88:	b2da      	uxtb	r2, r3
 8002e8a:	4b48      	ldr	r3, [pc, #288]	@ (8002fac <HW_TS_Init+0x194>)
 8002e8c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002e8e:	4b45      	ldr	r3, [pc, #276]	@ (8002fa4 <HW_TS_Init+0x18c>)
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002e98:	b29b      	uxth	r3, r3
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b44      	ldr	r3, [pc, #272]	@ (8002fb0 <HW_TS_Init+0x198>)
 8002ea0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002ea2:	4b43      	ldr	r3, [pc, #268]	@ (8002fb0 <HW_TS_Init+0x198>)
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4a40      	ldr	r2, [pc, #256]	@ (8002fac <HW_TS_Init+0x194>)
 8002eaa:	7812      	ldrb	r2, [r2, #0]
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa8 <HW_TS_Init+0x190>)
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	40d3      	lsrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d904      	bls.n	8002ed0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002ec6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fb4 <HW_TS_Init+0x19c>)
 8002ec8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ecc:	801a      	strh	r2, [r3, #0]
 8002ece:	e003      	b.n	8002ed8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	4b37      	ldr	r3, [pc, #220]	@ (8002fb4 <HW_TS_Init+0x19c>)
 8002ed6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ed8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002edc:	f7ff fb9c 	bl	8002618 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002ee0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002ee4:	f7ff fb84 	bl	80025f0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002ee8:	79fb      	ldrb	r3, [r7, #7]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d13d      	bne.n	8002f6a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002eee:	4b32      	ldr	r3, [pc, #200]	@ (8002fb8 <HW_TS_Init+0x1a0>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	@ (8002fbc <HW_TS_Init+0x1a4>)
 8002ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8002efa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002efc:	2300      	movs	r3, #0
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e00c      	b.n	8002f1c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002f02:	7ffa      	ldrb	r2, [r7, #31]
 8002f04:	492e      	ldr	r1, [pc, #184]	@ (8002fc0 <HW_TS_Init+0x1a8>)
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	440b      	add	r3, r1
 8002f10:	330c      	adds	r3, #12
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002f16:	7ffb      	ldrb	r3, [r7, #31]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
 8002f1e:	2b05      	cmp	r3, #5
 8002f20:	d9ef      	bls.n	8002f02 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002f22:	4b28      	ldr	r3, [pc, #160]	@ (8002fc4 <HW_TS_Init+0x1ac>)
 8002f24:	2206      	movs	r2, #6
 8002f26:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002f28:	4b1d      	ldr	r3, [pc, #116]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f36:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002f38:	4b19      	ldr	r3, [pc, #100]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	4b17      	ldr	r3, [pc, #92]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002f48:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <HW_TS_Init+0x1b0>)
 8002f4c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002f50:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002f52:	2003      	movs	r0, #3
 8002f54:	f001 fc8f 	bl	8004876 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002f58:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	4b10      	ldr	r3, [pc, #64]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e009      	b.n	8002f7e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002f78:	2003      	movs	r0, #3
 8002f7a:	f001 fc6e 	bl	800485a <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002f7e:	4b08      	ldr	r3, [pc, #32]	@ (8002fa0 <HW_TS_Init+0x188>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	22ff      	movs	r2, #255	@ 0xff
 8002f84:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8002f86:	2200      	movs	r2, #0
 8002f88:	2103      	movs	r1, #3
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	f001 fc23 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002f90:	2003      	movs	r0, #3
 8002f92:	f001 fc3a 	bl	800480a <HAL_NVIC_EnableIRQ>

  return;
 8002f96:	bf00      	nop
}
 8002f98:	3720      	adds	r7, #32
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000d70 	.word	0x20000d70
 8002fa4:	40002800 	.word	0x40002800
 8002fa8:	20000c91 	.word	0x20000c91
 8002fac:	20000c92 	.word	0x20000c92
 8002fb0:	20000c94 	.word	0x20000c94
 8002fb4:	20000c96 	.word	0x20000c96
 8002fb8:	20000c90 	.word	0x20000c90
 8002fbc:	20000c8c 	.word	0x20000c8c
 8002fc0:	20000bf8 	.word	0x20000bf8
 8002fc4:	20000c88 	.word	0x20000c88
 8002fc8:	58000800 	.word	0x58000800

08002fcc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b086      	sub	sp, #24
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fda:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002fde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
}
 8002fe2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002fe4:	2003      	movs	r0, #3
 8002fe6:	f001 fc1e 	bl	8004826 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002fea:	4b34      	ldr	r3, [pc, #208]	@ (80030bc <HW_TS_Stop+0xf0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	22ca      	movs	r2, #202	@ 0xca
 8002ff0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ff2:	4b32      	ldr	r3, [pc, #200]	@ (80030bc <HW_TS_Stop+0xf0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2253      	movs	r2, #83	@ 0x53
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002ffa:	79fa      	ldrb	r2, [r7, #7]
 8002ffc:	4930      	ldr	r1, [pc, #192]	@ (80030c0 <HW_TS_Stop+0xf4>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	330c      	adds	r3, #12
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d142      	bne.n	8003098 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003012:	79fb      	ldrb	r3, [r7, #7]
 8003014:	2100      	movs	r1, #0
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fc80 	bl	800291c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800301c:	4b29      	ldr	r3, [pc, #164]	@ (80030c4 <HW_TS_Stop+0xf8>)
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003022:	7cfb      	ldrb	r3, [r7, #19]
 8003024:	2b06      	cmp	r3, #6
 8003026:	d12f      	bne.n	8003088 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003028:	4b27      	ldr	r3, [pc, #156]	@ (80030c8 <HW_TS_Stop+0xfc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003030:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003034:	d107      	bne.n	8003046 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8003036:	bf00      	nop
 8003038:	4b20      	ldr	r3, [pc, #128]	@ (80030bc <HW_TS_Stop+0xf0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f8      	bne.n	8003038 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003046:	4b1d      	ldr	r3, [pc, #116]	@ (80030bc <HW_TS_Stop+0xf0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HW_TS_Stop+0xf0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003054:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003056:	bf00      	nop
 8003058:	4b18      	ldr	r3, [pc, #96]	@ (80030bc <HW_TS_Stop+0xf0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0304 	and.w	r3, r3, #4
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f8      	beq.n	8003058 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003066:	4b15      	ldr	r3, [pc, #84]	@ (80030bc <HW_TS_Stop+0xf0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	b2da      	uxtb	r2, r3
 800306e:	4b13      	ldr	r3, [pc, #76]	@ (80030bc <HW_TS_Stop+0xf0>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003076:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003078:	4b14      	ldr	r3, [pc, #80]	@ (80030cc <HW_TS_Stop+0x100>)
 800307a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800307e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003080:	2003      	movs	r0, #3
 8003082:	f001 fbf8 	bl	8004876 <HAL_NVIC_ClearPendingIRQ>
 8003086:	e007      	b.n	8003098 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HW_TS_Stop+0x104>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b2db      	uxtb	r3, r3
 800308e:	7cfa      	ldrb	r2, [r7, #19]
 8003090:	429a      	cmp	r2, r3
 8003092:	d001      	beq.n	8003098 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003094:	f7ff fd5e 	bl	8002b54 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003098:	4b08      	ldr	r3, [pc, #32]	@ (80030bc <HW_TS_Stop+0xf0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	22ff      	movs	r2, #255	@ 0xff
 800309e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80030a0:	2003      	movs	r0, #3
 80030a2:	f001 fbb2 	bl	800480a <HAL_NVIC_EnableIRQ>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f383 8810 	msr	PRIMASK, r3
}
 80030b0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80030b2:	bf00      	nop
}
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	20000d70 	.word	0x20000d70
 80030c0:	20000bf8 	.word	0x20000bf8
 80030c4:	20000c88 	.word	0x20000c88
 80030c8:	40002800 	.word	0x40002800
 80030cc:	58000800 	.word	0x58000800
 80030d0:	20000c89 	.word	0x20000c89

080030d4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b086      	sub	sp, #24
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	493b      	ldr	r1, [pc, #236]	@ (80031d0 <HW_TS_Start+0xfc>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	330c      	adds	r3, #12
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d103      	bne.n	8003100 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff66 	bl	8002fcc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003100:	f3ef 8310 	mrs	r3, PRIMASK
 8003104:	60fb      	str	r3, [r7, #12]
  return(result);
 8003106:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003108:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800310a:	b672      	cpsid	i
}
 800310c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800310e:	2003      	movs	r0, #3
 8003110:	f001 fb89 	bl	8004826 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003114:	4b2f      	ldr	r3, [pc, #188]	@ (80031d4 <HW_TS_Start+0x100>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	22ca      	movs	r2, #202	@ 0xca
 800311a:	625a      	str	r2, [r3, #36]	@ 0x24
 800311c:	4b2d      	ldr	r3, [pc, #180]	@ (80031d4 <HW_TS_Start+0x100>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2253      	movs	r2, #83	@ 0x53
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003124:	79fa      	ldrb	r2, [r7, #7]
 8003126:	492a      	ldr	r1, [pc, #168]	@ (80031d0 <HW_TS_Start+0xfc>)
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	330c      	adds	r3, #12
 8003134:	2202      	movs	r2, #2
 8003136:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8003138:	79fa      	ldrb	r2, [r7, #7]
 800313a:	4925      	ldr	r1, [pc, #148]	@ (80031d0 <HW_TS_Start+0xfc>)
 800313c:	4613      	mov	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	4413      	add	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	440b      	add	r3, r1
 8003146:	3308      	adds	r3, #8
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800314c:	79fa      	ldrb	r2, [r7, #7]
 800314e:	4920      	ldr	r1, [pc, #128]	@ (80031d0 <HW_TS_Start+0xfc>)
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3304      	adds	r3, #4
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	4618      	mov	r0, r3
 8003164:	f7ff fb30 	bl	80027c8 <linkTimer>
 8003168:	4603      	mov	r3, r0
 800316a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800316c:	4b1a      	ldr	r3, [pc, #104]	@ (80031d8 <HW_TS_Start+0x104>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003172:	4b1a      	ldr	r3, [pc, #104]	@ (80031dc <HW_TS_Start+0x108>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	7c7a      	ldrb	r2, [r7, #17]
 800317a:	429a      	cmp	r2, r3
 800317c:	d002      	beq.n	8003184 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800317e:	f7ff fce9 	bl	8002b54 <RescheduleTimerList>
 8003182:	e013      	b.n	80031ac <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003184:	79fa      	ldrb	r2, [r7, #7]
 8003186:	4912      	ldr	r1, [pc, #72]	@ (80031d0 <HW_TS_Start+0xfc>)
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	440b      	add	r3, r1
 8003192:	3308      	adds	r3, #8
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	8a7b      	ldrh	r3, [r7, #18]
 8003198:	79fa      	ldrb	r2, [r7, #7]
 800319a:	1ac9      	subs	r1, r1, r3
 800319c:	480c      	ldr	r0, [pc, #48]	@ (80031d0 <HW_TS_Start+0xfc>)
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	00db      	lsls	r3, r3, #3
 80031a6:	4403      	add	r3, r0
 80031a8:	3308      	adds	r3, #8
 80031aa:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80031ac:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <HW_TS_Start+0x100>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	22ff      	movs	r2, #255	@ 0xff
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80031b4:	2003      	movs	r0, #3
 80031b6:	f001 fb28 	bl	800480a <HAL_NVIC_EnableIRQ>
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f383 8810 	msr	PRIMASK, r3
}
 80031c4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80031c6:	bf00      	nop
}
 80031c8:	3718      	adds	r7, #24
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	20000bf8 	.word	0x20000bf8
 80031d4:	20000d70 	.word	0x20000d70
 80031d8:	20000c88 	.word	0x20000c88
 80031dc:	20000c89 	.word	0x20000c89

080031e0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	460b      	mov	r3, r1
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4798      	blx	r3

  return;
 80031f2:	bf00      	nop
}
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607b      	str	r3, [r7, #4]
 8003206:	4603      	mov	r3, r0
 8003208:	73fb      	strb	r3, [r7, #15]
 800320a:	4613      	mov	r3, r2
 800320c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003212:	2300      	movs	r3, #0
 8003214:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003216:	7bfb      	ldrb	r3, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10e      	bne.n	800323a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 800321c:	4a17      	ldr	r2, [pc, #92]	@ (800327c <HW_UART_Transmit_DMA+0x80>)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003222:	4b17      	ldr	r3, [pc, #92]	@ (8003280 <HW_UART_Transmit_DMA+0x84>)
 8003224:	4a17      	ldr	r2, [pc, #92]	@ (8003284 <HW_UART_Transmit_DMA+0x88>)
 8003226:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003228:	89bb      	ldrh	r3, [r7, #12]
 800322a:	461a      	mov	r2, r3
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	4814      	ldr	r0, [pc, #80]	@ (8003280 <HW_UART_Transmit_DMA+0x84>)
 8003230:	f007 fb52 	bl	800a8d8 <HAL_UART_Transmit_DMA>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]
            break;
 8003238:	e000      	b.n	800323c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800323a:	bf00      	nop
    }

    switch (hal_status)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b03      	cmp	r3, #3
 8003240:	d816      	bhi.n	8003270 <HW_UART_Transmit_DMA+0x74>
 8003242:	a201      	add	r2, pc, #4	@ (adr r2, 8003248 <HW_UART_Transmit_DMA+0x4c>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	08003259 	.word	0x08003259
 800324c:	0800325f 	.word	0x0800325f
 8003250:	08003265 	.word	0x08003265
 8003254:	0800326b 	.word	0x0800326b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8003258:	2300      	movs	r3, #0
 800325a:	75bb      	strb	r3, [r7, #22]
            break;
 800325c:	e009      	b.n	8003272 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800325e:	2301      	movs	r3, #1
 8003260:	75bb      	strb	r3, [r7, #22]
            break;
 8003262:	e006      	b.n	8003272 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8003264:	2302      	movs	r3, #2
 8003266:	75bb      	strb	r3, [r7, #22]
            break;
 8003268:	e003      	b.n	8003272 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800326a:	2303      	movs	r3, #3
 800326c:	75bb      	strb	r3, [r7, #22]
            break;
 800326e:	e000      	b.n	8003272 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8003270:	bf00      	nop
    }

    return hw_status;
 8003272:	7dbb      	ldrb	r3, [r7, #22]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000c98 	.word	0x20000c98
 8003280:	20000e44 	.word	0x20000e44
 8003284:	40013800 	.word	0x40013800

08003288 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	461a      	mov	r2, r3
 8003296:	4b09      	ldr	r3, [pc, #36]	@ (80032bc <HAL_UART_TxCpltCallback+0x34>)
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800329c:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_UART_TxCpltCallback+0x38>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <HAL_UART_TxCpltCallback+0x38>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4798      	blx	r3
            }
            break;
 80032aa:	e001      	b.n	80032b0 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80032ac:	bf00      	nop
 80032ae:	e000      	b.n	80032b2 <HAL_UART_TxCpltCallback+0x2a>
            break;
 80032b0:	bf00      	nop
    }

    return;
 80032b2:	bf00      	nop
}
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40013800 	.word	0x40013800
 80032c0:	20000c98 	.word	0x20000c98

080032c4 <Kernel_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Kernel_Init (void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
	SET_RGB_COLOR(OFF);
 80032c8:	2201      	movs	r2, #1
 80032ca:	2110      	movs	r1, #16
 80032cc:	4820      	ldr	r0, [pc, #128]	@ (8003350 <Kernel_Init+0x8c>)
 80032ce:	f001 fe77 	bl	8004fc0 <HAL_GPIO_WritePin>
 80032d2:	2201      	movs	r2, #1
 80032d4:	2102      	movs	r1, #2
 80032d6:	481f      	ldr	r0, [pc, #124]	@ (8003354 <Kernel_Init+0x90>)
 80032d8:	f001 fe72 	bl	8004fc0 <HAL_GPIO_WritePin>
 80032dc:	2201      	movs	r2, #1
 80032de:	2101      	movs	r1, #1
 80032e0:	481c      	ldr	r0, [pc, #112]	@ (8003354 <Kernel_Init+0x90>)
 80032e2:	f001 fe6d 	bl	8004fc0 <HAL_GPIO_WritePin>

	HAL_Delay(1000);
 80032e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032ea:	f7ff f891 	bl	8002410 <HAL_Delay>

	tsCmd.MODE		= Start;
 80032ee:	4b1a      	ldr	r3, [pc, #104]	@ (8003358 <Kernel_Init+0x94>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	755a      	strb	r2, [r3, #21]
	tsCmd.LED		= true;
 80032f4:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <Kernel_Init+0x94>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	75da      	strb	r2, [r3, #23]
	tsCmd.HLP 		= true;
 80032fa:	4b17      	ldr	r3, [pc, #92]	@ (8003358 <Kernel_Init+0x94>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	759a      	strb	r2, [r3, #22]

	tsCmd.ECG 		= false;
 8003300:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <Kernel_Init+0x94>)
 8003302:	2200      	movs	r2, #0
 8003304:	761a      	strb	r2, [r3, #24]
	tsCmd.ECG_N50 	= true;
 8003306:	4b14      	ldr	r3, [pc, #80]	@ (8003358 <Kernel_Init+0x94>)
 8003308:	2201      	movs	r2, #1
 800330a:	765a      	strb	r2, [r3, #25]
	tsCmd.ECG_HPF	= true;
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <Kernel_Init+0x94>)
 800330e:	2201      	movs	r2, #1
 8003310:	769a      	strb	r2, [r3, #26]

	tsCmd.MCG		= true;
 8003312:	4b11      	ldr	r3, [pc, #68]	@ (8003358 <Kernel_Init+0x94>)
 8003314:	2201      	movs	r2, #1
 8003316:	76da      	strb	r2, [r3, #27]
	tsCmd.MCG_N50	= true;
 8003318:	4b0f      	ldr	r3, [pc, #60]	@ (8003358 <Kernel_Init+0x94>)
 800331a:	2201      	movs	r2, #1
 800331c:	771a      	strb	r2, [r3, #28]
	tsCmd.MCG_HPF	= true;
 800331e:	4b0e      	ldr	r3, [pc, #56]	@ (8003358 <Kernel_Init+0x94>)
 8003320:	2201      	movs	r2, #1
 8003322:	775a      	strb	r2, [r3, #29]


	tsSystem.Power	= true;
 8003324:	4b0d      	ldr	r3, [pc, #52]	@ (800335c <Kernel_Init+0x98>)
 8003326:	2201      	movs	r2, #1
 8003328:	701a      	strb	r2, [r3, #0]
	tsBle.Connected	= false;
 800332a:	4b0d      	ldr	r3, [pc, #52]	@ (8003360 <Kernel_Init+0x9c>)
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]

	DIAG ("-----------------------------------------\r\n");
 8003330:	480c      	ldr	r0, [pc, #48]	@ (8003364 <Kernel_Init+0xa0>)
 8003332:	f7ff f8f9 	bl	8002528 <DIAG>
	HAL_Delay(1);
 8003336:	2001      	movs	r0, #1
 8003338:	f7ff f86a 	bl	8002410 <HAL_Delay>
	DIAG (" System ON ->\t%s\r\n\n", DEVICE_INFO);
 800333c:	490a      	ldr	r1, [pc, #40]	@ (8003368 <Kernel_Init+0xa4>)
 800333e:	480b      	ldr	r0, [pc, #44]	@ (800336c <Kernel_Init+0xa8>)
 8003340:	f7ff f8f2 	bl	8002528 <DIAG>
	HAL_Delay(1);
 8003344:	2001      	movs	r0, #1
 8003346:	f7ff f863 	bl	8002410 <HAL_Delay>

	// Wait until USB being recognised by the PC.


}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	48001000 	.word	0x48001000
 8003354:	48000400 	.word	0x48000400
 8003358:	20000ca0 	.word	0x20000ca0
 800335c:	20000cc0 	.word	0x20000cc0
 8003360:	20000fe0 	.word	0x20000fe0
 8003364:	08017128 	.word	0x08017128
 8003368:	08017154 	.word	0x08017154
 800336c:	08017168 	.word	0x08017168

08003370 <Main_Process>:
//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//

void Main_Process (void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0

	switch (eSYS_STATE)
 8003374:	4b94      	ldr	r3, [pc, #592]	@ (80035c8 <Main_Process+0x258>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b04      	cmp	r3, #4
 800337a:	f000 80ea 	beq.w	8003552 <Main_Process+0x1e2>
 800337e:	2b04      	cmp	r3, #4
 8003380:	dc03      	bgt.n	800338a <Main_Process+0x1a>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d005      	beq.n	8003392 <Main_Process+0x22>
 8003386:	2b03      	cmp	r3, #3
 8003388:	d01a      	beq.n	80033c0 <Main_Process+0x50>
	{

	default:
		eSYS_STATE = SYS_STATE_INIT;
 800338a:	4b8f      	ldr	r3, [pc, #572]	@ (80035c8 <Main_Process+0x258>)
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
		break;
 8003390:	e118      	b.n	80035c4 <Main_Process+0x254>
		//----------------------------------------------------

	case SYS_STATE_INIT:

		AFE_Init();
 8003392:	f7fd fc67 	bl	8000c64 <AFE_Init>
		IMU_Init( &hi2c1 );
 8003396:	488d      	ldr	r0, [pc, #564]	@ (80035cc <Main_Process+0x25c>)
 8003398:	f7fe f9c8 	bl	800172c <IMU_Init>
		BLE_Init();
 800339c:	f7fd feca 	bl	8001134 <BLE_Init>
		Debug_Init();
 80033a0:	f7ff f89a 	bl	80024d8 <Debug_Init>
		Timer_Init();
 80033a4:	f000 ffde 	bl	8004364 <Timer_Init>
		BLE_Init();
 80033a8:	f7fd fec4 	bl	8001134 <BLE_Init>

		DIAG ("-----------------------------------------\r\n\n");
 80033ac:	4888      	ldr	r0, [pc, #544]	@ (80035d0 <Main_Process+0x260>)
 80033ae:	f7ff f8bb 	bl	8002528 <DIAG>
		HAL_Delay(1);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f7ff f82c 	bl	8002410 <HAL_Delay>
		eSYS_STATE= SYS_STATE_NORMAL;
 80033b8:	4b83      	ldr	r3, [pc, #524]	@ (80035c8 <Main_Process+0x258>)
 80033ba:	2203      	movs	r2, #3
 80033bc:	701a      	strb	r2, [r3, #0]
		break;
 80033be:	e101      	b.n	80035c4 <Main_Process+0x254>
		//----------------------------------------------------

	case SYS_STATE_NORMAL:

		if (tsSystem.Power)
 80033c0:	4b84      	ldr	r3, [pc, #528]	@ (80035d4 <Main_Process+0x264>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 80b1 	beq.w	800352c <Main_Process+0x1bc>
		{

			AFE_Control();
 80033ca:	f7fd fc59 	bl	8000c80 <AFE_Control>

	        #ifdef IMU_ENABLE
				IMU_Control();
	        #endif

			Debug_Control();
 80033ce:	f7ff f88f 	bl	80024f0 <Debug_Control>

			#ifdef WBxx_BLE
				BLE_Control();
 80033d2:	f7fd fec7 	bl	8001164 <BLE_Control>
			#endif

			if (!tsBle.Connected)
 80033d6:	4b80      	ldr	r3, [pc, #512]	@ (80035d8 <Main_Process+0x268>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d112      	bne.n	8003406 <Main_Process+0x96>
			{
				SET_RGB_COLOR(GREEN);
 80033e0:	2201      	movs	r2, #1
 80033e2:	2110      	movs	r1, #16
 80033e4:	487d      	ldr	r0, [pc, #500]	@ (80035dc <Main_Process+0x26c>)
 80033e6:	f001 fdeb 	bl	8004fc0 <HAL_GPIO_WritePin>
 80033ea:	2200      	movs	r2, #0
 80033ec:	2102      	movs	r1, #2
 80033ee:	487c      	ldr	r0, [pc, #496]	@ (80035e0 <Main_Process+0x270>)
 80033f0:	f001 fde6 	bl	8004fc0 <HAL_GPIO_WritePin>
 80033f4:	2201      	movs	r2, #1
 80033f6:	2101      	movs	r1, #1
 80033f8:	4879      	ldr	r0, [pc, #484]	@ (80035e0 <Main_Process+0x270>)
 80033fa:	f001 fde1 	bl	8004fc0 <HAL_GPIO_WritePin>

				// If BLE is disconnected, keep the timestamp zero
				tsBle.Timestamp = 0;
 80033fe:	4b76      	ldr	r3, [pc, #472]	@ (80035d8 <Main_Process+0x268>)
 8003400:	2200      	movs	r2, #0
 8003402:	715a      	strb	r2, [r3, #5]
 8003404:	e0a1      	b.n	800354a <Main_Process+0x1da>
			}
			else
			{
				if (tsTimer.TimeFlag)
 8003406:	4b77      	ldr	r3, [pc, #476]	@ (80035e4 <Main_Process+0x274>)
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 809c 	beq.w	800354a <Main_Process+0x1da>
				{
					tsTimer.TimeFlag = false;
 8003412:	4b74      	ldr	r3, [pc, #464]	@ (80035e4 <Main_Process+0x274>)
 8003414:	2200      	movs	r2, #0
 8003416:	709a      	strb	r2, [r3, #2]

					switch (LedRGB.color)
 8003418:	4b73      	ldr	r3, [pc, #460]	@ (80035e8 <Main_Process+0x278>)
 800341a:	791b      	ldrb	r3, [r3, #4]
 800341c:	2b07      	cmp	r3, #7
 800341e:	d813      	bhi.n	8003448 <Main_Process+0xd8>
 8003420:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <Main_Process+0xb8>)
 8003422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003426:	bf00      	nop
 8003428:	0800346f 	.word	0x0800346f
 800342c:	08003507 	.word	0x08003507
 8003430:	08003449 	.word	0x08003449
 8003434:	080034bb 	.word	0x080034bb
 8003438:	08003495 	.word	0x08003495
 800343c:	08003449 	.word	0x08003449
 8003440:	08003449 	.word	0x08003449
 8003444:	080034e1 	.word	0x080034e1
					{
					default:
						SET_RGB_COLOR(OFF);
 8003448:	2201      	movs	r2, #1
 800344a:	2110      	movs	r1, #16
 800344c:	4863      	ldr	r0, [pc, #396]	@ (80035dc <Main_Process+0x26c>)
 800344e:	f001 fdb7 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003452:	2201      	movs	r2, #1
 8003454:	2102      	movs	r1, #2
 8003456:	4862      	ldr	r0, [pc, #392]	@ (80035e0 <Main_Process+0x270>)
 8003458:	f001 fdb2 	bl	8004fc0 <HAL_GPIO_WritePin>
 800345c:	2201      	movs	r2, #1
 800345e:	2101      	movs	r1, #1
 8003460:	485f      	ldr	r0, [pc, #380]	@ (80035e0 <Main_Process+0x270>)
 8003462:	f001 fdad 	bl	8004fc0 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 8003466:	4b60      	ldr	r3, [pc, #384]	@ (80035e8 <Main_Process+0x278>)
 8003468:	2204      	movs	r2, #4
 800346a:	711a      	strb	r2, [r3, #4]
						break;
 800346c:	e06d      	b.n	800354a <Main_Process+0x1da>

					case OFF:
						SET_RGB_COLOR(OFF);
 800346e:	2201      	movs	r2, #1
 8003470:	2110      	movs	r1, #16
 8003472:	485a      	ldr	r0, [pc, #360]	@ (80035dc <Main_Process+0x26c>)
 8003474:	f001 fda4 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003478:	2201      	movs	r2, #1
 800347a:	2102      	movs	r1, #2
 800347c:	4858      	ldr	r0, [pc, #352]	@ (80035e0 <Main_Process+0x270>)
 800347e:	f001 fd9f 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003482:	2201      	movs	r2, #1
 8003484:	2101      	movs	r1, #1
 8003486:	4856      	ldr	r0, [pc, #344]	@ (80035e0 <Main_Process+0x270>)
 8003488:	f001 fd9a 	bl	8004fc0 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 800348c:	4b56      	ldr	r3, [pc, #344]	@ (80035e8 <Main_Process+0x278>)
 800348e:	2204      	movs	r2, #4
 8003490:	711a      	strb	r2, [r3, #4]
						break;
 8003492:	e05a      	b.n	800354a <Main_Process+0x1da>

					case BLUE:
						SET_RGB_COLOR(BLUE);
 8003494:	2201      	movs	r2, #1
 8003496:	2110      	movs	r1, #16
 8003498:	4850      	ldr	r0, [pc, #320]	@ (80035dc <Main_Process+0x26c>)
 800349a:	f001 fd91 	bl	8004fc0 <HAL_GPIO_WritePin>
 800349e:	2201      	movs	r2, #1
 80034a0:	2102      	movs	r1, #2
 80034a2:	484f      	ldr	r0, [pc, #316]	@ (80035e0 <Main_Process+0x270>)
 80034a4:	f001 fd8c 	bl	8004fc0 <HAL_GPIO_WritePin>
 80034a8:	2200      	movs	r2, #0
 80034aa:	2101      	movs	r1, #1
 80034ac:	484c      	ldr	r0, [pc, #304]	@ (80035e0 <Main_Process+0x270>)
 80034ae:	f001 fd87 	bl	8004fc0 <HAL_GPIO_WritePin>
						LedRGB.color = YELLOW;
 80034b2:	4b4d      	ldr	r3, [pc, #308]	@ (80035e8 <Main_Process+0x278>)
 80034b4:	2203      	movs	r2, #3
 80034b6:	711a      	strb	r2, [r3, #4]
						break;
 80034b8:	e047      	b.n	800354a <Main_Process+0x1da>

					case YELLOW:
						SET_RGB_COLOR(OFF);
 80034ba:	2201      	movs	r2, #1
 80034bc:	2110      	movs	r1, #16
 80034be:	4847      	ldr	r0, [pc, #284]	@ (80035dc <Main_Process+0x26c>)
 80034c0:	f001 fd7e 	bl	8004fc0 <HAL_GPIO_WritePin>
 80034c4:	2201      	movs	r2, #1
 80034c6:	2102      	movs	r1, #2
 80034c8:	4845      	ldr	r0, [pc, #276]	@ (80035e0 <Main_Process+0x270>)
 80034ca:	f001 fd79 	bl	8004fc0 <HAL_GPIO_WritePin>
 80034ce:	2201      	movs	r2, #1
 80034d0:	2101      	movs	r1, #1
 80034d2:	4843      	ldr	r0, [pc, #268]	@ (80035e0 <Main_Process+0x270>)
 80034d4:	f001 fd74 	bl	8004fc0 <HAL_GPIO_WritePin>
						LedRGB.color = WHITE;
 80034d8:	4b43      	ldr	r3, [pc, #268]	@ (80035e8 <Main_Process+0x278>)
 80034da:	2207      	movs	r2, #7
 80034dc:	711a      	strb	r2, [r3, #4]
						break;
 80034de:	e034      	b.n	800354a <Main_Process+0x1da>

					case WHITE:
						SET_RGB_COLOR(OFF);
 80034e0:	2201      	movs	r2, #1
 80034e2:	2110      	movs	r1, #16
 80034e4:	483d      	ldr	r0, [pc, #244]	@ (80035dc <Main_Process+0x26c>)
 80034e6:	f001 fd6b 	bl	8004fc0 <HAL_GPIO_WritePin>
 80034ea:	2201      	movs	r2, #1
 80034ec:	2102      	movs	r1, #2
 80034ee:	483c      	ldr	r0, [pc, #240]	@ (80035e0 <Main_Process+0x270>)
 80034f0:	f001 fd66 	bl	8004fc0 <HAL_GPIO_WritePin>
 80034f4:	2201      	movs	r2, #1
 80034f6:	2101      	movs	r1, #1
 80034f8:	4839      	ldr	r0, [pc, #228]	@ (80035e0 <Main_Process+0x270>)
 80034fa:	f001 fd61 	bl	8004fc0 <HAL_GPIO_WritePin>
						LedRGB.color = RED;
 80034fe:	4b3a      	ldr	r3, [pc, #232]	@ (80035e8 <Main_Process+0x278>)
 8003500:	2201      	movs	r2, #1
 8003502:	711a      	strb	r2, [r3, #4]
						break;
 8003504:	e021      	b.n	800354a <Main_Process+0x1da>

					case RED:
						SET_RGB_COLOR(OFF);
 8003506:	2201      	movs	r2, #1
 8003508:	2110      	movs	r1, #16
 800350a:	4834      	ldr	r0, [pc, #208]	@ (80035dc <Main_Process+0x26c>)
 800350c:	f001 fd58 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003510:	2201      	movs	r2, #1
 8003512:	2102      	movs	r1, #2
 8003514:	4832      	ldr	r0, [pc, #200]	@ (80035e0 <Main_Process+0x270>)
 8003516:	f001 fd53 	bl	8004fc0 <HAL_GPIO_WritePin>
 800351a:	2201      	movs	r2, #1
 800351c:	2101      	movs	r1, #1
 800351e:	4830      	ldr	r0, [pc, #192]	@ (80035e0 <Main_Process+0x270>)
 8003520:	f001 fd4e 	bl	8004fc0 <HAL_GPIO_WritePin>
						LedRGB.color = OFF;
 8003524:	4b30      	ldr	r3, [pc, #192]	@ (80035e8 <Main_Process+0x278>)
 8003526:	2200      	movs	r2, #0
 8003528:	711a      	strb	r2, [r3, #4]
						break;
 800352a:	e00e      	b.n	800354a <Main_Process+0x1da>
				}
			}
		}
		else
		{
			SET_RGB_COLOR(OFF);
 800352c:	2201      	movs	r2, #1
 800352e:	2110      	movs	r1, #16
 8003530:	482a      	ldr	r0, [pc, #168]	@ (80035dc <Main_Process+0x26c>)
 8003532:	f001 fd45 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003536:	2201      	movs	r2, #1
 8003538:	2102      	movs	r1, #2
 800353a:	4829      	ldr	r0, [pc, #164]	@ (80035e0 <Main_Process+0x270>)
 800353c:	f001 fd40 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003540:	2201      	movs	r2, #1
 8003542:	2101      	movs	r1, #1
 8003544:	4826      	ldr	r0, [pc, #152]	@ (80035e0 <Main_Process+0x270>)
 8003546:	f001 fd3b 	bl	8004fc0 <HAL_GPIO_WritePin>
		}

		eSYS_STATE = SYS_STATE_WAIT_CMD;
 800354a:	4b1f      	ldr	r3, [pc, #124]	@ (80035c8 <Main_Process+0x258>)
 800354c:	2204      	movs	r2, #4
 800354e:	701a      	strb	r2, [r3, #0]
		break;
 8003550:	e038      	b.n	80035c4 <Main_Process+0x254>
		//----------------------------------------------------
	case SYS_STATE_WAIT_CMD:

		//DIAG("BLE Notified- Kernel - > %d\r\n", McgTimer.TimeFlag );

		if (tsCmd.MODE == Start)
 8003552:	4b26      	ldr	r3, [pc, #152]	@ (80035ec <Main_Process+0x27c>)
 8003554:	7d5b      	ldrb	r3, [r3, #21]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d106      	bne.n	8003568 <Main_Process+0x1f8>
		{
			tsCmd.MODE = Idle;
 800355a:	4b24      	ldr	r3, [pc, #144]	@ (80035ec <Main_Process+0x27c>)
 800355c:	22ff      	movs	r2, #255	@ 0xff
 800355e:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8003560:	2101      	movs	r1, #1
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd fb16 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == Stop)
 8003568:	4b20      	ldr	r3, [pc, #128]	@ (80035ec <Main_Process+0x27c>)
 800356a:	7d5b      	ldrb	r3, [r3, #21]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d106      	bne.n	800357e <Main_Process+0x20e>
		{
			tsCmd.MODE = Idle;
 8003570:	4b1e      	ldr	r3, [pc, #120]	@ (80035ec <Main_Process+0x27c>)
 8003572:	22ff      	movs	r2, #255	@ 0xff
 8003574:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8003576:	2100      	movs	r1, #0
 8003578:	2000      	movs	r0, #0
 800357a:	f7fd fb0b 	bl	8000b94 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == PrintSetting )
 800357e:	4b1b      	ldr	r3, [pc, #108]	@ (80035ec <Main_Process+0x27c>)
 8003580:	7d5b      	ldrb	r3, [r3, #21]
 8003582:	2b05      	cmp	r3, #5
 8003584:	d104      	bne.n	8003590 <Main_Process+0x220>
		{
			tsCmd.MODE = Idle;
 8003586:	4b19      	ldr	r3, [pc, #100]	@ (80035ec <Main_Process+0x27c>)
 8003588:	22ff      	movs	r2, #255	@ 0xff
 800358a:	755a      	strb	r2, [r3, #21]
			Print_Setting();
 800358c:	f000 f837 	bl	80035fe <Print_Setting>
		}

		if ( tsCmd.HLP == true )
 8003590:	4b16      	ldr	r3, [pc, #88]	@ (80035ec <Main_Process+0x27c>)
 8003592:	7d9b      	ldrb	r3, [r3, #22]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d104      	bne.n	80035a2 <Main_Process+0x232>
		{
			//tsCmd.MODE = Idle;
			Print_Help();
 8003598:	f000 f82a 	bl	80035f0 <Print_Help>
			tsCmd.HLP = false;
 800359c:	4b13      	ldr	r3, [pc, #76]	@ (80035ec <Main_Process+0x27c>)
 800359e:	2200      	movs	r2, #0
 80035a0:	759a      	strb	r2, [r3, #22]
		}

					#ifdef WBxx_BLE
						if ( tsBle.Connected )
 80035a2:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <Main_Process+0x268>)
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <Main_Process+0x24c>
						{
							 if ( tsBle.App.McgNotification )
 80035ac:	4b0a      	ldr	r3, [pc, #40]	@ (80035d8 <Main_Process+0x268>)
 80035ae:	799b      	ldrb	r3, [r3, #6]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <Main_Process+0x24c>
							 {
								UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);
 80035b4:	2100      	movs	r1, #0
 80035b6:	2020      	movs	r0, #32
 80035b8:	f012 f88a 	bl	80156d0 <UTIL_SEQ_SetTask>
								 }
							 #endif
						}
					#endif

		eSYS_STATE = SYS_STATE_NORMAL;
 80035bc:	4b02      	ldr	r3, [pc, #8]	@ (80035c8 <Main_Process+0x258>)
 80035be:	2203      	movs	r2, #3
 80035c0:	701a      	strb	r2, [r3, #0]
		break;
 80035c2:	bf00      	nop
		//----------------------------------------------------
	}
}
 80035c4:	bf00      	nop
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000c9c 	.word	0x20000c9c
 80035cc:	20000ccc 	.word	0x20000ccc
 80035d0:	0801717c 	.word	0x0801717c
 80035d4:	20000cc0 	.word	0x20000cc0
 80035d8:	20000fe0 	.word	0x20000fe0
 80035dc:	48001000 	.word	0x48001000
 80035e0:	48000400 	.word	0x48000400
 80035e4:	20000f3c 	.word	0x20000f3c
 80035e8:	20000cc4 	.word	0x20000cc4
 80035ec:	20000ca0 	.word	0x20000ca0

080035f0 <Print_Help>:

//------------------------------------------------------------------------------------------------

void Print_Help( void )
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
	DIAG(" Examples 1: https://hackaday.io/project/5334-serialplot-realtime\r\n");
	HAL_Delay(10);
	DIAG(" Examples 2: https://x-io.co.uk/serial-oscilloscope\r\n");
	HAL_Delay(10);
*/
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr

080035fe <Print_Setting>:
//--------------------------------------------------------------------------------------------------------

void Print_Setting ( void )
{
 80035fe:	b480      	push	{r7}
 8003600:	af00      	add	r7, sp, #0
	HAL_Delay(10);

	DIAG("LED status\t\t: %s\r\n", tsCmd.LED ? "active" : "deactive");
	HAL_Delay(10);
*/
}
 8003602:	bf00      	nop
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_RCC_HSI48_Enable>:
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003614:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003618:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800361c:	f043 0301 	orr.w	r3, r3, #1
 8003620:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003624:	bf00      	nop
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr

0800362e <LL_RCC_HSI48_IsReady>:
{
 800362e:	b480      	push	{r7}
 8003630:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003636:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b02      	cmp	r3, #2
 8003640:	d101      	bne.n	8003646 <LL_RCC_HSI48_IsReady+0x18>
 8003642:	2301      	movs	r3, #1
 8003644:	e000      	b.n	8003648 <LL_RCC_HSI48_IsReady+0x1a>
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <LL_RCC_LSE_SetDriveCapability>:
{
 8003652:	b480      	push	{r7}
 8003654:	b083      	sub	sp, #12
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003662:	f023 0218 	bic.w	r2, r3, #24
 8003666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr

0800367e <LL_AHB1_GRP1_EnableClock>:
{
 800367e:	b480      	push	{r7}
 8003680:	b085      	sub	sp, #20
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003686:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800368c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4313      	orrs	r3, r2
 8003694:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800369a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4013      	ands	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	bf00      	nop
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <LL_AHB2_GRP1_EnableClock>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80036b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036bc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80036c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4013      	ands	r3, r2
 80036d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80036d4:	68fb      	ldr	r3, [r7, #12]
}
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b085      	sub	sp, #20
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80036ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036ee:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80036f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4313      	orrs	r3, r2
 80036f8:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80036fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80036fe:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	3220      	adds	r2, #32
 8003724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003728:	4a05      	ldr	r2, [pc, #20]	@ (8003740 <LL_HSEM_1StepLock+0x2c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d001      	beq.n	8003732 <LL_HSEM_1StepLock+0x1e>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <LL_HSEM_1StepLock+0x20>
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	80000400 	.word	0x80000400

08003744 <PeriphUsbClock_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PeriphUsbClock_Config(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b09a      	sub	sp, #104	@ 0x68
 8003748:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800374a:	f107 0318 	add.w	r3, r7, #24
 800374e:	2250      	movs	r2, #80	@ 0x50
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f012 fb22 	bl	8015d9c <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003758:	463b      	mov	r3, r7
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
 800375e:	605a      	str	r2, [r3, #4]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	60da      	str	r2, [r3, #12]
 8003764:	611a      	str	r2, [r3, #16]
 8003766:	615a      	str	r2, [r3, #20]

/* This prevents the CPU2 to disable the HSI48 oscillator when
 * It does not use anymore the RNG IP */

LL_HSEM_1StepLock( HSEM, 5 );
 8003768:	2105      	movs	r1, #5
 800376a:	4817      	ldr	r0, [pc, #92]	@ (80037c8 <PeriphUsbClock_Config+0x84>)
 800376c:	f7ff ffd2 	bl	8003714 <LL_HSEM_1StepLock>


/* Enables the HSI48 Clock Source */

LL_RCC_HSI48_Enable();
 8003770:	f7ff ff4c 	bl	800360c <LL_RCC_HSI48_Enable>

while(!LL_RCC_HSI48_IsReady());
 8003774:	bf00      	nop
 8003776:	f7ff ff5a 	bl	800362e <LL_RCC_HSI48_IsReady>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0fa      	beq.n	8003776 <PeriphUsbClock_Config+0x32>

/* Select HSI48 as USB clock source */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003780:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003784:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003786:	2300      	movs	r3, #0
 8003788:	64fb      	str	r3, [r7, #76]	@ 0x4c
HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800378a:	f107 0318 	add.w	r3, r7, #24
 800378e:	4618      	mov	r0, r3
 8003790:	f005 f9c0 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>


/* Configure the clock recovery system (CRS)**********************************/

/* Enable CRS Clock */
__HAL_RCC_CRS_CLK_ENABLE();
 8003794:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8003798:	f7ff ffa3 	bl	80036e2 <LL_APB1_GRP1_EnableClock>

/* Default Synchro Signal division factor (not divided) */
RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800379c:	2300      	movs	r3, #0
 800379e:	603b      	str	r3, [r7, #0]

/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 80037a0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80037a4:	607b      	str	r3, [r7, #4]

/* HSI48 is synchronized with USB SOF at 1KHz rate */
RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 80037a6:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 80037aa:	60fb      	str	r3, [r7, #12]
RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 80037ac:	2322      	movs	r3, #34	@ 0x22
 80037ae:	613b      	str	r3, [r7, #16]
RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]

/* Set the TRIM[5:0] to the default value*/
RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 80037b4:	2320      	movs	r3, #32
 80037b6:	617b      	str	r3, [r7, #20]

/* Start automatic synchronization */
HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80037b8:	463b      	mov	r3, r7
 80037ba:	4618      	mov	r0, r3
 80037bc:	f005 fb20 	bl	8008e00 <HAL_RCCEx_CRSConfig>

#endif

	return;
 80037c0:	bf00      	nop
}
 80037c2:	3768      	adds	r7, #104	@ 0x68
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	58001400 	.word	0x58001400

080037cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037d0:	f000 fe34 	bl	800443c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80037d4:	f7fe fb46 	bl	8001e64 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037d8:	f000 f822 	bl	8003820 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80037dc:	f000 f88e 	bl	80038fc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80037e0:	f000 f8ec 	bl	80039bc <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037e4:	f000 f9ee 	bl	8003bc4 <MX_GPIO_Init>
  MX_DMA_Init();
 80037e8:	f000 f9da 	bl	8003ba0 <MX_DMA_Init>
  MX_TIM2_Init();
 80037ec:	f000 f98a 	bl	8003b04 <MX_TIM2_Init>
  MX_SPI1_Init();
 80037f0:	f000 f94a 	bl	8003a88 <MX_SPI1_Init>
  MX_RTC_Init();
 80037f4:	f000 f914 	bl	8003a20 <MX_RTC_Init>
  MX_USB_Device_Init();
 80037f8:	f011 f8aa 	bl	8014950 <MX_USB_Device_Init>
  MX_I2C1_Init();
 80037fc:	f000 f89e 	bl	800393c <MX_I2C1_Init>
  MX_RNG_Init();
 8003800:	f000 f8f8 	bl	80039f4 <MX_RNG_Init>
  MX_RF_Init();
 8003804:	f000 f8ee 	bl	80039e4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  Kernel_Init();
 8003808:	f7ff fd5c 	bl	80032c4 <Kernel_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 800380c:	f7fe fb38 	bl	8001e80 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PeriphUsbClock_Config();
 8003810:	f7ff ff98 	bl	8003744 <PeriphUsbClock_Config>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8003814:	f7fe fe21 	bl	800245a <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    Main_Process();
 8003818:	f7ff fdaa 	bl	8003370 <Main_Process>
    MX_APPE_Process();
 800381c:	bf00      	nop
 800381e:	e7f9      	b.n	8003814 <main+0x48>

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b09a      	sub	sp, #104	@ 0x68
 8003824:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	f107 0320 	add.w	r3, r7, #32
 800382a:	2248      	movs	r2, #72	@ 0x48
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f012 fab4 	bl	8015d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003834:	1d3b      	adds	r3, r7, #4
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	611a      	str	r2, [r3, #16]
 8003842:	615a      	str	r2, [r3, #20]
 8003844:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV2);
 8003846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003854:	f043 0310 	orr.w	r3, r3, #16
 8003858:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003864:	f043 0303 	orr.w	r3, r3, #3
 8003868:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800386a:	f003 fe1d 	bl	80074a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800386e:	2000      	movs	r0, #0
 8003870:	f7ff feef 	bl	8003652 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003874:	4b20      	ldr	r3, [pc, #128]	@ (80038f8 <SystemClock_Config+0xd8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800387c:	4a1e      	ldr	r2, [pc, #120]	@ (80038f8 <SystemClock_Config+0xd8>)
 800387e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b1c      	ldr	r3, [pc, #112]	@ (80038f8 <SystemClock_Config+0xd8>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8003890:	2307      	movs	r3, #7
 8003892:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003894:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003898:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800389a:	2301      	movs	r3, #1
 800389c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800389e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80038a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80038a4:	2340      	movs	r3, #64	@ 0x40
 80038a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038ac:	f107 0320 	add.w	r3, r7, #32
 80038b0:	4618      	mov	r0, r3
 80038b2:	f004 f985 	bl	8007bc0 <HAL_RCC_OscConfig>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80038bc:	f000 fa26 	bl	8003d0c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80038c0:	236f      	movs	r3, #111	@ 0x6f
 80038c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80038c4:	2302      	movs	r3, #2
 80038c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038cc:	2300      	movs	r3, #0
 80038ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80038d4:	2300      	movs	r3, #0
 80038d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038dc:	1d3b      	adds	r3, r7, #4
 80038de:	2101      	movs	r1, #1
 80038e0:	4618      	mov	r0, r3
 80038e2:	f004 fce1 	bl	80082a8 <HAL_RCC_ClockConfig>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80038ec:	f000 fa0e 	bl	8003d0c <Error_Handler>
  }
}
 80038f0:	bf00      	nop
 80038f2:	3768      	adds	r7, #104	@ 0x68
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	58000400 	.word	0x58000400

080038fc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b094      	sub	sp, #80	@ 0x50
 8003900:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003902:	463b      	mov	r3, r7
 8003904:	2250      	movs	r2, #80	@ 0x50
 8003906:	2100      	movs	r1, #0
 8003908:	4618      	mov	r0, r3
 800390a:	f012 fa47 	bl	8015d9c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800390e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8003912:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8003914:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003918:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 800391a:	2302      	movs	r3, #2
 800391c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800391e:	2310      	movs	r3, #16
 8003920:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003922:	463b      	mov	r3, r7
 8003924:	4618      	mov	r0, r3
 8003926:	f005 f8f5 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8003930:	f000 f9ec 	bl	8003d0c <Error_Handler>
  /* USER CODE BEGIN Smps */



  /* USER CODE END Smps */
}
 8003934:	bf00      	nop
 8003936:	3750      	adds	r7, #80	@ 0x50
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003940:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <MX_I2C1_Init+0x74>)
 8003942:	4a1c      	ldr	r2, [pc, #112]	@ (80039b4 <MX_I2C1_Init+0x78>)
 8003944:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8003946:	4b1a      	ldr	r3, [pc, #104]	@ (80039b0 <MX_I2C1_Init+0x74>)
 8003948:	4a1b      	ldr	r2, [pc, #108]	@ (80039b8 <MX_I2C1_Init+0x7c>)
 800394a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800394c:	4b18      	ldr	r3, [pc, #96]	@ (80039b0 <MX_I2C1_Init+0x74>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003952:	4b17      	ldr	r3, [pc, #92]	@ (80039b0 <MX_I2C1_Init+0x74>)
 8003954:	2201      	movs	r2, #1
 8003956:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003958:	4b15      	ldr	r3, [pc, #84]	@ (80039b0 <MX_I2C1_Init+0x74>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800395e:	4b14      	ldr	r3, [pc, #80]	@ (80039b0 <MX_I2C1_Init+0x74>)
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003964:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <MX_I2C1_Init+0x74>)
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800396a:	4b11      	ldr	r3, [pc, #68]	@ (80039b0 <MX_I2C1_Init+0x74>)
 800396c:	2200      	movs	r2, #0
 800396e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003970:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <MX_I2C1_Init+0x74>)
 8003972:	2200      	movs	r2, #0
 8003974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003976:	480e      	ldr	r0, [pc, #56]	@ (80039b0 <MX_I2C1_Init+0x74>)
 8003978:	f001 fb76 	bl	8005068 <HAL_I2C_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003982:	f000 f9c3 	bl	8003d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003986:	2100      	movs	r1, #0
 8003988:	4809      	ldr	r0, [pc, #36]	@ (80039b0 <MX_I2C1_Init+0x74>)
 800398a:	f001 ff3b 	bl	8005804 <HAL_I2CEx_ConfigAnalogFilter>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003994:	f000 f9ba 	bl	8003d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003998:	2100      	movs	r1, #0
 800399a:	4805      	ldr	r0, [pc, #20]	@ (80039b0 <MX_I2C1_Init+0x74>)
 800399c:	f001 ff7d 	bl	800589a <HAL_I2CEx_ConfigDigitalFilter>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80039a6:	f000 f9b1 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20000ccc 	.word	0x20000ccc
 80039b4:	40005400 	.word	0x40005400
 80039b8:	00707cbb 	.word	0x00707cbb

080039bc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80039c0:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <MX_IPCC_Init+0x20>)
 80039c2:	4a07      	ldr	r2, [pc, #28]	@ (80039e0 <MX_IPCC_Init+0x24>)
 80039c4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80039c6:	4805      	ldr	r0, [pc, #20]	@ (80039dc <MX_IPCC_Init+0x20>)
 80039c8:	f001 ffb4 	bl	8005934 <HAL_IPCC_Init>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80039d2:	f000 f99b 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000d20 	.word	0x20000d20
 80039e0:	58000c00 	.word	0x58000c00

080039e4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80039f8:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <MX_RNG_Init+0x24>)
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <MX_RNG_Init+0x28>)
 80039fc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80039fe:	4b06      	ldr	r3, [pc, #24]	@ (8003a18 <MX_RNG_Init+0x24>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003a04:	4804      	ldr	r0, [pc, #16]	@ (8003a18 <MX_RNG_Init+0x24>)
 8003a06:	f005 fb46 	bl	8009096 <HAL_RNG_Init>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8003a10:	f000 f97c 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20000d5c 	.word	0x20000d5c
 8003a1c:	58001000 	.word	0x58001000

08003a20 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003a24:	4b16      	ldr	r3, [pc, #88]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a26:	4a17      	ldr	r2, [pc, #92]	@ (8003a84 <MX_RTC_Init+0x64>)
 8003a28:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003a2a:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8003a30:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a32:	220f      	movs	r2, #15
 8003a34:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8003a36:	4b12      	ldr	r3, [pc, #72]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a38:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8003a3c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003a44:	4b0e      	ldr	r3, [pc, #56]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003a50:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003a56:	480a      	ldr	r0, [pc, #40]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a58:	f005 fbbc 	bl	80091d4 <HAL_RTC_Init>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003a62:	f000 f953 	bl	8003d0c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003a66:	2200      	movs	r2, #0
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4805      	ldr	r0, [pc, #20]	@ (8003a80 <MX_RTC_Init+0x60>)
 8003a6c:	f005 fcb2 	bl	80093d4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8003a76:	f000 f949 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20000d70 	.word	0x20000d70
 8003a84:	40002800 	.word	0x40002800

08003a88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b00 <MX_SPI1_Init+0x78>)
 8003a90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003a92:	4b1a      	ldr	r3, [pc, #104]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003a94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003a9a:	4b18      	ldr	r3, [pc, #96]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003aa0:	4b16      	ldr	r3, [pc, #88]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003aa2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003aa6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003aa8:	4b14      	ldr	r3, [pc, #80]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003aae:	4b13      	ldr	r3, [pc, #76]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003ab4:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003aba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003abc:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003abe:	2208      	movs	r2, #8
 8003ac0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ace:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8003ad4:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003ada:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003ae6:	4805      	ldr	r0, [pc, #20]	@ (8003afc <MX_SPI1_Init+0x74>)
 8003ae8:	f005 fd30 	bl	800954c <HAL_SPI_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8003af2:	f000 f90b 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003af6:	bf00      	nop
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000d94 	.word	0x20000d94
 8003b00:	40013000 	.word	0x40013000

08003b04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b0a:	f107 0310 	add.w	r3, r7, #16
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	609a      	str	r2, [r3, #8]
 8003b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b18:	1d3b      	adds	r3, r7, #4
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003b22:	4b1e      	ldr	r3, [pc, #120]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003b28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 8003b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b2c:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8003b30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003b32:	4b1a      	ldr	r3, [pc, #104]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b34:	2210      	movs	r2, #16
 8003b36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8003b38:	4b18      	ldr	r3, [pc, #96]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b3a:	2264      	movs	r2, #100	@ 0x64
 8003b3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b3e:	4b17      	ldr	r3, [pc, #92]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003b4a:	4814      	ldr	r0, [pc, #80]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b4c:	f006 fa9c 	bl	800a088 <HAL_TIM_Base_Init>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003b56:	f000 f8d9 	bl	8003d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003b60:	f107 0310 	add.w	r3, r7, #16
 8003b64:	4619      	mov	r1, r3
 8003b66:	480d      	ldr	r0, [pc, #52]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b68:	f006 fc3b 	bl	800a3e2 <HAL_TIM_ConfigClockSource>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003b72:	f000 f8cb 	bl	8003d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4806      	ldr	r0, [pc, #24]	@ (8003b9c <MX_TIM2_Init+0x98>)
 8003b84:	f006 fe2a 	bl	800a7dc <HAL_TIMEx_MasterConfigSynchronization>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003b8e:	f000 f8bd 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003b92:	bf00      	nop
 8003b94:	3720      	adds	r7, #32
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	20000df8 	.word	0x20000df8

08003ba0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003ba4:	2004      	movs	r0, #4
 8003ba6:	f7ff fd6a 	bl	800367e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7ff fd67 	bl	800367e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	200b      	movs	r0, #11
 8003bb6:	f000 fe0e 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003bba:	200b      	movs	r0, #11
 8003bbc:	f000 fe25 	bl	800480a <HAL_NVIC_EnableIRQ>

}
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	2200      	movs	r2, #0
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	605a      	str	r2, [r3, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bd8:	2004      	movs	r0, #4
 8003bda:	f7ff fd69 	bl	80036b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bde:	2002      	movs	r0, #2
 8003be0:	f7ff fd66 	bl	80036b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be4:	2001      	movs	r0, #1
 8003be6:	f7ff fd63 	bl	80036b0 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003bea:	2010      	movs	r0, #16
 8003bec:	f7ff fd60 	bl	80036b0 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_RSTB_Pin|ADS_CS_Pin, GPIO_PIN_SET);
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	2103      	movs	r1, #3
 8003bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003bf8:	f001 f9e2 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2140      	movs	r1, #64	@ 0x40
 8003c00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c04:	f001 f9dc 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_ADDR_GPIO_Port, IMU_ADDR_Pin, GPIO_PIN_RESET);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	483d      	ldr	r0, [pc, #244]	@ (8003d04 <MX_GPIO_Init+0x140>)
 8003c0e:	f001 f9d7 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);
 8003c12:	2201      	movs	r2, #1
 8003c14:	2103      	movs	r1, #3
 8003c16:	483b      	ldr	r0, [pc, #236]	@ (8003d04 <MX_GPIO_Init+0x140>)
 8003c18:	f001 f9d2 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET);
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2110      	movs	r1, #16
 8003c20:	4839      	ldr	r0, [pc, #228]	@ (8003d08 <MX_GPIO_Init+0x144>)
 8003c22:	f001 f9cd 	bl	8004fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADS_RSTB_Pin ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_RSTB_Pin|ADS_CS_Pin;
 8003c26:	2303      	movs	r3, #3
 8003c28:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c32:	2300      	movs	r3, #0
 8003c34:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c3e:	f001 f84f 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 8003c42:	2330      	movs	r3, #48	@ 0x30
 8003c44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c46:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003c4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c50:	1d3b      	adds	r3, r7, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c58:	f001 f842 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8003c5c:	2340      	movs	r3, #64	@ 0x40
 8003c5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c60:	2301      	movs	r3, #1
 8003c62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8003c6c:	1d3b      	adds	r3, r7, #4
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c74:	f001 f834 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_ADDR_Pin RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = IMU_ADDR_Pin|RGB_B_Pin|RGB_G_Pin;
 8003c78:	2307      	movs	r3, #7
 8003c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c88:	1d3b      	adds	r3, r7, #4
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	481d      	ldr	r0, [pc, #116]	@ (8003d04 <MX_GPIO_Init+0x140>)
 8003c8e:	f001 f827 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 8003c92:	2310      	movs	r3, #16
 8003c94:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4818      	ldr	r0, [pc, #96]	@ (8003d08 <MX_GPIO_Init+0x144>)
 8003ca8:	f001 f81a 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_ALARMB_Pin */
  GPIO_InitStruct.Pin = ADS_ALARMB_Pin;
 8003cac:	2340      	movs	r3, #64	@ 0x40
 8003cae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_ALARMB_GPIO_Port, &GPIO_InitStruct);
 8003cb8:	1d3b      	adds	r3, r7, #4
 8003cba:	4619      	mov	r1, r3
 8003cbc:	4811      	ldr	r0, [pc, #68]	@ (8003d04 <MX_GPIO_Init+0x140>)
 8003cbe:	f001 f80f 	bl	8004ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 8003cc2:	2380      	movs	r3, #128	@ 0x80
 8003cc4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cc6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8003cca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	480b      	ldr	r0, [pc, #44]	@ (8003d04 <MX_GPIO_Init+0x140>)
 8003cd6:	f001 f803 	bl	8004ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	200a      	movs	r0, #10
 8003ce0:	f000 fd79 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003ce4:	200a      	movs	r0, #10
 8003ce6:	f000 fd90 	bl	800480a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	2017      	movs	r0, #23
 8003cf0:	f000 fd71 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003cf4:	2017      	movs	r0, #23
 8003cf6:	f000 fd88 	bl	800480a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	48000400 	.word	0x48000400
 8003d08:	48001000 	.word	0x48001000

08003d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003d10:	b672      	cpsid	i
}
 8003d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SET_RGB_COLOR(RED);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2110      	movs	r1, #16
 8003d18:	4806      	ldr	r0, [pc, #24]	@ (8003d34 <Error_Handler+0x28>)
 8003d1a:	f001 f951 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003d1e:	2201      	movs	r2, #1
 8003d20:	2102      	movs	r1, #2
 8003d22:	4805      	ldr	r0, [pc, #20]	@ (8003d38 <Error_Handler+0x2c>)
 8003d24:	f001 f94c 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003d28:	2201      	movs	r2, #1
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	4802      	ldr	r0, [pc, #8]	@ (8003d38 <Error_Handler+0x2c>)
 8003d2e:	f001 f947 	bl	8004fc0 <HAL_GPIO_WritePin>
 8003d32:	e7ef      	b.n	8003d14 <Error_Handler+0x8>
 8003d34:	48001000 	.word	0x48001000
 8003d38:	48000400 	.word	0x48000400

08003d3c <LL_RCC_EnableRTC>:
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8003d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003d4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_AHB2_GRP1_EnableClock>:
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b085      	sub	sp, #20
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003d66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003d76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003d82:	68fb      	ldr	r3, [r7, #12]
}
 8003d84:	bf00      	nop
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <LL_AHB3_GRP1_EnableClock>:
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003d9e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4013      	ands	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003db4:	68fb      	ldr	r3, [r7, #12]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_APB1_GRP1_EnableClock>:
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b085      	sub	sp, #20
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003dd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dde:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4013      	ands	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003de6:	68fb      	ldr	r3, [r7, #12]
}
 8003de8:	bf00      	nop
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003e0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	4013      	ands	r3, r2
 8003e16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	bf00      	nop
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8003e2a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003e2e:	f7ff ffaf 	bl	8003d90 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8003e32:	2200      	movs	r2, #0
 8003e34:	2100      	movs	r1, #0
 8003e36:	2005      	movs	r0, #5
 8003e38:	f000 fccd 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003e3c:	2005      	movs	r0, #5
 8003e3e:	f000 fce4 	bl	800480a <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003e42:	2200      	movs	r2, #0
 8003e44:	2100      	movs	r1, #0
 8003e46:	202e      	movs	r0, #46	@ 0x2e
 8003e48:	f000 fcc5 	bl	80047d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003e4c:	202e      	movs	r0, #46	@ 0x2e
 8003e4e:	f000 fcdc 	bl	800480a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b09c      	sub	sp, #112	@ 0x70
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003e70:	f107 030c 	add.w	r3, r7, #12
 8003e74:	2250      	movs	r2, #80	@ 0x50
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f011 ff8f 	bl	8015d9c <memset>
  if(hi2c->Instance==I2C1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a17      	ldr	r2, [pc, #92]	@ (8003ee0 <HAL_I2C_MspInit+0x88>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d126      	bne.n	8003ed6 <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003e88:	2304      	movs	r3, #4
 8003e8a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003e8c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8003e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e92:	f107 030c 	add.w	r3, r7, #12
 8003e96:	4618      	mov	r0, r3
 8003e98:	f004 fe3c 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003ea2:	f7ff ff33 	bl	8003d0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ea6:	2002      	movs	r0, #2
 8003ea8:	f7ff ff59 	bl	8003d5e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003eac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eb2:	2312      	movs	r3, #18
 8003eb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ec2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4806      	ldr	r0, [pc, #24]	@ (8003ee4 <HAL_I2C_MspInit+0x8c>)
 8003eca:	f000 ff09 	bl	8004ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003ece:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003ed2:	f7ff ff76 	bl	8003dc2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ed6:	bf00      	nop
 8003ed8:	3770      	adds	r7, #112	@ 0x70
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40005400 	.word	0x40005400
 8003ee4:	48000400 	.word	0x48000400

08003ee8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8003f2c <HAL_IPCC_MspInit+0x44>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d113      	bne.n	8003f22 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003efa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003efe:	f7ff ff47 	bl	8003d90 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003f02:	2200      	movs	r2, #0
 8003f04:	2100      	movs	r1, #0
 8003f06:	202c      	movs	r0, #44	@ 0x2c
 8003f08:	f000 fc65 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003f0c:	202c      	movs	r0, #44	@ 0x2c
 8003f0e:	f000 fc7c 	bl	800480a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003f12:	2200      	movs	r2, #0
 8003f14:	2100      	movs	r1, #0
 8003f16:	202d      	movs	r0, #45	@ 0x2d
 8003f18:	f000 fc5d 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003f1c:	202d      	movs	r0, #45	@ 0x2d
 8003f1e:	f000 fc74 	bl	800480a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003f22:	bf00      	nop
 8003f24:	3708      	adds	r7, #8
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	58000c00 	.word	0x58000c00

08003f30 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b096      	sub	sp, #88	@ 0x58
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f38:	f107 0308 	add.w	r3, r7, #8
 8003f3c:	2250      	movs	r2, #80	@ 0x50
 8003f3e:	2100      	movs	r1, #0
 8003f40:	4618      	mov	r0, r3
 8003f42:	f011 ff2b 	bl	8015d9c <memset>
  if(hrng->Instance==RNG)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a11      	ldr	r2, [pc, #68]	@ (8003f90 <HAL_RNG_MspInit+0x60>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d11b      	bne.n	8003f88 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003f50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f54:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 8003f56:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003f5a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f5c:	f107 0308 	add.w	r3, r7, #8
 8003f60:	4618      	mov	r0, r3
 8003f62:	f004 fdd7 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003f6c:	f7ff fece 	bl	8003d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003f70:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8003f74:	f7ff ff0c 	bl	8003d90 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2100      	movs	r1, #0
 8003f7c:	2035      	movs	r0, #53	@ 0x35
 8003f7e:	f000 fc2a 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 8003f82:	2035      	movs	r0, #53	@ 0x35
 8003f84:	f000 fc41 	bl	800480a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003f88:	bf00      	nop
 8003f8a:	3758      	adds	r7, #88	@ 0x58
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	58001000 	.word	0x58001000

08003f94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b096      	sub	sp, #88	@ 0x58
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003f9c:	f107 0308 	add.w	r3, r7, #8
 8003fa0:	2250      	movs	r2, #80	@ 0x50
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f011 fef9 	bl	8015d9c <memset>
  if(hrtc->Instance==RTC)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a12      	ldr	r2, [pc, #72]	@ (8003ff8 <HAL_RTC_MspInit+0x64>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d11d      	bne.n	8003ff0 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003fb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003fb8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003fba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003fc0:	f107 0308 	add.w	r3, r7, #8
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f004 fda5 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d001      	beq.n	8003fd4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003fd0:	f7ff fe9c 	bl	8003d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003fd4:	f7ff feb2 	bl	8003d3c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003fd8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003fdc:	f7ff fef1 	bl	8003dc2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	2003      	movs	r0, #3
 8003fe6:	f000 fbf6 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003fea:	2003      	movs	r0, #3
 8003fec:	f000 fc0d 	bl	800480a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003ff0:	bf00      	nop
 8003ff2:	3758      	adds	r7, #88	@ 0x58
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40002800 	.word	0x40002800

08003ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	2200      	movs	r2, #0
 800400a:	601a      	str	r2, [r3, #0]
 800400c:	605a      	str	r2, [r3, #4]
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a0e      	ldr	r2, [pc, #56]	@ (8004054 <HAL_SPI_MspInit+0x58>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d116      	bne.n	800404c <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800401e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004022:	f7ff fee7 	bl	8003df4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004026:	2002      	movs	r0, #2
 8004028:	f7ff fe99 	bl	8003d5e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800402c:	2338      	movs	r3, #56	@ 0x38
 800402e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004038:	2300      	movs	r3, #0
 800403a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800403c:	2305      	movs	r3, #5
 800403e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004040:	f107 030c 	add.w	r3, r7, #12
 8004044:	4619      	mov	r1, r3
 8004046:	4804      	ldr	r0, [pc, #16]	@ (8004058 <HAL_SPI_MspInit+0x5c>)
 8004048:	f000 fe4a 	bl	8004ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800404c:	bf00      	nop
 800404e:	3720      	adds	r7, #32
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40013000 	.word	0x40013000
 8004058:	48000400 	.word	0x48000400

0800405c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406c:	d10a      	bne.n	8004084 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800406e:	2001      	movs	r0, #1
 8004070:	f7ff fea7 	bl	8003dc2 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004074:	2200      	movs	r2, #0
 8004076:	2100      	movs	r1, #0
 8004078:	201c      	movs	r0, #28
 800407a:	f000 fbac 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800407e:	201c      	movs	r0, #28
 8004080:	f000 fbc3 	bl	800480a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004090:	bf00      	nop
 8004092:	e7fd      	b.n	8004090 <NMI_Handler+0x4>

08004094 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <HardFault_Handler+0x4>

0800409c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040a0:	bf00      	nop
 80040a2:	e7fd      	b.n	80040a0 <MemManage_Handler+0x4>

080040a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040a8:	bf00      	nop
 80040aa:	e7fd      	b.n	80040a8 <BusFault_Handler+0x4>

080040ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040b0:	bf00      	nop
 80040b2:	e7fd      	b.n	80040b0 <UsageFault_Handler+0x4>

080040b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040b8:	bf00      	nop
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040c2:	b480      	push	{r7}
 80040c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040c6:	bf00      	nop
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040d4:	bf00      	nop
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040e2:	f000 fa05 	bl	80044f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040e6:	bf00      	nop
 80040e8:	bd80      	pop	{r7, pc}

080040ea <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80040ee:	f7fe fdcb 	bl	8002c88 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80040f6:	b480      	push	{r7}
 80040f8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80040fa:	bf00      	nop
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8004108:	2010      	movs	r0, #16
 800410a:	f000 ff71 	bl	8004ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
	...

08004114 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004118:	4802      	ldr	r0, [pc, #8]	@ (8004124 <DMA1_Channel1_IRQHandler+0x10>)
 800411a:	f000 fcf3 	bl	8004b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800411e:	bf00      	nop
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	20000ed8 	.word	0x20000ed8

08004128 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800412c:	4802      	ldr	r0, [pc, #8]	@ (8004138 <USB_LP_IRQHandler+0x10>)
 800412e:	f001 fd77 	bl	8005c20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	2000256c 	.word	0x2000256c

0800413c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 8004140:	2020      	movs	r0, #32
 8004142:	f000 ff55 	bl	8004ff0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8004146:	2080      	movs	r0, #128	@ 0x80
 8004148:	f000 ff52 	bl	8004ff0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800414c:	bf00      	nop
 800414e:	bd80      	pop	{r7, pc}

08004150 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004154:	4802      	ldr	r0, [pc, #8]	@ (8004160 <TIM2_IRQHandler+0x10>)
 8004156:	f006 f83d 	bl	800a1d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800415a:	bf00      	nop
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	20000df8 	.word	0x20000df8

08004164 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004168:	4802      	ldr	r0, [pc, #8]	@ (8004174 <USART1_IRQHandler+0x10>)
 800416a:	f006 fc35 	bl	800a9d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800416e:	bf00      	nop
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000e44 	.word	0x20000e44

08004178 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800417c:	f010 faaa 	bl	80146d4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8004180:	bf00      	nop
 8004182:	bd80      	pop	{r7, pc}

08004184 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004188:	f010 fada 	bl	8014740 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800418c:	bf00      	nop
 800418e:	bd80      	pop	{r7, pc}

08004190 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004194:	f000 ff44 	bl	8005020 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004198:	bf00      	nop
 800419a:	bd80      	pop	{r7, pc}

0800419c <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80041a0:	4802      	ldr	r0, [pc, #8]	@ (80041ac <RNG_IRQHandler+0x10>)
 80041a2:	f004 ffad 	bl	8009100 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000d5c 	.word	0x20000d5c

080041b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041bc:	2300      	movs	r3, #0
 80041be:	617b      	str	r3, [r7, #20]
 80041c0:	e00a      	b.n	80041d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80041c2:	f3af 8000 	nop.w
 80041c6:	4601      	mov	r1, r0
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	60ba      	str	r2, [r7, #8]
 80041ce:	b2ca      	uxtb	r2, r1
 80041d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3301      	adds	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697a      	ldr	r2, [r7, #20]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	429a      	cmp	r2, r3
 80041de:	dbf0      	blt.n	80041c2 <_read+0x12>
  }

  return len;
 80041e0:	687b      	ldr	r3, [r7, #4]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <_close>:
  }
  return len;
}

int _close(int file)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80041f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	370c      	adds	r7, #12
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004212:	605a      	str	r2, [r3, #4]
  return 0;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <_isatty>:

int _isatty(int file)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800422a:	2301      	movs	r3, #1
}
 800422c:	4618      	mov	r0, r3
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
	...

08004254 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800425c:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <_sbrk+0x5c>)
 800425e:	4b15      	ldr	r3, [pc, #84]	@ (80042b4 <_sbrk+0x60>)
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004268:	4b13      	ldr	r3, [pc, #76]	@ (80042b8 <_sbrk+0x64>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d102      	bne.n	8004276 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <_sbrk+0x64>)
 8004272:	4a12      	ldr	r2, [pc, #72]	@ (80042bc <_sbrk+0x68>)
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004276:	4b10      	ldr	r3, [pc, #64]	@ (80042b8 <_sbrk+0x64>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	429a      	cmp	r2, r3
 8004282:	d207      	bcs.n	8004294 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004284:	f011 fe00 	bl	8015e88 <__errno>
 8004288:	4603      	mov	r3, r0
 800428a:	220c      	movs	r2, #12
 800428c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	e009      	b.n	80042a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004294:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <_sbrk+0x64>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800429a:	4b07      	ldr	r3, [pc, #28]	@ (80042b8 <_sbrk+0x64>)
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4413      	add	r3, r2
 80042a2:	4a05      	ldr	r2, [pc, #20]	@ (80042b8 <_sbrk+0x64>)
 80042a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	20030000 	.word	0x20030000
 80042b4:	00000600 	.word	0x00000600
 80042b8:	20000f38 	.word	0x20000f38
 80042bc:	20002c60 	.word	0x20002c60

080042c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80042c4:	4b24      	ldr	r3, [pc, #144]	@ (8004358 <SystemInit+0x98>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042ca:	4a23      	ldr	r2, [pc, #140]	@ (8004358 <SystemInit+0x98>)
 80042cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80042d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80042e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042e8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80042ec:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80042ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80042f8:	4b18      	ldr	r3, [pc, #96]	@ (800435c <SystemInit+0x9c>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004306:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800430a:	f023 0305 	bic.w	r3, r3, #5
 800430e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800431a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004326:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800432a:	4a0d      	ldr	r2, [pc, #52]	@ (8004360 <SystemInit+0xa0>)
 800432c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800432e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004332:	4a0b      	ldr	r2, [pc, #44]	@ (8004360 <SystemInit+0xa0>)
 8004334:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004340:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004344:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800434a:	2200      	movs	r2, #0
 800434c:	619a      	str	r2, [r3, #24]
}
 800434e:	bf00      	nop
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr
 8004358:	e000ed00 	.word	0xe000ed00
 800435c:	faf6fefb 	.word	0xfaf6fefb
 8004360:	22041000 	.word	0x22041000

08004364 <Timer_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Timer_Init (void)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	af00      	add	r7, sp, #0
	DIAG ("\t\tTimer initialised\r\n");
 8004368:	4805      	ldr	r0, [pc, #20]	@ (8004380 <Timer_Init+0x1c>)
 800436a:	f7fe f8dd 	bl	8002528 <DIAG>
	HAL_Delay (10);
 800436e:	200a      	movs	r0, #10
 8004370:	f7fe f84e 	bl	8002410 <HAL_Delay>
	// Start TIM2 in basic mode
	HAL_TIM_Base_Start_IT(&htim2);
 8004374:	4803      	ldr	r0, [pc, #12]	@ (8004384 <Timer_Init+0x20>)
 8004376:	f005 fedf 	bl	800a138 <HAL_TIM_Base_Start_IT>
}
 800437a:	bf00      	nop
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	080171ac 	.word	0x080171ac
 8004384:	20000df8 	.word	0x20000df8

08004388 <HAL_TIM_PeriodElapsedCallback>:

//------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

	// Base timer @ 1ms
	if (htim->Instance == TIM2)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004398:	d10b      	bne.n	80043b2 <HAL_TIM_PeriodElapsedCallback+0x2a>
	{

//		tsTimer.bImuFlag = true;
		// Clear the timer interrupt flag
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);		  // Clear the timer interrupt flag
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f06f 0201 	mvn.w	r2, #1
 80043a2:	611a      	str	r2, [r3, #16]
		tsTimer.TimeFlag = true;
 80043a4:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80043a6:	2201      	movs	r2, #1
 80043a8:	709a      	strb	r2, [r3, #2]
//		tsTimer.bImuFlag = true;
		htim2.Init.Period = Interrupt_ms;
 80043aa:	4b06      	ldr	r3, [pc, #24]	@ (80043c4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80043ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80043b0:	60da      	str	r2, [r3, #12]

		//DIAG ("%d\r",  i++);
	}
}
 80043b2:	bf00      	nop
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	20000f3c 	.word	0x20000f3c
 80043c4:	20000df8 	.word	0x20000df8

080043c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80043c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043cc:	3304      	adds	r3, #4

080043ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80043d2:	d3f9      	bcc.n	80043c8 <CopyDataInit>
  bx lr
 80043d4:	4770      	bx	lr

080043d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80043d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80043d8:	3004      	adds	r0, #4

080043da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80043da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80043dc:	d3fb      	bcc.n	80043d6 <FillZerobss>
  bx lr
 80043de:	4770      	bx	lr

080043e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80043e0:	480c      	ldr	r0, [pc, #48]	@ (8004414 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80043e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80043e4:	f7ff ff6c 	bl	80042c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80043e8:	480b      	ldr	r0, [pc, #44]	@ (8004418 <LoopForever+0x6>)
 80043ea:	490c      	ldr	r1, [pc, #48]	@ (800441c <LoopForever+0xa>)
 80043ec:	4a0c      	ldr	r2, [pc, #48]	@ (8004420 <LoopForever+0xe>)
 80043ee:	2300      	movs	r3, #0
 80043f0:	f7ff ffed 	bl	80043ce <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80043f4:	480b      	ldr	r0, [pc, #44]	@ (8004424 <LoopForever+0x12>)
 80043f6:	490c      	ldr	r1, [pc, #48]	@ (8004428 <LoopForever+0x16>)
 80043f8:	4a0c      	ldr	r2, [pc, #48]	@ (800442c <LoopForever+0x1a>)
 80043fa:	2300      	movs	r3, #0
 80043fc:	f7ff ffe7 	bl	80043ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004400:	480b      	ldr	r0, [pc, #44]	@ (8004430 <LoopForever+0x1e>)
 8004402:	490c      	ldr	r1, [pc, #48]	@ (8004434 <LoopForever+0x22>)
 8004404:	2300      	movs	r3, #0
 8004406:	f7ff ffe8 	bl	80043da <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800440a:	f011 fd43 	bl	8015e94 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800440e:	f7ff f9dd 	bl	80037cc <main>

08004412 <LoopForever>:

LoopForever:
  b LoopForever
 8004412:	e7fe      	b.n	8004412 <LoopForever>
  ldr   r0, =_estack
 8004414:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004418:	20000008 	.word	0x20000008
 800441c:	20000188 	.word	0x20000188
 8004420:	08018a30 	.word	0x08018a30
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004424:	200301e4 	.word	0x200301e4
 8004428:	20031f57 	.word	0x20031f57
 800442c:	08018bf6 	.word	0x08018bf6
  INIT_BSS _sbss, _ebss
 8004430:	200001d4 	.word	0x200001d4
 8004434:	20002c5c 	.word	0x20002c5c

08004438 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004438:	e7fe      	b.n	8004438 <ADC1_IRQHandler>
	...

0800443c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004446:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <HAL_Init+0x3c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a0b      	ldr	r2, [pc, #44]	@ (8004478 <HAL_Init+0x3c>)
 800444c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004450:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004452:	2003      	movs	r0, #3
 8004454:	f000 f9b4 	bl	80047c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004458:	2000      	movs	r0, #0
 800445a:	f000 f80f 	bl	800447c <HAL_InitTick>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	71fb      	strb	r3, [r7, #7]
 8004468:	e001      	b.n	800446e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800446a:	f7ff fcdc 	bl	8003e26 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800446e:	79fb      	ldrb	r3, [r7, #7]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3708      	adds	r7, #8
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	58004000 	.word	0x58004000

0800447c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004484:	2300      	movs	r3, #0
 8004486:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004488:	4b17      	ldr	r3, [pc, #92]	@ (80044e8 <HAL_InitTick+0x6c>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d024      	beq.n	80044da <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004490:	f004 f8b6 	bl	8008600 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b14      	ldr	r3, [pc, #80]	@ (80044e8 <HAL_InitTick+0x6c>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	4619      	mov	r1, r3
 800449c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80044a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f9ca 	bl	8004842 <HAL_SYSTICK_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10f      	bne.n	80044d4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b0f      	cmp	r3, #15
 80044b8:	d809      	bhi.n	80044ce <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044ba:	2200      	movs	r2, #0
 80044bc:	6879      	ldr	r1, [r7, #4]
 80044be:	f04f 30ff 	mov.w	r0, #4294967295
 80044c2:	f000 f988 	bl	80047d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80044c6:	4a09      	ldr	r2, [pc, #36]	@ (80044ec <HAL_InitTick+0x70>)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e007      	b.n	80044de <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	73fb      	strb	r3, [r7, #15]
 80044d2:	e004      	b.n	80044de <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e001      	b.n	80044de <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80044de:	7bfb      	ldrb	r3, [r7, #15]
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	20000014 	.word	0x20000014
 80044ec:	20000010 	.word	0x20000010

080044f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80044f4:	4b06      	ldr	r3, [pc, #24]	@ (8004510 <HAL_IncTick+0x20>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_IncTick+0x24>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4413      	add	r3, r2
 8004500:	4a04      	ldr	r2, [pc, #16]	@ (8004514 <HAL_IncTick+0x24>)
 8004502:	6013      	str	r3, [r2, #0]
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000014 	.word	0x20000014
 8004514:	20000f44 	.word	0x20000f44

08004518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  return uwTick;
 800451c:	4b03      	ldr	r3, [pc, #12]	@ (800452c <HAL_GetTick+0x14>)
 800451e:	681b      	ldr	r3, [r3, #0]
}
 8004520:	4618      	mov	r0, r3
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	20000f44 	.word	0x20000f44

08004530 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <HAL_GetTickPrio+0x14>)
 8004536:	681b      	ldr	r3, [r3, #0]
}
 8004538:	4618      	mov	r0, r3
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000010 	.word	0x20000010

08004548 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800454c:	4b03      	ldr	r3, [pc, #12]	@ (800455c <HAL_GetTickFreq+0x14>)
 800454e:	781b      	ldrb	r3, [r3, #0]
}
 8004550:	4618      	mov	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	20000014 	.word	0x20000014

08004560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004570:	4b0c      	ldr	r3, [pc, #48]	@ (80045a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800457c:	4013      	ands	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004588:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800458c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004592:	4a04      	ldr	r2, [pc, #16]	@ (80045a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	60d3      	str	r3, [r2, #12]
}
 8004598:	bf00      	nop
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	e000ed00 	.word	0xe000ed00

080045a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80045ac:	4b04      	ldr	r3, [pc, #16]	@ (80045c0 <__NVIC_GetPriorityGrouping+0x18>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	f003 0307 	and.w	r3, r3, #7
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	e000ed00 	.word	0xe000ed00

080045c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	4603      	mov	r3, r0
 80045cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	db0b      	blt.n	80045ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	f003 021f 	and.w	r2, r3, #31
 80045dc:	4907      	ldr	r1, [pc, #28]	@ (80045fc <__NVIC_EnableIRQ+0x38>)
 80045de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2001      	movs	r0, #1
 80045e6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045ee:	bf00      	nop
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	e000e100 	.word	0xe000e100

08004600 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	4603      	mov	r3, r0
 8004608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800460a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800460e:	2b00      	cmp	r3, #0
 8004610:	db12      	blt.n	8004638 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004612:	79fb      	ldrb	r3, [r7, #7]
 8004614:	f003 021f 	and.w	r2, r3, #31
 8004618:	490a      	ldr	r1, [pc, #40]	@ (8004644 <__NVIC_DisableIRQ+0x44>)
 800461a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800461e:	095b      	lsrs	r3, r3, #5
 8004620:	2001      	movs	r0, #1
 8004622:	fa00 f202 	lsl.w	r2, r0, r2
 8004626:	3320      	adds	r3, #32
 8004628:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800462c:	f3bf 8f4f 	dsb	sy
}
 8004630:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004632:	f3bf 8f6f 	isb	sy
}
 8004636:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004638:	bf00      	nop
 800463a:	370c      	adds	r7, #12
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000e100 	.word	0xe000e100

08004648 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004656:	2b00      	cmp	r3, #0
 8004658:	db0c      	blt.n	8004674 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800465a:	79fb      	ldrb	r3, [r7, #7]
 800465c:	f003 021f 	and.w	r2, r3, #31
 8004660:	4907      	ldr	r1, [pc, #28]	@ (8004680 <__NVIC_SetPendingIRQ+0x38>)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	2001      	movs	r0, #1
 800466a:	fa00 f202 	lsl.w	r2, r0, r2
 800466e:	3340      	adds	r3, #64	@ 0x40
 8004670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100

08004684 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	4603      	mov	r3, r0
 800468c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800468e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004692:	2b00      	cmp	r3, #0
 8004694:	db0c      	blt.n	80046b0 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	f003 021f 	and.w	r2, r3, #31
 800469c:	4907      	ldr	r1, [pc, #28]	@ (80046bc <__NVIC_ClearPendingIRQ+0x38>)
 800469e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a2:	095b      	lsrs	r3, r3, #5
 80046a4:	2001      	movs	r0, #1
 80046a6:	fa00 f202 	lsl.w	r2, r0, r2
 80046aa:	3360      	adds	r3, #96	@ 0x60
 80046ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	e000e100 	.word	0xe000e100

080046c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	6039      	str	r1, [r7, #0]
 80046ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	db0a      	blt.n	80046ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	490c      	ldr	r1, [pc, #48]	@ (800470c <__NVIC_SetPriority+0x4c>)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	0112      	lsls	r2, r2, #4
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	440b      	add	r3, r1
 80046e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046e8:	e00a      	b.n	8004700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	4908      	ldr	r1, [pc, #32]	@ (8004710 <__NVIC_SetPriority+0x50>)
 80046f0:	79fb      	ldrb	r3, [r7, #7]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	3b04      	subs	r3, #4
 80046f8:	0112      	lsls	r2, r2, #4
 80046fa:	b2d2      	uxtb	r2, r2
 80046fc:	440b      	add	r3, r1
 80046fe:	761a      	strb	r2, [r3, #24]
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000e100 	.word	0xe000e100
 8004710:	e000ed00 	.word	0xe000ed00

08004714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	@ 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	60f8      	str	r0, [r7, #12]
 800471c:	60b9      	str	r1, [r7, #8]
 800471e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f1c3 0307 	rsb	r3, r3, #7
 800472e:	2b04      	cmp	r3, #4
 8004730:	bf28      	it	cs
 8004732:	2304      	movcs	r3, #4
 8004734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3304      	adds	r3, #4
 800473a:	2b06      	cmp	r3, #6
 800473c:	d902      	bls.n	8004744 <NVIC_EncodePriority+0x30>
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3b03      	subs	r3, #3
 8004742:	e000      	b.n	8004746 <NVIC_EncodePriority+0x32>
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	fa02 f303 	lsl.w	r3, r2, r3
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	401a      	ands	r2, r3
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800475c:	f04f 31ff 	mov.w	r1, #4294967295
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	fa01 f303 	lsl.w	r3, r1, r3
 8004766:	43d9      	mvns	r1, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800476c:	4313      	orrs	r3, r2
         );
}
 800476e:	4618      	mov	r0, r3
 8004770:	3724      	adds	r7, #36	@ 0x24
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
	...

0800477c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	3b01      	subs	r3, #1
 8004788:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800478c:	d301      	bcc.n	8004792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800478e:	2301      	movs	r3, #1
 8004790:	e00f      	b.n	80047b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004792:	4a0a      	ldr	r2, [pc, #40]	@ (80047bc <SysTick_Config+0x40>)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3b01      	subs	r3, #1
 8004798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800479a:	210f      	movs	r1, #15
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	f7ff ff8e 	bl	80046c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047a4:	4b05      	ldr	r3, [pc, #20]	@ (80047bc <SysTick_Config+0x40>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047aa:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <SysTick_Config+0x40>)
 80047ac:	2207      	movs	r2, #7
 80047ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	e000e010 	.word	0xe000e010

080047c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7ff fec9 	bl	8004560 <__NVIC_SetPriorityGrouping>
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b086      	sub	sp, #24
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4603      	mov	r3, r0
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047e4:	f7ff fee0 	bl	80045a8 <__NVIC_GetPriorityGrouping>
 80047e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	6978      	ldr	r0, [r7, #20]
 80047f0:	f7ff ff90 	bl	8004714 <NVIC_EncodePriority>
 80047f4:	4602      	mov	r2, r0
 80047f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047fa:	4611      	mov	r1, r2
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff5f 	bl	80046c0 <__NVIC_SetPriority>
}
 8004802:	bf00      	nop
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}

0800480a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800480a:	b580      	push	{r7, lr}
 800480c:	b082      	sub	sp, #8
 800480e:	af00      	add	r7, sp, #0
 8004810:	4603      	mov	r3, r0
 8004812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fed3 	bl	80045c4 <__NVIC_EnableIRQ>
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	4603      	mov	r3, r0
 800482e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff fee3 	bl	8004600 <__NVIC_DisableIRQ>
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b082      	sub	sp, #8
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7ff ff96 	bl	800477c <SysTick_Config>
 8004850:	4603      	mov	r3, r0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b082      	sub	sp, #8
 800485e:	af00      	add	r7, sp, #0
 8004860:	4603      	mov	r3, r0
 8004862:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8004864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff feed 	bl	8004648 <__NVIC_SetPendingIRQ>
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	b082      	sub	sp, #8
 800487a:	af00      	add	r7, sp, #0
 800487c:	4603      	mov	r3, r0
 800487e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8004880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff fefd 	bl	8004684 <__NVIC_ClearPendingIRQ>
}
 800488a:	bf00      	nop
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b086      	sub	sp, #24
 8004896:	af00      	add	r7, sp, #0
 8004898:	60f8      	str	r0, [r7, #12]
 800489a:	60b9      	str	r1, [r7, #8]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a0:	2300      	movs	r3, #0
 80048a2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_DMA_Start_IT+0x20>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e066      	b.n	8004980 <HAL_DMA_Start_IT+0xee>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d155      	bne.n	8004972 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0201 	bic.w	r2, r2, #1
 80048e2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	68b9      	ldr	r1, [r7, #8]
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f9b9 	bl	8004c62 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 020e 	orr.w	r2, r2, #14
 8004906:	601a      	str	r2, [r3, #0]
 8004908:	e00f      	b.n	800492a <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0204 	bic.w	r2, r2, #4
 8004918:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f042 020a 	orr.w	r2, r2, #10
 8004928:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004942:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004946:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494c:	2b00      	cmp	r3, #0
 800494e:	d007      	beq.n	8004960 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800495a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0201 	orr.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	e005      	b.n	800497e <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800497a:	2302      	movs	r3, #2
 800497c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800497e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e04f      	b.n	8004a3a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d008      	beq.n	80049b8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2204      	movs	r2, #4
 80049aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e040      	b.n	8004a3a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 020e 	bic.w	r2, r2, #14
 80049c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0201 	bic.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ec:	f003 021c 	and.w	r2, r3, #28
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f202 	lsl.w	r2, r1, r2
 80049fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00c      	beq.n	8004a28 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d005      	beq.n	8004a6a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2204      	movs	r2, #4
 8004a62:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e047      	b.n	8004afa <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 020e 	bic.w	r2, r2, #14
 8004a78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 0201 	bic.w	r2, r2, #1
 8004a88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9e:	f003 021c 	and.w	r2, r3, #28
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	fa01 f202 	lsl.w	r2, r1, r2
 8004aac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004ab6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00c      	beq.n	8004ada <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ace:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004ad8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
    }
  }
  return status;
 8004afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b20:	f003 031c 	and.w	r3, r3, #28
 8004b24:	2204      	movs	r2, #4
 8004b26:	409a      	lsls	r2, r3
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d026      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x7a>
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d021      	beq.n	8004b7e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d107      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0204 	bic.w	r2, r2, #4
 8004b56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5c:	f003 021c 	and.w	r2, r3, #28
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	2104      	movs	r1, #4
 8004b66:	fa01 f202 	lsl.w	r2, r1, r2
 8004b6a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d071      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004b7c:	e06c      	b.n	8004c58 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f003 031c 	and.w	r3, r3, #28
 8004b86:	2202      	movs	r2, #2
 8004b88:	409a      	lsls	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d02e      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0xec>
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d029      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f022 020a 	bic.w	r2, r2, #10
 8004bb8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc6:	f003 021c 	and.w	r2, r3, #28
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bce:	2102      	movs	r1, #2
 8004bd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004bd4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d038      	beq.n	8004c58 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004bee:	e033      	b.n	8004c58 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf4:	f003 031c 	and.w	r3, r3, #28
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	409a      	lsls	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02a      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x156>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d025      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 020e 	bic.w	r2, r2, #14
 8004c1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c22:	f003 021c 	and.w	r2, r3, #28
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c30:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d004      	beq.n	8004c5a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
}
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004c78:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004c8a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c90:	f003 021c 	and.w	r2, r3, #28
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8004c9e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	2b10      	cmp	r3, #16
 8004cae:	d108      	bne.n	8004cc2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004cc0:	e007      	b.n	8004cd2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	60da      	str	r2, [r3, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004cee:	e14c      	b.n	8004f8a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2101      	movs	r1, #1
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 813e 	beq.w	8004f84 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0303 	and.w	r3, r3, #3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d005      	beq.n	8004d20 <HAL_GPIO_Init+0x40>
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f003 0303 	and.w	r3, r3, #3
 8004d1c:	2b02      	cmp	r3, #2
 8004d1e:	d130      	bne.n	8004d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	43db      	mvns	r3, r3
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	4013      	ands	r3, r2
 8004d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	68da      	ldr	r2, [r3, #12]
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	005b      	lsls	r3, r3, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	693a      	ldr	r2, [r7, #16]
 8004d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d56:	2201      	movs	r2, #1
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4013      	ands	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	091b      	lsrs	r3, r3, #4
 8004d6c:	f003 0201 	and.w	r2, r3, #1
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	693a      	ldr	r2, [r7, #16]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	693a      	ldr	r2, [r7, #16]
 8004d80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d017      	beq.n	8004dbe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	2203      	movs	r2, #3
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43db      	mvns	r3, r3
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4013      	ands	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	005b      	lsls	r3, r3, #1
 8004dae:	fa02 f303 	lsl.w	r3, r2, r3
 8004db2:	693a      	ldr	r2, [r7, #16]
 8004db4:	4313      	orrs	r3, r2
 8004db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	693a      	ldr	r2, [r7, #16]
 8004dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d123      	bne.n	8004e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	08da      	lsrs	r2, r3, #3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3208      	adds	r2, #8
 8004dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	220f      	movs	r2, #15
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	43db      	mvns	r3, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4013      	ands	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	691a      	ldr	r2, [r3, #16]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f003 0307 	and.w	r3, r3, #7
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	08da      	lsrs	r2, r3, #3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3208      	adds	r2, #8
 8004e0c:	6939      	ldr	r1, [r7, #16]
 8004e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e22:	43db      	mvns	r3, r3
 8004e24:	693a      	ldr	r2, [r7, #16]
 8004e26:	4013      	ands	r3, r2
 8004e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f003 0203 	and.w	r2, r3, #3
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 8098 	beq.w	8004f84 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004e54:	4a54      	ldr	r2, [pc, #336]	@ (8004fa8 <HAL_GPIO_Init+0x2c8>)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	089b      	lsrs	r3, r3, #2
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 0303 	and.w	r3, r3, #3
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	220f      	movs	r2, #15
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4013      	ands	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004e7e:	d019      	beq.n	8004eb4 <HAL_GPIO_Init+0x1d4>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a4a      	ldr	r2, [pc, #296]	@ (8004fac <HAL_GPIO_Init+0x2cc>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d013      	beq.n	8004eb0 <HAL_GPIO_Init+0x1d0>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a49      	ldr	r2, [pc, #292]	@ (8004fb0 <HAL_GPIO_Init+0x2d0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00d      	beq.n	8004eac <HAL_GPIO_Init+0x1cc>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a48      	ldr	r2, [pc, #288]	@ (8004fb4 <HAL_GPIO_Init+0x2d4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <HAL_GPIO_Init+0x1c8>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a47      	ldr	r2, [pc, #284]	@ (8004fb8 <HAL_GPIO_Init+0x2d8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d101      	bne.n	8004ea4 <HAL_GPIO_Init+0x1c4>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e008      	b.n	8004eb6 <HAL_GPIO_Init+0x1d6>
 8004ea4:	2307      	movs	r3, #7
 8004ea6:	e006      	b.n	8004eb6 <HAL_GPIO_Init+0x1d6>
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e004      	b.n	8004eb6 <HAL_GPIO_Init+0x1d6>
 8004eac:	2302      	movs	r3, #2
 8004eae:	e002      	b.n	8004eb6 <HAL_GPIO_Init+0x1d6>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <HAL_GPIO_Init+0x1d6>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	f002 0203 	and.w	r2, r2, #3
 8004ebc:	0092      	lsls	r2, r2, #2
 8004ebe:	4093      	lsls	r3, r2
 8004ec0:	693a      	ldr	r2, [r7, #16]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ec6:	4938      	ldr	r1, [pc, #224]	@ (8004fa8 <HAL_GPIO_Init+0x2c8>)
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	3302      	adds	r3, #2
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004ed4:	4b39      	ldr	r3, [pc, #228]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	43db      	mvns	r3, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d003      	beq.n	8004ef8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004ef8:	4a30      	ldr	r2, [pc, #192]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004efe:	4b2f      	ldr	r3, [pc, #188]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f22:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f28:	4b24      	ldr	r3, [pc, #144]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004f2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	43db      	mvns	r3, r3
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4013      	ands	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8004f46:	693a      	ldr	r2, [r7, #16]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8004f56:	4b19      	ldr	r3, [pc, #100]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004fbc <HAL_GPIO_Init+0x2dc>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	3301      	adds	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	fa22 f303 	lsr.w	r3, r2, r3
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f47f aeab 	bne.w	8004cf0 <HAL_GPIO_Init+0x10>
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	bf00      	nop
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40010000 	.word	0x40010000
 8004fac:	48000400 	.word	0x48000400
 8004fb0:	48000800 	.word	0x48000800
 8004fb4:	48000c00 	.word	0x48000c00
 8004fb8:	48001000 	.word	0x48001000
 8004fbc:	58000800 	.word	0x58000800

08004fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	807b      	strh	r3, [r7, #2]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fd0:	787b      	ldrb	r3, [r7, #1]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d003      	beq.n	8004fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004fd6:	887a      	ldrh	r2, [r7, #2]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004fdc:	e002      	b.n	8004fe4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004fde:	887a      	ldrh	r2, [r7, #2]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004ffa:	4b08      	ldr	r3, [pc, #32]	@ (800501c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d006      	beq.n	8005014 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005006:	4a05      	ldr	r2, [pc, #20]	@ (800501c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800500c:	88fb      	ldrh	r3, [r7, #6]
 800500e:	4618      	mov	r0, r3
 8005010:	f7fd fab8 	bl	8002584 <HAL_GPIO_EXTI_Callback>
  }
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	58000800 	.word	0x58000800

08005020 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005026:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <HAL_HSEM_IRQHandler+0x30>)
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800502c:	4b08      	ldr	r3, [pc, #32]	@ (8005050 <HAL_HSEM_IRQHandler+0x30>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	43db      	mvns	r3, r3
 8005034:	4906      	ldr	r1, [pc, #24]	@ (8005050 <HAL_HSEM_IRQHandler+0x30>)
 8005036:	4013      	ands	r3, r2
 8005038:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800503a:	4a05      	ldr	r2, [pc, #20]	@ (8005050 <HAL_HSEM_IRQHandler+0x30>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f807 	bl	8005054 <HAL_HSEM_FreeCallback>
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	58001500 	.word	0x58001500

08005054 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e08d      	b.n	8005196 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fe fee2 	bl	8003e58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2224      	movs	r2, #36	@ 0x24
 8005098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0201 	bic.w	r2, r2, #1
 80050aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80050b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80050c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d107      	bne.n	80050e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050de:	609a      	str	r2, [r3, #8]
 80050e0:	e006      	b.n	80050f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689a      	ldr	r2, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80050ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d108      	bne.n	800510a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005106:	605a      	str	r2, [r3, #4]
 8005108:	e007      	b.n	800511a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685a      	ldr	r2, [r3, #4]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005118:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800512c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800513c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	69d9      	ldr	r1, [r3, #28]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a1a      	ldr	r2, [r3, #32]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b088      	sub	sp, #32
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	461a      	mov	r2, r3
 80051ac:	460b      	mov	r3, r1
 80051ae:	817b      	strh	r3, [r7, #10]
 80051b0:	4613      	mov	r3, r2
 80051b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b20      	cmp	r3, #32
 80051be:	f040 80fd 	bne.w	80053bc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_I2C_Master_Transmit+0x30>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e0f6      	b.n	80053be <HAL_I2C_Master_Transmit+0x21e>
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051d8:	f7ff f99e 	bl	8004518 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	2319      	movs	r3, #25
 80051e4:	2201      	movs	r2, #1
 80051e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 f914 	bl	8005418 <I2C_WaitOnFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e0e1      	b.n	80053be <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2221      	movs	r2, #33	@ 0x21
 80051fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2210      	movs	r2, #16
 8005206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	893a      	ldrh	r2, [r7, #8]
 800521a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005226:	b29b      	uxth	r3, r3
 8005228:	2bff      	cmp	r3, #255	@ 0xff
 800522a:	d906      	bls.n	800523a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	22ff      	movs	r2, #255	@ 0xff
 8005230:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005236:	617b      	str	r3, [r7, #20]
 8005238:	e007      	b.n	800524a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005244:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005248:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d024      	beq.n	800529c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005256:	781a      	ldrb	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800526c:	b29b      	uxth	r3, r3
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3301      	adds	r3, #1
 800528a:	b2da      	uxtb	r2, r3
 800528c:	8979      	ldrh	r1, [r7, #10]
 800528e:	4b4e      	ldr	r3, [pc, #312]	@ (80053c8 <HAL_I2C_Master_Transmit+0x228>)
 8005290:	9300      	str	r3, [sp, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 fa83 	bl	80057a0 <I2C_TransferConfig>
 800529a:	e066      	b.n	800536a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a0:	b2da      	uxtb	r2, r3
 80052a2:	8979      	ldrh	r1, [r7, #10]
 80052a4:	4b48      	ldr	r3, [pc, #288]	@ (80053c8 <HAL_I2C_Master_Transmit+0x228>)
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa78 	bl	80057a0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80052b0:	e05b      	b.n	800536a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	6a39      	ldr	r1, [r7, #32]
 80052b6:	68f8      	ldr	r0, [r7, #12]
 80052b8:	f000 f907 	bl	80054ca <I2C_WaitOnTXISFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e07b      	b.n	80053be <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ca:	781a      	ldrb	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ee:	3b01      	subs	r3, #1
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d034      	beq.n	800536a <HAL_I2C_Master_Transmit+0x1ca>
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005304:	2b00      	cmp	r3, #0
 8005306:	d130      	bne.n	800536a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	2200      	movs	r2, #0
 8005310:	2180      	movs	r1, #128	@ 0x80
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f880 	bl	8005418 <I2C_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e04d      	b.n	80053be <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2bff      	cmp	r3, #255	@ 0xff
 800532a:	d90e      	bls.n	800534a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	22ff      	movs	r2, #255	@ 0xff
 8005330:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005336:	b2da      	uxtb	r2, r3
 8005338:	8979      	ldrh	r1, [r7, #10]
 800533a:	2300      	movs	r3, #0
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 fa2c 	bl	80057a0 <I2C_TransferConfig>
 8005348:	e00f      	b.n	800536a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	b2da      	uxtb	r2, r3
 800535a:	8979      	ldrh	r1, [r7, #10]
 800535c:	2300      	movs	r3, #0
 800535e:	9300      	str	r3, [sp, #0]
 8005360:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f000 fa1b 	bl	80057a0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d19e      	bne.n	80052b2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	6a39      	ldr	r1, [r7, #32]
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f8ed 	bl	8005558 <I2C_WaitOnSTOPFlagUntilTimeout>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d001      	beq.n	8005388 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e01a      	b.n	80053be <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2220      	movs	r2, #32
 800538e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <HAL_I2C_Master_Transmit+0x22c>)
 800539c:	400b      	ands	r3, r1
 800539e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	e000      	b.n	80053be <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80053bc:	2302      	movs	r3, #2
  }
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3718      	adds	r7, #24
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	80002000 	.word	0x80002000
 80053cc:	fe00e800 	.word	0xfe00e800

080053d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d103      	bne.n	80053ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	f003 0301 	and.w	r3, r3, #1
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d007      	beq.n	800540c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699a      	ldr	r2, [r3, #24]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	619a      	str	r2, [r3, #24]
  }
}
 800540c:	bf00      	nop
 800540e:	370c      	adds	r7, #12
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr

08005418 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005428:	e03b      	b.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f8d6 	bl	80055e0 <I2C_IsErrorOccurred>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e041      	b.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005444:	d02d      	beq.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005446:	f7ff f867 	bl	8004518 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	69bb      	ldr	r3, [r7, #24]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	429a      	cmp	r2, r3
 8005454:	d302      	bcc.n	800545c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d122      	bne.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	699a      	ldr	r2, [r3, #24]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	4013      	ands	r3, r2
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	429a      	cmp	r2, r3
 800546a:	bf0c      	ite	eq
 800546c:	2301      	moveq	r3, #1
 800546e:	2300      	movne	r3, #0
 8005470:	b2db      	uxtb	r3, r3
 8005472:	461a      	mov	r2, r3
 8005474:	79fb      	ldrb	r3, [r7, #7]
 8005476:	429a      	cmp	r2, r3
 8005478:	d113      	bne.n	80054a2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f043 0220 	orr.w	r2, r3, #32
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e00f      	b.n	80054c2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	699a      	ldr	r2, [r3, #24]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4013      	ands	r3, r2
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	bf0c      	ite	eq
 80054b2:	2301      	moveq	r3, #1
 80054b4:	2300      	movne	r3, #0
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	79fb      	ldrb	r3, [r7, #7]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d0b4      	beq.n	800542a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054d6:	e033      	b.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	68b9      	ldr	r1, [r7, #8]
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f000 f87f 	bl	80055e0 <I2C_IsErrorOccurred>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e031      	b.n	8005550 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f2:	d025      	beq.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054f4:	f7ff f810 	bl	8004518 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	68ba      	ldr	r2, [r7, #8]
 8005500:	429a      	cmp	r2, r3
 8005502:	d302      	bcc.n	800550a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11a      	bne.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	d013      	beq.n	8005540 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551c:	f043 0220 	orr.w	r2, r3, #32
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e007      	b.n	8005550 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b02      	cmp	r3, #2
 800554c:	d1c4      	bne.n	80054d8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005564:	e02f      	b.n	80055c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f838 	bl	80055e0 <I2C_IsErrorOccurred>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d001      	beq.n	800557a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e02d      	b.n	80055d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800557a:	f7fe ffcd 	bl	8004518 <HAL_GetTick>
 800557e:	4602      	mov	r2, r0
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	1ad3      	subs	r3, r2, r3
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d11a      	bne.n	80055c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b20      	cmp	r3, #32
 800559c:	d013      	beq.n	80055c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	f043 0220 	orr.w	r2, r3, #32
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e007      	b.n	80055d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b20      	cmp	r3, #32
 80055d2:	d1c8      	bne.n	8005566 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	@ 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	f003 0310 	and.w	r3, r3, #16
 8005608:	2b00      	cmp	r3, #0
 800560a:	d068      	beq.n	80056de <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2210      	movs	r2, #16
 8005612:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005614:	e049      	b.n	80056aa <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800561c:	d045      	beq.n	80056aa <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800561e:	f7fe ff7b 	bl	8004518 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	68ba      	ldr	r2, [r7, #8]
 800562a:	429a      	cmp	r2, r3
 800562c:	d302      	bcc.n	8005634 <I2C_IsErrorOccurred+0x54>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d13a      	bne.n	80056aa <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800563e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005646:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005652:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005656:	d121      	bne.n	800569c <I2C_IsErrorOccurred+0xbc>
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800565e:	d01d      	beq.n	800569c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005660:	7cfb      	ldrb	r3, [r7, #19]
 8005662:	2b20      	cmp	r3, #32
 8005664:	d01a      	beq.n	800569c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005674:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005676:	f7fe ff4f 	bl	8004518 <HAL_GetTick>
 800567a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800567c:	e00e      	b.n	800569c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800567e:	f7fe ff4b 	bl	8004518 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	2b19      	cmp	r3, #25
 800568a:	d907      	bls.n	800569c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800568c:	6a3b      	ldr	r3, [r7, #32]
 800568e:	f043 0320 	orr.w	r3, r3, #32
 8005692:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800569a:	e006      	b.n	80056aa <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f003 0320 	and.w	r3, r3, #32
 80056a6:	2b20      	cmp	r3, #32
 80056a8:	d1e9      	bne.n	800567e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	d003      	beq.n	80056c0 <I2C_IsErrorOccurred+0xe0>
 80056b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0aa      	beq.n	8005616 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80056c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d103      	bne.n	80056d0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2220      	movs	r2, #32
 80056ce:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	f043 0304 	orr.w	r3, r3, #4
 80056d6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80056d8:	2301      	movs	r3, #1
 80056da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005700:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00b      	beq.n	800572a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005712:	6a3b      	ldr	r3, [r7, #32]
 8005714:	f043 0308 	orr.w	r3, r3, #8
 8005718:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005722:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	f043 0302 	orr.w	r3, r3, #2
 800573a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800574c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01c      	beq.n	800578e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff fe3b 	bl	80053d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6859      	ldr	r1, [r3, #4]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	4b0d      	ldr	r3, [pc, #52]	@ (800579c <I2C_IsErrorOccurred+0x1bc>)
 8005766:	400b      	ands	r3, r1
 8005768:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2220      	movs	r2, #32
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800578e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005792:	4618      	mov	r0, r3
 8005794:	3728      	adds	r7, #40	@ 0x28
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	fe00e800 	.word	0xfe00e800

080057a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b087      	sub	sp, #28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	607b      	str	r3, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	817b      	strh	r3, [r7, #10]
 80057ae:	4613      	mov	r3, r2
 80057b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057b2:	897b      	ldrh	r3, [r7, #10]
 80057b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057b8:	7a7b      	ldrb	r3, [r7, #9]
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057c0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80057c6:	6a3b      	ldr	r3, [r7, #32]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057ce:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	0d5b      	lsrs	r3, r3, #21
 80057da:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80057de:	4b08      	ldr	r3, [pc, #32]	@ (8005800 <I2C_TransferConfig+0x60>)
 80057e0:	430b      	orrs	r3, r1
 80057e2:	43db      	mvns	r3, r3
 80057e4:	ea02 0103 	and.w	r1, r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	03ff63ff 	.word	0x03ff63ff

08005804 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b20      	cmp	r3, #32
 8005818:	d138      	bne.n	800588c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005824:	2302      	movs	r3, #2
 8005826:	e032      	b.n	800588e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2224      	movs	r2, #36	@ 0x24
 8005834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005856:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6819      	ldr	r1, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	430a      	orrs	r2, r1
 8005866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0201 	orr.w	r2, r2, #1
 8005876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e000      	b.n	800588e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800588c:	2302      	movs	r3, #2
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	370c      	adds	r7, #12
 8005892:	46bd      	mov	sp, r7
 8005894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005898:	4770      	bx	lr

0800589a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800589a:	b480      	push	{r7}
 800589c:	b085      	sub	sp, #20
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
 80058a2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	d139      	bne.n	8005924 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80058ba:	2302      	movs	r3, #2
 80058bc:	e033      	b.n	8005926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2201      	movs	r2, #1
 80058c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2224      	movs	r2, #36	@ 0x24
 80058ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80058ec:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	021b      	lsls	r3, r3, #8
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f042 0201 	orr.w	r2, r2, #1
 800590e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	e000      	b.n	8005926 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005924:	2302      	movs	r3, #2
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
	...

08005934 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d01e      	beq.n	8005984 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005946:	4b13      	ldr	r3, [pc, #76]	@ (8005994 <HAL_IPCC_Init+0x60>)
 8005948:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d102      	bne.n	800595c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fe fac6 	bl	8003ee8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800595c:	68b8      	ldr	r0, [r7, #8]
 800595e:	f000 f85b 	bl	8005a18 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f82c 	bl	80059cc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005982:	e001      	b.n	8005988 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005984:	2301      	movs	r3, #1
 8005986:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	58000c00 	.word	0x58000c00

08005998 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	4613      	mov	r3, r2
 80059be:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80059d4:	2300      	movs	r3, #0
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	e00f      	b.n	80059fa <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005a10 <IPCC_SetDefaultCallbacks+0x44>)
 80059e4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3306      	adds	r3, #6
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	4a08      	ldr	r2, [pc, #32]	@ (8005a14 <IPCC_SetDefaultCallbacks+0x48>)
 80059f2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	3301      	adds	r3, #1
 80059f8:	60fb      	str	r3, [r7, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b05      	cmp	r3, #5
 80059fe:	d9ec      	bls.n	80059da <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	08005999 	.word	0x08005999
 8005a14:	080059b3 	.word	0x080059b3

08005a18 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	223f      	movs	r2, #63	@ 0x3f
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0c0      	b.n	8005bd4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d106      	bne.n	8005a6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f00f f9aa 	bl	8014dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2203      	movs	r2, #3
 8005a70:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f005 fca9 	bl	800b3d0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a7e:	2300      	movs	r3, #0
 8005a80:	73fb      	strb	r3, [r7, #15]
 8005a82:	e03e      	b.n	8005b02 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a84:	7bfa      	ldrb	r2, [r7, #15]
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	440b      	add	r3, r1
 8005a92:	3311      	adds	r3, #17
 8005a94:	2201      	movs	r2, #1
 8005a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	440b      	add	r3, r1
 8005aa6:	3310      	adds	r3, #16
 8005aa8:	7bfa      	ldrb	r2, [r7, #15]
 8005aaa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005aac:	7bfa      	ldrb	r2, [r7, #15]
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	440b      	add	r3, r1
 8005aba:	3313      	adds	r3, #19
 8005abc:	2200      	movs	r2, #0
 8005abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ac0:	7bfa      	ldrb	r2, [r7, #15]
 8005ac2:	6879      	ldr	r1, [r7, #4]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	00db      	lsls	r3, r3, #3
 8005acc:	440b      	add	r3, r1
 8005ace:	3320      	adds	r3, #32
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ad4:	7bfa      	ldrb	r2, [r7, #15]
 8005ad6:	6879      	ldr	r1, [r7, #4]
 8005ad8:	4613      	mov	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	4413      	add	r3, r2
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	440b      	add	r3, r1
 8005ae2:	3324      	adds	r3, #36	@ 0x24
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ae8:	7bfb      	ldrb	r3, [r7, #15]
 8005aea:	6879      	ldr	r1, [r7, #4]
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	3301      	adds	r3, #1
 8005b00:	73fb      	strb	r3, [r7, #15]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	791b      	ldrb	r3, [r3, #4]
 8005b06:	7bfa      	ldrb	r2, [r7, #15]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d3bb      	bcc.n	8005a84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	73fb      	strb	r3, [r7, #15]
 8005b10:	e044      	b.n	8005b9c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b12:	7bfa      	ldrb	r2, [r7, #15]
 8005b14:	6879      	ldr	r1, [r7, #4]
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	440b      	add	r3, r1
 8005b20:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005b24:	2200      	movs	r2, #0
 8005b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b28:	7bfa      	ldrb	r2, [r7, #15]
 8005b2a:	6879      	ldr	r1, [r7, #4]
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	440b      	add	r3, r1
 8005b36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005b3a:	7bfa      	ldrb	r2, [r7, #15]
 8005b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b3e:	7bfa      	ldrb	r2, [r7, #15]
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	4613      	mov	r3, r2
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	440b      	add	r3, r1
 8005b4c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005b50:	2200      	movs	r2, #0
 8005b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b54:	7bfa      	ldrb	r2, [r7, #15]
 8005b56:	6879      	ldr	r1, [r7, #4]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	440b      	add	r3, r1
 8005b62:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b6a:	7bfa      	ldrb	r2, [r7, #15]
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	4413      	add	r3, r2
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b80:	7bfa      	ldrb	r2, [r7, #15]
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	00db      	lsls	r3, r3, #3
 8005b8c:	440b      	add	r3, r1
 8005b8e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b96:	7bfb      	ldrb	r3, [r7, #15]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	7bfa      	ldrb	r2, [r7, #15]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d3b5      	bcc.n	8005b12 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	3304      	adds	r3, #4
 8005bae:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005bb2:	f005 fc28 	bl	800b406 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	7a9b      	ldrb	r3, [r3, #10]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d102      	bne.n	8005bd2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f001 fc40 	bl	8007452 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3710      	adds	r7, #16
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_PCD_Start+0x16>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e012      	b.n	8005c18 <HAL_PCD_Start+0x3c>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f005 fbcf 	bl	800b3a2 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f007 fe90 	bl	800d92e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f007 fe95 	bl	800d95c <USB_ReadInterrupts>
 8005c32:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f000 fb04 	bl	800624c <PCD_EP_ISR_Handler>

    return;
 8005c44:	e110      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d013      	beq.n	8005c78 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c62:	b292      	uxth	r2, r2
 8005c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f00f f95c 	bl	8014f26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005c6e:	2100      	movs	r1, #0
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f8fc 	bl	8005e6e <HAL_PCD_SetAddress>

    return;
 8005c76:	e0f7      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d00c      	beq.n	8005c9c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c94:	b292      	uxth	r2, r2
 8005c96:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c9a:	e0e5      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d00c      	beq.n	8005cc0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005cb8:	b292      	uxth	r2, r2
 8005cba:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005cbe:	e0d3      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d034      	beq.n	8005d34 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0204 	bic.w	r2, r2, #4
 8005cdc:	b292      	uxth	r2, r2
 8005cde:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005cea:	b29a      	uxth	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0208 	bic.w	r2, r2, #8
 8005cf4:	b292      	uxth	r2, r2
 8005cf6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d107      	bne.n	8005d14 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f00f fafe 	bl	8015310 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f00f f93f 	bl	8014f98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d2c:	b292      	uxth	r2, r2
 8005d2e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005d32:	e099      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d027      	beq.n	8005d8e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 0208 	orr.w	r2, r2, #8
 8005d50:	b292      	uxth	r2, r2
 8005d52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d68:	b292      	uxth	r2, r2
 8005d6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f042 0204 	orr.w	r2, r2, #4
 8005d80:	b292      	uxth	r2, r2
 8005d82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f00f f8ec 	bl	8014f64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005d8c:	e06c      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d040      	beq.n	8005e1a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005da0:	b29a      	uxth	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005daa:	b292      	uxth	r2, r2
 8005dac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12b      	bne.n	8005e12 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0204 	orr.w	r2, r2, #4
 8005dcc:	b292      	uxth	r2, r2
 8005dce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f042 0208 	orr.w	r2, r2, #8
 8005de4:	b292      	uxth	r2, r2
 8005de6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	089b      	lsrs	r3, r3, #2
 8005dfe:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005e08:	2101      	movs	r1, #1
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f00f fa80 	bl	8015310 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005e10:	e02a      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f00f f8a6 	bl	8014f64 <HAL_PCD_SuspendCallback>
    return;
 8005e18:	e026      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00f      	beq.n	8005e44 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005e36:	b292      	uxth	r2, r2
 8005e38:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f00f f864 	bl	8014f0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005e42:	e011      	b.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d00c      	beq.n	8005e68 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e60:	b292      	uxth	r2, r2
 8005e62:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005e66:	bf00      	nop
  }
}
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b082      	sub	sp, #8
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_PCD_SetAddress+0x1a>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e012      	b.n	8005eae <HAL_PCD_SetAddress+0x40>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	78fa      	ldrb	r2, [r7, #3]
 8005e94:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	4611      	mov	r1, r2
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f007 fd31 	bl	800d906 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3708      	adds	r7, #8
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b084      	sub	sp, #16
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	70fb      	strb	r3, [r7, #3]
 8005ec8:	460b      	mov	r3, r1
 8005eca:	803b      	strh	r3, [r7, #0]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	da0e      	bge.n	8005efa <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005edc:	78fb      	ldrb	r3, [r7, #3]
 8005ede:	f003 0207 	and.w	r2, r3, #7
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	3310      	adds	r3, #16
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	705a      	strb	r2, [r3, #1]
 8005ef8:	e00e      	b.n	8005f18 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	f003 0207 	and.w	r2, r3, #7
 8005f00:	4613      	mov	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	b2da      	uxtb	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f24:	883a      	ldrh	r2, [r7, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	78ba      	ldrb	r2, [r7, #2]
 8005f2e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005f30:	78bb      	ldrb	r3, [r7, #2]
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d102      	bne.n	8005f3c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <HAL_PCD_EP_Open+0x94>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e00e      	b.n	8005f68 <HAL_PCD_EP_Open+0xb2>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f005 fa73 	bl	800b444 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005f66:	7afb      	ldrb	r3, [r7, #11]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	da0e      	bge.n	8005fa2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f84:	78fb      	ldrb	r3, [r7, #3]
 8005f86:	f003 0207 	and.w	r2, r3, #7
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	3310      	adds	r3, #16
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	4413      	add	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	705a      	strb	r2, [r3, #1]
 8005fa0:	e00e      	b.n	8005fc0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fa2:	78fb      	ldrb	r3, [r7, #3]
 8005fa4:	f003 0207 	and.w	r2, r3, #7
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4413      	add	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	f003 0307 	and.w	r3, r3, #7
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d101      	bne.n	8005fda <HAL_PCD_EP_Close+0x6a>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e00e      	b.n	8005ff8 <HAL_PCD_EP_Close+0x88>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68f9      	ldr	r1, [r7, #12]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f005 fdef 	bl	800bbcc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	460b      	mov	r3, r1
 800600e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006010:	7afb      	ldrb	r3, [r7, #11]
 8006012:	f003 0207 	and.w	r2, r3, #7
 8006016:	4613      	mov	r3, r2
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2200      	movs	r2, #0
 8006038:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2200      	movs	r2, #0
 800603e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	b2da      	uxtb	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	4618      	mov	r0, r3
 8006054:	f005 ffa7 	bl	800bfa6 <USB_EPStartXfer>

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800606e:	78fb      	ldrb	r3, [r7, #3]
 8006070:	f003 0207 	and.w	r2, r3, #7
 8006074:	6879      	ldr	r1, [r7, #4]
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	440b      	add	r3, r1
 8006080:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006084:	681b      	ldr	r3, [r3, #0]
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b086      	sub	sp, #24
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	607a      	str	r2, [r7, #4]
 800609c:	603b      	str	r3, [r7, #0]
 800609e:	460b      	mov	r3, r1
 80060a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	f003 0207 	and.w	r2, r3, #7
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	3310      	adds	r3, #16
 80060b2:	68fa      	ldr	r2, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	683a      	ldr	r2, [r7, #0]
 80060d0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2200      	movs	r2, #0
 80060d6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	2201      	movs	r2, #1
 80060dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060de:	7afb      	ldrb	r3, [r7, #11]
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	b2da      	uxtb	r2, r3
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6979      	ldr	r1, [r7, #20]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f005 ff58 	bl	800bfa6 <USB_EPStartXfer>

  return HAL_OK;
 80060f6:	2300      	movs	r3, #0
}
 80060f8:	4618      	mov	r0, r3
 80060fa:	3718      	adds	r7, #24
 80060fc:	46bd      	mov	sp, r7
 80060fe:	bd80      	pop	{r7, pc}

08006100 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	460b      	mov	r3, r1
 800610a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	7912      	ldrb	r2, [r2, #4]
 8006116:	4293      	cmp	r3, r2
 8006118:	d901      	bls.n	800611e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e03e      	b.n	800619c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800611e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	da0e      	bge.n	8006144 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	f003 0207 	and.w	r2, r3, #7
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	3310      	adds	r3, #16
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2201      	movs	r2, #1
 8006140:	705a      	strb	r2, [r3, #1]
 8006142:	e00c      	b.n	800615e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006144:	78fa      	ldrb	r2, [r7, #3]
 8006146:	4613      	mov	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	00db      	lsls	r3, r3, #3
 800614e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 0307 	and.w	r3, r3, #7
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_PCD_EP_SetStall+0x7e>
 800617a:	2302      	movs	r3, #2
 800617c:	e00e      	b.n	800619c <HAL_PCD_EP_SetStall+0x9c>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68f9      	ldr	r1, [r7, #12]
 800618c:	4618      	mov	r0, r3
 800618e:	f007 fabb 	bl	800d708 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3710      	adds	r7, #16
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b084      	sub	sp, #16
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
 80061ac:	460b      	mov	r3, r1
 80061ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	f003 030f 	and.w	r3, r3, #15
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	7912      	ldrb	r2, [r2, #4]
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e040      	b.n	8006244 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	da0e      	bge.n	80061e8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	f003 0207 	and.w	r2, r3, #7
 80061d0:	4613      	mov	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	00db      	lsls	r3, r3, #3
 80061d8:	3310      	adds	r3, #16
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	4413      	add	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2201      	movs	r2, #1
 80061e4:	705a      	strb	r2, [r3, #1]
 80061e6:	e00e      	b.n	8006206 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	f003 0207 	and.w	r2, r3, #7
 80061ee:	4613      	mov	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	4413      	add	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	f003 0307 	and.w	r3, r3, #7
 8006212:	b2da      	uxtb	r2, r3
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800621e:	2b01      	cmp	r3, #1
 8006220:	d101      	bne.n	8006226 <HAL_PCD_EP_ClrStall+0x82>
 8006222:	2302      	movs	r3, #2
 8006224:	e00e      	b.n	8006244 <HAL_PCD_EP_ClrStall+0xa0>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	4618      	mov	r0, r3
 8006236:	f007 fab8 	bl	800d7aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b096      	sub	sp, #88	@ 0x58
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006254:	e3ad      	b.n	80069b2 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800625e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006262:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006266:	b2db      	uxtb	r3, r3
 8006268:	f003 030f 	and.w	r3, r3, #15
 800626c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8006270:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 816f 	bne.w	8006558 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800627a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800627e:	f003 0310 	and.w	r3, r3, #16
 8006282:	2b00      	cmp	r3, #0
 8006284:	d14c      	bne.n	8006320 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29b      	uxth	r3, r3
 800628e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006296:	81fb      	strh	r3, [r7, #14]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	89fb      	ldrh	r3, [r7, #14]
 800629e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	3310      	adds	r3, #16
 80062ae:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4413      	add	r3, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6812      	ldr	r2, [r2, #0]
 80062c8:	4413      	add	r3, r2
 80062ca:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062ce:	881b      	ldrh	r3, [r3, #0]
 80062d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80062d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062de:	69db      	ldr	r3, [r3, #28]
 80062e0:	441a      	add	r2, r3
 80062e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80062e6:	2100      	movs	r1, #0
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f00e fdf4 	bl	8014ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	7b1b      	ldrb	r3, [r3, #12]
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 835c 	beq.w	80069b2 <PCD_EP_ISR_Handler+0x766>
 80062fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	f040 8357 	bne.w	80069b2 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	7b1b      	ldrb	r3, [r3, #12]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	731a      	strb	r2, [r3, #12]
 800631e:	e348      	b.n	80069b2 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006326:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006332:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800633a:	2b00      	cmp	r3, #0
 800633c:	d032      	beq.n	80063a4 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006346:	b29b      	uxth	r3, r3
 8006348:	461a      	mov	r2, r3
 800634a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4413      	add	r3, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	4413      	add	r3, r2
 8006358:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800635c:	881b      	ldrh	r3, [r3, #0]
 800635e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006364:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006372:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006376:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006378:	b29b      	uxth	r3, r3
 800637a:	f007 fb41 	bl	800da00 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	b29a      	uxth	r2, r3
 8006386:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800638a:	4013      	ands	r3, r2
 800638c:	823b      	strh	r3, [r7, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	8a3a      	ldrh	r2, [r7, #16]
 8006394:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006398:	b292      	uxth	r2, r2
 800639a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f00e fd6d 	bl	8014e7c <HAL_PCD_SetupStageCallback>
 80063a2:	e306      	b.n	80069b2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80063a4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f280 8302 	bge.w	80069b2 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80063ba:	4013      	ands	r3, r2
 80063bc:	83fb      	strh	r3, [r7, #30]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	8bfa      	ldrh	r2, [r7, #30]
 80063c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80063c8:	b292      	uxth	r2, r2
 80063ca:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	4413      	add	r3, r2
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80063f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80063f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d019      	beq.n	8006430 <PCD_EP_ISR_Handler+0x1e4>
 80063fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063fe:	695b      	ldr	r3, [r3, #20]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d015      	beq.n	8006430 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6818      	ldr	r0, [r3, #0]
 8006408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640a:	6959      	ldr	r1, [r3, #20]
 800640c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800640e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006412:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006414:	b29b      	uxth	r3, r3
 8006416:	f007 faf3 	bl	800da00 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800641a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	441a      	add	r2, r3
 8006424:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006426:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006428:	2100      	movs	r1, #0
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f00e fd38 	bl	8014ea0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800643a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800643e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006442:	2b00      	cmp	r3, #0
 8006444:	f040 82b5 	bne.w	80069b2 <PCD_EP_ISR_Handler+0x766>
 8006448:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800644c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006450:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006454:	f000 82ad 	beq.w	80069b2 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	61bb      	str	r3, [r7, #24]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006466:	b29b      	uxth	r3, r3
 8006468:	461a      	mov	r2, r3
 800646a:	69bb      	ldr	r3, [r7, #24]
 800646c:	4413      	add	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006482:	b29a      	uxth	r2, r3
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	801a      	strh	r2, [r3, #0]
 8006488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b3e      	cmp	r3, #62	@ 0x3e
 800648e:	d91d      	bls.n	80064cc <PCD_EP_ISR_Handler+0x280>
 8006490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	647b      	str	r3, [r7, #68]	@ 0x44
 8006498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	f003 031f 	and.w	r3, r3, #31
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d102      	bne.n	80064aa <PCD_EP_ISR_Handler+0x25e>
 80064a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064a6:	3b01      	subs	r3, #1
 80064a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	881b      	ldrh	r3, [r3, #0]
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	029b      	lsls	r3, r3, #10
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	4313      	orrs	r3, r2
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064c4:	b29a      	uxth	r2, r3
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	801a      	strh	r2, [r3, #0]
 80064ca:	e026      	b.n	800651a <PCD_EP_ISR_Handler+0x2ce>
 80064cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ce:	691b      	ldr	r3, [r3, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <PCD_EP_ISR_Handler+0x29e>
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	881b      	ldrh	r3, [r3, #0]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	e017      	b.n	800651a <PCD_EP_ISR_Handler+0x2ce>
 80064ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d002      	beq.n	8006504 <PCD_EP_ISR_Handler+0x2b8>
 80064fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006500:	3301      	adds	r3, #1
 8006502:	647b      	str	r3, [r7, #68]	@ 0x44
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	881b      	ldrh	r3, [r3, #0]
 8006508:	b29a      	uxth	r2, r3
 800650a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800650c:	b29b      	uxth	r3, r3
 800650e:	029b      	lsls	r3, r3, #10
 8006510:	b29b      	uxth	r3, r3
 8006512:	4313      	orrs	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	881b      	ldrh	r3, [r3, #0]
 8006520:	b29b      	uxth	r3, r3
 8006522:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006526:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652a:	827b      	strh	r3, [r7, #18]
 800652c:	8a7b      	ldrh	r3, [r7, #18]
 800652e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006532:	827b      	strh	r3, [r7, #18]
 8006534:	8a7b      	ldrh	r3, [r7, #18]
 8006536:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800653a:	827b      	strh	r3, [r7, #18]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	8a7b      	ldrh	r3, [r7, #18]
 8006542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800654a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800654e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006552:	b29b      	uxth	r3, r3
 8006554:	8013      	strh	r3, [r2, #0]
 8006556:	e22c      	b.n	80069b2 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	461a      	mov	r2, r3
 800655e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	881b      	ldrh	r3, [r3, #0]
 8006568:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800656c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006570:	2b00      	cmp	r3, #0
 8006572:	f280 80f6 	bge.w	8006762 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29a      	uxth	r2, r3
 8006588:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800658c:	4013      	ands	r3, r2
 800658e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80065a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065a8:	b292      	uxth	r2, r2
 80065aa:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80065ac:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80065b0:	4613      	mov	r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	4413      	add	r3, r2
 80065b6:	00db      	lsls	r3, r3, #3
 80065b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	4413      	add	r3, r2
 80065c0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80065c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c4:	7b1b      	ldrb	r3, [r3, #12]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d123      	bne.n	8006612 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	461a      	mov	r2, r3
 80065d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d8:	781b      	ldrb	r3, [r3, #0]
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	6812      	ldr	r2, [r2, #0]
 80065e2:	4413      	add	r3, r2
 80065e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065ee:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80065f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 808e 	beq.w	8006718 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6818      	ldr	r0, [r3, #0]
 8006600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006602:	6959      	ldr	r1, [r3, #20]
 8006604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006606:	88da      	ldrh	r2, [r3, #6]
 8006608:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800660c:	f007 f9f8 	bl	800da00 <USB_ReadPMA>
 8006610:	e082      	b.n	8006718 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006614:	78db      	ldrb	r3, [r3, #3]
 8006616:	2b02      	cmp	r3, #2
 8006618:	d10a      	bne.n	8006630 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800661a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800661e:	461a      	mov	r2, r3
 8006620:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f9d3 	bl	80069ce <HAL_PCD_EP_DB_Receive>
 8006628:	4603      	mov	r3, r0
 800662a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800662e:	e073      	b.n	8006718 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	441a      	add	r2, r3
 800665c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006660:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006664:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800666c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006670:	b29b      	uxth	r3, r3
 8006672:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	461a      	mov	r2, r3
 800667a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	881b      	ldrh	r3, [r3, #0]
 8006684:	b29b      	uxth	r3, r3
 8006686:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d022      	beq.n	80066d4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006696:	b29b      	uxth	r3, r3
 8006698:	461a      	mov	r2, r3
 800669a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	00db      	lsls	r3, r3, #3
 80066a0:	4413      	add	r3, r2
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	4413      	add	r3, r2
 80066a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066b2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80066b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d02c      	beq.n	8006718 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c4:	6959      	ldr	r1, [r3, #20]
 80066c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c8:	891a      	ldrh	r2, [r3, #8]
 80066ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80066ce:	f007 f997 	bl	800da00 <USB_ReadPMA>
 80066d2:	e021      	b.n	8006718 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	00db      	lsls	r3, r3, #3
 80066e6:	4413      	add	r3, r2
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6812      	ldr	r2, [r2, #0]
 80066ec:	4413      	add	r3, r2
 80066ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066f2:	881b      	ldrh	r3, [r3, #0]
 80066f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066f8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80066fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006700:	2b00      	cmp	r3, #0
 8006702:	d009      	beq.n	8006718 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6818      	ldr	r0, [r3, #0]
 8006708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800670a:	6959      	ldr	r1, [r3, #20]
 800670c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800670e:	895a      	ldrh	r2, [r3, #10]
 8006710:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006714:	f007 f974 	bl	800da00 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800671a:	69da      	ldr	r2, [r3, #28]
 800671c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006720:	441a      	add	r2, r3
 8006722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006724:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006728:	695a      	ldr	r2, [r3, #20]
 800672a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800672e:	441a      	add	r2, r3
 8006730:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006732:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006736:	699b      	ldr	r3, [r3, #24]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <PCD_EP_ISR_Handler+0x4fc>
 800673c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d206      	bcs.n	8006756 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f00e fba6 	bl	8014ea0 <HAL_PCD_DataOutStageCallback>
 8006754:	e005      	b.n	8006762 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800675c:	4618      	mov	r0, r3
 800675e:	f005 fc22 	bl	800bfa6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006762:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676a:	2b00      	cmp	r3, #0
 800676c:	f000 8121 	beq.w	80069b2 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8006770:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	00db      	lsls	r3, r3, #3
 800677c:	3310      	adds	r3, #16
 800677e:	687a      	ldr	r2, [r7, #4]
 8006780:	4413      	add	r3, r2
 8006782:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	881b      	ldrh	r3, [r3, #0]
 8006794:	b29b      	uxth	r3, r3
 8006796:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800679a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	461a      	mov	r2, r3
 80067a8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	441a      	add	r2, r3
 80067b0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80067b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067bc:	b29b      	uxth	r3, r3
 80067be:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80067c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c2:	78db      	ldrb	r3, [r3, #3]
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f040 80a2 	bne.w	800690e <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80067ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067cc:	2200      	movs	r2, #0
 80067ce:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80067d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067d2:	7b1b      	ldrb	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 8093 	beq.w	8006900 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80067da:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80067de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d046      	beq.n	8006874 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80067e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d126      	bne.n	800683c <PCD_EP_ISR_Handler+0x5f0>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	461a      	mov	r2, r3
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	4413      	add	r3, r2
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24
 8006806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	00da      	lsls	r2, r3, #3
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	4413      	add	r3, r2
 8006810:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006814:	623b      	str	r3, [r7, #32]
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006820:	b29a      	uxth	r2, r3
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	801a      	strh	r2, [r3, #0]
 8006826:	6a3b      	ldr	r3, [r7, #32]
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006834:	b29a      	uxth	r2, r3
 8006836:	6a3b      	ldr	r3, [r7, #32]
 8006838:	801a      	strh	r2, [r3, #0]
 800683a:	e061      	b.n	8006900 <PCD_EP_ISR_Handler+0x6b4>
 800683c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800683e:	785b      	ldrb	r3, [r3, #1]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d15d      	bne.n	8006900 <PCD_EP_ISR_Handler+0x6b4>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006852:	b29b      	uxth	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006858:	4413      	add	r3, r2
 800685a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800685c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	00da      	lsls	r2, r3, #3
 8006862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006864:	4413      	add	r3, r2
 8006866:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800686a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	2200      	movs	r2, #0
 8006870:	801a      	strh	r2, [r3, #0]
 8006872:	e045      	b.n	8006900 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800687a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d126      	bne.n	80068d0 <PCD_EP_ISR_Handler+0x684>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006890:	b29b      	uxth	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006896:	4413      	add	r3, r2
 8006898:	637b      	str	r3, [r7, #52]	@ 0x34
 800689a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	00da      	lsls	r2, r3, #3
 80068a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a2:	4413      	add	r3, r2
 80068a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	801a      	strh	r2, [r3, #0]
 80068ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068bc:	881b      	ldrh	r3, [r3, #0]
 80068be:	b29b      	uxth	r3, r3
 80068c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c8:	b29a      	uxth	r2, r3
 80068ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068cc:	801a      	strh	r2, [r3, #0]
 80068ce:	e017      	b.n	8006900 <PCD_EP_ISR_Handler+0x6b4>
 80068d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d113      	bne.n	8006900 <PCD_EP_ISR_Handler+0x6b4>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068e6:	4413      	add	r3, r2
 80068e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	00da      	lsls	r2, r3, #3
 80068f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80068f2:	4413      	add	r3, r2
 80068f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	2200      	movs	r2, #0
 80068fe:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	4619      	mov	r1, r3
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f00e fae5 	bl	8014ed6 <HAL_PCD_DataInStageCallback>
 800690c:	e051      	b.n	80069b2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800690e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006912:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006916:	2b00      	cmp	r3, #0
 8006918:	d144      	bne.n	80069a4 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006922:	b29b      	uxth	r3, r3
 8006924:	461a      	mov	r2, r3
 8006926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	4413      	add	r3, r2
 800692e:	687a      	ldr	r2, [r7, #4]
 8006930:	6812      	ldr	r2, [r2, #0]
 8006932:	4413      	add	r3, r2
 8006934:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006938:	881b      	ldrh	r3, [r3, #0]
 800693a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800693e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006944:	699a      	ldr	r2, [r3, #24]
 8006946:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800694a:	429a      	cmp	r2, r3
 800694c:	d907      	bls.n	800695e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800694e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800695a:	619a      	str	r2, [r3, #24]
 800695c:	e002      	b.n	8006964 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800695e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006960:	2200      	movs	r2, #0
 8006962:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800696c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	4619      	mov	r1, r3
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f00e faaf 	bl	8014ed6 <HAL_PCD_DataInStageCallback>
 8006978:	e01b      	b.n	80069b2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800697a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800697c:	695a      	ldr	r2, [r3, #20]
 800697e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006982:	441a      	add	r2, r3
 8006984:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006986:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006988:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006990:	441a      	add	r2, r3
 8006992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006994:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800699c:	4618      	mov	r0, r3
 800699e:	f005 fb02 	bl	800bfa6 <USB_EPStartXfer>
 80069a2:	e006      	b.n	80069b2 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80069a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80069a8:	461a      	mov	r2, r3
 80069aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f917 	bl	8006be0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	b21b      	sxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f6ff ac49 	blt.w	8006256 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3758      	adds	r7, #88	@ 0x58
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b088      	sub	sp, #32
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	4613      	mov	r3, r2
 80069da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80069dc:	88fb      	ldrh	r3, [r7, #6]
 80069de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d07c      	beq.n	8006ae0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	6812      	ldr	r2, [r2, #0]
 80069fe:	4413      	add	r3, r2
 8006a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a04:	881b      	ldrh	r3, [r3, #0]
 8006a06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a0a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	699a      	ldr	r2, [r3, #24]
 8006a10:	8b7b      	ldrh	r3, [r7, #26]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d306      	bcc.n	8006a24 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	699a      	ldr	r2, [r3, #24]
 8006a1a:	8b7b      	ldrh	r3, [r7, #26]
 8006a1c:	1ad2      	subs	r2, r2, r3
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	619a      	str	r2, [r3, #24]
 8006a22:	e002      	b.n	8006a2a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d123      	bne.n	8006a7a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a4c:	833b      	strh	r3, [r7, #24]
 8006a4e:	8b3b      	ldrh	r3, [r7, #24]
 8006a50:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006a54:	833b      	strh	r3, [r7, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	441a      	add	r2, r3
 8006a64:	8b3b      	ldrh	r3, [r7, #24]
 8006a66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006a7a:	88fb      	ldrh	r3, [r7, #6]
 8006a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01f      	beq.n	8006ac4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	881b      	ldrh	r3, [r3, #0]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a9e:	82fb      	strh	r3, [r7, #22]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	441a      	add	r2, r3
 8006aae:	8afb      	ldrh	r3, [r7, #22]
 8006ab0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ab4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ab8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006abc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006ac4:	8b7b      	ldrh	r3, [r7, #26]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8085 	beq.w	8006bd6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6818      	ldr	r0, [r3, #0]
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6959      	ldr	r1, [r3, #20]
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	891a      	ldrh	r2, [r3, #8]
 8006ad8:	8b7b      	ldrh	r3, [r7, #26]
 8006ada:	f006 ff91 	bl	800da00 <USB_ReadPMA>
 8006ade:	e07a      	b.n	8006bd6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	4413      	add	r3, r2
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	4413      	add	r3, r2
 8006afa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006afe:	881b      	ldrh	r3, [r3, #0]
 8006b00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	699a      	ldr	r2, [r3, #24]
 8006b0a:	8b7b      	ldrh	r3, [r7, #26]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d306      	bcc.n	8006b1e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	8b7b      	ldrh	r3, [r7, #26]
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	619a      	str	r2, [r3, #24]
 8006b1c:	e002      	b.n	8006b24 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2200      	movs	r2, #0
 8006b22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d123      	bne.n	8006b74 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	781b      	ldrb	r3, [r3, #0]
 8006b36:	009b      	lsls	r3, r3, #2
 8006b38:	4413      	add	r3, r2
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	b29b      	uxth	r3, r3
 8006b3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b46:	83fb      	strh	r3, [r7, #30]
 8006b48:	8bfb      	ldrh	r3, [r7, #30]
 8006b4a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006b4e:	83fb      	strh	r3, [r7, #30]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	441a      	add	r2, r3
 8006b5e:	8bfb      	ldrh	r3, [r7, #30]
 8006b60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006b74:	88fb      	ldrh	r3, [r7, #6]
 8006b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d11f      	bne.n	8006bbe <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	461a      	mov	r2, r3
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	881b      	ldrh	r3, [r3, #0]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b98:	83bb      	strh	r3, [r7, #28]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	781b      	ldrb	r3, [r3, #0]
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	441a      	add	r2, r3
 8006ba8:	8bbb      	ldrh	r3, [r7, #28]
 8006baa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006bbe:	8b7b      	ldrh	r3, [r7, #26]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d008      	beq.n	8006bd6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	6959      	ldr	r1, [r3, #20]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	895a      	ldrh	r2, [r3, #10]
 8006bd0:	8b7b      	ldrh	r3, [r7, #26]
 8006bd2:	f006 ff15 	bl	800da00 <USB_ReadPMA>
    }
  }

  return count;
 8006bd6:	8b7b      	ldrh	r3, [r7, #26]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b0a4      	sub	sp, #144	@ 0x90
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 81db 	beq.w	8006fb0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	461a      	mov	r2, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	6812      	ldr	r2, [r2, #0]
 8006c12:	4413      	add	r3, r2
 8006c14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c1e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	699a      	ldr	r2, [r3, #24]
 8006c26:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c2a:	429a      	cmp	r2, r3
 8006c2c:	d907      	bls.n	8006c3e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	619a      	str	r2, [r3, #24]
 8006c3c:	e002      	b.n	8006c44 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2200      	movs	r2, #0
 8006c42:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f040 80b9 	bne.w	8006dc0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d126      	bne.n	8006ca4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	461a      	mov	r2, r3
 8006c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c6a:	4413      	add	r3, r2
 8006c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	00da      	lsls	r2, r3, #3
 8006c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c76:	4413      	add	r3, r2
 8006c78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	881b      	ldrh	r3, [r3, #0]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	801a      	strh	r2, [r3, #0]
 8006c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	e01a      	b.n	8006cda <HAL_PCD_EP_DB_Transmit+0xfa>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	785b      	ldrb	r3, [r3, #1]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d116      	bne.n	8006cda <HAL_PCD_EP_DB_Transmit+0xfa>
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc0:	4413      	add	r3, r2
 8006cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	00da      	lsls	r2, r3, #3
 8006cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ccc:	4413      	add	r3, r2
 8006cce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006cd2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	785b      	ldrb	r3, [r3, #1]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d126      	bne.n	8006d36 <HAL_PCD_EP_DB_Transmit+0x156>
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	61fb      	str	r3, [r7, #28]
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	69fb      	ldr	r3, [r7, #28]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	801a      	strh	r2, [r3, #0]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d2e:	b29a      	uxth	r2, r3
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	801a      	strh	r2, [r3, #0]
 8006d34:	e017      	b.n	8006d66 <HAL_PCD_EP_DB_Transmit+0x186>
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	785b      	ldrb	r3, [r3, #1]
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d113      	bne.n	8006d66 <HAL_PCD_EP_DB_Transmit+0x186>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4c:	4413      	add	r3, r2
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	00da      	lsls	r2, r3, #3
 8006d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d58:	4413      	add	r3, r2
 8006d5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d5e:	623b      	str	r3, [r7, #32]
 8006d60:	6a3b      	ldr	r3, [r7, #32]
 8006d62:	2200      	movs	r2, #0
 8006d64:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f00e f8b2 	bl	8014ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 82fa 	beq.w	8007372 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	881b      	ldrh	r3, [r3, #0]
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d98:	82fb      	strh	r3, [r7, #22]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	461a      	mov	r2, r3
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	441a      	add	r2, r3
 8006da8:	8afb      	ldrh	r3, [r7, #22]
 8006daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006db2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dba:	b29b      	uxth	r3, r3
 8006dbc:	8013      	strh	r3, [r2, #0]
 8006dbe:	e2d8      	b.n	8007372 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d021      	beq.n	8006e0e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	4413      	add	r3, r2
 8006dd8:	881b      	ldrh	r3, [r3, #0]
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006de0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006de4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	461a      	mov	r2, r3
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	441a      	add	r2, r3
 8006df6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006dfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006e06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	f040 82ac 	bne.w	8007372 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e22:	441a      	add	r2, r3
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e30:	441a      	add	r2, r3
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	6a1a      	ldr	r2, [r3, #32]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d30b      	bcc.n	8006e5a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	6a1a      	ldr	r2, [r3, #32]
 8006e4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	621a      	str	r2, [r3, #32]
 8006e58:	e017      	b.n	8006e8a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	6a1b      	ldr	r3, [r3, #32]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d108      	bne.n	8006e74 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006e62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006e66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006e72:	e00a      	b.n	8006e8a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	2200      	movs	r2, #0
 8006e88:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	785b      	ldrb	r3, [r3, #1]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d165      	bne.n	8006f5e <HAL_PCD_EP_DB_Transmit+0x37e>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea6:	4413      	add	r3, r2
 8006ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	00da      	lsls	r2, r3, #3
 8006eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec8:	801a      	strh	r2, [r3, #0]
 8006eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ece:	2b3e      	cmp	r3, #62	@ 0x3e
 8006ed0:	d91d      	bls.n	8006f0e <HAL_PCD_EP_DB_Transmit+0x32e>
 8006ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006ede:	f003 031f 	and.w	r3, r3, #31
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d102      	bne.n	8006eec <HAL_PCD_EP_DB_Transmit+0x30c>
 8006ee6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	881b      	ldrh	r3, [r3, #0]
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	029b      	lsls	r3, r3, #10
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	4313      	orrs	r3, r2
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0a:	801a      	strh	r2, [r3, #0]
 8006f0c:	e044      	b.n	8006f98 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <HAL_PCD_EP_DB_Transmit+0x34c>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	881b      	ldrh	r3, [r3, #0]
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	801a      	strh	r2, [r3, #0]
 8006f2a:	e035      	b.n	8006f98 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f30:	085b      	lsrs	r3, r3, #1
 8006f32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <HAL_PCD_EP_DB_Transmit+0x366>
 8006f40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f42:	3301      	adds	r3, #1
 8006f44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	029b      	lsls	r3, r3, #10
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	4313      	orrs	r3, r2
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f5a:	801a      	strh	r2, [r3, #0]
 8006f5c:	e01c      	b.n	8006f98 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d118      	bne.n	8006f98 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	461a      	mov	r2, r3
 8006f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f7a:	4413      	add	r3, r2
 8006f7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	00da      	lsls	r2, r3, #3
 8006f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f86:	4413      	add	r3, r2
 8006f88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006f8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f92:	b29a      	uxth	r2, r3
 8006f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f96:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6818      	ldr	r0, [r3, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	6959      	ldr	r1, [r3, #20]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	891a      	ldrh	r2, [r3, #8]
 8006fa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f006 fce7 	bl	800d97c <USB_WritePMA>
 8006fae:	e1e0      	b.n	8007372 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	00db      	lsls	r3, r3, #3
 8006fc2:	4413      	add	r3, r2
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	6812      	ldr	r2, [r2, #0]
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006fd4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d307      	bcc.n	8006ff4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006fec:	1ad2      	subs	r2, r2, r3
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	619a      	str	r2, [r3, #24]
 8006ff2:	e002      	b.n	8006ffa <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f040 80c0 	bne.w	8007184 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	785b      	ldrb	r3, [r3, #1]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d126      	bne.n	800705a <HAL_PCD_EP_DB_Transmit+0x47a>
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800701a:	b29b      	uxth	r3, r3
 800701c:	461a      	mov	r2, r3
 800701e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007020:	4413      	add	r3, r2
 8007022:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	00da      	lsls	r2, r3, #3
 800702a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800702c:	4413      	add	r3, r2
 800702e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007032:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007034:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	b29b      	uxth	r3, r3
 800703a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800703e:	b29a      	uxth	r2, r3
 8007040:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007042:	801a      	strh	r2, [r3, #0]
 8007044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007046:	881b      	ldrh	r3, [r3, #0]
 8007048:	b29b      	uxth	r3, r3
 800704a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800704e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007052:	b29a      	uxth	r2, r3
 8007054:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007056:	801a      	strh	r2, [r3, #0]
 8007058:	e01a      	b.n	8007090 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	785b      	ldrb	r3, [r3, #1]
 800705e:	2b01      	cmp	r3, #1
 8007060:	d116      	bne.n	8007090 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	667b      	str	r3, [r7, #100]	@ 0x64
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007070:	b29b      	uxth	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007076:	4413      	add	r3, r2
 8007078:	667b      	str	r3, [r7, #100]	@ 0x64
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	00da      	lsls	r2, r3, #3
 8007080:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007082:	4413      	add	r3, r2
 8007084:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007088:	663b      	str	r3, [r7, #96]	@ 0x60
 800708a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800708c:	2200      	movs	r2, #0
 800708e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	677b      	str	r3, [r7, #116]	@ 0x74
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	785b      	ldrb	r3, [r3, #1]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d12b      	bne.n	80070f6 <HAL_PCD_EP_DB_Transmit+0x516>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070b2:	4413      	add	r3, r2
 80070b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	00da      	lsls	r2, r3, #3
 80070bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070be:	4413      	add	r3, r2
 80070c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80070c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070da:	801a      	strh	r2, [r3, #0]
 80070dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e017      	b.n	8007126 <HAL_PCD_EP_DB_Transmit+0x546>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d113      	bne.n	8007126 <HAL_PCD_EP_DB_Transmit+0x546>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007106:	b29b      	uxth	r3, r3
 8007108:	461a      	mov	r2, r3
 800710a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800710c:	4413      	add	r3, r2
 800710e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	00da      	lsls	r2, r3, #3
 8007116:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007118:	4413      	add	r3, r2
 800711a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800711e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007120:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007122:	2200      	movs	r2, #0
 8007124:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f00d fed2 	bl	8014ed6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007132:	88fb      	ldrh	r3, [r7, #6]
 8007134:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007138:	2b00      	cmp	r3, #0
 800713a:	f040 811a 	bne.w	8007372 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	461a      	mov	r2, r3
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007158:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	461a      	mov	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	441a      	add	r2, r3
 800716a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800716e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007172:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007176:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800717a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800717e:	b29b      	uxth	r3, r3
 8007180:	8013      	strh	r3, [r2, #0]
 8007182:	e0f6      	b.n	8007372 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007184:	88fb      	ldrh	r3, [r7, #6]
 8007186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d121      	bne.n	80071d2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071a8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	441a      	add	r2, r3
 80071ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80071be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80071ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80071d8:	2b01      	cmp	r3, #1
 80071da:	f040 80ca 	bne.w	8007372 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	695a      	ldr	r2, [r3, #20]
 80071e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80071e6:	441a      	add	r2, r3
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	69da      	ldr	r2, [r3, #28]
 80071f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80071f4:	441a      	add	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	6a1a      	ldr	r2, [r3, #32]
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	429a      	cmp	r2, r3
 8007204:	d30b      	bcc.n	800721e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	691b      	ldr	r3, [r3, #16]
 800720a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6a1a      	ldr	r2, [r3, #32]
 8007212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007216:	1ad2      	subs	r2, r2, r3
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	621a      	str	r2, [r3, #32]
 800721c:	e017      	b.n	800724e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d108      	bne.n	8007238 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007226:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800722a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007236:	e00a      	b.n	800724e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	657b      	str	r3, [r7, #84]	@ 0x54
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d165      	bne.n	8007328 <HAL_PCD_EP_DB_Transmit+0x748>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800726a:	b29b      	uxth	r3, r3
 800726c:	461a      	mov	r2, r3
 800726e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007270:	4413      	add	r3, r2
 8007272:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	00da      	lsls	r2, r3, #3
 800727a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800727c:	4413      	add	r3, r2
 800727e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007282:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007284:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007286:	881b      	ldrh	r3, [r3, #0]
 8007288:	b29b      	uxth	r3, r3
 800728a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800728e:	b29a      	uxth	r2, r3
 8007290:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007292:	801a      	strh	r2, [r3, #0]
 8007294:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007298:	2b3e      	cmp	r3, #62	@ 0x3e
 800729a:	d91d      	bls.n	80072d8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800729c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80072b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072b2:	3b01      	subs	r3, #1
 80072b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072b8:	881b      	ldrh	r3, [r3, #0]
 80072ba:	b29a      	uxth	r2, r3
 80072bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80072be:	b29b      	uxth	r3, r3
 80072c0:	029b      	lsls	r3, r3, #10
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072d4:	801a      	strh	r2, [r3, #0]
 80072d6:	e041      	b.n	800735c <HAL_PCD_EP_DB_Transmit+0x77c>
 80072d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <HAL_PCD_EP_DB_Transmit+0x716>
 80072e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ee:	b29a      	uxth	r2, r3
 80072f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80072f2:	801a      	strh	r2, [r3, #0]
 80072f4:	e032      	b.n	800735c <HAL_PCD_EP_DB_Transmit+0x77c>
 80072f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072fa:	085b      	lsrs	r3, r3, #1
 80072fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80072fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_PCD_EP_DB_Transmit+0x730>
 800730a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800730c:	3301      	adds	r3, #1
 800730e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007310:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	b29a      	uxth	r2, r3
 8007316:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007318:	b29b      	uxth	r3, r3
 800731a:	029b      	lsls	r3, r3, #10
 800731c:	b29b      	uxth	r3, r3
 800731e:	4313      	orrs	r3, r2
 8007320:	b29a      	uxth	r2, r3
 8007322:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007324:	801a      	strh	r2, [r3, #0]
 8007326:	e019      	b.n	800735c <HAL_PCD_EP_DB_Transmit+0x77c>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	785b      	ldrb	r3, [r3, #1]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d115      	bne.n	800735c <HAL_PCD_EP_DB_Transmit+0x77c>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007338:	b29b      	uxth	r3, r3
 800733a:	461a      	mov	r2, r3
 800733c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800733e:	4413      	add	r3, r2
 8007340:	657b      	str	r3, [r7, #84]	@ 0x54
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	00da      	lsls	r2, r3, #3
 8007348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800734a:	4413      	add	r3, r2
 800734c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007350:	653b      	str	r3, [r7, #80]	@ 0x50
 8007352:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007356:	b29a      	uxth	r2, r3
 8007358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800735a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6818      	ldr	r0, [r3, #0]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	6959      	ldr	r1, [r3, #20]
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	895a      	ldrh	r2, [r3, #10]
 8007368:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800736c:	b29b      	uxth	r3, r3
 800736e:	f006 fb05 	bl	800d97c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4413      	add	r3, r2
 8007380:	881b      	ldrh	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800738c:	82bb      	strh	r3, [r7, #20]
 800738e:	8abb      	ldrh	r3, [r7, #20]
 8007390:	f083 0310 	eor.w	r3, r3, #16
 8007394:	82bb      	strh	r3, [r7, #20]
 8007396:	8abb      	ldrh	r3, [r7, #20]
 8007398:	f083 0320 	eor.w	r3, r3, #32
 800739c:	82bb      	strh	r3, [r7, #20]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	461a      	mov	r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	441a      	add	r2, r3
 80073ac:	8abb      	ldrh	r3, [r7, #20]
 80073ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073be:	b29b      	uxth	r3, r3
 80073c0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80073c2:	2300      	movs	r3, #0
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3790      	adds	r7, #144	@ 0x90
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b087      	sub	sp, #28
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	607b      	str	r3, [r7, #4]
 80073d6:	460b      	mov	r3, r1
 80073d8:	817b      	strh	r3, [r7, #10]
 80073da:	4613      	mov	r3, r2
 80073dc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80073de:	897b      	ldrh	r3, [r7, #10]
 80073e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d00b      	beq.n	8007402 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073ea:	897b      	ldrh	r3, [r7, #10]
 80073ec:	f003 0207 	and.w	r2, r3, #7
 80073f0:	4613      	mov	r3, r2
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	4413      	add	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	3310      	adds	r3, #16
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	4413      	add	r3, r2
 80073fe:	617b      	str	r3, [r7, #20]
 8007400:	e009      	b.n	8007416 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007402:	897a      	ldrh	r2, [r7, #10]
 8007404:	4613      	mov	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	4413      	add	r3, r2
 800740a:	00db      	lsls	r3, r3, #3
 800740c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	4413      	add	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007416:	893b      	ldrh	r3, [r7, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2200      	movs	r2, #0
 8007420:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	b29a      	uxth	r2, r3
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	80da      	strh	r2, [r3, #6]
 800742a:	e00b      	b.n	8007444 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	2201      	movs	r2, #1
 8007430:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	b29a      	uxth	r2, r3
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	0c1b      	lsrs	r3, r3, #16
 800743e:	b29a      	uxth	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007452:	b480      	push	{r7}
 8007454:	b085      	sub	sp, #20
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007476:	b29b      	uxth	r3, r3
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	b29a      	uxth	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800748a:	b29b      	uxth	r3, r3
 800748c:	f043 0302 	orr.w	r3, r3, #2
 8007490:	b29a      	uxth	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3714      	adds	r7, #20
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr
	...

080074a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80074a8:	b480      	push	{r7}
 80074aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074ac:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a04      	ldr	r2, [pc, #16]	@ (80074c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80074b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074b6:	6013      	str	r3, [r2, #0]
}
 80074b8:	bf00      	nop
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	58000400 	.word	0x58000400

080074c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80074c8:	b480      	push	{r7}
 80074ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80074cc:	4b04      	ldr	r3, [pc, #16]	@ (80074e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	58000400 	.word	0x58000400

080074e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80074e4:	b480      	push	{r7}
 80074e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80074e8:	4b05      	ldr	r3, [pc, #20]	@ (8007500 <HAL_PWREx_EnableVddUSB+0x1c>)
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4a04      	ldr	r2, [pc, #16]	@ (8007500 <HAL_PWREx_EnableVddUSB+0x1c>)
 80074ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80074f2:	6053      	str	r3, [r2, #4]
}
 80074f4:	bf00      	nop
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	58000400 	.word	0x58000400

08007504 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007504:	b480      	push	{r7}
 8007506:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007512:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007516:	d101      	bne.n	800751c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <LL_RCC_HSE_Enable>:
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800752c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800753a:	6013      	str	r3, [r2, #0]
}
 800753c:	bf00      	nop
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <LL_RCC_HSE_Disable>:
{
 8007546:	b480      	push	{r7}
 8007548:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800754a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007554:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007558:	6013      	str	r3, [r2, #0]
}
 800755a:	bf00      	nop
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <LL_RCC_HSE_IsReady>:
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007568:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007572:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007576:	d101      	bne.n	800757c <LL_RCC_HSE_IsReady+0x18>
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <LL_RCC_HSE_IsReady+0x1a>
 800757c:	2300      	movs	r3, #0
}
 800757e:	4618      	mov	r0, r3
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <LL_RCC_HSI_Enable>:
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800758c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800759a:	6013      	str	r3, [r2, #0]
}
 800759c:	bf00      	nop
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <LL_RCC_HSI_Disable>:
{
 80075a6:	b480      	push	{r7}
 80075a8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80075aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075b8:	6013      	str	r3, [r2, #0]
}
 80075ba:	bf00      	nop
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <LL_RCC_HSI_IsReady>:
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80075c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075d6:	d101      	bne.n	80075dc <LL_RCC_HSI_IsReady+0x18>
 80075d8:	2301      	movs	r3, #1
 80075da:	e000      	b.n	80075de <LL_RCC_HSI_IsReady+0x1a>
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80075f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	061b      	lsls	r3, r3, #24
 80075fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007602:	4313      	orrs	r3, r2
 8007604:	604b      	str	r3, [r1, #4]
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <LL_RCC_HSI48_Enable>:
{
 8007612:	b480      	push	{r7}
 8007614:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800761a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800761e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800762a:	bf00      	nop
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr

08007634 <LL_RCC_HSI48_Disable>:
{
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800763c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007640:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007644:	f023 0301 	bic.w	r3, r3, #1
 8007648:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800764c:	bf00      	nop
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <LL_RCC_HSI48_IsReady>:
{
 8007656:	b480      	push	{r7}
 8007658:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800765a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800765e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b02      	cmp	r3, #2
 8007668:	d101      	bne.n	800766e <LL_RCC_HSI48_IsReady+0x18>
 800766a:	2301      	movs	r3, #1
 800766c:	e000      	b.n	8007670 <LL_RCC_HSI48_IsReady+0x1a>
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <LL_RCC_LSE_Enable>:
{
 800767a:	b480      	push	{r7}
 800767c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800767e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007686:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007692:	bf00      	nop
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <LL_RCC_LSE_Disable>:
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80076a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076ac:	f023 0301 	bic.w	r3, r3, #1
 80076b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80076b4:	bf00      	nop
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <LL_RCC_LSE_EnableBypass>:
{
 80076be:	b480      	push	{r7}
 80076c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80076c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076ce:	f043 0304 	orr.w	r3, r3, #4
 80076d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80076d6:	bf00      	nop
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <LL_RCC_LSE_DisableBypass>:
{
 80076e0:	b480      	push	{r7}
 80076e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80076e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80076f0:	f023 0304 	bic.w	r3, r3, #4
 80076f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80076f8:	bf00      	nop
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <LL_RCC_LSE_IsReady>:
{
 8007702:	b480      	push	{r7}
 8007704:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b02      	cmp	r3, #2
 8007714:	d101      	bne.n	800771a <LL_RCC_LSE_IsReady+0x18>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <LL_RCC_LSE_IsReady+0x1a>
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <LL_RCC_LSI1_Enable>:
{
 8007726:	b480      	push	{r7}
 8007728:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800772a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800772e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007736:	f043 0301 	orr.w	r3, r3, #1
 800773a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800773e:	bf00      	nop
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <LL_RCC_LSI1_Disable>:
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800774c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007750:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007754:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007758:	f023 0301 	bic.w	r3, r3, #1
 800775c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007760:	bf00      	nop
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <LL_RCC_LSI1_IsReady>:
{
 800776a:	b480      	push	{r7}
 800776c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800776e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b02      	cmp	r3, #2
 800777c:	d101      	bne.n	8007782 <LL_RCC_LSI1_IsReady+0x18>
 800777e:	2301      	movs	r3, #1
 8007780:	e000      	b.n	8007784 <LL_RCC_LSI1_IsReady+0x1a>
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <LL_RCC_LSI2_Enable>:
{
 800778e:	b480      	push	{r7}
 8007790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007792:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800779a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800779e:	f043 0304 	orr.w	r3, r3, #4
 80077a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80077a6:	bf00      	nop
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <LL_RCC_LSI2_Disable>:
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80077b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077bc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80077c0:	f023 0304 	bic.w	r3, r3, #4
 80077c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80077c8:	bf00      	nop
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <LL_RCC_LSI2_IsReady>:
{
 80077d2:	b480      	push	{r7}
 80077d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80077d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b08      	cmp	r3, #8
 80077e4:	d101      	bne.n	80077ea <LL_RCC_LSI2_IsReady+0x18>
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <LL_RCC_LSI2_IsReady+0x1a>
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr

080077f6 <LL_RCC_LSI2_SetTrimming>:
{
 80077f6:	b480      	push	{r7}
 80077f8:	b083      	sub	sp, #12
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80077fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007802:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007806:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	021b      	lsls	r3, r3, #8
 800780e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007812:	4313      	orrs	r3, r2
 8007814:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <LL_RCC_MSI_Enable>:
{
 8007824:	b480      	push	{r7}
 8007826:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	6013      	str	r3, [r2, #0]
}
 8007838:	bf00      	nop
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <LL_RCC_MSI_Disable>:
{
 8007842:	b480      	push	{r7}
 8007844:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	6013      	str	r3, [r2, #0]
}
 8007856:	bf00      	nop
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <LL_RCC_MSI_IsReady>:
{
 8007860:	b480      	push	{r7}
 8007862:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007864:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0302 	and.w	r3, r3, #2
 800786e:	2b02      	cmp	r3, #2
 8007870:	d101      	bne.n	8007876 <LL_RCC_MSI_IsReady+0x16>
 8007872:	2301      	movs	r3, #1
 8007874:	e000      	b.n	8007878 <LL_RCC_MSI_IsReady+0x18>
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <LL_RCC_MSI_SetRange>:
{
 8007882:	b480      	push	{r7}
 8007884:	b083      	sub	sp, #12
 8007886:	af00      	add	r7, sp, #0
 8007888:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800788a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4313      	orrs	r3, r2
 800789c:	600b      	str	r3, [r1, #0]
}
 800789e:	bf00      	nop
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <LL_RCC_MSI_GetRange>:
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80078b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80078ba:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2bb0      	cmp	r3, #176	@ 0xb0
 80078c0:	d901      	bls.n	80078c6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80078c2:	23b0      	movs	r3, #176	@ 0xb0
 80078c4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80078c6:	687b      	ldr	r3, [r7, #4]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80078dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078e0:	685b      	ldr	r3, [r3, #4]
 80078e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80078ee:	4313      	orrs	r3, r2
 80078f0:	604b      	str	r3, [r1, #4]
}
 80078f2:	bf00      	nop
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr

080078fe <LL_RCC_SetSysClkSource>:
{
 80078fe:	b480      	push	{r7}
 8007900:	b083      	sub	sp, #12
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007906:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f023 0203 	bic.w	r2, r3, #3
 8007910:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4313      	orrs	r3, r2
 8007918:	608b      	str	r3, [r1, #8]
}
 800791a:	bf00      	nop
 800791c:	370c      	adds	r7, #12
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <LL_RCC_GetSysClkSource>:
{
 8007926:	b480      	push	{r7}
 8007928:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800792a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f003 030c 	and.w	r3, r3, #12
}
 8007934:	4618      	mov	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <LL_RCC_SetAHBPrescaler>:
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007950:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4313      	orrs	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007966:	b480      	push	{r7}
 8007968:	b083      	sub	sp, #12
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800796e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007972:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007976:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800797a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr

08007992 <LL_RCC_SetAHB4Prescaler>:
{
 8007992:	b480      	push	{r7}
 8007994:	b083      	sub	sp, #12
 8007996:	af00      	add	r7, sp, #0
 8007998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80079a2:	f023 020f 	bic.w	r2, r3, #15
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	091b      	lsrs	r3, r3, #4
 80079aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079ae:	4313      	orrs	r3, r2
 80079b0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr

080079c0 <LL_RCC_SetAPB1Prescaler>:
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80079c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079d2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	4313      	orrs	r3, r2
 80079da:	608b      	str	r3, [r1, #8]
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <LL_RCC_SetAPB2Prescaler>:
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80079f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80079fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	608b      	str	r3, [r1, #8]
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <LL_RCC_GetAHBPrescaler>:
{
 8007a10:	b480      	push	{r7}
 8007a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <LL_RCC_GetAHB4Prescaler>:
{
 8007a28:	b480      	push	{r7}
 8007a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <LL_RCC_PLL_Enable>:
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a52:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a56:	6013      	str	r3, [r2, #0]
}
 8007a58:	bf00      	nop
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <LL_RCC_PLL_Disable>:
{
 8007a62:	b480      	push	{r7}
 8007a64:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007a66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007a70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a74:	6013      	str	r3, [r2, #0]
}
 8007a76:	bf00      	nop
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <LL_RCC_PLL_IsReady>:
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a8e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a92:	d101      	bne.n	8007a98 <LL_RCC_PLL_IsReady+0x18>
 8007a94:	2301      	movs	r3, #1
 8007a96:	e000      	b.n	8007a9a <LL_RCC_PLL_IsReady+0x1a>
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <LL_RCC_PLL_GetN>:
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	0a1b      	lsrs	r3, r3, #8
 8007ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr

08007abe <LL_RCC_PLL_GetR>:
{
 8007abe:	b480      	push	{r7}
 8007ac0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <LL_RCC_PLL_GetDivider>:
{
 8007ad6:	b480      	push	{r7}
 8007ad8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007ada:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <LL_RCC_PLL_GetMainSource>:
{
 8007aee:	b480      	push	{r7}
 8007af0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f003 0303 	and.w	r3, r3, #3
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr

08007b06 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007b06:	b480      	push	{r7}
 8007b08:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007b0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b18:	d101      	bne.n	8007b1e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e000      	b.n	8007b20 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007b2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b32:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b3e:	d101      	bne.n	8007b44 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8007b50:	b480      	push	{r7}
 8007b52:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b58:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007b5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b64:	d101      	bne.n	8007b6a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007b66:	2301      	movs	r3, #1
 8007b68:	e000      	b.n	8007b6c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007b76:	b480      	push	{r7}
 8007b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007b7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007b88:	d101      	bne.n	8007b8e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <LL_RCC_IsActiveFlag_PPRE2>:
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007b9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ba8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007bac:	d101      	bne.n	8007bb2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e000      	b.n	8007bb4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
	...

08007bc0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bc0:	b590      	push	{r4, r7, lr}
 8007bc2:	b08d      	sub	sp, #52	@ 0x34
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e363      	b.n	800829a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 808d 	beq.w	8007cfa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007be0:	f7ff fea1 	bl	8007926 <LL_RCC_GetSysClkSource>
 8007be4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007be6:	f7ff ff82 	bl	8007aee <LL_RCC_PLL_GetMainSource>
 8007bea:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d005      	beq.n	8007bfe <HAL_RCC_OscConfig+0x3e>
 8007bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf4:	2b0c      	cmp	r3, #12
 8007bf6:	d147      	bne.n	8007c88 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d144      	bne.n	8007c88 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d101      	bne.n	8007c0a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e347      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007c0e:	f7ff fe4c 	bl	80078aa <LL_RCC_MSI_GetRange>
 8007c12:	4603      	mov	r3, r0
 8007c14:	429c      	cmp	r4, r3
 8007c16:	d914      	bls.n	8007c42 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fd03 	bl	8008628 <RCC_SetFlashLatencyFromMSIRange>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d001      	beq.n	8007c2c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e336      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c30:	4618      	mov	r0, r3
 8007c32:	f7ff fe26 	bl	8007882 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a1b      	ldr	r3, [r3, #32]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff fe4a 	bl	80078d4 <LL_RCC_MSI_SetCalibTrimming>
 8007c40:	e013      	b.n	8007c6a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7ff fe1b 	bl	8007882 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7ff fe3f 	bl	80078d4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f000 fce4 	bl	8008628 <RCC_SetFlashLatencyFromMSIRange>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e317      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007c6a:	f000 fcc9 	bl	8008600 <HAL_RCC_GetHCLKFreq>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	4aa4      	ldr	r2, [pc, #656]	@ (8007f04 <HAL_RCC_OscConfig+0x344>)
 8007c72:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007c74:	4ba4      	ldr	r3, [pc, #656]	@ (8007f08 <HAL_RCC_OscConfig+0x348>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7fc fbff 	bl	800447c <HAL_InitTick>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d039      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	e308      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d01e      	beq.n	8007cce <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007c90:	f7ff fdc8 	bl	8007824 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007c94:	f7fc fc40 	bl	8004518 <HAL_GetTick>
 8007c98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007c9a:	e008      	b.n	8007cae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007c9c:	f7fc fc3c 	bl	8004518 <HAL_GetTick>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	1ad3      	subs	r3, r2, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d901      	bls.n	8007cae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	e2f5      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007cae:	f7ff fdd7 	bl	8007860 <LL_RCC_MSI_IsReady>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0f1      	beq.n	8007c9c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7ff fde0 	bl	8007882 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6a1b      	ldr	r3, [r3, #32]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7ff fe04 	bl	80078d4 <LL_RCC_MSI_SetCalibTrimming>
 8007ccc:	e015      	b.n	8007cfa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007cce:	f7ff fdb8 	bl	8007842 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007cd2:	f7fc fc21 	bl	8004518 <HAL_GetTick>
 8007cd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007cd8:	e008      	b.n	8007cec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007cda:	f7fc fc1d 	bl	8004518 <HAL_GetTick>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce2:	1ad3      	subs	r3, r2, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d901      	bls.n	8007cec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e2d6      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007cec:	f7ff fdb8 	bl	8007860 <LL_RCC_MSI_IsReady>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1f1      	bne.n	8007cda <HAL_RCC_OscConfig+0x11a>
 8007cf6:	e000      	b.n	8007cfa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007cf8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d047      	beq.n	8007d96 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d06:	f7ff fe0e 	bl	8007926 <LL_RCC_GetSysClkSource>
 8007d0a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d0c:	f7ff feef 	bl	8007aee <LL_RCC_PLL_GetMainSource>
 8007d10:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	2b08      	cmp	r3, #8
 8007d16:	d005      	beq.n	8007d24 <HAL_RCC_OscConfig+0x164>
 8007d18:	6a3b      	ldr	r3, [r7, #32]
 8007d1a:	2b0c      	cmp	r3, #12
 8007d1c:	d108      	bne.n	8007d30 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	2b03      	cmp	r3, #3
 8007d22:	d105      	bne.n	8007d30 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d134      	bne.n	8007d96 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e2b4      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d38:	d102      	bne.n	8007d40 <HAL_RCC_OscConfig+0x180>
 8007d3a:	f7ff fbf5 	bl	8007528 <LL_RCC_HSE_Enable>
 8007d3e:	e001      	b.n	8007d44 <HAL_RCC_OscConfig+0x184>
 8007d40:	f7ff fc01 	bl	8007546 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d012      	beq.n	8007d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d4c:	f7fc fbe4 	bl	8004518 <HAL_GetTick>
 8007d50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007d52:	e008      	b.n	8007d66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d54:	f7fc fbe0 	bl	8004518 <HAL_GetTick>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	2b64      	cmp	r3, #100	@ 0x64
 8007d60:	d901      	bls.n	8007d66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007d62:	2303      	movs	r3, #3
 8007d64:	e299      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007d66:	f7ff fbfd 	bl	8007564 <LL_RCC_HSE_IsReady>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0f1      	beq.n	8007d54 <HAL_RCC_OscConfig+0x194>
 8007d70:	e011      	b.n	8007d96 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d72:	f7fc fbd1 	bl	8004518 <HAL_GetTick>
 8007d76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007d78:	e008      	b.n	8007d8c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d7a:	f7fc fbcd 	bl	8004518 <HAL_GetTick>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	2b64      	cmp	r3, #100	@ 0x64
 8007d86:	d901      	bls.n	8007d8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	e286      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007d8c:	f7ff fbea 	bl	8007564 <LL_RCC_HSE_IsReady>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1f1      	bne.n	8007d7a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0302 	and.w	r3, r3, #2
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d04c      	beq.n	8007e3c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007da2:	f7ff fdc0 	bl	8007926 <LL_RCC_GetSysClkSource>
 8007da6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007da8:	f7ff fea1 	bl	8007aee <LL_RCC_PLL_GetMainSource>
 8007dac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d005      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x200>
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	2b0c      	cmp	r3, #12
 8007db8:	d10e      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d10b      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e266      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f7ff fc09 	bl	80075e8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007dd6:	e031      	b.n	8007e3c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d019      	beq.n	8007e14 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007de0:	f7ff fbd2 	bl	8007588 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de4:	f7fc fb98 	bl	8004518 <HAL_GetTick>
 8007de8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dec:	f7fc fb94 	bl	8004518 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e24d      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007dfe:	f7ff fbe1 	bl	80075c4 <LL_RCC_HSI_IsReady>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0f1      	beq.n	8007dec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	691b      	ldr	r3, [r3, #16]
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f7ff fbeb 	bl	80075e8 <LL_RCC_HSI_SetCalibTrimming>
 8007e12:	e013      	b.n	8007e3c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e14:	f7ff fbc7 	bl	80075a6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e18:	f7fc fb7e 	bl	8004518 <HAL_GetTick>
 8007e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e20:	f7fc fb7a 	bl	8004518 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e233      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007e32:	f7ff fbc7 	bl	80075c4 <LL_RCC_HSI_IsReady>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d1f1      	bne.n	8007e20 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 0308 	and.w	r3, r3, #8
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d106      	bne.n	8007e56 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 80a3 	beq.w	8007f9c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	695b      	ldr	r3, [r3, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d076      	beq.n	8007f4c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f003 0310 	and.w	r3, r3, #16
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d046      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007e6a:	f7ff fc7e 	bl	800776a <LL_RCC_LSI1_IsReady>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d113      	bne.n	8007e9c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007e74:	f7ff fc57 	bl	8007726 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007e78:	f7fc fb4e 	bl	8004518 <HAL_GetTick>
 8007e7c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007e80:	f7fc fb4a 	bl	8004518 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e203      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007e92:	f7ff fc6a 	bl	800776a <LL_RCC_LSI1_IsReady>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d0f1      	beq.n	8007e80 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007e9c:	f7ff fc77 	bl	800778e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea0:	f7fc fb3a 	bl	8004518 <HAL_GetTick>
 8007ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007ea8:	f7fc fb36 	bl	8004518 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b03      	cmp	r3, #3
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e1ef      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007eba:	f7ff fc8a 	bl	80077d2 <LL_RCC_LSI2_IsReady>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d0f1      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff fc94 	bl	80077f6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007ece:	f7ff fc3b 	bl	8007748 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed2:	f7fc fb21 	bl	8004518 <HAL_GetTick>
 8007ed6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007ed8:	e008      	b.n	8007eec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007eda:	f7fc fb1d 	bl	8004518 <HAL_GetTick>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d901      	bls.n	8007eec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e1d6      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007eec:	f7ff fc3d 	bl	800776a <LL_RCC_LSI1_IsReady>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d1f1      	bne.n	8007eda <HAL_RCC_OscConfig+0x31a>
 8007ef6:	e051      	b.n	8007f9c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007ef8:	f7ff fc15 	bl	8007726 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efc:	f7fc fb0c 	bl	8004518 <HAL_GetTick>
 8007f00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007f02:	e00c      	b.n	8007f1e <HAL_RCC_OscConfig+0x35e>
 8007f04:	2000000c 	.word	0x2000000c
 8007f08:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007f0c:	f7fc fb04 	bl	8004518 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e1bd      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007f1e:	f7ff fc24 	bl	800776a <LL_RCC_LSI1_IsReady>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d0f1      	beq.n	8007f0c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007f28:	f7ff fc42 	bl	80077b0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007f2c:	e008      	b.n	8007f40 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007f2e:	f7fc faf3 	bl	8004518 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d901      	bls.n	8007f40 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	e1ac      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007f40:	f7ff fc47 	bl	80077d2 <LL_RCC_LSI2_IsReady>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1f1      	bne.n	8007f2e <HAL_RCC_OscConfig+0x36e>
 8007f4a:	e027      	b.n	8007f9c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007f4c:	f7ff fc30 	bl	80077b0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f50:	f7fc fae2 	bl	8004518 <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007f58:	f7fc fade 	bl	8004518 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e197      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007f6a:	f7ff fc32 	bl	80077d2 <LL_RCC_LSI2_IsReady>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1f1      	bne.n	8007f58 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007f74:	f7ff fbe8 	bl	8007748 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f78:	f7fc face 	bl	8004518 <HAL_GetTick>
 8007f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007f7e:	e008      	b.n	8007f92 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007f80:	f7fc faca 	bl	8004518 <HAL_GetTick>
 8007f84:	4602      	mov	r2, r0
 8007f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f88:	1ad3      	subs	r3, r2, r3
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d901      	bls.n	8007f92 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e183      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007f92:	f7ff fbea 	bl	800776a <LL_RCC_LSI1_IsReady>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f1      	bne.n	8007f80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f003 0304 	and.w	r3, r3, #4
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d05b      	beq.n	8008060 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fa8:	4ba7      	ldr	r3, [pc, #668]	@ (8008248 <HAL_RCC_OscConfig+0x688>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d114      	bne.n	8007fde <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007fb4:	f7ff fa78 	bl	80074a8 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fb8:	f7fc faae 	bl	8004518 <HAL_GetTick>
 8007fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fc0:	f7fc faaa 	bl	8004518 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e163      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fd2:	4b9d      	ldr	r3, [pc, #628]	@ (8008248 <HAL_RCC_OscConfig+0x688>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0f0      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d102      	bne.n	8007fec <HAL_RCC_OscConfig+0x42c>
 8007fe6:	f7ff fb48 	bl	800767a <LL_RCC_LSE_Enable>
 8007fea:	e00c      	b.n	8008006 <HAL_RCC_OscConfig+0x446>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	2b05      	cmp	r3, #5
 8007ff2:	d104      	bne.n	8007ffe <HAL_RCC_OscConfig+0x43e>
 8007ff4:	f7ff fb63 	bl	80076be <LL_RCC_LSE_EnableBypass>
 8007ff8:	f7ff fb3f 	bl	800767a <LL_RCC_LSE_Enable>
 8007ffc:	e003      	b.n	8008006 <HAL_RCC_OscConfig+0x446>
 8007ffe:	f7ff fb4d 	bl	800769c <LL_RCC_LSE_Disable>
 8008002:	f7ff fb6d 	bl	80076e0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d014      	beq.n	8008038 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800800e:	f7fc fa83 	bl	8004518 <HAL_GetTick>
 8008012:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008014:	e00a      	b.n	800802c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008016:	f7fc fa7f 	bl	8004518 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008024:	4293      	cmp	r3, r2
 8008026:	d901      	bls.n	800802c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e136      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800802c:	f7ff fb69 	bl	8007702 <LL_RCC_LSE_IsReady>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0ef      	beq.n	8008016 <HAL_RCC_OscConfig+0x456>
 8008036:	e013      	b.n	8008060 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008038:	f7fc fa6e 	bl	8004518 <HAL_GetTick>
 800803c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800803e:	e00a      	b.n	8008056 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008040:	f7fc fa6a 	bl	8004518 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800804e:	4293      	cmp	r3, r2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e121      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008056:	f7ff fb54 	bl	8007702 <LL_RCC_LSE_IsReady>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1ef      	bne.n	8008040 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008068:	2b00      	cmp	r3, #0
 800806a:	d02c      	beq.n	80080c6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008070:	2b00      	cmp	r3, #0
 8008072:	d014      	beq.n	800809e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008074:	f7ff facd 	bl	8007612 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008078:	f7fc fa4e 	bl	8004518 <HAL_GetTick>
 800807c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008080:	f7fc fa4a 	bl	8004518 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e103      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008092:	f7ff fae0 	bl	8007656 <LL_RCC_HSI48_IsReady>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d0f1      	beq.n	8008080 <HAL_RCC_OscConfig+0x4c0>
 800809c:	e013      	b.n	80080c6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800809e:	f7ff fac9 	bl	8007634 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a2:	f7fc fa39 	bl	8004518 <HAL_GetTick>
 80080a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80080a8:	e008      	b.n	80080bc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080aa:	f7fc fa35 	bl	8004518 <HAL_GetTick>
 80080ae:	4602      	mov	r2, r0
 80080b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b2:	1ad3      	subs	r3, r2, r3
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d901      	bls.n	80080bc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80080b8:	2303      	movs	r3, #3
 80080ba:	e0ee      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80080bc:	f7ff facb 	bl	8007656 <LL_RCC_HSI48_IsReady>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f1      	bne.n	80080aa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 80e4 	beq.w	8008298 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080d0:	f7ff fc29 	bl	8007926 <LL_RCC_GetSysClkSource>
 80080d4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80080d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	f040 80b4 	bne.w	8008250 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f003 0203 	and.w	r2, r3, #3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d123      	bne.n	800813e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008100:	429a      	cmp	r2, r3
 8008102:	d11c      	bne.n	800813e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0a1b      	lsrs	r3, r3, #8
 8008108:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008110:	429a      	cmp	r2, r3
 8008112:	d114      	bne.n	800813e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800811e:	429a      	cmp	r2, r3
 8008120:	d10d      	bne.n	800813e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800812c:	429a      	cmp	r2, r3
 800812e:	d106      	bne.n	800813e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800813a:	429a      	cmp	r2, r3
 800813c:	d05d      	beq.n	80081fa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b0c      	cmp	r3, #12
 8008142:	d058      	beq.n	80081f6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008144:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e0a1      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008156:	f7ff fc84 	bl	8007a62 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800815a:	f7fc f9dd 	bl	8004518 <HAL_GetTick>
 800815e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008162:	f7fc f9d9 	bl	8004518 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e092      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008174:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1ef      	bne.n	8008162 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	4b30      	ldr	r3, [pc, #192]	@ (800824c <HAL_RCC_OscConfig+0x68c>)
 800818a:	4013      	ands	r3, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008194:	4311      	orrs	r1, r2
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800819a:	0212      	lsls	r2, r2, #8
 800819c:	4311      	orrs	r1, r2
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80081a2:	4311      	orrs	r1, r2
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80081a8:	4311      	orrs	r1, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80081ae:	430a      	orrs	r2, r1
 80081b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081b4:	4313      	orrs	r3, r2
 80081b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80081b8:	f7ff fc44 	bl	8007a44 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80081ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081cc:	f7fc f9a4 	bl	8004518 <HAL_GetTick>
 80081d0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081d2:	e008      	b.n	80081e6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081d4:	f7fc f9a0 	bl	8004518 <HAL_GetTick>
 80081d8:	4602      	mov	r2, r0
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	1ad3      	subs	r3, r2, r3
 80081de:	2b02      	cmp	r3, #2
 80081e0:	d901      	bls.n	80081e6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80081e2:	2303      	movs	r3, #3
 80081e4:	e059      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d0ef      	beq.n	80081d4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081f4:	e050      	b.n	8008298 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	e04f      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008204:	2b00      	cmp	r3, #0
 8008206:	d147      	bne.n	8008298 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008208:	f7ff fc1c 	bl	8007a44 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800820c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008216:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800821a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800821c:	f7fc f97c 	bl	8004518 <HAL_GetTick>
 8008220:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008222:	e008      	b.n	8008236 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008224:	f7fc f978 	bl	8004518 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	2b02      	cmp	r3, #2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e031      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d0ef      	beq.n	8008224 <HAL_RCC_OscConfig+0x664>
 8008244:	e028      	b.n	8008298 <HAL_RCC_OscConfig+0x6d8>
 8008246:	bf00      	nop
 8008248:	58000400 	.word	0x58000400
 800824c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	2b0c      	cmp	r3, #12
 8008254:	d01e      	beq.n	8008294 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008256:	f7ff fc04 	bl	8007a62 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800825a:	f7fc f95d 	bl	8004518 <HAL_GetTick>
 800825e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008260:	e008      	b.n	8008274 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008262:	f7fc f959 	bl	8004518 <HAL_GetTick>
 8008266:	4602      	mov	r2, r0
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	1ad3      	subs	r3, r2, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d901      	bls.n	8008274 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008270:	2303      	movs	r3, #3
 8008272:	e012      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1ef      	bne.n	8008262 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008286:	68da      	ldr	r2, [r3, #12]
 8008288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800828c:	4b05      	ldr	r3, [pc, #20]	@ (80082a4 <HAL_RCC_OscConfig+0x6e4>)
 800828e:	4013      	ands	r3, r2
 8008290:	60cb      	str	r3, [r1, #12]
 8008292:	e001      	b.n	8008298 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
 8008296:	e000      	b.n	800829a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3734      	adds	r7, #52	@ 0x34
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd90      	pop	{r4, r7, pc}
 80082a2:	bf00      	nop
 80082a4:	eefefffc 	.word	0xeefefffc

080082a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b084      	sub	sp, #16
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d101      	bne.n	80082bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80082b8:	2301      	movs	r3, #1
 80082ba:	e12d      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082bc:	4b98      	ldr	r3, [pc, #608]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0307 	and.w	r3, r3, #7
 80082c4:	683a      	ldr	r2, [r7, #0]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d91b      	bls.n	8008302 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082ca:	4b95      	ldr	r3, [pc, #596]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f023 0207 	bic.w	r2, r3, #7
 80082d2:	4993      	ldr	r1, [pc, #588]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082da:	f7fc f91d 	bl	8004518 <HAL_GetTick>
 80082de:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082e0:	e008      	b.n	80082f4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80082e2:	f7fc f919 	bl	8004518 <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d901      	bls.n	80082f4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80082f0:	2303      	movs	r3, #3
 80082f2:	e111      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082f4:	4b8a      	ldr	r3, [pc, #552]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d1ef      	bne.n	80082e2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d016      	beq.n	800833c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff fb13 	bl	800793e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008318:	f7fc f8fe 	bl	8004518 <HAL_GetTick>
 800831c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800831e:	e008      	b.n	8008332 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008320:	f7fc f8fa 	bl	8004518 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	2b02      	cmp	r3, #2
 800832c:	d901      	bls.n	8008332 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e0f2      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008332:	f7ff fbe8 	bl	8007b06 <LL_RCC_IsActiveFlag_HPRE>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0f1      	beq.n	8008320 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f003 0320 	and.w	r3, r3, #32
 8008344:	2b00      	cmp	r3, #0
 8008346:	d016      	beq.n	8008376 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	695b      	ldr	r3, [r3, #20]
 800834c:	4618      	mov	r0, r3
 800834e:	f7ff fb0a 	bl	8007966 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008352:	f7fc f8e1 	bl	8004518 <HAL_GetTick>
 8008356:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008358:	e008      	b.n	800836c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800835a:	f7fc f8dd 	bl	8004518 <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d901      	bls.n	800836c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e0d5      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800836c:	f7ff fbdd 	bl	8007b2a <LL_RCC_IsActiveFlag_C2HPRE>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d0f1      	beq.n	800835a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800837e:	2b00      	cmp	r3, #0
 8008380:	d016      	beq.n	80083b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	699b      	ldr	r3, [r3, #24]
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff fb03 	bl	8007992 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800838c:	f7fc f8c4 	bl	8004518 <HAL_GetTick>
 8008390:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008394:	f7fc f8c0 	bl	8004518 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e0b8      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80083a6:	f7ff fbd3 	bl	8007b50 <LL_RCC_IsActiveFlag_SHDHPRE>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d0f1      	beq.n	8008394 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0304 	and.w	r3, r3, #4
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d016      	beq.n	80083ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff fafd 	bl	80079c0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80083c6:	f7fc f8a7 	bl	8004518 <HAL_GetTick>
 80083ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80083cc:	e008      	b.n	80083e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80083ce:	f7fc f8a3 	bl	8004518 <HAL_GetTick>
 80083d2:	4602      	mov	r2, r0
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	1ad3      	subs	r3, r2, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d901      	bls.n	80083e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80083dc:	2303      	movs	r3, #3
 80083de:	e09b      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80083e0:	f7ff fbc9 	bl	8007b76 <LL_RCC_IsActiveFlag_PPRE1>
 80083e4:	4603      	mov	r3, r0
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0f1      	beq.n	80083ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 0308 	and.w	r3, r3, #8
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d017      	beq.n	8008426 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	00db      	lsls	r3, r3, #3
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff faf3 	bl	80079e8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008402:	f7fc f889 	bl	8004518 <HAL_GetTick>
 8008406:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008408:	e008      	b.n	800841c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800840a:	f7fc f885 	bl	8004518 <HAL_GetTick>
 800840e:	4602      	mov	r2, r0
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	2b02      	cmp	r3, #2
 8008416:	d901      	bls.n	800841c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008418:	2303      	movs	r3, #3
 800841a:	e07d      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800841c:	f7ff fbbd 	bl	8007b9a <LL_RCC_IsActiveFlag_PPRE2>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0f1      	beq.n	800840a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 0301 	and.w	r3, r3, #1
 800842e:	2b00      	cmp	r3, #0
 8008430:	d043      	beq.n	80084ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	2b02      	cmp	r3, #2
 8008438:	d106      	bne.n	8008448 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800843a:	f7ff f893 	bl	8007564 <LL_RCC_HSE_IsReady>
 800843e:	4603      	mov	r3, r0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d11e      	bne.n	8008482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e067      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	2b03      	cmp	r3, #3
 800844e:	d106      	bne.n	800845e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008450:	f7ff fb16 	bl	8007a80 <LL_RCC_PLL_IsReady>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d113      	bne.n	8008482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e05c      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d106      	bne.n	8008474 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008466:	f7ff f9fb 	bl	8007860 <LL_RCC_MSI_IsReady>
 800846a:	4603      	mov	r3, r0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d108      	bne.n	8008482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008470:	2301      	movs	r3, #1
 8008472:	e051      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008474:	f7ff f8a6 	bl	80075c4 <LL_RCC_HSI_IsReady>
 8008478:	4603      	mov	r3, r0
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e04a      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fa39 	bl	80078fe <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800848c:	f7fc f844 	bl	8004518 <HAL_GetTick>
 8008490:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008492:	e00a      	b.n	80084aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008494:	f7fc f840 	bl	8004518 <HAL_GetTick>
 8008498:	4602      	mov	r2, r0
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	1ad3      	subs	r3, r2, r3
 800849e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d901      	bls.n	80084aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e036      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084aa:	f7ff fa3c 	bl	8007926 <LL_RCC_GetSysClkSource>
 80084ae:	4602      	mov	r2, r0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	009b      	lsls	r3, r3, #2
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d1ec      	bne.n	8008494 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084ba:	4b19      	ldr	r3, [pc, #100]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d21b      	bcs.n	8008500 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084c8:	4b15      	ldr	r3, [pc, #84]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f023 0207 	bic.w	r2, r3, #7
 80084d0:	4913      	ldr	r1, [pc, #76]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	4313      	orrs	r3, r2
 80084d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084d8:	f7fc f81e 	bl	8004518 <HAL_GetTick>
 80084dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084de:	e008      	b.n	80084f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80084e0:	f7fc f81a 	bl	8004518 <HAL_GetTick>
 80084e4:	4602      	mov	r2, r0
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	1ad3      	subs	r3, r2, r3
 80084ea:	2b02      	cmp	r3, #2
 80084ec:	d901      	bls.n	80084f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80084ee:	2303      	movs	r3, #3
 80084f0:	e012      	b.n	8008518 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008520 <HAL_RCC_ClockConfig+0x278>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d1ef      	bne.n	80084e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008500:	f000 f87e 	bl	8008600 <HAL_RCC_GetHCLKFreq>
 8008504:	4603      	mov	r3, r0
 8008506:	4a07      	ldr	r2, [pc, #28]	@ (8008524 <HAL_RCC_ClockConfig+0x27c>)
 8008508:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800850a:	f7fc f811 	bl	8004530 <HAL_GetTickPrio>
 800850e:	4603      	mov	r3, r0
 8008510:	4618      	mov	r0, r3
 8008512:	f7fb ffb3 	bl	800447c <HAL_InitTick>
 8008516:	4603      	mov	r3, r0
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	58004000 	.word	0x58004000
 8008524:	2000000c 	.word	0x2000000c

08008528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008528:	b590      	push	{r4, r7, lr}
 800852a:	b085      	sub	sp, #20
 800852c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800852e:	f7ff f9fa 	bl	8007926 <LL_RCC_GetSysClkSource>
 8008532:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10a      	bne.n	8008550 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800853a:	f7ff f9b6 	bl	80078aa <LL_RCC_MSI_GetRange>
 800853e:	4603      	mov	r3, r0
 8008540:	091b      	lsrs	r3, r3, #4
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	4a2b      	ldr	r2, [pc, #172]	@ (80085f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e04b      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2b04      	cmp	r3, #4
 8008554:	d102      	bne.n	800855c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008556:	4b28      	ldr	r3, [pc, #160]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	e045      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b08      	cmp	r3, #8
 8008560:	d10a      	bne.n	8008578 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008562:	f7fe ffcf 	bl	8007504 <LL_RCC_HSE_IsEnabledDiv2>
 8008566:	4603      	mov	r3, r0
 8008568:	2b01      	cmp	r3, #1
 800856a:	d102      	bne.n	8008572 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800856c:	4b22      	ldr	r3, [pc, #136]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	e03a      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008572:	4b22      	ldr	r3, [pc, #136]	@ (80085fc <HAL_RCC_GetSysClockFreq+0xd4>)
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e037      	b.n	80085e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008578:	f7ff fab9 	bl	8007aee <LL_RCC_PLL_GetMainSource>
 800857c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	2b02      	cmp	r3, #2
 8008582:	d003      	beq.n	800858c <HAL_RCC_GetSysClockFreq+0x64>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	2b03      	cmp	r3, #3
 8008588:	d003      	beq.n	8008592 <HAL_RCC_GetSysClockFreq+0x6a>
 800858a:	e00d      	b.n	80085a8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800858c:	4b1a      	ldr	r3, [pc, #104]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800858e:	60bb      	str	r3, [r7, #8]
        break;
 8008590:	e015      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008592:	f7fe ffb7 	bl	8007504 <LL_RCC_HSE_IsEnabledDiv2>
 8008596:	4603      	mov	r3, r0
 8008598:	2b01      	cmp	r3, #1
 800859a:	d102      	bne.n	80085a2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800859c:	4b16      	ldr	r3, [pc, #88]	@ (80085f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800859e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80085a0:	e00d      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80085a2:	4b16      	ldr	r3, [pc, #88]	@ (80085fc <HAL_RCC_GetSysClockFreq+0xd4>)
 80085a4:	60bb      	str	r3, [r7, #8]
        break;
 80085a6:	e00a      	b.n	80085be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80085a8:	f7ff f97f 	bl	80078aa <LL_RCC_MSI_GetRange>
 80085ac:	4603      	mov	r3, r0
 80085ae:	091b      	lsrs	r3, r3, #4
 80085b0:	f003 030f 	and.w	r3, r3, #15
 80085b4:	4a0f      	ldr	r2, [pc, #60]	@ (80085f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 80085b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ba:	60bb      	str	r3, [r7, #8]
        break;
 80085bc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80085be:	f7ff fa71 	bl	8007aa4 <LL_RCC_PLL_GetN>
 80085c2:	4602      	mov	r2, r0
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	fb03 f402 	mul.w	r4, r3, r2
 80085ca:	f7ff fa84 	bl	8007ad6 <LL_RCC_PLL_GetDivider>
 80085ce:	4603      	mov	r3, r0
 80085d0:	091b      	lsrs	r3, r3, #4
 80085d2:	3301      	adds	r3, #1
 80085d4:	fbb4 f4f3 	udiv	r4, r4, r3
 80085d8:	f7ff fa71 	bl	8007abe <LL_RCC_PLL_GetR>
 80085dc:	4603      	mov	r3, r0
 80085de:	0f5b      	lsrs	r3, r3, #29
 80085e0:	3301      	adds	r3, #1
 80085e2:	fbb4 f3f3 	udiv	r3, r4, r3
 80085e6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80085e8:	68fb      	ldr	r3, [r7, #12]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd90      	pop	{r4, r7, pc}
 80085f2:	bf00      	nop
 80085f4:	080188cc 	.word	0x080188cc
 80085f8:	00f42400 	.word	0x00f42400
 80085fc:	01e84800 	.word	0x01e84800

08008600 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008600:	b598      	push	{r3, r4, r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008604:	f7ff ff90 	bl	8008528 <HAL_RCC_GetSysClockFreq>
 8008608:	4604      	mov	r4, r0
 800860a:	f7ff fa01 	bl	8007a10 <LL_RCC_GetAHBPrescaler>
 800860e:	4603      	mov	r3, r0
 8008610:	091b      	lsrs	r3, r3, #4
 8008612:	f003 030f 	and.w	r3, r3, #15
 8008616:	4a03      	ldr	r2, [pc, #12]	@ (8008624 <HAL_RCC_GetHCLKFreq+0x24>)
 8008618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800861c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008620:	4618      	mov	r0, r3
 8008622:	bd98      	pop	{r3, r4, r7, pc}
 8008624:	0801888c 	.word	0x0801888c

08008628 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008628:	b590      	push	{r4, r7, lr}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2bb0      	cmp	r3, #176	@ 0xb0
 8008634:	d903      	bls.n	800863e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008636:	4b15      	ldr	r3, [pc, #84]	@ (800868c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	e007      	b.n	800864e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	091b      	lsrs	r3, r3, #4
 8008642:	f003 030f 	and.w	r3, r3, #15
 8008646:	4a11      	ldr	r2, [pc, #68]	@ (800868c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800864c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800864e:	f7ff f9eb 	bl	8007a28 <LL_RCC_GetAHB4Prescaler>
 8008652:	4603      	mov	r3, r0
 8008654:	091b      	lsrs	r3, r3, #4
 8008656:	f003 030f 	and.w	r3, r3, #15
 800865a:	4a0d      	ldr	r2, [pc, #52]	@ (8008690 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800865c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	fbb2 f3f3 	udiv	r3, r2, r3
 8008666:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	4a0a      	ldr	r2, [pc, #40]	@ (8008694 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800866c:	fba2 2303 	umull	r2, r3, r2, r3
 8008670:	0c9c      	lsrs	r4, r3, #18
 8008672:	f7fe ff29 	bl	80074c8 <HAL_PWREx_GetVoltageRange>
 8008676:	4603      	mov	r3, r0
 8008678:	4619      	mov	r1, r3
 800867a:	4620      	mov	r0, r4
 800867c:	f000 f80c 	bl	8008698 <RCC_SetFlashLatency>
 8008680:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	bd90      	pop	{r4, r7, pc}
 800868a:	bf00      	nop
 800868c:	080188cc 	.word	0x080188cc
 8008690:	0801888c 	.word	0x0801888c
 8008694:	431bde83 	.word	0x431bde83

08008698 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008698:	b590      	push	{r4, r7, lr}
 800869a:	b093      	sub	sp, #76	@ 0x4c
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80086a2:	4b37      	ldr	r3, [pc, #220]	@ (8008780 <RCC_SetFlashLatency+0xe8>)
 80086a4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80086a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80086ae:	4a35      	ldr	r2, [pc, #212]	@ (8008784 <RCC_SetFlashLatency+0xec>)
 80086b0:	f107 031c 	add.w	r3, r7, #28
 80086b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80086b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80086ba:	4b33      	ldr	r3, [pc, #204]	@ (8008788 <RCC_SetFlashLatency+0xf0>)
 80086bc:	f107 040c 	add.w	r4, r7, #12
 80086c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80086c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80086c6:	2300      	movs	r3, #0
 80086c8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80086d0:	d11a      	bne.n	8008708 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80086d2:	2300      	movs	r3, #0
 80086d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80086d6:	e013      	b.n	8008700 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80086d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	3348      	adds	r3, #72	@ 0x48
 80086de:	443b      	add	r3, r7
 80086e0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d807      	bhi.n	80086fa <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80086ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	3348      	adds	r3, #72	@ 0x48
 80086f0:	443b      	add	r3, r7
 80086f2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80086f6:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80086f8:	e020      	b.n	800873c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80086fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086fc:	3301      	adds	r3, #1
 80086fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8008700:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008702:	2b03      	cmp	r3, #3
 8008704:	d9e8      	bls.n	80086d8 <RCC_SetFlashLatency+0x40>
 8008706:	e019      	b.n	800873c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008708:	2300      	movs	r3, #0
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800870c:	e013      	b.n	8008736 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800870e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	3348      	adds	r3, #72	@ 0x48
 8008714:	443b      	add	r3, r7
 8008716:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	429a      	cmp	r2, r3
 800871e:	d807      	bhi.n	8008730 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	3348      	adds	r3, #72	@ 0x48
 8008726:	443b      	add	r3, r7
 8008728:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800872c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800872e:	e005      	b.n	800873c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008730:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008732:	3301      	adds	r3, #1
 8008734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008738:	2b02      	cmp	r3, #2
 800873a:	d9e8      	bls.n	800870e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800873c:	4b13      	ldr	r3, [pc, #76]	@ (800878c <RCC_SetFlashLatency+0xf4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f023 0207 	bic.w	r2, r3, #7
 8008744:	4911      	ldr	r1, [pc, #68]	@ (800878c <RCC_SetFlashLatency+0xf4>)
 8008746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008748:	4313      	orrs	r3, r2
 800874a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800874c:	f7fb fee4 	bl	8004518 <HAL_GetTick>
 8008750:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008752:	e008      	b.n	8008766 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008754:	f7fb fee0 	bl	8004518 <HAL_GetTick>
 8008758:	4602      	mov	r2, r0
 800875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875c:	1ad3      	subs	r3, r2, r3
 800875e:	2b02      	cmp	r3, #2
 8008760:	d901      	bls.n	8008766 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008762:	2303      	movs	r3, #3
 8008764:	e007      	b.n	8008776 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008766:	4b09      	ldr	r3, [pc, #36]	@ (800878c <RCC_SetFlashLatency+0xf4>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008770:	429a      	cmp	r2, r3
 8008772:	d1ef      	bne.n	8008754 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	374c      	adds	r7, #76	@ 0x4c
 800877a:	46bd      	mov	sp, r7
 800877c:	bd90      	pop	{r4, r7, pc}
 800877e:	bf00      	nop
 8008780:	080171c4 	.word	0x080171c4
 8008784:	080171d4 	.word	0x080171d4
 8008788:	080171e0 	.word	0x080171e0
 800878c:	58004000 	.word	0x58004000

08008790 <LL_RCC_LSE_IsEnabled>:
{
 8008790:	b480      	push	{r7}
 8008792:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8008794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <LL_RCC_LSE_IsEnabled+0x18>
 80087a4:	2301      	movs	r3, #1
 80087a6:	e000      	b.n	80087aa <LL_RCC_LSE_IsEnabled+0x1a>
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <LL_RCC_LSE_IsReady>:
{
 80087b4:	b480      	push	{r7}
 80087b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80087b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087c0:	f003 0302 	and.w	r3, r3, #2
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d101      	bne.n	80087cc <LL_RCC_LSE_IsReady+0x18>
 80087c8:	2301      	movs	r3, #1
 80087ca:	e000      	b.n	80087ce <LL_RCC_LSE_IsReady+0x1a>
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <LL_RCC_SetRFWKPClockSource>:
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80087e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80087ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80087f8:	bf00      	nop
 80087fa:	370c      	adds	r7, #12
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr

08008804 <LL_RCC_SetSMPSClockSource>:
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800880c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008812:	f023 0203 	bic.w	r2, r3, #3
 8008816:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4313      	orrs	r3, r2
 800881e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <LL_RCC_SetSMPSPrescaler>:
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800883e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4313      	orrs	r3, r2
 8008846:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <LL_RCC_SetUSARTClockSource>:
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800885c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008860:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008864:	f023 0203 	bic.w	r2, r3, #3
 8008868:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4313      	orrs	r3, r2
 8008870:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008874:	bf00      	nop
 8008876:	370c      	adds	r7, #12
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <LL_RCC_SetLPUARTClockSource>:
{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800888c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008890:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008894:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <LL_RCC_SetI2CClockSource>:
{
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80088b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	091b      	lsrs	r3, r3, #4
 80088c0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80088c4:	43db      	mvns	r3, r3
 80088c6:	401a      	ands	r2, r3
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	011b      	lsls	r3, r3, #4
 80088cc:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80088d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80088da:	bf00      	nop
 80088dc:	370c      	adds	r7, #12
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr

080088e6 <LL_RCC_SetLPTIMClockSource>:
{
 80088e6:	b480      	push	{r7}
 80088e8:	b083      	sub	sp, #12
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80088ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088f2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	0c1b      	lsrs	r3, r3, #16
 80088fa:	041b      	lsls	r3, r3, #16
 80088fc:	43db      	mvns	r3, r3
 80088fe:	401a      	ands	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	041b      	lsls	r3, r3, #16
 8008904:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008908:	4313      	orrs	r3, r2
 800890a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800890e:	bf00      	nop
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <LL_RCC_SetSAIClockSource>:
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800892a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800892e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4313      	orrs	r3, r2
 8008936:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800893a:	bf00      	nop
 800893c:	370c      	adds	r7, #12
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr

08008946 <LL_RCC_SetRNGClockSource>:
{
 8008946:	b480      	push	{r7}
 8008948:	b083      	sub	sp, #12
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800894e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008956:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800895a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4313      	orrs	r3, r2
 8008962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <LL_RCC_SetCLK48ClockSource>:
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800897a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008982:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008986:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008992:	bf00      	nop
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <LL_RCC_SetUSBClockSource>:
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7ff ffe3 	bl	8008972 <LL_RCC_SetCLK48ClockSource>
}
 80089ac:	bf00      	nop
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <LL_RCC_SetADCClockSource>:
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80089bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80089c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80089d4:	bf00      	nop
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <LL_RCC_SetRTCClockSource>:
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80089e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <LL_RCC_GetRTCClockSource>:
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a18:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <LL_RCC_ForceBackupDomainReset>:
{
 8008a26:	b480      	push	{r7}
 8008a28:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008a2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a32:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a3a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008a3e:	bf00      	nop
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008a48:	b480      	push	{r7}
 8008a4a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008a4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a5c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008a60:	bf00      	nop
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <LL_RCC_PLLSAI1_Enable>:
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008a7c:	6013      	str	r3, [r2, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <LL_RCC_PLLSAI1_Disable>:
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008a8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a96:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008a9a:	6013      	str	r3, [r2, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr

08008aa6 <LL_RCC_PLLSAI1_IsReady>:
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008aaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008ab4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ab8:	d101      	bne.n	8008abe <LL_RCC_PLLSAI1_IsReady+0x18>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr

08008aca <LL_APB1_GRP1_ForceReset>:
{
 8008aca:	b480      	push	{r7}
 8008acc:	b083      	sub	sp, #12
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8008ad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ad6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8008ae2:	bf00      	nop
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <LL_APB1_GRP1_ReleaseReset>:
{
 8008aee:	b480      	push	{r7}
 8008af0:	b083      	sub	sp, #12
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8008af6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008afa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	43db      	mvns	r3, r3
 8008b00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b04:	4013      	ands	r3, r2
 8008b06:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b088      	sub	sp, #32
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008b20:	2300      	movs	r3, #0
 8008b22:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d034      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b34:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008b38:	d021      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008b3a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008b3e:	d81b      	bhi.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b44:	d01d      	beq.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008b46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008b4a:	d815      	bhi.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008b50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008b54:	d110      	bne.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008b56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b64:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008b66:	e00d      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3304      	adds	r3, #4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f000 f981 	bl	8008e74 <RCCEx_PLLSAI1_ConfigNP>
 8008b72:	4603      	mov	r3, r0
 8008b74:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008b76:	e005      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	77fb      	strb	r3, [r7, #31]
        break;
 8008b7c:	e002      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008b7e:	bf00      	nop
 8008b80:	e000      	b.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008b82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b84:	7ffb      	ldrb	r3, [r7, #31]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d105      	bne.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fec3 	bl	800891a <LL_RCC_SetSAIClockSource>
 8008b94:	e001      	b.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b96:	7ffb      	ldrb	r3, [r7, #31]
 8008b98:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d046      	beq.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008ba6:	f7ff ff31 	bl	8008a0c <LL_RCC_GetRTCClockSource>
 8008baa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bb0:	69ba      	ldr	r2, [r7, #24]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d03c      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008bb6:	f7fe fc77 	bl	80074a8 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d105      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f7ff ff0b 	bl	80089e0 <LL_RCC_SetRTCClockSource>
 8008bca:	e02e      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008bcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bd4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008bd6:	f7ff ff26 	bl	8008a26 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008bda:	f7ff ff35 	bl	8008a48 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008bec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008bf6:	f7ff fdcb 	bl	8008790 <LL_RCC_LSE_IsEnabled>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d114      	bne.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c00:	f7fb fc8a 	bl	8004518 <HAL_GetTick>
 8008c04:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008c06:	e00b      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c08:	f7fb fc86 	bl	8004518 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d902      	bls.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008c1a:	2303      	movs	r3, #3
 8008c1c:	77fb      	strb	r3, [r7, #31]
              break;
 8008c1e:	e004      	b.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008c20:	f7ff fdc8 	bl	80087b4 <LL_RCC_LSE_IsReady>
 8008c24:	4603      	mov	r3, r0
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d1ee      	bne.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008c2a:	7ffb      	ldrb	r3, [r7, #31]
 8008c2c:	77bb      	strb	r3, [r7, #30]
 8008c2e:	e001      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c30:	7ffb      	ldrb	r3, [r7, #31]
 8008c32:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	699b      	ldr	r3, [r3, #24]
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7ff fe05 	bl	8008854 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0302 	and.w	r3, r3, #2
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d004      	beq.n	8008c60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	69db      	ldr	r3, [r3, #28]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7ff fe10 	bl	8008880 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 0310 	and.w	r3, r3, #16
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d004      	beq.n	8008c76 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7ff fe38 	bl	80088e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f003 0320 	and.w	r3, r3, #32
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d004      	beq.n	8008c8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7ff fe2d 	bl	80088e6 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6a1b      	ldr	r3, [r3, #32]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f7ff fe05 	bl	80088ac <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0308 	and.w	r3, r3, #8
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7ff fdfa 	bl	80088ac <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d022      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff fe68 	bl	800899e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cd2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008cd6:	d107      	bne.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008cd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ce6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008cf0:	d10b      	bne.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 f917 	bl	8008f2a <RCCEx_PLLSAI1_ConfigNQ>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008d00:	7ffb      	ldrb	r3, [r7, #31]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d001      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008d06:	7ffb      	ldrb	r3, [r7, #31]
 8008d08:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d02b      	beq.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d1e:	d008      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d28:	d003      	beq.n	8008d32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d105      	bne.n	8008d3e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7ff fe05 	bl	8008946 <LL_RCC_SetRNGClockSource>
 8008d3c:	e00a      	b.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	2000      	movs	r0, #0
 8008d4a:	f7ff fdfc 	bl	8008946 <LL_RCC_SetRNGClockSource>
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f7ff fe0f 	bl	8008972 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d58:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008d5c:	d107      	bne.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008d5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008d6c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d022      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f7ff fe18 	bl	80089b4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008d8c:	d107      	bne.n	8008d9e <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d9c:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008da2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008da6:	d10b      	bne.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	3304      	adds	r3, #4
 8008dac:	4618      	mov	r0, r3
 8008dae:	f000 f917 	bl	8008fe0 <RCCEx_PLLSAI1_ConfigNR>
 8008db2:	4603      	mov	r3, r0
 8008db4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008db6:	7ffb      	ldrb	r3, [r7, #31]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008dbc:	7ffb      	ldrb	r3, [r7, #31]
 8008dbe:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d004      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fd01 	bl	80087d8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d009      	beq.n	8008df6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fd20 	bl	800882c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7ff fd07 	bl	8008804 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008df6:	7fbb      	ldrb	r3, [r7, #30]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3720      	adds	r7, #32
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8008e08:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8008e0c:	f7ff fe5d 	bl	8008aca <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 8008e10:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8008e14:	f7ff fe6b 	bl	8008aee <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	431a      	orrs	r2, r3
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	68fa      	ldr	r2, [r7, #12]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	041b      	lsls	r3, r3, #16
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	4313      	orrs	r3, r2
 8008e3e:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8008e40:	4a0b      	ldr	r2, [pc, #44]	@ (8008e70 <HAL_RCCEx_CRSConfig+0x70>)
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8008e46:	4b0a      	ldr	r3, [pc, #40]	@ (8008e70 <HAL_RCCEx_CRSConfig+0x70>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	021b      	lsls	r3, r3, #8
 8008e54:	4906      	ldr	r1, [pc, #24]	@ (8008e70 <HAL_RCCEx_CRSConfig+0x70>)
 8008e56:	4313      	orrs	r3, r2
 8008e58:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8008e5a:	4b05      	ldr	r3, [pc, #20]	@ (8008e70 <HAL_RCCEx_CRSConfig+0x70>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a04      	ldr	r2, [pc, #16]	@ (8008e70 <HAL_RCCEx_CRSConfig+0x70>)
 8008e60:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008e64:	6013      	str	r3, [r2, #0]
}
 8008e66:	bf00      	nop
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	40006000 	.word	0x40006000

08008e74 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008e80:	f7ff fe02 	bl	8008a88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e84:	f7fb fb48 	bl	8004518 <HAL_GetTick>
 8008e88:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e8a:	e009      	b.n	8008ea0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e8c:	f7fb fb44 	bl	8004518 <HAL_GetTick>
 8008e90:	4602      	mov	r2, r0
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	1ad3      	subs	r3, r2, r3
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d902      	bls.n	8008ea0 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	73fb      	strb	r3, [r7, #15]
      break;
 8008e9e:	e004      	b.n	8008eaa <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ea0:	f7ff fe01 	bl	8008aa6 <LL_RCC_PLLSAI1_IsReady>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1f0      	bne.n	8008e8c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d137      	bne.n	8008f20 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	021b      	lsls	r3, r3, #8
 8008ec0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ecc:	691b      	ldr	r3, [r3, #16]
 8008ece:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008eda:	4313      	orrs	r3, r2
 8008edc:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008ede:	f7ff fdc4 	bl	8008a6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ee2:	f7fb fb19 	bl	8004518 <HAL_GetTick>
 8008ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ee8:	e009      	b.n	8008efe <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008eea:	f7fb fb15 	bl	8004518 <HAL_GetTick>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	1ad3      	subs	r3, r2, r3
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	d902      	bls.n	8008efe <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008ef8:	2303      	movs	r3, #3
 8008efa:	73fb      	strb	r3, [r7, #15]
        break;
 8008efc:	e004      	b.n	8008f08 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008efe:	f7ff fdd2 	bl	8008aa6 <LL_RCC_PLLSAI1_IsReady>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d1f0      	bne.n	8008eea <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008f08:	7bfb      	ldrb	r3, [r7, #15]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d108      	bne.n	8008f20 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008f0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008f36:	f7ff fda7 	bl	8008a88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f3a:	f7fb faed 	bl	8004518 <HAL_GetTick>
 8008f3e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008f40:	e009      	b.n	8008f56 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f42:	f7fb fae9 	bl	8004518 <HAL_GetTick>
 8008f46:	4602      	mov	r2, r0
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	1ad3      	subs	r3, r2, r3
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d902      	bls.n	8008f56 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	73fb      	strb	r3, [r7, #15]
      break;
 8008f54:	e004      	b.n	8008f60 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008f56:	f7ff fda6 	bl	8008aa6 <LL_RCC_PLLSAI1_IsReady>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1f0      	bne.n	8008f42 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008f60:	7bfb      	ldrb	r3, [r7, #15]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d137      	bne.n	8008fd6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008f66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008f7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008f82:	691b      	ldr	r3, [r3, #16]
 8008f84:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008f90:	4313      	orrs	r3, r2
 8008f92:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008f94:	f7ff fd69 	bl	8008a6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f98:	f7fb fabe 	bl	8004518 <HAL_GetTick>
 8008f9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008f9e:	e009      	b.n	8008fb4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008fa0:	f7fb faba 	bl	8004518 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d902      	bls.n	8008fb4 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	73fb      	strb	r3, [r7, #15]
        break;
 8008fb2:	e004      	b.n	8008fbe <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008fb4:	f7ff fd77 	bl	8008aa6 <LL_RCC_PLLSAI1_IsReady>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d1f0      	bne.n	8008fa0 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d108      	bne.n	8008fd6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008fc8:	691a      	ldr	r2, [r3, #16]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008fec:	f7ff fd4c 	bl	8008a88 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ff0:	f7fb fa92 	bl	8004518 <HAL_GetTick>
 8008ff4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008ff6:	e009      	b.n	800900c <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ff8:	f7fb fa8e 	bl	8004518 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	2b02      	cmp	r3, #2
 8009004:	d902      	bls.n	800900c <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	73fb      	strb	r3, [r7, #15]
      break;
 800900a:	e004      	b.n	8009016 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800900c:	f7ff fd4b 	bl	8008aa6 <LL_RCC_PLLSAI1_IsReady>
 8009010:	4603      	mov	r3, r0
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1f0      	bne.n	8008ff8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009016:	7bfb      	ldrb	r3, [r7, #15]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d137      	bne.n	800908c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800901c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009030:	4313      	orrs	r3, r2
 8009032:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009034:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009038:	691b      	ldr	r3, [r3, #16]
 800903a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009046:	4313      	orrs	r3, r2
 8009048:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800904a:	f7ff fd0e 	bl	8008a6a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800904e:	f7fb fa63 	bl	8004518 <HAL_GetTick>
 8009052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009054:	e009      	b.n	800906a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009056:	f7fb fa5f 	bl	8004518 <HAL_GetTick>
 800905a:	4602      	mov	r2, r0
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	2b02      	cmp	r3, #2
 8009062:	d902      	bls.n	800906a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	73fb      	strb	r3, [r7, #15]
        break;
 8009068:	e004      	b.n	8009074 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800906a:	f7ff fd1c 	bl	8008aa6 <LL_RCC_PLLSAI1_IsReady>
 800906e:	4603      	mov	r3, r0
 8009070:	2b01      	cmp	r3, #1
 8009072:	d1f0      	bne.n	8009056 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d108      	bne.n	800908c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800907a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009088:	4313      	orrs	r3, r2
 800908a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800908c:	7bfb      	ldrb	r3, [r7, #15]
}
 800908e:	4618      	mov	r0, r3
 8009090:	3710      	adds	r7, #16
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}

08009096 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b082      	sub	sp, #8
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d101      	bne.n	80090a8 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80090a4:	2301      	movs	r3, #1
 80090a6:	e027      	b.n	80090f8 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7a5b      	ldrb	r3, [r3, #9]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d105      	bne.n	80090be <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7fa ff39 	bl	8003f30 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2202      	movs	r2, #2
 80090c2:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f023 0120 	bic.w	r1, r3, #32
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0204 	orr.w	r2, r2, #4
 80090e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2200      	movs	r2, #0
 80090f4:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009108:	2300      	movs	r3, #0
 800910a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d005      	beq.n	800912a <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2210      	movs	r2, #16
 8009122:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009124:	2301      	movs	r3, #1
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	e009      	b.n	800913e <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009130:	2b00      	cmp	r3, #0
 8009132:	d004      	beq.n	800913e <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2208      	movs	r2, #8
 8009138:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 800913a:	2301      	movs	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d10b      	bne.n	800915c <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2204      	movs	r2, #4
 8009148:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f837 	bl	80091be <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009158:	605a      	str	r2, [r3, #4]

    return;
 800915a:	e022      	b.n	80091a2 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01d      	beq.n	80091a2 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0208 	bic.w	r2, r2, #8
 8009174:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	7a5b      	ldrb	r3, [r3, #9]
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b04      	cmp	r3, #4
 8009188:	d00b      	beq.n	80091a2 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2201      	movs	r2, #1
 800918e:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 f803 	bl	80091a8 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80091c6:	bf00      	nop
 80091c8:	370c      	adds	r7, #12
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e09f      	b.n	8009326 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7fa feca 	bl	8003f94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2202      	movs	r2, #2
 8009204:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009208:	4b49      	ldr	r3, [pc, #292]	@ (8009330 <HAL_RTC_Init+0x15c>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	f003 0310 	and.w	r3, r3, #16
 8009210:	2b10      	cmp	r3, #16
 8009212:	d07e      	beq.n	8009312 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	22ca      	movs	r2, #202	@ 0xca
 800921a:	625a      	str	r2, [r3, #36]	@ 0x24
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2253      	movs	r2, #83	@ 0x53
 8009222:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f000 f8ab 	bl	8009380 <RTC_EnterInitMode>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00a      	beq.n	8009246 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	22ff      	movs	r2, #255	@ 0xff
 8009236:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2204      	movs	r2, #4
 800923c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	73fb      	strb	r3, [r7, #15]
 8009244:	e067      	b.n	8009316 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6812      	ldr	r2, [r2, #0]
 8009250:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009254:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009258:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6899      	ldr	r1, [r3, #8]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	685a      	ldr	r2, [r3, #4]
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	691b      	ldr	r3, [r3, #16]
 8009268:	431a      	orrs	r2, r3
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699b      	ldr	r3, [r3, #24]
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	430a      	orrs	r2, r1
 8009276:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	687a      	ldr	r2, [r7, #4]
 800927e:	68d2      	ldr	r2, [r2, #12]
 8009280:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	6919      	ldr	r1, [r3, #16]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	689b      	ldr	r3, [r3, #8]
 800928c:	041a      	lsls	r2, r3, #16
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	68da      	ldr	r2, [r3, #12]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80092a4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f022 0203 	bic.w	r2, r2, #3
 80092b4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	69da      	ldr	r2, [r3, #28]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	431a      	orrs	r2, r3
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	430a      	orrs	r2, r1
 80092cc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f003 0320 	and.w	r3, r3, #32
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d113      	bne.n	8009304 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f829 	bl	8009334 <HAL_RTC_WaitForSynchro>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00d      	beq.n	8009304 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	22ff      	movs	r2, #255	@ 0xff
 80092ee:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2204      	movs	r2, #4
 80092f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e010      	b.n	8009326 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	22ff      	movs	r2, #255	@ 0xff
 800930a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
 8009310:	e001      	b.n	8009316 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009316:	7bfb      	ldrb	r3, [r7, #15]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d103      	bne.n	8009324 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009324:	7bfb      	ldrb	r3, [r7, #15]
}
 8009326:	4618      	mov	r0, r3
 8009328:	3710      	adds	r7, #16
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	40002800 	.word	0x40002800

08009334 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68da      	ldr	r2, [r3, #12]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800934a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800934c:	f7fb f8e4 	bl	8004518 <HAL_GetTick>
 8009350:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009352:	e009      	b.n	8009368 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009354:	f7fb f8e0 	bl	8004518 <HAL_GetTick>
 8009358:	4602      	mov	r2, r0
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009362:	d901      	bls.n	8009368 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e007      	b.n	8009378 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f003 0320 	and.w	r3, r3, #32
 8009372:	2b00      	cmp	r3, #0
 8009374:	d0ee      	beq.n	8009354 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009392:	2b00      	cmp	r3, #0
 8009394:	d119      	bne.n	80093ca <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f04f 32ff 	mov.w	r2, #4294967295
 800939e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80093a0:	f7fb f8ba 	bl	8004518 <HAL_GetTick>
 80093a4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80093a6:	e009      	b.n	80093bc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80093a8:	f7fb f8b6 	bl	8004518 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80093b6:	d901      	bls.n	80093bc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80093b8:	2303      	movs	r3, #3
 80093ba:	e007      	b.n	80093cc <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0ee      	beq.n	80093a8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3710      	adds	r7, #16
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	60f8      	str	r0, [r7, #12]
 80093dc:	60b9      	str	r1, [r7, #8]
 80093de:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	d101      	bne.n	80093ee <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80093ea:	2302      	movs	r3, #2
 80093ec:	e0a8      	b.n	8009540 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2202      	movs	r2, #2
 80093fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	22ca      	movs	r2, #202	@ 0xca
 8009404:	625a      	str	r2, [r3, #36]	@ 0x24
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2253      	movs	r2, #83	@ 0x53
 800940c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009418:	2b00      	cmp	r3, #0
 800941a:	d020      	beq.n	800945e <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800941c:	f7fb f87c 	bl	8004518 <HAL_GetTick>
 8009420:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009422:	e015      	b.n	8009450 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009424:	f7fb f878 	bl	8004518 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009432:	d90d      	bls.n	8009450 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	22ff      	movs	r2, #255	@ 0xff
 800943a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2203      	movs	r2, #3
 8009440:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2200      	movs	r2, #0
 8009448:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800944c:	2303      	movs	r3, #3
 800944e:	e077      	b.n	8009540 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f003 0304 	and.w	r3, r3, #4
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e2      	bne.n	8009424 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800946c:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	b2da      	uxtb	r2, r3
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800947e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009480:	f7fb f84a 	bl	8004518 <HAL_GetTick>
 8009484:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009486:	e015      	b.n	80094b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009488:	f7fb f846 	bl	8004518 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009496:	d90d      	bls.n	80094b4 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	22ff      	movs	r2, #255	@ 0xff
 800949e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2203      	movs	r2, #3
 80094a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e045      	b.n	8009540 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d0e2      	beq.n	8009488 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 0207 	bic.w	r2, r2, #7
 80094d8:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6899      	ldr	r1, [r3, #8]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80094ea:	4b17      	ldr	r3, [pc, #92]	@ (8009548 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80094ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80094f0:	4a15      	ldr	r2, [pc, #84]	@ (8009548 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80094f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094f6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80094fa:	4b13      	ldr	r3, [pc, #76]	@ (8009548 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a12      	ldr	r2, [pc, #72]	@ (8009548 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009500:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009504:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689a      	ldr	r2, [r3, #8]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009514:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009524:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	22ff      	movs	r2, #255	@ 0xff
 800952c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2201      	movs	r2, #1
 8009532:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800953e:	2300      	movs	r3, #0
}
 8009540:	4618      	mov	r0, r3
 8009542:	3718      	adds	r7, #24
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	58000800 	.word	0x58000800

0800954c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b084      	sub	sp, #16
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e095      	b.n	800968a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009562:	2b00      	cmp	r3, #0
 8009564:	d108      	bne.n	8009578 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800956e:	d009      	beq.n	8009584 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	61da      	str	r2, [r3, #28]
 8009576:	e005      	b.n	8009584 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2200      	movs	r2, #0
 800957c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009590:	b2db      	uxtb	r3, r3
 8009592:	2b00      	cmp	r3, #0
 8009594:	d106      	bne.n	80095a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2200      	movs	r2, #0
 800959a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f7fa fd2c 	bl	8003ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2202      	movs	r2, #2
 80095a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095ba:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095c4:	d902      	bls.n	80095cc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095c6:	2300      	movs	r3, #0
 80095c8:	60fb      	str	r3, [r7, #12]
 80095ca:	e002      	b.n	80095d2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80095d0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80095da:	d007      	beq.n	80095ec <HAL_SPI_Init+0xa0>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80095e4:	d002      	beq.n	80095ec <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2200      	movs	r2, #0
 80095ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80095fc:	431a      	orrs	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	691b      	ldr	r3, [r3, #16]
 8009602:	f003 0302 	and.w	r3, r3, #2
 8009606:	431a      	orrs	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	f003 0301 	and.w	r3, r3, #1
 8009610:	431a      	orrs	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800961a:	431a      	orrs	r2, r3
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	69db      	ldr	r3, [r3, #28]
 8009620:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800962e:	ea42 0103 	orr.w	r1, r2, r3
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009636:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	430a      	orrs	r2, r1
 8009640:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	699b      	ldr	r3, [r3, #24]
 8009646:	0c1b      	lsrs	r3, r3, #16
 8009648:	f003 0204 	and.w	r2, r3, #4
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009650:	f003 0310 	and.w	r3, r3, #16
 8009654:	431a      	orrs	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800965a:	f003 0308 	and.w	r3, r3, #8
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009668:	ea42 0103 	orr.w	r1, r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009692:	b580      	push	{r7, lr}
 8009694:	b088      	sub	sp, #32
 8009696:	af00      	add	r7, sp, #0
 8009698:	60f8      	str	r0, [r7, #12]
 800969a:	60b9      	str	r1, [r7, #8]
 800969c:	603b      	str	r3, [r7, #0]
 800969e:	4613      	mov	r3, r2
 80096a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096a2:	2300      	movs	r3, #0
 80096a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80096ac:	2b01      	cmp	r3, #1
 80096ae:	d101      	bne.n	80096b4 <HAL_SPI_Transmit+0x22>
 80096b0:	2302      	movs	r3, #2
 80096b2:	e15f      	b.n	8009974 <HAL_SPI_Transmit+0x2e2>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80096bc:	f7fa ff2c 	bl	8004518 <HAL_GetTick>
 80096c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80096c2:	88fb      	ldrh	r3, [r7, #6]
 80096c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d002      	beq.n	80096d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80096d2:	2302      	movs	r3, #2
 80096d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096d6:	e148      	b.n	800996a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d002      	beq.n	80096e4 <HAL_SPI_Transmit+0x52>
 80096de:	88fb      	ldrh	r3, [r7, #6]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d102      	bne.n	80096ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096e8:	e13f      	b.n	800996a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2203      	movs	r2, #3
 80096ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	88fa      	ldrh	r2, [r7, #6]
 8009702:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	88fa      	ldrh	r2, [r7, #6]
 8009708:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2200      	movs	r2, #0
 800970e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2200      	movs	r2, #0
 8009714:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2200      	movs	r2, #0
 8009724:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	2200      	movs	r2, #0
 800972a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009734:	d10f      	bne.n	8009756 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009744:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009754:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009760:	2b40      	cmp	r3, #64	@ 0x40
 8009762:	d007      	beq.n	8009774 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009772:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800977c:	d94f      	bls.n	800981e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d002      	beq.n	800978c <HAL_SPI_Transmit+0xfa>
 8009786:	8afb      	ldrh	r3, [r7, #22]
 8009788:	2b01      	cmp	r3, #1
 800978a:	d142      	bne.n	8009812 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009790:	881a      	ldrh	r2, [r3, #0]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800979c:	1c9a      	adds	r2, r3, #2
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	3b01      	subs	r3, #1
 80097aa:	b29a      	uxth	r2, r3
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80097b0:	e02f      	b.n	8009812 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f003 0302 	and.w	r3, r3, #2
 80097bc:	2b02      	cmp	r3, #2
 80097be:	d112      	bne.n	80097e6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c4:	881a      	ldrh	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097d0:	1c9a      	adds	r2, r3, #2
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097da:	b29b      	uxth	r3, r3
 80097dc:	3b01      	subs	r3, #1
 80097de:	b29a      	uxth	r2, r3
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80097e4:	e015      	b.n	8009812 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097e6:	f7fa fe97 	bl	8004518 <HAL_GetTick>
 80097ea:	4602      	mov	r2, r0
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d803      	bhi.n	80097fe <HAL_SPI_Transmit+0x16c>
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097fc:	d102      	bne.n	8009804 <HAL_SPI_Transmit+0x172>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d106      	bne.n	8009812 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8009804:	2303      	movs	r3, #3
 8009806:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009810:	e0ab      	b.n	800996a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009816:	b29b      	uxth	r3, r3
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1ca      	bne.n	80097b2 <HAL_SPI_Transmit+0x120>
 800981c:	e080      	b.n	8009920 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d002      	beq.n	800982c <HAL_SPI_Transmit+0x19a>
 8009826:	8afb      	ldrh	r3, [r7, #22]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d174      	bne.n	8009916 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009830:	b29b      	uxth	r3, r3
 8009832:	2b01      	cmp	r3, #1
 8009834:	d912      	bls.n	800985c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983a:	881a      	ldrh	r2, [r3, #0]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009846:	1c9a      	adds	r2, r3, #2
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b02      	subs	r3, #2
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800985a:	e05c      	b.n	8009916 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	330c      	adds	r3, #12
 8009866:	7812      	ldrb	r2, [r2, #0]
 8009868:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009878:	b29b      	uxth	r3, r3
 800987a:	3b01      	subs	r3, #1
 800987c:	b29a      	uxth	r2, r3
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8009882:	e048      	b.n	8009916 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b02      	cmp	r3, #2
 8009890:	d12b      	bne.n	80098ea <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b01      	cmp	r3, #1
 800989a:	d912      	bls.n	80098c2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	881a      	ldrh	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ac:	1c9a      	adds	r2, r3, #2
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	3b02      	subs	r3, #2
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098c0:	e029      	b.n	8009916 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	330c      	adds	r3, #12
 80098cc:	7812      	ldrb	r2, [r2, #0]
 80098ce:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d4:	1c5a      	adds	r2, r3, #1
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80098de:	b29b      	uxth	r3, r3
 80098e0:	3b01      	subs	r3, #1
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80098e8:	e015      	b.n	8009916 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80098ea:	f7fa fe15 	bl	8004518 <HAL_GetTick>
 80098ee:	4602      	mov	r2, r0
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d803      	bhi.n	8009902 <HAL_SPI_Transmit+0x270>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009900:	d102      	bne.n	8009908 <HAL_SPI_Transmit+0x276>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8009908:	2303      	movs	r3, #3
 800990a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8009914:	e029      	b.n	800996a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800991a:	b29b      	uxth	r3, r3
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1b1      	bne.n	8009884 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009920:	69ba      	ldr	r2, [r7, #24]
 8009922:	6839      	ldr	r1, [r7, #0]
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 fb69 	bl	8009ffc <SPI_EndRxTxTransaction>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d002      	beq.n	8009936 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	2220      	movs	r2, #32
 8009934:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800993e:	2300      	movs	r3, #0
 8009940:	613b      	str	r3, [r7, #16]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	613b      	str	r3, [r7, #16]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	613b      	str	r3, [r7, #16]
 8009952:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800995c:	2301      	movs	r3, #1
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e003      	b.n	800996a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	2200      	movs	r2, #0
 800996e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009972:	7ffb      	ldrb	r3, [r7, #31]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3720      	adds	r7, #32
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b08a      	sub	sp, #40	@ 0x28
 8009980:	af00      	add	r7, sp, #0
 8009982:	60f8      	str	r0, [r7, #12]
 8009984:	60b9      	str	r1, [r7, #8]
 8009986:	607a      	str	r2, [r7, #4]
 8009988:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800998a:	2301      	movs	r3, #1
 800998c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <HAL_SPI_TransmitReceive+0x26>
 800999e:	2302      	movs	r3, #2
 80099a0:	e20a      	b.n	8009db8 <HAL_SPI_TransmitReceive+0x43c>
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80099aa:	f7fa fdb5 	bl	8004518 <HAL_GetTick>
 80099ae:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80099b6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80099be:	887b      	ldrh	r3, [r7, #2]
 80099c0:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80099c2:	887b      	ldrh	r3, [r7, #2]
 80099c4:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80099c6:	7efb      	ldrb	r3, [r7, #27]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d00e      	beq.n	80099ea <HAL_SPI_TransmitReceive+0x6e>
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099d2:	d106      	bne.n	80099e2 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d102      	bne.n	80099e2 <HAL_SPI_TransmitReceive+0x66>
 80099dc:	7efb      	ldrb	r3, [r7, #27]
 80099de:	2b04      	cmp	r3, #4
 80099e0:	d003      	beq.n	80099ea <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80099e2:	2302      	movs	r3, #2
 80099e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80099e8:	e1e0      	b.n	8009dac <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d005      	beq.n	80099fc <HAL_SPI_TransmitReceive+0x80>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d002      	beq.n	80099fc <HAL_SPI_TransmitReceive+0x80>
 80099f6:	887b      	ldrh	r3, [r7, #2]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d103      	bne.n	8009a04 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009a02:	e1d3      	b.n	8009dac <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b04      	cmp	r3, #4
 8009a0e:	d003      	beq.n	8009a18 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2205      	movs	r2, #5
 8009a14:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	887a      	ldrh	r2, [r7, #2]
 8009a28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	887a      	ldrh	r2, [r7, #2]
 8009a30:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	68ba      	ldr	r2, [r7, #8]
 8009a38:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	887a      	ldrh	r2, [r7, #2]
 8009a3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	887a      	ldrh	r2, [r7, #2]
 8009a44:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a5a:	d802      	bhi.n	8009a62 <HAL_SPI_TransmitReceive+0xe6>
 8009a5c:	8a3b      	ldrh	r3, [r7, #16]
 8009a5e:	2b01      	cmp	r3, #1
 8009a60:	d908      	bls.n	8009a74 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009a70:	605a      	str	r2, [r3, #4]
 8009a72:	e007      	b.n	8009a84 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	685a      	ldr	r2, [r3, #4]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009a82:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a8e:	2b40      	cmp	r3, #64	@ 0x40
 8009a90:	d007      	beq.n	8009aa2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009aa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	68db      	ldr	r3, [r3, #12]
 8009aa6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009aaa:	f240 8081 	bls.w	8009bb0 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d002      	beq.n	8009abc <HAL_SPI_TransmitReceive+0x140>
 8009ab6:	8a7b      	ldrh	r3, [r7, #18]
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d16d      	bne.n	8009b98 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ac0:	881a      	ldrh	r2, [r3, #0]
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009acc:	1c9a      	adds	r2, r3, #2
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	3b01      	subs	r3, #1
 8009ada:	b29a      	uxth	r2, r3
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ae0:	e05a      	b.n	8009b98 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d11b      	bne.n	8009b28 <HAL_SPI_TransmitReceive+0x1ac>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d016      	beq.n	8009b28 <HAL_SPI_TransmitReceive+0x1ac>
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d113      	bne.n	8009b28 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b04:	881a      	ldrh	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b10:	1c9a      	adds	r2, r3, #2
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	b29a      	uxth	r2, r3
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b24:	2300      	movs	r3, #0
 8009b26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 0301 	and.w	r3, r3, #1
 8009b32:	2b01      	cmp	r3, #1
 8009b34:	d11c      	bne.n	8009b70 <HAL_SPI_TransmitReceive+0x1f4>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b3c:	b29b      	uxth	r3, r3
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d016      	beq.n	8009b70 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b4c:	b292      	uxth	r2, r2
 8009b4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b54:	1c9a      	adds	r2, r3, #2
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	3b01      	subs	r3, #1
 8009b64:	b29a      	uxth	r2, r3
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009b70:	f7fa fcd2 	bl	8004518 <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b7c:	429a      	cmp	r2, r3
 8009b7e:	d80b      	bhi.n	8009b98 <HAL_SPI_TransmitReceive+0x21c>
 8009b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b86:	d007      	beq.n	8009b98 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009b88:	2303      	movs	r3, #3
 8009b8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009b96:	e109      	b.n	8009dac <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d19f      	bne.n	8009ae2 <HAL_SPI_TransmitReceive+0x166>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d199      	bne.n	8009ae2 <HAL_SPI_TransmitReceive+0x166>
 8009bae:	e0e3      	b.n	8009d78 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d003      	beq.n	8009bc0 <HAL_SPI_TransmitReceive+0x244>
 8009bb8:	8a7b      	ldrh	r3, [r7, #18]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	f040 80cf 	bne.w	8009d5e <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d912      	bls.n	8009bf0 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bce:	881a      	ldrh	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bda:	1c9a      	adds	r2, r3, #2
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	3b02      	subs	r3, #2
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009bee:	e0b6      	b.n	8009d5e <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	7812      	ldrb	r2, [r2, #0]
 8009bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c02:	1c5a      	adds	r2, r3, #1
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c16:	e0a2      	b.n	8009d5e <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 0302 	and.w	r3, r3, #2
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d134      	bne.n	8009c90 <HAL_SPI_TransmitReceive+0x314>
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d02f      	beq.n	8009c90 <HAL_SPI_TransmitReceive+0x314>
 8009c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d12c      	bne.n	8009c90 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d912      	bls.n	8009c66 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c44:	881a      	ldrh	r2, [r3, #0]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c50:	1c9a      	adds	r2, r3, #2
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	3b02      	subs	r3, #2
 8009c5e:	b29a      	uxth	r2, r3
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009c64:	e012      	b.n	8009c8c <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	330c      	adds	r3, #12
 8009c70:	7812      	ldrb	r2, [r2, #0]
 8009c72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	f003 0301 	and.w	r3, r3, #1
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d148      	bne.n	8009d30 <HAL_SPI_TransmitReceive+0x3b4>
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d042      	beq.n	8009d30 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d923      	bls.n	8009cfe <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68da      	ldr	r2, [r3, #12]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc0:	b292      	uxth	r2, r2
 8009cc2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cc8:	1c9a      	adds	r2, r3, #2
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	3b02      	subs	r3, #2
 8009cd8:	b29a      	uxth	r2, r3
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d81f      	bhi.n	8009d2c <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cfa:	605a      	str	r2, [r3, #4]
 8009cfc:	e016      	b.n	8009d2c <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f103 020c 	add.w	r2, r3, #12
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0a:	7812      	ldrb	r2, [r2, #0]
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	3b01      	subs	r3, #1
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d30:	f7fa fbf2 	bl	8004518 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d803      	bhi.n	8009d48 <HAL_SPI_TransmitReceive+0x3cc>
 8009d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d46:	d102      	bne.n	8009d4e <HAL_SPI_TransmitReceive+0x3d2>
 8009d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d107      	bne.n	8009d5e <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009d5c:	e026      	b.n	8009dac <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f47f af57 	bne.w	8009c18 <HAL_SPI_TransmitReceive+0x29c>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d70:	b29b      	uxth	r3, r3
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f47f af50 	bne.w	8009c18 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d78:	69fa      	ldr	r2, [r7, #28]
 8009d7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 f93d 	bl	8009ffc <SPI_EndRxTxTransaction>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2220      	movs	r2, #32
 8009d92:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d003      	beq.n	8009da4 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009da2:	e003      	b.n	8009dac <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009db4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3728      	adds	r7, #40	@ 0x28
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	603b      	str	r3, [r7, #0]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009dd0:	f7fa fba2 	bl	8004518 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd8:	1a9b      	subs	r3, r3, r2
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	4413      	add	r3, r2
 8009dde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009de0:	f7fa fb9a 	bl	8004518 <HAL_GetTick>
 8009de4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009de6:	4b39      	ldr	r3, [pc, #228]	@ (8009ecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	015b      	lsls	r3, r3, #5
 8009dec:	0d1b      	lsrs	r3, r3, #20
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	fb02 f303 	mul.w	r3, r2, r3
 8009df4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009df6:	e054      	b.n	8009ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dfe:	d050      	beq.n	8009ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009e00:	f7fa fb8a 	bl	8004518 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	69fa      	ldr	r2, [r7, #28]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d902      	bls.n	8009e16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d13d      	bne.n	8009e92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009e24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009e2e:	d111      	bne.n	8009e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009e38:	d004      	beq.n	8009e44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e42:	d107      	bne.n	8009e54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009e5c:	d10f      	bne.n	8009e7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	681a      	ldr	r2, [r3, #0]
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009e7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	2201      	movs	r2, #1
 8009e82:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	e017      	b.n	8009ec2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d101      	bne.n	8009e9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4013      	ands	r3, r2
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	bf0c      	ite	eq
 8009eb2:	2301      	moveq	r3, #1
 8009eb4:	2300      	movne	r3, #0
 8009eb6:	b2db      	uxtb	r3, r3
 8009eb8:	461a      	mov	r2, r3
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	429a      	cmp	r2, r3
 8009ebe:	d19b      	bne.n	8009df8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3720      	adds	r7, #32
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	2000000c 	.word	0x2000000c

08009ed0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08a      	sub	sp, #40	@ 0x28
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009ee2:	f7fa fb19 	bl	8004518 <HAL_GetTick>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eea:	1a9b      	subs	r3, r3, r2
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	4413      	add	r3, r2
 8009ef0:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009ef2:	f7fa fb11 	bl	8004518 <HAL_GetTick>
 8009ef6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	330c      	adds	r3, #12
 8009efe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009f00:	4b3d      	ldr	r3, [pc, #244]	@ (8009ff8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	4613      	mov	r3, r2
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	00da      	lsls	r2, r3, #3
 8009f0c:	1ad3      	subs	r3, r2, r3
 8009f0e:	0d1b      	lsrs	r3, r3, #20
 8009f10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f12:	fb02 f303 	mul.w	r3, r2, r3
 8009f16:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009f18:	e060      	b.n	8009fdc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f20:	d107      	bne.n	8009f32 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d104      	bne.n	8009f32 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f38:	d050      	beq.n	8009fdc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009f3a:	f7fa faed 	bl	8004518 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6a3b      	ldr	r3, [r7, #32]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d902      	bls.n	8009f50 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d13d      	bne.n	8009fcc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009f5e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	685b      	ldr	r3, [r3, #4]
 8009f64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f68:	d111      	bne.n	8009f8e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f72:	d004      	beq.n	8009f7e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f7c:	d107      	bne.n	8009f8e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f8c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f96:	d10f      	bne.n	8009fb8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	681a      	ldr	r2, [r3, #0]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009fa6:	601a      	str	r2, [r3, #0]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009fb6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009fc8:	2303      	movs	r3, #3
 8009fca:	e010      	b.n	8009fee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	3b01      	subs	r3, #1
 8009fda:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d196      	bne.n	8009f1a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3728      	adds	r7, #40	@ 0x28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	2000000c 	.word	0x2000000c

08009ffc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af02      	add	r7, sp, #8
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2200      	movs	r2, #0
 800a010:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f7ff ff5b 	bl	8009ed0 <SPI_WaitFifoStateUntilTimeout>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d007      	beq.n	800a030 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a024:	f043 0220 	orr.w	r2, r3, #32
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a02c:	2303      	movs	r3, #3
 800a02e:	e027      	b.n	800a080 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	9300      	str	r3, [sp, #0]
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2200      	movs	r2, #0
 800a038:	2180      	movs	r1, #128	@ 0x80
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7ff fec0 	bl	8009dc0 <SPI_WaitFlagStateUntilTimeout>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d007      	beq.n	800a056 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a04a:	f043 0220 	orr.w	r2, r3, #32
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e014      	b.n	800a080 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f7ff ff34 	bl	8009ed0 <SPI_WaitFifoStateUntilTimeout>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d007      	beq.n	800a07e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a072:	f043 0220 	orr.w	r2, r3, #32
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e000      	b.n	800a080 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b082      	sub	sp, #8
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	e049      	b.n	800a12e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d106      	bne.n	800a0b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7f9 ffd4 	bl	800405c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2202      	movs	r2, #2
 800a0b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	3304      	adds	r3, #4
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	4610      	mov	r0, r2
 800a0c8:	f000 fa7c 	bl	800a5c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2201      	movs	r2, #1
 800a0d0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2201      	movs	r2, #1
 800a118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2201      	movs	r2, #1
 800a120:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3708      	adds	r7, #8
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}
	...

0800a138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d001      	beq.n	800a150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e036      	b.n	800a1be <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2202      	movs	r2, #2
 800a154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f042 0201 	orr.w	r2, r2, #1
 800a166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a17      	ldr	r2, [pc, #92]	@ (800a1cc <HAL_TIM_Base_Start_IT+0x94>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d004      	beq.n	800a17c <HAL_TIM_Base_Start_IT+0x44>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a17a:	d115      	bne.n	800a1a8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689a      	ldr	r2, [r3, #8]
 800a182:	4b13      	ldr	r3, [pc, #76]	@ (800a1d0 <HAL_TIM_Base_Start_IT+0x98>)
 800a184:	4013      	ands	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b06      	cmp	r3, #6
 800a18c:	d015      	beq.n	800a1ba <HAL_TIM_Base_Start_IT+0x82>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a194:	d011      	beq.n	800a1ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f042 0201 	orr.w	r2, r2, #1
 800a1a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1a6:	e008      	b.n	800a1ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0201 	orr.w	r2, r2, #1
 800a1b6:	601a      	str	r2, [r3, #0]
 800a1b8:	e000      	b.n	800a1bc <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3714      	adds	r7, #20
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	40012c00 	.word	0x40012c00
 800a1d0:	00010007 	.word	0x00010007

0800a1d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b084      	sub	sp, #16
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f003 0302 	and.w	r3, r3, #2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d020      	beq.n	800a238 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f003 0302 	and.w	r3, r3, #2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01b      	beq.n	800a238 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f06f 0202 	mvn.w	r2, #2
 800a208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2201      	movs	r2, #1
 800a20e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	f003 0303 	and.w	r3, r3, #3
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d003      	beq.n	800a226 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 f9b2 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 800a224:	e005      	b.n	800a232 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a226:	6878      	ldr	r0, [r7, #4]
 800a228:	f000 f9a4 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f9b5 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2200      	movs	r2, #0
 800a236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	f003 0304 	and.w	r3, r3, #4
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d020      	beq.n	800a284 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d01b      	beq.n	800a284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0204 	mvn.w	r2, #4
 800a254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2202      	movs	r2, #2
 800a25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f98c 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 800a270:	e005      	b.n	800a27e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f97e 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 f98f 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	f003 0308 	and.w	r3, r3, #8
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d020      	beq.n	800a2d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f003 0308 	and.w	r3, r3, #8
 800a294:	2b00      	cmp	r3, #0
 800a296:	d01b      	beq.n	800a2d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f06f 0208 	mvn.w	r2, #8
 800a2a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	69db      	ldr	r3, [r3, #28]
 800a2ae:	f003 0303 	and.w	r3, r3, #3
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d003      	beq.n	800a2be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 f966 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 800a2bc:	e005      	b.n	800a2ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 f958 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 f969 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	f003 0310 	and.w	r3, r3, #16
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d020      	beq.n	800a31c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f003 0310 	and.w	r3, r3, #16
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d01b      	beq.n	800a31c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f06f 0210 	mvn.w	r2, #16
 800a2ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2208      	movs	r2, #8
 800a2f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	69db      	ldr	r3, [r3, #28]
 800a2fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d003      	beq.n	800a30a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 f940 	bl	800a588 <HAL_TIM_IC_CaptureCallback>
 800a308:	e005      	b.n	800a316 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f000 f932 	bl	800a574 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 f943 	bl	800a59c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00c      	beq.n	800a340 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f003 0301 	and.w	r3, r3, #1
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d007      	beq.n	800a340 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f06f 0201 	mvn.w	r2, #1
 800a338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f7fa f824 	bl	8004388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00c      	beq.n	800a36e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d007      	beq.n	800a36e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 faa1 	bl	800a8b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a374:	2b00      	cmp	r3, #0
 800a376:	d00c      	beq.n	800a392 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d007      	beq.n	800a392 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a38a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 fa99 	bl	800a8c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a392:	68bb      	ldr	r3, [r7, #8]
 800a394:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d00c      	beq.n	800a3b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d007      	beq.n	800a3b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a3ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f8fd 	bl	800a5b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d00c      	beq.n	800a3da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f003 0320 	and.w	r3, r3, #32
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d007      	beq.n	800a3da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f06f 0220 	mvn.w	r2, #32
 800a3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	f000 fa61 	bl	800a89c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b084      	sub	sp, #16
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
 800a3ea:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d101      	bne.n	800a3fe <HAL_TIM_ConfigClockSource+0x1c>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	e0b6      	b.n	800a56c <HAL_TIM_ConfigClockSource+0x18a>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2202      	movs	r2, #2
 800a40a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a41c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a420:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a428:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	68ba      	ldr	r2, [r7, #8]
 800a430:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a43a:	d03e      	beq.n	800a4ba <HAL_TIM_ConfigClockSource+0xd8>
 800a43c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a440:	f200 8087 	bhi.w	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a448:	f000 8086 	beq.w	800a558 <HAL_TIM_ConfigClockSource+0x176>
 800a44c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a450:	d87f      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a452:	2b70      	cmp	r3, #112	@ 0x70
 800a454:	d01a      	beq.n	800a48c <HAL_TIM_ConfigClockSource+0xaa>
 800a456:	2b70      	cmp	r3, #112	@ 0x70
 800a458:	d87b      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a45a:	2b60      	cmp	r3, #96	@ 0x60
 800a45c:	d050      	beq.n	800a500 <HAL_TIM_ConfigClockSource+0x11e>
 800a45e:	2b60      	cmp	r3, #96	@ 0x60
 800a460:	d877      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a462:	2b50      	cmp	r3, #80	@ 0x50
 800a464:	d03c      	beq.n	800a4e0 <HAL_TIM_ConfigClockSource+0xfe>
 800a466:	2b50      	cmp	r3, #80	@ 0x50
 800a468:	d873      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a46a:	2b40      	cmp	r3, #64	@ 0x40
 800a46c:	d058      	beq.n	800a520 <HAL_TIM_ConfigClockSource+0x13e>
 800a46e:	2b40      	cmp	r3, #64	@ 0x40
 800a470:	d86f      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a472:	2b30      	cmp	r3, #48	@ 0x30
 800a474:	d064      	beq.n	800a540 <HAL_TIM_ConfigClockSource+0x15e>
 800a476:	2b30      	cmp	r3, #48	@ 0x30
 800a478:	d86b      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	d060      	beq.n	800a540 <HAL_TIM_ConfigClockSource+0x15e>
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d867      	bhi.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
 800a482:	2b00      	cmp	r3, #0
 800a484:	d05c      	beq.n	800a540 <HAL_TIM_ConfigClockSource+0x15e>
 800a486:	2b10      	cmp	r3, #16
 800a488:	d05a      	beq.n	800a540 <HAL_TIM_ConfigClockSource+0x15e>
 800a48a:	e062      	b.n	800a552 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a49c:	f000 f97e 	bl	800a79c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a4ae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	68ba      	ldr	r2, [r7, #8]
 800a4b6:	609a      	str	r2, [r3, #8]
      break;
 800a4b8:	e04f      	b.n	800a55a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a4ca:	f000 f967 	bl	800a79c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689a      	ldr	r2, [r3, #8]
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a4dc:	609a      	str	r2, [r3, #8]
      break;
 800a4de:	e03c      	b.n	800a55a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a4e4:	683b      	ldr	r3, [r7, #0]
 800a4e6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	f000 f8d9 	bl	800a6a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2150      	movs	r1, #80	@ 0x50
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f000 f932 	bl	800a762 <TIM_ITRx_SetConfig>
      break;
 800a4fe:	e02c      	b.n	800a55a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a50c:	461a      	mov	r2, r3
 800a50e:	f000 f8f8 	bl	800a702 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2160      	movs	r1, #96	@ 0x60
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 f922 	bl	800a762 <TIM_ITRx_SetConfig>
      break;
 800a51e:	e01c      	b.n	800a55a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a52c:	461a      	mov	r2, r3
 800a52e:	f000 f8b9 	bl	800a6a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2140      	movs	r1, #64	@ 0x40
 800a538:	4618      	mov	r0, r3
 800a53a:	f000 f912 	bl	800a762 <TIM_ITRx_SetConfig>
      break;
 800a53e:	e00c      	b.n	800a55a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4619      	mov	r1, r3
 800a54a:	4610      	mov	r0, r2
 800a54c:	f000 f909 	bl	800a762 <TIM_ITRx_SetConfig>
      break;
 800a550:	e003      	b.n	800a55a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	73fb      	strb	r3, [r7, #15]
      break;
 800a556:	e000      	b.n	800a55a <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a558:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2201      	movs	r2, #1
 800a55e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3710      	adds	r7, #16
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a57c:	bf00      	nop
 800a57e:	370c      	adds	r7, #12
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a5a4:	bf00      	nop
 800a5a6:	370c      	adds	r7, #12
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	4a30      	ldr	r2, [pc, #192]	@ (800a698 <TIM_Base_SetConfig+0xd4>)
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	d003      	beq.n	800a5e4 <TIM_Base_SetConfig+0x20>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5e2:	d108      	bne.n	800a5f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	68fa      	ldr	r2, [r7, #12]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	4a27      	ldr	r2, [pc, #156]	@ (800a698 <TIM_Base_SetConfig+0xd4>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d00b      	beq.n	800a616 <TIM_Base_SetConfig+0x52>
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a604:	d007      	beq.n	800a616 <TIM_Base_SetConfig+0x52>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	4a24      	ldr	r2, [pc, #144]	@ (800a69c <TIM_Base_SetConfig+0xd8>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d003      	beq.n	800a616 <TIM_Base_SetConfig+0x52>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	4a23      	ldr	r2, [pc, #140]	@ (800a6a0 <TIM_Base_SetConfig+0xdc>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d108      	bne.n	800a628 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a61c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	4313      	orrs	r3, r2
 800a626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	4313      	orrs	r3, r2
 800a634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	68fa      	ldr	r2, [r7, #12]
 800a63a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	689a      	ldr	r2, [r3, #8]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	681a      	ldr	r2, [r3, #0]
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	4a12      	ldr	r2, [pc, #72]	@ (800a698 <TIM_Base_SetConfig+0xd4>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d007      	beq.n	800a664 <TIM_Base_SetConfig+0xa0>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	4a11      	ldr	r2, [pc, #68]	@ (800a69c <TIM_Base_SetConfig+0xd8>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d003      	beq.n	800a664 <TIM_Base_SetConfig+0xa0>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a10      	ldr	r2, [pc, #64]	@ (800a6a0 <TIM_Base_SetConfig+0xdc>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d103      	bne.n	800a66c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	691a      	ldr	r2, [r3, #16]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2201      	movs	r2, #1
 800a670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	691b      	ldr	r3, [r3, #16]
 800a676:	f003 0301 	and.w	r3, r3, #1
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d105      	bne.n	800a68a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	f023 0201 	bic.w	r2, r3, #1
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	611a      	str	r2, [r3, #16]
  }
}
 800a68a:	bf00      	nop
 800a68c:	3714      	adds	r7, #20
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	40012c00 	.word	0x40012c00
 800a69c:	40014400 	.word	0x40014400
 800a6a0:	40014800 	.word	0x40014800

0800a6a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a1b      	ldr	r3, [r3, #32]
 800a6ba:	f023 0201 	bic.w	r2, r3, #1
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	699b      	ldr	r3, [r3, #24]
 800a6c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	011b      	lsls	r3, r3, #4
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	f023 030a 	bic.w	r3, r3, #10
 800a6e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	621a      	str	r2, [r3, #32]
}
 800a6f6:	bf00      	nop
 800a6f8:	371c      	adds	r7, #28
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a702:	b480      	push	{r7}
 800a704:	b087      	sub	sp, #28
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	60b9      	str	r1, [r7, #8]
 800a70c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6a1b      	ldr	r3, [r3, #32]
 800a718:	f023 0210 	bic.w	r2, r3, #16
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	699b      	ldr	r3, [r3, #24]
 800a724:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a726:	693b      	ldr	r3, [r7, #16]
 800a728:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a72c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	031b      	lsls	r3, r3, #12
 800a732:	693a      	ldr	r2, [r7, #16]
 800a734:	4313      	orrs	r3, r2
 800a736:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a73e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	011b      	lsls	r3, r3, #4
 800a744:	697a      	ldr	r2, [r7, #20]
 800a746:	4313      	orrs	r3, r2
 800a748:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	621a      	str	r2, [r3, #32]
}
 800a756:	bf00      	nop
 800a758:	371c      	adds	r7, #28
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a762:	b480      	push	{r7}
 800a764:	b085      	sub	sp, #20
 800a766:	af00      	add	r7, sp, #0
 800a768:	6078      	str	r0, [r7, #4]
 800a76a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	689b      	ldr	r3, [r3, #8]
 800a770:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a77c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a77e:	683a      	ldr	r2, [r7, #0]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	4313      	orrs	r3, r2
 800a784:	f043 0307 	orr.w	r3, r3, #7
 800a788:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	609a      	str	r2, [r3, #8]
}
 800a790:	bf00      	nop
 800a792:	3714      	adds	r7, #20
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b087      	sub	sp, #28
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	021a      	lsls	r2, r3, #8
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	697a      	ldr	r2, [r7, #20]
 800a7c6:	4313      	orrs	r3, r2
 800a7c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	697a      	ldr	r2, [r7, #20]
 800a7ce:	609a      	str	r2, [r3, #8]
}
 800a7d0:	bf00      	nop
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
 800a7e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d101      	bne.n	800a7f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7f0:	2302      	movs	r3, #2
 800a7f2:	e04a      	b.n	800a88a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2201      	movs	r2, #1
 800a7f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2202      	movs	r2, #2
 800a800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	689b      	ldr	r3, [r3, #8]
 800a812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4a1f      	ldr	r2, [pc, #124]	@ (800a898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d108      	bne.n	800a830 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a824:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	685b      	ldr	r3, [r3, #4]
 800a82a:	68fa      	ldr	r2, [r7, #12]
 800a82c:	4313      	orrs	r3, r2
 800a82e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	4313      	orrs	r3, r2
 800a840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a12      	ldr	r2, [pc, #72]	@ (800a898 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d004      	beq.n	800a85e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a85c:	d10c      	bne.n	800a878 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	68ba      	ldr	r2, [r7, #8]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	68ba      	ldr	r2, [r7, #8]
 800a876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2201      	movs	r2, #1
 800a87c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	3714      	adds	r7, #20
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	40012c00 	.word	0x40012c00

0800a89c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08a      	sub	sp, #40	@ 0x28
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8ec:	2b20      	cmp	r3, #32
 800a8ee:	d167      	bne.n	800a9c0 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <HAL_UART_Transmit_DMA+0x24>
 800a8f6:	88fb      	ldrh	r3, [r7, #6]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d101      	bne.n	800a900 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e060      	b.n	800a9c2 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	68ba      	ldr	r2, [r7, #8]
 800a904:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	88fa      	ldrh	r2, [r7, #6]
 800a90a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	88fa      	ldrh	r2, [r7, #6]
 800a912:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	2200      	movs	r2, #0
 800a91a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	2221      	movs	r2, #33	@ 0x21
 800a922:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d028      	beq.n	800a980 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a932:	4a26      	ldr	r2, [pc, #152]	@ (800a9cc <HAL_UART_Transmit_DMA+0xf4>)
 800a934:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a93a:	4a25      	ldr	r2, [pc, #148]	@ (800a9d0 <HAL_UART_Transmit_DMA+0xf8>)
 800a93c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a942:	4a24      	ldr	r2, [pc, #144]	@ (800a9d4 <HAL_UART_Transmit_DMA+0xfc>)
 800a944:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a94a:	2200      	movs	r2, #0
 800a94c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a956:	4619      	mov	r1, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	3328      	adds	r3, #40	@ 0x28
 800a95e:	461a      	mov	r2, r3
 800a960:	88fb      	ldrh	r3, [r7, #6]
 800a962:	f7f9 ff96 	bl	8004892 <HAL_DMA_Start_IT>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d009      	beq.n	800a980 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	2210      	movs	r2, #16
 800a970:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	2220      	movs	r2, #32
 800a978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a97c:	2301      	movs	r3, #1
 800a97e:	e020      	b.n	800a9c2 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	2240      	movs	r2, #64	@ 0x40
 800a986:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3308      	adds	r3, #8
 800a98e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	e853 3f00 	ldrex	r3, [r3]
 800a996:	613b      	str	r3, [r7, #16]
   return(result);
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a99e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	3308      	adds	r3, #8
 800a9a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9a8:	623a      	str	r2, [r7, #32]
 800a9aa:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ac:	69f9      	ldr	r1, [r7, #28]
 800a9ae:	6a3a      	ldr	r2, [r7, #32]
 800a9b0:	e841 2300 	strex	r3, r2, [r1]
 800a9b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1e5      	bne.n	800a988 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	e000      	b.n	800a9c2 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a9c0:	2302      	movs	r3, #2
  }
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3728      	adds	r7, #40	@ 0x28
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
 800a9ca:	bf00      	nop
 800a9cc:	0800b1af 	.word	0x0800b1af
 800a9d0:	0800b249 	.word	0x0800b249
 800a9d4:	0800b265 	.word	0x0800b265

0800a9d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b0ba      	sub	sp, #232	@ 0xe8
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	69db      	ldr	r3, [r3, #28]
 800a9e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aa02:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aa06:	4013      	ands	r3, r2
 800aa08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aa0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d11b      	bne.n	800aa4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800aa14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa18:	f003 0320 	and.w	r3, r3, #32
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d015      	beq.n	800aa4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800aa20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa24:	f003 0320 	and.w	r3, r3, #32
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d105      	bne.n	800aa38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800aa2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d009      	beq.n	800aa4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f000 82e3 	beq.w	800b008 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
      }
      return;
 800aa4a:	e2dd      	b.n	800b008 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	f000 8123 	beq.w	800ac9c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800aa56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800aa5a:	4b8d      	ldr	r3, [pc, #564]	@ (800ac90 <HAL_UART_IRQHandler+0x2b8>)
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d106      	bne.n	800aa70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800aa62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa66:	4b8b      	ldr	r3, [pc, #556]	@ (800ac94 <HAL_UART_IRQHandler+0x2bc>)
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f000 8116 	beq.w	800ac9c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa74:	f003 0301 	and.w	r3, r3, #1
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d011      	beq.n	800aaa0 <HAL_UART_IRQHandler+0xc8>
 800aa7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00b      	beq.n	800aaa0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa96:	f043 0201 	orr.w	r2, r3, #1
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aaa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aaa4:	f003 0302 	and.w	r3, r3, #2
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d011      	beq.n	800aad0 <HAL_UART_IRQHandler+0xf8>
 800aaac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aab0:	f003 0301 	and.w	r3, r3, #1
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00b      	beq.n	800aad0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2202      	movs	r2, #2
 800aabe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aac6:	f043 0204 	orr.w	r2, r3, #4
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aad4:	f003 0304 	and.w	r3, r3, #4
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d011      	beq.n	800ab00 <HAL_UART_IRQHandler+0x128>
 800aadc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	2204      	movs	r2, #4
 800aaee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aaf6:	f043 0202 	orr.w	r2, r3, #2
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab04:	f003 0308 	and.w	r3, r3, #8
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d017      	beq.n	800ab3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d105      	bne.n	800ab24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ab18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800ab1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ac90 <HAL_UART_IRQHandler+0x2b8>)
 800ab1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2208      	movs	r2, #8
 800ab2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab32:	f043 0208 	orr.w	r2, r3, #8
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d012      	beq.n	800ab6e <HAL_UART_IRQHandler+0x196>
 800ab48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00c      	beq.n	800ab6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab64:	f043 0220 	orr.w	r2, r3, #32
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	f000 8249 	beq.w	800b00c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ab7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab7e:	f003 0320 	and.w	r3, r3, #32
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d013      	beq.n	800abae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ab86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab8a:	f003 0320 	and.w	r3, r3, #32
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d105      	bne.n	800ab9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ab92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ab96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d007      	beq.n	800abae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d003      	beq.n	800abae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abb4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	689b      	ldr	r3, [r3, #8]
 800abbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc2:	2b40      	cmp	r3, #64	@ 0x40
 800abc4:	d005      	beq.n	800abd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800abc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800abca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d054      	beq.n	800ac7c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fa85 	bl	800b0e2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abe2:	2b40      	cmp	r3, #64	@ 0x40
 800abe4:	d146      	bne.n	800ac74 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	3308      	adds	r3, #8
 800abec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abf0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800abf4:	e853 3f00 	ldrex	r3, [r3]
 800abf8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ac00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	3308      	adds	r3, #8
 800ac0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800ac12:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800ac16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ac1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ac22:	e841 2300 	strex	r3, r2, [r1]
 800ac26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ac2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1d9      	bne.n	800abe6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d017      	beq.n	800ac6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac42:	4a15      	ldr	r2, [pc, #84]	@ (800ac98 <HAL_UART_IRQHandler+0x2c0>)
 800ac44:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f7f9 fefa 	bl	8004a46 <HAL_DMA_Abort_IT>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d019      	beq.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ac5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800ac66:	4610      	mov	r0, r2
 800ac68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6a:	e00f      	b.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f9e1 	bl	800b034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac72:	e00b      	b.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f000 f9dd 	bl	800b034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac7a:	e007      	b.n	800ac8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f9d9 	bl	800b034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800ac8a:	e1bf      	b.n	800b00c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac8c:	bf00      	nop
    return;
 800ac8e:	e1bd      	b.n	800b00c <HAL_UART_IRQHandler+0x634>
 800ac90:	10000001 	.word	0x10000001
 800ac94:	04000120 	.word	0x04000120
 800ac98:	0800b2e5 	.word	0x0800b2e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	f040 8153 	bne.w	800af4c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acaa:	f003 0310 	and.w	r3, r3, #16
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 814c 	beq.w	800af4c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800acb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acb8:	f003 0310 	and.w	r3, r3, #16
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	f000 8145 	beq.w	800af4c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2210      	movs	r2, #16
 800acc8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	689b      	ldr	r3, [r3, #8]
 800acd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acd4:	2b40      	cmp	r3, #64	@ 0x40
 800acd6:	f040 80bb 	bne.w	800ae50 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	685b      	ldr	r3, [r3, #4]
 800ace4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ace8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800acec:	2b00      	cmp	r3, #0
 800acee:	f000 818f 	beq.w	800b010 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800acf8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acfc:	429a      	cmp	r2, r3
 800acfe:	f080 8187 	bcs.w	800b010 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ad08:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f040 8087 	bne.w	800ae2e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800ad2c:	e853 3f00 	ldrex	r3, [r3]
 800ad30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800ad34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ad38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	461a      	mov	r2, r3
 800ad46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ad4a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800ad4e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800ad56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800ad62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1da      	bne.n	800ad20 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad74:	e853 3f00 	ldrex	r3, [r3]
 800ad78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad7c:	f023 0301 	bic.w	r3, r3, #1
 800ad80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	3308      	adds	r3, #8
 800ad8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ad8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad9a:	e841 2300 	strex	r3, r2, [r1]
 800ad9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ada0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d1e1      	bne.n	800ad6a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	3308      	adds	r3, #8
 800adac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800adb0:	e853 3f00 	ldrex	r3, [r3]
 800adb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800adb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800adb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3308      	adds	r3, #8
 800adc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800adca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800adcc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800add0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800add2:	e841 2300 	strex	r3, r2, [r1]
 800add6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800add8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1e3      	bne.n	800ada6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800adf4:	e853 3f00 	ldrex	r3, [r3]
 800adf8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800adfa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800adfc:	f023 0310 	bic.w	r3, r3, #16
 800ae00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	461a      	mov	r2, r3
 800ae0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ae0e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ae10:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800ae14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ae16:	e841 2300 	strex	r3, r2, [r1]
 800ae1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800ae1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e4      	bne.n	800adec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7f9 fdad 	bl	8004988 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2202      	movs	r2, #2
 800ae32:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	1ad3      	subs	r3, r2, r3
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	4619      	mov	r1, r3
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	f000 f8fd 	bl	800b048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ae4e:	e0df      	b.n	800b010 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	f000 80d1 	beq.w	800b014 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800ae72:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f000 80cc 	beq.w	800b014 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	e853 3f00 	ldrex	r3, [r3]
 800ae88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	461a      	mov	r2, r3
 800ae9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae9e:	647b      	str	r3, [r7, #68]	@ 0x44
 800aea0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aea2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aea6:	e841 2300 	strex	r3, r2, [r1]
 800aeaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aeac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1e4      	bne.n	800ae7c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	3308      	adds	r3, #8
 800aeb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebc:	e853 3f00 	ldrex	r3, [r3]
 800aec0:	623b      	str	r3, [r7, #32]
   return(result);
 800aec2:	6a3b      	ldr	r3, [r7, #32]
 800aec4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aec8:	f023 0301 	bic.w	r3, r3, #1
 800aecc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3308      	adds	r3, #8
 800aed6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aeda:	633a      	str	r2, [r7, #48]	@ 0x30
 800aedc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aede:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aee2:	e841 2300 	strex	r3, r2, [r1]
 800aee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d1e1      	bne.n	800aeb2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2220      	movs	r2, #32
 800aef2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2200      	movs	r2, #0
 800aefa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af08:	693b      	ldr	r3, [r7, #16]
 800af0a:	e853 3f00 	ldrex	r3, [r3]
 800af0e:	60fb      	str	r3, [r7, #12]
   return(result);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f023 0310 	bic.w	r3, r3, #16
 800af16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	461a      	mov	r2, r3
 800af20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800af24:	61fb      	str	r3, [r7, #28]
 800af26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af28:	69b9      	ldr	r1, [r7, #24]
 800af2a:	69fa      	ldr	r2, [r7, #28]
 800af2c:	e841 2300 	strex	r3, r2, [r1]
 800af30:	617b      	str	r3, [r7, #20]
   return(result);
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	2b00      	cmp	r3, #0
 800af36:	d1e4      	bne.n	800af02 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2202      	movs	r2, #2
 800af3c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800af3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800af42:	4619      	mov	r1, r3
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 f87f 	bl	800b048 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800af4a:	e063      	b.n	800b014 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800af4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d00e      	beq.n	800af76 <HAL_UART_IRQHandler+0x59e>
 800af58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800af60:	2b00      	cmp	r3, #0
 800af62:	d008      	beq.n	800af76 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800af6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 f9f9 	bl	800b366 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800af74:	e051      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800af76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d014      	beq.n	800afac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800af82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d105      	bne.n	800af9a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800af8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af96:	2b00      	cmp	r3, #0
 800af98:	d008      	beq.n	800afac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d03a      	beq.n	800b018 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	4798      	blx	r3
    }
    return;
 800afaa:	e035      	b.n	800b018 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800afac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d009      	beq.n	800afcc <HAL_UART_IRQHandler+0x5f4>
 800afb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d003      	beq.n	800afcc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f000 f9a3 	bl	800b310 <UART_EndTransmit_IT>
    return;
 800afca:	e026      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800afcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d009      	beq.n	800afec <HAL_UART_IRQHandler+0x614>
 800afd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afdc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d003      	beq.n	800afec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f9d2 	bl	800b38e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800afea:	e016      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d010      	beq.n	800b01a <HAL_UART_IRQHandler+0x642>
 800aff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800affc:	2b00      	cmp	r3, #0
 800affe:	da0c      	bge.n	800b01a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 f9ba 	bl	800b37a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b006:	e008      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
      return;
 800b008:	bf00      	nop
 800b00a:	e006      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
    return;
 800b00c:	bf00      	nop
 800b00e:	e004      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
      return;
 800b010:	bf00      	nop
 800b012:	e002      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
      return;
 800b014:	bf00      	nop
 800b016:	e000      	b.n	800b01a <HAL_UART_IRQHandler+0x642>
    return;
 800b018:	bf00      	nop
  }
}
 800b01a:	37e8      	adds	r7, #232	@ 0xe8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b028:	bf00      	nop
 800b02a:	370c      	adds	r7, #12
 800b02c:	46bd      	mov	sp, r7
 800b02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b032:	4770      	bx	lr

0800b034 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b03c:	bf00      	nop
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b054:	bf00      	nop
 800b056:	370c      	adds	r7, #12
 800b058:	46bd      	mov	sp, r7
 800b05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05e:	4770      	bx	lr

0800b060 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b060:	b480      	push	{r7}
 800b062:	b08f      	sub	sp, #60	@ 0x3c
 800b064:	af00      	add	r7, sp, #0
 800b066:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	e853 3f00 	ldrex	r3, [r3]
 800b074:	61fb      	str	r3, [r7, #28]
   return(result);
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b07c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b086:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b088:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b08c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b08e:	e841 2300 	strex	r3, r2, [r1]
 800b092:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1e6      	bne.n	800b068 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3308      	adds	r3, #8
 800b0a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	e853 3f00 	ldrex	r3, [r3]
 800b0a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b0b0:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ba:	61ba      	str	r2, [r7, #24]
 800b0bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0be:	6979      	ldr	r1, [r7, #20]
 800b0c0:	69ba      	ldr	r2, [r7, #24]
 800b0c2:	e841 2300 	strex	r3, r2, [r1]
 800b0c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d1e5      	bne.n	800b09a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2220      	movs	r2, #32
 800b0d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b0d6:	bf00      	nop
 800b0d8:	373c      	adds	r7, #60	@ 0x3c
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b095      	sub	sp, #84	@ 0x54
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0f2:	e853 3f00 	ldrex	r3, [r3]
 800b0f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b0f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	461a      	mov	r2, r3
 800b106:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b108:	643b      	str	r3, [r7, #64]	@ 0x40
 800b10a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b10c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b10e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b110:	e841 2300 	strex	r3, r2, [r1]
 800b114:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d1e6      	bne.n	800b0ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	6a3b      	ldr	r3, [r7, #32]
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b132:	f023 0301 	bic.w	r3, r3, #1
 800b136:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	3308      	adds	r3, #8
 800b13e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b148:	e841 2300 	strex	r3, r2, [r1]
 800b14c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b14e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1e3      	bne.n	800b11c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d118      	bne.n	800b18e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	60bb      	str	r3, [r7, #8]
   return(result);
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f023 0310 	bic.w	r3, r3, #16
 800b170:	647b      	str	r3, [r7, #68]	@ 0x44
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	461a      	mov	r2, r3
 800b178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b17a:	61bb      	str	r3, [r7, #24]
 800b17c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b17e:	6979      	ldr	r1, [r7, #20]
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	e841 2300 	strex	r3, r2, [r1]
 800b186:	613b      	str	r3, [r7, #16]
   return(result);
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d1e6      	bne.n	800b15c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2220      	movs	r2, #32
 800b192:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b1a2:	bf00      	nop
 800b1a4:	3754      	adds	r7, #84	@ 0x54
 800b1a6:	46bd      	mov	sp, r7
 800b1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ac:	4770      	bx	lr

0800b1ae <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b090      	sub	sp, #64	@ 0x40
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ba:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 0320 	and.w	r3, r3, #32
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d137      	bne.n	800b23a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b1d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	3308      	adds	r3, #8
 800b1d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	e853 3f00 	ldrex	r3, [r3]
 800b1e0:	623b      	str	r3, [r7, #32]
   return(result);
 800b1e2:	6a3b      	ldr	r3, [r7, #32]
 800b1e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b1ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	3308      	adds	r3, #8
 800b1f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b1f2:	633a      	str	r2, [r7, #48]	@ 0x30
 800b1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b1f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1fa:	e841 2300 	strex	r3, r2, [r1]
 800b1fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b202:	2b00      	cmp	r3, #0
 800b204:	d1e5      	bne.n	800b1d2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	e853 3f00 	ldrex	r3, [r3]
 800b212:	60fb      	str	r3, [r7, #12]
   return(result);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b21a:	637b      	str	r3, [r7, #52]	@ 0x34
 800b21c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	461a      	mov	r2, r3
 800b222:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b224:	61fb      	str	r3, [r7, #28]
 800b226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b228:	69b9      	ldr	r1, [r7, #24]
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	e841 2300 	strex	r3, r2, [r1]
 800b230:	617b      	str	r3, [r7, #20]
   return(result);
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d1e6      	bne.n	800b206 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b238:	e002      	b.n	800b240 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b23a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b23c:	f7f8 f824 	bl	8003288 <HAL_UART_TxCpltCallback>
}
 800b240:	bf00      	nop
 800b242:	3740      	adds	r7, #64	@ 0x40
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b254:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7ff fee2 	bl	800b020 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b25c:	bf00      	nop
 800b25e:	3710      	adds	r7, #16
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b270:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b278:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b280:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b28c:	2b80      	cmp	r3, #128	@ 0x80
 800b28e:	d109      	bne.n	800b2a4 <UART_DMAError+0x40>
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2b21      	cmp	r3, #33	@ 0x21
 800b294:	d106      	bne.n	800b2a4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	2200      	movs	r2, #0
 800b29a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b29e:	6978      	ldr	r0, [r7, #20]
 800b2a0:	f7ff fede 	bl	800b060 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	689b      	ldr	r3, [r3, #8]
 800b2aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2ae:	2b40      	cmp	r3, #64	@ 0x40
 800b2b0:	d109      	bne.n	800b2c6 <UART_DMAError+0x62>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2b22      	cmp	r3, #34	@ 0x22
 800b2b6:	d106      	bne.n	800b2c6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b2c0:	6978      	ldr	r0, [r7, #20]
 800b2c2:	f7ff ff0e 	bl	800b0e2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b2c6:	697b      	ldr	r3, [r7, #20]
 800b2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b2cc:	f043 0210 	orr.w	r2, r3, #16
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b2d6:	6978      	ldr	r0, [r7, #20]
 800b2d8:	f7ff feac 	bl	800b034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b2dc:	bf00      	nop
 800b2de:	3718      	adds	r7, #24
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}

0800b2e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b084      	sub	sp, #16
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2200      	movs	r2, #0
 800b2fe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f7ff fe96 	bl	800b034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b308:	bf00      	nop
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b088      	sub	sp, #32
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	e853 3f00 	ldrex	r3, [r3]
 800b324:	60bb      	str	r3, [r7, #8]
   return(result);
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b32c:	61fb      	str	r3, [r7, #28]
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	61bb      	str	r3, [r7, #24]
 800b338:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33a:	6979      	ldr	r1, [r7, #20]
 800b33c:	69ba      	ldr	r2, [r7, #24]
 800b33e:	e841 2300 	strex	r3, r2, [r1]
 800b342:	613b      	str	r3, [r7, #16]
   return(result);
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e6      	bne.n	800b318 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	2220      	movs	r2, #32
 800b34e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2200      	movs	r2, #0
 800b356:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7f7 ff95 	bl	8003288 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b35e:	bf00      	nop
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b366:	b480      	push	{r7}
 800b368:	b083      	sub	sp, #12
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b36e:	bf00      	nop
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr

0800b37a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b37a:	b480      	push	{r7}
 800b37c:	b083      	sub	sp, #12
 800b37e:	af00      	add	r7, sp, #0
 800b380:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b382:	bf00      	nop
 800b384:	370c      	adds	r7, #12
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr

0800b38e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b085      	sub	sp, #20
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b3b2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b3b6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b3c2:	2300      	movs	r3, #0
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3714      	adds	r7, #20
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ce:	4770      	bx	lr

0800b3d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b085      	sub	sp, #20
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b3d8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800b3dc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	43db      	mvns	r3, r3
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	60f8      	str	r0, [r7, #12]
 800b40e:	1d3b      	adds	r3, r7, #4
 800b410:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2201      	movs	r2, #1
 800b418:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2200      	movs	r2, #0
 800b420:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	2200      	movs	r2, #0
 800b428:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b444:	b480      	push	{r7}
 800b446:	b09d      	sub	sp, #116	@ 0x74
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b44e:	2300      	movs	r3, #0
 800b450:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b454:	687a      	ldr	r2, [r7, #4]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	781b      	ldrb	r3, [r3, #0]
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	4413      	add	r3, r2
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	b29b      	uxth	r3, r3
 800b462:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800b466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b46a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	78db      	ldrb	r3, [r3, #3]
 800b472:	2b03      	cmp	r3, #3
 800b474:	d81f      	bhi.n	800b4b6 <USB_ActivateEndpoint+0x72>
 800b476:	a201      	add	r2, pc, #4	@ (adr r2, 800b47c <USB_ActivateEndpoint+0x38>)
 800b478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b47c:	0800b48d 	.word	0x0800b48d
 800b480:	0800b4a9 	.word	0x0800b4a9
 800b484:	0800b4bf 	.word	0x0800b4bf
 800b488:	0800b49b 	.word	0x0800b49b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b48c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b490:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b494:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b498:	e012      	b.n	800b4c0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b49a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b49e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800b4a2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b4a6:	e00b      	b.n	800b4c0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b4a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b4ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b4b0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800b4b4:	e004      	b.n	800b4c0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800b4bc:	e000      	b.n	800b4c0 <USB_ActivateEndpoint+0x7c>
      break;
 800b4be:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	441a      	add	r2, r3
 800b4ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800b4ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b4d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b4d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	009b      	lsls	r3, r3, #2
 800b4ea:	4413      	add	r3, r2
 800b4ec:	881b      	ldrh	r3, [r3, #0]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	b21b      	sxth	r3, r3
 800b4f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b4f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4fa:	b21a      	sxth	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	b21b      	sxth	r3, r3
 800b502:	4313      	orrs	r3, r2
 800b504:	b21b      	sxth	r3, r3
 800b506:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	683b      	ldr	r3, [r7, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	441a      	add	r2, r3
 800b514:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800b518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b51c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b524:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b528:	b29b      	uxth	r3, r3
 800b52a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	7b1b      	ldrb	r3, [r3, #12]
 800b530:	2b00      	cmp	r3, #0
 800b532:	f040 8178 	bne.w	800b826 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	f000 8084 	beq.w	800b648 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	61bb      	str	r3, [r7, #24]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	461a      	mov	r2, r3
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	4413      	add	r3, r2
 800b552:	61bb      	str	r3, [r7, #24]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	00da      	lsls	r2, r3, #3
 800b55a:	69bb      	ldr	r3, [r7, #24]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b562:	617b      	str	r3, [r7, #20]
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	88db      	ldrh	r3, [r3, #6]
 800b568:	085b      	lsrs	r3, r3, #1
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	005b      	lsls	r3, r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b574:	687a      	ldr	r2, [r7, #4]
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	781b      	ldrb	r3, [r3, #0]
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	881b      	ldrh	r3, [r3, #0]
 800b580:	827b      	strh	r3, [r7, #18]
 800b582:	8a7b      	ldrh	r3, [r7, #18]
 800b584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d01b      	beq.n	800b5c4 <USB_ActivateEndpoint+0x180>
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4413      	add	r3, r2
 800b596:	881b      	ldrh	r3, [r3, #0]
 800b598:	b29b      	uxth	r3, r3
 800b59a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b59e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5a2:	823b      	strh	r3, [r7, #16]
 800b5a4:	687a      	ldr	r2, [r7, #4]
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	781b      	ldrb	r3, [r3, #0]
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	441a      	add	r2, r3
 800b5ae:	8a3b      	ldrh	r3, [r7, #16]
 800b5b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	78db      	ldrb	r3, [r3, #3]
 800b5c8:	2b01      	cmp	r3, #1
 800b5ca:	d020      	beq.n	800b60e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5e2:	81bb      	strh	r3, [r7, #12]
 800b5e4:	89bb      	ldrh	r3, [r7, #12]
 800b5e6:	f083 0320 	eor.w	r3, r3, #32
 800b5ea:	81bb      	strh	r3, [r7, #12]
 800b5ec:	687a      	ldr	r2, [r7, #4]
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	441a      	add	r2, r3
 800b5f6:	89bb      	ldrh	r3, [r7, #12]
 800b5f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b600:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b608:	b29b      	uxth	r3, r3
 800b60a:	8013      	strh	r3, [r2, #0]
 800b60c:	e2d5      	b.n	800bbba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	781b      	ldrb	r3, [r3, #0]
 800b614:	009b      	lsls	r3, r3, #2
 800b616:	4413      	add	r3, r2
 800b618:	881b      	ldrh	r3, [r3, #0]
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b620:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b624:	81fb      	strh	r3, [r7, #14]
 800b626:	687a      	ldr	r2, [r7, #4]
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	441a      	add	r2, r3
 800b630:	89fb      	ldrh	r3, [r7, #14]
 800b632:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b636:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b63a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b63e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b642:	b29b      	uxth	r3, r3
 800b644:	8013      	strh	r3, [r2, #0]
 800b646:	e2b8      	b.n	800bbba <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b652:	b29b      	uxth	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b658:	4413      	add	r3, r2
 800b65a:	633b      	str	r3, [r7, #48]	@ 0x30
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	781b      	ldrb	r3, [r3, #0]
 800b660:	00da      	lsls	r2, r3, #3
 800b662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b664:	4413      	add	r3, r2
 800b666:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b66a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	88db      	ldrh	r3, [r3, #6]
 800b670:	085b      	lsrs	r3, r3, #1
 800b672:	b29b      	uxth	r3, r3
 800b674:	005b      	lsls	r3, r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b67a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b686:	b29b      	uxth	r3, r3
 800b688:	461a      	mov	r2, r3
 800b68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68c:	4413      	add	r3, r2
 800b68e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	00da      	lsls	r2, r3, #3
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	4413      	add	r3, r2
 800b69a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b69e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ae:	801a      	strh	r2, [r3, #0]
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6b6:	d91d      	bls.n	800b6f4 <USB_ActivateEndpoint+0x2b0>
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	691b      	ldr	r3, [r3, #16]
 800b6bc:	095b      	lsrs	r3, r3, #5
 800b6be:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	f003 031f 	and.w	r3, r3, #31
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d102      	bne.n	800b6d2 <USB_ActivateEndpoint+0x28e>
 800b6cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6d4:	881b      	ldrh	r3, [r3, #0]
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	029b      	lsls	r3, r3, #10
 800b6de:	b29b      	uxth	r3, r3
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6ec:	b29a      	uxth	r2, r3
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f0:	801a      	strh	r2, [r3, #0]
 800b6f2:	e026      	b.n	800b742 <USB_ActivateEndpoint+0x2fe>
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d10a      	bne.n	800b712 <USB_ActivateEndpoint+0x2ce>
 800b6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6fe:	881b      	ldrh	r3, [r3, #0]
 800b700:	b29b      	uxth	r3, r3
 800b702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b70e:	801a      	strh	r2, [r3, #0]
 800b710:	e017      	b.n	800b742 <USB_ActivateEndpoint+0x2fe>
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	085b      	lsrs	r3, r3, #1
 800b718:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <USB_ActivateEndpoint+0x2e8>
 800b726:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b728:	3301      	adds	r3, #1
 800b72a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b72c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72e:	881b      	ldrh	r3, [r3, #0]
 800b730:	b29a      	uxth	r2, r3
 800b732:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b734:	b29b      	uxth	r3, r3
 800b736:	029b      	lsls	r3, r3, #10
 800b738:	b29b      	uxth	r3, r3
 800b73a:	4313      	orrs	r3, r2
 800b73c:	b29a      	uxth	r2, r3
 800b73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b740:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b742:	687a      	ldr	r2, [r7, #4]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	4413      	add	r3, r2
 800b74c:	881b      	ldrh	r3, [r3, #0]
 800b74e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b750:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b752:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d01b      	beq.n	800b792 <USB_ActivateEndpoint+0x34e>
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	781b      	ldrb	r3, [r3, #0]
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	881b      	ldrh	r3, [r3, #0]
 800b766:	b29b      	uxth	r3, r3
 800b768:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b76c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b770:	843b      	strh	r3, [r7, #32]
 800b772:	687a      	ldr	r2, [r7, #4]
 800b774:	683b      	ldr	r3, [r7, #0]
 800b776:	781b      	ldrb	r3, [r3, #0]
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	441a      	add	r2, r3
 800b77c:	8c3b      	ldrh	r3, [r7, #32]
 800b77e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b782:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b786:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b78a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b78e:	b29b      	uxth	r3, r3
 800b790:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d124      	bne.n	800b7e4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4413      	add	r3, r2
 800b7a4:	881b      	ldrh	r3, [r3, #0]
 800b7a6:	b29b      	uxth	r3, r3
 800b7a8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b7ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7b0:	83bb      	strh	r3, [r7, #28]
 800b7b2:	8bbb      	ldrh	r3, [r7, #28]
 800b7b4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b7b8:	83bb      	strh	r3, [r7, #28]
 800b7ba:	8bbb      	ldrh	r3, [r7, #28]
 800b7bc:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b7c0:	83bb      	strh	r3, [r7, #28]
 800b7c2:	687a      	ldr	r2, [r7, #4]
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	009b      	lsls	r3, r3, #2
 800b7ca:	441a      	add	r2, r3
 800b7cc:	8bbb      	ldrh	r3, [r7, #28]
 800b7ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b7d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b7d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b7da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	8013      	strh	r3, [r2, #0]
 800b7e2:	e1ea      	b.n	800bbba <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	b29b      	uxth	r3, r3
 800b7f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b7f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7fa:	83fb      	strh	r3, [r7, #30]
 800b7fc:	8bfb      	ldrh	r3, [r7, #30]
 800b7fe:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b802:	83fb      	strh	r3, [r7, #30]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	441a      	add	r2, r3
 800b80e:	8bfb      	ldrh	r3, [r7, #30]
 800b810:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b814:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b818:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b81c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b820:	b29b      	uxth	r3, r3
 800b822:	8013      	strh	r3, [r2, #0]
 800b824:	e1c9      	b.n	800bbba <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	78db      	ldrb	r3, [r3, #3]
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	d11e      	bne.n	800b86c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b82e:	687a      	ldr	r2, [r7, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	881b      	ldrh	r3, [r3, #0]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b844:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	441a      	add	r2, r3
 800b852:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b85a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b85e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b866:	b29b      	uxth	r3, r3
 800b868:	8013      	strh	r3, [r2, #0]
 800b86a:	e01d      	b.n	800b8a8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	4413      	add	r3, r2
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	b29b      	uxth	r3, r3
 800b87a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b87e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b882:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	781b      	ldrb	r3, [r3, #0]
 800b88c:	009b      	lsls	r3, r3, #2
 800b88e:	441a      	add	r2, r3
 800b890:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800b894:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b898:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b89c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b8a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8b8:	4413      	add	r3, r2
 800b8ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	00da      	lsls	r2, r3, #3
 800b8c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b8ca:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	891b      	ldrh	r3, [r3, #8]
 800b8d0:	085b      	lsrs	r3, r3, #1
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	005b      	lsls	r3, r3, #1
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8da:	801a      	strh	r2, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8ec:	4413      	add	r3, r2
 800b8ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	00da      	lsls	r2, r3, #3
 800b8f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8f8:	4413      	add	r3, r2
 800b8fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800b8fe:	653b      	str	r3, [r7, #80]	@ 0x50
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	895b      	ldrh	r3, [r3, #10]
 800b904:	085b      	lsrs	r3, r3, #1
 800b906:	b29b      	uxth	r3, r3
 800b908:	005b      	lsls	r3, r3, #1
 800b90a:	b29a      	uxth	r2, r3
 800b90c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b90e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	785b      	ldrb	r3, [r3, #1]
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 8093 	bne.w	800ba40 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	009b      	lsls	r3, r3, #2
 800b922:	4413      	add	r3, r2
 800b924:	881b      	ldrh	r3, [r3, #0]
 800b926:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800b92a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800b92e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b932:	2b00      	cmp	r3, #0
 800b934:	d01b      	beq.n	800b96e <USB_ActivateEndpoint+0x52a>
 800b936:	687a      	ldr	r2, [r7, #4]
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	4413      	add	r3, r2
 800b940:	881b      	ldrh	r3, [r3, #0]
 800b942:	b29b      	uxth	r3, r3
 800b944:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b94c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	441a      	add	r2, r3
 800b958:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800b95a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b95e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b962:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	009b      	lsls	r3, r3, #2
 800b976:	4413      	add	r3, r2
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800b97c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800b97e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	d01b      	beq.n	800b9be <USB_ActivateEndpoint+0x57a>
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	b29b      	uxth	r3, r3
 800b994:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b998:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b99c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	781b      	ldrb	r3, [r3, #0]
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	441a      	add	r2, r3
 800b9a8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b9aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	009b      	lsls	r3, r3, #2
 800b9c6:	4413      	add	r3, r2
 800b9c8:	881b      	ldrh	r3, [r3, #0]
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b9d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b9d4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b9d6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b9d8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b9dc:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b9de:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b9e0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9e4:	873b      	strh	r3, [r7, #56]	@ 0x38
 800b9e6:	687a      	ldr	r2, [r7, #4]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	009b      	lsls	r3, r3, #2
 800b9ee:	441a      	add	r2, r3
 800b9f0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800b9f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	009b      	lsls	r3, r3, #2
 800ba0e:	4413      	add	r3, r2
 800ba10:	881b      	ldrh	r3, [r3, #0]
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba1c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	441a      	add	r2, r3
 800ba28:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ba2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba3a:	b29b      	uxth	r3, r3
 800ba3c:	8013      	strh	r3, [r2, #0]
 800ba3e:	e0bc      	b.n	800bbba <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	009b      	lsls	r3, r3, #2
 800ba48:	4413      	add	r3, r2
 800ba4a:	881b      	ldrh	r3, [r3, #0]
 800ba4c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ba50:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ba54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d01d      	beq.n	800ba98 <USB_ActivateEndpoint+0x654>
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	009b      	lsls	r3, r3, #2
 800ba64:	4413      	add	r3, r2
 800ba66:	881b      	ldrh	r3, [r3, #0]
 800ba68:	b29b      	uxth	r3, r3
 800ba6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba72:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	781b      	ldrb	r3, [r3, #0]
 800ba7c:	009b      	lsls	r3, r3, #2
 800ba7e:	441a      	add	r2, r3
 800ba80:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ba84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ba90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba94:	b29b      	uxth	r3, r3
 800ba96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	781b      	ldrb	r3, [r3, #0]
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800baa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800baac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d01d      	beq.n	800baf0 <USB_ActivateEndpoint+0x6ac>
 800bab4:	687a      	ldr	r2, [r7, #4]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	009b      	lsls	r3, r3, #2
 800babc:	4413      	add	r3, r2
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800baca:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	441a      	add	r2, r3
 800bad8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800badc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bae0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bae8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800baec:	b29b      	uxth	r3, r3
 800baee:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	78db      	ldrb	r3, [r3, #3]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d024      	beq.n	800bb42 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb0e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800bb12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800bb16:	f083 0320 	eor.w	r3, r3, #32
 800bb1a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800bb1e:	687a      	ldr	r2, [r7, #4]
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	441a      	add	r2, r3
 800bb28:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800bb2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	8013      	strh	r3, [r2, #0]
 800bb40:	e01d      	b.n	800bb7e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb58:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	781b      	ldrb	r3, [r3, #0]
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	441a      	add	r2, r3
 800bb66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800bb6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	4413      	add	r3, r2
 800bb88:	881b      	ldrh	r3, [r3, #0]
 800bb8a:	b29b      	uxth	r3, r3
 800bb8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bb90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb94:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	009b      	lsls	r3, r3, #2
 800bba0:	441a      	add	r2, r3
 800bba2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800bba6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800bbba:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3774      	adds	r7, #116	@ 0x74
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop

0800bbcc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b08d      	sub	sp, #52	@ 0x34
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	7b1b      	ldrb	r3, [r3, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	f040 808e 	bne.w	800bcfc <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	785b      	ldrb	r3, [r3, #1]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d044      	beq.n	800bc72 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	881b      	ldrh	r3, [r3, #0]
 800bbf4:	81bb      	strh	r3, [r7, #12]
 800bbf6:	89bb      	ldrh	r3, [r7, #12]
 800bbf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d01b      	beq.n	800bc38 <USB_DeactivateEndpoint+0x6c>
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc16:	817b      	strh	r3, [r7, #10]
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	441a      	add	r2, r3
 800bc22:	897b      	ldrh	r3, [r7, #10]
 800bc24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc30:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bc34:	b29b      	uxth	r3, r3
 800bc36:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bc38:	687a      	ldr	r2, [r7, #4]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	009b      	lsls	r3, r3, #2
 800bc40:	4413      	add	r3, r2
 800bc42:	881b      	ldrh	r3, [r3, #0]
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bc4e:	813b      	strh	r3, [r7, #8]
 800bc50:	687a      	ldr	r2, [r7, #4]
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	009b      	lsls	r3, r3, #2
 800bc58:	441a      	add	r2, r3
 800bc5a:	893b      	ldrh	r3, [r7, #8]
 800bc5c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc60:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc64:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	8013      	strh	r3, [r2, #0]
 800bc70:	e192      	b.n	800bf98 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	881b      	ldrh	r3, [r3, #0]
 800bc7e:	827b      	strh	r3, [r7, #18]
 800bc80:	8a7b      	ldrh	r3, [r7, #18]
 800bc82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d01b      	beq.n	800bcc2 <USB_DeactivateEndpoint+0xf6>
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	4413      	add	r3, r2
 800bc94:	881b      	ldrh	r3, [r3, #0]
 800bc96:	b29b      	uxth	r3, r3
 800bc98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bc9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bca0:	823b      	strh	r3, [r7, #16]
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	441a      	add	r2, r3
 800bcac:	8a3b      	ldrh	r3, [r7, #16]
 800bcae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bcba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcbe:	b29b      	uxth	r3, r3
 800bcc0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	881b      	ldrh	r3, [r3, #0]
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bcd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcd8:	81fb      	strh	r3, [r7, #14]
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	441a      	add	r2, r3
 800bce4:	89fb      	ldrh	r3, [r7, #14]
 800bce6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bcea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bcee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bcf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	8013      	strh	r3, [r2, #0]
 800bcfa:	e14d      	b.n	800bf98 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	785b      	ldrb	r3, [r3, #1]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	f040 80a5 	bne.w	800be50 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd06:	687a      	ldr	r2, [r7, #4]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	781b      	ldrb	r3, [r3, #0]
 800bd0c:	009b      	lsls	r3, r3, #2
 800bd0e:	4413      	add	r3, r2
 800bd10:	881b      	ldrh	r3, [r3, #0]
 800bd12:	843b      	strh	r3, [r7, #32]
 800bd14:	8c3b      	ldrh	r3, [r7, #32]
 800bd16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d01b      	beq.n	800bd56 <USB_DeactivateEndpoint+0x18a>
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	4413      	add	r3, r2
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	b29b      	uxth	r3, r3
 800bd2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd34:	83fb      	strh	r3, [r7, #30]
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	441a      	add	r2, r3
 800bd40:	8bfb      	ldrh	r3, [r7, #30]
 800bd42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bd4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd52:	b29b      	uxth	r3, r3
 800bd54:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	781b      	ldrb	r3, [r3, #0]
 800bd5c:	009b      	lsls	r3, r3, #2
 800bd5e:	4413      	add	r3, r2
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	83bb      	strh	r3, [r7, #28]
 800bd64:	8bbb      	ldrh	r3, [r7, #28]
 800bd66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d01b      	beq.n	800bda6 <USB_DeactivateEndpoint+0x1da>
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	781b      	ldrb	r3, [r3, #0]
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	881b      	ldrh	r3, [r3, #0]
 800bd7a:	b29b      	uxth	r3, r3
 800bd7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bd84:	837b      	strh	r3, [r7, #26]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	441a      	add	r2, r3
 800bd90:	8b7b      	ldrh	r3, [r7, #26]
 800bd92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	881b      	ldrh	r3, [r3, #0]
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdbc:	833b      	strh	r3, [r7, #24]
 800bdbe:	687a      	ldr	r2, [r7, #4]
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	441a      	add	r2, r3
 800bdc8:	8b3b      	ldrh	r3, [r7, #24]
 800bdca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdd6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bdda:	b29b      	uxth	r3, r3
 800bddc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	683b      	ldr	r3, [r7, #0]
 800bde2:	781b      	ldrb	r3, [r3, #0]
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	4413      	add	r3, r2
 800bde8:	881b      	ldrh	r3, [r3, #0]
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bdf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bdf4:	82fb      	strh	r3, [r7, #22]
 800bdf6:	687a      	ldr	r2, [r7, #4]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
 800bdfc:	009b      	lsls	r3, r3, #2
 800bdfe:	441a      	add	r2, r3
 800be00:	8afb      	ldrh	r3, [r7, #22]
 800be02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be12:	b29b      	uxth	r3, r3
 800be14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800be16:	687a      	ldr	r2, [r7, #4]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	009b      	lsls	r3, r3, #2
 800be1e:	4413      	add	r3, r2
 800be20:	881b      	ldrh	r3, [r3, #0]
 800be22:	b29b      	uxth	r3, r3
 800be24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800be2c:	82bb      	strh	r3, [r7, #20]
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	441a      	add	r2, r3
 800be38:	8abb      	ldrh	r3, [r7, #20]
 800be3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	8013      	strh	r3, [r2, #0]
 800be4e:	e0a3      	b.n	800bf98 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	4413      	add	r3, r2
 800be5a:	881b      	ldrh	r3, [r3, #0]
 800be5c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800be5e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800be60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01b      	beq.n	800bea0 <USB_DeactivateEndpoint+0x2d4>
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	4413      	add	r3, r2
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	b29b      	uxth	r3, r3
 800be76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be7e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	009b      	lsls	r3, r3, #2
 800be88:	441a      	add	r2, r3
 800be8a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800be8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800be98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	009b      	lsls	r3, r3, #2
 800bea8:	4413      	add	r3, r2
 800beaa:	881b      	ldrh	r3, [r3, #0]
 800beac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800beae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800beb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d01b      	beq.n	800bef0 <USB_DeactivateEndpoint+0x324>
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	683b      	ldr	r3, [r7, #0]
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	4413      	add	r3, r2
 800bec2:	881b      	ldrh	r3, [r3, #0]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800beca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bece:	853b      	strh	r3, [r7, #40]	@ 0x28
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	009b      	lsls	r3, r3, #2
 800bed8:	441a      	add	r2, r3
 800beda:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bedc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bee0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bee4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bee8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800beec:	b29b      	uxth	r3, r3
 800beee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	781b      	ldrb	r3, [r3, #0]
 800bef6:	009b      	lsls	r3, r3, #2
 800bef8:	4413      	add	r3, r2
 800befa:	881b      	ldrh	r3, [r3, #0]
 800befc:	b29b      	uxth	r3, r3
 800befe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf06:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	441a      	add	r2, r3
 800bf12:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800bf14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bf20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf28:	687a      	ldr	r2, [r7, #4]
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	781b      	ldrb	r3, [r3, #0]
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4413      	add	r3, r2
 800bf32:	881b      	ldrh	r3, [r3, #0]
 800bf34:	b29b      	uxth	r3, r3
 800bf36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800bf40:	687a      	ldr	r2, [r7, #4]
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	781b      	ldrb	r3, [r3, #0]
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	441a      	add	r2, r3
 800bf4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800bf4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf5c:	b29b      	uxth	r3, r3
 800bf5e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	4413      	add	r3, r2
 800bf6a:	881b      	ldrh	r3, [r3, #0]
 800bf6c:	b29b      	uxth	r3, r3
 800bf6e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bf72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf76:	847b      	strh	r3, [r7, #34]	@ 0x22
 800bf78:	687a      	ldr	r2, [r7, #4]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	009b      	lsls	r3, r3, #2
 800bf80:	441a      	add	r2, r3
 800bf82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800bf84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bf98:	2300      	movs	r3, #0
}
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	3734      	adds	r7, #52	@ 0x34
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b0c2      	sub	sp, #264	@ 0x108
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfb4:	6018      	str	r0, [r3, #0]
 800bfb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfbe:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	f040 86b7 	bne.w	800cd40 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bfd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	699a      	ldr	r2, [r3, #24]
 800bfde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
 800bfea:	429a      	cmp	r2, r3
 800bfec:	d908      	bls.n	800c000 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bfee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bff2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bffe:	e007      	b.n	800c010 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c000:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c004:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	699b      	ldr	r3, [r3, #24]
 800c00c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c010:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c014:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	7b1b      	ldrb	r3, [r3, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d13a      	bne.n	800c096 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	6959      	ldr	r1, [r3, #20]
 800c02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	88da      	ldrh	r2, [r3, #6]
 800c038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c042:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c046:	6800      	ldr	r0, [r0, #0]
 800c048:	f001 fc98 	bl	800d97c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c04c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c050:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	613b      	str	r3, [r7, #16]
 800c058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c05c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c066:	b29b      	uxth	r3, r3
 800c068:	461a      	mov	r2, r3
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	4413      	add	r3, r2
 800c06e:	613b      	str	r3, [r7, #16]
 800c070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	781b      	ldrb	r3, [r3, #0]
 800c07c:	00da      	lsls	r2, r3, #3
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	4413      	add	r3, r2
 800c082:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c08c:	b29a      	uxth	r2, r3
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	801a      	strh	r2, [r3, #0]
 800c092:	f000 be1f 	b.w	800ccd4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	78db      	ldrb	r3, [r3, #3]
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	f040 8462 	bne.w	800c96c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c0a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	6a1a      	ldr	r2, [r3, #32]
 800c0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	691b      	ldr	r3, [r3, #16]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	f240 83df 	bls.w	800c884 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c0c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0ce:	681a      	ldr	r2, [r3, #0]
 800c0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ec:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800c0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	009b      	lsls	r3, r3, #2
 800c108:	441a      	add	r2, r3
 800c10a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c10e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c112:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c116:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c11a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c11e:	b29b      	uxth	r3, r3
 800c120:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	6a1a      	ldr	r2, [r3, #32]
 800c12e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c132:	1ad2      	subs	r2, r2, r3
 800c134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c144:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c14e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	4413      	add	r3, r2
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	b29b      	uxth	r3, r3
 800c15e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c162:	2b00      	cmp	r3, #0
 800c164:	f000 81c7 	beq.w	800c4f6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c16c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	633b      	str	r3, [r7, #48]	@ 0x30
 800c174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	785b      	ldrb	r3, [r3, #1]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d177      	bne.n	800c274 <USB_EPStartXfer+0x2ce>
 800c184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c188:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c194:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	461a      	mov	r2, r3
 800c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a4:	4413      	add	r3, r2
 800c1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c1a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	781b      	ldrb	r3, [r3, #0]
 800c1b4:	00da      	lsls	r2, r3, #3
 800c1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b8:	4413      	add	r3, r2
 800c1ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1be:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c2:	881b      	ldrh	r3, [r3, #0]
 800c1c4:	b29b      	uxth	r3, r3
 800c1c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1ca:	b29a      	uxth	r2, r3
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ce:	801a      	strh	r2, [r3, #0]
 800c1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1d6:	d921      	bls.n	800c21c <USB_EPStartXfer+0x276>
 800c1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1dc:	095b      	lsrs	r3, r3, #5
 800c1de:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1e6:	f003 031f 	and.w	r3, r3, #31
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d104      	bne.n	800c1f8 <USB_EPStartXfer+0x252>
 800c1ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c1f2:	3b01      	subs	r3, #1
 800c1f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fa:	881b      	ldrh	r3, [r3, #0]
 800c1fc:	b29a      	uxth	r2, r3
 800c1fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c202:	b29b      	uxth	r3, r3
 800c204:	029b      	lsls	r3, r3, #10
 800c206:	b29b      	uxth	r3, r3
 800c208:	4313      	orrs	r3, r2
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c214:	b29a      	uxth	r2, r3
 800c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c218:	801a      	strh	r2, [r3, #0]
 800c21a:	e050      	b.n	800c2be <USB_EPStartXfer+0x318>
 800c21c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <USB_EPStartXfer+0x294>
 800c224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c226:	881b      	ldrh	r3, [r3, #0]
 800c228:	b29b      	uxth	r3, r3
 800c22a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c22e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c232:	b29a      	uxth	r2, r3
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	801a      	strh	r2, [r3, #0]
 800c238:	e041      	b.n	800c2be <USB_EPStartXfer+0x318>
 800c23a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c23e:	085b      	lsrs	r3, r3, #1
 800c240:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c244:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c248:	f003 0301 	and.w	r3, r3, #1
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d004      	beq.n	800c25a <USB_EPStartXfer+0x2b4>
 800c250:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c254:	3301      	adds	r3, #1
 800c256:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800c25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25c:	881b      	ldrh	r3, [r3, #0]
 800c25e:	b29a      	uxth	r2, r3
 800c260:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c264:	b29b      	uxth	r3, r3
 800c266:	029b      	lsls	r3, r3, #10
 800c268:	b29b      	uxth	r3, r3
 800c26a:	4313      	orrs	r3, r2
 800c26c:	b29a      	uxth	r2, r3
 800c26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c270:	801a      	strh	r2, [r3, #0]
 800c272:	e024      	b.n	800c2be <USB_EPStartXfer+0x318>
 800c274:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c278:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	785b      	ldrb	r3, [r3, #1]
 800c280:	2b01      	cmp	r3, #1
 800c282:	d11c      	bne.n	800c2be <USB_EPStartXfer+0x318>
 800c284:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c288:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c292:	b29b      	uxth	r3, r3
 800c294:	461a      	mov	r2, r3
 800c296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c298:	4413      	add	r3, r2
 800c29a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c29c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	00da      	lsls	r2, r3, #3
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c2b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2b8:	b29a      	uxth	r2, r3
 800c2ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	895b      	ldrh	r3, [r3, #10]
 800c2ca:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	6959      	ldr	r1, [r3, #20]
 800c2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c2e4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c2e8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c2ec:	6800      	ldr	r0, [r0, #0]
 800c2ee:	f001 fb45 	bl	800d97c <USB_WritePMA>
            ep->xfer_buff += len;
 800c2f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	695a      	ldr	r2, [r3, #20]
 800c2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c302:	441a      	add	r2, r3
 800c304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6a1a      	ldr	r2, [r3, #32]
 800c31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	691b      	ldr	r3, [r3, #16]
 800c328:	429a      	cmp	r2, r3
 800c32a:	d90f      	bls.n	800c34c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800c32c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	6a1a      	ldr	r2, [r3, #32]
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33c:	1ad2      	subs	r2, r2, r3
 800c33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	621a      	str	r2, [r3, #32]
 800c34a:	e00e      	b.n	800c36a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800c34c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	6a1b      	ldr	r3, [r3, #32]
 800c358:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c35c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2200      	movs	r2, #0
 800c368:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c36a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c36e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	785b      	ldrb	r3, [r3, #1]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d177      	bne.n	800c46a <USB_EPStartXfer+0x4c4>
 800c37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c37e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	61bb      	str	r3, [r7, #24]
 800c386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c38a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c394:	b29b      	uxth	r3, r3
 800c396:	461a      	mov	r2, r3
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	4413      	add	r3, r2
 800c39c:	61bb      	str	r3, [r7, #24]
 800c39e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	00da      	lsls	r2, r3, #3
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c3b4:	617b      	str	r3, [r7, #20]
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	881b      	ldrh	r3, [r3, #0]
 800c3ba:	b29b      	uxth	r3, r3
 800c3bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	801a      	strh	r2, [r3, #0]
 800c3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ca:	2b3e      	cmp	r3, #62	@ 0x3e
 800c3cc:	d921      	bls.n	800c412 <USB_EPStartXfer+0x46c>
 800c3ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3d2:	095b      	lsrs	r3, r3, #5
 800c3d4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3dc:	f003 031f 	and.w	r3, r3, #31
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d104      	bne.n	800c3ee <USB_EPStartXfer+0x448>
 800c3e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	b29a      	uxth	r2, r3
 800c3f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	029b      	lsls	r3, r3, #10
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	4313      	orrs	r3, r2
 800c400:	b29b      	uxth	r3, r3
 800c402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c40a:	b29a      	uxth	r2, r3
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	801a      	strh	r2, [r3, #0]
 800c410:	e056      	b.n	800c4c0 <USB_EPStartXfer+0x51a>
 800c412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10a      	bne.n	800c430 <USB_EPStartXfer+0x48a>
 800c41a:	697b      	ldr	r3, [r7, #20]
 800c41c:	881b      	ldrh	r3, [r3, #0]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c428:	b29a      	uxth	r2, r3
 800c42a:	697b      	ldr	r3, [r7, #20]
 800c42c:	801a      	strh	r2, [r3, #0]
 800c42e:	e047      	b.n	800c4c0 <USB_EPStartXfer+0x51a>
 800c430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c434:	085b      	lsrs	r3, r3, #1
 800c436:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43e:	f003 0301 	and.w	r3, r3, #1
 800c442:	2b00      	cmp	r3, #0
 800c444:	d004      	beq.n	800c450 <USB_EPStartXfer+0x4aa>
 800c446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c44a:	3301      	adds	r3, #1
 800c44c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c450:	697b      	ldr	r3, [r7, #20]
 800c452:	881b      	ldrh	r3, [r3, #0]
 800c454:	b29a      	uxth	r2, r3
 800c456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	029b      	lsls	r3, r3, #10
 800c45e:	b29b      	uxth	r3, r3
 800c460:	4313      	orrs	r3, r2
 800c462:	b29a      	uxth	r2, r3
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	801a      	strh	r2, [r3, #0]
 800c468:	e02a      	b.n	800c4c0 <USB_EPStartXfer+0x51a>
 800c46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c46e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	785b      	ldrb	r3, [r3, #1]
 800c476:	2b01      	cmp	r3, #1
 800c478:	d122      	bne.n	800c4c0 <USB_EPStartXfer+0x51a>
 800c47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c47e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	623b      	str	r3, [r7, #32]
 800c486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c48a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c494:	b29b      	uxth	r3, r3
 800c496:	461a      	mov	r2, r3
 800c498:	6a3b      	ldr	r3, [r7, #32]
 800c49a:	4413      	add	r3, r2
 800c49c:	623b      	str	r3, [r7, #32]
 800c49e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	00da      	lsls	r2, r3, #3
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	4413      	add	r3, r2
 800c4b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4b4:	61fb      	str	r3, [r7, #28]
 800c4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c4c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	891b      	ldrh	r3, [r3, #8]
 800c4cc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c4d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6959      	ldr	r1, [r3, #20]
 800c4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4e0:	b29b      	uxth	r3, r3
 800c4e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c4e6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c4ea:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c4ee:	6800      	ldr	r0, [r0, #0]
 800c4f0:	f001 fa44 	bl	800d97c <USB_WritePMA>
 800c4f4:	e3ee      	b.n	800ccd4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c4f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c4fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	785b      	ldrb	r3, [r3, #1]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d177      	bne.n	800c5f6 <USB_EPStartXfer+0x650>
 800c506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c50a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c520:	b29b      	uxth	r3, r3
 800c522:	461a      	mov	r2, r3
 800c524:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c526:	4413      	add	r3, r2
 800c528:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c52a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c52e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	00da      	lsls	r2, r3, #3
 800c538:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c53a:	4413      	add	r3, r2
 800c53c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c540:	647b      	str	r3, [r7, #68]	@ 0x44
 800c542:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c544:	881b      	ldrh	r3, [r3, #0]
 800c546:	b29b      	uxth	r3, r3
 800c548:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c54c:	b29a      	uxth	r2, r3
 800c54e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c550:	801a      	strh	r2, [r3, #0]
 800c552:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c556:	2b3e      	cmp	r3, #62	@ 0x3e
 800c558:	d921      	bls.n	800c59e <USB_EPStartXfer+0x5f8>
 800c55a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c55e:	095b      	lsrs	r3, r3, #5
 800c560:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c568:	f003 031f 	and.w	r3, r3, #31
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d104      	bne.n	800c57a <USB_EPStartXfer+0x5d4>
 800c570:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c574:	3b01      	subs	r3, #1
 800c576:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c57a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c57c:	881b      	ldrh	r3, [r3, #0]
 800c57e:	b29a      	uxth	r2, r3
 800c580:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c584:	b29b      	uxth	r3, r3
 800c586:	029b      	lsls	r3, r3, #10
 800c588:	b29b      	uxth	r3, r3
 800c58a:	4313      	orrs	r3, r2
 800c58c:	b29b      	uxth	r3, r3
 800c58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c596:	b29a      	uxth	r2, r3
 800c598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c59a:	801a      	strh	r2, [r3, #0]
 800c59c:	e056      	b.n	800c64c <USB_EPStartXfer+0x6a6>
 800c59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d10a      	bne.n	800c5bc <USB_EPStartXfer+0x616>
 800c5a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5b8:	801a      	strh	r2, [r3, #0]
 800c5ba:	e047      	b.n	800c64c <USB_EPStartXfer+0x6a6>
 800c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c0:	085b      	lsrs	r3, r3, #1
 800c5c2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c5c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ca:	f003 0301 	and.w	r3, r3, #1
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d004      	beq.n	800c5dc <USB_EPStartXfer+0x636>
 800c5d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c5dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5de:	881b      	ldrh	r3, [r3, #0]
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800c5e6:	b29b      	uxth	r3, r3
 800c5e8:	029b      	lsls	r3, r3, #10
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	4313      	orrs	r3, r2
 800c5ee:	b29a      	uxth	r2, r3
 800c5f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c5f2:	801a      	strh	r2, [r3, #0]
 800c5f4:	e02a      	b.n	800c64c <USB_EPStartXfer+0x6a6>
 800c5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	785b      	ldrb	r3, [r3, #1]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d122      	bne.n	800c64c <USB_EPStartXfer+0x6a6>
 800c606:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c60a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	653b      	str	r3, [r7, #80]	@ 0x50
 800c612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c620:	b29b      	uxth	r3, r3
 800c622:	461a      	mov	r2, r3
 800c624:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c626:	4413      	add	r3, r2
 800c628:	653b      	str	r3, [r7, #80]	@ 0x50
 800c62a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c62e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	00da      	lsls	r2, r3, #3
 800c638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c63a:	4413      	add	r3, r2
 800c63c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c646:	b29a      	uxth	r2, r3
 800c648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c64a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	891b      	ldrh	r3, [r3, #8]
 800c658:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	6959      	ldr	r1, [r3, #20]
 800c668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c66c:	b29b      	uxth	r3, r3
 800c66e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c672:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c676:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c67a:	6800      	ldr	r0, [r0, #0]
 800c67c:	f001 f97e 	bl	800d97c <USB_WritePMA>
            ep->xfer_buff += len;
 800c680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	695a      	ldr	r2, [r3, #20]
 800c68c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c690:	441a      	add	r2, r3
 800c692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6a1a      	ldr	r2, [r3, #32]
 800c6aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	691b      	ldr	r3, [r3, #16]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d90f      	bls.n	800c6da <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800c6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	6a1a      	ldr	r2, [r3, #32]
 800c6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ca:	1ad2      	subs	r2, r2, r3
 800c6cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	621a      	str	r2, [r3, #32]
 800c6d8:	e00e      	b.n	800c6f8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800c6da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	6a1b      	ldr	r3, [r3, #32]
 800c6e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800c6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c6f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	643b      	str	r3, [r7, #64]	@ 0x40
 800c704:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c708:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	785b      	ldrb	r3, [r3, #1]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d177      	bne.n	800c804 <USB_EPStartXfer+0x85e>
 800c714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c72e:	b29b      	uxth	r3, r3
 800c730:	461a      	mov	r2, r3
 800c732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c734:	4413      	add	r3, r2
 800c736:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c738:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c73c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	00da      	lsls	r2, r3, #3
 800c746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c748:	4413      	add	r3, r2
 800c74a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c74e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c752:	881b      	ldrh	r3, [r3, #0]
 800c754:	b29b      	uxth	r3, r3
 800c756:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c75a:	b29a      	uxth	r2, r3
 800c75c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c75e:	801a      	strh	r2, [r3, #0]
 800c760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c764:	2b3e      	cmp	r3, #62	@ 0x3e
 800c766:	d921      	bls.n	800c7ac <USB_EPStartXfer+0x806>
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c76c:	095b      	lsrs	r3, r3, #5
 800c76e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c776:	f003 031f 	and.w	r3, r3, #31
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d104      	bne.n	800c788 <USB_EPStartXfer+0x7e2>
 800c77e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c782:	3b01      	subs	r3, #1
 800c784:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c78a:	881b      	ldrh	r3, [r3, #0]
 800c78c:	b29a      	uxth	r2, r3
 800c78e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c792:	b29b      	uxth	r3, r3
 800c794:	029b      	lsls	r3, r3, #10
 800c796:	b29b      	uxth	r3, r3
 800c798:	4313      	orrs	r3, r2
 800c79a:	b29b      	uxth	r3, r3
 800c79c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7a4:	b29a      	uxth	r2, r3
 800c7a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7a8:	801a      	strh	r2, [r3, #0]
 800c7aa:	e050      	b.n	800c84e <USB_EPStartXfer+0x8a8>
 800c7ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10a      	bne.n	800c7ca <USB_EPStartXfer+0x824>
 800c7b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7b6:	881b      	ldrh	r3, [r3, #0]
 800c7b8:	b29b      	uxth	r3, r3
 800c7ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7c2:	b29a      	uxth	r2, r3
 800c7c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c6:	801a      	strh	r2, [r3, #0]
 800c7c8:	e041      	b.n	800c84e <USB_EPStartXfer+0x8a8>
 800c7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ce:	085b      	lsrs	r3, r3, #1
 800c7d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7d8:	f003 0301 	and.w	r3, r3, #1
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <USB_EPStartXfer+0x844>
 800c7e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c7ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ec:	881b      	ldrh	r3, [r3, #0]
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	029b      	lsls	r3, r3, #10
 800c7f8:	b29b      	uxth	r3, r3
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	b29a      	uxth	r2, r3
 800c7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c800:	801a      	strh	r2, [r3, #0]
 800c802:	e024      	b.n	800c84e <USB_EPStartXfer+0x8a8>
 800c804:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c808:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	2b01      	cmp	r3, #1
 800c812:	d11c      	bne.n	800c84e <USB_EPStartXfer+0x8a8>
 800c814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c822:	b29b      	uxth	r3, r3
 800c824:	461a      	mov	r2, r3
 800c826:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c828:	4413      	add	r3, r2
 800c82a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c82c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	00da      	lsls	r2, r3, #3
 800c83a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c83c:	4413      	add	r3, r2
 800c83e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c842:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c844:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c848:	b29a      	uxth	r2, r3
 800c84a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c84c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c84e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c852:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	895b      	ldrh	r3, [r3, #10]
 800c85a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c85e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c862:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	6959      	ldr	r1, [r3, #20]
 800c86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c86e:	b29b      	uxth	r3, r3
 800c870:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c874:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c878:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c87c:	6800      	ldr	r0, [r0, #0]
 800c87e:	f001 f87d 	bl	800d97c <USB_WritePMA>
 800c882:	e227      	b.n	800ccd4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	6a1b      	ldr	r3, [r3, #32]
 800c890:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c898:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c89c:	681a      	ldr	r2, [r3, #0]
 800c89e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	4413      	add	r3, r2
 800c8ae:	881b      	ldrh	r3, [r3, #0]
 800c8b0:	b29b      	uxth	r3, r3
 800c8b2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c8b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ba:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c8be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	441a      	add	r2, r3
 800c8d8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c8dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c8f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c8fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c900:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c90a:	b29b      	uxth	r3, r3
 800c90c:	461a      	mov	r2, r3
 800c90e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c910:	4413      	add	r3, r2
 800c912:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	00da      	lsls	r2, r3, #3
 800c922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c924:	4413      	add	r3, r2
 800c926:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c92a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c930:	b29a      	uxth	r2, r3
 800c932:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c934:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c93a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	891b      	ldrh	r3, [r3, #8]
 800c942:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c94a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	6959      	ldr	r1, [r3, #20]
 800c952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c956:	b29b      	uxth	r3, r3
 800c958:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800c95c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c960:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c964:	6800      	ldr	r0, [r0, #0]
 800c966:	f001 f809 	bl	800d97c <USB_WritePMA>
 800c96a:	e1b3      	b.n	800ccd4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c96c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c970:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6a1a      	ldr	r2, [r3, #32]
 800c978:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c97c:	1ad2      	subs	r2, r2, r3
 800c97e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c98a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c98e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	881b      	ldrh	r3, [r3, #0]
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 80c6 	beq.w	800cb3e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c9b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	673b      	str	r3, [r7, #112]	@ 0x70
 800c9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	785b      	ldrb	r3, [r3, #1]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d177      	bne.n	800cabe <USB_EPStartXfer+0xb18>
 800c9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9ee:	4413      	add	r3, r2
 800c9f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	00da      	lsls	r2, r3, #3
 800ca00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ca02:	4413      	add	r3, r2
 800ca04:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ca08:	667b      	str	r3, [r7, #100]	@ 0x64
 800ca0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca0c:	881b      	ldrh	r3, [r3, #0]
 800ca0e:	b29b      	uxth	r3, r3
 800ca10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ca14:	b29a      	uxth	r2, r3
 800ca16:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca18:	801a      	strh	r2, [r3, #0]
 800ca1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca1e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca20:	d921      	bls.n	800ca66 <USB_EPStartXfer+0xac0>
 800ca22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca26:	095b      	lsrs	r3, r3, #5
 800ca28:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ca2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca30:	f003 031f 	and.w	r3, r3, #31
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d104      	bne.n	800ca42 <USB_EPStartXfer+0xa9c>
 800ca38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ca3c:	3b01      	subs	r3, #1
 800ca3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ca42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca44:	881b      	ldrh	r3, [r3, #0]
 800ca46:	b29a      	uxth	r2, r3
 800ca48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	029b      	lsls	r3, r3, #10
 800ca50:	b29b      	uxth	r3, r3
 800ca52:	4313      	orrs	r3, r2
 800ca54:	b29b      	uxth	r3, r3
 800ca56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca62:	801a      	strh	r2, [r3, #0]
 800ca64:	e050      	b.n	800cb08 <USB_EPStartXfer+0xb62>
 800ca66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10a      	bne.n	800ca84 <USB_EPStartXfer+0xade>
 800ca6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca70:	881b      	ldrh	r3, [r3, #0]
 800ca72:	b29b      	uxth	r3, r3
 800ca74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ca80:	801a      	strh	r2, [r3, #0]
 800ca82:	e041      	b.n	800cb08 <USB_EPStartXfer+0xb62>
 800ca84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca88:	085b      	lsrs	r3, r3, #1
 800ca8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ca8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca92:	f003 0301 	and.w	r3, r3, #1
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d004      	beq.n	800caa4 <USB_EPStartXfer+0xafe>
 800ca9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ca9e:	3301      	adds	r3, #1
 800caa0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800caa4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caa6:	881b      	ldrh	r3, [r3, #0]
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800caae:	b29b      	uxth	r3, r3
 800cab0:	029b      	lsls	r3, r3, #10
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	4313      	orrs	r3, r2
 800cab6:	b29a      	uxth	r2, r3
 800cab8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800caba:	801a      	strh	r2, [r3, #0]
 800cabc:	e024      	b.n	800cb08 <USB_EPStartXfer+0xb62>
 800cabe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	785b      	ldrb	r3, [r3, #1]
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d11c      	bne.n	800cb08 <USB_EPStartXfer+0xb62>
 800cace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cadc:	b29b      	uxth	r3, r3
 800cade:	461a      	mov	r2, r3
 800cae0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cae2:	4413      	add	r3, r2
 800cae4:	673b      	str	r3, [r7, #112]	@ 0x70
 800cae6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800caea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	781b      	ldrb	r3, [r3, #0]
 800caf2:	00da      	lsls	r2, r3, #3
 800caf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800caf6:	4413      	add	r3, r2
 800caf8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cafc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb02:	b29a      	uxth	r2, r3
 800cb04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cb06:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cb08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	895b      	ldrh	r3, [r3, #10]
 800cb14:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	6959      	ldr	r1, [r3, #20]
 800cb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb28:	b29b      	uxth	r3, r3
 800cb2a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cb2e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cb32:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cb36:	6800      	ldr	r0, [r0, #0]
 800cb38:	f000 ff20 	bl	800d97c <USB_WritePMA>
 800cb3c:	e0ca      	b.n	800ccd4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cb3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	785b      	ldrb	r3, [r3, #1]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d177      	bne.n	800cc3e <USB_EPStartXfer+0xc98>
 800cb4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cb6e:	4413      	add	r3, r2
 800cb70:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cb72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	781b      	ldrb	r3, [r3, #0]
 800cb7e:	00da      	lsls	r2, r3, #3
 800cb80:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cb82:	4413      	add	r3, r2
 800cb84:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cb88:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cb8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb8c:	881b      	ldrh	r3, [r3, #0]
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cb98:	801a      	strh	r2, [r3, #0]
 800cb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb9e:	2b3e      	cmp	r3, #62	@ 0x3e
 800cba0:	d921      	bls.n	800cbe6 <USB_EPStartXfer+0xc40>
 800cba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cba6:	095b      	lsrs	r3, r3, #5
 800cba8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb0:	f003 031f 	and.w	r3, r3, #31
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d104      	bne.n	800cbc2 <USB_EPStartXfer+0xc1c>
 800cbb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cbc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	029b      	lsls	r3, r3, #10
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbe2:	801a      	strh	r2, [r3, #0]
 800cbe4:	e05c      	b.n	800cca0 <USB_EPStartXfer+0xcfa>
 800cbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <USB_EPStartXfer+0xc5e>
 800cbee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cbf0:	881b      	ldrh	r3, [r3, #0]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbfc:	b29a      	uxth	r2, r3
 800cbfe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc00:	801a      	strh	r2, [r3, #0]
 800cc02:	e04d      	b.n	800cca0 <USB_EPStartXfer+0xcfa>
 800cc04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc08:	085b      	lsrs	r3, r3, #1
 800cc0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc12:	f003 0301 	and.w	r3, r3, #1
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d004      	beq.n	800cc24 <USB_EPStartXfer+0xc7e>
 800cc1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cc1e:	3301      	adds	r3, #1
 800cc20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800cc24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc26:	881b      	ldrh	r3, [r3, #0]
 800cc28:	b29a      	uxth	r2, r3
 800cc2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	029b      	lsls	r3, r3, #10
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	4313      	orrs	r3, r2
 800cc36:	b29a      	uxth	r2, r3
 800cc38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc3a:	801a      	strh	r2, [r3, #0]
 800cc3c:	e030      	b.n	800cca0 <USB_EPStartXfer+0xcfa>
 800cc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	785b      	ldrb	r3, [r3, #1]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d128      	bne.n	800cca0 <USB_EPStartXfer+0xcfa>
 800cc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc72:	4413      	add	r3, r2
 800cc74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	00da      	lsls	r2, r3, #3
 800cc86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cc8a:	4413      	add	r3, r2
 800cc8c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cc90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc98:	b29a      	uxth	r2, r3
 800cc9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cc9e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	891b      	ldrh	r3, [r3, #8]
 800ccac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ccb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	6959      	ldr	r1, [r3, #20]
 800ccbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ccc6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ccca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ccce:	6800      	ldr	r0, [r0, #0]
 800ccd0:	f000 fe54 	bl	800d97c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ccd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ccdc:	681a      	ldr	r2, [r3, #0]
 800ccde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cce2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	009b      	lsls	r3, r3, #2
 800ccec:	4413      	add	r3, r2
 800ccee:	881b      	ldrh	r3, [r3, #0]
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ccf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ccfa:	817b      	strh	r3, [r7, #10]
 800ccfc:	897b      	ldrh	r3, [r7, #10]
 800ccfe:	f083 0310 	eor.w	r3, r3, #16
 800cd02:	817b      	strh	r3, [r7, #10]
 800cd04:	897b      	ldrh	r3, [r7, #10]
 800cd06:	f083 0320 	eor.w	r3, r3, #32
 800cd0a:	817b      	strh	r3, [r7, #10]
 800cd0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	441a      	add	r2, r3
 800cd26:	897b      	ldrh	r3, [r7, #10]
 800cd28:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd2c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cd34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	8013      	strh	r3, [r2, #0]
 800cd3c:	f000 bcde 	b.w	800d6fc <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cd40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	7b1b      	ldrb	r3, [r3, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	f040 80bb 	bne.w	800cec8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cd52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	699a      	ldr	r2, [r3, #24]
 800cd5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	691b      	ldr	r3, [r3, #16]
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d917      	bls.n	800cd9e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800cd6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	691b      	ldr	r3, [r3, #16]
 800cd7a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800cd7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	699a      	ldr	r2, [r3, #24]
 800cd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd8e:	1ad2      	subs	r2, r2, r3
 800cd90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	619a      	str	r2, [r3, #24]
 800cd9c:	e00e      	b.n	800cdbc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800cd9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cda2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	699b      	ldr	r3, [r3, #24]
 800cdaa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800cdae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cdbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdc0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cdca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	461a      	mov	r2, r3
 800cddc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cde0:	4413      	add	r3, r2
 800cde2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cde6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cdea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	00da      	lsls	r2, r3, #3
 800cdf4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800cdf8:	4413      	add	r3, r2
 800cdfa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cdfe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ce02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce14:	801a      	strh	r2, [r3, #0]
 800ce16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce1a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce1c:	d924      	bls.n	800ce68 <USB_EPStartXfer+0xec2>
 800ce1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce22:	095b      	lsrs	r3, r3, #5
 800ce24:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ce28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce2c:	f003 031f 	and.w	r3, r3, #31
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d104      	bne.n	800ce3e <USB_EPStartXfer+0xe98>
 800ce34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ce38:	3b01      	subs	r3, #1
 800ce3a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ce3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	b29a      	uxth	r2, r3
 800ce46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	029b      	lsls	r3, r3, #10
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	4313      	orrs	r3, r2
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce5c:	b29a      	uxth	r2, r3
 800ce5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce62:	801a      	strh	r2, [r3, #0]
 800ce64:	f000 bc10 	b.w	800d688 <USB_EPStartXfer+0x16e2>
 800ce68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d10c      	bne.n	800ce8a <USB_EPStartXfer+0xee4>
 800ce70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce74:	881b      	ldrh	r3, [r3, #0]
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ce86:	801a      	strh	r2, [r3, #0]
 800ce88:	e3fe      	b.n	800d688 <USB_EPStartXfer+0x16e2>
 800ce8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce8e:	085b      	lsrs	r3, r3, #1
 800ce90:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ce94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce98:	f003 0301 	and.w	r3, r3, #1
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d004      	beq.n	800ceaa <USB_EPStartXfer+0xf04>
 800cea0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800cea4:	3301      	adds	r3, #1
 800cea6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800ceaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	b29a      	uxth	r2, r3
 800ceb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	029b      	lsls	r3, r3, #10
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	4313      	orrs	r3, r2
 800cebe:	b29a      	uxth	r2, r3
 800cec0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cec4:	801a      	strh	r2, [r3, #0]
 800cec6:	e3df      	b.n	800d688 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	78db      	ldrb	r3, [r3, #3]
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	f040 8218 	bne.w	800d30a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ceda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	785b      	ldrb	r3, [r3, #1]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f040 809d 	bne.w	800d026 <USB_EPStartXfer+0x1080>
 800ceec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cef0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cefa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cefe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf08:	b29b      	uxth	r3, r3
 800cf0a:	461a      	mov	r2, r3
 800cf0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf10:	4413      	add	r3, r2
 800cf12:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cf16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	00da      	lsls	r2, r3, #3
 800cf24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf28:	4413      	add	r3, r2
 800cf2a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cf32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf36:	881b      	ldrh	r3, [r3, #0]
 800cf38:	b29b      	uxth	r3, r3
 800cf3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf3e:	b29a      	uxth	r2, r3
 800cf40:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf44:	801a      	strh	r2, [r3, #0]
 800cf46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf54:	d92b      	bls.n	800cfae <USB_EPStartXfer+0x1008>
 800cf56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	691b      	ldr	r3, [r3, #16]
 800cf62:	095b      	lsrs	r3, r3, #5
 800cf64:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	691b      	ldr	r3, [r3, #16]
 800cf74:	f003 031f 	and.w	r3, r3, #31
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d104      	bne.n	800cf86 <USB_EPStartXfer+0xfe0>
 800cf7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf80:	3b01      	subs	r3, #1
 800cf82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cf86:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	029b      	lsls	r3, r3, #10
 800cf96:	b29b      	uxth	r3, r3
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cfaa:	801a      	strh	r2, [r3, #0]
 800cfac:	e070      	b.n	800d090 <USB_EPStartXfer+0x10ea>
 800cfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	691b      	ldr	r3, [r3, #16]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d10c      	bne.n	800cfd8 <USB_EPStartXfer+0x1032>
 800cfbe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cfc2:	881b      	ldrh	r3, [r3, #0]
 800cfc4:	b29b      	uxth	r3, r3
 800cfc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cfd4:	801a      	strh	r2, [r3, #0]
 800cfd6:	e05b      	b.n	800d090 <USB_EPStartXfer+0x10ea>
 800cfd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	691b      	ldr	r3, [r3, #16]
 800cfe4:	085b      	lsrs	r3, r3, #1
 800cfe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cfea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	f003 0301 	and.w	r3, r3, #1
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d004      	beq.n	800d008 <USB_EPStartXfer+0x1062>
 800cffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d002:	3301      	adds	r3, #1
 800d004:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	b29a      	uxth	r2, r3
 800d010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d014:	b29b      	uxth	r3, r3
 800d016:	029b      	lsls	r3, r3, #10
 800d018:	b29b      	uxth	r3, r3
 800d01a:	4313      	orrs	r3, r2
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d022:	801a      	strh	r2, [r3, #0]
 800d024:	e034      	b.n	800d090 <USB_EPStartXfer+0x10ea>
 800d026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	785b      	ldrb	r3, [r3, #1]
 800d032:	2b01      	cmp	r3, #1
 800d034:	d12c      	bne.n	800d090 <USB_EPStartXfer+0x10ea>
 800d036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d03a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d048:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d052:	b29b      	uxth	r3, r3
 800d054:	461a      	mov	r2, r3
 800d056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d05a:	4413      	add	r3, r2
 800d05c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d060:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d064:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	00da      	lsls	r2, r3, #3
 800d06e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d072:	4413      	add	r3, r2
 800d074:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d078:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	691b      	ldr	r3, [r3, #16]
 800d088:	b29a      	uxth	r2, r3
 800d08a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800d08e:	801a      	strh	r2, [r3, #0]
 800d090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	785b      	ldrb	r3, [r3, #1]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f040 809d 	bne.w	800d1ea <USB_EPStartXfer+0x1244>
 800d0b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d0be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d0d4:	4413      	add	r3, r2
 800d0d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d0da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	00da      	lsls	r2, r3, #3
 800d0e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d0ec:	4413      	add	r3, r2
 800d0ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d0f2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d0f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d0fa:	881b      	ldrh	r3, [r3, #0]
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d102:	b29a      	uxth	r2, r3
 800d104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d108:	801a      	strh	r2, [r3, #0]
 800d10a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d10e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	2b3e      	cmp	r3, #62	@ 0x3e
 800d118:	d92b      	bls.n	800d172 <USB_EPStartXfer+0x11cc>
 800d11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d11e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	691b      	ldr	r3, [r3, #16]
 800d126:	095b      	lsrs	r3, r3, #5
 800d128:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	691b      	ldr	r3, [r3, #16]
 800d138:	f003 031f 	and.w	r3, r3, #31
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d104      	bne.n	800d14a <USB_EPStartXfer+0x11a4>
 800d140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d144:	3b01      	subs	r3, #1
 800d146:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d14a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	b29a      	uxth	r2, r3
 800d152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d156:	b29b      	uxth	r3, r3
 800d158:	029b      	lsls	r3, r3, #10
 800d15a:	b29b      	uxth	r3, r3
 800d15c:	4313      	orrs	r3, r2
 800d15e:	b29b      	uxth	r3, r3
 800d160:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d164:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d168:	b29a      	uxth	r2, r3
 800d16a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d16e:	801a      	strh	r2, [r3, #0]
 800d170:	e069      	b.n	800d246 <USB_EPStartXfer+0x12a0>
 800d172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d10c      	bne.n	800d19c <USB_EPStartXfer+0x11f6>
 800d182:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d186:	881b      	ldrh	r3, [r3, #0]
 800d188:	b29b      	uxth	r3, r3
 800d18a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d18e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d192:	b29a      	uxth	r2, r3
 800d194:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d198:	801a      	strh	r2, [r3, #0]
 800d19a:	e054      	b.n	800d246 <USB_EPStartXfer+0x12a0>
 800d19c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	085b      	lsrs	r3, r3, #1
 800d1aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d1ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	691b      	ldr	r3, [r3, #16]
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d004      	beq.n	800d1cc <USB_EPStartXfer+0x1226>
 800d1c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d1cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1d0:	881b      	ldrh	r3, [r3, #0]
 800d1d2:	b29a      	uxth	r2, r3
 800d1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	029b      	lsls	r3, r3, #10
 800d1dc:	b29b      	uxth	r3, r3
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1e6:	801a      	strh	r2, [r3, #0]
 800d1e8:	e02d      	b.n	800d246 <USB_EPStartXfer+0x12a0>
 800d1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	785b      	ldrb	r3, [r3, #1]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d125      	bne.n	800d246 <USB_EPStartXfer+0x12a0>
 800d1fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d208:	b29b      	uxth	r3, r3
 800d20a:	461a      	mov	r2, r3
 800d20c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d210:	4413      	add	r3, r2
 800d212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d216:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d21a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	00da      	lsls	r2, r3, #3
 800d224:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d228:	4413      	add	r3, r2
 800d22a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d22e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d236:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	691b      	ldr	r3, [r3, #16]
 800d23e:	b29a      	uxth	r2, r3
 800d240:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d244:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 8218 	beq.w	800d688 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d266:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d278:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d27c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d280:	2b00      	cmp	r3, #0
 800d282:	d005      	beq.n	800d290 <USB_EPStartXfer+0x12ea>
 800d284:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d10d      	bne.n	800d2ac <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d290:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d298:	2b00      	cmp	r3, #0
 800d29a:	f040 81f5 	bne.w	800d688 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d29e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800d2a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	f040 81ee 	bne.w	800d688 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	781b      	ldrb	r3, [r3, #0]
 800d2c2:	009b      	lsls	r3, r3, #2
 800d2c4:	4413      	add	r3, r2
 800d2c6:	881b      	ldrh	r3, [r3, #0]
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2d2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800d2d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d2de:	681a      	ldr	r2, [r3, #0]
 800d2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	441a      	add	r2, r3
 800d2f0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800d2f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d300:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d304:	b29b      	uxth	r3, r3
 800d306:	8013      	strh	r3, [r2, #0]
 800d308:	e1be      	b.n	800d688 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	78db      	ldrb	r3, [r3, #3]
 800d316:	2b01      	cmp	r3, #1
 800d318:	f040 81b4 	bne.w	800d684 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	699a      	ldr	r2, [r3, #24]
 800d328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d32c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	429a      	cmp	r2, r3
 800d336:	d917      	bls.n	800d368 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800d338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d33c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	691b      	ldr	r3, [r3, #16]
 800d344:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800d348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	699a      	ldr	r2, [r3, #24]
 800d354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d358:	1ad2      	subs	r2, r2, r3
 800d35a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d35e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	619a      	str	r2, [r3, #24]
 800d366:	e00e      	b.n	800d386 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800d368:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d36c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	699b      	ldr	r3, [r3, #24]
 800d374:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800d378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d37c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2200      	movs	r2, #0
 800d384:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	785b      	ldrb	r3, [r3, #1]
 800d392:	2b00      	cmp	r3, #0
 800d394:	f040 8085 	bne.w	800d4a2 <USB_EPStartXfer+0x14fc>
 800d398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d39c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	461a      	mov	r2, r3
 800d3b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d3bc:	4413      	add	r3, r2
 800d3be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	781b      	ldrb	r3, [r3, #0]
 800d3ce:	00da      	lsls	r2, r3, #3
 800d3d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800d3d4:	4413      	add	r3, r2
 800d3d6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d3da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d3de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3e2:	881b      	ldrh	r3, [r3, #0]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3ea:	b29a      	uxth	r2, r3
 800d3ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d3f0:	801a      	strh	r2, [r3, #0]
 800d3f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3f6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3f8:	d923      	bls.n	800d442 <USB_EPStartXfer+0x149c>
 800d3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3fe:	095b      	lsrs	r3, r3, #5
 800d400:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d408:	f003 031f 	and.w	r3, r3, #31
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d104      	bne.n	800d41a <USB_EPStartXfer+0x1474>
 800d410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d414:	3b01      	subs	r3, #1
 800d416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d41a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	b29a      	uxth	r2, r3
 800d422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d426:	b29b      	uxth	r3, r3
 800d428:	029b      	lsls	r3, r3, #10
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	4313      	orrs	r3, r2
 800d42e:	b29b      	uxth	r3, r3
 800d430:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d434:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d438:	b29a      	uxth	r2, r3
 800d43a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d43e:	801a      	strh	r2, [r3, #0]
 800d440:	e060      	b.n	800d504 <USB_EPStartXfer+0x155e>
 800d442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10c      	bne.n	800d464 <USB_EPStartXfer+0x14be>
 800d44a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d44e:	881b      	ldrh	r3, [r3, #0]
 800d450:	b29b      	uxth	r3, r3
 800d452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d460:	801a      	strh	r2, [r3, #0]
 800d462:	e04f      	b.n	800d504 <USB_EPStartXfer+0x155e>
 800d464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d468:	085b      	lsrs	r3, r3, #1
 800d46a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	2b00      	cmp	r3, #0
 800d478:	d004      	beq.n	800d484 <USB_EPStartXfer+0x14de>
 800d47a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d47e:	3301      	adds	r3, #1
 800d480:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d484:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d488:	881b      	ldrh	r3, [r3, #0]
 800d48a:	b29a      	uxth	r2, r3
 800d48c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d490:	b29b      	uxth	r3, r3
 800d492:	029b      	lsls	r3, r3, #10
 800d494:	b29b      	uxth	r3, r3
 800d496:	4313      	orrs	r3, r2
 800d498:	b29a      	uxth	r2, r3
 800d49a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800d49e:	801a      	strh	r2, [r3, #0]
 800d4a0:	e030      	b.n	800d504 <USB_EPStartXfer+0x155e>
 800d4a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	785b      	ldrb	r3, [r3, #1]
 800d4ae:	2b01      	cmp	r3, #1
 800d4b0:	d128      	bne.n	800d504 <USB_EPStartXfer+0x155e>
 800d4b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d4c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4ce:	b29b      	uxth	r3, r3
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4d6:	4413      	add	r3, r2
 800d4d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	00da      	lsls	r2, r3, #3
 800d4ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d4f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800d502:	801a      	strh	r2, [r3, #0]
 800d504:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d508:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	785b      	ldrb	r3, [r3, #1]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f040 8085 	bne.w	800d62e <USB_EPStartXfer+0x1688>
 800d524:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d528:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d532:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d536:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d540:	b29b      	uxth	r3, r3
 800d542:	461a      	mov	r2, r3
 800d544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d548:	4413      	add	r3, r2
 800d54a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	781b      	ldrb	r3, [r3, #0]
 800d55a:	00da      	lsls	r2, r3, #3
 800d55c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800d560:	4413      	add	r3, r2
 800d562:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d56a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d56e:	881b      	ldrh	r3, [r3, #0]
 800d570:	b29b      	uxth	r3, r3
 800d572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d576:	b29a      	uxth	r2, r3
 800d578:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d57c:	801a      	strh	r2, [r3, #0]
 800d57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d582:	2b3e      	cmp	r3, #62	@ 0x3e
 800d584:	d923      	bls.n	800d5ce <USB_EPStartXfer+0x1628>
 800d586:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d58a:	095b      	lsrs	r3, r3, #5
 800d58c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d594:	f003 031f 	and.w	r3, r3, #31
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d104      	bne.n	800d5a6 <USB_EPStartXfer+0x1600>
 800d59c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d5a0:	3b01      	subs	r3, #1
 800d5a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d5a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	b29a      	uxth	r2, r3
 800d5ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d5b2:	b29b      	uxth	r3, r3
 800d5b4:	029b      	lsls	r3, r3, #10
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5c4:	b29a      	uxth	r2, r3
 800d5c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d5ca:	801a      	strh	r2, [r3, #0]
 800d5cc:	e05c      	b.n	800d688 <USB_EPStartXfer+0x16e2>
 800d5ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10c      	bne.n	800d5f0 <USB_EPStartXfer+0x164a>
 800d5d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d5da:	881b      	ldrh	r3, [r3, #0]
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5e6:	b29a      	uxth	r2, r3
 800d5e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d5ec:	801a      	strh	r2, [r3, #0]
 800d5ee:	e04b      	b.n	800d688 <USB_EPStartXfer+0x16e2>
 800d5f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5f4:	085b      	lsrs	r3, r3, #1
 800d5f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5fe:	f003 0301 	and.w	r3, r3, #1
 800d602:	2b00      	cmp	r3, #0
 800d604:	d004      	beq.n	800d610 <USB_EPStartXfer+0x166a>
 800d606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d60a:	3301      	adds	r3, #1
 800d60c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d610:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d614:	881b      	ldrh	r3, [r3, #0]
 800d616:	b29a      	uxth	r2, r3
 800d618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	029b      	lsls	r3, r3, #10
 800d620:	b29b      	uxth	r3, r3
 800d622:	4313      	orrs	r3, r2
 800d624:	b29a      	uxth	r2, r3
 800d626:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800d62a:	801a      	strh	r2, [r3, #0]
 800d62c:	e02c      	b.n	800d688 <USB_EPStartXfer+0x16e2>
 800d62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	785b      	ldrb	r3, [r3, #1]
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	d124      	bne.n	800d688 <USB_EPStartXfer+0x16e2>
 800d63e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d642:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	461a      	mov	r2, r3
 800d650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d654:	4413      	add	r3, r2
 800d656:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	00da      	lsls	r2, r3, #3
 800d668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800d66c:	4413      	add	r3, r2
 800d66e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d672:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d67a:	b29a      	uxth	r2, r3
 800d67c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800d680:	801a      	strh	r2, [r3, #0]
 800d682:	e001      	b.n	800d688 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800d684:	2301      	movs	r3, #1
 800d686:	e03a      	b.n	800d6fe <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d68c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d690:	681a      	ldr	r2, [r3, #0]
 800d692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	781b      	ldrb	r3, [r3, #0]
 800d69e:	009b      	lsls	r3, r3, #2
 800d6a0:	4413      	add	r3, r2
 800d6a2:	881b      	ldrh	r3, [r3, #0]
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6ae:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d6b2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d6b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d6ba:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d6be:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d6c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d6c6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6d2:	681a      	ldr	r2, [r3, #0]
 800d6d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	009b      	lsls	r3, r3, #2
 800d6e2:	441a      	add	r2, r3
 800d6e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d6e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6f8:	b29b      	uxth	r3, r3
 800d6fa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d6fc:	2300      	movs	r3, #0
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d712:	683b      	ldr	r3, [r7, #0]
 800d714:	785b      	ldrb	r3, [r3, #1]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d020      	beq.n	800d75c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d71a:	687a      	ldr	r2, [r7, #4]
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	009b      	lsls	r3, r3, #2
 800d722:	4413      	add	r3, r2
 800d724:	881b      	ldrh	r3, [r3, #0]
 800d726:	b29b      	uxth	r3, r3
 800d728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d72c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d730:	81bb      	strh	r3, [r7, #12]
 800d732:	89bb      	ldrh	r3, [r7, #12]
 800d734:	f083 0310 	eor.w	r3, r3, #16
 800d738:	81bb      	strh	r3, [r7, #12]
 800d73a:	687a      	ldr	r2, [r7, #4]
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	441a      	add	r2, r3
 800d744:	89bb      	ldrh	r3, [r7, #12]
 800d746:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d74a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d74e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d756:	b29b      	uxth	r3, r3
 800d758:	8013      	strh	r3, [r2, #0]
 800d75a:	e01f      	b.n	800d79c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d772:	81fb      	strh	r3, [r7, #14]
 800d774:	89fb      	ldrh	r3, [r7, #14]
 800d776:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d77a:	81fb      	strh	r3, [r7, #14]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	441a      	add	r2, r3
 800d786:	89fb      	ldrh	r3, [r7, #14]
 800d788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d78c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d798:	b29b      	uxth	r3, r3
 800d79a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3714      	adds	r7, #20
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a8:	4770      	bx	lr

0800d7aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d7aa:	b480      	push	{r7}
 800d7ac:	b087      	sub	sp, #28
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
 800d7b2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	7b1b      	ldrb	r3, [r3, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	f040 809d 	bne.w	800d8f8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	785b      	ldrb	r3, [r3, #1]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d04c      	beq.n	800d860 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	881b      	ldrh	r3, [r3, #0]
 800d7d2:	823b      	strh	r3, [r7, #16]
 800d7d4:	8a3b      	ldrh	r3, [r7, #16]
 800d7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d01b      	beq.n	800d816 <USB_EPClearStall+0x6c>
 800d7de:	687a      	ldr	r2, [r7, #4]
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	009b      	lsls	r3, r3, #2
 800d7e6:	4413      	add	r3, r2
 800d7e8:	881b      	ldrh	r3, [r3, #0]
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7f4:	81fb      	strh	r3, [r7, #14]
 800d7f6:	687a      	ldr	r2, [r7, #4]
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	009b      	lsls	r3, r3, #2
 800d7fe:	441a      	add	r2, r3
 800d800:	89fb      	ldrh	r3, [r7, #14]
 800d802:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d806:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d80a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d80e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d812:	b29b      	uxth	r3, r3
 800d814:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	78db      	ldrb	r3, [r3, #3]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d06c      	beq.n	800d8f8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4413      	add	r3, r2
 800d828:	881b      	ldrh	r3, [r3, #0]
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d830:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d834:	81bb      	strh	r3, [r7, #12]
 800d836:	89bb      	ldrh	r3, [r7, #12]
 800d838:	f083 0320 	eor.w	r3, r3, #32
 800d83c:	81bb      	strh	r3, [r7, #12]
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	009b      	lsls	r3, r3, #2
 800d846:	441a      	add	r2, r3
 800d848:	89bb      	ldrh	r3, [r7, #12]
 800d84a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d84e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d852:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	8013      	strh	r3, [r2, #0]
 800d85e:	e04b      	b.n	800d8f8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4413      	add	r3, r2
 800d86a:	881b      	ldrh	r3, [r3, #0]
 800d86c:	82fb      	strh	r3, [r7, #22]
 800d86e:	8afb      	ldrh	r3, [r7, #22]
 800d870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d874:	2b00      	cmp	r3, #0
 800d876:	d01b      	beq.n	800d8b0 <USB_EPClearStall+0x106>
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4413      	add	r3, r2
 800d882:	881b      	ldrh	r3, [r3, #0]
 800d884:	b29b      	uxth	r3, r3
 800d886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d88a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d88e:	82bb      	strh	r3, [r7, #20]
 800d890:	687a      	ldr	r2, [r7, #4]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	441a      	add	r2, r3
 800d89a:	8abb      	ldrh	r3, [r7, #20]
 800d89c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8a0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d8a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ac:	b29b      	uxth	r3, r3
 800d8ae:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4413      	add	r3, r2
 800d8ba:	881b      	ldrh	r3, [r3, #0]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d8c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8c6:	827b      	strh	r3, [r7, #18]
 800d8c8:	8a7b      	ldrh	r3, [r7, #18]
 800d8ca:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d8ce:	827b      	strh	r3, [r7, #18]
 800d8d0:	8a7b      	ldrh	r3, [r7, #18]
 800d8d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d8d6:	827b      	strh	r3, [r7, #18]
 800d8d8:	687a      	ldr	r2, [r7, #4]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	441a      	add	r2, r3
 800d8e2:	8a7b      	ldrh	r3, [r7, #18]
 800d8e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8f4:	b29b      	uxth	r3, r3
 800d8f6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d8f8:	2300      	movs	r3, #0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	371c      	adds	r7, #28
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
 800d90e:	460b      	mov	r3, r1
 800d910:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d912:	78fb      	ldrb	r3, [r7, #3]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d103      	bne.n	800d920 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2280      	movs	r2, #128	@ 0x80
 800d91c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d920:	2300      	movs	r3, #0
}
 800d922:	4618      	mov	r0, r3
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800d93c:	b29b      	uxth	r3, r3
 800d93e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d942:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d946:	b29a      	uxth	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	370c      	adds	r7, #12
 800d954:	46bd      	mov	sp, r7
 800d956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d95a:	4770      	bx	lr

0800d95c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d96e:	68fb      	ldr	r3, [r7, #12]
}
 800d970:	4618      	mov	r0, r3
 800d972:	3714      	adds	r7, #20
 800d974:	46bd      	mov	sp, r7
 800d976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97a:	4770      	bx	lr

0800d97c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b08b      	sub	sp, #44	@ 0x2c
 800d980:	af00      	add	r7, sp, #0
 800d982:	60f8      	str	r0, [r7, #12]
 800d984:	60b9      	str	r1, [r7, #8]
 800d986:	4611      	mov	r1, r2
 800d988:	461a      	mov	r2, r3
 800d98a:	460b      	mov	r3, r1
 800d98c:	80fb      	strh	r3, [r7, #6]
 800d98e:	4613      	mov	r3, r2
 800d990:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d992:	88bb      	ldrh	r3, [r7, #4]
 800d994:	3301      	adds	r3, #1
 800d996:	085b      	lsrs	r3, r3, #1
 800d998:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d9a2:	88fa      	ldrh	r2, [r7, #6]
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9ac:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800d9ae:	69bb      	ldr	r3, [r7, #24]
 800d9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9b2:	e01b      	b.n	800d9ec <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800d9ba:	69fb      	ldr	r3, [r7, #28]
 800d9bc:	3301      	adds	r3, #1
 800d9be:	781b      	ldrb	r3, [r3, #0]
 800d9c0:	021b      	lsls	r3, r3, #8
 800d9c2:	b21a      	sxth	r2, r3
 800d9c4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d9c8:	4313      	orrs	r3, r2
 800d9ca:	b21b      	sxth	r3, r3
 800d9cc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800d9ce:	6a3b      	ldr	r3, [r7, #32]
 800d9d0:	8a7a      	ldrh	r2, [r7, #18]
 800d9d2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	3302      	adds	r3, #2
 800d9d8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d9da:	69fb      	ldr	r3, [r7, #28]
 800d9dc:	3301      	adds	r3, #1
 800d9de:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800d9e0:	69fb      	ldr	r3, [r7, #28]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800d9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d1e0      	bne.n	800d9b4 <USB_WritePMA+0x38>
  }
}
 800d9f2:	bf00      	nop
 800d9f4:	bf00      	nop
 800d9f6:	372c      	adds	r7, #44	@ 0x2c
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800da00:	b480      	push	{r7}
 800da02:	b08b      	sub	sp, #44	@ 0x2c
 800da04:	af00      	add	r7, sp, #0
 800da06:	60f8      	str	r0, [r7, #12]
 800da08:	60b9      	str	r1, [r7, #8]
 800da0a:	4611      	mov	r1, r2
 800da0c:	461a      	mov	r2, r3
 800da0e:	460b      	mov	r3, r1
 800da10:	80fb      	strh	r3, [r7, #6]
 800da12:	4613      	mov	r3, r2
 800da14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800da16:	88bb      	ldrh	r3, [r7, #4]
 800da18:	085b      	lsrs	r3, r3, #1
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800da26:	88fa      	ldrh	r2, [r7, #6]
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	4413      	add	r3, r2
 800da2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	627b      	str	r3, [r7, #36]	@ 0x24
 800da36:	e018      	b.n	800da6a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800da38:	6a3b      	ldr	r3, [r7, #32]
 800da3a:	881b      	ldrh	r3, [r3, #0]
 800da3c:	b29b      	uxth	r3, r3
 800da3e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800da40:	6a3b      	ldr	r3, [r7, #32]
 800da42:	3302      	adds	r3, #2
 800da44:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800da46:	693b      	ldr	r3, [r7, #16]
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	69fb      	ldr	r3, [r7, #28]
 800da4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	3301      	adds	r3, #1
 800da52:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	0a1b      	lsrs	r3, r3, #8
 800da58:	b2da      	uxtb	r2, r3
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800da5e:	69fb      	ldr	r3, [r7, #28]
 800da60:	3301      	adds	r3, #1
 800da62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800da64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da66:	3b01      	subs	r3, #1
 800da68:	627b      	str	r3, [r7, #36]	@ 0x24
 800da6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d1e3      	bne.n	800da38 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800da70:	88bb      	ldrh	r3, [r7, #4]
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	b29b      	uxth	r3, r3
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d007      	beq.n	800da8c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800da7c:	6a3b      	ldr	r3, [r7, #32]
 800da7e:	881b      	ldrh	r3, [r3, #0]
 800da80:	b29b      	uxth	r3, r3
 800da82:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	b2da      	uxtb	r2, r3
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	701a      	strb	r2, [r3, #0]
  }
}
 800da8c:	bf00      	nop
 800da8e:	372c      	adds	r7, #44	@ 0x2c
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr

0800da98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b084      	sub	sp, #16
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
 800daa0:	460b      	mov	r3, r1
 800daa2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800daa4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800daa8:	f007 fc68 	bl	801537c <USBD_static_malloc>
 800daac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d109      	bne.n	800dac8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	32b0      	adds	r2, #176	@ 0xb0
 800dabe:	2100      	movs	r1, #0
 800dac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dac4:	2302      	movs	r3, #2
 800dac6:	e0d4      	b.n	800dc72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dac8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800dacc:	2100      	movs	r1, #0
 800dace:	68f8      	ldr	r0, [r7, #12]
 800dad0:	f008 f964 	bl	8015d9c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	32b0      	adds	r2, #176	@ 0xb0
 800dade:	68f9      	ldr	r1, [r7, #12]
 800dae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	32b0      	adds	r2, #176	@ 0xb0
 800daee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7c1b      	ldrb	r3, [r3, #16]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d138      	bne.n	800db72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db00:	4b5e      	ldr	r3, [pc, #376]	@ (800dc7c <USBD_CDC_Init+0x1e4>)
 800db02:	7819      	ldrb	r1, [r3, #0]
 800db04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db08:	2202      	movs	r2, #2
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f007 fadd 	bl	80150ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db10:	4b5a      	ldr	r3, [pc, #360]	@ (800dc7c <USBD_CDC_Init+0x1e4>)
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	f003 020f 	and.w	r2, r3, #15
 800db18:	6879      	ldr	r1, [r7, #4]
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	440b      	add	r3, r1
 800db24:	3324      	adds	r3, #36	@ 0x24
 800db26:	2201      	movs	r2, #1
 800db28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db2a:	4b55      	ldr	r3, [pc, #340]	@ (800dc80 <USBD_CDC_Init+0x1e8>)
 800db2c:	7819      	ldrb	r1, [r3, #0]
 800db2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800db32:	2202      	movs	r2, #2
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f007 fac8 	bl	80150ca <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800db3a:	4b51      	ldr	r3, [pc, #324]	@ (800dc80 <USBD_CDC_Init+0x1e8>)
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	f003 020f 	and.w	r2, r3, #15
 800db42:	6879      	ldr	r1, [r7, #4]
 800db44:	4613      	mov	r3, r2
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	4413      	add	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	440b      	add	r3, r1
 800db4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800db52:	2201      	movs	r2, #1
 800db54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800db56:	4b4b      	ldr	r3, [pc, #300]	@ (800dc84 <USBD_CDC_Init+0x1ec>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	f003 020f 	and.w	r2, r3, #15
 800db5e:	6879      	ldr	r1, [r7, #4]
 800db60:	4613      	mov	r3, r2
 800db62:	009b      	lsls	r3, r3, #2
 800db64:	4413      	add	r3, r2
 800db66:	009b      	lsls	r3, r3, #2
 800db68:	440b      	add	r3, r1
 800db6a:	3326      	adds	r3, #38	@ 0x26
 800db6c:	2210      	movs	r2, #16
 800db6e:	801a      	strh	r2, [r3, #0]
 800db70:	e035      	b.n	800dbde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800db72:	4b42      	ldr	r3, [pc, #264]	@ (800dc7c <USBD_CDC_Init+0x1e4>)
 800db74:	7819      	ldrb	r1, [r3, #0]
 800db76:	2340      	movs	r3, #64	@ 0x40
 800db78:	2202      	movs	r2, #2
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f007 faa5 	bl	80150ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800db80:	4b3e      	ldr	r3, [pc, #248]	@ (800dc7c <USBD_CDC_Init+0x1e4>)
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	f003 020f 	and.w	r2, r3, #15
 800db88:	6879      	ldr	r1, [r7, #4]
 800db8a:	4613      	mov	r3, r2
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	4413      	add	r3, r2
 800db90:	009b      	lsls	r3, r3, #2
 800db92:	440b      	add	r3, r1
 800db94:	3324      	adds	r3, #36	@ 0x24
 800db96:	2201      	movs	r2, #1
 800db98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800db9a:	4b39      	ldr	r3, [pc, #228]	@ (800dc80 <USBD_CDC_Init+0x1e8>)
 800db9c:	7819      	ldrb	r1, [r3, #0]
 800db9e:	2340      	movs	r3, #64	@ 0x40
 800dba0:	2202      	movs	r2, #2
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f007 fa91 	bl	80150ca <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dba8:	4b35      	ldr	r3, [pc, #212]	@ (800dc80 <USBD_CDC_Init+0x1e8>)
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	f003 020f 	and.w	r2, r3, #15
 800dbb0:	6879      	ldr	r1, [r7, #4]
 800dbb2:	4613      	mov	r3, r2
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	4413      	add	r3, r2
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	440b      	add	r3, r1
 800dbbc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dbc0:	2201      	movs	r2, #1
 800dbc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dbc4:	4b2f      	ldr	r3, [pc, #188]	@ (800dc84 <USBD_CDC_Init+0x1ec>)
 800dbc6:	781b      	ldrb	r3, [r3, #0]
 800dbc8:	f003 020f 	and.w	r2, r3, #15
 800dbcc:	6879      	ldr	r1, [r7, #4]
 800dbce:	4613      	mov	r3, r2
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	4413      	add	r3, r2
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	440b      	add	r3, r1
 800dbd8:	3326      	adds	r3, #38	@ 0x26
 800dbda:	2210      	movs	r2, #16
 800dbdc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dbde:	4b29      	ldr	r3, [pc, #164]	@ (800dc84 <USBD_CDC_Init+0x1ec>)
 800dbe0:	7819      	ldrb	r1, [r3, #0]
 800dbe2:	2308      	movs	r3, #8
 800dbe4:	2203      	movs	r2, #3
 800dbe6:	6878      	ldr	r0, [r7, #4]
 800dbe8:	f007 fa6f 	bl	80150ca <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dbec:	4b25      	ldr	r3, [pc, #148]	@ (800dc84 <USBD_CDC_Init+0x1ec>)
 800dbee:	781b      	ldrb	r3, [r3, #0]
 800dbf0:	f003 020f 	and.w	r2, r3, #15
 800dbf4:	6879      	ldr	r1, [r7, #4]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	4413      	add	r3, r2
 800dbfc:	009b      	lsls	r3, r3, #2
 800dbfe:	440b      	add	r3, r1
 800dc00:	3324      	adds	r3, #36	@ 0x24
 800dc02:	2201      	movs	r2, #1
 800dc04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	33b0      	adds	r3, #176	@ 0xb0
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2200      	movs	r2, #0
 800dc26:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d101      	bne.n	800dc40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dc3c:	2302      	movs	r3, #2
 800dc3e:	e018      	b.n	800dc72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	7c1b      	ldrb	r3, [r3, #16]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d10a      	bne.n	800dc5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc48:	4b0d      	ldr	r3, [pc, #52]	@ (800dc80 <USBD_CDC_Init+0x1e8>)
 800dc4a:	7819      	ldrb	r1, [r3, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f007 fb26 	bl	80152a8 <USBD_LL_PrepareReceive>
 800dc5c:	e008      	b.n	800dc70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dc5e:	4b08      	ldr	r3, [pc, #32]	@ (800dc80 <USBD_CDC_Init+0x1e8>)
 800dc60:	7819      	ldrb	r1, [r3, #0]
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dc68:	2340      	movs	r3, #64	@ 0x40
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f007 fb1c 	bl	80152a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dc70:	2300      	movs	r3, #0
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3710      	adds	r7, #16
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	2000009f 	.word	0x2000009f
 800dc80:	200000a0 	.word	0x200000a0
 800dc84:	200000a1 	.word	0x200000a1

0800dc88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dc94:	4b3a      	ldr	r3, [pc, #232]	@ (800dd80 <USBD_CDC_DeInit+0xf8>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f007 fa3b 	bl	8015116 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dca0:	4b37      	ldr	r3, [pc, #220]	@ (800dd80 <USBD_CDC_DeInit+0xf8>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 020f 	and.w	r2, r3, #15
 800dca8:	6879      	ldr	r1, [r7, #4]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	4413      	add	r3, r2
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	440b      	add	r3, r1
 800dcb4:	3324      	adds	r3, #36	@ 0x24
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dcba:	4b32      	ldr	r3, [pc, #200]	@ (800dd84 <USBD_CDC_DeInit+0xfc>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f007 fa28 	bl	8015116 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dcc6:	4b2f      	ldr	r3, [pc, #188]	@ (800dd84 <USBD_CDC_DeInit+0xfc>)
 800dcc8:	781b      	ldrb	r3, [r3, #0]
 800dcca:	f003 020f 	and.w	r2, r3, #15
 800dcce:	6879      	ldr	r1, [r7, #4]
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	009b      	lsls	r3, r3, #2
 800dcd4:	4413      	add	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	440b      	add	r3, r1
 800dcda:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dcde:	2200      	movs	r2, #0
 800dce0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dce2:	4b29      	ldr	r3, [pc, #164]	@ (800dd88 <USBD_CDC_DeInit+0x100>)
 800dce4:	781b      	ldrb	r3, [r3, #0]
 800dce6:	4619      	mov	r1, r3
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f007 fa14 	bl	8015116 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dcee:	4b26      	ldr	r3, [pc, #152]	@ (800dd88 <USBD_CDC_DeInit+0x100>)
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	f003 020f 	and.w	r2, r3, #15
 800dcf6:	6879      	ldr	r1, [r7, #4]
 800dcf8:	4613      	mov	r3, r2
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	4413      	add	r3, r2
 800dcfe:	009b      	lsls	r3, r3, #2
 800dd00:	440b      	add	r3, r1
 800dd02:	3324      	adds	r3, #36	@ 0x24
 800dd04:	2200      	movs	r2, #0
 800dd06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dd08:	4b1f      	ldr	r3, [pc, #124]	@ (800dd88 <USBD_CDC_DeInit+0x100>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	f003 020f 	and.w	r2, r3, #15
 800dd10:	6879      	ldr	r1, [r7, #4]
 800dd12:	4613      	mov	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	440b      	add	r3, r1
 800dd1c:	3326      	adds	r3, #38	@ 0x26
 800dd1e:	2200      	movs	r2, #0
 800dd20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	32b0      	adds	r2, #176	@ 0xb0
 800dd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d01f      	beq.n	800dd74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	33b0      	adds	r3, #176	@ 0xb0
 800dd3e:	009b      	lsls	r3, r3, #2
 800dd40:	4413      	add	r3, r2
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	32b0      	adds	r2, #176	@ 0xb0
 800dd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd56:	4618      	mov	r0, r3
 800dd58:	f007 fb1e 	bl	8015398 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	32b0      	adds	r2, #176	@ 0xb0
 800dd66:	2100      	movs	r1, #0
 800dd68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2200      	movs	r2, #0
 800dd70:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800dd74:	2300      	movs	r3, #0
}
 800dd76:	4618      	mov	r0, r3
 800dd78:	3708      	adds	r7, #8
 800dd7a:	46bd      	mov	sp, r7
 800dd7c:	bd80      	pop	{r7, pc}
 800dd7e:	bf00      	nop
 800dd80:	2000009f 	.word	0x2000009f
 800dd84:	200000a0 	.word	0x200000a0
 800dd88:	200000a1 	.word	0x200000a1

0800dd8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	32b0      	adds	r2, #176	@ 0xb0
 800dda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800dda6:	2300      	movs	r3, #0
 800dda8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ddb8:	2303      	movs	r3, #3
 800ddba:	e0bf      	b.n	800df3c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	781b      	ldrb	r3, [r3, #0]
 800ddc0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d050      	beq.n	800de6a <USBD_CDC_Setup+0xde>
 800ddc8:	2b20      	cmp	r3, #32
 800ddca:	f040 80af 	bne.w	800df2c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	88db      	ldrh	r3, [r3, #6]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d03a      	beq.n	800de4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	b25b      	sxtb	r3, r3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	da1b      	bge.n	800de18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dde6:	687a      	ldr	r2, [r7, #4]
 800dde8:	33b0      	adds	r3, #176	@ 0xb0
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	683a      	ldr	r2, [r7, #0]
 800ddf4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ddf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ddf8:	683a      	ldr	r2, [r7, #0]
 800ddfa:	88d2      	ldrh	r2, [r2, #6]
 800ddfc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	88db      	ldrh	r3, [r3, #6]
 800de02:	2b07      	cmp	r3, #7
 800de04:	bf28      	it	cs
 800de06:	2307      	movcs	r3, #7
 800de08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	89fa      	ldrh	r2, [r7, #14]
 800de0e:	4619      	mov	r1, r3
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f001 fd1f 	bl	800f854 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800de16:	e090      	b.n	800df3a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	785a      	ldrb	r2, [r3, #1]
 800de1c:	693b      	ldr	r3, [r7, #16]
 800de1e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	88db      	ldrh	r3, [r3, #6]
 800de26:	2b3f      	cmp	r3, #63	@ 0x3f
 800de28:	d803      	bhi.n	800de32 <USBD_CDC_Setup+0xa6>
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	88db      	ldrh	r3, [r3, #6]
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	e000      	b.n	800de34 <USBD_CDC_Setup+0xa8>
 800de32:	2240      	movs	r2, #64	@ 0x40
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800de3a:	6939      	ldr	r1, [r7, #16]
 800de3c:	693b      	ldr	r3, [r7, #16]
 800de3e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800de42:	461a      	mov	r2, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f001 fd31 	bl	800f8ac <USBD_CtlPrepareRx>
      break;
 800de4a:	e076      	b.n	800df3a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	33b0      	adds	r3, #176	@ 0xb0
 800de56:	009b      	lsls	r3, r3, #2
 800de58:	4413      	add	r3, r2
 800de5a:	685b      	ldr	r3, [r3, #4]
 800de5c:	689b      	ldr	r3, [r3, #8]
 800de5e:	683a      	ldr	r2, [r7, #0]
 800de60:	7850      	ldrb	r0, [r2, #1]
 800de62:	2200      	movs	r2, #0
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	4798      	blx	r3
      break;
 800de68:	e067      	b.n	800df3a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de6a:	683b      	ldr	r3, [r7, #0]
 800de6c:	785b      	ldrb	r3, [r3, #1]
 800de6e:	2b0b      	cmp	r3, #11
 800de70:	d851      	bhi.n	800df16 <USBD_CDC_Setup+0x18a>
 800de72:	a201      	add	r2, pc, #4	@ (adr r2, 800de78 <USBD_CDC_Setup+0xec>)
 800de74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de78:	0800dea9 	.word	0x0800dea9
 800de7c:	0800df25 	.word	0x0800df25
 800de80:	0800df17 	.word	0x0800df17
 800de84:	0800df17 	.word	0x0800df17
 800de88:	0800df17 	.word	0x0800df17
 800de8c:	0800df17 	.word	0x0800df17
 800de90:	0800df17 	.word	0x0800df17
 800de94:	0800df17 	.word	0x0800df17
 800de98:	0800df17 	.word	0x0800df17
 800de9c:	0800df17 	.word	0x0800df17
 800dea0:	0800ded3 	.word	0x0800ded3
 800dea4:	0800defd 	.word	0x0800defd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800deae:	b2db      	uxtb	r3, r3
 800deb0:	2b03      	cmp	r3, #3
 800deb2:	d107      	bne.n	800dec4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800deb4:	f107 030a 	add.w	r3, r7, #10
 800deb8:	2202      	movs	r2, #2
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f001 fcc9 	bl	800f854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dec2:	e032      	b.n	800df2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f001 fc53 	bl	800f772 <USBD_CtlError>
            ret = USBD_FAIL;
 800decc:	2303      	movs	r3, #3
 800dece:	75fb      	strb	r3, [r7, #23]
          break;
 800ded0:	e02b      	b.n	800df2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b03      	cmp	r3, #3
 800dedc:	d107      	bne.n	800deee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dede:	f107 030d 	add.w	r3, r7, #13
 800dee2:	2201      	movs	r2, #1
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f001 fcb4 	bl	800f854 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800deec:	e01d      	b.n	800df2a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800deee:	6839      	ldr	r1, [r7, #0]
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f001 fc3e 	bl	800f772 <USBD_CtlError>
            ret = USBD_FAIL;
 800def6:	2303      	movs	r3, #3
 800def8:	75fb      	strb	r3, [r7, #23]
          break;
 800defa:	e016      	b.n	800df2a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df02:	b2db      	uxtb	r3, r3
 800df04:	2b03      	cmp	r3, #3
 800df06:	d00f      	beq.n	800df28 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800df08:	6839      	ldr	r1, [r7, #0]
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f001 fc31 	bl	800f772 <USBD_CtlError>
            ret = USBD_FAIL;
 800df10:	2303      	movs	r3, #3
 800df12:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800df14:	e008      	b.n	800df28 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800df16:	6839      	ldr	r1, [r7, #0]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f001 fc2a 	bl	800f772 <USBD_CtlError>
          ret = USBD_FAIL;
 800df1e:	2303      	movs	r3, #3
 800df20:	75fb      	strb	r3, [r7, #23]
          break;
 800df22:	e002      	b.n	800df2a <USBD_CDC_Setup+0x19e>
          break;
 800df24:	bf00      	nop
 800df26:	e008      	b.n	800df3a <USBD_CDC_Setup+0x1ae>
          break;
 800df28:	bf00      	nop
      }
      break;
 800df2a:	e006      	b.n	800df3a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f001 fc1f 	bl	800f772 <USBD_CtlError>
      ret = USBD_FAIL;
 800df34:	2303      	movs	r3, #3
 800df36:	75fb      	strb	r3, [r7, #23]
      break;
 800df38:	bf00      	nop
  }

  return (uint8_t)ret;
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3718      	adds	r7, #24
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	460b      	mov	r3, r1
 800df4e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800df56:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	32b0      	adds	r2, #176	@ 0xb0
 800df62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800df6a:	2303      	movs	r3, #3
 800df6c:	e065      	b.n	800e03a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	32b0      	adds	r2, #176	@ 0xb0
 800df78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df7c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800df7e:	78fb      	ldrb	r3, [r7, #3]
 800df80:	f003 020f 	and.w	r2, r3, #15
 800df84:	6879      	ldr	r1, [r7, #4]
 800df86:	4613      	mov	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	4413      	add	r3, r2
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	440b      	add	r3, r1
 800df90:	3318      	adds	r3, #24
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d02f      	beq.n	800dff8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800df98:	78fb      	ldrb	r3, [r7, #3]
 800df9a:	f003 020f 	and.w	r2, r3, #15
 800df9e:	6879      	ldr	r1, [r7, #4]
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	440b      	add	r3, r1
 800dfaa:	3318      	adds	r3, #24
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	78fb      	ldrb	r3, [r7, #3]
 800dfb0:	f003 010f 	and.w	r1, r3, #15
 800dfb4:	68f8      	ldr	r0, [r7, #12]
 800dfb6:	460b      	mov	r3, r1
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	440b      	add	r3, r1
 800dfbc:	00db      	lsls	r3, r3, #3
 800dfbe:	4403      	add	r3, r0
 800dfc0:	3320      	adds	r3, #32
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	fbb2 f1f3 	udiv	r1, r2, r3
 800dfc8:	fb01 f303 	mul.w	r3, r1, r3
 800dfcc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d112      	bne.n	800dff8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800dfd2:	78fb      	ldrb	r3, [r7, #3]
 800dfd4:	f003 020f 	and.w	r2, r3, #15
 800dfd8:	6879      	ldr	r1, [r7, #4]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	009b      	lsls	r3, r3, #2
 800dfde:	4413      	add	r3, r2
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	440b      	add	r3, r1
 800dfe4:	3318      	adds	r3, #24
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dfea:	78f9      	ldrb	r1, [r7, #3]
 800dfec:	2300      	movs	r3, #0
 800dfee:	2200      	movs	r2, #0
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f007 f938 	bl	8015266 <USBD_LL_Transmit>
 800dff6:	e01f      	b.n	800e038 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2200      	movs	r2, #0
 800dffc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e006:	687a      	ldr	r2, [r7, #4]
 800e008:	33b0      	adds	r3, #176	@ 0xb0
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4413      	add	r3, r2
 800e00e:	685b      	ldr	r3, [r3, #4]
 800e010:	691b      	ldr	r3, [r3, #16]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d010      	beq.n	800e038 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e01c:	687a      	ldr	r2, [r7, #4]
 800e01e:	33b0      	adds	r3, #176	@ 0xb0
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	685b      	ldr	r3, [r3, #4]
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	68ba      	ldr	r2, [r7, #8]
 800e02a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e034:	78fa      	ldrb	r2, [r7, #3]
 800e036:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e038:	2300      	movs	r3, #0
}
 800e03a:	4618      	mov	r0, r3
 800e03c:	3710      	adds	r7, #16
 800e03e:	46bd      	mov	sp, r7
 800e040:	bd80      	pop	{r7, pc}

0800e042 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e042:	b580      	push	{r7, lr}
 800e044:	b084      	sub	sp, #16
 800e046:	af00      	add	r7, sp, #0
 800e048:	6078      	str	r0, [r7, #4]
 800e04a:	460b      	mov	r3, r1
 800e04c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	32b0      	adds	r2, #176	@ 0xb0
 800e058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e05c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	32b0      	adds	r2, #176	@ 0xb0
 800e068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d101      	bne.n	800e074 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e070:	2303      	movs	r3, #3
 800e072:	e01a      	b.n	800e0aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e074:	78fb      	ldrb	r3, [r7, #3]
 800e076:	4619      	mov	r1, r3
 800e078:	6878      	ldr	r0, [r7, #4]
 800e07a:	f007 f936 	bl	80152ea <USBD_LL_GetRxDataSize>
 800e07e:	4602      	mov	r2, r0
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	33b0      	adds	r3, #176	@ 0xb0
 800e090:	009b      	lsls	r3, r3, #2
 800e092:	4413      	add	r3, r2
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	68db      	ldr	r3, [r3, #12]
 800e098:	68fa      	ldr	r2, [r7, #12]
 800e09a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e09e:	68fa      	ldr	r2, [r7, #12]
 800e0a0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e0a4:	4611      	mov	r1, r2
 800e0a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b084      	sub	sp, #16
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	32b0      	adds	r2, #176	@ 0xb0
 800e0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d101      	bne.n	800e0d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e0d0:	2303      	movs	r3, #3
 800e0d2:	e024      	b.n	800e11e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	33b0      	adds	r3, #176	@ 0xb0
 800e0de:	009b      	lsls	r3, r3, #2
 800e0e0:	4413      	add	r3, r2
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d019      	beq.n	800e11c <USBD_CDC_EP0_RxReady+0x6a>
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e0ee:	2bff      	cmp	r3, #255	@ 0xff
 800e0f0:	d014      	beq.n	800e11c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	33b0      	adds	r3, #176	@ 0xb0
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	685b      	ldr	r3, [r3, #4]
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	68fa      	ldr	r2, [r7, #12]
 800e106:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e10a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e112:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	22ff      	movs	r2, #255	@ 0xff
 800e118:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e11c:	2300      	movs	r3, #0
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3710      	adds	r7, #16
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
	...

0800e128 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b086      	sub	sp, #24
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e130:	2182      	movs	r1, #130	@ 0x82
 800e132:	4818      	ldr	r0, [pc, #96]	@ (800e194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e134:	f000 fcbd 	bl	800eab2 <USBD_GetEpDesc>
 800e138:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e13a:	2101      	movs	r1, #1
 800e13c:	4815      	ldr	r0, [pc, #84]	@ (800e194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e13e:	f000 fcb8 	bl	800eab2 <USBD_GetEpDesc>
 800e142:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e144:	2181      	movs	r1, #129	@ 0x81
 800e146:	4813      	ldr	r0, [pc, #76]	@ (800e194 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e148:	f000 fcb3 	bl	800eab2 <USBD_GetEpDesc>
 800e14c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d002      	beq.n	800e15a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	2210      	movs	r2, #16
 800e158:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d006      	beq.n	800e16e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	2200      	movs	r2, #0
 800e164:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e168:	711a      	strb	r2, [r3, #4]
 800e16a:	2200      	movs	r2, #0
 800e16c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d006      	beq.n	800e182 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e17c:	711a      	strb	r2, [r3, #4]
 800e17e:	2200      	movs	r2, #0
 800e180:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2243      	movs	r2, #67	@ 0x43
 800e186:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e188:	4b02      	ldr	r3, [pc, #8]	@ (800e194 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e18a:	4618      	mov	r0, r3
 800e18c:	3718      	adds	r7, #24
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
 800e192:	bf00      	nop
 800e194:	2000005c 	.word	0x2000005c

0800e198 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e1a0:	2182      	movs	r1, #130	@ 0x82
 800e1a2:	4818      	ldr	r0, [pc, #96]	@ (800e204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1a4:	f000 fc85 	bl	800eab2 <USBD_GetEpDesc>
 800e1a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e1aa:	2101      	movs	r1, #1
 800e1ac:	4815      	ldr	r0, [pc, #84]	@ (800e204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1ae:	f000 fc80 	bl	800eab2 <USBD_GetEpDesc>
 800e1b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e1b4:	2181      	movs	r1, #129	@ 0x81
 800e1b6:	4813      	ldr	r0, [pc, #76]	@ (800e204 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e1b8:	f000 fc7b 	bl	800eab2 <USBD_GetEpDesc>
 800e1bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e1c4:	697b      	ldr	r3, [r7, #20]
 800e1c6:	2210      	movs	r2, #16
 800e1c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e1ca:	693b      	ldr	r3, [r7, #16]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d006      	beq.n	800e1de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1d0:	693b      	ldr	r3, [r7, #16]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	711a      	strb	r2, [r3, #4]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	f042 0202 	orr.w	r2, r2, #2
 800e1dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d006      	beq.n	800e1f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	711a      	strb	r2, [r3, #4]
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	f042 0202 	orr.w	r2, r2, #2
 800e1f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2243      	movs	r2, #67	@ 0x43
 800e1f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e1f8:	4b02      	ldr	r3, [pc, #8]	@ (800e204 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	3718      	adds	r7, #24
 800e1fe:	46bd      	mov	sp, r7
 800e200:	bd80      	pop	{r7, pc}
 800e202:	bf00      	nop
 800e204:	2000005c 	.word	0x2000005c

0800e208 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b086      	sub	sp, #24
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e210:	2182      	movs	r1, #130	@ 0x82
 800e212:	4818      	ldr	r0, [pc, #96]	@ (800e274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e214:	f000 fc4d 	bl	800eab2 <USBD_GetEpDesc>
 800e218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e21a:	2101      	movs	r1, #1
 800e21c:	4815      	ldr	r0, [pc, #84]	@ (800e274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e21e:	f000 fc48 	bl	800eab2 <USBD_GetEpDesc>
 800e222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e224:	2181      	movs	r1, #129	@ 0x81
 800e226:	4813      	ldr	r0, [pc, #76]	@ (800e274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e228:	f000 fc43 	bl	800eab2 <USBD_GetEpDesc>
 800e22c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d002      	beq.n	800e23a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	2210      	movs	r2, #16
 800e238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d006      	beq.n	800e24e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e240:	693b      	ldr	r3, [r7, #16]
 800e242:	2200      	movs	r2, #0
 800e244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e248:	711a      	strb	r2, [r3, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d006      	beq.n	800e262 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	2200      	movs	r2, #0
 800e258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e25c:	711a      	strb	r2, [r3, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2243      	movs	r2, #67	@ 0x43
 800e266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e268:	4b02      	ldr	r3, [pc, #8]	@ (800e274 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3718      	adds	r7, #24
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	2000005c 	.word	0x2000005c

0800e278 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e278:	b480      	push	{r7}
 800e27a:	b083      	sub	sp, #12
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	220a      	movs	r2, #10
 800e284:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e286:	4b03      	ldr	r3, [pc, #12]	@ (800e294 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e288:	4618      	mov	r0, r3
 800e28a:	370c      	adds	r7, #12
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr
 800e294:	20000018 	.word	0x20000018

0800e298 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e298:	b480      	push	{r7}
 800e29a:	b083      	sub	sp, #12
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	6078      	str	r0, [r7, #4]
 800e2a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e2a2:	683b      	ldr	r3, [r7, #0]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d101      	bne.n	800e2ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e2a8:	2303      	movs	r3, #3
 800e2aa:	e009      	b.n	800e2c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	33b0      	adds	r3, #176	@ 0xb0
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	4413      	add	r3, r2
 800e2ba:	683a      	ldr	r2, [r7, #0]
 800e2bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e2be:	2300      	movs	r3, #0
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	370c      	adds	r7, #12
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ca:	4770      	bx	lr

0800e2cc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b087      	sub	sp, #28
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	60b9      	str	r1, [r7, #8]
 800e2d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	32b0      	adds	r2, #176	@ 0xb0
 800e2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2e6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e2e8:	697b      	ldr	r3, [r7, #20]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e008      	b.n	800e304 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	68ba      	ldr	r2, [r7, #8]
 800e2f6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e302:	2300      	movs	r3, #0
}
 800e304:	4618      	mov	r0, r3
 800e306:	371c      	adds	r7, #28
 800e308:	46bd      	mov	sp, r7
 800e30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e30e:	4770      	bx	lr

0800e310 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e310:	b480      	push	{r7}
 800e312:	b085      	sub	sp, #20
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	32b0      	adds	r2, #176	@ 0xb0
 800e324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e328:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d101      	bne.n	800e334 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e330:	2303      	movs	r3, #3
 800e332:	e004      	b.n	800e33e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	4618      	mov	r0, r3
 800e340:	3714      	adds	r7, #20
 800e342:	46bd      	mov	sp, r7
 800e344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e348:	4770      	bx	lr
	...

0800e34c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b084      	sub	sp, #16
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	32b0      	adds	r2, #176	@ 0xb0
 800e35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e362:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e364:	2301      	movs	r3, #1
 800e366:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d101      	bne.n	800e372 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e36e:	2303      	movs	r3, #3
 800e370:	e025      	b.n	800e3be <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d11f      	bne.n	800e3bc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	2201      	movs	r2, #1
 800e380:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e384:	4b10      	ldr	r3, [pc, #64]	@ (800e3c8 <USBD_CDC_TransmitPacket+0x7c>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	f003 020f 	and.w	r2, r3, #15
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	4403      	add	r3, r0
 800e39e:	3318      	adds	r3, #24
 800e3a0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e3a2:	4b09      	ldr	r3, [pc, #36]	@ (800e3c8 <USBD_CDC_TransmitPacket+0x7c>)
 800e3a4:	7819      	ldrb	r1, [r3, #0]
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e3b2:	6878      	ldr	r0, [r7, #4]
 800e3b4:	f006 ff57 	bl	8015266 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e3b8:	2300      	movs	r3, #0
 800e3ba:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	2000009f 	.word	0x2000009f

0800e3cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b084      	sub	sp, #16
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	32b0      	adds	r2, #176	@ 0xb0
 800e3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	32b0      	adds	r2, #176	@ 0xb0
 800e3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e3f6:	2303      	movs	r3, #3
 800e3f8:	e018      	b.n	800e42c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	7c1b      	ldrb	r3, [r3, #16]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d10a      	bne.n	800e418 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e402:	4b0c      	ldr	r3, [pc, #48]	@ (800e434 <USBD_CDC_ReceivePacket+0x68>)
 800e404:	7819      	ldrb	r1, [r3, #0]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e40c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f006 ff49 	bl	80152a8 <USBD_LL_PrepareReceive>
 800e416:	e008      	b.n	800e42a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e418:	4b06      	ldr	r3, [pc, #24]	@ (800e434 <USBD_CDC_ReceivePacket+0x68>)
 800e41a:	7819      	ldrb	r1, [r3, #0]
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e422:	2340      	movs	r3, #64	@ 0x40
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	f006 ff3f 	bl	80152a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e42a:	2300      	movs	r3, #0
}
 800e42c:	4618      	mov	r0, r3
 800e42e:	3710      	adds	r7, #16
 800e430:	46bd      	mov	sp, r7
 800e432:	bd80      	pop	{r7, pc}
 800e434:	200000a0 	.word	0x200000a0

0800e438 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b086      	sub	sp, #24
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	60f8      	str	r0, [r7, #12]
 800e440:	60b9      	str	r1, [r7, #8]
 800e442:	4613      	mov	r3, r2
 800e444:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e44c:	2303      	movs	r3, #3
 800e44e:	e01f      	b.n	800e490 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2200      	movs	r2, #0
 800e45c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2200      	movs	r2, #0
 800e464:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2201      	movs	r2, #1
 800e47a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	79fa      	ldrb	r2, [r7, #7]
 800e482:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f006 fda3 	bl	8014fd0 <USBD_LL_Init>
 800e48a:	4603      	mov	r3, r0
 800e48c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e48e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e490:	4618      	mov	r0, r3
 800e492:	3718      	adds	r7, #24
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b084      	sub	sp, #16
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d101      	bne.n	800e4b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e4ac:	2303      	movs	r3, #3
 800e4ae:	e025      	b.n	800e4fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	683a      	ldr	r2, [r7, #0]
 800e4b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	32ae      	adds	r2, #174	@ 0xae
 800e4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00f      	beq.n	800e4ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	32ae      	adds	r2, #174	@ 0xae
 800e4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4dc:	f107 020e 	add.w	r2, r7, #14
 800e4e0:	4610      	mov	r0, r2
 800e4e2:	4798      	blx	r3
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e4f2:	1c5a      	adds	r2, r3, #1
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e4fa:	2300      	movs	r3, #0
}
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f006 fdc1 	bl	8015094 <USBD_LL_Start>
 800e512:	4603      	mov	r3, r0
}
 800e514:	4618      	mov	r0, r3
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e524:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e526:	4618      	mov	r0, r3
 800e528:	370c      	adds	r7, #12
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr

0800e532 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e532:	b580      	push	{r7, lr}
 800e534:	b084      	sub	sp, #16
 800e536:	af00      	add	r7, sp, #0
 800e538:	6078      	str	r0, [r7, #4]
 800e53a:	460b      	mov	r3, r1
 800e53c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e53e:	2300      	movs	r3, #0
 800e540:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d009      	beq.n	800e560 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	78fa      	ldrb	r2, [r7, #3]
 800e556:	4611      	mov	r1, r2
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	4798      	blx	r3
 800e55c:	4603      	mov	r3, r0
 800e55e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e560:	7bfb      	ldrb	r3, [r7, #15]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3710      	adds	r7, #16
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b084      	sub	sp, #16
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	460b      	mov	r3, r1
 800e574:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e576:	2300      	movs	r3, #0
 800e578:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e580:	685b      	ldr	r3, [r3, #4]
 800e582:	78fa      	ldrb	r2, [r7, #3]
 800e584:	4611      	mov	r1, r2
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	4798      	blx	r3
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e590:	2303      	movs	r3, #3
 800e592:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e594:	7bfb      	ldrb	r3, [r7, #15]
}
 800e596:	4618      	mov	r0, r3
 800e598:	3710      	adds	r7, #16
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}

0800e59e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e59e:	b580      	push	{r7, lr}
 800e5a0:	b084      	sub	sp, #16
 800e5a2:	af00      	add	r7, sp, #0
 800e5a4:	6078      	str	r0, [r7, #4]
 800e5a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5ae:	6839      	ldr	r1, [r7, #0]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f001 f8a4 	bl	800f6fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e5d2:	f003 031f 	and.w	r3, r3, #31
 800e5d6:	2b02      	cmp	r3, #2
 800e5d8:	d01a      	beq.n	800e610 <USBD_LL_SetupStage+0x72>
 800e5da:	2b02      	cmp	r3, #2
 800e5dc:	d822      	bhi.n	800e624 <USBD_LL_SetupStage+0x86>
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d002      	beq.n	800e5e8 <USBD_LL_SetupStage+0x4a>
 800e5e2:	2b01      	cmp	r3, #1
 800e5e4:	d00a      	beq.n	800e5fc <USBD_LL_SetupStage+0x5e>
 800e5e6:	e01d      	b.n	800e624 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	6878      	ldr	r0, [r7, #4]
 800e5f2:	f000 fad1 	bl	800eb98 <USBD_StdDevReq>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e5fa:	e020      	b.n	800e63e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 fb39 	bl	800ec7c <USBD_StdItfReq>
 800e60a:	4603      	mov	r3, r0
 800e60c:	73fb      	strb	r3, [r7, #15]
      break;
 800e60e:	e016      	b.n	800e63e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e616:	4619      	mov	r1, r3
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fb9b 	bl	800ed54 <USBD_StdEPReq>
 800e61e:	4603      	mov	r3, r0
 800e620:	73fb      	strb	r3, [r7, #15]
      break;
 800e622:	e00c      	b.n	800e63e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e62a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e62e:	b2db      	uxtb	r3, r3
 800e630:	4619      	mov	r1, r3
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f006 fd8e 	bl	8015154 <USBD_LL_StallEP>
 800e638:	4603      	mov	r3, r0
 800e63a:	73fb      	strb	r3, [r7, #15]
      break;
 800e63c:	bf00      	nop
  }

  return ret;
 800e63e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b086      	sub	sp, #24
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	60f8      	str	r0, [r7, #12]
 800e650:	460b      	mov	r3, r1
 800e652:	607a      	str	r2, [r7, #4]
 800e654:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e656:	2300      	movs	r3, #0
 800e658:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e65a:	7afb      	ldrb	r3, [r7, #11]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d16e      	bne.n	800e73e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e666:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e66e:	2b03      	cmp	r3, #3
 800e670:	f040 8098 	bne.w	800e7a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e674:	693b      	ldr	r3, [r7, #16]
 800e676:	689a      	ldr	r2, [r3, #8]
 800e678:	693b      	ldr	r3, [r7, #16]
 800e67a:	68db      	ldr	r3, [r3, #12]
 800e67c:	429a      	cmp	r2, r3
 800e67e:	d913      	bls.n	800e6a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e680:	693b      	ldr	r3, [r7, #16]
 800e682:	689a      	ldr	r2, [r3, #8]
 800e684:	693b      	ldr	r3, [r7, #16]
 800e686:	68db      	ldr	r3, [r3, #12]
 800e688:	1ad2      	subs	r2, r2, r3
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	68da      	ldr	r2, [r3, #12]
 800e692:	693b      	ldr	r3, [r7, #16]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	4293      	cmp	r3, r2
 800e698:	bf28      	it	cs
 800e69a:	4613      	movcs	r3, r2
 800e69c:	461a      	mov	r2, r3
 800e69e:	6879      	ldr	r1, [r7, #4]
 800e6a0:	68f8      	ldr	r0, [r7, #12]
 800e6a2:	f001 f920 	bl	800f8e6 <USBD_CtlContinueRx>
 800e6a6:	e07d      	b.n	800e7a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e6ae:	f003 031f 	and.w	r3, r3, #31
 800e6b2:	2b02      	cmp	r3, #2
 800e6b4:	d014      	beq.n	800e6e0 <USBD_LL_DataOutStage+0x98>
 800e6b6:	2b02      	cmp	r3, #2
 800e6b8:	d81d      	bhi.n	800e6f6 <USBD_LL_DataOutStage+0xae>
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d002      	beq.n	800e6c4 <USBD_LL_DataOutStage+0x7c>
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d003      	beq.n	800e6ca <USBD_LL_DataOutStage+0x82>
 800e6c2:	e018      	b.n	800e6f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	75bb      	strb	r3, [r7, #22]
            break;
 800e6c8:	e018      	b.n	800e6fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	4619      	mov	r1, r3
 800e6d4:	68f8      	ldr	r0, [r7, #12]
 800e6d6:	f000 f9d2 	bl	800ea7e <USBD_CoreFindIF>
 800e6da:	4603      	mov	r3, r0
 800e6dc:	75bb      	strb	r3, [r7, #22]
            break;
 800e6de:	e00d      	b.n	800e6fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	4619      	mov	r1, r3
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f000 f9d4 	bl	800ea98 <USBD_CoreFindEP>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	75bb      	strb	r3, [r7, #22]
            break;
 800e6f4:	e002      	b.n	800e6fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	75bb      	strb	r3, [r7, #22]
            break;
 800e6fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e6fc:	7dbb      	ldrb	r3, [r7, #22]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d119      	bne.n	800e736 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b03      	cmp	r3, #3
 800e70c:	d113      	bne.n	800e736 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e70e:	7dba      	ldrb	r2, [r7, #22]
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	32ae      	adds	r2, #174	@ 0xae
 800e714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e718:	691b      	ldr	r3, [r3, #16]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00b      	beq.n	800e736 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e71e:	7dba      	ldrb	r2, [r7, #22]
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e726:	7dba      	ldrb	r2, [r7, #22]
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	32ae      	adds	r2, #174	@ 0xae
 800e72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e730:	691b      	ldr	r3, [r3, #16]
 800e732:	68f8      	ldr	r0, [r7, #12]
 800e734:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f001 f8e6 	bl	800f908 <USBD_CtlSendStatus>
 800e73c:	e032      	b.n	800e7a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e73e:	7afb      	ldrb	r3, [r7, #11]
 800e740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e744:	b2db      	uxtb	r3, r3
 800e746:	4619      	mov	r1, r3
 800e748:	68f8      	ldr	r0, [r7, #12]
 800e74a:	f000 f9a5 	bl	800ea98 <USBD_CoreFindEP>
 800e74e:	4603      	mov	r3, r0
 800e750:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e752:	7dbb      	ldrb	r3, [r7, #22]
 800e754:	2bff      	cmp	r3, #255	@ 0xff
 800e756:	d025      	beq.n	800e7a4 <USBD_LL_DataOutStage+0x15c>
 800e758:	7dbb      	ldrb	r3, [r7, #22]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d122      	bne.n	800e7a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e764:	b2db      	uxtb	r3, r3
 800e766:	2b03      	cmp	r3, #3
 800e768:	d117      	bne.n	800e79a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e76a:	7dba      	ldrb	r2, [r7, #22]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	32ae      	adds	r2, #174	@ 0xae
 800e770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d00f      	beq.n	800e79a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e77a:	7dba      	ldrb	r2, [r7, #22]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e782:	7dba      	ldrb	r2, [r7, #22]
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	32ae      	adds	r2, #174	@ 0xae
 800e788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e78c:	699b      	ldr	r3, [r3, #24]
 800e78e:	7afa      	ldrb	r2, [r7, #11]
 800e790:	4611      	mov	r1, r2
 800e792:	68f8      	ldr	r0, [r7, #12]
 800e794:	4798      	blx	r3
 800e796:	4603      	mov	r3, r0
 800e798:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e79a:	7dfb      	ldrb	r3, [r7, #23]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d001      	beq.n	800e7a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e7a0:	7dfb      	ldrb	r3, [r7, #23]
 800e7a2:	e000      	b.n	800e7a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e7a4:	2300      	movs	r3, #0
}
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	3718      	adds	r7, #24
 800e7aa:	46bd      	mov	sp, r7
 800e7ac:	bd80      	pop	{r7, pc}

0800e7ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e7ae:	b580      	push	{r7, lr}
 800e7b0:	b086      	sub	sp, #24
 800e7b2:	af00      	add	r7, sp, #0
 800e7b4:	60f8      	str	r0, [r7, #12]
 800e7b6:	460b      	mov	r3, r1
 800e7b8:	607a      	str	r2, [r7, #4]
 800e7ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e7bc:	7afb      	ldrb	r3, [r7, #11]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d16f      	bne.n	800e8a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	3314      	adds	r3, #20
 800e7c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e7ce:	2b02      	cmp	r3, #2
 800e7d0:	d15a      	bne.n	800e888 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e7d2:	693b      	ldr	r3, [r7, #16]
 800e7d4:	689a      	ldr	r2, [r3, #8]
 800e7d6:	693b      	ldr	r3, [r7, #16]
 800e7d8:	68db      	ldr	r3, [r3, #12]
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d914      	bls.n	800e808 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e7de:	693b      	ldr	r3, [r7, #16]
 800e7e0:	689a      	ldr	r2, [r3, #8]
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	68db      	ldr	r3, [r3, #12]
 800e7e6:	1ad2      	subs	r2, r2, r3
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	689b      	ldr	r3, [r3, #8]
 800e7f0:	461a      	mov	r2, r3
 800e7f2:	6879      	ldr	r1, [r7, #4]
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f001 f848 	bl	800f88a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	2100      	movs	r1, #0
 800e800:	68f8      	ldr	r0, [r7, #12]
 800e802:	f006 fd51 	bl	80152a8 <USBD_LL_PrepareReceive>
 800e806:	e03f      	b.n	800e888 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e808:	693b      	ldr	r3, [r7, #16]
 800e80a:	68da      	ldr	r2, [r3, #12]
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	429a      	cmp	r2, r3
 800e812:	d11c      	bne.n	800e84e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	685a      	ldr	r2, [r3, #4]
 800e818:	693b      	ldr	r3, [r7, #16]
 800e81a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d316      	bcc.n	800e84e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	685a      	ldr	r2, [r3, #4]
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d20f      	bcs.n	800e84e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e82e:	2200      	movs	r2, #0
 800e830:	2100      	movs	r1, #0
 800e832:	68f8      	ldr	r0, [r7, #12]
 800e834:	f001 f829 	bl	800f88a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2200      	movs	r2, #0
 800e83c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e840:	2300      	movs	r3, #0
 800e842:	2200      	movs	r2, #0
 800e844:	2100      	movs	r1, #0
 800e846:	68f8      	ldr	r0, [r7, #12]
 800e848:	f006 fd2e 	bl	80152a8 <USBD_LL_PrepareReceive>
 800e84c:	e01c      	b.n	800e888 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e854:	b2db      	uxtb	r3, r3
 800e856:	2b03      	cmp	r3, #3
 800e858:	d10f      	bne.n	800e87a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e860:	68db      	ldr	r3, [r3, #12]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d009      	beq.n	800e87a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e87a:	2180      	movs	r1, #128	@ 0x80
 800e87c:	68f8      	ldr	r0, [r7, #12]
 800e87e:	f006 fc69 	bl	8015154 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f001 f853 	bl	800f92e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d03a      	beq.n	800e908 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f7ff fe42 	bl	800e51c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e8a0:	e032      	b.n	800e908 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e8a2:	7afb      	ldrb	r3, [r7, #11]
 800e8a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f000 f8f3 	bl	800ea98 <USBD_CoreFindEP>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e8b6:	7dfb      	ldrb	r3, [r7, #23]
 800e8b8:	2bff      	cmp	r3, #255	@ 0xff
 800e8ba:	d025      	beq.n	800e908 <USBD_LL_DataInStage+0x15a>
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d122      	bne.n	800e908 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e8c8:	b2db      	uxtb	r3, r3
 800e8ca:	2b03      	cmp	r3, #3
 800e8cc:	d11c      	bne.n	800e908 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e8ce:	7dfa      	ldrb	r2, [r7, #23]
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	32ae      	adds	r2, #174	@ 0xae
 800e8d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8d8:	695b      	ldr	r3, [r3, #20]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d014      	beq.n	800e908 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e8de:	7dfa      	ldrb	r2, [r7, #23]
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e8e6:	7dfa      	ldrb	r2, [r7, #23]
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	32ae      	adds	r2, #174	@ 0xae
 800e8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8f0:	695b      	ldr	r3, [r3, #20]
 800e8f2:	7afa      	ldrb	r2, [r7, #11]
 800e8f4:	4611      	mov	r1, r2
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	4798      	blx	r3
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e8fe:	7dbb      	ldrb	r3, [r7, #22]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d001      	beq.n	800e908 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e904:	7dbb      	ldrb	r3, [r7, #22]
 800e906:	e000      	b.n	800e90a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}

0800e912 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e912:	b580      	push	{r7, lr}
 800e914:	b084      	sub	sp, #16
 800e916:	af00      	add	r7, sp, #0
 800e918:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800e91a:	2300      	movs	r3, #0
 800e91c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	2201      	movs	r2, #1
 800e922:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	2200      	movs	r2, #0
 800e92a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	2200      	movs	r2, #0
 800e932:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2200      	movs	r2, #0
 800e938:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2200      	movs	r2, #0
 800e940:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d014      	beq.n	800e978 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e954:	685b      	ldr	r3, [r3, #4]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00e      	beq.n	800e978 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e960:	685b      	ldr	r3, [r3, #4]
 800e962:	687a      	ldr	r2, [r7, #4]
 800e964:	6852      	ldr	r2, [r2, #4]
 800e966:	b2d2      	uxtb	r2, r2
 800e968:	4611      	mov	r1, r2
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	4798      	blx	r3
 800e96e:	4603      	mov	r3, r0
 800e970:	2b00      	cmp	r3, #0
 800e972:	d001      	beq.n	800e978 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e974:	2303      	movs	r3, #3
 800e976:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e978:	2340      	movs	r3, #64	@ 0x40
 800e97a:	2200      	movs	r2, #0
 800e97c:	2100      	movs	r1, #0
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f006 fba3 	bl	80150ca <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2201      	movs	r2, #1
 800e988:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	2240      	movs	r2, #64	@ 0x40
 800e990:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e994:	2340      	movs	r3, #64	@ 0x40
 800e996:	2200      	movs	r2, #0
 800e998:	2180      	movs	r1, #128	@ 0x80
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f006 fb95 	bl	80150ca <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	2240      	movs	r2, #64	@ 0x40
 800e9aa:	621a      	str	r2, [r3, #32]

  return ret;
 800e9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}

0800e9b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e9b6:	b480      	push	{r7}
 800e9b8:	b083      	sub	sp, #12
 800e9ba:	af00      	add	r7, sp, #0
 800e9bc:	6078      	str	r0, [r7, #4]
 800e9be:	460b      	mov	r3, r1
 800e9c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	78fa      	ldrb	r2, [r7, #3]
 800e9c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	370c      	adds	r7, #12
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr

0800e9d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e9d6:	b480      	push	{r7}
 800e9d8:	b083      	sub	sp, #12
 800e9da:	af00      	add	r7, sp, #0
 800e9dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9e4:	b2db      	uxtb	r3, r3
 800e9e6:	2b04      	cmp	r3, #4
 800e9e8:	d006      	beq.n	800e9f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9f0:	b2da      	uxtb	r2, r3
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2204      	movs	r2, #4
 800e9fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	370c      	adds	r7, #12
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr

0800ea0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ea0e:	b480      	push	{r7}
 800ea10:	b083      	sub	sp, #12
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	2b04      	cmp	r3, #4
 800ea20:	d106      	bne.n	800ea30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800ea28:	b2da      	uxtb	r2, r3
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	370c      	adds	r7, #12
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr

0800ea3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ea3e:	b580      	push	{r7, lr}
 800ea40:	b082      	sub	sp, #8
 800ea42:	af00      	add	r7, sp, #0
 800ea44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ea4c:	b2db      	uxtb	r3, r3
 800ea4e:	2b03      	cmp	r3, #3
 800ea50:	d110      	bne.n	800ea74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d00b      	beq.n	800ea74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea62:	69db      	ldr	r3, [r3, #28]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d005      	beq.n	800ea74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea6e:	69db      	ldr	r3, [r3, #28]
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}

0800ea7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ea7e:	b480      	push	{r7}
 800ea80:	b083      	sub	sp, #12
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
 800ea86:	460b      	mov	r3, r1
 800ea88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ea8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	370c      	adds	r7, #12
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr

0800ea98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ea98:	b480      	push	{r7}
 800ea9a:	b083      	sub	sp, #12
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	6078      	str	r0, [r7, #4]
 800eaa0:	460b      	mov	r3, r1
 800eaa2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eaa4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	370c      	adds	r7, #12
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr

0800eab2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800eab2:	b580      	push	{r7, lr}
 800eab4:	b086      	sub	sp, #24
 800eab6:	af00      	add	r7, sp, #0
 800eab8:	6078      	str	r0, [r7, #4]
 800eaba:	460b      	mov	r3, r1
 800eabc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800eac6:	2300      	movs	r3, #0
 800eac8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	885b      	ldrh	r3, [r3, #2]
 800eace:	b29b      	uxth	r3, r3
 800ead0:	68fa      	ldr	r2, [r7, #12]
 800ead2:	7812      	ldrb	r2, [r2, #0]
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d91f      	bls.n	800eb18 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800eade:	e013      	b.n	800eb08 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800eae0:	f107 030a 	add.w	r3, r7, #10
 800eae4:	4619      	mov	r1, r3
 800eae6:	6978      	ldr	r0, [r7, #20]
 800eae8:	f000 f81b 	bl	800eb22 <USBD_GetNextDesc>
 800eaec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800eaee:	697b      	ldr	r3, [r7, #20]
 800eaf0:	785b      	ldrb	r3, [r3, #1]
 800eaf2:	2b05      	cmp	r3, #5
 800eaf4:	d108      	bne.n	800eb08 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	789b      	ldrb	r3, [r3, #2]
 800eafe:	78fa      	ldrb	r2, [r7, #3]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d008      	beq.n	800eb16 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800eb04:	2300      	movs	r3, #0
 800eb06:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	885b      	ldrh	r3, [r3, #2]
 800eb0c:	b29a      	uxth	r2, r3
 800eb0e:	897b      	ldrh	r3, [r7, #10]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d8e5      	bhi.n	800eae0 <USBD_GetEpDesc+0x2e>
 800eb14:	e000      	b.n	800eb18 <USBD_GetEpDesc+0x66>
          break;
 800eb16:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800eb18:	693b      	ldr	r3, [r7, #16]
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3718      	adds	r7, #24
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800eb22:	b480      	push	{r7}
 800eb24:	b085      	sub	sp, #20
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	881b      	ldrh	r3, [r3, #0]
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	7812      	ldrb	r2, [r2, #0]
 800eb38:	4413      	add	r3, r2
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	461a      	mov	r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	4413      	add	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3714      	adds	r7, #20
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b087      	sub	sp, #28
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800eb66:	697b      	ldr	r3, [r7, #20]
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	3301      	adds	r3, #1
 800eb70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	781b      	ldrb	r3, [r3, #0]
 800eb76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800eb78:	8a3b      	ldrh	r3, [r7, #16]
 800eb7a:	021b      	lsls	r3, r3, #8
 800eb7c:	b21a      	sxth	r2, r3
 800eb7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800eb82:	4313      	orrs	r3, r2
 800eb84:	b21b      	sxth	r3, r3
 800eb86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800eb88:	89fb      	ldrh	r3, [r7, #14]
}
 800eb8a:	4618      	mov	r0, r3
 800eb8c:	371c      	adds	r7, #28
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb94:	4770      	bx	lr
	...

0800eb98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	781b      	ldrb	r3, [r3, #0]
 800ebaa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ebae:	2b40      	cmp	r3, #64	@ 0x40
 800ebb0:	d005      	beq.n	800ebbe <USBD_StdDevReq+0x26>
 800ebb2:	2b40      	cmp	r3, #64	@ 0x40
 800ebb4:	d857      	bhi.n	800ec66 <USBD_StdDevReq+0xce>
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00f      	beq.n	800ebda <USBD_StdDevReq+0x42>
 800ebba:	2b20      	cmp	r3, #32
 800ebbc:	d153      	bne.n	800ec66 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	32ae      	adds	r2, #174	@ 0xae
 800ebc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebcc:	689b      	ldr	r3, [r3, #8]
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	6878      	ldr	r0, [r7, #4]
 800ebd2:	4798      	blx	r3
 800ebd4:	4603      	mov	r3, r0
 800ebd6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebd8:	e04a      	b.n	800ec70 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	785b      	ldrb	r3, [r3, #1]
 800ebde:	2b09      	cmp	r3, #9
 800ebe0:	d83b      	bhi.n	800ec5a <USBD_StdDevReq+0xc2>
 800ebe2:	a201      	add	r2, pc, #4	@ (adr r2, 800ebe8 <USBD_StdDevReq+0x50>)
 800ebe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebe8:	0800ec3d 	.word	0x0800ec3d
 800ebec:	0800ec51 	.word	0x0800ec51
 800ebf0:	0800ec5b 	.word	0x0800ec5b
 800ebf4:	0800ec47 	.word	0x0800ec47
 800ebf8:	0800ec5b 	.word	0x0800ec5b
 800ebfc:	0800ec1b 	.word	0x0800ec1b
 800ec00:	0800ec11 	.word	0x0800ec11
 800ec04:	0800ec5b 	.word	0x0800ec5b
 800ec08:	0800ec33 	.word	0x0800ec33
 800ec0c:	0800ec25 	.word	0x0800ec25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ec10:	6839      	ldr	r1, [r7, #0]
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f000 fa3c 	bl	800f090 <USBD_GetDescriptor>
          break;
 800ec18:	e024      	b.n	800ec64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ec1a:	6839      	ldr	r1, [r7, #0]
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f000 fbcb 	bl	800f3b8 <USBD_SetAddress>
          break;
 800ec22:	e01f      	b.n	800ec64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ec24:	6839      	ldr	r1, [r7, #0]
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 fc0a 	bl	800f440 <USBD_SetConfig>
 800ec2c:	4603      	mov	r3, r0
 800ec2e:	73fb      	strb	r3, [r7, #15]
          break;
 800ec30:	e018      	b.n	800ec64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ec32:	6839      	ldr	r1, [r7, #0]
 800ec34:	6878      	ldr	r0, [r7, #4]
 800ec36:	f000 fcad 	bl	800f594 <USBD_GetConfig>
          break;
 800ec3a:	e013      	b.n	800ec64 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ec3c:	6839      	ldr	r1, [r7, #0]
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f000 fcde 	bl	800f600 <USBD_GetStatus>
          break;
 800ec44:	e00e      	b.n	800ec64 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ec46:	6839      	ldr	r1, [r7, #0]
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f000 fd0d 	bl	800f668 <USBD_SetFeature>
          break;
 800ec4e:	e009      	b.n	800ec64 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ec50:	6839      	ldr	r1, [r7, #0]
 800ec52:	6878      	ldr	r0, [r7, #4]
 800ec54:	f000 fd31 	bl	800f6ba <USBD_ClrFeature>
          break;
 800ec58:	e004      	b.n	800ec64 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ec5a:	6839      	ldr	r1, [r7, #0]
 800ec5c:	6878      	ldr	r0, [r7, #4]
 800ec5e:	f000 fd88 	bl	800f772 <USBD_CtlError>
          break;
 800ec62:	bf00      	nop
      }
      break;
 800ec64:	e004      	b.n	800ec70 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ec66:	6839      	ldr	r1, [r7, #0]
 800ec68:	6878      	ldr	r0, [r7, #4]
 800ec6a:	f000 fd82 	bl	800f772 <USBD_CtlError>
      break;
 800ec6e:	bf00      	nop
  }

  return ret;
 800ec70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop

0800ec7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
 800ec84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec86:	2300      	movs	r3, #0
 800ec88:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ec92:	2b40      	cmp	r3, #64	@ 0x40
 800ec94:	d005      	beq.n	800eca2 <USBD_StdItfReq+0x26>
 800ec96:	2b40      	cmp	r3, #64	@ 0x40
 800ec98:	d852      	bhi.n	800ed40 <USBD_StdItfReq+0xc4>
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d001      	beq.n	800eca2 <USBD_StdItfReq+0x26>
 800ec9e:	2b20      	cmp	r3, #32
 800eca0:	d14e      	bne.n	800ed40 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eca8:	b2db      	uxtb	r3, r3
 800ecaa:	3b01      	subs	r3, #1
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d840      	bhi.n	800ed32 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	889b      	ldrh	r3, [r3, #4]
 800ecb4:	b2db      	uxtb	r3, r3
 800ecb6:	2b01      	cmp	r3, #1
 800ecb8:	d836      	bhi.n	800ed28 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	889b      	ldrh	r3, [r3, #4]
 800ecbe:	b2db      	uxtb	r3, r3
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f7ff fedb 	bl	800ea7e <USBD_CoreFindIF>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eccc:	7bbb      	ldrb	r3, [r7, #14]
 800ecce:	2bff      	cmp	r3, #255	@ 0xff
 800ecd0:	d01d      	beq.n	800ed0e <USBD_StdItfReq+0x92>
 800ecd2:	7bbb      	ldrb	r3, [r7, #14]
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d11a      	bne.n	800ed0e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ecd8:	7bba      	ldrb	r2, [r7, #14]
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	32ae      	adds	r2, #174	@ 0xae
 800ecde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00f      	beq.n	800ed08 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ece8:	7bba      	ldrb	r2, [r7, #14]
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ecf0:	7bba      	ldrb	r2, [r7, #14]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	32ae      	adds	r2, #174	@ 0xae
 800ecf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecfa:	689b      	ldr	r3, [r3, #8]
 800ecfc:	6839      	ldr	r1, [r7, #0]
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	4798      	blx	r3
 800ed02:	4603      	mov	r3, r0
 800ed04:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ed06:	e004      	b.n	800ed12 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ed08:	2303      	movs	r3, #3
 800ed0a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ed0c:	e001      	b.n	800ed12 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ed0e:	2303      	movs	r3, #3
 800ed10:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	88db      	ldrh	r3, [r3, #6]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d110      	bne.n	800ed3c <USBD_StdItfReq+0xc0>
 800ed1a:	7bfb      	ldrb	r3, [r7, #15]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d10d      	bne.n	800ed3c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 fdf1 	bl	800f908 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ed26:	e009      	b.n	800ed3c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ed28:	6839      	ldr	r1, [r7, #0]
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f000 fd21 	bl	800f772 <USBD_CtlError>
          break;
 800ed30:	e004      	b.n	800ed3c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ed32:	6839      	ldr	r1, [r7, #0]
 800ed34:	6878      	ldr	r0, [r7, #4]
 800ed36:	f000 fd1c 	bl	800f772 <USBD_CtlError>
          break;
 800ed3a:	e000      	b.n	800ed3e <USBD_StdItfReq+0xc2>
          break;
 800ed3c:	bf00      	nop
      }
      break;
 800ed3e:	e004      	b.n	800ed4a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ed40:	6839      	ldr	r1, [r7, #0]
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f000 fd15 	bl	800f772 <USBD_CtlError>
      break;
 800ed48:	bf00      	nop
  }

  return ret;
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	3710      	adds	r7, #16
 800ed50:	46bd      	mov	sp, r7
 800ed52:	bd80      	pop	{r7, pc}

0800ed54 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	6078      	str	r0, [r7, #4]
 800ed5c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	889b      	ldrh	r3, [r3, #4]
 800ed66:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	781b      	ldrb	r3, [r3, #0]
 800ed6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed70:	2b40      	cmp	r3, #64	@ 0x40
 800ed72:	d007      	beq.n	800ed84 <USBD_StdEPReq+0x30>
 800ed74:	2b40      	cmp	r3, #64	@ 0x40
 800ed76:	f200 817f 	bhi.w	800f078 <USBD_StdEPReq+0x324>
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d02a      	beq.n	800edd4 <USBD_StdEPReq+0x80>
 800ed7e:	2b20      	cmp	r3, #32
 800ed80:	f040 817a 	bne.w	800f078 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ed84:	7bbb      	ldrb	r3, [r7, #14]
 800ed86:	4619      	mov	r1, r3
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f7ff fe85 	bl	800ea98 <USBD_CoreFindEP>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ed92:	7b7b      	ldrb	r3, [r7, #13]
 800ed94:	2bff      	cmp	r3, #255	@ 0xff
 800ed96:	f000 8174 	beq.w	800f082 <USBD_StdEPReq+0x32e>
 800ed9a:	7b7b      	ldrb	r3, [r7, #13]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	f040 8170 	bne.w	800f082 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800eda2:	7b7a      	ldrb	r2, [r7, #13]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800edaa:	7b7a      	ldrb	r2, [r7, #13]
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	32ae      	adds	r2, #174	@ 0xae
 800edb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f000 8163 	beq.w	800f082 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800edbc:	7b7a      	ldrb	r2, [r7, #13]
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	32ae      	adds	r2, #174	@ 0xae
 800edc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc6:	689b      	ldr	r3, [r3, #8]
 800edc8:	6839      	ldr	r1, [r7, #0]
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	4798      	blx	r3
 800edce:	4603      	mov	r3, r0
 800edd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800edd2:	e156      	b.n	800f082 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	785b      	ldrb	r3, [r3, #1]
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d008      	beq.n	800edee <USBD_StdEPReq+0x9a>
 800eddc:	2b03      	cmp	r3, #3
 800edde:	f300 8145 	bgt.w	800f06c <USBD_StdEPReq+0x318>
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	f000 809b 	beq.w	800ef1e <USBD_StdEPReq+0x1ca>
 800ede8:	2b01      	cmp	r3, #1
 800edea:	d03c      	beq.n	800ee66 <USBD_StdEPReq+0x112>
 800edec:	e13e      	b.n	800f06c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	2b02      	cmp	r3, #2
 800edf8:	d002      	beq.n	800ee00 <USBD_StdEPReq+0xac>
 800edfa:	2b03      	cmp	r3, #3
 800edfc:	d016      	beq.n	800ee2c <USBD_StdEPReq+0xd8>
 800edfe:	e02c      	b.n	800ee5a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee00:	7bbb      	ldrb	r3, [r7, #14]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d00d      	beq.n	800ee22 <USBD_StdEPReq+0xce>
 800ee06:	7bbb      	ldrb	r3, [r7, #14]
 800ee08:	2b80      	cmp	r3, #128	@ 0x80
 800ee0a:	d00a      	beq.n	800ee22 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee0c:	7bbb      	ldrb	r3, [r7, #14]
 800ee0e:	4619      	mov	r1, r3
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f006 f99f 	bl	8015154 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee16:	2180      	movs	r1, #128	@ 0x80
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f006 f99b 	bl	8015154 <USBD_LL_StallEP>
 800ee1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee20:	e020      	b.n	800ee64 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 fca4 	bl	800f772 <USBD_CtlError>
              break;
 800ee2a:	e01b      	b.n	800ee64 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	885b      	ldrh	r3, [r3, #2]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d10e      	bne.n	800ee52 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee34:	7bbb      	ldrb	r3, [r7, #14]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d00b      	beq.n	800ee52 <USBD_StdEPReq+0xfe>
 800ee3a:	7bbb      	ldrb	r3, [r7, #14]
 800ee3c:	2b80      	cmp	r3, #128	@ 0x80
 800ee3e:	d008      	beq.n	800ee52 <USBD_StdEPReq+0xfe>
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	88db      	ldrh	r3, [r3, #6]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d104      	bne.n	800ee52 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee48:	7bbb      	ldrb	r3, [r7, #14]
 800ee4a:	4619      	mov	r1, r3
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f006 f981 	bl	8015154 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 fd58 	bl	800f908 <USBD_CtlSendStatus>

              break;
 800ee58:	e004      	b.n	800ee64 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ee5a:	6839      	ldr	r1, [r7, #0]
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 fc88 	bl	800f772 <USBD_CtlError>
              break;
 800ee62:	bf00      	nop
          }
          break;
 800ee64:	e107      	b.n	800f076 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d002      	beq.n	800ee78 <USBD_StdEPReq+0x124>
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	d016      	beq.n	800eea4 <USBD_StdEPReq+0x150>
 800ee76:	e04b      	b.n	800ef10 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee78:	7bbb      	ldrb	r3, [r7, #14]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d00d      	beq.n	800ee9a <USBD_StdEPReq+0x146>
 800ee7e:	7bbb      	ldrb	r3, [r7, #14]
 800ee80:	2b80      	cmp	r3, #128	@ 0x80
 800ee82:	d00a      	beq.n	800ee9a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee84:	7bbb      	ldrb	r3, [r7, #14]
 800ee86:	4619      	mov	r1, r3
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f006 f963 	bl	8015154 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee8e:	2180      	movs	r1, #128	@ 0x80
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f006 f95f 	bl	8015154 <USBD_LL_StallEP>
 800ee96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ee98:	e040      	b.n	800ef1c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ee9a:	6839      	ldr	r1, [r7, #0]
 800ee9c:	6878      	ldr	r0, [r7, #4]
 800ee9e:	f000 fc68 	bl	800f772 <USBD_CtlError>
              break;
 800eea2:	e03b      	b.n	800ef1c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	885b      	ldrh	r3, [r3, #2]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d136      	bne.n	800ef1a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eeac:	7bbb      	ldrb	r3, [r7, #14]
 800eeae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d004      	beq.n	800eec0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800eeb6:	7bbb      	ldrb	r3, [r7, #14]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f006 f969 	bl	8015192 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f000 fd21 	bl	800f908 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800eec6:	7bbb      	ldrb	r3, [r7, #14]
 800eec8:	4619      	mov	r1, r3
 800eeca:	6878      	ldr	r0, [r7, #4]
 800eecc:	f7ff fde4 	bl	800ea98 <USBD_CoreFindEP>
 800eed0:	4603      	mov	r3, r0
 800eed2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eed4:	7b7b      	ldrb	r3, [r7, #13]
 800eed6:	2bff      	cmp	r3, #255	@ 0xff
 800eed8:	d01f      	beq.n	800ef1a <USBD_StdEPReq+0x1c6>
 800eeda:	7b7b      	ldrb	r3, [r7, #13]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d11c      	bne.n	800ef1a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800eee0:	7b7a      	ldrb	r2, [r7, #13]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800eee8:	7b7a      	ldrb	r2, [r7, #13]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	32ae      	adds	r2, #174	@ 0xae
 800eeee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d010      	beq.n	800ef1a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eef8:	7b7a      	ldrb	r2, [r7, #13]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	32ae      	adds	r2, #174	@ 0xae
 800eefe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef02:	689b      	ldr	r3, [r3, #8]
 800ef04:	6839      	ldr	r1, [r7, #0]
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	4798      	blx	r3
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800ef0e:	e004      	b.n	800ef1a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ef10:	6839      	ldr	r1, [r7, #0]
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fc2d 	bl	800f772 <USBD_CtlError>
              break;
 800ef18:	e000      	b.n	800ef1c <USBD_StdEPReq+0x1c8>
              break;
 800ef1a:	bf00      	nop
          }
          break;
 800ef1c:	e0ab      	b.n	800f076 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef24:	b2db      	uxtb	r3, r3
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	d002      	beq.n	800ef30 <USBD_StdEPReq+0x1dc>
 800ef2a:	2b03      	cmp	r3, #3
 800ef2c:	d032      	beq.n	800ef94 <USBD_StdEPReq+0x240>
 800ef2e:	e097      	b.n	800f060 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef30:	7bbb      	ldrb	r3, [r7, #14]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d007      	beq.n	800ef46 <USBD_StdEPReq+0x1f2>
 800ef36:	7bbb      	ldrb	r3, [r7, #14]
 800ef38:	2b80      	cmp	r3, #128	@ 0x80
 800ef3a:	d004      	beq.n	800ef46 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ef3c:	6839      	ldr	r1, [r7, #0]
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 fc17 	bl	800f772 <USBD_CtlError>
                break;
 800ef44:	e091      	b.n	800f06a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	da0b      	bge.n	800ef66 <USBD_StdEPReq+0x212>
 800ef4e:	7bbb      	ldrb	r3, [r7, #14]
 800ef50:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ef54:	4613      	mov	r3, r2
 800ef56:	009b      	lsls	r3, r3, #2
 800ef58:	4413      	add	r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	3310      	adds	r3, #16
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	4413      	add	r3, r2
 800ef62:	3304      	adds	r3, #4
 800ef64:	e00b      	b.n	800ef7e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ef66:	7bbb      	ldrb	r3, [r7, #14]
 800ef68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef6c:	4613      	mov	r3, r2
 800ef6e:	009b      	lsls	r3, r3, #2
 800ef70:	4413      	add	r3, r2
 800ef72:	009b      	lsls	r3, r3, #2
 800ef74:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	4413      	add	r3, r2
 800ef7c:	3304      	adds	r3, #4
 800ef7e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	2200      	movs	r2, #0
 800ef84:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	2202      	movs	r2, #2
 800ef8a:	4619      	mov	r1, r3
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f000 fc61 	bl	800f854 <USBD_CtlSendData>
              break;
 800ef92:	e06a      	b.n	800f06a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ef94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	da11      	bge.n	800efc0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef9c:	7bbb      	ldrb	r3, [r7, #14]
 800ef9e:	f003 020f 	and.w	r2, r3, #15
 800efa2:	6879      	ldr	r1, [r7, #4]
 800efa4:	4613      	mov	r3, r2
 800efa6:	009b      	lsls	r3, r3, #2
 800efa8:	4413      	add	r3, r2
 800efaa:	009b      	lsls	r3, r3, #2
 800efac:	440b      	add	r3, r1
 800efae:	3324      	adds	r3, #36	@ 0x24
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d117      	bne.n	800efe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 fbda 	bl	800f772 <USBD_CtlError>
                  break;
 800efbe:	e054      	b.n	800f06a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800efc0:	7bbb      	ldrb	r3, [r7, #14]
 800efc2:	f003 020f 	and.w	r2, r3, #15
 800efc6:	6879      	ldr	r1, [r7, #4]
 800efc8:	4613      	mov	r3, r2
 800efca:	009b      	lsls	r3, r3, #2
 800efcc:	4413      	add	r3, r2
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	440b      	add	r3, r1
 800efd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d104      	bne.n	800efe6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800efdc:	6839      	ldr	r1, [r7, #0]
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 fbc7 	bl	800f772 <USBD_CtlError>
                  break;
 800efe4:	e041      	b.n	800f06a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efea:	2b00      	cmp	r3, #0
 800efec:	da0b      	bge.n	800f006 <USBD_StdEPReq+0x2b2>
 800efee:	7bbb      	ldrb	r3, [r7, #14]
 800eff0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eff4:	4613      	mov	r3, r2
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	4413      	add	r3, r2
 800effa:	009b      	lsls	r3, r3, #2
 800effc:	3310      	adds	r3, #16
 800effe:	687a      	ldr	r2, [r7, #4]
 800f000:	4413      	add	r3, r2
 800f002:	3304      	adds	r3, #4
 800f004:	e00b      	b.n	800f01e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f006:	7bbb      	ldrb	r3, [r7, #14]
 800f008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f00c:	4613      	mov	r3, r2
 800f00e:	009b      	lsls	r3, r3, #2
 800f010:	4413      	add	r3, r2
 800f012:	009b      	lsls	r3, r3, #2
 800f014:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f018:	687a      	ldr	r2, [r7, #4]
 800f01a:	4413      	add	r3, r2
 800f01c:	3304      	adds	r3, #4
 800f01e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f020:	7bbb      	ldrb	r3, [r7, #14]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d002      	beq.n	800f02c <USBD_StdEPReq+0x2d8>
 800f026:	7bbb      	ldrb	r3, [r7, #14]
 800f028:	2b80      	cmp	r3, #128	@ 0x80
 800f02a:	d103      	bne.n	800f034 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	2200      	movs	r2, #0
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	e00e      	b.n	800f052 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f034:	7bbb      	ldrb	r3, [r7, #14]
 800f036:	4619      	mov	r1, r3
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f006 f8c9 	bl	80151d0 <USBD_LL_IsStallEP>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d003      	beq.n	800f04c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2201      	movs	r2, #1
 800f048:	601a      	str	r2, [r3, #0]
 800f04a:	e002      	b.n	800f052 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	2200      	movs	r2, #0
 800f050:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f052:	68bb      	ldr	r3, [r7, #8]
 800f054:	2202      	movs	r2, #2
 800f056:	4619      	mov	r1, r3
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f000 fbfb 	bl	800f854 <USBD_CtlSendData>
              break;
 800f05e:	e004      	b.n	800f06a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f060:	6839      	ldr	r1, [r7, #0]
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 fb85 	bl	800f772 <USBD_CtlError>
              break;
 800f068:	bf00      	nop
          }
          break;
 800f06a:	e004      	b.n	800f076 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f06c:	6839      	ldr	r1, [r7, #0]
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f000 fb7f 	bl	800f772 <USBD_CtlError>
          break;
 800f074:	bf00      	nop
      }
      break;
 800f076:	e005      	b.n	800f084 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f078:	6839      	ldr	r1, [r7, #0]
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f000 fb79 	bl	800f772 <USBD_CtlError>
      break;
 800f080:	e000      	b.n	800f084 <USBD_StdEPReq+0x330>
      break;
 800f082:	bf00      	nop
  }

  return ret;
 800f084:	7bfb      	ldrb	r3, [r7, #15]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3710      	adds	r7, #16
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
	...

0800f090 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f09a:	2300      	movs	r3, #0
 800f09c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	885b      	ldrh	r3, [r3, #2]
 800f0aa:	0a1b      	lsrs	r3, r3, #8
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	3b01      	subs	r3, #1
 800f0b0:	2b0e      	cmp	r3, #14
 800f0b2:	f200 8152 	bhi.w	800f35a <USBD_GetDescriptor+0x2ca>
 800f0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f0bc <USBD_GetDescriptor+0x2c>)
 800f0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0bc:	0800f12d 	.word	0x0800f12d
 800f0c0:	0800f145 	.word	0x0800f145
 800f0c4:	0800f185 	.word	0x0800f185
 800f0c8:	0800f35b 	.word	0x0800f35b
 800f0cc:	0800f35b 	.word	0x0800f35b
 800f0d0:	0800f2fb 	.word	0x0800f2fb
 800f0d4:	0800f327 	.word	0x0800f327
 800f0d8:	0800f35b 	.word	0x0800f35b
 800f0dc:	0800f35b 	.word	0x0800f35b
 800f0e0:	0800f35b 	.word	0x0800f35b
 800f0e4:	0800f35b 	.word	0x0800f35b
 800f0e8:	0800f35b 	.word	0x0800f35b
 800f0ec:	0800f35b 	.word	0x0800f35b
 800f0f0:	0800f35b 	.word	0x0800f35b
 800f0f4:	0800f0f9 	.word	0x0800f0f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f0fe:	69db      	ldr	r3, [r3, #28]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d00b      	beq.n	800f11c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f10a:	69db      	ldr	r3, [r3, #28]
 800f10c:	687a      	ldr	r2, [r7, #4]
 800f10e:	7c12      	ldrb	r2, [r2, #16]
 800f110:	f107 0108 	add.w	r1, r7, #8
 800f114:	4610      	mov	r0, r2
 800f116:	4798      	blx	r3
 800f118:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f11a:	e126      	b.n	800f36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fb27 	bl	800f772 <USBD_CtlError>
        err++;
 800f124:	7afb      	ldrb	r3, [r7, #11]
 800f126:	3301      	adds	r3, #1
 800f128:	72fb      	strb	r3, [r7, #11]
      break;
 800f12a:	e11e      	b.n	800f36a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	7c12      	ldrb	r2, [r2, #16]
 800f138:	f107 0108 	add.w	r1, r7, #8
 800f13c:	4610      	mov	r0, r2
 800f13e:	4798      	blx	r3
 800f140:	60f8      	str	r0, [r7, #12]
      break;
 800f142:	e112      	b.n	800f36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	7c1b      	ldrb	r3, [r3, #16]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d10d      	bne.n	800f168 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f154:	f107 0208 	add.w	r2, r7, #8
 800f158:	4610      	mov	r0, r2
 800f15a:	4798      	blx	r3
 800f15c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	3301      	adds	r3, #1
 800f162:	2202      	movs	r2, #2
 800f164:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f166:	e100      	b.n	800f36a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f16e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f170:	f107 0208 	add.w	r2, r7, #8
 800f174:	4610      	mov	r0, r2
 800f176:	4798      	blx	r3
 800f178:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	3301      	adds	r3, #1
 800f17e:	2202      	movs	r2, #2
 800f180:	701a      	strb	r2, [r3, #0]
      break;
 800f182:	e0f2      	b.n	800f36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	885b      	ldrh	r3, [r3, #2]
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b05      	cmp	r3, #5
 800f18c:	f200 80ac 	bhi.w	800f2e8 <USBD_GetDescriptor+0x258>
 800f190:	a201      	add	r2, pc, #4	@ (adr r2, 800f198 <USBD_GetDescriptor+0x108>)
 800f192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f196:	bf00      	nop
 800f198:	0800f1b1 	.word	0x0800f1b1
 800f19c:	0800f1e5 	.word	0x0800f1e5
 800f1a0:	0800f219 	.word	0x0800f219
 800f1a4:	0800f24d 	.word	0x0800f24d
 800f1a8:	0800f281 	.word	0x0800f281
 800f1ac:	0800f2b5 	.word	0x0800f2b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1b6:	685b      	ldr	r3, [r3, #4]
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d00b      	beq.n	800f1d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1c2:	685b      	ldr	r3, [r3, #4]
 800f1c4:	687a      	ldr	r2, [r7, #4]
 800f1c6:	7c12      	ldrb	r2, [r2, #16]
 800f1c8:	f107 0108 	add.w	r1, r7, #8
 800f1cc:	4610      	mov	r0, r2
 800f1ce:	4798      	blx	r3
 800f1d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f1d2:	e091      	b.n	800f2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f1d4:	6839      	ldr	r1, [r7, #0]
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f000 facb 	bl	800f772 <USBD_CtlError>
            err++;
 800f1dc:	7afb      	ldrb	r3, [r7, #11]
 800f1de:	3301      	adds	r3, #1
 800f1e0:	72fb      	strb	r3, [r7, #11]
          break;
 800f1e2:	e089      	b.n	800f2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1ea:	689b      	ldr	r3, [r3, #8]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d00b      	beq.n	800f208 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1f6:	689b      	ldr	r3, [r3, #8]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	7c12      	ldrb	r2, [r2, #16]
 800f1fc:	f107 0108 	add.w	r1, r7, #8
 800f200:	4610      	mov	r0, r2
 800f202:	4798      	blx	r3
 800f204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f206:	e077      	b.n	800f2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f208:	6839      	ldr	r1, [r7, #0]
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f000 fab1 	bl	800f772 <USBD_CtlError>
            err++;
 800f210:	7afb      	ldrb	r3, [r7, #11]
 800f212:	3301      	adds	r3, #1
 800f214:	72fb      	strb	r3, [r7, #11]
          break;
 800f216:	e06f      	b.n	800f2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f21e:	68db      	ldr	r3, [r3, #12]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00b      	beq.n	800f23c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f22a:	68db      	ldr	r3, [r3, #12]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	7c12      	ldrb	r2, [r2, #16]
 800f230:	f107 0108 	add.w	r1, r7, #8
 800f234:	4610      	mov	r0, r2
 800f236:	4798      	blx	r3
 800f238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f23a:	e05d      	b.n	800f2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f23c:	6839      	ldr	r1, [r7, #0]
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f000 fa97 	bl	800f772 <USBD_CtlError>
            err++;
 800f244:	7afb      	ldrb	r3, [r7, #11]
 800f246:	3301      	adds	r3, #1
 800f248:	72fb      	strb	r3, [r7, #11]
          break;
 800f24a:	e055      	b.n	800f2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f252:	691b      	ldr	r3, [r3, #16]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00b      	beq.n	800f270 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f25e:	691b      	ldr	r3, [r3, #16]
 800f260:	687a      	ldr	r2, [r7, #4]
 800f262:	7c12      	ldrb	r2, [r2, #16]
 800f264:	f107 0108 	add.w	r1, r7, #8
 800f268:	4610      	mov	r0, r2
 800f26a:	4798      	blx	r3
 800f26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f26e:	e043      	b.n	800f2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f000 fa7d 	bl	800f772 <USBD_CtlError>
            err++;
 800f278:	7afb      	ldrb	r3, [r7, #11]
 800f27a:	3301      	adds	r3, #1
 800f27c:	72fb      	strb	r3, [r7, #11]
          break;
 800f27e:	e03b      	b.n	800f2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f286:	695b      	ldr	r3, [r3, #20]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d00b      	beq.n	800f2a4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f292:	695b      	ldr	r3, [r3, #20]
 800f294:	687a      	ldr	r2, [r7, #4]
 800f296:	7c12      	ldrb	r2, [r2, #16]
 800f298:	f107 0108 	add.w	r1, r7, #8
 800f29c:	4610      	mov	r0, r2
 800f29e:	4798      	blx	r3
 800f2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2a2:	e029      	b.n	800f2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f2a4:	6839      	ldr	r1, [r7, #0]
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f000 fa63 	bl	800f772 <USBD_CtlError>
            err++;
 800f2ac:	7afb      	ldrb	r3, [r7, #11]
 800f2ae:	3301      	adds	r3, #1
 800f2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800f2b2:	e021      	b.n	800f2f8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2ba:	699b      	ldr	r3, [r3, #24]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d00b      	beq.n	800f2d8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	687a      	ldr	r2, [r7, #4]
 800f2ca:	7c12      	ldrb	r2, [r2, #16]
 800f2cc:	f107 0108 	add.w	r1, r7, #8
 800f2d0:	4610      	mov	r0, r2
 800f2d2:	4798      	blx	r3
 800f2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2d6:	e00f      	b.n	800f2f8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f2d8:	6839      	ldr	r1, [r7, #0]
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 fa49 	bl	800f772 <USBD_CtlError>
            err++;
 800f2e0:	7afb      	ldrb	r3, [r7, #11]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800f2e6:	e007      	b.n	800f2f8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f2e8:	6839      	ldr	r1, [r7, #0]
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 fa41 	bl	800f772 <USBD_CtlError>
          err++;
 800f2f0:	7afb      	ldrb	r3, [r7, #11]
 800f2f2:	3301      	adds	r3, #1
 800f2f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f2f6:	bf00      	nop
      }
      break;
 800f2f8:	e037      	b.n	800f36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	7c1b      	ldrb	r3, [r3, #16]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d109      	bne.n	800f316 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f30a:	f107 0208 	add.w	r2, r7, #8
 800f30e:	4610      	mov	r0, r2
 800f310:	4798      	blx	r3
 800f312:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f314:	e029      	b.n	800f36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f316:	6839      	ldr	r1, [r7, #0]
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f000 fa2a 	bl	800f772 <USBD_CtlError>
        err++;
 800f31e:	7afb      	ldrb	r3, [r7, #11]
 800f320:	3301      	adds	r3, #1
 800f322:	72fb      	strb	r3, [r7, #11]
      break;
 800f324:	e021      	b.n	800f36a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	7c1b      	ldrb	r3, [r3, #16]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d10d      	bne.n	800f34a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f336:	f107 0208 	add.w	r2, r7, #8
 800f33a:	4610      	mov	r0, r2
 800f33c:	4798      	blx	r3
 800f33e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	3301      	adds	r3, #1
 800f344:	2207      	movs	r2, #7
 800f346:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f348:	e00f      	b.n	800f36a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f34a:	6839      	ldr	r1, [r7, #0]
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f000 fa10 	bl	800f772 <USBD_CtlError>
        err++;
 800f352:	7afb      	ldrb	r3, [r7, #11]
 800f354:	3301      	adds	r3, #1
 800f356:	72fb      	strb	r3, [r7, #11]
      break;
 800f358:	e007      	b.n	800f36a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fa08 	bl	800f772 <USBD_CtlError>
      err++;
 800f362:	7afb      	ldrb	r3, [r7, #11]
 800f364:	3301      	adds	r3, #1
 800f366:	72fb      	strb	r3, [r7, #11]
      break;
 800f368:	bf00      	nop
  }

  if (err != 0U)
 800f36a:	7afb      	ldrb	r3, [r7, #11]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d11e      	bne.n	800f3ae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	88db      	ldrh	r3, [r3, #6]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d016      	beq.n	800f3a6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f378:	893b      	ldrh	r3, [r7, #8]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d00e      	beq.n	800f39c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	88da      	ldrh	r2, [r3, #6]
 800f382:	893b      	ldrh	r3, [r7, #8]
 800f384:	4293      	cmp	r3, r2
 800f386:	bf28      	it	cs
 800f388:	4613      	movcs	r3, r2
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f38e:	893b      	ldrh	r3, [r7, #8]
 800f390:	461a      	mov	r2, r3
 800f392:	68f9      	ldr	r1, [r7, #12]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f000 fa5d 	bl	800f854 <USBD_CtlSendData>
 800f39a:	e009      	b.n	800f3b0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 f9e7 	bl	800f772 <USBD_CtlError>
 800f3a4:	e004      	b.n	800f3b0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f000 faae 	bl	800f908 <USBD_CtlSendStatus>
 800f3ac:	e000      	b.n	800f3b0 <USBD_GetDescriptor+0x320>
    return;
 800f3ae:	bf00      	nop
  }
}
 800f3b0:	3710      	adds	r7, #16
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}
 800f3b6:	bf00      	nop

0800f3b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	889b      	ldrh	r3, [r3, #4]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d131      	bne.n	800f42e <USBD_SetAddress+0x76>
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	88db      	ldrh	r3, [r3, #6]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d12d      	bne.n	800f42e <USBD_SetAddress+0x76>
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	885b      	ldrh	r3, [r3, #2]
 800f3d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f3d8:	d829      	bhi.n	800f42e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	885b      	ldrh	r3, [r3, #2]
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3ec:	b2db      	uxtb	r3, r3
 800f3ee:	2b03      	cmp	r3, #3
 800f3f0:	d104      	bne.n	800f3fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f3f2:	6839      	ldr	r1, [r7, #0]
 800f3f4:	6878      	ldr	r0, [r7, #4]
 800f3f6:	f000 f9bc 	bl	800f772 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fa:	e01d      	b.n	800f438 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	7bfa      	ldrb	r2, [r7, #15]
 800f400:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f404:	7bfb      	ldrb	r3, [r7, #15]
 800f406:	4619      	mov	r1, r3
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f005 ff0d 	bl	8015228 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 fa7a 	bl	800f908 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f414:	7bfb      	ldrb	r3, [r7, #15]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d004      	beq.n	800f424 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2202      	movs	r2, #2
 800f41e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f422:	e009      	b.n	800f438 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	2201      	movs	r2, #1
 800f428:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f42c:	e004      	b.n	800f438 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f42e:	6839      	ldr	r1, [r7, #0]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f000 f99e 	bl	800f772 <USBD_CtlError>
  }
}
 800f436:	bf00      	nop
 800f438:	bf00      	nop
 800f43a:	3710      	adds	r7, #16
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}

0800f440 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f440:	b580      	push	{r7, lr}
 800f442:	b084      	sub	sp, #16
 800f444:	af00      	add	r7, sp, #0
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f44a:	2300      	movs	r3, #0
 800f44c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	885b      	ldrh	r3, [r3, #2]
 800f452:	b2da      	uxtb	r2, r3
 800f454:	4b4e      	ldr	r3, [pc, #312]	@ (800f590 <USBD_SetConfig+0x150>)
 800f456:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f458:	4b4d      	ldr	r3, [pc, #308]	@ (800f590 <USBD_SetConfig+0x150>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d905      	bls.n	800f46c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 f985 	bl	800f772 <USBD_CtlError>
    return USBD_FAIL;
 800f468:	2303      	movs	r3, #3
 800f46a:	e08c      	b.n	800f586 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f472:	b2db      	uxtb	r3, r3
 800f474:	2b02      	cmp	r3, #2
 800f476:	d002      	beq.n	800f47e <USBD_SetConfig+0x3e>
 800f478:	2b03      	cmp	r3, #3
 800f47a:	d029      	beq.n	800f4d0 <USBD_SetConfig+0x90>
 800f47c:	e075      	b.n	800f56a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f47e:	4b44      	ldr	r3, [pc, #272]	@ (800f590 <USBD_SetConfig+0x150>)
 800f480:	781b      	ldrb	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d020      	beq.n	800f4c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f486:	4b42      	ldr	r3, [pc, #264]	@ (800f590 <USBD_SetConfig+0x150>)
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f490:	4b3f      	ldr	r3, [pc, #252]	@ (800f590 <USBD_SetConfig+0x150>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	4619      	mov	r1, r3
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f7ff f84b 	bl	800e532 <USBD_SetClassConfig>
 800f49c:	4603      	mov	r3, r0
 800f49e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f4a0:	7bfb      	ldrb	r3, [r7, #15]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d008      	beq.n	800f4b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f4a6:	6839      	ldr	r1, [r7, #0]
 800f4a8:	6878      	ldr	r0, [r7, #4]
 800f4aa:	f000 f962 	bl	800f772 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2202      	movs	r2, #2
 800f4b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f4b6:	e065      	b.n	800f584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f000 fa25 	bl	800f908 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2203      	movs	r2, #3
 800f4c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f4c6:	e05d      	b.n	800f584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f4c8:	6878      	ldr	r0, [r7, #4]
 800f4ca:	f000 fa1d 	bl	800f908 <USBD_CtlSendStatus>
      break;
 800f4ce:	e059      	b.n	800f584 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f4d0:	4b2f      	ldr	r3, [pc, #188]	@ (800f590 <USBD_SetConfig+0x150>)
 800f4d2:	781b      	ldrb	r3, [r3, #0]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d112      	bne.n	800f4fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	2202      	movs	r2, #2
 800f4dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f4e0:	4b2b      	ldr	r3, [pc, #172]	@ (800f590 <USBD_SetConfig+0x150>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4ea:	4b29      	ldr	r3, [pc, #164]	@ (800f590 <USBD_SetConfig+0x150>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	6878      	ldr	r0, [r7, #4]
 800f4f2:	f7ff f83a 	bl	800e56a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f000 fa06 	bl	800f908 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f4fc:	e042      	b.n	800f584 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f4fe:	4b24      	ldr	r3, [pc, #144]	@ (800f590 <USBD_SetConfig+0x150>)
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	461a      	mov	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	429a      	cmp	r2, r3
 800f50a:	d02a      	beq.n	800f562 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	b2db      	uxtb	r3, r3
 800f512:	4619      	mov	r1, r3
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f7ff f828 	bl	800e56a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f51a:	4b1d      	ldr	r3, [pc, #116]	@ (800f590 <USBD_SetConfig+0x150>)
 800f51c:	781b      	ldrb	r3, [r3, #0]
 800f51e:	461a      	mov	r2, r3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f524:	4b1a      	ldr	r3, [pc, #104]	@ (800f590 <USBD_SetConfig+0x150>)
 800f526:	781b      	ldrb	r3, [r3, #0]
 800f528:	4619      	mov	r1, r3
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff f801 	bl	800e532 <USBD_SetClassConfig>
 800f530:	4603      	mov	r3, r0
 800f532:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f534:	7bfb      	ldrb	r3, [r7, #15]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d00f      	beq.n	800f55a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f53a:	6839      	ldr	r1, [r7, #0]
 800f53c:	6878      	ldr	r0, [r7, #4]
 800f53e:	f000 f918 	bl	800f772 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	685b      	ldr	r3, [r3, #4]
 800f546:	b2db      	uxtb	r3, r3
 800f548:	4619      	mov	r1, r3
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff f80d 	bl	800e56a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2202      	movs	r2, #2
 800f554:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f558:	e014      	b.n	800f584 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f9d4 	bl	800f908 <USBD_CtlSendStatus>
      break;
 800f560:	e010      	b.n	800f584 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f000 f9d0 	bl	800f908 <USBD_CtlSendStatus>
      break;
 800f568:	e00c      	b.n	800f584 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f56a:	6839      	ldr	r1, [r7, #0]
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f000 f900 	bl	800f772 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f572:	4b07      	ldr	r3, [pc, #28]	@ (800f590 <USBD_SetConfig+0x150>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	4619      	mov	r1, r3
 800f578:	6878      	ldr	r0, [r7, #4]
 800f57a:	f7fe fff6 	bl	800e56a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f57e:	2303      	movs	r3, #3
 800f580:	73fb      	strb	r3, [r7, #15]
      break;
 800f582:	bf00      	nop
  }

  return ret;
 800f584:	7bfb      	ldrb	r3, [r7, #15]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3710      	adds	r7, #16
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}
 800f58e:	bf00      	nop
 800f590:	20000f48 	.word	0x20000f48

0800f594 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
 800f59c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	88db      	ldrh	r3, [r3, #6]
 800f5a2:	2b01      	cmp	r3, #1
 800f5a4:	d004      	beq.n	800f5b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f5a6:	6839      	ldr	r1, [r7, #0]
 800f5a8:	6878      	ldr	r0, [r7, #4]
 800f5aa:	f000 f8e2 	bl	800f772 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f5ae:	e023      	b.n	800f5f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f5b6:	b2db      	uxtb	r3, r3
 800f5b8:	2b02      	cmp	r3, #2
 800f5ba:	dc02      	bgt.n	800f5c2 <USBD_GetConfig+0x2e>
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	dc03      	bgt.n	800f5c8 <USBD_GetConfig+0x34>
 800f5c0:	e015      	b.n	800f5ee <USBD_GetConfig+0x5a>
 800f5c2:	2b03      	cmp	r3, #3
 800f5c4:	d00b      	beq.n	800f5de <USBD_GetConfig+0x4a>
 800f5c6:	e012      	b.n	800f5ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	2200      	movs	r2, #0
 800f5cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	3308      	adds	r3, #8
 800f5d2:	2201      	movs	r2, #1
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 f93c 	bl	800f854 <USBD_CtlSendData>
        break;
 800f5dc:	e00c      	b.n	800f5f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	3304      	adds	r3, #4
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f000 f934 	bl	800f854 <USBD_CtlSendData>
        break;
 800f5ec:	e004      	b.n	800f5f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f5ee:	6839      	ldr	r1, [r7, #0]
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f000 f8be 	bl	800f772 <USBD_CtlError>
        break;
 800f5f6:	bf00      	nop
}
 800f5f8:	bf00      	nop
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f610:	b2db      	uxtb	r3, r3
 800f612:	3b01      	subs	r3, #1
 800f614:	2b02      	cmp	r3, #2
 800f616:	d81e      	bhi.n	800f656 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	88db      	ldrh	r3, [r3, #6]
 800f61c:	2b02      	cmp	r3, #2
 800f61e:	d004      	beq.n	800f62a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f620:	6839      	ldr	r1, [r7, #0]
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f000 f8a5 	bl	800f772 <USBD_CtlError>
        break;
 800f628:	e01a      	b.n	800f660 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	2201      	movs	r2, #1
 800f62e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f636:	2b00      	cmp	r3, #0
 800f638:	d005      	beq.n	800f646 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	68db      	ldr	r3, [r3, #12]
 800f63e:	f043 0202 	orr.w	r2, r3, #2
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	330c      	adds	r3, #12
 800f64a:	2202      	movs	r2, #2
 800f64c:	4619      	mov	r1, r3
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f000 f900 	bl	800f854 <USBD_CtlSendData>
      break;
 800f654:	e004      	b.n	800f660 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	6878      	ldr	r0, [r7, #4]
 800f65a:	f000 f88a 	bl	800f772 <USBD_CtlError>
      break;
 800f65e:	bf00      	nop
  }
}
 800f660:	bf00      	nop
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f668:	b580      	push	{r7, lr}
 800f66a:	b082      	sub	sp, #8
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
 800f670:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	885b      	ldrh	r3, [r3, #2]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d107      	bne.n	800f68a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2201      	movs	r2, #1
 800f67e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f000 f940 	bl	800f908 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f688:	e013      	b.n	800f6b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	885b      	ldrh	r3, [r3, #2]
 800f68e:	2b02      	cmp	r3, #2
 800f690:	d10b      	bne.n	800f6aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	889b      	ldrh	r3, [r3, #4]
 800f696:	0a1b      	lsrs	r3, r3, #8
 800f698:	b29b      	uxth	r3, r3
 800f69a:	b2da      	uxtb	r2, r3
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f6a2:	6878      	ldr	r0, [r7, #4]
 800f6a4:	f000 f930 	bl	800f908 <USBD_CtlSendStatus>
}
 800f6a8:	e003      	b.n	800f6b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 f860 	bl	800f772 <USBD_CtlError>
}
 800f6b2:	bf00      	nop
 800f6b4:	3708      	adds	r7, #8
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b082      	sub	sp, #8
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
 800f6c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	3b01      	subs	r3, #1
 800f6ce:	2b02      	cmp	r3, #2
 800f6d0:	d80b      	bhi.n	800f6ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	885b      	ldrh	r3, [r3, #2]
 800f6d6:	2b01      	cmp	r3, #1
 800f6d8:	d10c      	bne.n	800f6f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f6e2:	6878      	ldr	r0, [r7, #4]
 800f6e4:	f000 f910 	bl	800f908 <USBD_CtlSendStatus>
      }
      break;
 800f6e8:	e004      	b.n	800f6f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6878      	ldr	r0, [r7, #4]
 800f6ee:	f000 f840 	bl	800f772 <USBD_CtlError>
      break;
 800f6f2:	e000      	b.n	800f6f6 <USBD_ClrFeature+0x3c>
      break;
 800f6f4:	bf00      	nop
  }
}
 800f6f6:	bf00      	nop
 800f6f8:	3708      	adds	r7, #8
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}

0800f6fe <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f6fe:	b580      	push	{r7, lr}
 800f700:	b084      	sub	sp, #16
 800f702:	af00      	add	r7, sp, #0
 800f704:	6078      	str	r0, [r7, #4]
 800f706:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	781a      	ldrb	r2, [r3, #0]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	3301      	adds	r3, #1
 800f718:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	781a      	ldrb	r2, [r3, #0]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	3301      	adds	r3, #1
 800f726:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f728:	68f8      	ldr	r0, [r7, #12]
 800f72a:	f7ff fa16 	bl	800eb5a <SWAPBYTE>
 800f72e:	4603      	mov	r3, r0
 800f730:	461a      	mov	r2, r3
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	3301      	adds	r3, #1
 800f73a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	3301      	adds	r3, #1
 800f740:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f742:	68f8      	ldr	r0, [r7, #12]
 800f744:	f7ff fa09 	bl	800eb5a <SWAPBYTE>
 800f748:	4603      	mov	r3, r0
 800f74a:	461a      	mov	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	3301      	adds	r3, #1
 800f754:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	3301      	adds	r3, #1
 800f75a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f75c:	68f8      	ldr	r0, [r7, #12]
 800f75e:	f7ff f9fc 	bl	800eb5a <SWAPBYTE>
 800f762:	4603      	mov	r3, r0
 800f764:	461a      	mov	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	80da      	strh	r2, [r3, #6]
}
 800f76a:	bf00      	nop
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b082      	sub	sp, #8
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
 800f77a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f77c:	2180      	movs	r1, #128	@ 0x80
 800f77e:	6878      	ldr	r0, [r7, #4]
 800f780:	f005 fce8 	bl	8015154 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f784:	2100      	movs	r1, #0
 800f786:	6878      	ldr	r0, [r7, #4]
 800f788:	f005 fce4 	bl	8015154 <USBD_LL_StallEP>
}
 800f78c:	bf00      	nop
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b086      	sub	sp, #24
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d036      	beq.n	800f818 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f7ae:	6938      	ldr	r0, [r7, #16]
 800f7b0:	f000 f836 	bl	800f820 <USBD_GetLen>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	3301      	adds	r3, #1
 800f7b8:	b29b      	uxth	r3, r3
 800f7ba:	005b      	lsls	r3, r3, #1
 800f7bc:	b29a      	uxth	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f7c2:	7dfb      	ldrb	r3, [r7, #23]
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	7812      	ldrb	r2, [r2, #0]
 800f7cc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f7ce:	7dfb      	ldrb	r3, [r7, #23]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f7d4:	7dfb      	ldrb	r3, [r7, #23]
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	4413      	add	r3, r2
 800f7da:	2203      	movs	r2, #3
 800f7dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f7de:	7dfb      	ldrb	r3, [r7, #23]
 800f7e0:	3301      	adds	r3, #1
 800f7e2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f7e4:	e013      	b.n	800f80e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	68ba      	ldr	r2, [r7, #8]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	693a      	ldr	r2, [r7, #16]
 800f7ee:	7812      	ldrb	r2, [r2, #0]
 800f7f0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f7f2:	693b      	ldr	r3, [r7, #16]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	613b      	str	r3, [r7, #16]
    idx++;
 800f7f8:	7dfb      	ldrb	r3, [r7, #23]
 800f7fa:	3301      	adds	r3, #1
 800f7fc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f7fe:	7dfb      	ldrb	r3, [r7, #23]
 800f800:	68ba      	ldr	r2, [r7, #8]
 800f802:	4413      	add	r3, r2
 800f804:	2200      	movs	r2, #0
 800f806:	701a      	strb	r2, [r3, #0]
    idx++;
 800f808:	7dfb      	ldrb	r3, [r7, #23]
 800f80a:	3301      	adds	r3, #1
 800f80c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d1e7      	bne.n	800f7e6 <USBD_GetString+0x52>
 800f816:	e000      	b.n	800f81a <USBD_GetString+0x86>
    return;
 800f818:	bf00      	nop
  }
}
 800f81a:	3718      	adds	r7, #24
 800f81c:	46bd      	mov	sp, r7
 800f81e:	bd80      	pop	{r7, pc}

0800f820 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f820:	b480      	push	{r7}
 800f822:	b085      	sub	sp, #20
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f828:	2300      	movs	r3, #0
 800f82a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f830:	e005      	b.n	800f83e <USBD_GetLen+0x1e>
  {
    len++;
 800f832:	7bfb      	ldrb	r3, [r7, #15]
 800f834:	3301      	adds	r3, #1
 800f836:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	3301      	adds	r3, #1
 800f83c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	781b      	ldrb	r3, [r3, #0]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1f5      	bne.n	800f832 <USBD_GetLen+0x12>
  }

  return len;
 800f846:	7bfb      	ldrb	r3, [r7, #15]
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3714      	adds	r7, #20
 800f84c:	46bd      	mov	sp, r7
 800f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f852:	4770      	bx	lr

0800f854 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	60f8      	str	r0, [r7, #12]
 800f85c:	60b9      	str	r1, [r7, #8]
 800f85e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	2202      	movs	r2, #2
 800f864:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	68ba      	ldr	r2, [r7, #8]
 800f878:	2100      	movs	r1, #0
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f005 fcf3 	bl	8015266 <USBD_LL_Transmit>

  return USBD_OK;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3710      	adds	r7, #16
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}

0800f88a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f88a:	b580      	push	{r7, lr}
 800f88c:	b084      	sub	sp, #16
 800f88e:	af00      	add	r7, sp, #0
 800f890:	60f8      	str	r0, [r7, #12]
 800f892:	60b9      	str	r1, [r7, #8]
 800f894:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	2100      	movs	r1, #0
 800f89c:	68f8      	ldr	r0, [r7, #12]
 800f89e:	f005 fce2 	bl	8015266 <USBD_LL_Transmit>

  return USBD_OK;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	3710      	adds	r7, #16
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	bd80      	pop	{r7, pc}

0800f8ac <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b084      	sub	sp, #16
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2203      	movs	r2, #3
 800f8bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	68ba      	ldr	r2, [r7, #8]
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	68f8      	ldr	r0, [r7, #12]
 800f8d8:	f005 fce6 	bl	80152a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8dc:	2300      	movs	r3, #0
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b084      	sub	sp, #16
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	60f8      	str	r0, [r7, #12]
 800f8ee:	60b9      	str	r1, [r7, #8]
 800f8f0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	68ba      	ldr	r2, [r7, #8]
 800f8f6:	2100      	movs	r1, #0
 800f8f8:	68f8      	ldr	r0, [r7, #12]
 800f8fa:	f005 fcd5 	bl	80152a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f8fe:	2300      	movs	r3, #0
}
 800f900:	4618      	mov	r0, r3
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b082      	sub	sp, #8
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2204      	movs	r2, #4
 800f914:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f918:	2300      	movs	r3, #0
 800f91a:	2200      	movs	r2, #0
 800f91c:	2100      	movs	r1, #0
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f005 fca1 	bl	8015266 <USBD_LL_Transmit>

  return USBD_OK;
 800f924:	2300      	movs	r3, #0
}
 800f926:	4618      	mov	r0, r3
 800f928:	3708      	adds	r7, #8
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}

0800f92e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f92e:	b580      	push	{r7, lr}
 800f930:	b082      	sub	sp, #8
 800f932:	af00      	add	r7, sp, #0
 800f934:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2205      	movs	r2, #5
 800f93a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f93e:	2300      	movs	r3, #0
 800f940:	2200      	movs	r2, #0
 800f942:	2100      	movs	r1, #0
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f005 fcaf 	bl	80152a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f94a:	2300      	movs	r3, #0
}
 800f94c:	4618      	mov	r0, r3
 800f94e:	3708      	adds	r7, #8
 800f950:	46bd      	mov	sp, r7
 800f952:	bd80      	pop	{r7, pc}

0800f954 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b088      	sub	sp, #32
 800f958:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f95a:	2300      	movs	r3, #0
 800f95c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f95e:	f107 0308 	add.w	r3, r7, #8
 800f962:	2218      	movs	r2, #24
 800f964:	2100      	movs	r1, #0
 800f966:	4618      	mov	r0, r3
 800f968:	f001 fa21 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800f96c:	233f      	movs	r3, #63	@ 0x3f
 800f96e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800f970:	2381      	movs	r3, #129	@ 0x81
 800f972:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f974:	1dfb      	adds	r3, r7, #7
 800f976:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f978:	2301      	movs	r3, #1
 800f97a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f97c:	f107 0308 	add.w	r3, r7, #8
 800f980:	2100      	movs	r1, #0
 800f982:	4618      	mov	r0, r3
 800f984:	f001 fc9c 	bl	80112c0 <hci_send_req>
 800f988:	4603      	mov	r3, r0
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	da01      	bge.n	800f992 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f98e:	23ff      	movs	r3, #255	@ 0xff
 800f990:	e000      	b.n	800f994 <aci_gap_set_non_discoverable+0x40>
  return status;
 800f992:	79fb      	ldrb	r3, [r7, #7]
}
 800f994:	4618      	mov	r0, r3
 800f996:	3720      	adds	r7, #32
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}

0800f99c <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800f99c:	b5b0      	push	{r4, r5, r7, lr}
 800f99e:	b0ce      	sub	sp, #312	@ 0x138
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	460c      	mov	r4, r1
 800f9a6:	4610      	mov	r0, r2
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f9ae:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f9b2:	462a      	mov	r2, r5
 800f9b4:	701a      	strb	r2, [r3, #0]
 800f9b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f9ba:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800f9be:	4622      	mov	r2, r4
 800f9c0:	801a      	strh	r2, [r3, #0]
 800f9c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f9c6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800f9ca:	4602      	mov	r2, r0
 800f9cc:	801a      	strh	r2, [r3, #0]
 800f9ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f9d2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f9d6:	460a      	mov	r2, r1
 800f9d8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800f9da:	f107 0310 	add.w	r3, r7, #16
 800f9de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800f9e2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800f9e6:	3308      	adds	r3, #8
 800f9e8:	f107 0210 	add.w	r2, r7, #16
 800f9ec:	4413      	add	r3, r2
 800f9ee:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800f9f2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800f9f6:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800f9fa:	4413      	add	r3, r2
 800f9fc:	3309      	adds	r3, #9
 800f9fe:	f107 0210 	add.w	r2, r7, #16
 800fa02:	4413      	add	r3, r2
 800fa04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fa08:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fa0c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fa10:	2200      	movs	r2, #0
 800fa12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fa14:	2300      	movs	r3, #0
 800fa16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800fa1a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fa1e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fa22:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800fa26:	7812      	ldrb	r2, [r2, #0]
 800fa28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fa2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa2e:	3301      	adds	r3, #1
 800fa30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800fa34:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fa38:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fa3c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800fa40:	8812      	ldrh	r2, [r2, #0]
 800fa42:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800fa46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa4a:	3302      	adds	r3, #2
 800fa4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800fa50:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fa54:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fa58:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800fa5c:	8812      	ldrh	r2, [r2, #0]
 800fa5e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800fa62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa66:	3302      	adds	r3, #2
 800fa68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800fa6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fa70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fa74:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800fa78:	7812      	ldrb	r2, [r2, #0]
 800fa7a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fa7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa80:	3301      	adds	r3, #1
 800fa82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800fa86:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fa8a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800fa8e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800fa90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa94:	3301      	adds	r3, #1
 800fa96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800fa9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fa9e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800faa2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800faa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800faa8:	3301      	adds	r3, #1
 800faaa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800faae:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fab2:	3308      	adds	r3, #8
 800fab4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800fab8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800fabc:	4618      	mov	r0, r3
 800fabe:	f001 f966 	bl	8010d8e <Osal_MemCpy>
    index_input += Local_Name_Length;
 800fac2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800fac6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800faca:	4413      	add	r3, r2
 800facc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800fad0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fad4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800fad8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800fada:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fade:	3301      	adds	r3, #1
 800fae0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800fae4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fae8:	3301      	adds	r3, #1
 800faea:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800faee:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800faf2:	4618      	mov	r0, r3
 800faf4:	f001 f94b 	bl	8010d8e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800faf8:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800fafc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800fb00:	4413      	add	r3, r2
 800fb02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800fb06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb0a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800fb0e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800fb10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb14:	3302      	adds	r3, #2
 800fb16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800fb1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb1e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800fb22:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800fb24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb28:	3302      	adds	r3, #2
 800fb2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fb2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fb32:	2218      	movs	r2, #24
 800fb34:	2100      	movs	r1, #0
 800fb36:	4618      	mov	r0, r3
 800fb38:	f001 f939 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800fb3c:	233f      	movs	r3, #63	@ 0x3f
 800fb3e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800fb42:	2383      	movs	r3, #131	@ 0x83
 800fb44:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fb48:	f107 0310 	add.w	r3, r7, #16
 800fb4c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fb50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb54:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fb58:	f107 030f 	add.w	r3, r7, #15
 800fb5c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fb60:	2301      	movs	r3, #1
 800fb62:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fb6a:	2100      	movs	r1, #0
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f001 fba7 	bl	80112c0 <hci_send_req>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	da01      	bge.n	800fb7c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800fb78:	23ff      	movs	r3, #255	@ 0xff
 800fb7a:	e004      	b.n	800fb86 <aci_gap_set_discoverable+0x1ea>
  return status;
 800fb7c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fb80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fb84:	781b      	ldrb	r3, [r3, #0]
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bdb0      	pop	{r4, r5, r7, pc}

0800fb90 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b0cc      	sub	sp, #304	@ 0x130
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	4602      	mov	r2, r0
 800fb98:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb9c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fba0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800fba2:	f107 0310 	add.w	r3, r7, #16
 800fba6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fbaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbae:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fbb2:	2200      	movs	r2, #0
 800fbb4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800fbbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbc0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbc4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fbc8:	7812      	ldrb	r2, [r2, #0]
 800fbca:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fbcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fbd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fbda:	2218      	movs	r2, #24
 800fbdc:	2100      	movs	r1, #0
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f001 f8e5 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800fbe4:	233f      	movs	r3, #63	@ 0x3f
 800fbe6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800fbea:	2385      	movs	r3, #133	@ 0x85
 800fbec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fbf0:	f107 0310 	add.w	r3, r7, #16
 800fbf4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fbf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbfc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fc00:	f107 030f 	add.w	r3, r7, #15
 800fc04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fc08:	2301      	movs	r3, #1
 800fc0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc12:	2100      	movs	r1, #0
 800fc14:	4618      	mov	r0, r3
 800fc16:	f001 fb53 	bl	80112c0 <hci_send_req>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	da01      	bge.n	800fc24 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800fc20:	23ff      	movs	r3, #255	@ 0xff
 800fc22:	e004      	b.n	800fc2e <aci_gap_set_io_capability+0x9e>
  return status;
 800fc24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc28:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fc2c:	781b      	ldrb	r3, [r3, #0]
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fc34:	46bd      	mov	sp, r7
 800fc36:	bd80      	pop	{r7, pc}

0800fc38 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800fc38:	b5b0      	push	{r4, r5, r7, lr}
 800fc3a:	b0cc      	sub	sp, #304	@ 0x130
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	4605      	mov	r5, r0
 800fc40:	460c      	mov	r4, r1
 800fc42:	4610      	mov	r0, r2
 800fc44:	4619      	mov	r1, r3
 800fc46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc4a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fc4e:	462a      	mov	r2, r5
 800fc50:	701a      	strb	r2, [r3, #0]
 800fc52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc56:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fc5a:	4622      	mov	r2, r4
 800fc5c:	701a      	strb	r2, [r3, #0]
 800fc5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc62:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fc66:	4602      	mov	r2, r0
 800fc68:	701a      	strb	r2, [r3, #0]
 800fc6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fc72:	460a      	mov	r2, r1
 800fc74:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800fc76:	f107 0310 	add.w	r3, r7, #16
 800fc7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fc7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc82:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fc86:	2200      	movs	r2, #0
 800fc88:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800fc90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc94:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fc98:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fc9c:	7812      	ldrb	r2, [r2, #0]
 800fc9e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fca4:	3301      	adds	r3, #1
 800fca6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800fcaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fcae:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fcb2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fcb6:	7812      	ldrb	r2, [r2, #0]
 800fcb8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fcba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fcbe:	3301      	adds	r3, #1
 800fcc0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800fcc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fcc8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fccc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fcd0:	7812      	ldrb	r2, [r2, #0]
 800fcd2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fcd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fcd8:	3301      	adds	r3, #1
 800fcda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800fcde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fce2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fce6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fcea:	7812      	ldrb	r2, [r2, #0]
 800fcec:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800fcee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fcf2:	3301      	adds	r3, #1
 800fcf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800fcf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fcfc:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800fd00:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800fd02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd06:	3301      	adds	r3, #1
 800fd08:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800fd0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd10:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800fd14:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fd16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd1a:	3301      	adds	r3, #1
 800fd1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800fd20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd24:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800fd28:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800fd2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd2e:	3301      	adds	r3, #1
 800fd30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800fd34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd38:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800fd3c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800fd40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd44:	3304      	adds	r3, #4
 800fd46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800fd4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fd4e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800fd52:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800fd54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd58:	3301      	adds	r3, #1
 800fd5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fd5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd62:	2218      	movs	r2, #24
 800fd64:	2100      	movs	r1, #0
 800fd66:	4618      	mov	r0, r3
 800fd68:	f001 f821 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800fd6c:	233f      	movs	r3, #63	@ 0x3f
 800fd6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800fd72:	2386      	movs	r3, #134	@ 0x86
 800fd74:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fd78:	f107 0310 	add.w	r3, r7, #16
 800fd7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fd80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fd88:	f107 030f 	add.w	r3, r7, #15
 800fd8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fd90:	2301      	movs	r3, #1
 800fd92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fd96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd9a:	2100      	movs	r1, #0
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	f001 fa8f 	bl	80112c0 <hci_send_req>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	da01      	bge.n	800fdac <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800fda8:	23ff      	movs	r3, #255	@ 0xff
 800fdaa:	e004      	b.n	800fdb6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800fdac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdb0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fdb4:	781b      	ldrb	r3, [r3, #0]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	bdb0      	pop	{r4, r5, r7, pc}

0800fdc0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b0cc      	sub	sp, #304	@ 0x130
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdcc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fdd0:	6019      	str	r1, [r3, #0]
 800fdd2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fdd6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fdda:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800fddc:	f107 0310 	add.w	r3, r7, #16
 800fde0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fde4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fde8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fdec:	2200      	movs	r2, #0
 800fdee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800fdf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fdfa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fdfe:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fe02:	8812      	ldrh	r2, [r2, #0]
 800fe04:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fe06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe0a:	3302      	adds	r3, #2
 800fe0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800fe10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe14:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe18:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fe1c:	6812      	ldr	r2, [r2, #0]
 800fe1e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800fe22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe26:	3304      	adds	r3, #4
 800fe28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe2c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe30:	2218      	movs	r2, #24
 800fe32:	2100      	movs	r1, #0
 800fe34:	4618      	mov	r0, r3
 800fe36:	f000 ffba 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800fe3a:	233f      	movs	r3, #63	@ 0x3f
 800fe3c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800fe40:	2388      	movs	r3, #136	@ 0x88
 800fe42:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fe46:	f107 0310 	add.w	r3, r7, #16
 800fe4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fe4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fe56:	f107 030f 	add.w	r3, r7, #15
 800fe5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fe5e:	2301      	movs	r3, #1
 800fe60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fe64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe68:	2100      	movs	r1, #0
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f001 fa28 	bl	80112c0 <hci_send_req>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	da01      	bge.n	800fe7a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800fe76:	23ff      	movs	r3, #255	@ 0xff
 800fe78:	e004      	b.n	800fe84 <aci_gap_pass_key_resp+0xc4>
  return status;
 800fe7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fe7e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fe82:	781b      	ldrb	r3, [r3, #0]
}
 800fe84:	4618      	mov	r0, r3
 800fe86:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}

0800fe8e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800fe8e:	b590      	push	{r4, r7, lr}
 800fe90:	b0cd      	sub	sp, #308	@ 0x134
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	4604      	mov	r4, r0
 800fe96:	4608      	mov	r0, r1
 800fe98:	4611      	mov	r1, r2
 800fe9a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fe9e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800fea2:	6013      	str	r3, [r2, #0]
 800fea4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fea8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800feac:	4622      	mov	r2, r4
 800feae:	701a      	strb	r2, [r3, #0]
 800feb0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800feb4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800feb8:	4602      	mov	r2, r0
 800feba:	701a      	strb	r2, [r3, #0]
 800febc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fec0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fec4:	460a      	mov	r2, r1
 800fec6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800fec8:	f107 0310 	add.w	r3, r7, #16
 800fecc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800fed0:	f107 0308 	add.w	r3, r7, #8
 800fed4:	2207      	movs	r2, #7
 800fed6:	2100      	movs	r1, #0
 800fed8:	4618      	mov	r0, r3
 800feda:	f000 ff68 	bl	8010dae <Osal_MemSet>
  int index_input = 0;
 800fede:	2300      	movs	r3, #0
 800fee0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800fee4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fee8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800feec:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fef0:	7812      	ldrb	r2, [r2, #0]
 800fef2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fef4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fef8:	3301      	adds	r3, #1
 800fefa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800fefe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff02:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ff06:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ff0a:	7812      	ldrb	r2, [r2, #0]
 800ff0c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ff0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff12:	3301      	adds	r3, #1
 800ff14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ff18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ff20:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ff24:	7812      	ldrb	r2, [r2, #0]
 800ff26:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ff28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff36:	2218      	movs	r2, #24
 800ff38:	2100      	movs	r1, #0
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f000 ff37 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 800ff40:	233f      	movs	r3, #63	@ 0x3f
 800ff42:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800ff46:	238a      	movs	r3, #138	@ 0x8a
 800ff48:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ff4c:	f107 0310 	add.w	r3, r7, #16
 800ff50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ff54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff58:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800ff5c:	f107 0308 	add.w	r3, r7, #8
 800ff60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ff64:	2307      	movs	r3, #7
 800ff66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff6e:	2100      	movs	r1, #0
 800ff70:	4618      	mov	r0, r3
 800ff72:	f001 f9a5 	bl	80112c0 <hci_send_req>
 800ff76:	4603      	mov	r3, r0
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	da01      	bge.n	800ff80 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800ff7c:	23ff      	movs	r3, #255	@ 0xff
 800ff7e:	e02e      	b.n	800ffde <aci_gap_init+0x150>
  if ( resp.Status )
 800ff80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff84:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d005      	beq.n	800ff9a <aci_gap_init+0x10c>
    return resp.Status;
 800ff8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff92:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	e021      	b.n	800ffde <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800ff9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff9e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ffa2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ffa6:	b29a      	uxth	r2, r3
 800ffa8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ffac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800ffb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ffb8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ffbc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ffc0:	b29a      	uxth	r2, r3
 800ffc2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800ffc6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800ffc8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ffcc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800ffd0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800ffda:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd90      	pop	{r4, r7, pc}

0800ffe8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b0cc      	sub	sp, #304	@ 0x130
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	4602      	mov	r2, r0
 800fff0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fff4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fff8:	6019      	str	r1, [r3, #0]
 800fffa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fffe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010002:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8010004:	f107 0310 	add.w	r3, r7, #16
 8010008:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801000c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010010:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010014:	2200      	movs	r2, #0
 8010016:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010018:	2300      	movs	r3, #0
 801001a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 801001e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010022:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010026:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801002a:	7812      	ldrb	r2, [r2, #0]
 801002c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801002e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010032:	3301      	adds	r3, #1
 8010034:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8010038:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801003c:	1c58      	adds	r0, r3, #1
 801003e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010042:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010046:	781a      	ldrb	r2, [r3, #0]
 8010048:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801004c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010050:	6819      	ldr	r1, [r3, #0]
 8010052:	f000 fe9c 	bl	8010d8e <Osal_MemCpy>
  index_input += AdvDataLen;
 8010056:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801005a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010064:	4413      	add	r3, r2
 8010066:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801006a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801006e:	2218      	movs	r2, #24
 8010070:	2100      	movs	r1, #0
 8010072:	4618      	mov	r0, r3
 8010074:	f000 fe9b 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8010078:	233f      	movs	r3, #63	@ 0x3f
 801007a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 801007e:	238e      	movs	r3, #142	@ 0x8e
 8010080:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010084:	f107 0310 	add.w	r3, r7, #16
 8010088:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801008c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010090:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010094:	f107 030f 	add.w	r3, r7, #15
 8010098:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801009c:	2301      	movs	r3, #1
 801009e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80100a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80100a6:	2100      	movs	r1, #0
 80100a8:	4618      	mov	r0, r3
 80100aa:	f001 f909 	bl	80112c0 <hci_send_req>
 80100ae:	4603      	mov	r3, r0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	da01      	bge.n	80100b8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80100b4:	23ff      	movs	r3, #255	@ 0xff
 80100b6:	e004      	b.n	80100c2 <aci_gap_update_adv_data+0xda>
  return status;
 80100b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80100bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80100c0:	781b      	ldrb	r3, [r3, #0]
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd80      	pop	{r7, pc}

080100cc <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80100cc:	b580      	push	{r7, lr}
 80100ce:	b088      	sub	sp, #32
 80100d0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80100d2:	2300      	movs	r3, #0
 80100d4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80100d6:	f107 0308 	add.w	r3, r7, #8
 80100da:	2218      	movs	r2, #24
 80100dc:	2100      	movs	r1, #0
 80100de:	4618      	mov	r0, r3
 80100e0:	f000 fe65 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 80100e4:	233f      	movs	r3, #63	@ 0x3f
 80100e6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80100e8:	2392      	movs	r3, #146	@ 0x92
 80100ea:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80100ec:	1dfb      	adds	r3, r7, #7
 80100ee:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80100f0:	2301      	movs	r3, #1
 80100f2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80100f4:	f107 0308 	add.w	r3, r7, #8
 80100f8:	2100      	movs	r1, #0
 80100fa:	4618      	mov	r0, r3
 80100fc:	f001 f8e0 	bl	80112c0 <hci_send_req>
 8010100:	4603      	mov	r3, r0
 8010102:	2b00      	cmp	r3, #0
 8010104:	da01      	bge.n	801010a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010106:	23ff      	movs	r3, #255	@ 0xff
 8010108:	e000      	b.n	801010c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 801010a:	79fb      	ldrb	r3, [r7, #7]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3720      	adds	r7, #32
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b0cc      	sub	sp, #304	@ 0x130
 8010118:	af00      	add	r7, sp, #0
 801011a:	4602      	mov	r2, r0
 801011c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010120:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010124:	801a      	strh	r2, [r3, #0]
 8010126:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801012a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801012e:	460a      	mov	r2, r1
 8010130:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8010132:	f107 0310 	add.w	r3, r7, #16
 8010136:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801013a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801013e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010142:	2200      	movs	r2, #0
 8010144:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010146:	2300      	movs	r3, #0
 8010148:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801014c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010150:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010154:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010158:	8812      	ldrh	r2, [r2, #0]
 801015a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801015c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010160:	3302      	adds	r3, #2
 8010162:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8010166:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801016a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801016e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010172:	7812      	ldrb	r2, [r2, #0]
 8010174:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010176:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801017a:	3301      	adds	r3, #1
 801017c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010180:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010184:	2218      	movs	r2, #24
 8010186:	2100      	movs	r1, #0
 8010188:	4618      	mov	r0, r3
 801018a:	f000 fe10 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 801018e:	233f      	movs	r3, #63	@ 0x3f
 8010190:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8010194:	23a5      	movs	r3, #165	@ 0xa5
 8010196:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801019a:	f107 0310 	add.w	r3, r7, #16
 801019e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80101a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80101a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80101aa:	f107 030f 	add.w	r3, r7, #15
 80101ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80101b2:	2301      	movs	r3, #1
 80101b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80101b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80101bc:	2100      	movs	r1, #0
 80101be:	4618      	mov	r0, r3
 80101c0:	f001 f87e 	bl	80112c0 <hci_send_req>
 80101c4:	4603      	mov	r3, r0
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	da01      	bge.n	80101ce <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80101ca:	23ff      	movs	r3, #255	@ 0xff
 80101cc:	e004      	b.n	80101d8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80101ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80101d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80101d6:	781b      	ldrb	r3, [r3, #0]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}

080101e2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80101e2:	b580      	push	{r7, lr}
 80101e4:	b088      	sub	sp, #32
 80101e6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80101e8:	2300      	movs	r3, #0
 80101ea:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80101ec:	f107 0308 	add.w	r3, r7, #8
 80101f0:	2218      	movs	r2, #24
 80101f2:	2100      	movs	r1, #0
 80101f4:	4618      	mov	r0, r3
 80101f6:	f000 fdda 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 80101fa:	233f      	movs	r3, #63	@ 0x3f
 80101fc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80101fe:	f240 1301 	movw	r3, #257	@ 0x101
 8010202:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010204:	1dfb      	adds	r3, r7, #7
 8010206:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010208:	2301      	movs	r3, #1
 801020a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801020c:	f107 0308 	add.w	r3, r7, #8
 8010210:	2100      	movs	r1, #0
 8010212:	4618      	mov	r0, r3
 8010214:	f001 f854 	bl	80112c0 <hci_send_req>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	da01      	bge.n	8010222 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801021e:	23ff      	movs	r3, #255	@ 0xff
 8010220:	e000      	b.n	8010224 <aci_gatt_init+0x42>
  return status;
 8010222:	79fb      	ldrb	r3, [r7, #7]
}
 8010224:	4618      	mov	r0, r3
 8010226:	3720      	adds	r7, #32
 8010228:	46bd      	mov	sp, r7
 801022a:	bd80      	pop	{r7, pc}

0801022c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 801022c:	b590      	push	{r4, r7, lr}
 801022e:	b0cf      	sub	sp, #316	@ 0x13c
 8010230:	af00      	add	r7, sp, #0
 8010232:	4604      	mov	r4, r0
 8010234:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010238:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801023c:	6001      	str	r1, [r0, #0]
 801023e:	4610      	mov	r0, r2
 8010240:	4619      	mov	r1, r3
 8010242:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010246:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801024a:	4622      	mov	r2, r4
 801024c:	701a      	strb	r2, [r3, #0]
 801024e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010252:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010256:	4602      	mov	r2, r0
 8010258:	701a      	strb	r2, [r3, #0]
 801025a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801025e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010262:	460a      	mov	r2, r1
 8010264:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8010266:	f107 0310 	add.w	r3, r7, #16
 801026a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801026e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010272:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010276:	781b      	ldrb	r3, [r3, #0]
 8010278:	2b01      	cmp	r3, #1
 801027a:	d00a      	beq.n	8010292 <aci_gatt_add_service+0x66>
 801027c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010280:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	2b02      	cmp	r3, #2
 8010288:	d101      	bne.n	801028e <aci_gatt_add_service+0x62>
 801028a:	2311      	movs	r3, #17
 801028c:	e002      	b.n	8010294 <aci_gatt_add_service+0x68>
 801028e:	2301      	movs	r3, #1
 8010290:	e000      	b.n	8010294 <aci_gatt_add_service+0x68>
 8010292:	2303      	movs	r3, #3
 8010294:	f107 0210 	add.w	r2, r7, #16
 8010298:	4413      	add	r3, r2
 801029a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801029e:	f107 030c 	add.w	r3, r7, #12
 80102a2:	2203      	movs	r2, #3
 80102a4:	2100      	movs	r1, #0
 80102a6:	4618      	mov	r0, r3
 80102a8:	f000 fd81 	bl	8010dae <Osal_MemSet>
  int index_input = 0;
 80102ac:	2300      	movs	r3, #0
 80102ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80102b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80102b6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80102ba:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80102be:	7812      	ldrb	r2, [r2, #0]
 80102c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80102c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80102c6:	3301      	adds	r3, #1
 80102c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80102cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80102d0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	2b01      	cmp	r3, #1
 80102d8:	d002      	beq.n	80102e0 <aci_gatt_add_service+0xb4>
 80102da:	2b02      	cmp	r3, #2
 80102dc:	d004      	beq.n	80102e8 <aci_gatt_add_service+0xbc>
 80102de:	e007      	b.n	80102f0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80102e0:	2302      	movs	r3, #2
 80102e2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80102e6:	e005      	b.n	80102f4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80102e8:	2310      	movs	r3, #16
 80102ea:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80102ee:	e001      	b.n	80102f4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 80102f0:	2397      	movs	r3, #151	@ 0x97
 80102f2:	e06c      	b.n	80103ce <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80102f4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80102f8:	1c58      	adds	r0, r3, #1
 80102fa:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 80102fe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010302:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010306:	6819      	ldr	r1, [r3, #0]
 8010308:	f000 fd41 	bl	8010d8e <Osal_MemCpy>
    index_input += size;
 801030c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8010310:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010314:	4413      	add	r3, r2
 8010316:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 801031a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801031e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010322:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010326:	7812      	ldrb	r2, [r2, #0]
 8010328:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801032a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801032e:	3301      	adds	r3, #1
 8010330:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010334:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010338:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801033c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010340:	7812      	ldrb	r2, [r2, #0]
 8010342:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010344:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010348:	3301      	adds	r3, #1
 801034a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801034e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010352:	2218      	movs	r2, #24
 8010354:	2100      	movs	r1, #0
 8010356:	4618      	mov	r0, r3
 8010358:	f000 fd29 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 801035c:	233f      	movs	r3, #63	@ 0x3f
 801035e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8010362:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8010366:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801036a:	f107 0310 	add.w	r3, r7, #16
 801036e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010372:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010376:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801037a:	f107 030c 	add.w	r3, r7, #12
 801037e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8010382:	2303      	movs	r3, #3
 8010384:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010388:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801038c:	2100      	movs	r1, #0
 801038e:	4618      	mov	r0, r3
 8010390:	f000 ff96 	bl	80112c0 <hci_send_req>
 8010394:	4603      	mov	r3, r0
 8010396:	2b00      	cmp	r3, #0
 8010398:	da01      	bge.n	801039e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 801039a:	23ff      	movs	r3, #255	@ 0xff
 801039c:	e017      	b.n	80103ce <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 801039e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80103a2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80103a6:	781b      	ldrb	r3, [r3, #0]
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d005      	beq.n	80103b8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80103ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80103b0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80103b4:	781b      	ldrb	r3, [r3, #0]
 80103b6:	e00a      	b.n	80103ce <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80103b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80103bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80103c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80103c4:	b29a      	uxth	r2, r3
 80103c6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80103ca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80103cc:	2300      	movs	r3, #0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd90      	pop	{r4, r7, pc}

080103d8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80103d8:	b590      	push	{r4, r7, lr}
 80103da:	b0d1      	sub	sp, #324	@ 0x144
 80103dc:	af00      	add	r7, sp, #0
 80103de:	4604      	mov	r4, r0
 80103e0:	4608      	mov	r0, r1
 80103e2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80103e6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80103ea:	600a      	str	r2, [r1, #0]
 80103ec:	4619      	mov	r1, r3
 80103ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80103f2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80103f6:	4622      	mov	r2, r4
 80103f8:	801a      	strh	r2, [r3, #0]
 80103fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80103fe:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010402:	4602      	mov	r2, r0
 8010404:	701a      	strb	r2, [r3, #0]
 8010406:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801040a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801040e:	460a      	mov	r2, r1
 8010410:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010412:	f107 0318 	add.w	r3, r7, #24
 8010416:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801041a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801041e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	2b01      	cmp	r3, #1
 8010426:	d00a      	beq.n	801043e <aci_gatt_add_char+0x66>
 8010428:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801042c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	2b02      	cmp	r3, #2
 8010434:	d101      	bne.n	801043a <aci_gatt_add_char+0x62>
 8010436:	2313      	movs	r3, #19
 8010438:	e002      	b.n	8010440 <aci_gatt_add_char+0x68>
 801043a:	2303      	movs	r3, #3
 801043c:	e000      	b.n	8010440 <aci_gatt_add_char+0x68>
 801043e:	2305      	movs	r3, #5
 8010440:	f107 0218 	add.w	r2, r7, #24
 8010444:	4413      	add	r3, r2
 8010446:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801044a:	f107 0314 	add.w	r3, r7, #20
 801044e:	2203      	movs	r2, #3
 8010450:	2100      	movs	r1, #0
 8010452:	4618      	mov	r0, r3
 8010454:	f000 fcab 	bl	8010dae <Osal_MemSet>
  int index_input = 0;
 8010458:	2300      	movs	r3, #0
 801045a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 801045e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010462:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010466:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801046a:	8812      	ldrh	r2, [r2, #0]
 801046c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801046e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010472:	3302      	adds	r3, #2
 8010474:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8010478:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801047c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010480:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010484:	7812      	ldrb	r2, [r2, #0]
 8010486:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010488:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801048c:	3301      	adds	r3, #1
 801048e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8010492:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010496:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 801049a:	781b      	ldrb	r3, [r3, #0]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d002      	beq.n	80104a6 <aci_gatt_add_char+0xce>
 80104a0:	2b02      	cmp	r3, #2
 80104a2:	d004      	beq.n	80104ae <aci_gatt_add_char+0xd6>
 80104a4:	e007      	b.n	80104b6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80104a6:	2302      	movs	r3, #2
 80104a8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80104ac:	e005      	b.n	80104ba <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80104ae:	2310      	movs	r3, #16
 80104b0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80104b4:	e001      	b.n	80104ba <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80104b6:	2397      	movs	r3, #151	@ 0x97
 80104b8:	e091      	b.n	80105de <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80104ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80104be:	1cd8      	adds	r0, r3, #3
 80104c0:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80104c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80104c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80104cc:	6819      	ldr	r1, [r3, #0]
 80104ce:	f000 fc5e 	bl	8010d8e <Osal_MemCpy>
    index_input += size;
 80104d2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80104d6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80104da:	4413      	add	r3, r2
 80104dc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80104e0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80104e4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80104e8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80104ec:	8812      	ldrh	r2, [r2, #0]
 80104ee:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80104f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80104f4:	3302      	adds	r3, #2
 80104f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 80104fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80104fe:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8010502:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010504:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010508:	3301      	adds	r3, #1
 801050a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 801050e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010512:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010516:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010518:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801051c:	3301      	adds	r3, #1
 801051e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010522:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010526:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 801052a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 801052c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010530:	3301      	adds	r3, #1
 8010532:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010536:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801053a:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 801053e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010540:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010544:	3301      	adds	r3, #1
 8010546:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801054a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801054e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8010552:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010554:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010558:	3301      	adds	r3, #1
 801055a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801055e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010562:	2218      	movs	r2, #24
 8010564:	2100      	movs	r1, #0
 8010566:	4618      	mov	r0, r3
 8010568:	f000 fc21 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 801056c:	233f      	movs	r3, #63	@ 0x3f
 801056e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8010572:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8010576:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 801057a:	f107 0318 	add.w	r3, r7, #24
 801057e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8010582:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010586:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 801058a:	f107 0314 	add.w	r3, r7, #20
 801058e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8010592:	2303      	movs	r3, #3
 8010594:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010598:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 801059c:	2100      	movs	r1, #0
 801059e:	4618      	mov	r0, r3
 80105a0:	f000 fe8e 	bl	80112c0 <hci_send_req>
 80105a4:	4603      	mov	r3, r0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	da01      	bge.n	80105ae <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80105aa:	23ff      	movs	r3, #255	@ 0xff
 80105ac:	e017      	b.n	80105de <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80105ae:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80105b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80105b6:	781b      	ldrb	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d005      	beq.n	80105c8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80105bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80105c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80105c4:	781b      	ldrb	r3, [r3, #0]
 80105c6:	e00a      	b.n	80105de <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80105c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80105cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80105d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80105da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80105dc:	2300      	movs	r3, #0
}
 80105de:	4618      	mov	r0, r3
 80105e0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80105e4:	46bd      	mov	sp, r7
 80105e6:	bd90      	pop	{r4, r7, pc}

080105e8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80105e8:	b5b0      	push	{r4, r5, r7, lr}
 80105ea:	b0cc      	sub	sp, #304	@ 0x130
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	4605      	mov	r5, r0
 80105f0:	460c      	mov	r4, r1
 80105f2:	4610      	mov	r0, r2
 80105f4:	4619      	mov	r1, r3
 80105f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80105fe:	462a      	mov	r2, r5
 8010600:	801a      	strh	r2, [r3, #0]
 8010602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010606:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801060a:	4622      	mov	r2, r4
 801060c:	801a      	strh	r2, [r3, #0]
 801060e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010612:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8010616:	4602      	mov	r2, r0
 8010618:	701a      	strb	r2, [r3, #0]
 801061a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801061e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010622:	460a      	mov	r2, r1
 8010624:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010626:	f107 0310 	add.w	r3, r7, #16
 801062a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801062e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010632:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010636:	2200      	movs	r2, #0
 8010638:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8010640:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010644:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010648:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801064c:	8812      	ldrh	r2, [r2, #0]
 801064e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010654:	3302      	adds	r3, #2
 8010656:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 801065a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801065e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010662:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010666:	8812      	ldrh	r2, [r2, #0]
 8010668:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801066a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801066e:	3302      	adds	r3, #2
 8010670:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8010674:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010678:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801067c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8010680:	7812      	ldrb	r2, [r2, #0]
 8010682:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8010684:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010688:	3301      	adds	r3, #1
 801068a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 801068e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010692:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010696:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 801069a:	7812      	ldrb	r2, [r2, #0]
 801069c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801069e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106a2:	3301      	adds	r3, #1
 80106a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80106a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106ac:	1d98      	adds	r0, r3, #6
 80106ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106b2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	461a      	mov	r2, r3
 80106ba:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80106be:	f000 fb66 	bl	8010d8e <Osal_MemCpy>
  index_input += Char_Value_Length;
 80106c2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80106c6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80106ca:	781b      	ldrb	r3, [r3, #0]
 80106cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80106d0:	4413      	add	r3, r2
 80106d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80106d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106da:	2218      	movs	r2, #24
 80106dc:	2100      	movs	r1, #0
 80106de:	4618      	mov	r0, r3
 80106e0:	f000 fb65 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 80106e4:	233f      	movs	r3, #63	@ 0x3f
 80106e6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80106ea:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80106ee:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80106f2:	f107 0310 	add.w	r3, r7, #16
 80106f6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80106fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106fe:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010702:	f107 030f 	add.w	r3, r7, #15
 8010706:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801070a:	2301      	movs	r3, #1
 801070c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010710:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010714:	2100      	movs	r1, #0
 8010716:	4618      	mov	r0, r3
 8010718:	f000 fdd2 	bl	80112c0 <hci_send_req>
 801071c:	4603      	mov	r3, r0
 801071e:	2b00      	cmp	r3, #0
 8010720:	da01      	bge.n	8010726 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8010722:	23ff      	movs	r3, #255	@ 0xff
 8010724:	e004      	b.n	8010730 <aci_gatt_update_char_value+0x148>
  return status;
 8010726:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801072a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801072e:	781b      	ldrb	r3, [r3, #0]
}
 8010730:	4618      	mov	r0, r3
 8010732:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010736:	46bd      	mov	sp, r7
 8010738:	bdb0      	pop	{r4, r5, r7, pc}

0801073a <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 801073a:	b580      	push	{r7, lr}
 801073c:	b0cc      	sub	sp, #304	@ 0x130
 801073e:	af00      	add	r7, sp, #0
 8010740:	4602      	mov	r2, r0
 8010742:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010746:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801074a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 801074c:	f107 0310 	add.w	r3, r7, #16
 8010750:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010754:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010758:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801075c:	2200      	movs	r2, #0
 801075e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010760:	2300      	movs	r3, #0
 8010762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010766:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801076a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801076e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010772:	8812      	ldrh	r2, [r2, #0]
 8010774:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010776:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801077a:	3302      	adds	r3, #2
 801077c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010780:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010784:	2218      	movs	r2, #24
 8010786:	2100      	movs	r1, #0
 8010788:	4618      	mov	r0, r3
 801078a:	f000 fb10 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 801078e:	233f      	movs	r3, #63	@ 0x3f
 8010790:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 8010794:	f240 1325 	movw	r3, #293	@ 0x125
 8010798:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801079c:	f107 0310 	add.w	r3, r7, #16
 80107a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80107a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80107ac:	f107 030f 	add.w	r3, r7, #15
 80107b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80107b4:	2301      	movs	r3, #1
 80107b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80107ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107be:	2100      	movs	r1, #0
 80107c0:	4618      	mov	r0, r3
 80107c2:	f000 fd7d 	bl	80112c0 <hci_send_req>
 80107c6:	4603      	mov	r3, r0
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	da01      	bge.n	80107d0 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80107cc:	23ff      	movs	r3, #255	@ 0xff
 80107ce:	e004      	b.n	80107da <aci_gatt_confirm_indication+0xa0>
  return status;
 80107d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80107d8:	781b      	ldrb	r3, [r3, #0]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b0cc      	sub	sp, #304	@ 0x130
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	4602      	mov	r2, r0
 80107ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107f0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80107f4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 80107f6:	f107 0310 	add.w	r3, r7, #16
 80107fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80107fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010802:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010806:	2200      	movs	r2, #0
 8010808:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010810:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010814:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010818:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801081c:	8812      	ldrh	r2, [r2, #0]
 801081e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010820:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010824:	3302      	adds	r3, #2
 8010826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801082a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801082e:	2218      	movs	r2, #24
 8010830:	2100      	movs	r1, #0
 8010832:	4618      	mov	r0, r3
 8010834:	f000 fabb 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8010838:	233f      	movs	r3, #63	@ 0x3f
 801083a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 801083e:	f240 1327 	movw	r3, #295	@ 0x127
 8010842:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010846:	f107 0310 	add.w	r3, r7, #16
 801084a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801084e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010852:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010856:	f107 030f 	add.w	r3, r7, #15
 801085a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801085e:	2301      	movs	r3, #1
 8010860:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010864:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010868:	2100      	movs	r1, #0
 801086a:	4618      	mov	r0, r3
 801086c:	f000 fd28 	bl	80112c0 <hci_send_req>
 8010870:	4603      	mov	r3, r0
 8010872:	2b00      	cmp	r3, #0
 8010874:	da01      	bge.n	801087a <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8010876:	23ff      	movs	r3, #255	@ 0xff
 8010878:	e004      	b.n	8010884 <aci_gatt_allow_read+0xa0>
  return status;
 801087a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801087e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010882:	781b      	ldrb	r3, [r3, #0]
}
 8010884:	4618      	mov	r0, r3
 8010886:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801088e:	b580      	push	{r7, lr}
 8010890:	b0cc      	sub	sp, #304	@ 0x130
 8010892:	af00      	add	r7, sp, #0
 8010894:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010898:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801089c:	601a      	str	r2, [r3, #0]
 801089e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108a2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80108a6:	4602      	mov	r2, r0
 80108a8:	701a      	strb	r2, [r3, #0]
 80108aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108ae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80108b2:	460a      	mov	r2, r1
 80108b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80108b6:	f107 0310 	add.w	r3, r7, #16
 80108ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80108be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80108c6:	2200      	movs	r2, #0
 80108c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80108ca:	2300      	movs	r3, #0
 80108cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80108d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80108d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80108d8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80108dc:	7812      	ldrb	r2, [r2, #0]
 80108de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80108e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108e4:	3301      	adds	r3, #1
 80108e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80108ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80108ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80108f2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80108f6:	7812      	ldrb	r2, [r2, #0]
 80108f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80108fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108fe:	3301      	adds	r3, #1
 8010900:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8010904:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010908:	1c98      	adds	r0, r3, #2
 801090a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801090e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010912:	781a      	ldrb	r2, [r3, #0]
 8010914:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010918:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 801091c:	6819      	ldr	r1, [r3, #0]
 801091e:	f000 fa36 	bl	8010d8e <Osal_MemCpy>
  index_input += Length;
 8010922:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010926:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010930:	4413      	add	r3, r2
 8010932:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010936:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801093a:	2218      	movs	r2, #24
 801093c:	2100      	movs	r1, #0
 801093e:	4618      	mov	r0, r3
 8010940:	f000 fa35 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8010944:	233f      	movs	r3, #63	@ 0x3f
 8010946:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 801094a:	230c      	movs	r3, #12
 801094c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010950:	f107 0310 	add.w	r3, r7, #16
 8010954:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010958:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801095c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010960:	f107 030f 	add.w	r3, r7, #15
 8010964:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010968:	2301      	movs	r3, #1
 801096a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801096e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010972:	2100      	movs	r1, #0
 8010974:	4618      	mov	r0, r3
 8010976:	f000 fca3 	bl	80112c0 <hci_send_req>
 801097a:	4603      	mov	r3, r0
 801097c:	2b00      	cmp	r3, #0
 801097e:	da01      	bge.n	8010984 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8010980:	23ff      	movs	r3, #255	@ 0xff
 8010982:	e004      	b.n	801098e <aci_hal_write_config_data+0x100>
  return status;
 8010984:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010988:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801098c:	781b      	ldrb	r3, [r3, #0]
}
 801098e:	4618      	mov	r0, r3
 8010990:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010994:	46bd      	mov	sp, r7
 8010996:	bd80      	pop	{r7, pc}

08010998 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b0cc      	sub	sp, #304	@ 0x130
 801099c:	af00      	add	r7, sp, #0
 801099e:	4602      	mov	r2, r0
 80109a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109a4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80109a8:	701a      	strb	r2, [r3, #0]
 80109aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109ae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80109b2:	460a      	mov	r2, r1
 80109b4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80109b6:	f107 0310 	add.w	r3, r7, #16
 80109ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80109be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80109c6:	2200      	movs	r2, #0
 80109c8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80109ca:	2300      	movs	r3, #0
 80109cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 80109d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80109d8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80109dc:	7812      	ldrb	r2, [r2, #0]
 80109de:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80109e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109e4:	3301      	adds	r3, #1
 80109e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 80109ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80109f2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80109f6:	7812      	ldrb	r2, [r2, #0]
 80109f8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80109fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109fe:	3301      	adds	r3, #1
 8010a00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a08:	2218      	movs	r2, #24
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f000 f9ce 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8010a12:	233f      	movs	r3, #63	@ 0x3f
 8010a14:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8010a18:	230f      	movs	r3, #15
 8010a1a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010a1e:	f107 0310 	add.w	r3, r7, #16
 8010a22:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010a26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010a2e:	f107 030f 	add.w	r3, r7, #15
 8010a32:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010a36:	2301      	movs	r3, #1
 8010a38:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a40:	2100      	movs	r1, #0
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 fc3c 	bl	80112c0 <hci_send_req>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	da01      	bge.n	8010a52 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8010a4e:	23ff      	movs	r3, #255	@ 0xff
 8010a50:	e004      	b.n	8010a5c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8010a52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a56:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010a5a:	781b      	ldrb	r3, [r3, #0]
}
 8010a5c:	4618      	mov	r0, r3
 8010a5e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8010a66:	b580      	push	{r7, lr}
 8010a68:	b0cc      	sub	sp, #304	@ 0x130
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	4602      	mov	r2, r0
 8010a6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a72:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010a76:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8010a78:	f107 0310 	add.w	r3, r7, #16
 8010a7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010a80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010a88:	2200      	movs	r2, #0
 8010a8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010a8c:	2300      	movs	r3, #0
 8010a8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8010a92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010a96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010a9a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010a9e:	8812      	ldrh	r2, [r2, #0]
 8010aa0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010aa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010aa6:	3302      	adds	r3, #2
 8010aa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010aac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010ab0:	2218      	movs	r2, #24
 8010ab2:	2100      	movs	r1, #0
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f000 f97a 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8010aba:	233f      	movs	r3, #63	@ 0x3f
 8010abc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8010ac0:	2318      	movs	r3, #24
 8010ac2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010ac6:	f107 0310 	add.w	r3, r7, #16
 8010aca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010ace:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010ad2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010ad6:	f107 030f 	add.w	r3, r7, #15
 8010ada:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010ae4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010ae8:	2100      	movs	r1, #0
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 fbe8 	bl	80112c0 <hci_send_req>
 8010af0:	4603      	mov	r3, r0
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	da01      	bge.n	8010afa <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8010af6:	23ff      	movs	r3, #255	@ 0xff
 8010af8:	e004      	b.n	8010b04 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8010afa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010afe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010b02:	781b      	ldrb	r3, [r3, #0]
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b088      	sub	sp, #32
 8010b12:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010b14:	2300      	movs	r3, #0
 8010b16:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b18:	f107 0308 	add.w	r3, r7, #8
 8010b1c:	2218      	movs	r2, #24
 8010b1e:	2100      	movs	r1, #0
 8010b20:	4618      	mov	r0, r3
 8010b22:	f000 f944 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x03;
 8010b26:	2303      	movs	r3, #3
 8010b28:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8010b2a:	2303      	movs	r3, #3
 8010b2c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010b2e:	1dfb      	adds	r3, r7, #7
 8010b30:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010b32:	2301      	movs	r3, #1
 8010b34:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010b36:	f107 0308 	add.w	r3, r7, #8
 8010b3a:	2100      	movs	r1, #0
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	f000 fbbf 	bl	80112c0 <hci_send_req>
 8010b42:	4603      	mov	r3, r0
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	da01      	bge.n	8010b4c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010b48:	23ff      	movs	r3, #255	@ 0xff
 8010b4a:	e000      	b.n	8010b4e <hci_reset+0x40>
  return status;
 8010b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3720      	adds	r7, #32
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8010b56:	b590      	push	{r4, r7, lr}
 8010b58:	b0cd      	sub	sp, #308	@ 0x134
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	4608      	mov	r0, r1
 8010b60:	4611      	mov	r1, r2
 8010b62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b66:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010b6a:	4622      	mov	r2, r4
 8010b6c:	701a      	strb	r2, [r3, #0]
 8010b6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b72:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010b76:	4602      	mov	r2, r0
 8010b78:	701a      	strb	r2, [r3, #0]
 8010b7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b7e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8010b82:	460a      	mov	r2, r1
 8010b84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8010b86:	f107 0310 	add.w	r3, r7, #16
 8010b8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010b8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010b96:	2200      	movs	r2, #0
 8010b98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8010ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ba4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010ba8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010bac:	7812      	ldrb	r2, [r2, #0]
 8010bae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010bb4:	3301      	adds	r3, #1
 8010bb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8010bba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010bbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010bc2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010bc6:	7812      	ldrb	r2, [r2, #0]
 8010bc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010bca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010bce:	3301      	adds	r3, #1
 8010bd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8010bd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010bd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010bdc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010be0:	7812      	ldrb	r2, [r2, #0]
 8010be2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010be4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010be8:	3301      	adds	r3, #1
 8010bea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010bf2:	2218      	movs	r2, #24
 8010bf4:	2100      	movs	r1, #0
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 f8d9 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x08;
 8010bfc:	2308      	movs	r3, #8
 8010bfe:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8010c02:	2331      	movs	r3, #49	@ 0x31
 8010c04:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010c08:	f107 0310 	add.w	r3, r7, #16
 8010c0c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010c10:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c14:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010c18:	f107 030f 	add.w	r3, r7, #15
 8010c1c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010c20:	2301      	movs	r3, #1
 8010c22:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010c26:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010c2a:	2100      	movs	r1, #0
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f000 fb47 	bl	80112c0 <hci_send_req>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	da01      	bge.n	8010c3c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8010c38:	23ff      	movs	r3, #255	@ 0xff
 8010c3a:	e004      	b.n	8010c46 <hci_le_set_default_phy+0xf0>
  return status;
 8010c3c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c40:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010c44:	781b      	ldrb	r3, [r3, #0]
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd90      	pop	{r4, r7, pc}

08010c50 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8010c50:	b5b0      	push	{r4, r5, r7, lr}
 8010c52:	b0cc      	sub	sp, #304	@ 0x130
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	4605      	mov	r5, r0
 8010c58:	460c      	mov	r4, r1
 8010c5a:	4610      	mov	r0, r2
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c62:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010c66:	462a      	mov	r2, r5
 8010c68:	801a      	strh	r2, [r3, #0]
 8010c6a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c6e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010c72:	4622      	mov	r2, r4
 8010c74:	801a      	strh	r2, [r3, #0]
 8010c76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c7a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010c7e:	4602      	mov	r2, r0
 8010c80:	801a      	strh	r2, [r3, #0]
 8010c82:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c86:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010c8a:	460a      	mov	r2, r1
 8010c8c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8010c8e:	f107 0310 	add.w	r3, r7, #16
 8010c92:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010c96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c9a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010cb0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010cb4:	8812      	ldrh	r2, [r2, #0]
 8010cb6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010cb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010cbc:	3302      	adds	r3, #2
 8010cbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8010cc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cc6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010cca:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010cce:	8812      	ldrh	r2, [r2, #0]
 8010cd0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8010cd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010cd6:	3302      	adds	r3, #2
 8010cd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8010cdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ce0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010ce4:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8010ce8:	8812      	ldrh	r2, [r2, #0]
 8010cea:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8010cec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010cf0:	3302      	adds	r3, #2
 8010cf2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 8010cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cfa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010cfe:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8010d02:	8812      	ldrh	r2, [r2, #0]
 8010d04:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8010d06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d0a:	3302      	adds	r3, #2
 8010d0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8010d10:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010d14:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8010d18:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8010d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d1e:	3302      	adds	r3, #2
 8010d20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010d24:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d28:	2218      	movs	r2, #24
 8010d2a:	2100      	movs	r1, #0
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f000 f83e 	bl	8010dae <Osal_MemSet>
  rq.ogf = 0x3f;
 8010d32:	233f      	movs	r3, #63	@ 0x3f
 8010d34:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8010d38:	f240 1381 	movw	r3, #385	@ 0x181
 8010d3c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8010d40:	230f      	movs	r3, #15
 8010d42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8010d46:	f107 0310 	add.w	r3, r7, #16
 8010d4a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010d4e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010d56:	f107 030f 	add.w	r3, r7, #15
 8010d5a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010d5e:	2301      	movs	r3, #1
 8010d60:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010d64:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d68:	2100      	movs	r1, #0
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f000 faa8 	bl	80112c0 <hci_send_req>
 8010d70:	4603      	mov	r3, r0
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	da01      	bge.n	8010d7a <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8010d76:	23ff      	movs	r3, #255	@ 0xff
 8010d78:	e004      	b.n	8010d84 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8010d7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d7e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010d82:	781b      	ldrb	r3, [r3, #0]
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bdb0      	pop	{r4, r5, r7, pc}

08010d8e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b084      	sub	sp, #16
 8010d92:	af00      	add	r7, sp, #0
 8010d94:	60f8      	str	r0, [r7, #12]
 8010d96:	60b9      	str	r1, [r7, #8]
 8010d98:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8010d9a:	687a      	ldr	r2, [r7, #4]
 8010d9c:	68b9      	ldr	r1, [r7, #8]
 8010d9e:	68f8      	ldr	r0, [r7, #12]
 8010da0:	f005 f89f 	bl	8015ee2 <memcpy>
 8010da4:	4603      	mov	r3, r0
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3710      	adds	r7, #16
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}

08010dae <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8010dae:	b580      	push	{r7, lr}
 8010db0:	b084      	sub	sp, #16
 8010db2:	af00      	add	r7, sp, #0
 8010db4:	60f8      	str	r0, [r7, #12]
 8010db6:	60b9      	str	r1, [r7, #8]
 8010db8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8010dba:	687a      	ldr	r2, [r7, #4]
 8010dbc:	68b9      	ldr	r1, [r7, #8]
 8010dbe:	68f8      	ldr	r0, [r7, #12]
 8010dc0:	f004 ffec 	bl	8015d9c <memset>
 8010dc4:	4603      	mov	r3, r0
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3710      	adds	r7, #16
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}

08010dce <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8010dce:	b480      	push	{r7}
 8010dd0:	af00      	add	r7, sp, #0
  return;
 8010dd2:	bf00      	nop
}
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8010ddc:	b480      	push	{r7}
 8010dde:	af00      	add	r7, sp, #0
  return;
 8010de0:	bf00      	nop
}
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr

08010dea <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8010dea:	b480      	push	{r7}
 8010dec:	af00      	add	r7, sp, #0
  return;
 8010dee:	bf00      	nop
}
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8010df8:	b480      	push	{r7}
 8010dfa:	af00      	add	r7, sp, #0
  return;
 8010dfc:	bf00      	nop
}
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e04:	4770      	bx	lr

08010e06 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8010e06:	b480      	push	{r7}
 8010e08:	af00      	add	r7, sp, #0
  return;
 8010e0a:	bf00      	nop
}
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e12:	4770      	bx	lr

08010e14 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8010e14:	b480      	push	{r7}
 8010e16:	af00      	add	r7, sp, #0
  return;
 8010e18:	bf00      	nop
}
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e20:	4770      	bx	lr

08010e22 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8010e22:	b480      	push	{r7}
 8010e24:	af00      	add	r7, sp, #0
  return;
 8010e26:	bf00      	nop
}
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8010e30:	b480      	push	{r7}
 8010e32:	af00      	add	r7, sp, #0
  return;
 8010e34:	bf00      	nop
}
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr

08010e3e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8010e3e:	b480      	push	{r7}
 8010e40:	af00      	add	r7, sp, #0
  return;
 8010e42:	bf00      	nop
}
 8010e44:	46bd      	mov	sp, r7
 8010e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4a:	4770      	bx	lr

08010e4c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8010e4c:	b480      	push	{r7}
 8010e4e:	af00      	add	r7, sp, #0
  return;
 8010e50:	bf00      	nop
}
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010e5a:	b480      	push	{r7}
 8010e5c:	af00      	add	r7, sp, #0
  return;
 8010e5e:	bf00      	nop
}
 8010e60:	46bd      	mov	sp, r7
 8010e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e66:	4770      	bx	lr

08010e68 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8010e68:	b480      	push	{r7}
 8010e6a:	af00      	add	r7, sp, #0
  return;
 8010e6c:	bf00      	nop
}
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr

08010e76 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8010e76:	b480      	push	{r7}
 8010e78:	af00      	add	r7, sp, #0
  return;
 8010e7a:	bf00      	nop
}
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8010e84:	b480      	push	{r7}
 8010e86:	af00      	add	r7, sp, #0
  return;
 8010e88:	bf00      	nop
}
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr

08010e92 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010e92:	b480      	push	{r7}
 8010e94:	af00      	add	r7, sp, #0
  return;
 8010e96:	bf00      	nop
}
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9e:	4770      	bx	lr

08010ea0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010ea0:	b480      	push	{r7}
 8010ea2:	af00      	add	r7, sp, #0
  return;
 8010ea4:	bf00      	nop
}
 8010ea6:	46bd      	mov	sp, r7
 8010ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eac:	4770      	bx	lr

08010eae <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010eae:	b480      	push	{r7}
 8010eb0:	af00      	add	r7, sp, #0
  return;
 8010eb2:	bf00      	nop
}
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr

08010ebc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010ec0:	4b04      	ldr	r3, [pc, #16]	@ (8010ed4 <SVCCTL_Init+0x18>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8010ec6:	4b04      	ldr	r3, [pc, #16]	@ (8010ed8 <SVCCTL_Init+0x1c>)
 8010ec8:	2200      	movs	r2, #0
 8010eca:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8010ecc:	f000 f806 	bl	8010edc <SVCCTL_SvcInit>

  return;
 8010ed0:	bf00      	nop
}
 8010ed2:	bd80      	pop	{r7, pc}
 8010ed4:	20000188 	.word	0x20000188
 8010ed8:	200001a8 	.word	0x200001a8

08010edc <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8010edc:	b580      	push	{r7, lr}
 8010ede:	af00      	add	r7, sp, #0
  BAS_Init();
 8010ee0:	f7ff ff75 	bl	8010dce <BAS_Init>

  BLS_Init();
 8010ee4:	f7ff ff7a 	bl	8010ddc <BLS_Init>

  CRS_STM_Init();
 8010ee8:	f7ff ff7f 	bl	8010dea <CRS_STM_Init>

  DIS_Init();
 8010eec:	f7ff ff84 	bl	8010df8 <DIS_Init>

  EDS_STM_Init();
 8010ef0:	f7ff ff89 	bl	8010e06 <EDS_STM_Init>

  HIDS_Init();
 8010ef4:	f7ff ff8e 	bl	8010e14 <HIDS_Init>

  HRS_Init();
 8010ef8:	f7ff ff93 	bl	8010e22 <HRS_Init>

  HTS_Init();
 8010efc:	f7ff ff98 	bl	8010e30 <HTS_Init>

  IAS_Init();
 8010f00:	f7ff ff9d 	bl	8010e3e <IAS_Init>

  LLS_Init();
 8010f04:	f7ff ffa2 	bl	8010e4c <LLS_Init>

  TPS_Init();
 8010f08:	f7ff ffa7 	bl	8010e5a <TPS_Init>

  MOTENV_STM_Init();
 8010f0c:	f7ff ffac 	bl	8010e68 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8010f10:	f7ff ffb1 	bl	8010e76 <P2PS_STM_Init>

  ZDD_STM_Init();
 8010f14:	f7ff ffb6 	bl	8010e84 <ZDD_STM_Init>

  OTAS_STM_Init();
 8010f18:	f7ff ffbb 	bl	8010e92 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8010f1c:	f7ff ffc7 	bl	8010eae <BVOPUS_STM_Init>

  MESH_Init();
 8010f20:	f7ff ffbe 	bl	8010ea0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8010f24:	f002 ff2a 	bl	8013d7c <SVCCTL_InitCustomSvc>
  
  return;
 8010f28:	bf00      	nop
}
 8010f2a:	bd80      	pop	{r7, pc}

08010f2c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b083      	sub	sp, #12
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8010f34:	4b09      	ldr	r3, [pc, #36]	@ (8010f5c <SVCCTL_RegisterSvcHandler+0x30>)
 8010f36:	7f1b      	ldrb	r3, [r3, #28]
 8010f38:	4619      	mov	r1, r3
 8010f3a:	4a08      	ldr	r2, [pc, #32]	@ (8010f5c <SVCCTL_RegisterSvcHandler+0x30>)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8010f42:	4b06      	ldr	r3, [pc, #24]	@ (8010f5c <SVCCTL_RegisterSvcHandler+0x30>)
 8010f44:	7f1b      	ldrb	r3, [r3, #28]
 8010f46:	3301      	adds	r3, #1
 8010f48:	b2da      	uxtb	r2, r3
 8010f4a:	4b04      	ldr	r3, [pc, #16]	@ (8010f5c <SVCCTL_RegisterSvcHandler+0x30>)
 8010f4c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8010f4e:	bf00      	nop
}
 8010f50:	370c      	adds	r7, #12
 8010f52:	46bd      	mov	sp, r7
 8010f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f58:	4770      	bx	lr
 8010f5a:	bf00      	nop
 8010f5c:	20000188 	.word	0x20000188

08010f60 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8010f60:	b580      	push	{r7, lr}
 8010f62:	b086      	sub	sp, #24
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	3301      	adds	r3, #1
 8010f6c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	781b      	ldrb	r3, [r3, #0]
 8010f76:	2bff      	cmp	r3, #255	@ 0xff
 8010f78:	d125      	bne.n	8010fc6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8010f7a:	693b      	ldr	r3, [r7, #16]
 8010f7c:	3302      	adds	r3, #2
 8010f7e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	881b      	ldrh	r3, [r3, #0]
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010f8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8010f8e:	d118      	bne.n	8010fc2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010f90:	2300      	movs	r3, #0
 8010f92:	757b      	strb	r3, [r7, #21]
 8010f94:	e00d      	b.n	8010fb2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8010f96:	7d7b      	ldrb	r3, [r7, #21]
 8010f98:	4a1a      	ldr	r2, [pc, #104]	@ (8011004 <SVCCTL_UserEvtRx+0xa4>)
 8010f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f9e:	6878      	ldr	r0, [r7, #4]
 8010fa0:	4798      	blx	r3
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8010fa6:	7dfb      	ldrb	r3, [r7, #23]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d108      	bne.n	8010fbe <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8010fac:	7d7b      	ldrb	r3, [r7, #21]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	757b      	strb	r3, [r7, #21]
 8010fb2:	4b14      	ldr	r3, [pc, #80]	@ (8011004 <SVCCTL_UserEvtRx+0xa4>)
 8010fb4:	7f1b      	ldrb	r3, [r3, #28]
 8010fb6:	7d7a      	ldrb	r2, [r7, #21]
 8010fb8:	429a      	cmp	r2, r3
 8010fba:	d3ec      	bcc.n	8010f96 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8010fbc:	e002      	b.n	8010fc4 <SVCCTL_UserEvtRx+0x64>
              break;
 8010fbe:	bf00      	nop
          break;
 8010fc0:	e000      	b.n	8010fc4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8010fc2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8010fc4:	e000      	b.n	8010fc8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8010fc6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8010fc8:	7dfb      	ldrb	r3, [r7, #23]
 8010fca:	2b02      	cmp	r3, #2
 8010fcc:	d00f      	beq.n	8010fee <SVCCTL_UserEvtRx+0x8e>
 8010fce:	2b02      	cmp	r3, #2
 8010fd0:	dc10      	bgt.n	8010ff4 <SVCCTL_UserEvtRx+0x94>
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d002      	beq.n	8010fdc <SVCCTL_UserEvtRx+0x7c>
 8010fd6:	2b01      	cmp	r3, #1
 8010fd8:	d006      	beq.n	8010fe8 <SVCCTL_UserEvtRx+0x88>
 8010fda:	e00b      	b.n	8010ff4 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f001 fc7d 	bl	80128dc <SVCCTL_App_Notification>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	75bb      	strb	r3, [r7, #22]
      break;
 8010fe6:	e008      	b.n	8010ffa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010fe8:	2301      	movs	r3, #1
 8010fea:	75bb      	strb	r3, [r7, #22]
      break;
 8010fec:	e005      	b.n	8010ffa <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8010fee:	2300      	movs	r3, #0
 8010ff0:	75bb      	strb	r3, [r7, #22]
      break;
 8010ff2:	e002      	b.n	8010ffa <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	75bb      	strb	r3, [r7, #22]
      break;
 8010ff8:	bf00      	nop
  }

  return (return_status);
 8010ffa:	7dbb      	ldrb	r3, [r7, #22]
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	3718      	adds	r7, #24
 8011000:	46bd      	mov	sp, r7
 8011002:	bd80      	pop	{r7, pc}
 8011004:	20000188 	.word	0x20000188

08011008 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b088      	sub	sp, #32
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011010:	f107 030c 	add.w	r3, r7, #12
 8011014:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801101c:	69fb      	ldr	r3, [r7, #28]
 801101e:	212e      	movs	r1, #46	@ 0x2e
 8011020:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8011024:	f000 fae8 	bl	80115f8 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	330b      	adds	r3, #11
 801102c:	78db      	ldrb	r3, [r3, #3]
}
 801102e:	4618      	mov	r0, r3
 8011030:	3720      	adds	r7, #32
 8011032:	46bd      	mov	sp, r7
 8011034:	bd80      	pop	{r7, pc}

08011036 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8011036:	b580      	push	{r7, lr}
 8011038:	b088      	sub	sp, #32
 801103a:	af00      	add	r7, sp, #0
 801103c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801103e:	f107 030c 	add.w	r3, r7, #12
 8011042:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801104a:	69fb      	ldr	r3, [r7, #28]
 801104c:	210f      	movs	r1, #15
 801104e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8011052:	f000 fad1 	bl	80115f8 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011056:	69fb      	ldr	r3, [r7, #28]
 8011058:	330b      	adds	r3, #11
 801105a:	78db      	ldrb	r3, [r3, #3]
}
 801105c:	4618      	mov	r0, r3
 801105e:	3720      	adds	r7, #32
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b088      	sub	sp, #32
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801106c:	f107 030c 	add.w	r3, r7, #12
 8011070:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8011072:	69fb      	ldr	r3, [r7, #28]
 8011074:	687a      	ldr	r2, [r7, #4]
 8011076:	2110      	movs	r1, #16
 8011078:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 801107c:	f000 fabc 	bl	80115f8 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011080:	69fb      	ldr	r3, [r7, #28]
 8011082:	330b      	adds	r3, #11
 8011084:	78db      	ldrb	r3, [r3, #3]
}
 8011086:	4618      	mov	r0, r3
 8011088:	3720      	adds	r7, #32
 801108a:	46bd      	mov	sp, r7
 801108c:	bd80      	pop	{r7, pc}
	...

08011090 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8011090:	b480      	push	{r7}
 8011092:	b08b      	sub	sp, #44	@ 0x2c
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8011098:	2300      	movs	r3, #0
 801109a:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 801109c:	2300      	movs	r3, #0
 801109e:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80110a0:	2300      	movs	r3, #0
 80110a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80110a4:	2300      	movs	r3, #0
 80110a6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80110a8:	2300      	movs	r3, #0
 80110aa:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80110ac:	2300      	movs	r3, #0
 80110ae:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80110b0:	2300      	movs	r3, #0
 80110b2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80110b4:	2300      	movs	r3, #0
 80110b6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80110b8:	4b4a      	ldr	r3, [pc, #296]	@ (80111e4 <SHCI_GetWirelessFwInfo+0x154>)
 80110ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80110bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80110c0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	009b      	lsls	r3, r3, #2
 80110c6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80110ca:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	4a44      	ldr	r2, [pc, #272]	@ (80111e8 <SHCI_GetWirelessFwInfo+0x158>)
 80110d8:	4293      	cmp	r3, r2
 80110da:	d10f      	bne.n	80110fc <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	695b      	ldr	r3, [r3, #20]
 80110e0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80110e2:	68bb      	ldr	r3, [r7, #8]
 80110e4:	699b      	ldr	r3, [r3, #24]
 80110e6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80110e8:	68bb      	ldr	r3, [r7, #8]
 80110ea:	69db      	ldr	r3, [r3, #28]
 80110ec:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	68db      	ldr	r3, [r3, #12]
 80110f2:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	691b      	ldr	r3, [r3, #16]
 80110f8:	617b      	str	r3, [r7, #20]
 80110fa:	e01a      	b.n	8011132 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	009b      	lsls	r3, r3, #2
 8011100:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011104:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011108:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	691b      	ldr	r3, [r3, #16]
 8011110:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	695b      	ldr	r3, [r3, #20]
 8011118:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	699b      	ldr	r3, [r3, #24]
 8011120:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	685b      	ldr	r3, [r3, #4]
 8011128:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	689b      	ldr	r3, [r3, #8]
 8011130:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011134:	0e1b      	lsrs	r3, r3, #24
 8011136:	b2da      	uxtb	r2, r3
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801113e:	0c1b      	lsrs	r3, r3, #16
 8011140:	b2da      	uxtb	r2, r3
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011148:	0a1b      	lsrs	r3, r3, #8
 801114a:	b2da      	uxtb	r2, r3
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8011150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011152:	091b      	lsrs	r3, r3, #4
 8011154:	b2db      	uxtb	r3, r3
 8011156:	f003 030f 	and.w	r3, r3, #15
 801115a:	b2da      	uxtb	r2, r3
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8011160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011162:	b2db      	uxtb	r3, r3
 8011164:	f003 030f 	and.w	r3, r3, #15
 8011168:	b2da      	uxtb	r2, r3
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801116e:	6a3b      	ldr	r3, [r7, #32]
 8011170:	0e1b      	lsrs	r3, r3, #24
 8011172:	b2da      	uxtb	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011178:	6a3b      	ldr	r3, [r7, #32]
 801117a:	0c1b      	lsrs	r3, r3, #16
 801117c:	b2da      	uxtb	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8011182:	6a3b      	ldr	r3, [r7, #32]
 8011184:	0a1b      	lsrs	r3, r3, #8
 8011186:	b2da      	uxtb	r2, r3
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801118c:	6a3b      	ldr	r3, [r7, #32]
 801118e:	b2da      	uxtb	r2, r3
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	b2da      	uxtb	r2, r3
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	0e1b      	lsrs	r3, r3, #24
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80111a6:	69bb      	ldr	r3, [r7, #24]
 80111a8:	0c1b      	lsrs	r3, r3, #16
 80111aa:	b2da      	uxtb	r2, r3
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80111b0:	69bb      	ldr	r3, [r7, #24]
 80111b2:	0a1b      	lsrs	r3, r3, #8
 80111b4:	b2da      	uxtb	r2, r3
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80111ba:	697b      	ldr	r3, [r7, #20]
 80111bc:	0e1b      	lsrs	r3, r3, #24
 80111be:	b2da      	uxtb	r2, r3
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	0c1b      	lsrs	r3, r3, #16
 80111c8:	b2da      	uxtb	r2, r3
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	b2da      	uxtb	r2, r3
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80111d6:	2300      	movs	r3, #0
}
 80111d8:	4618      	mov	r0, r3
 80111da:	372c      	adds	r7, #44	@ 0x2c
 80111dc:	46bd      	mov	sp, r7
 80111de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e2:	4770      	bx	lr
 80111e4:	58004000 	.word	0x58004000
 80111e8:	a94656b9 	.word	0xa94656b9

080111ec <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	4a08      	ldr	r2, [pc, #32]	@ (801121c <hci_init+0x30>)
 80111fc:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80111fe:	4a08      	ldr	r2, [pc, #32]	@ (8011220 <hci_init+0x34>)
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011204:	4806      	ldr	r0, [pc, #24]	@ (8011220 <hci_init+0x34>)
 8011206:	f000 f979 	bl	80114fc <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801120a:	683b      	ldr	r3, [r7, #0]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	4618      	mov	r0, r3
 8011210:	f000 f8da 	bl	80113c8 <TlInit>

  return;
 8011214:	bf00      	nop
}
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}
 801121c:	20000f74 	.word	0x20000f74
 8011220:	20000f4c 	.word	0x20000f4c

08011224 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801122a:	4822      	ldr	r0, [pc, #136]	@ (80112b4 <hci_user_evt_proc+0x90>)
 801122c:	f000 fdfa 	bl	8011e24 <LST_is_empty>
 8011230:	4603      	mov	r3, r0
 8011232:	2b00      	cmp	r3, #0
 8011234:	d12b      	bne.n	801128e <hci_user_evt_proc+0x6a>
 8011236:	4b20      	ldr	r3, [pc, #128]	@ (80112b8 <hci_user_evt_proc+0x94>)
 8011238:	781b      	ldrb	r3, [r3, #0]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d027      	beq.n	801128e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801123e:	f107 030c 	add.w	r3, r7, #12
 8011242:	4619      	mov	r1, r3
 8011244:	481b      	ldr	r0, [pc, #108]	@ (80112b4 <hci_user_evt_proc+0x90>)
 8011246:	f000 fe7c 	bl	8011f42 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801124a:	4b1c      	ldr	r3, [pc, #112]	@ (80112bc <hci_user_evt_proc+0x98>)
 801124c:	69db      	ldr	r3, [r3, #28]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00c      	beq.n	801126c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011256:	2301      	movs	r3, #1
 8011258:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801125a:	4b18      	ldr	r3, [pc, #96]	@ (80112bc <hci_user_evt_proc+0x98>)
 801125c:	69db      	ldr	r3, [r3, #28]
 801125e:	1d3a      	adds	r2, r7, #4
 8011260:	4610      	mov	r0, r2
 8011262:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8011264:	793a      	ldrb	r2, [r7, #4]
 8011266:	4b14      	ldr	r3, [pc, #80]	@ (80112b8 <hci_user_evt_proc+0x94>)
 8011268:	701a      	strb	r2, [r3, #0]
 801126a:	e002      	b.n	8011272 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801126c:	4b12      	ldr	r3, [pc, #72]	@ (80112b8 <hci_user_evt_proc+0x94>)
 801126e:	2201      	movs	r2, #1
 8011270:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8011272:	4b11      	ldr	r3, [pc, #68]	@ (80112b8 <hci_user_evt_proc+0x94>)
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d004      	beq.n	8011284 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	4618      	mov	r0, r3
 801127e:	f000 fc0d 	bl	8011a9c <TL_MM_EvtDone>
 8011282:	e004      	b.n	801128e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	4619      	mov	r1, r3
 8011288:	480a      	ldr	r0, [pc, #40]	@ (80112b4 <hci_user_evt_proc+0x90>)
 801128a:	f000 fded 	bl	8011e68 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801128e:	4809      	ldr	r0, [pc, #36]	@ (80112b4 <hci_user_evt_proc+0x90>)
 8011290:	f000 fdc8 	bl	8011e24 <LST_is_empty>
 8011294:	4603      	mov	r3, r0
 8011296:	2b00      	cmp	r3, #0
 8011298:	d107      	bne.n	80112aa <hci_user_evt_proc+0x86>
 801129a:	4b07      	ldr	r3, [pc, #28]	@ (80112b8 <hci_user_evt_proc+0x94>)
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d003      	beq.n	80112aa <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80112a2:	4804      	ldr	r0, [pc, #16]	@ (80112b4 <hci_user_evt_proc+0x90>)
 80112a4:	f002 fabe 	bl	8013824 <hci_notify_asynch_evt>
  }


  return;
 80112a8:	bf00      	nop
 80112aa:	bf00      	nop
}
 80112ac:	3710      	adds	r7, #16
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	200001b0 	.word	0x200001b0
 80112b8:	200001bc 	.word	0x200001bc
 80112bc:	20000f4c 	.word	0x20000f4c

080112c0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b088      	sub	sp, #32
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	6078      	str	r0, [r7, #4]
 80112c8:	460b      	mov	r3, r1
 80112ca:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80112cc:	2000      	movs	r0, #0
 80112ce:	f000 f8d1 	bl	8011474 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80112d2:	2300      	movs	r3, #0
 80112d4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	885b      	ldrh	r3, [r3, #2]
 80112da:	b21b      	sxth	r3, r3
 80112dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80112e0:	b21a      	sxth	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	881b      	ldrh	r3, [r3, #0]
 80112e6:	029b      	lsls	r3, r3, #10
 80112e8:	b21b      	sxth	r3, r3
 80112ea:	4313      	orrs	r3, r2
 80112ec:	b21b      	sxth	r3, r3
 80112ee:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80112f0:	4b33      	ldr	r3, [pc, #204]	@ (80113c0 <hci_send_req+0x100>)
 80112f2:	2201      	movs	r2, #1
 80112f4:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	b2d9      	uxtb	r1, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	689a      	ldr	r2, [r3, #8]
 8011300:	8bbb      	ldrh	r3, [r7, #28]
 8011302:	4618      	mov	r0, r3
 8011304:	f000 f890 	bl	8011428 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011308:	e04e      	b.n	80113a8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801130a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801130e:	f002 faa0 	bl	8013852 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011312:	e043      	b.n	801139c <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011314:	f107 030c 	add.w	r3, r7, #12
 8011318:	4619      	mov	r1, r3
 801131a:	482a      	ldr	r0, [pc, #168]	@ (80113c4 <hci_send_req+0x104>)
 801131c:	f000 fe11 	bl	8011f42 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	7a5b      	ldrb	r3, [r3, #9]
 8011324:	2b0f      	cmp	r3, #15
 8011326:	d114      	bne.n	8011352 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	330b      	adds	r3, #11
 801132c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801132e:	693b      	ldr	r3, [r7, #16]
 8011330:	885b      	ldrh	r3, [r3, #2]
 8011332:	b29b      	uxth	r3, r3
 8011334:	8bba      	ldrh	r2, [r7, #28]
 8011336:	429a      	cmp	r2, r3
 8011338:	d104      	bne.n	8011344 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	691b      	ldr	r3, [r3, #16]
 801133e:	693a      	ldr	r2, [r7, #16]
 8011340:	7812      	ldrb	r2, [r2, #0]
 8011342:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011344:	693b      	ldr	r3, [r7, #16]
 8011346:	785b      	ldrb	r3, [r3, #1]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d027      	beq.n	801139c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801134c:	2301      	movs	r3, #1
 801134e:	77fb      	strb	r3, [r7, #31]
 8011350:	e024      	b.n	801139c <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	330b      	adds	r3, #11
 8011356:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801135e:	b29b      	uxth	r3, r3
 8011360:	8bba      	ldrh	r2, [r7, #28]
 8011362:	429a      	cmp	r2, r3
 8011364:	d114      	bne.n	8011390 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	7a9b      	ldrb	r3, [r3, #10]
 801136a:	3b03      	subs	r3, #3
 801136c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	695a      	ldr	r2, [r3, #20]
 8011372:	7dfb      	ldrb	r3, [r7, #23]
 8011374:	429a      	cmp	r2, r3
 8011376:	bfa8      	it	ge
 8011378:	461a      	movge	r2, r3
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6918      	ldr	r0, [r3, #16]
 8011382:	69bb      	ldr	r3, [r7, #24]
 8011384:	1cd9      	adds	r1, r3, #3
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	695b      	ldr	r3, [r3, #20]
 801138a:	461a      	mov	r2, r3
 801138c:	f004 fda9 	bl	8015ee2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8011390:	69bb      	ldr	r3, [r7, #24]
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011398:	2301      	movs	r3, #1
 801139a:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 801139c:	4809      	ldr	r0, [pc, #36]	@ (80113c4 <hci_send_req+0x104>)
 801139e:	f000 fd41 	bl	8011e24 <LST_is_empty>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d0b5      	beq.n	8011314 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80113a8:	7ffb      	ldrb	r3, [r7, #31]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d0ad      	beq.n	801130a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80113ae:	2001      	movs	r0, #1
 80113b0:	f000 f860 	bl	8011474 <NotifyCmdStatus>

  return 0;
 80113b4:	2300      	movs	r3, #0
}
 80113b6:	4618      	mov	r0, r3
 80113b8:	3720      	adds	r7, #32
 80113ba:	46bd      	mov	sp, r7
 80113bc:	bd80      	pop	{r7, pc}
 80113be:	bf00      	nop
 80113c0:	20000f78 	.word	0x20000f78
 80113c4:	20000f6c 	.word	0x20000f6c

080113c8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b086      	sub	sp, #24
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80113d0:	480f      	ldr	r0, [pc, #60]	@ (8011410 <TlInit+0x48>)
 80113d2:	f000 fd17 	bl	8011e04 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80113d6:	4a0f      	ldr	r2, [pc, #60]	@ (8011414 <TlInit+0x4c>)
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80113dc:	480e      	ldr	r0, [pc, #56]	@ (8011418 <TlInit+0x50>)
 80113de:	f000 fd11 	bl	8011e04 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80113e2:	4b0e      	ldr	r3, [pc, #56]	@ (801141c <TlInit+0x54>)
 80113e4:	2201      	movs	r2, #1
 80113e6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80113e8:	4b0d      	ldr	r3, [pc, #52]	@ (8011420 <TlInit+0x58>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00a      	beq.n	8011406 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80113f4:	4b0b      	ldr	r3, [pc, #44]	@ (8011424 <TlInit+0x5c>)
 80113f6:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80113f8:	4b09      	ldr	r3, [pc, #36]	@ (8011420 <TlInit+0x58>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	f107 0208 	add.w	r2, r7, #8
 8011400:	4610      	mov	r0, r2
 8011402:	4798      	blx	r3
  }

  return;
 8011404:	bf00      	nop
 8011406:	bf00      	nop
}
 8011408:	3718      	adds	r7, #24
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}
 801140e:	bf00      	nop
 8011410:	20000f6c 	.word	0x20000f6c
 8011414:	200001b8 	.word	0x200001b8
 8011418:	200001b0 	.word	0x200001b0
 801141c:	200001bc 	.word	0x200001bc
 8011420:	20000f4c 	.word	0x20000f4c
 8011424:	080114b5 	.word	0x080114b5

08011428 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b082      	sub	sp, #8
 801142c:	af00      	add	r7, sp, #0
 801142e:	4603      	mov	r3, r0
 8011430:	603a      	str	r2, [r7, #0]
 8011432:	80fb      	strh	r3, [r7, #6]
 8011434:	460b      	mov	r3, r1
 8011436:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011438:	4b0c      	ldr	r3, [pc, #48]	@ (801146c <SendCmd+0x44>)
 801143a:	681b      	ldr	r3, [r3, #0]
 801143c:	88fa      	ldrh	r2, [r7, #6]
 801143e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8011442:	4b0a      	ldr	r3, [pc, #40]	@ (801146c <SendCmd+0x44>)
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	797a      	ldrb	r2, [r7, #5]
 8011448:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801144a:	4b08      	ldr	r3, [pc, #32]	@ (801146c <SendCmd+0x44>)
 801144c:	681b      	ldr	r3, [r3, #0]
 801144e:	330c      	adds	r3, #12
 8011450:	797a      	ldrb	r2, [r7, #5]
 8011452:	6839      	ldr	r1, [r7, #0]
 8011454:	4618      	mov	r0, r3
 8011456:	f004 fd44 	bl	8015ee2 <memcpy>

  hciContext.io.Send(0,0);
 801145a:	4b05      	ldr	r3, [pc, #20]	@ (8011470 <SendCmd+0x48>)
 801145c:	691b      	ldr	r3, [r3, #16]
 801145e:	2100      	movs	r1, #0
 8011460:	2000      	movs	r0, #0
 8011462:	4798      	blx	r3

  return;
 8011464:	bf00      	nop
}
 8011466:	3708      	adds	r7, #8
 8011468:	46bd      	mov	sp, r7
 801146a:	bd80      	pop	{r7, pc}
 801146c:	200001b8 	.word	0x200001b8
 8011470:	20000f4c 	.word	0x20000f4c

08011474 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b082      	sub	sp, #8
 8011478:	af00      	add	r7, sp, #0
 801147a:	4603      	mov	r3, r0
 801147c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801147e:	79fb      	ldrb	r3, [r7, #7]
 8011480:	2b00      	cmp	r3, #0
 8011482:	d108      	bne.n	8011496 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8011484:	4b0a      	ldr	r3, [pc, #40]	@ (80114b0 <NotifyCmdStatus+0x3c>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d00d      	beq.n	80114a8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 801148c:	4b08      	ldr	r3, [pc, #32]	@ (80114b0 <NotifyCmdStatus+0x3c>)
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2000      	movs	r0, #0
 8011492:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8011494:	e008      	b.n	80114a8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8011496:	4b06      	ldr	r3, [pc, #24]	@ (80114b0 <NotifyCmdStatus+0x3c>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d004      	beq.n	80114a8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 801149e:	4b04      	ldr	r3, [pc, #16]	@ (80114b0 <NotifyCmdStatus+0x3c>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	2001      	movs	r0, #1
 80114a4:	4798      	blx	r3
  return;
 80114a6:	bf00      	nop
 80114a8:	bf00      	nop
}
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}
 80114b0:	20000f74 	.word	0x20000f74

080114b4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b082      	sub	sp, #8
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	7a5b      	ldrb	r3, [r3, #9]
 80114c0:	2b0f      	cmp	r3, #15
 80114c2:	d003      	beq.n	80114cc <TlEvtReceived+0x18>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	7a5b      	ldrb	r3, [r3, #9]
 80114c8:	2b0e      	cmp	r3, #14
 80114ca:	d107      	bne.n	80114dc <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80114cc:	6879      	ldr	r1, [r7, #4]
 80114ce:	4809      	ldr	r0, [pc, #36]	@ (80114f4 <TlEvtReceived+0x40>)
 80114d0:	f000 fcf0 	bl	8011eb4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80114d4:	2000      	movs	r0, #0
 80114d6:	f002 f9b1 	bl	801383c <hci_cmd_resp_release>
 80114da:	e006      	b.n	80114ea <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80114dc:	6879      	ldr	r1, [r7, #4]
 80114de:	4806      	ldr	r0, [pc, #24]	@ (80114f8 <TlEvtReceived+0x44>)
 80114e0:	f000 fce8 	bl	8011eb4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80114e4:	4804      	ldr	r0, [pc, #16]	@ (80114f8 <TlEvtReceived+0x44>)
 80114e6:	f002 f99d 	bl	8013824 <hci_notify_asynch_evt>
  }

  return;
 80114ea:	bf00      	nop
}
 80114ec:	3708      	adds	r7, #8
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	20000f6c 	.word	0x20000f6c
 80114f8:	200001b0 	.word	0x200001b0

080114fc <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80114fc:	b480      	push	{r7}
 80114fe:	b083      	sub	sp, #12
 8011500:	af00      	add	r7, sp, #0
 8011502:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	4a05      	ldr	r2, [pc, #20]	@ (801151c <hci_register_io_bus+0x20>)
 8011508:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	4a04      	ldr	r2, [pc, #16]	@ (8011520 <hci_register_io_bus+0x24>)
 801150e:	611a      	str	r2, [r3, #16]

  return;
 8011510:	bf00      	nop
}
 8011512:	370c      	adds	r7, #12
 8011514:	46bd      	mov	sp, r7
 8011516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151a:	4770      	bx	lr
 801151c:	08011815 	.word	0x08011815
 8011520:	0801187d 	.word	0x0801187d

08011524 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b082      	sub	sp, #8
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801152e:	683b      	ldr	r3, [r7, #0]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	4a08      	ldr	r2, [pc, #32]	@ (8011554 <shci_init+0x30>)
 8011534:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011536:	4a08      	ldr	r2, [pc, #32]	@ (8011558 <shci_init+0x34>)
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801153c:	4806      	ldr	r0, [pc, #24]	@ (8011558 <shci_init+0x34>)
 801153e:	f000 f915 	bl	801176c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011542:	683b      	ldr	r3, [r7, #0]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	4618      	mov	r0, r3
 8011548:	f000 f898 	bl	801167c <TlInit>

  return;
 801154c:	bf00      	nop
}
 801154e:	3708      	adds	r7, #8
 8011550:	46bd      	mov	sp, r7
 8011552:	bd80      	pop	{r7, pc}
 8011554:	20000f9c 	.word	0x20000f9c
 8011558:	20000f7c 	.word	0x20000f7c

0801155c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011562:	4822      	ldr	r0, [pc, #136]	@ (80115ec <shci_user_evt_proc+0x90>)
 8011564:	f000 fc5e 	bl	8011e24 <LST_is_empty>
 8011568:	4603      	mov	r3, r0
 801156a:	2b00      	cmp	r3, #0
 801156c:	d12b      	bne.n	80115c6 <shci_user_evt_proc+0x6a>
 801156e:	4b20      	ldr	r3, [pc, #128]	@ (80115f0 <shci_user_evt_proc+0x94>)
 8011570:	781b      	ldrb	r3, [r3, #0]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d027      	beq.n	80115c6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011576:	f107 030c 	add.w	r3, r7, #12
 801157a:	4619      	mov	r1, r3
 801157c:	481b      	ldr	r0, [pc, #108]	@ (80115ec <shci_user_evt_proc+0x90>)
 801157e:	f000 fce0 	bl	8011f42 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8011582:	4b1c      	ldr	r3, [pc, #112]	@ (80115f4 <shci_user_evt_proc+0x98>)
 8011584:	69db      	ldr	r3, [r3, #28]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d00c      	beq.n	80115a4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801158e:	2301      	movs	r3, #1
 8011590:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011592:	4b18      	ldr	r3, [pc, #96]	@ (80115f4 <shci_user_evt_proc+0x98>)
 8011594:	69db      	ldr	r3, [r3, #28]
 8011596:	1d3a      	adds	r2, r7, #4
 8011598:	4610      	mov	r0, r2
 801159a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801159c:	793a      	ldrb	r2, [r7, #4]
 801159e:	4b14      	ldr	r3, [pc, #80]	@ (80115f0 <shci_user_evt_proc+0x94>)
 80115a0:	701a      	strb	r2, [r3, #0]
 80115a2:	e002      	b.n	80115aa <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80115a4:	4b12      	ldr	r3, [pc, #72]	@ (80115f0 <shci_user_evt_proc+0x94>)
 80115a6:	2201      	movs	r2, #1
 80115a8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80115aa:	4b11      	ldr	r3, [pc, #68]	@ (80115f0 <shci_user_evt_proc+0x94>)
 80115ac:	781b      	ldrb	r3, [r3, #0]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d004      	beq.n	80115bc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80115b2:	68fb      	ldr	r3, [r7, #12]
 80115b4:	4618      	mov	r0, r3
 80115b6:	f000 fa71 	bl	8011a9c <TL_MM_EvtDone>
 80115ba:	e004      	b.n	80115c6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	4619      	mov	r1, r3
 80115c0:	480a      	ldr	r0, [pc, #40]	@ (80115ec <shci_user_evt_proc+0x90>)
 80115c2:	f000 fc51 	bl	8011e68 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80115c6:	4809      	ldr	r0, [pc, #36]	@ (80115ec <shci_user_evt_proc+0x90>)
 80115c8:	f000 fc2c 	bl	8011e24 <LST_is_empty>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d107      	bne.n	80115e2 <shci_user_evt_proc+0x86>
 80115d2:	4b07      	ldr	r3, [pc, #28]	@ (80115f0 <shci_user_evt_proc+0x94>)
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d003      	beq.n	80115e2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80115da:	4804      	ldr	r0, [pc, #16]	@ (80115ec <shci_user_evt_proc+0x90>)
 80115dc:	f7f0 ff59 	bl	8002492 <shci_notify_asynch_evt>
  }


  return;
 80115e0:	bf00      	nop
 80115e2:	bf00      	nop
}
 80115e4:	3710      	adds	r7, #16
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop
 80115ec:	200001c0 	.word	0x200001c0
 80115f0:	200001d0 	.word	0x200001d0
 80115f4:	20000f7c 	.word	0x20000f7c

080115f8 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b084      	sub	sp, #16
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	60ba      	str	r2, [r7, #8]
 8011600:	607b      	str	r3, [r7, #4]
 8011602:	4603      	mov	r3, r0
 8011604:	81fb      	strh	r3, [r7, #14]
 8011606:	460b      	mov	r3, r1
 8011608:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801160a:	2000      	movs	r0, #0
 801160c:	f000 f868 	bl	80116e0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011610:	4b17      	ldr	r3, [pc, #92]	@ (8011670 <shci_send+0x78>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	89fa      	ldrh	r2, [r7, #14]
 8011616:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801161a:	4b15      	ldr	r3, [pc, #84]	@ (8011670 <shci_send+0x78>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	7b7a      	ldrb	r2, [r7, #13]
 8011620:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011622:	4b13      	ldr	r3, [pc, #76]	@ (8011670 <shci_send+0x78>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	330c      	adds	r3, #12
 8011628:	7b7a      	ldrb	r2, [r7, #13]
 801162a:	68b9      	ldr	r1, [r7, #8]
 801162c:	4618      	mov	r0, r3
 801162e:	f004 fc58 	bl	8015ee2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8011632:	4b10      	ldr	r3, [pc, #64]	@ (8011674 <shci_send+0x7c>)
 8011634:	2201      	movs	r2, #1
 8011636:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011638:	4b0f      	ldr	r3, [pc, #60]	@ (8011678 <shci_send+0x80>)
 801163a:	691b      	ldr	r3, [r3, #16]
 801163c:	2100      	movs	r1, #0
 801163e:	2000      	movs	r0, #0
 8011640:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011642:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011646:	f7f0 ff3b 	bl	80024c0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	f103 0008 	add.w	r0, r3, #8
 8011650:	4b07      	ldr	r3, [pc, #28]	@ (8011670 <shci_send+0x78>)
 8011652:	6819      	ldr	r1, [r3, #0]
 8011654:	4b06      	ldr	r3, [pc, #24]	@ (8011670 <shci_send+0x78>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	789b      	ldrb	r3, [r3, #2]
 801165a:	3303      	adds	r3, #3
 801165c:	461a      	mov	r2, r3
 801165e:	f004 fc40 	bl	8015ee2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011662:	2001      	movs	r0, #1
 8011664:	f000 f83c 	bl	80116e0 <Cmd_SetStatus>

  return;
 8011668:	bf00      	nop
}
 801166a:	3710      	adds	r7, #16
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}
 8011670:	200001cc 	.word	0x200001cc
 8011674:	20000fa0 	.word	0x20000fa0
 8011678:	20000f7c 	.word	0x20000f7c

0801167c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b086      	sub	sp, #24
 8011680:	af00      	add	r7, sp, #0
 8011682:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8011684:	4a10      	ldr	r2, [pc, #64]	@ (80116c8 <TlInit+0x4c>)
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801168a:	4810      	ldr	r0, [pc, #64]	@ (80116cc <TlInit+0x50>)
 801168c:	f000 fbba 	bl	8011e04 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011690:	2001      	movs	r0, #1
 8011692:	f000 f825 	bl	80116e0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011696:	4b0e      	ldr	r3, [pc, #56]	@ (80116d0 <TlInit+0x54>)
 8011698:	2201      	movs	r2, #1
 801169a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801169c:	4b0d      	ldr	r3, [pc, #52]	@ (80116d4 <TlInit+0x58>)
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d00c      	beq.n	80116be <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80116a8:	4b0b      	ldr	r3, [pc, #44]	@ (80116d8 <TlInit+0x5c>)
 80116aa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80116ac:	4b0b      	ldr	r3, [pc, #44]	@ (80116dc <TlInit+0x60>)
 80116ae:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80116b0:	4b08      	ldr	r3, [pc, #32]	@ (80116d4 <TlInit+0x58>)
 80116b2:	681b      	ldr	r3, [r3, #0]
 80116b4:	f107 020c 	add.w	r2, r7, #12
 80116b8:	4610      	mov	r0, r2
 80116ba:	4798      	blx	r3
  }

  return;
 80116bc:	bf00      	nop
 80116be:	bf00      	nop
}
 80116c0:	3718      	adds	r7, #24
 80116c2:	46bd      	mov	sp, r7
 80116c4:	bd80      	pop	{r7, pc}
 80116c6:	bf00      	nop
 80116c8:	200001cc 	.word	0x200001cc
 80116cc:	200001c0 	.word	0x200001c0
 80116d0:	200001d0 	.word	0x200001d0
 80116d4:	20000f7c 	.word	0x20000f7c
 80116d8:	08011731 	.word	0x08011731
 80116dc:	08011749 	.word	0x08011749

080116e0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b082      	sub	sp, #8
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	4603      	mov	r3, r0
 80116e8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80116ea:	79fb      	ldrb	r3, [r7, #7]
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d10b      	bne.n	8011708 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80116f0:	4b0d      	ldr	r3, [pc, #52]	@ (8011728 <Cmd_SetStatus+0x48>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d003      	beq.n	8011700 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80116f8:	4b0b      	ldr	r3, [pc, #44]	@ (8011728 <Cmd_SetStatus+0x48>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	2000      	movs	r0, #0
 80116fe:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8011700:	4b0a      	ldr	r3, [pc, #40]	@ (801172c <Cmd_SetStatus+0x4c>)
 8011702:	2200      	movs	r2, #0
 8011704:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011706:	e00b      	b.n	8011720 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011708:	4b08      	ldr	r3, [pc, #32]	@ (801172c <Cmd_SetStatus+0x4c>)
 801170a:	2201      	movs	r2, #1
 801170c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801170e:	4b06      	ldr	r3, [pc, #24]	@ (8011728 <Cmd_SetStatus+0x48>)
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	2b00      	cmp	r3, #0
 8011714:	d004      	beq.n	8011720 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011716:	4b04      	ldr	r3, [pc, #16]	@ (8011728 <Cmd_SetStatus+0x48>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2001      	movs	r0, #1
 801171c:	4798      	blx	r3
  return;
 801171e:	bf00      	nop
 8011720:	bf00      	nop
}
 8011722:	3708      	adds	r7, #8
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	20000f9c 	.word	0x20000f9c
 801172c:	200001c8 	.word	0x200001c8

08011730 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011730:	b580      	push	{r7, lr}
 8011732:	b082      	sub	sp, #8
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011738:	2000      	movs	r0, #0
 801173a:	f7f0 feb6 	bl	80024aa <shci_cmd_resp_release>

  return;
 801173e:	bf00      	nop
}
 8011740:	3708      	adds	r7, #8
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
	...

08011748 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8011750:	6879      	ldr	r1, [r7, #4]
 8011752:	4805      	ldr	r0, [pc, #20]	@ (8011768 <TlUserEvtReceived+0x20>)
 8011754:	f000 fbae 	bl	8011eb4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011758:	4803      	ldr	r0, [pc, #12]	@ (8011768 <TlUserEvtReceived+0x20>)
 801175a:	f7f0 fe9a 	bl	8002492 <shci_notify_asynch_evt>

  return;
 801175e:	bf00      	nop
}
 8011760:	3708      	adds	r7, #8
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	200001c0 	.word	0x200001c0

0801176c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801176c:	b480      	push	{r7}
 801176e:	b083      	sub	sp, #12
 8011770:	af00      	add	r7, sp, #0
 8011772:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	4a05      	ldr	r2, [pc, #20]	@ (801178c <shci_register_io_bus+0x20>)
 8011778:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	4a04      	ldr	r2, [pc, #16]	@ (8011790 <shci_register_io_bus+0x24>)
 801177e:	611a      	str	r2, [r3, #16]

  return;
 8011780:	bf00      	nop
}
 8011782:	370c      	adds	r7, #12
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr
 801178c:	08011929 	.word	0x08011929
 8011790:	0801197d 	.word	0x0801197d

08011794 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8011794:	b580      	push	{r7, lr}
 8011796:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8011798:	f003 f808 	bl	80147ac <HW_IPCC_Enable>

  return;
 801179c:	bf00      	nop
}
 801179e:	bd80      	pop	{r7, pc}

080117a0 <TL_Init>:


void TL_Init( void )
{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80117a4:	4b10      	ldr	r3, [pc, #64]	@ (80117e8 <TL_Init+0x48>)
 80117a6:	4a11      	ldr	r2, [pc, #68]	@ (80117ec <TL_Init+0x4c>)
 80117a8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80117aa:	4b0f      	ldr	r3, [pc, #60]	@ (80117e8 <TL_Init+0x48>)
 80117ac:	4a10      	ldr	r2, [pc, #64]	@ (80117f0 <TL_Init+0x50>)
 80117ae:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80117b0:	4b0d      	ldr	r3, [pc, #52]	@ (80117e8 <TL_Init+0x48>)
 80117b2:	4a10      	ldr	r2, [pc, #64]	@ (80117f4 <TL_Init+0x54>)
 80117b4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80117b6:	4b0c      	ldr	r3, [pc, #48]	@ (80117e8 <TL_Init+0x48>)
 80117b8:	4a0f      	ldr	r2, [pc, #60]	@ (80117f8 <TL_Init+0x58>)
 80117ba:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80117bc:	4b0a      	ldr	r3, [pc, #40]	@ (80117e8 <TL_Init+0x48>)
 80117be:	4a0f      	ldr	r2, [pc, #60]	@ (80117fc <TL_Init+0x5c>)
 80117c0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80117c2:	4b09      	ldr	r3, [pc, #36]	@ (80117e8 <TL_Init+0x48>)
 80117c4:	4a0e      	ldr	r2, [pc, #56]	@ (8011800 <TL_Init+0x60>)
 80117c6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80117c8:	4b07      	ldr	r3, [pc, #28]	@ (80117e8 <TL_Init+0x48>)
 80117ca:	4a0e      	ldr	r2, [pc, #56]	@ (8011804 <TL_Init+0x64>)
 80117cc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80117ce:	4b06      	ldr	r3, [pc, #24]	@ (80117e8 <TL_Init+0x48>)
 80117d0:	4a0d      	ldr	r2, [pc, #52]	@ (8011808 <TL_Init+0x68>)
 80117d2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80117d4:	4b04      	ldr	r3, [pc, #16]	@ (80117e8 <TL_Init+0x48>)
 80117d6:	4a0d      	ldr	r2, [pc, #52]	@ (801180c <TL_Init+0x6c>)
 80117d8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80117da:	4b03      	ldr	r3, [pc, #12]	@ (80117e8 <TL_Init+0x48>)
 80117dc:	4a0c      	ldr	r2, [pc, #48]	@ (8011810 <TL_Init+0x70>)
 80117de:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80117e0:	f002 fff8 	bl	80147d4 <HW_IPCC_Init>

  return;
 80117e4:	bf00      	nop
}
 80117e6:	bd80      	pop	{r7, pc}
 80117e8:	20030000 	.word	0x20030000
 80117ec:	20030028 	.word	0x20030028
 80117f0:	20030048 	.word	0x20030048
 80117f4:	20030058 	.word	0x20030058
 80117f8:	20030068 	.word	0x20030068
 80117fc:	20030070 	.word	0x20030070
 8011800:	20030078 	.word	0x20030078
 8011804:	20030080 	.word	0x20030080
 8011808:	2003009c 	.word	0x2003009c
 801180c:	200300a0 	.word	0x200300a0
 8011810:	200300ac 	.word	0x200300ac

08011814 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b084      	sub	sp, #16
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8011820:	4811      	ldr	r0, [pc, #68]	@ (8011868 <TL_BLE_Init+0x54>)
 8011822:	f000 faef 	bl	8011e04 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8011826:	4b11      	ldr	r3, [pc, #68]	@ (801186c <TL_BLE_Init+0x58>)
 8011828:	685b      	ldr	r3, [r3, #4]
 801182a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	689a      	ldr	r2, [r3, #8]
 8011830:	68bb      	ldr	r3, [r7, #8]
 8011832:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	68da      	ldr	r2, [r3, #12]
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801183c:	68bb      	ldr	r3, [r7, #8]
 801183e:	4a0c      	ldr	r2, [pc, #48]	@ (8011870 <TL_BLE_Init+0x5c>)
 8011840:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8011842:	68bb      	ldr	r3, [r7, #8]
 8011844:	4a08      	ldr	r2, [pc, #32]	@ (8011868 <TL_BLE_Init+0x54>)
 8011846:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8011848:	f002 ffda 	bl	8014800 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	4a08      	ldr	r2, [pc, #32]	@ (8011874 <TL_BLE_Init+0x60>)
 8011852:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	4a07      	ldr	r2, [pc, #28]	@ (8011878 <TL_BLE_Init+0x64>)
 801185a:	6013      	str	r3, [r2, #0]

  return 0;
 801185c:	2300      	movs	r3, #0
}
 801185e:	4618      	mov	r0, r3
 8011860:	3710      	adds	r7, #16
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
 8011866:	bf00      	nop
 8011868:	200300c8 	.word	0x200300c8
 801186c:	20030000 	.word	0x20030000
 8011870:	20031f48 	.word	0x20031f48
 8011874:	20000fac 	.word	0x20000fac
 8011878:	20000fb0 	.word	0x20000fb0

0801187c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	460b      	mov	r3, r1
 8011886:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8011888:	4b09      	ldr	r3, [pc, #36]	@ (80118b0 <TL_BLE_SendCmd+0x34>)
 801188a:	685b      	ldr	r3, [r3, #4]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2201      	movs	r2, #1
 8011890:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8011892:	4b07      	ldr	r3, [pc, #28]	@ (80118b0 <TL_BLE_SendCmd+0x34>)
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	4619      	mov	r1, r3
 801189a:	2001      	movs	r0, #1
 801189c:	f000 f96c 	bl	8011b78 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80118a0:	f002 ffb8 	bl	8014814 <HW_IPCC_BLE_SendCmd>

  return 0;
 80118a4:	2300      	movs	r3, #0
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	20030000 	.word	0x20030000

080118b4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80118ba:	e01c      	b.n	80118f6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80118bc:	1d3b      	adds	r3, r7, #4
 80118be:	4619      	mov	r1, r3
 80118c0:	4812      	ldr	r0, [pc, #72]	@ (801190c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80118c2:	f000 fb3e 	bl	8011f42 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	7a5b      	ldrb	r3, [r3, #9]
 80118ca:	2b0f      	cmp	r3, #15
 80118cc:	d003      	beq.n	80118d6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	7a5b      	ldrb	r3, [r3, #9]
 80118d2:	2b0e      	cmp	r3, #14
 80118d4:	d105      	bne.n	80118e2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4619      	mov	r1, r3
 80118da:	2002      	movs	r0, #2
 80118dc:	f000 f94c 	bl	8011b78 <OutputDbgTrace>
 80118e0:	e004      	b.n	80118ec <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	4619      	mov	r1, r3
 80118e6:	2003      	movs	r0, #3
 80118e8:	f000 f946 	bl	8011b78 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80118ec:	4b08      	ldr	r3, [pc, #32]	@ (8011910 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	687a      	ldr	r2, [r7, #4]
 80118f2:	4610      	mov	r0, r2
 80118f4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80118f6:	4805      	ldr	r0, [pc, #20]	@ (801190c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80118f8:	f000 fa94 	bl	8011e24 <LST_is_empty>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0dc      	beq.n	80118bc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8011902:	bf00      	nop
}
 8011904:	3708      	adds	r7, #8
 8011906:	46bd      	mov	sp, r7
 8011908:	bd80      	pop	{r7, pc}
 801190a:	bf00      	nop
 801190c:	200300c8 	.word	0x200300c8
 8011910:	20000fac 	.word	0x20000fac

08011914 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8011918:	4b02      	ldr	r3, [pc, #8]	@ (8011924 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	4798      	blx	r3

  return;
 801191e:	bf00      	nop
}
 8011920:	bd80      	pop	{r7, pc}
 8011922:	bf00      	nop
 8011924:	20000fb0 	.word	0x20000fb0

08011928 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b084      	sub	sp, #16
 801192c:	af00      	add	r7, sp, #0
 801192e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8011934:	480d      	ldr	r0, [pc, #52]	@ (801196c <TL_SYS_Init+0x44>)
 8011936:	f000 fa65 	bl	8011e04 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801193a:	4b0d      	ldr	r3, [pc, #52]	@ (8011970 <TL_SYS_Init+0x48>)
 801193c:	68db      	ldr	r3, [r3, #12]
 801193e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	689a      	ldr	r2, [r3, #8]
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	4a08      	ldr	r2, [pc, #32]	@ (801196c <TL_SYS_Init+0x44>)
 801194c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801194e:	f002 ff83 	bl	8014858 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	4a07      	ldr	r2, [pc, #28]	@ (8011974 <TL_SYS_Init+0x4c>)
 8011958:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	685b      	ldr	r3, [r3, #4]
 801195e:	4a06      	ldr	r2, [pc, #24]	@ (8011978 <TL_SYS_Init+0x50>)
 8011960:	6013      	str	r3, [r2, #0]

  return 0;
 8011962:	2300      	movs	r3, #0
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	200300d0 	.word	0x200300d0
 8011970:	20030000 	.word	0x20030000
 8011974:	20000fb4 	.word	0x20000fb4
 8011978:	20000fb8 	.word	0x20000fb8

0801197c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	460b      	mov	r3, r1
 8011986:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8011988:	4b09      	ldr	r3, [pc, #36]	@ (80119b0 <TL_SYS_SendCmd+0x34>)
 801198a:	68db      	ldr	r3, [r3, #12]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2210      	movs	r2, #16
 8011990:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8011992:	4b07      	ldr	r3, [pc, #28]	@ (80119b0 <TL_SYS_SendCmd+0x34>)
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	4619      	mov	r1, r3
 801199a:	2004      	movs	r0, #4
 801199c:	f000 f8ec 	bl	8011b78 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80119a0:	f002 ff64 	bl	801486c <HW_IPCC_SYS_SendCmd>

  return 0;
 80119a4:	2300      	movs	r3, #0
}
 80119a6:	4618      	mov	r0, r3
 80119a8:	3708      	adds	r7, #8
 80119aa:	46bd      	mov	sp, r7
 80119ac:	bd80      	pop	{r7, pc}
 80119ae:	bf00      	nop
 80119b0:	20030000 	.word	0x20030000

080119b4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80119b8:	4b07      	ldr	r3, [pc, #28]	@ (80119d8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80119ba:	68db      	ldr	r3, [r3, #12]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4619      	mov	r1, r3
 80119c0:	2005      	movs	r0, #5
 80119c2:	f000 f8d9 	bl	8011b78 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80119c6:	4b05      	ldr	r3, [pc, #20]	@ (80119dc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	4a03      	ldr	r2, [pc, #12]	@ (80119d8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80119cc:	68d2      	ldr	r2, [r2, #12]
 80119ce:	6812      	ldr	r2, [r2, #0]
 80119d0:	4610      	mov	r0, r2
 80119d2:	4798      	blx	r3

  return;
 80119d4:	bf00      	nop
}
 80119d6:	bd80      	pop	{r7, pc}
 80119d8:	20030000 	.word	0x20030000
 80119dc:	20000fb4 	.word	0x20000fb4

080119e0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b082      	sub	sp, #8
 80119e4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80119e6:	e00e      	b.n	8011a06 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80119e8:	1d3b      	adds	r3, r7, #4
 80119ea:	4619      	mov	r1, r3
 80119ec:	480b      	ldr	r0, [pc, #44]	@ (8011a1c <HW_IPCC_SYS_EvtNot+0x3c>)
 80119ee:	f000 faa8 	bl	8011f42 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4619      	mov	r1, r3
 80119f6:	2006      	movs	r0, #6
 80119f8:	f000 f8be 	bl	8011b78 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80119fc:	4b08      	ldr	r3, [pc, #32]	@ (8011a20 <HW_IPCC_SYS_EvtNot+0x40>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	4610      	mov	r0, r2
 8011a04:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011a06:	4805      	ldr	r0, [pc, #20]	@ (8011a1c <HW_IPCC_SYS_EvtNot+0x3c>)
 8011a08:	f000 fa0c 	bl	8011e24 <LST_is_empty>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d0ea      	beq.n	80119e8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8011a12:	bf00      	nop
}
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	200300d0 	.word	0x200300d0
 8011a20:	20000fb8 	.word	0x20000fb8

08011a24 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8011a2c:	4817      	ldr	r0, [pc, #92]	@ (8011a8c <TL_MM_Init+0x68>)
 8011a2e:	f000 f9e9 	bl	8011e04 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8011a32:	4817      	ldr	r0, [pc, #92]	@ (8011a90 <TL_MM_Init+0x6c>)
 8011a34:	f000 f9e6 	bl	8011e04 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8011a38:	4b16      	ldr	r3, [pc, #88]	@ (8011a94 <TL_MM_Init+0x70>)
 8011a3a:	691b      	ldr	r3, [r3, #16]
 8011a3c:	4a16      	ldr	r2, [pc, #88]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a3e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8011a40:	4b15      	ldr	r3, [pc, #84]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	687a      	ldr	r2, [r7, #4]
 8011a46:	6892      	ldr	r2, [r2, #8]
 8011a48:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8011a4a:	4b13      	ldr	r3, [pc, #76]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	687a      	ldr	r2, [r7, #4]
 8011a50:	68d2      	ldr	r2, [r2, #12]
 8011a52:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011a54:	4b10      	ldr	r3, [pc, #64]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	4a0c      	ldr	r2, [pc, #48]	@ (8011a8c <TL_MM_Init+0x68>)
 8011a5a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	687a      	ldr	r2, [r7, #4]
 8011a62:	6812      	ldr	r2, [r2, #0]
 8011a64:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8011a66:	4b0c      	ldr	r3, [pc, #48]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	687a      	ldr	r2, [r7, #4]
 8011a6c:	6852      	ldr	r2, [r2, #4]
 8011a6e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8011a70:	4b09      	ldr	r3, [pc, #36]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	687a      	ldr	r2, [r7, #4]
 8011a76:	6912      	ldr	r2, [r2, #16]
 8011a78:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8011a7a:	4b07      	ldr	r3, [pc, #28]	@ (8011a98 <TL_MM_Init+0x74>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	6952      	ldr	r2, [r2, #20]
 8011a82:	619a      	str	r2, [r3, #24]

  return;
 8011a84:	bf00      	nop
}
 8011a86:	3708      	adds	r7, #8
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}
 8011a8c:	200300b8 	.word	0x200300b8
 8011a90:	20000fa4 	.word	0x20000fa4
 8011a94:	20030000 	.word	0x20030000
 8011a98:	20000fbc 	.word	0x20000fbc

08011a9c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8011a9c:	b580      	push	{r7, lr}
 8011a9e:	b082      	sub	sp, #8
 8011aa0:	af00      	add	r7, sp, #0
 8011aa2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8011aa4:	6879      	ldr	r1, [r7, #4]
 8011aa6:	4807      	ldr	r0, [pc, #28]	@ (8011ac4 <TL_MM_EvtDone+0x28>)
 8011aa8:	f000 fa04 	bl	8011eb4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8011aac:	6879      	ldr	r1, [r7, #4]
 8011aae:	2000      	movs	r0, #0
 8011ab0:	f000 f862 	bl	8011b78 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8011ab4:	4804      	ldr	r0, [pc, #16]	@ (8011ac8 <TL_MM_EvtDone+0x2c>)
 8011ab6:	f002 feff 	bl	80148b8 <HW_IPCC_MM_SendFreeBuf>

  return;
 8011aba:	bf00      	nop
}
 8011abc:	3708      	adds	r7, #8
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	20000fa4 	.word	0x20000fa4
 8011ac8:	08011acd 	.word	0x08011acd

08011acc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b082      	sub	sp, #8
 8011ad0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011ad2:	e00c      	b.n	8011aee <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011ad4:	1d3b      	adds	r3, r7, #4
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	480a      	ldr	r0, [pc, #40]	@ (8011b04 <SendFreeBuf+0x38>)
 8011ada:	f000 fa32 	bl	8011f42 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8011ade:	4b0a      	ldr	r3, [pc, #40]	@ (8011b08 <SendFreeBuf+0x3c>)
 8011ae0:	691b      	ldr	r3, [r3, #16]
 8011ae2:	691b      	ldr	r3, [r3, #16]
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	4611      	mov	r1, r2
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f000 f9e3 	bl	8011eb4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011aee:	4805      	ldr	r0, [pc, #20]	@ (8011b04 <SendFreeBuf+0x38>)
 8011af0:	f000 f998 	bl	8011e24 <LST_is_empty>
 8011af4:	4603      	mov	r3, r0
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d0ec      	beq.n	8011ad4 <SendFreeBuf+0x8>
  }

  return;
 8011afa:	bf00      	nop
}
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}
 8011b02:	bf00      	nop
 8011b04:	20000fa4 	.word	0x20000fa4
 8011b08:	20030000 	.word	0x20030000

08011b0c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8011b10:	4805      	ldr	r0, [pc, #20]	@ (8011b28 <TL_TRACES_Init+0x1c>)
 8011b12:	f000 f977 	bl	8011e04 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8011b16:	4b05      	ldr	r3, [pc, #20]	@ (8011b2c <TL_TRACES_Init+0x20>)
 8011b18:	695b      	ldr	r3, [r3, #20]
 8011b1a:	4a03      	ldr	r2, [pc, #12]	@ (8011b28 <TL_TRACES_Init+0x1c>)
 8011b1c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8011b1e:	f002 ff01 	bl	8014924 <HW_IPCC_TRACES_Init>

  return;
 8011b22:	bf00      	nop
}
 8011b24:	bd80      	pop	{r7, pc}
 8011b26:	bf00      	nop
 8011b28:	200300c0 	.word	0x200300c0
 8011b2c:	20030000 	.word	0x20030000

08011b30 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011b36:	e008      	b.n	8011b4a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8011b38:	1d3b      	adds	r3, r7, #4
 8011b3a:	4619      	mov	r1, r3
 8011b3c:	4808      	ldr	r0, [pc, #32]	@ (8011b60 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011b3e:	f000 fa00 	bl	8011f42 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	4618      	mov	r0, r3
 8011b46:	f000 f80d 	bl	8011b64 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011b4a:	4805      	ldr	r0, [pc, #20]	@ (8011b60 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011b4c:	f000 f96a 	bl	8011e24 <LST_is_empty>
 8011b50:	4603      	mov	r3, r0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d0f0      	beq.n	8011b38 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8011b56:	bf00      	nop
}
 8011b58:	3708      	adds	r7, #8
 8011b5a:	46bd      	mov	sp, r7
 8011b5c:	bd80      	pop	{r7, pc}
 8011b5e:	bf00      	nop
 8011b60:	200300c0 	.word	0x200300c0

08011b64 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011b64:	b480      	push	{r7}
 8011b66:	b083      	sub	sp, #12
 8011b68:	af00      	add	r7, sp, #0
 8011b6a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8011b6c:	bf00      	nop
 8011b6e:	370c      	adds	r7, #12
 8011b70:	46bd      	mov	sp, r7
 8011b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b76:	4770      	bx	lr

08011b78 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	b085      	sub	sp, #20
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	4603      	mov	r3, r0
 8011b80:	6039      	str	r1, [r7, #0]
 8011b82:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8011b84:	79fb      	ldrb	r3, [r7, #7]
 8011b86:	2b06      	cmp	r3, #6
 8011b88:	d845      	bhi.n	8011c16 <OutputDbgTrace+0x9e>
 8011b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8011b90 <OutputDbgTrace+0x18>)
 8011b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b90:	08011bad 	.word	0x08011bad
 8011b94:	08011bd1 	.word	0x08011bd1
 8011b98:	08011bd7 	.word	0x08011bd7
 8011b9c:	08011beb 	.word	0x08011beb
 8011ba0:	08011bf7 	.word	0x08011bf7
 8011ba4:	08011bfd 	.word	0x08011bfd
 8011ba8:	08011c0b 	.word	0x08011c0b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	7a5b      	ldrb	r3, [r3, #9]
 8011bb4:	2bff      	cmp	r3, #255	@ 0xff
 8011bb6:	d005      	beq.n	8011bc4 <OutputDbgTrace+0x4c>
 8011bb8:	2bff      	cmp	r3, #255	@ 0xff
 8011bba:	dc05      	bgt.n	8011bc8 <OutputDbgTrace+0x50>
 8011bbc:	2b0e      	cmp	r3, #14
 8011bbe:	d005      	beq.n	8011bcc <OutputDbgTrace+0x54>
 8011bc0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8011bc2:	e001      	b.n	8011bc8 <OutputDbgTrace+0x50>
          break;
 8011bc4:	bf00      	nop
 8011bc6:	e027      	b.n	8011c18 <OutputDbgTrace+0xa0>
          break;
 8011bc8:	bf00      	nop
 8011bca:	e025      	b.n	8011c18 <OutputDbgTrace+0xa0>
          break;
 8011bcc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8011bce:	e023      	b.n	8011c18 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011bd4:	e020      	b.n	8011c18 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	7a5b      	ldrb	r3, [r3, #9]
 8011bde:	2b0e      	cmp	r3, #14
 8011be0:	d001      	beq.n	8011be6 <OutputDbgTrace+0x6e>
 8011be2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011be4:	e000      	b.n	8011be8 <OutputDbgTrace+0x70>
          break;
 8011be6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011be8:	e016      	b.n	8011c18 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	7a5b      	ldrb	r3, [r3, #9]
 8011bf2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011bf4:	e010      	b.n	8011c18 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011bfa:	e00d      	b.n	8011c18 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	7a5b      	ldrb	r3, [r3, #9]
 8011c04:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011c06:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011c08:	e006      	b.n	8011c18 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	7a5b      	ldrb	r3, [r3, #9]
 8011c12:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011c14:	e000      	b.n	8011c18 <OutputDbgTrace+0xa0>

    default:
      break;
 8011c16:	bf00      	nop
  }

  return;
 8011c18:	bf00      	nop
}
 8011c1a:	3714      	adds	r7, #20
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b084      	sub	sp, #16
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8011c30:	215c      	movs	r1, #92	@ 0x5c
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f004 f8cc 	bl	8015dd0 <strrchr>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d007      	beq.n	8011c4e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8011c3e:	215c      	movs	r1, #92	@ 0x5c
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f004 f8c5 	bl	8015dd0 <strrchr>
 8011c46:	4603      	mov	r3, r0
 8011c48:	3301      	adds	r3, #1
 8011c4a:	60fb      	str	r3, [r7, #12]
 8011c4c:	e00d      	b.n	8011c6a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8011c4e:	212f      	movs	r1, #47	@ 0x2f
 8011c50:	6878      	ldr	r0, [r7, #4]
 8011c52:	f004 f8bd 	bl	8015dd0 <strrchr>
 8011c56:	4603      	mov	r3, r0
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d006      	beq.n	8011c6a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8011c5c:	212f      	movs	r1, #47	@ 0x2f
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f004 f8b6 	bl	8015dd0 <strrchr>
 8011c64:	4603      	mov	r3, r0
 8011c66:	3301      	adds	r3, #1
 8011c68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011c6a:	68fb      	ldr	r3, [r7, #12]
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	3710      	adds	r7, #16
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b086      	sub	sp, #24
 8011c78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8011c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011c80:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8011c82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011c84:	b672      	cpsid	i
}
 8011c86:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8011c88:	1cbb      	adds	r3, r7, #2
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	4812      	ldr	r0, [pc, #72]	@ (8011cd8 <DbgTrace_TxCpltCallback+0x64>)
 8011c8e:	f000 fb9d 	bl	80123cc <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8011c92:	1cbb      	adds	r3, r7, #2
 8011c94:	4619      	mov	r1, r3
 8011c96:	4810      	ldr	r0, [pc, #64]	@ (8011cd8 <DbgTrace_TxCpltCallback+0x64>)
 8011c98:	f000 fc87 	bl	80125aa <CircularQueue_Sense>
 8011c9c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8011c9e:	693b      	ldr	r3, [r7, #16]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00c      	beq.n	8011cbe <DbgTrace_TxCpltCallback+0x4a>
 8011ca4:	697b      	ldr	r3, [r7, #20]
 8011ca6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ca8:	68bb      	ldr	r3, [r7, #8]
 8011caa:	f383 8810 	msr	PRIMASK, r3
}
 8011cae:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8011cb0:	887b      	ldrh	r3, [r7, #2]
 8011cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8011cdc <DbgTrace_TxCpltCallback+0x68>)
 8011cb4:	4619      	mov	r1, r3
 8011cb6:	6938      	ldr	r0, [r7, #16]
 8011cb8:	f7ef fee8 	bl	8001a8c <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8011cbc:	e008      	b.n	8011cd0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8011cbe:	4b08      	ldr	r3, [pc, #32]	@ (8011ce0 <DbgTrace_TxCpltCallback+0x6c>)
 8011cc0:	2201      	movs	r2, #1
 8011cc2:	701a      	strb	r2, [r3, #0]
 8011cc4:	697b      	ldr	r3, [r7, #20]
 8011cc6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f383 8810 	msr	PRIMASK, r3
}
 8011cce:	bf00      	nop
}
 8011cd0:	bf00      	nop
 8011cd2:	3718      	adds	r7, #24
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	20000fc0 	.word	0x20000fc0
 8011cdc:	08011c75 	.word	0x08011c75
 8011ce0:	200000a2 	.word	0x200000a2

08011ce4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b084      	sub	sp, #16
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	60f8      	str	r0, [r7, #12]
 8011cec:	60b9      	str	r1, [r7, #8]
 8011cee:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8011cf0:	687a      	ldr	r2, [r7, #4]
 8011cf2:	68b9      	ldr	r1, [r7, #8]
 8011cf4:	68f8      	ldr	r0, [r7, #12]
 8011cf6:	f000 f805 	bl	8011d04 <DbgTraceWrite>
 8011cfa:	4603      	mov	r3, r0
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3710      	adds	r7, #16
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b08a      	sub	sp, #40	@ 0x28
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8011d10:	2300      	movs	r3, #0
 8011d12:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d14:	f3ef 8310 	mrs	r3, PRIMASK
 8011d18:	61bb      	str	r3, [r7, #24]
  return(result);
 8011d1a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8011d1c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8011d1e:	68fb      	ldr	r3, [r7, #12]
 8011d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d24:	d102      	bne.n	8011d2c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d2a:	e037      	b.n	8011d9c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	2b01      	cmp	r3, #1
 8011d30:	d006      	beq.n	8011d40 <DbgTraceWrite+0x3c>
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	2b02      	cmp	r3, #2
 8011d36:	d003      	beq.n	8011d40 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8011d38:	f04f 33ff 	mov.w	r3, #4294967295
 8011d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011d3e:	e02d      	b.n	8011d9c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d02a      	beq.n	8011d9c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8011d4a:	b672      	cpsid	i
}
 8011d4c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	b29a      	uxth	r2, r3
 8011d52:	2301      	movs	r3, #1
 8011d54:	68b9      	ldr	r1, [r7, #8]
 8011d56:	4814      	ldr	r0, [pc, #80]	@ (8011da8 <DbgTraceWrite+0xa4>)
 8011d58:	f000 f912 	bl	8011f80 <CircularQueue_Add>
 8011d5c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d015      	beq.n	8011d90 <DbgTraceWrite+0x8c>
 8011d64:	4b11      	ldr	r3, [pc, #68]	@ (8011dac <DbgTraceWrite+0xa8>)
 8011d66:	781b      	ldrb	r3, [r3, #0]
 8011d68:	b2db      	uxtb	r3, r3
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d010      	beq.n	8011d90 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8011d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8011dac <DbgTraceWrite+0xa8>)
 8011d70:	2200      	movs	r2, #0
 8011d72:	701a      	strb	r2, [r3, #0]
 8011d74:	6a3b      	ldr	r3, [r7, #32]
 8011d76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	f383 8810 	msr	PRIMASK, r3
}
 8011d7e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	b29b      	uxth	r3, r3
 8011d84:	4a0a      	ldr	r2, [pc, #40]	@ (8011db0 <DbgTraceWrite+0xac>)
 8011d86:	4619      	mov	r1, r3
 8011d88:	69f8      	ldr	r0, [r7, #28]
 8011d8a:	f7ef fe7f 	bl	8001a8c <DbgOutputTraces>
 8011d8e:	e005      	b.n	8011d9c <DbgTraceWrite+0x98>
 8011d90:	6a3b      	ldr	r3, [r7, #32]
 8011d92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	f383 8810 	msr	PRIMASK, r3
}
 8011d9a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8011d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011d9e:	4618      	mov	r0, r3
 8011da0:	3728      	adds	r7, #40	@ 0x28
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	20000fc0 	.word	0x20000fc0
 8011dac:	200000a2 	.word	0x200000a2
 8011db0:	08011c75 	.word	0x08011c75

08011db4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011db4:	b480      	push	{r7}
 8011db6:	b085      	sub	sp, #20
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	4603      	mov	r3, r0
 8011dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8011dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8011dfc <OTP_Read+0x48>)
 8011dc0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011dc2:	e002      	b.n	8011dca <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	3b08      	subs	r3, #8
 8011dc8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	3307      	adds	r3, #7
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	79fa      	ldrb	r2, [r7, #7]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d003      	beq.n	8011dde <OTP_Read+0x2a>
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	4a09      	ldr	r2, [pc, #36]	@ (8011e00 <OTP_Read+0x4c>)
 8011dda:	4293      	cmp	r3, r2
 8011ddc:	d1f2      	bne.n	8011dc4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	3307      	adds	r3, #7
 8011de2:	781b      	ldrb	r3, [r3, #0]
 8011de4:	79fa      	ldrb	r2, [r7, #7]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d001      	beq.n	8011dee <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8011dea:	2300      	movs	r3, #0
 8011dec:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8011dee:	68fb      	ldr	r3, [r7, #12]
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3714      	adds	r7, #20
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr
 8011dfc:	1fff73f8 	.word	0x1fff73f8
 8011e00:	1fff7000 	.word	0x1fff7000

08011e04 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8011e04:	b480      	push	{r7}
 8011e06:	b083      	sub	sp, #12
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	687a      	ldr	r2, [r7, #4]
 8011e10:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	605a      	str	r2, [r3, #4]
}
 8011e18:	bf00      	nop
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b087      	sub	sp, #28
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8011e30:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e32:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011e34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e36:	b672      	cpsid	i
}
 8011e38:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d102      	bne.n	8011e4a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8011e44:	2301      	movs	r3, #1
 8011e46:	75fb      	strb	r3, [r7, #23]
 8011e48:	e001      	b.n	8011e4e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	75fb      	strb	r3, [r7, #23]
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	f383 8810 	msr	PRIMASK, r3
}
 8011e58:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	371c      	adds	r7, #28
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8011e68:	b480      	push	{r7}
 8011e6a:	b087      	sub	sp, #28
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e72:	f3ef 8310 	mrs	r3, PRIMASK
 8011e76:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e78:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011e7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e7c:	b672      	cpsid	i
}
 8011e7e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	683a      	ldr	r2, [r7, #0]
 8011e92:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	683a      	ldr	r2, [r7, #0]
 8011e9a:	605a      	str	r2, [r3, #4]
 8011e9c:	697b      	ldr	r3, [r7, #20]
 8011e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	f383 8810 	msr	PRIMASK, r3
}
 8011ea6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011ea8:	bf00      	nop
 8011eaa:	371c      	adds	r7, #28
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr

08011eb4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8011eb4:	b480      	push	{r7}
 8011eb6:	b087      	sub	sp, #28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8011ec2:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ec4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011ec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011ec8:	b672      	cpsid	i
}
 8011eca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	685a      	ldr	r2, [r3, #4]
 8011ed6:	683b      	ldr	r3, [r7, #0]
 8011ed8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	683a      	ldr	r2, [r7, #0]
 8011ede:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	683a      	ldr	r2, [r7, #0]
 8011ee6:	601a      	str	r2, [r3, #0]
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011eec:	693b      	ldr	r3, [r7, #16]
 8011eee:	f383 8810 	msr	PRIMASK, r3
}
 8011ef2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011ef4:	bf00      	nop
 8011ef6:	371c      	adds	r7, #28
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8011f00:	b480      	push	{r7}
 8011f02:	b087      	sub	sp, #28
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f08:	f3ef 8310 	mrs	r3, PRIMASK
 8011f0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f0e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011f10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f12:	b672      	cpsid	i
}
 8011f14:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	685b      	ldr	r3, [r3, #4]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	6812      	ldr	r2, [r2, #0]
 8011f1e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	6852      	ldr	r2, [r2, #4]
 8011f28:	605a      	str	r2, [r3, #4]
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	f383 8810 	msr	PRIMASK, r3
}
 8011f34:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011f36:	bf00      	nop
 8011f38:	371c      	adds	r7, #28
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f40:	4770      	bx	lr

08011f42 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8011f42:	b580      	push	{r7, lr}
 8011f44:	b086      	sub	sp, #24
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	6078      	str	r0, [r7, #4]
 8011f4a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8011f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f52:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011f54:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f56:	b672      	cpsid	i
}
 8011f58:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681a      	ldr	r2, [r3, #0]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7ff ffca 	bl	8011f00 <LST_remove_node>
 8011f6c:	697b      	ldr	r3, [r7, #20]
 8011f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f70:	693b      	ldr	r3, [r7, #16]
 8011f72:	f383 8810 	msr	PRIMASK, r3
}
 8011f76:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011f78:	bf00      	nop
 8011f7a:	3718      	adds	r7, #24
 8011f7c:	46bd      	mov	sp, r7
 8011f7e:	bd80      	pop	{r7, pc}

08011f80 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b08e      	sub	sp, #56	@ 0x38
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	60f8      	str	r0, [r7, #12]
 8011f88:	60b9      	str	r1, [r7, #8]
 8011f8a:	603b      	str	r3, [r7, #0]
 8011f8c:	4613      	mov	r3, r2
 8011f8e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8011f90:	2300      	movs	r3, #0
 8011f92:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8011f94:	2300      	movs	r3, #0
 8011f96:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8011f98:	2300      	movs	r3, #0
 8011f9a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8011fa8:	2300      	movs	r3, #0
 8011faa:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	891b      	ldrh	r3, [r3, #8]
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d101      	bne.n	8011fb8 <CircularQueue_Add+0x38>
 8011fb4:	2302      	movs	r3, #2
 8011fb6:	e000      	b.n	8011fba <CircularQueue_Add+0x3a>
 8011fb8:	2300      	movs	r3, #0
 8011fba:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	695b      	ldr	r3, [r3, #20]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d029      	beq.n	8012018 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	891b      	ldrh	r3, [r3, #8]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d122      	bne.n	8012012 <CircularQueue_Add+0x92>
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	681a      	ldr	r2, [r3, #0]
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	691b      	ldr	r3, [r3, #16]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	4618      	mov	r0, r3
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	681a      	ldr	r2, [r3, #0]
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	691b      	ldr	r3, [r3, #16]
 8011fe2:	1c59      	adds	r1, r3, #1
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	4299      	cmp	r1, r3
 8011fea:	d306      	bcc.n	8011ffa <CircularQueue_Add+0x7a>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	6919      	ldr	r1, [r3, #16]
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	1acb      	subs	r3, r1, r3
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	e002      	b.n	8012000 <CircularQueue_Add+0x80>
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	691b      	ldr	r3, [r3, #16]
 8011ffe:	3301      	adds	r3, #1
 8012000:	4413      	add	r3, r2
 8012002:	781b      	ldrb	r3, [r3, #0]
 8012004:	021b      	lsls	r3, r3, #8
 8012006:	b29b      	uxth	r3, r3
 8012008:	4403      	add	r3, r0
 801200a:	b29b      	uxth	r3, r3
 801200c:	3302      	adds	r3, #2
 801200e:	b29b      	uxth	r3, r3
 8012010:	e001      	b.n	8012016 <CircularQueue_Add+0x96>
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	891b      	ldrh	r3, [r3, #8]
 8012016:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	891b      	ldrh	r3, [r3, #8]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d002      	beq.n	8012026 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	891b      	ldrh	r3, [r3, #8]
 8012024:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	691a      	ldr	r2, [r3, #16]
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	68db      	ldr	r3, [r3, #12]
 801202e:	429a      	cmp	r2, r3
 8012030:	d307      	bcc.n	8012042 <CircularQueue_Add+0xc2>
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	685a      	ldr	r2, [r3, #4]
 8012036:	68fb      	ldr	r3, [r7, #12]
 8012038:	6919      	ldr	r1, [r3, #16]
 801203a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801203c:	440b      	add	r3, r1
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	e000      	b.n	8012044 <CircularQueue_Add+0xc4>
 8012042:	2300      	movs	r3, #0
 8012044:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012046:	88fa      	ldrh	r2, [r7, #6]
 8012048:	7ffb      	ldrb	r3, [r7, #31]
 801204a:	4413      	add	r3, r2
 801204c:	461a      	mov	r2, r3
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	fb02 f303 	mul.w	r3, r2, r3
 8012054:	69ba      	ldr	r2, [r7, #24]
 8012056:	429a      	cmp	r2, r3
 8012058:	d80b      	bhi.n	8012072 <CircularQueue_Add+0xf2>
 801205a:	88fa      	ldrh	r2, [r7, #6]
 801205c:	7ffb      	ldrb	r3, [r7, #31]
 801205e:	4413      	add	r3, r2
 8012060:	461a      	mov	r2, r3
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	fbb3 f1f2 	udiv	r1, r3, r2
 8012068:	fb01 f202 	mul.w	r2, r1, r2
 801206c:	1a9b      	subs	r3, r3, r2
 801206e:	b2db      	uxtb	r3, r3
 8012070:	e000      	b.n	8012074 <CircularQueue_Add+0xf4>
 8012072:	2300      	movs	r3, #0
 8012074:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012076:	7dfa      	ldrb	r2, [r7, #23]
 8012078:	7ffb      	ldrb	r3, [r7, #31]
 801207a:	429a      	cmp	r2, r3
 801207c:	bf8c      	ite	hi
 801207e:	2301      	movhi	r3, #1
 8012080:	2300      	movls	r3, #0
 8012082:	b2db      	uxtb	r3, r3
 8012084:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012086:	7fbb      	ldrb	r3, [r7, #30]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d008      	beq.n	801209e <CircularQueue_Add+0x11e>
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	7f1b      	ldrb	r3, [r3, #28]
 8012090:	f003 0301 	and.w	r3, r3, #1
 8012094:	2b00      	cmp	r3, #0
 8012096:	d002      	beq.n	801209e <CircularQueue_Add+0x11e>
 8012098:	7dfb      	ldrb	r3, [r7, #23]
 801209a:	b29b      	uxth	r3, r3
 801209c:	e000      	b.n	80120a0 <CircularQueue_Add+0x120>
 801209e:	8bbb      	ldrh	r3, [r7, #28]
 80120a0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80120a2:	7fbb      	ldrb	r3, [r7, #30]
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d008      	beq.n	80120ba <CircularQueue_Add+0x13a>
 80120a8:	68fb      	ldr	r3, [r7, #12]
 80120aa:	7f1b      	ldrb	r3, [r3, #28]
 80120ac:	f003 0302 	and.w	r3, r3, #2
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d002      	beq.n	80120ba <CircularQueue_Add+0x13a>
 80120b4:	7ffb      	ldrb	r3, [r7, #31]
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	e000      	b.n	80120bc <CircularQueue_Add+0x13c>
 80120ba:	8bbb      	ldrh	r3, [r7, #28]
 80120bc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80120be:	88fb      	ldrh	r3, [r7, #6]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	f000 817e 	beq.w	80123c2 <CircularQueue_Add+0x442>
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	695a      	ldr	r2, [r3, #20]
 80120ca:	88f9      	ldrh	r1, [r7, #6]
 80120cc:	7ffb      	ldrb	r3, [r7, #31]
 80120ce:	440b      	add	r3, r1
 80120d0:	4619      	mov	r1, r3
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	fb01 f303 	mul.w	r3, r1, r3
 80120d8:	441a      	add	r2, r3
 80120da:	8bbb      	ldrh	r3, [r7, #28]
 80120dc:	441a      	add	r2, r3
 80120de:	68fb      	ldr	r3, [r7, #12]
 80120e0:	685b      	ldr	r3, [r3, #4]
 80120e2:	429a      	cmp	r2, r3
 80120e4:	f200 816d 	bhi.w	80123c2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80120e8:	2300      	movs	r3, #0
 80120ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80120ec:	e14a      	b.n	8012384 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	691a      	ldr	r2, [r3, #16]
 80120f2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80120f4:	441a      	add	r2, r3
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d307      	bcc.n	801210e <CircularQueue_Add+0x18e>
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	691a      	ldr	r2, [r3, #16]
 8012102:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012104:	441a      	add	r2, r3
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	1ad3      	subs	r3, r2, r3
 801210c:	e003      	b.n	8012116 <CircularQueue_Add+0x196>
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	691a      	ldr	r2, [r3, #16]
 8012112:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012114:	4413      	add	r3, r2
 8012116:	68fa      	ldr	r2, [r7, #12]
 8012118:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	891b      	ldrh	r3, [r3, #8]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d130      	bne.n	801218a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681a      	ldr	r2, [r3, #0]
 801212c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801212e:	1c59      	adds	r1, r3, #1
 8012130:	6339      	str	r1, [r7, #48]	@ 0x30
 8012132:	4413      	add	r3, r2
 8012134:	88fa      	ldrh	r2, [r7, #6]
 8012136:	b2d2      	uxtb	r2, r2
 8012138:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012140:	429a      	cmp	r2, r3
 8012142:	d304      	bcc.n	801214e <CircularQueue_Add+0x1ce>
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801214a:	1ad3      	subs	r3, r2, r3
 801214c:	e000      	b.n	8012150 <CircularQueue_Add+0x1d0>
 801214e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012150:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012152:	88fb      	ldrh	r3, [r7, #6]
 8012154:	0a1b      	lsrs	r3, r3, #8
 8012156:	b298      	uxth	r0, r3
 8012158:	68fb      	ldr	r3, [r7, #12]
 801215a:	681a      	ldr	r2, [r3, #0]
 801215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801215e:	1c59      	adds	r1, r3, #1
 8012160:	6339      	str	r1, [r7, #48]	@ 0x30
 8012162:	4413      	add	r3, r2
 8012164:	b2c2      	uxtb	r2, r0
 8012166:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	685b      	ldr	r3, [r3, #4]
 801216c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801216e:	429a      	cmp	r2, r3
 8012170:	d304      	bcc.n	801217c <CircularQueue_Add+0x1fc>
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	685b      	ldr	r3, [r3, #4]
 8012176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012178:	1ad3      	subs	r3, r2, r3
 801217a:	e000      	b.n	801217e <CircularQueue_Add+0x1fe>
 801217c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801217e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	695b      	ldr	r3, [r3, #20]
 8012184:	1c9a      	adds	r2, r3, #2
 8012186:	68fb      	ldr	r3, [r7, #12]
 8012188:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 801218a:	88fa      	ldrh	r2, [r7, #6]
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	6859      	ldr	r1, [r3, #4]
 8012190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012192:	1acb      	subs	r3, r1, r3
 8012194:	4293      	cmp	r3, r2
 8012196:	bf28      	it	cs
 8012198:	4613      	movcs	r3, r2
 801219a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 801219c:	88fb      	ldrh	r3, [r7, #6]
 801219e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121a0:	429a      	cmp	r2, r3
 80121a2:	d007      	beq.n	80121b4 <CircularQueue_Add+0x234>
 80121a4:	88fb      	ldrh	r3, [r7, #6]
 80121a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d225      	bcs.n	80121f8 <CircularQueue_Add+0x278>
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	7f1b      	ldrb	r3, [r3, #28]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d121      	bne.n	80121f8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	681a      	ldr	r2, [r3, #0]
 80121b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121ba:	18d0      	adds	r0, r2, r3
 80121bc:	88fb      	ldrh	r3, [r7, #6]
 80121be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80121c0:	fb02 f303 	mul.w	r3, r2, r3
 80121c4:	68ba      	ldr	r2, [r7, #8]
 80121c6:	4413      	add	r3, r2
 80121c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80121ca:	4619      	mov	r1, r3
 80121cc:	f003 fe89 	bl	8015ee2 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	695a      	ldr	r2, [r3, #20]
 80121d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121d6:	441a      	add	r2, r3
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80121dc:	2300      	movs	r3, #0
 80121de:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80121e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80121e4:	88fa      	ldrh	r2, [r7, #6]
 80121e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121e8:	1ad3      	subs	r3, r2, r3
 80121ea:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80121ec:	7ffb      	ldrb	r3, [r7, #31]
 80121ee:	b29a      	uxth	r2, r3
 80121f0:	88fb      	ldrh	r3, [r7, #6]
 80121f2:	4413      	add	r3, r2
 80121f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80121f6:	e0a4      	b.n	8012342 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80121f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	f000 80a1 	beq.w	8012342 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	7f1b      	ldrb	r3, [r3, #28]
 8012204:	f003 0301 	and.w	r3, r3, #1
 8012208:	2b00      	cmp	r3, #0
 801220a:	d03a      	beq.n	8012282 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	891b      	ldrh	r3, [r3, #8]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d10d      	bne.n	8012230 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	681a      	ldr	r2, [r3, #0]
 8012218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801221a:	3b02      	subs	r3, #2
 801221c:	4413      	add	r3, r2
 801221e:	22ff      	movs	r2, #255	@ 0xff
 8012220:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012222:	68fb      	ldr	r3, [r7, #12]
 8012224:	681a      	ldr	r2, [r3, #0]
 8012226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012228:	3b01      	subs	r3, #1
 801222a:	4413      	add	r3, r2
 801222c:	22ff      	movs	r2, #255	@ 0xff
 801222e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	695a      	ldr	r2, [r3, #20]
 8012234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012236:	441a      	add	r2, r3
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 801223c:	2300      	movs	r3, #0
 801223e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012240:	88fb      	ldrh	r3, [r7, #6]
 8012242:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012244:	2300      	movs	r3, #0
 8012246:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	891b      	ldrh	r3, [r3, #8]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d16f      	bne.n	8012330 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012256:	1c59      	adds	r1, r3, #1
 8012258:	6339      	str	r1, [r7, #48]	@ 0x30
 801225a:	4413      	add	r3, r2
 801225c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801225e:	b2d2      	uxtb	r2, r2
 8012260:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012264:	0a18      	lsrs	r0, r3, #8
 8012266:	68fb      	ldr	r3, [r7, #12]
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801226c:	1c59      	adds	r1, r3, #1
 801226e:	6339      	str	r1, [r7, #48]	@ 0x30
 8012270:	4413      	add	r3, r2
 8012272:	b2c2      	uxtb	r2, r0
 8012274:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	695b      	ldr	r3, [r3, #20]
 801227a:	1c9a      	adds	r2, r3, #2
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	615a      	str	r2, [r3, #20]
 8012280:	e056      	b.n	8012330 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	7f1b      	ldrb	r3, [r3, #28]
 8012286:	f003 0302 	and.w	r3, r3, #2
 801228a:	2b00      	cmp	r3, #0
 801228c:	d050      	beq.n	8012330 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	891b      	ldrh	r3, [r3, #8]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d14a      	bne.n	801232c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801229c:	3b02      	subs	r3, #2
 801229e:	4413      	add	r3, r2
 80122a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122a2:	b2d2      	uxtb	r2, r2
 80122a4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80122a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122a8:	0a19      	lsrs	r1, r3, #8
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	681a      	ldr	r2, [r3, #0]
 80122ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122b0:	3b01      	subs	r3, #1
 80122b2:	4413      	add	r3, r2
 80122b4:	b2ca      	uxtb	r2, r1
 80122b6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681a      	ldr	r2, [r3, #0]
 80122bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122be:	18d0      	adds	r0, r2, r3
 80122c0:	88fb      	ldrh	r3, [r7, #6]
 80122c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122c4:	fb02 f303 	mul.w	r3, r2, r3
 80122c8:	68ba      	ldr	r2, [r7, #8]
 80122ca:	4413      	add	r3, r2
 80122cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122ce:	4619      	mov	r1, r3
 80122d0:	f003 fe07 	bl	8015ee2 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	695a      	ldr	r2, [r3, #20]
 80122d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122da:	441a      	add	r2, r3
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80122e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80122e4:	88fa      	ldrh	r2, [r7, #6]
 80122e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e8:	1ad3      	subs	r3, r2, r3
 80122ea:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	699b      	ldr	r3, [r3, #24]
 80122f0:	1c5a      	adds	r2, r3, #1
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80122f6:	2300      	movs	r3, #0
 80122f8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	681a      	ldr	r2, [r3, #0]
 80122fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012300:	1c59      	adds	r1, r3, #1
 8012302:	6339      	str	r1, [r7, #48]	@ 0x30
 8012304:	4413      	add	r3, r2
 8012306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012308:	b2d2      	uxtb	r2, r2
 801230a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801230c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801230e:	0a18      	lsrs	r0, r3, #8
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	681a      	ldr	r2, [r3, #0]
 8012314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012316:	1c59      	adds	r1, r3, #1
 8012318:	6339      	str	r1, [r7, #48]	@ 0x30
 801231a:	4413      	add	r3, r2
 801231c:	b2c2      	uxtb	r2, r0
 801231e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	695b      	ldr	r3, [r3, #20]
 8012324:	1c9a      	adds	r2, r3, #2
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	615a      	str	r2, [r3, #20]
 801232a:	e001      	b.n	8012330 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801232c:	2300      	movs	r3, #0
 801232e:	e049      	b.n	80123c4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8012330:	7ffb      	ldrb	r3, [r7, #31]
 8012332:	b29a      	uxth	r2, r3
 8012334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012336:	b29b      	uxth	r3, r3
 8012338:	4413      	add	r3, r2
 801233a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	2200      	movs	r2, #0
 8012340:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8012342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012344:	2b00      	cmp	r3, #0
 8012346:	d015      	beq.n	8012374 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	681a      	ldr	r2, [r3, #0]
 801234c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801234e:	18d0      	adds	r0, r2, r3
 8012350:	88fb      	ldrh	r3, [r7, #6]
 8012352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012354:	fb03 f202 	mul.w	r2, r3, r2
 8012358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801235a:	4413      	add	r3, r2
 801235c:	68ba      	ldr	r2, [r7, #8]
 801235e:	4413      	add	r3, r2
 8012360:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012362:	4619      	mov	r1, r3
 8012364:	f003 fdbd 	bl	8015ee2 <memcpy>
        q->byteCount += NbBytesToCopy;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	695a      	ldr	r2, [r3, #20]
 801236c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801236e:	441a      	add	r2, r3
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	699b      	ldr	r3, [r3, #24]
 8012378:	1c5a      	adds	r2, r3, #1
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801237e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012380:	3301      	adds	r3, #1
 8012382:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	429a      	cmp	r2, r3
 801238a:	f4ff aeb0 	bcc.w	80120ee <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	681a      	ldr	r2, [r3, #0]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	6919      	ldr	r1, [r3, #16]
 8012396:	7ffb      	ldrb	r3, [r7, #31]
 8012398:	4419      	add	r1, r3
 801239a:	68fb      	ldr	r3, [r7, #12]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	4299      	cmp	r1, r3
 80123a0:	d307      	bcc.n	80123b2 <CircularQueue_Add+0x432>
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	6919      	ldr	r1, [r3, #16]
 80123a6:	7ffb      	ldrb	r3, [r7, #31]
 80123a8:	4419      	add	r1, r3
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	1acb      	subs	r3, r1, r3
 80123b0:	e003      	b.n	80123ba <CircularQueue_Add+0x43a>
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	6919      	ldr	r1, [r3, #16]
 80123b6:	7ffb      	ldrb	r3, [r7, #31]
 80123b8:	440b      	add	r3, r1
 80123ba:	4413      	add	r3, r2
 80123bc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80123be:	6a3b      	ldr	r3, [r7, #32]
 80123c0:	e000      	b.n	80123c4 <CircularQueue_Add+0x444>
    return NULL;
 80123c2:	2300      	movs	r3, #0
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3738      	adds	r7, #56	@ 0x38
 80123c8:	46bd      	mov	sp, r7
 80123ca:	bd80      	pop	{r7, pc}

080123cc <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80123cc:	b480      	push	{r7}
 80123ce:	b085      	sub	sp, #20
 80123d0:	af00      	add	r7, sp, #0
 80123d2:	6078      	str	r0, [r7, #4]
 80123d4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80123da:	2300      	movs	r3, #0
 80123dc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	891b      	ldrh	r3, [r3, #8]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d101      	bne.n	80123ea <CircularQueue_Remove+0x1e>
 80123e6:	2302      	movs	r3, #2
 80123e8:	e000      	b.n	80123ec <CircularQueue_Remove+0x20>
 80123ea:	2300      	movs	r3, #0
 80123ec:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80123ee:	2300      	movs	r3, #0
 80123f0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	695b      	ldr	r3, [r3, #20]
 80123f6:	2b00      	cmp	r3, #0
 80123f8:	f000 80ca 	beq.w	8012590 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	891b      	ldrh	r3, [r3, #8]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d120      	bne.n	8012446 <CircularQueue_Remove+0x7a>
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	681a      	ldr	r2, [r3, #0]
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	68db      	ldr	r3, [r3, #12]
 801240c:	4413      	add	r3, r2
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	4618      	mov	r0, r3
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	681a      	ldr	r2, [r3, #0]
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	1c59      	adds	r1, r3, #1
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	685b      	ldr	r3, [r3, #4]
 8012420:	4299      	cmp	r1, r3
 8012422:	d306      	bcc.n	8012432 <CircularQueue_Remove+0x66>
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	68d9      	ldr	r1, [r3, #12]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	1acb      	subs	r3, r1, r3
 801242e:	3301      	adds	r3, #1
 8012430:	e002      	b.n	8012438 <CircularQueue_Remove+0x6c>
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	3301      	adds	r3, #1
 8012438:	4413      	add	r3, r2
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	021b      	lsls	r3, r3, #8
 801243e:	b29b      	uxth	r3, r3
 8012440:	4403      	add	r3, r0
 8012442:	b29b      	uxth	r3, r3
 8012444:	e001      	b.n	801244a <CircularQueue_Remove+0x7e>
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	891b      	ldrh	r3, [r3, #8]
 801244a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	7f1b      	ldrb	r3, [r3, #28]
 8012450:	f003 0301 	and.w	r3, r3, #1
 8012454:	2b00      	cmp	r3, #0
 8012456:	d056      	beq.n	8012506 <CircularQueue_Remove+0x13a>
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	7f1b      	ldrb	r3, [r3, #28]
 801245c:	f003 0302 	and.w	r3, r3, #2
 8012460:	2b00      	cmp	r3, #0
 8012462:	d150      	bne.n	8012506 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012464:	897b      	ldrh	r3, [r7, #10]
 8012466:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801246a:	4293      	cmp	r3, r2
 801246c:	d103      	bne.n	8012476 <CircularQueue_Remove+0xaa>
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	891b      	ldrh	r3, [r3, #8]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d012      	beq.n	801249c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	68da      	ldr	r2, [r3, #12]
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801247e:	429a      	cmp	r2, r3
 8012480:	d941      	bls.n	8012506 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	891b      	ldrh	r3, [r3, #8]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d03d      	beq.n	8012506 <CircularQueue_Remove+0x13a>
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	685a      	ldr	r2, [r3, #4]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	68db      	ldr	r3, [r3, #12]
 8012492:	1ad3      	subs	r3, r2, r3
 8012494:	687a      	ldr	r2, [r7, #4]
 8012496:	8912      	ldrh	r2, [r2, #8]
 8012498:	4293      	cmp	r3, r2
 801249a:	d234      	bcs.n	8012506 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	695a      	ldr	r2, [r3, #20]
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	68d9      	ldr	r1, [r3, #12]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	685b      	ldr	r3, [r3, #4]
 80124a8:	1acb      	subs	r3, r1, r3
 80124aa:	441a      	add	r2, r3
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	2200      	movs	r2, #0
 80124b4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	891b      	ldrh	r3, [r3, #8]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d120      	bne.n	8012500 <CircularQueue_Remove+0x134>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681a      	ldr	r2, [r3, #0]
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	68db      	ldr	r3, [r3, #12]
 80124c6:	4413      	add	r3, r2
 80124c8:	781b      	ldrb	r3, [r3, #0]
 80124ca:	4618      	mov	r0, r3
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681a      	ldr	r2, [r3, #0]
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	68db      	ldr	r3, [r3, #12]
 80124d4:	1c59      	adds	r1, r3, #1
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	4299      	cmp	r1, r3
 80124dc:	d306      	bcc.n	80124ec <CircularQueue_Remove+0x120>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	68d9      	ldr	r1, [r3, #12]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	685b      	ldr	r3, [r3, #4]
 80124e6:	1acb      	subs	r3, r1, r3
 80124e8:	3301      	adds	r3, #1
 80124ea:	e002      	b.n	80124f2 <CircularQueue_Remove+0x126>
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	68db      	ldr	r3, [r3, #12]
 80124f0:	3301      	adds	r3, #1
 80124f2:	4413      	add	r3, r2
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	021b      	lsls	r3, r3, #8
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	4403      	add	r3, r0
 80124fc:	b29b      	uxth	r3, r3
 80124fe:	e001      	b.n	8012504 <CircularQueue_Remove+0x138>
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	891b      	ldrh	r3, [r3, #8]
 8012504:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	68d9      	ldr	r1, [r3, #12]
 801250e:	7a7b      	ldrb	r3, [r7, #9]
 8012510:	4419      	add	r1, r3
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	685b      	ldr	r3, [r3, #4]
 8012516:	4299      	cmp	r1, r3
 8012518:	d307      	bcc.n	801252a <CircularQueue_Remove+0x15e>
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	68d9      	ldr	r1, [r3, #12]
 801251e:	7a7b      	ldrb	r3, [r7, #9]
 8012520:	4419      	add	r1, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	685b      	ldr	r3, [r3, #4]
 8012526:	1acb      	subs	r3, r1, r3
 8012528:	e003      	b.n	8012532 <CircularQueue_Remove+0x166>
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	68d9      	ldr	r1, [r3, #12]
 801252e:	7a7b      	ldrb	r3, [r7, #9]
 8012530:	440b      	add	r3, r1
 8012532:	4413      	add	r3, r2
 8012534:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	695b      	ldr	r3, [r3, #20]
 801253a:	8979      	ldrh	r1, [r7, #10]
 801253c:	7a7a      	ldrb	r2, [r7, #9]
 801253e:	440a      	add	r2, r1
 8012540:	1a9a      	subs	r2, r3, r2
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	695b      	ldr	r3, [r3, #20]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d01b      	beq.n	8012586 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	68da      	ldr	r2, [r3, #12]
 8012552:	897b      	ldrh	r3, [r7, #10]
 8012554:	441a      	add	r2, r3
 8012556:	7a7b      	ldrb	r3, [r7, #9]
 8012558:	441a      	add	r2, r3
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	429a      	cmp	r2, r3
 8012560:	d309      	bcc.n	8012576 <CircularQueue_Remove+0x1aa>
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	68da      	ldr	r2, [r3, #12]
 8012566:	897b      	ldrh	r3, [r7, #10]
 8012568:	441a      	add	r2, r3
 801256a:	7a7b      	ldrb	r3, [r7, #9]
 801256c:	441a      	add	r2, r3
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	685b      	ldr	r3, [r3, #4]
 8012572:	1ad3      	subs	r3, r2, r3
 8012574:	e005      	b.n	8012582 <CircularQueue_Remove+0x1b6>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	68da      	ldr	r2, [r3, #12]
 801257a:	897b      	ldrh	r3, [r7, #10]
 801257c:	441a      	add	r2, r3
 801257e:	7a7b      	ldrb	r3, [r7, #9]
 8012580:	4413      	add	r3, r2
 8012582:	687a      	ldr	r2, [r7, #4]
 8012584:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	699b      	ldr	r3, [r3, #24]
 801258a:	1e5a      	subs	r2, r3, #1
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8012590:	683b      	ldr	r3, [r7, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d002      	beq.n	801259c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	897a      	ldrh	r2, [r7, #10]
 801259a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801259c:	68fb      	ldr	r3, [r7, #12]
}
 801259e:	4618      	mov	r0, r3
 80125a0:	3714      	adds	r7, #20
 80125a2:	46bd      	mov	sp, r7
 80125a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a8:	4770      	bx	lr

080125aa <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80125aa:	b480      	push	{r7}
 80125ac:	b087      	sub	sp, #28
 80125ae:	af00      	add	r7, sp, #0
 80125b0:	6078      	str	r0, [r7, #4]
 80125b2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80125b4:	2300      	movs	r3, #0
 80125b6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80125b8:	2300      	movs	r3, #0
 80125ba:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	891b      	ldrh	r3, [r3, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d101      	bne.n	80125c8 <CircularQueue_Sense+0x1e>
 80125c4:	2302      	movs	r3, #2
 80125c6:	e000      	b.n	80125ca <CircularQueue_Sense+0x20>
 80125c8:	2300      	movs	r3, #0
 80125ca:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80125cc:	2300      	movs	r3, #0
 80125ce:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80125d0:	2300      	movs	r3, #0
 80125d2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	695b      	ldr	r3, [r3, #20]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	f000 808e 	beq.w	80126fa <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	68db      	ldr	r3, [r3, #12]
 80125e2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	891b      	ldrh	r3, [r3, #8]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d120      	bne.n	801262e <CircularQueue_Sense+0x84>
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	4413      	add	r3, r2
 80125f6:	781b      	ldrb	r3, [r3, #0]
 80125f8:	4618      	mov	r0, r3
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681a      	ldr	r2, [r3, #0]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	1c59      	adds	r1, r3, #1
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	685b      	ldr	r3, [r3, #4]
 8012608:	4299      	cmp	r1, r3
 801260a:	d306      	bcc.n	801261a <CircularQueue_Sense+0x70>
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	68d9      	ldr	r1, [r3, #12]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	685b      	ldr	r3, [r3, #4]
 8012614:	1acb      	subs	r3, r1, r3
 8012616:	3301      	adds	r3, #1
 8012618:	e002      	b.n	8012620 <CircularQueue_Sense+0x76>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	3301      	adds	r3, #1
 8012620:	4413      	add	r3, r2
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	021b      	lsls	r3, r3, #8
 8012626:	b29b      	uxth	r3, r3
 8012628:	4403      	add	r3, r0
 801262a:	b29b      	uxth	r3, r3
 801262c:	e001      	b.n	8012632 <CircularQueue_Sense+0x88>
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	891b      	ldrh	r3, [r3, #8]
 8012632:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	7f1b      	ldrb	r3, [r3, #28]
 8012638:	f003 0301 	and.w	r3, r3, #1
 801263c:	2b00      	cmp	r3, #0
 801263e:	d047      	beq.n	80126d0 <CircularQueue_Sense+0x126>
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	7f1b      	ldrb	r3, [r3, #28]
 8012644:	f003 0302 	and.w	r3, r3, #2
 8012648:	2b00      	cmp	r3, #0
 801264a:	d141      	bne.n	80126d0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801264c:	8a7b      	ldrh	r3, [r7, #18]
 801264e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012652:	4293      	cmp	r3, r2
 8012654:	d103      	bne.n	801265e <CircularQueue_Sense+0xb4>
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	891b      	ldrh	r3, [r3, #8]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d012      	beq.n	8012684 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	68da      	ldr	r2, [r3, #12]
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012666:	429a      	cmp	r2, r3
 8012668:	d932      	bls.n	80126d0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	891b      	ldrh	r3, [r3, #8]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d02e      	beq.n	80126d0 <CircularQueue_Sense+0x126>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	685a      	ldr	r2, [r3, #4]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	68db      	ldr	r3, [r3, #12]
 801267a:	1ad3      	subs	r3, r2, r3
 801267c:	687a      	ldr	r2, [r7, #4]
 801267e:	8912      	ldrh	r2, [r2, #8]
 8012680:	4293      	cmp	r3, r2
 8012682:	d225      	bcs.n	80126d0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8012684:	2300      	movs	r3, #0
 8012686:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	891b      	ldrh	r3, [r3, #8]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d11c      	bne.n	80126ca <CircularQueue_Sense+0x120>
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	681a      	ldr	r2, [r3, #0]
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	4413      	add	r3, r2
 8012698:	781b      	ldrb	r3, [r3, #0]
 801269a:	4618      	mov	r0, r3
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681a      	ldr	r2, [r3, #0]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	1c59      	adds	r1, r3, #1
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	4299      	cmp	r1, r3
 80126aa:	d305      	bcc.n	80126b8 <CircularQueue_Sense+0x10e>
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	685b      	ldr	r3, [r3, #4]
 80126b0:	68f9      	ldr	r1, [r7, #12]
 80126b2:	1acb      	subs	r3, r1, r3
 80126b4:	3301      	adds	r3, #1
 80126b6:	e001      	b.n	80126bc <CircularQueue_Sense+0x112>
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	3301      	adds	r3, #1
 80126bc:	4413      	add	r3, r2
 80126be:	781b      	ldrb	r3, [r3, #0]
 80126c0:	021b      	lsls	r3, r3, #8
 80126c2:	b29b      	uxth	r3, r3
 80126c4:	4403      	add	r3, r0
 80126c6:	b29b      	uxth	r3, r3
 80126c8:	e001      	b.n	80126ce <CircularQueue_Sense+0x124>
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	891b      	ldrh	r3, [r3, #8]
 80126ce:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	7af9      	ldrb	r1, [r7, #11]
 80126d6:	68fb      	ldr	r3, [r7, #12]
 80126d8:	4419      	add	r1, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	685b      	ldr	r3, [r3, #4]
 80126de:	4299      	cmp	r1, r3
 80126e0:	d306      	bcc.n	80126f0 <CircularQueue_Sense+0x146>
 80126e2:	7af9      	ldrb	r1, [r7, #11]
 80126e4:	68fb      	ldr	r3, [r7, #12]
 80126e6:	4419      	add	r1, r3
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	685b      	ldr	r3, [r3, #4]
 80126ec:	1acb      	subs	r3, r1, r3
 80126ee:	e002      	b.n	80126f6 <CircularQueue_Sense+0x14c>
 80126f0:	7af9      	ldrb	r1, [r7, #11]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	440b      	add	r3, r1
 80126f6:	4413      	add	r3, r2
 80126f8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80126fa:	683b      	ldr	r3, [r7, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d002      	beq.n	8012706 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8012700:	683b      	ldr	r3, [r7, #0]
 8012702:	8a7a      	ldrh	r2, [r7, #18]
 8012704:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8012706:	697b      	ldr	r3, [r7, #20]
}
 8012708:	4618      	mov	r0, r3
 801270a:	371c      	adds	r7, #28
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr

08012714 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012714:	b480      	push	{r7}
 8012716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012718:	4b03      	ldr	r3, [pc, #12]	@ (8012728 <LL_FLASH_GetUDN+0x14>)
 801271a:	681b      	ldr	r3, [r3, #0]
}
 801271c:	4618      	mov	r0, r3
 801271e:	46bd      	mov	sp, r7
 8012720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012724:	4770      	bx	lr
 8012726:	bf00      	nop
 8012728:	1fff7580 	.word	0x1fff7580

0801272c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 801272c:	b480      	push	{r7}
 801272e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8012730:	4b03      	ldr	r3, [pc, #12]	@ (8012740 <LL_FLASH_GetDeviceID+0x14>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	b2db      	uxtb	r3, r3
}
 8012736:	4618      	mov	r0, r3
 8012738:	46bd      	mov	sp, r7
 801273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273e:	4770      	bx	lr
 8012740:	1fff7584 	.word	0x1fff7584

08012744 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8012744:	b480      	push	{r7}
 8012746:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8012748:	4b03      	ldr	r3, [pc, #12]	@ (8012758 <LL_FLASH_GetSTCompanyID+0x14>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	0a1b      	lsrs	r3, r3, #8
}
 801274e:	4618      	mov	r0, r3
 8012750:	46bd      	mov	sp, r7
 8012752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012756:	4770      	bx	lr
 8012758:	1fff7584 	.word	0x1fff7584

0801275c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 801275c:	b5b0      	push	{r4, r5, r7, lr}
 801275e:	b090      	sub	sp, #64	@ 0x40
 8012760:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012762:	2392      	movs	r3, #146	@ 0x92
 8012764:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ALL_TASK, UTIL_SEQ_RFU, ALL_SENs_Task);
 8012768:	4a4d      	ldr	r2, [pc, #308]	@ (80128a0 <APP_BLE_Init+0x144>)
 801276a:	2100      	movs	r1, #0
 801276c:	2020      	movs	r0, #32
 801276e:	f002 ff8d 	bl	801568c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ACC_TASK, UTIL_SEQ_RFU, ACCEL_Task);
 8012772:	4a4c      	ldr	r2, [pc, #304]	@ (80128a4 <APP_BLE_Init+0x148>)
 8012774:	2100      	movs	r1, #0
 8012776:	2008      	movs	r0, #8
 8012778:	f002 ff88 	bl	801568c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 801277c:	4b4a      	ldr	r3, [pc, #296]	@ (80128a8 <APP_BLE_Init+0x14c>)
 801277e:	1d3c      	adds	r4, r7, #4
 8012780:	461d      	mov	r5, r3
 8012782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801278a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801278c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801278e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8012792:	c403      	stmia	r4!, {r0, r1}
 8012794:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8012796:	f000 fba3 	bl	8012ee0 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 801279a:	2101      	movs	r1, #1
 801279c:	2002      	movs	r0, #2
 801279e:	f002 fe49 	bl	8015434 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80127a2:	4a42      	ldr	r2, [pc, #264]	@ (80128ac <APP_BLE_Init+0x150>)
 80127a4:	2100      	movs	r1, #0
 80127a6:	2004      	movs	r0, #4
 80127a8:	f002 ff70 	bl	801568c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80127ac:	1d3b      	adds	r3, r7, #4
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fe fc2a 	bl	8011008 <SHCI_C2_BLE_Init>
 80127b4:	4603      	mov	r3, r0
 80127b6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80127ba:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d012      	beq.n	80127e8 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80127c2:	483b      	ldr	r0, [pc, #236]	@ (80128b0 <APP_BLE_Init+0x154>)
 80127c4:	f7ff fa2e 	bl	8011c24 <DbgTraceGetFileName>
 80127c8:	4601      	mov	r1, r0
 80127ca:	f44f 73ae 	mov.w	r3, #348	@ 0x15c
 80127ce:	4a39      	ldr	r2, [pc, #228]	@ (80128b4 <APP_BLE_Init+0x158>)
 80127d0:	4839      	ldr	r0, [pc, #228]	@ (80128b8 <APP_BLE_Init+0x15c>)
 80127d2:	f003 f95b 	bl	8015a8c <iprintf>
 80127d6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80127da:	4619      	mov	r1, r3
 80127dc:	4837      	ldr	r0, [pc, #220]	@ (80128bc <APP_BLE_Init+0x160>)
 80127de:	f003 f955 	bl	8015a8c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80127e2:	f7f1 fa93 	bl	8003d0c <Error_Handler>
 80127e6:	e00c      	b.n	8012802 <APP_BLE_Init+0xa6>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80127e8:	4831      	ldr	r0, [pc, #196]	@ (80128b0 <APP_BLE_Init+0x154>)
 80127ea:	f7ff fa1b 	bl	8011c24 <DbgTraceGetFileName>
 80127ee:	4601      	mov	r1, r0
 80127f0:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 80127f4:	4a2f      	ldr	r2, [pc, #188]	@ (80128b4 <APP_BLE_Init+0x158>)
 80127f6:	4830      	ldr	r0, [pc, #192]	@ (80128b8 <APP_BLE_Init+0x15c>)
 80127f8:	f003 f948 	bl	8015a8c <iprintf>
 80127fc:	4830      	ldr	r0, [pc, #192]	@ (80128c0 <APP_BLE_Init+0x164>)
 80127fe:	f003 f945 	bl	8015a8c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8012802:	f000 fb83 	bl	8012f0c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8012806:	f7fe fb59 	bl	8010ebc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801280a:	4b2e      	ldr	r3, [pc, #184]	@ (80128c4 <APP_BLE_Init+0x168>)
 801280c:	2200      	movs	r2, #0
 801280e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8012812:	4b2c      	ldr	r3, [pc, #176]	@ (80128c4 <APP_BLE_Init+0x168>)
 8012814:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012818:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 801281a:	4a2b      	ldr	r2, [pc, #172]	@ (80128c8 <APP_BLE_Init+0x16c>)
 801281c:	2100      	movs	r1, #0
 801281e:	2001      	movs	r0, #1
 8012820:	f002 ff34 	bl	801568c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8012824:	2006      	movs	r0, #6
 8012826:	f7fe f91e 	bl	8010a66 <aci_hal_set_radio_activity_mask>
 801282a:	4603      	mov	r3, r0
 801282c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 8012830:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012834:	2b00      	cmp	r3, #0
 8012836:	d010      	beq.n	801285a <APP_BLE_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8012838:	481d      	ldr	r0, [pc, #116]	@ (80128b0 <APP_BLE_Init+0x154>)
 801283a:	f7ff f9f3 	bl	8011c24 <DbgTraceGetFileName>
 801283e:	4601      	mov	r1, r0
 8012840:	f44f 73c3 	mov.w	r3, #390	@ 0x186
 8012844:	4a1b      	ldr	r2, [pc, #108]	@ (80128b4 <APP_BLE_Init+0x158>)
 8012846:	481c      	ldr	r0, [pc, #112]	@ (80128b8 <APP_BLE_Init+0x15c>)
 8012848:	f003 f920 	bl	8015a8c <iprintf>
 801284c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012850:	4619      	mov	r1, r3
 8012852:	481e      	ldr	r0, [pc, #120]	@ (80128cc <APP_BLE_Init+0x170>)
 8012854:	f003 f91a 	bl	8015a8c <iprintf>
 8012858:	e00c      	b.n	8012874 <APP_BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 801285a:	4815      	ldr	r0, [pc, #84]	@ (80128b0 <APP_BLE_Init+0x154>)
 801285c:	f7ff f9e2 	bl	8011c24 <DbgTraceGetFileName>
 8012860:	4601      	mov	r1, r0
 8012862:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8012866:	4a13      	ldr	r2, [pc, #76]	@ (80128b4 <APP_BLE_Init+0x158>)
 8012868:	4813      	ldr	r0, [pc, #76]	@ (80128b8 <APP_BLE_Init+0x15c>)
 801286a:	f003 f90f 	bl	8015a8c <iprintf>
 801286e:	4818      	ldr	r0, [pc, #96]	@ (80128d0 <APP_BLE_Init+0x174>)
 8012870:	f003 f90c 	bl	8015a8c <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8012874:	4b17      	ldr	r3, [pc, #92]	@ (80128d4 <APP_BLE_Init+0x178>)
 8012876:	2200      	movs	r2, #0
 8012878:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 801287a:	4b17      	ldr	r3, [pc, #92]	@ (80128d8 <APP_BLE_Init+0x17c>)
 801287c:	2201      	movs	r2, #1
 801287e:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8012880:	f001 f8b0 	bl	80139e4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8012884:	4b0f      	ldr	r3, [pc, #60]	@ (80128c4 <APP_BLE_Init+0x168>)
 8012886:	2200      	movs	r2, #0
 8012888:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801288a:	4b0e      	ldr	r3, [pc, #56]	@ (80128c4 <APP_BLE_Init+0x168>)
 801288c:	2200      	movs	r2, #0
 801288e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8012890:	2001      	movs	r0, #1
 8012892:	f000 fdcf 	bl	8013434 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8012896:	bf00      	nop
}
 8012898:	3740      	adds	r7, #64	@ 0x40
 801289a:	46bd      	mov	sp, r7
 801289c:	bdb0      	pop	{r4, r5, r7, pc}
 801289e:	bf00      	nop
 80128a0:	080138d9 	.word	0x080138d9
 80128a4:	08013901 	.word	0x08013901
 80128a8:	080172fc 	.word	0x080172fc
 80128ac:	08011225 	.word	0x08011225
 80128b0:	080171f0 	.word	0x080171f0
 80128b4:	08018934 	.word	0x08018934
 80128b8:	0801720c 	.word	0x0801720c
 80128bc:	08017220 	.word	0x08017220
 80128c0:	08017258 	.word	0x08017258
 80128c4:	20000ff4 	.word	0x20000ff4
 80128c8:	080135b9 	.word	0x080135b9
 80128cc:	08017280 	.word	0x08017280
 80128d0:	080172c4 	.word	0x080172c4
 80128d4:	2000107c 	.word	0x2000107c
 80128d8:	2000107d 	.word	0x2000107d

080128dc <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80128dc:	b5b0      	push	{r4, r5, r7, lr}
 80128de:	b08e      	sub	sp, #56	@ 0x38
 80128e0:	af04      	add	r7, sp, #16
 80128e2:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80128e4:	2392      	movs	r3, #146	@ 0x92
 80128e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	3301      	adds	r3, #1
 80128ee:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80128f0:	6a3b      	ldr	r3, [r7, #32]
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2bff      	cmp	r3, #255	@ 0xff
 80128f6:	f000 8173 	beq.w	8012be0 <SVCCTL_App_Notification+0x304>
 80128fa:	2bff      	cmp	r3, #255	@ 0xff
 80128fc:	f300 82c0 	bgt.w	8012e80 <SVCCTL_App_Notification+0x5a4>
 8012900:	2b05      	cmp	r3, #5
 8012902:	d002      	beq.n	801290a <SVCCTL_App_Notification+0x2e>
 8012904:	2b3e      	cmp	r3, #62	@ 0x3e
 8012906:	d04a      	beq.n	801299e <SVCCTL_App_Notification+0xc2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8012908:	e2ba      	b.n	8012e80 <SVCCTL_App_Notification+0x5a4>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 801290a:	6a3b      	ldr	r3, [r7, #32]
 801290c:	3302      	adds	r3, #2
 801290e:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012916:	b29a      	uxth	r2, r3
 8012918:	4ba1      	ldr	r3, [pc, #644]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 801291a:	8adb      	ldrh	r3, [r3, #22]
 801291c:	429a      	cmp	r2, r3
 801291e:	d12d      	bne.n	801297c <SVCCTL_App_Notification+0xa0>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8012920:	4b9f      	ldr	r3, [pc, #636]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 8012922:	2200      	movs	r2, #0
 8012924:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012926:	4b9e      	ldr	r3, [pc, #632]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 8012928:	2200      	movs	r2, #0
 801292a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 801292e:	489d      	ldr	r0, [pc, #628]	@ (8012ba4 <SVCCTL_App_Notification+0x2c8>)
 8012930:	f7ff f978 	bl	8011c24 <DbgTraceGetFileName>
 8012934:	4601      	mov	r1, r0
 8012936:	f44f 73e7 	mov.w	r3, #462	@ 0x1ce
 801293a:	4a9b      	ldr	r2, [pc, #620]	@ (8012ba8 <SVCCTL_App_Notification+0x2cc>)
 801293c:	489b      	ldr	r0, [pc, #620]	@ (8012bac <SVCCTL_App_Notification+0x2d0>)
 801293e:	f003 f8a5 	bl	8015a8c <iprintf>
 8012942:	489b      	ldr	r0, [pc, #620]	@ (8012bb0 <SVCCTL_App_Notification+0x2d4>)
 8012944:	f003 f912 	bl	8015b6c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8012948:	4896      	ldr	r0, [pc, #600]	@ (8012ba4 <SVCCTL_App_Notification+0x2c8>)
 801294a:	f7ff f96b 	bl	8011c24 <DbgTraceGetFileName>
 801294e:	4601      	mov	r1, r0
 8012950:	f240 13cf 	movw	r3, #463	@ 0x1cf
 8012954:	4a94      	ldr	r2, [pc, #592]	@ (8012ba8 <SVCCTL_App_Notification+0x2cc>)
 8012956:	4895      	ldr	r0, [pc, #596]	@ (8012bac <SVCCTL_App_Notification+0x2d0>)
 8012958:	f003 f898 	bl	8015a8c <iprintf>
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012962:	b29b      	uxth	r3, r3
 8012964:	4619      	mov	r1, r3
 8012966:	68bb      	ldr	r3, [r7, #8]
 8012968:	78db      	ldrb	r3, [r3, #3]
 801296a:	461a      	mov	r2, r3
 801296c:	4891      	ldr	r0, [pc, #580]	@ (8012bb4 <SVCCTL_App_Notification+0x2d8>)
 801296e:	f003 f88d 	bl	8015a8c <iprintf>
        tsBle.Connected = false;
 8012972:	4b91      	ldr	r3, [pc, #580]	@ (8012bb8 <SVCCTL_App_Notification+0x2dc>)
 8012974:	2200      	movs	r2, #0
 8012976:	701a      	strb	r2, [r3, #0]
			APP_BLE_Init();
 8012978:	f7ff fef0 	bl	801275c <APP_BLE_Init>
      Adv_Request(APP_BLE_FAST_ADV);
 801297c:	2001      	movs	r0, #1
 801297e:	f000 fd59 	bl	8013434 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8012982:	4b8e      	ldr	r3, [pc, #568]	@ (8012bbc <SVCCTL_App_Notification+0x2e0>)
 8012984:	2201      	movs	r2, #1
 8012986:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012988:	4b85      	ldr	r3, [pc, #532]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 801298a:	8ada      	ldrh	r2, [r3, #22]
 801298c:	4b8b      	ldr	r3, [pc, #556]	@ (8012bbc <SVCCTL_App_Notification+0x2e0>)
 801298e:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8012990:	488a      	ldr	r0, [pc, #552]	@ (8012bbc <SVCCTL_App_Notification+0x2e0>)
 8012992:	f001 f813 	bl	80139bc <Custom_APP_Notification>
      tsCmd.LED = false;
 8012996:	4b8a      	ldr	r3, [pc, #552]	@ (8012bc0 <SVCCTL_App_Notification+0x2e4>)
 8012998:	2200      	movs	r2, #0
 801299a:	75da      	strb	r2, [r3, #23]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801299c:	e273      	b.n	8012e86 <SVCCTL_App_Notification+0x5aa>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801299e:	6a3b      	ldr	r3, [r7, #32]
 80129a0:	3302      	adds	r3, #2
 80129a2:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80129a4:	697b      	ldr	r3, [r7, #20]
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	2b01      	cmp	r3, #1
 80129aa:	d06c      	beq.n	8012a86 <SVCCTL_App_Notification+0x1aa>
 80129ac:	2b03      	cmp	r3, #3
 80129ae:	f040 80f4 	bne.w	8012b9a <SVCCTL_App_Notification+0x2be>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80129b2:	697b      	ldr	r3, [r7, #20]
 80129b4:	3301      	adds	r3, #1
 80129b6:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80129b8:	487a      	ldr	r0, [pc, #488]	@ (8012ba4 <SVCCTL_App_Notification+0x2c8>)
 80129ba:	f7ff f933 	bl	8011c24 <DbgTraceGetFileName>
 80129be:	4601      	mov	r1, r0
 80129c0:	f240 2303 	movw	r3, #515	@ 0x203
 80129c4:	4a78      	ldr	r2, [pc, #480]	@ (8012ba8 <SVCCTL_App_Notification+0x2cc>)
 80129c6:	4879      	ldr	r0, [pc, #484]	@ (8012bac <SVCCTL_App_Notification+0x2d0>)
 80129c8:	f003 f860 	bl	8015a8c <iprintf>
 80129cc:	487d      	ldr	r0, [pc, #500]	@ (8012bc4 <SVCCTL_App_Notification+0x2e8>)
 80129ce:	f003 f8cd 	bl	8015b6c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80129d2:	4874      	ldr	r0, [pc, #464]	@ (8012ba4 <SVCCTL_App_Notification+0x2c8>)
 80129d4:	f7ff f926 	bl	8011c24 <DbgTraceGetFileName>
 80129d8:	4601      	mov	r1, r0
 80129da:	f44f 7301 	mov.w	r3, #516	@ 0x204
 80129de:	4a72      	ldr	r2, [pc, #456]	@ (8012ba8 <SVCCTL_App_Notification+0x2cc>)
 80129e0:	4872      	ldr	r0, [pc, #456]	@ (8012bac <SVCCTL_App_Notification+0x2d0>)
 80129e2:	f003 f853 	bl	8015a8c <iprintf>
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7ed fd70 	bl	80004d4 <__aeabi_i2d>
 80129f4:	f04f 0200 	mov.w	r2, #0
 80129f8:	4b73      	ldr	r3, [pc, #460]	@ (8012bc8 <SVCCTL_App_Notification+0x2ec>)
 80129fa:	f7ed fdd5 	bl	80005a8 <__aeabi_dmul>
 80129fe:	4602      	mov	r2, r0
 8012a00:	460b      	mov	r3, r1
 8012a02:	4610      	mov	r0, r2
 8012a04:	4619      	mov	r1, r3
 8012a06:	693b      	ldr	r3, [r7, #16]
 8012a08:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	461c      	mov	r4, r3
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	461a      	mov	r2, r3
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	4413      	add	r3, r2
 8012a20:	005b      	lsls	r3, r3, #1
 8012a22:	9301      	str	r3, [sp, #4]
 8012a24:	9400      	str	r4, [sp, #0]
 8012a26:	4602      	mov	r2, r0
 8012a28:	460b      	mov	r3, r1
 8012a2a:	4868      	ldr	r0, [pc, #416]	@ (8012bcc <SVCCTL_App_Notification+0x2f0>)
 8012a2c:	f003 f82e 	bl	8015a8c <iprintf>
          DIAG(" BLE Debug ->\t>>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8012a30:	4867      	ldr	r0, [pc, #412]	@ (8012bd0 <SVCCTL_App_Notification+0x2f4>)
 8012a32:	f7ef fd79 	bl	8002528 <DIAG>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012a3c:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012a3e:	4618      	mov	r0, r3
 8012a40:	f7ed fd48 	bl	80004d4 <__aeabi_i2d>
 8012a44:	f04f 0200 	mov.w	r2, #0
 8012a48:	4b5f      	ldr	r3, [pc, #380]	@ (8012bc8 <SVCCTL_App_Notification+0x2ec>)
 8012a4a:	f7ed fdad 	bl	80005a8 <__aeabi_dmul>
 8012a4e:	4602      	mov	r2, r0
 8012a50:	460b      	mov	r3, r1
 8012a52:	4610      	mov	r0, r2
 8012a54:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8012a56:	693b      	ldr	r3, [r7, #16]
 8012a58:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8012a5c:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012a5e:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8012a60:	693b      	ldr	r3, [r7, #16]
 8012a62:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8012a66:	b29b      	uxth	r3, r3
 8012a68:	461a      	mov	r2, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4413      	add	r3, r2
 8012a70:	005b      	lsls	r3, r3, #1
 8012a72:	9301      	str	r3, [sp, #4]
 8012a74:	9400      	str	r4, [sp, #0]
 8012a76:	4602      	mov	r2, r0
 8012a78:	460b      	mov	r3, r1
 8012a7a:	4856      	ldr	r0, [pc, #344]	@ (8012bd4 <SVCCTL_App_Notification+0x2f8>)
 8012a7c:	f7ef fd54 	bl	8002528 <DIAG>
          Connection_Interval_Update_Req();
 8012a80:	f000 feba 	bl	80137f8 <Connection_Interval_Update_Req>
          break;
 8012a84:	e08a      	b.n	8012b9c <SVCCTL_App_Notification+0x2c0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	3301      	adds	r3, #1
 8012a8a:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8012a8c:	4845      	ldr	r0, [pc, #276]	@ (8012ba4 <SVCCTL_App_Notification+0x2c8>)
 8012a8e:	f7ff f8c9 	bl	8011c24 <DbgTraceGetFileName>
 8012a92:	4601      	mov	r1, r0
 8012a94:	f240 231f 	movw	r3, #543	@ 0x21f
 8012a98:	4a43      	ldr	r2, [pc, #268]	@ (8012ba8 <SVCCTL_App_Notification+0x2cc>)
 8012a9a:	4844      	ldr	r0, [pc, #272]	@ (8012bac <SVCCTL_App_Notification+0x2d0>)
 8012a9c:	f002 fff6 	bl	8015a8c <iprintf>
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012aa6:	b29b      	uxth	r3, r3
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	484b      	ldr	r0, [pc, #300]	@ (8012bd8 <SVCCTL_App_Notification+0x2fc>)
 8012aac:	f002 ffee 	bl	8015a8c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8012ab0:	483c      	ldr	r0, [pc, #240]	@ (8012ba4 <SVCCTL_App_Notification+0x2c8>)
 8012ab2:	f7ff f8b7 	bl	8011c24 <DbgTraceGetFileName>
 8012ab6:	4601      	mov	r1, r0
 8012ab8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8012abc:	4a3a      	ldr	r2, [pc, #232]	@ (8012ba8 <SVCCTL_App_Notification+0x2cc>)
 8012abe:	483b      	ldr	r0, [pc, #236]	@ (8012bac <SVCCTL_App_Notification+0x2d0>)
 8012ac0:	f002 ffe4 	bl	8015a8c <iprintf>
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	7a9b      	ldrb	r3, [r3, #10]
 8012ac8:	4618      	mov	r0, r3
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	7a5b      	ldrb	r3, [r3, #9]
 8012ace:	461c      	mov	r4, r3
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	7a1b      	ldrb	r3, [r3, #8]
 8012ad4:	461d      	mov	r5, r3
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	79db      	ldrb	r3, [r3, #7]
 8012ada:	461a      	mov	r2, r3
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	799b      	ldrb	r3, [r3, #6]
 8012ae0:	4619      	mov	r1, r3
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	795b      	ldrb	r3, [r3, #5]
 8012ae6:	9302      	str	r3, [sp, #8]
 8012ae8:	9101      	str	r1, [sp, #4]
 8012aea:	9200      	str	r2, [sp, #0]
 8012aec:	462b      	mov	r3, r5
 8012aee:	4622      	mov	r2, r4
 8012af0:	4601      	mov	r1, r0
 8012af2:	483a      	ldr	r0, [pc, #232]	@ (8012bdc <SVCCTL_App_Notification+0x300>)
 8012af4:	f002 ffca 	bl	8015a8c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8012af8:	482a      	ldr	r0, [pc, #168]	@ (8012ba4 <SVCCTL_App_Notification+0x2c8>)
 8012afa:	f7ff f893 	bl	8011c24 <DbgTraceGetFileName>
 8012afe:	4601      	mov	r1, r0
 8012b00:	f240 2327 	movw	r3, #551	@ 0x227
 8012b04:	4a28      	ldr	r2, [pc, #160]	@ (8012ba8 <SVCCTL_App_Notification+0x2cc>)
 8012b06:	4829      	ldr	r0, [pc, #164]	@ (8012bac <SVCCTL_App_Notification+0x2d0>)
 8012b08:	f002 ffc0 	bl	8015a8c <iprintf>
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8012b12:	b29b      	uxth	r3, r3
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7ed fcdd 	bl	80004d4 <__aeabi_i2d>
 8012b1a:	f04f 0200 	mov.w	r2, #0
 8012b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8012bc8 <SVCCTL_App_Notification+0x2ec>)
 8012b20:	f7ed fd42 	bl	80005a8 <__aeabi_dmul>
 8012b24:	4602      	mov	r2, r0
 8012b26:	460b      	mov	r3, r1
 8012b28:	4610      	mov	r0, r2
 8012b2a:	4619      	mov	r1, r3
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	461c      	mov	r4, r3
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8012b3c:	b29b      	uxth	r3, r3
 8012b3e:	461a      	mov	r2, r3
 8012b40:	4613      	mov	r3, r2
 8012b42:	009b      	lsls	r3, r3, #2
 8012b44:	4413      	add	r3, r2
 8012b46:	005b      	lsls	r3, r3, #1
 8012b48:	9301      	str	r3, [sp, #4]
 8012b4a:	9400      	str	r4, [sp, #0]
 8012b4c:	4602      	mov	r2, r0
 8012b4e:	460b      	mov	r3, r1
 8012b50:	481e      	ldr	r0, [pc, #120]	@ (8012bcc <SVCCTL_App_Notification+0x2f0>)
 8012b52:	f002 ff9b 	bl	8015a8c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8012b56:	4b12      	ldr	r3, [pc, #72]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 8012b58:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012b5c:	2b04      	cmp	r3, #4
 8012b5e:	d104      	bne.n	8012b6a <SVCCTL_App_Notification+0x28e>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8012b60:	4b0f      	ldr	r3, [pc, #60]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 8012b62:	2206      	movs	r2, #6
 8012b64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8012b68:	e003      	b.n	8012b72 <SVCCTL_App_Notification+0x296>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8012b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 8012b6c:	2205      	movs	r2, #5
 8012b6e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012b78:	b29a      	uxth	r2, r3
 8012b7a:	4b09      	ldr	r3, [pc, #36]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 8012b7c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8012b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8012bbc <SVCCTL_App_Notification+0x2e0>)
 8012b80:	2200      	movs	r2, #0
 8012b82:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012b84:	4b06      	ldr	r3, [pc, #24]	@ (8012ba0 <SVCCTL_App_Notification+0x2c4>)
 8012b86:	8ada      	ldrh	r2, [r3, #22]
 8012b88:	4b0c      	ldr	r3, [pc, #48]	@ (8012bbc <SVCCTL_App_Notification+0x2e0>)
 8012b8a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8012b8c:	480b      	ldr	r0, [pc, #44]	@ (8012bbc <SVCCTL_App_Notification+0x2e0>)
 8012b8e:	f000 ff15 	bl	80139bc <Custom_APP_Notification>
          tsBle.Connected = true;
 8012b92:	4b09      	ldr	r3, [pc, #36]	@ (8012bb8 <SVCCTL_App_Notification+0x2dc>)
 8012b94:	2201      	movs	r2, #1
 8012b96:	701a      	strb	r2, [r3, #0]
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8012b98:	e000      	b.n	8012b9c <SVCCTL_App_Notification+0x2c0>
          break;
 8012b9a:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8012b9c:	e173      	b.n	8012e86 <SVCCTL_App_Notification+0x5aa>
 8012b9e:	bf00      	nop
 8012ba0:	20000ff4 	.word	0x20000ff4
 8012ba4:	080171f0 	.word	0x080171f0
 8012ba8:	08018944 	.word	0x08018944
 8012bac:	0801720c 	.word	0x0801720c
 8012bb0:	08017338 	.word	0x08017338
 8012bb4:	08017364 	.word	0x08017364
 8012bb8:	20000fe0 	.word	0x20000fe0
 8012bbc:	20001078 	.word	0x20001078
 8012bc0:	20000ca0 	.word	0x20000ca0
 8012bc4:	080173a0 	.word	0x080173a0
 8012bc8:	3ff40000 	.word	0x3ff40000
 8012bcc:	080173d4 	.word	0x080173d4
 8012bd0:	08017440 	.word	0x08017440
 8012bd4:	08017484 	.word	0x08017484
 8012bd8:	080174e4 	.word	0x080174e4
 8012bdc:	0801752c 	.word	0x0801752c
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8012be0:	6a3b      	ldr	r3, [r7, #32]
 8012be2:	3302      	adds	r3, #2
 8012be4:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	b29b      	uxth	r3, r3
 8012bec:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	f000 8130 	beq.w	8012e56 <SVCCTL_App_Notification+0x57a>
 8012bf6:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012bfa:	4293      	cmp	r3, r2
 8012bfc:	f300 8142 	bgt.w	8012e84 <SVCCTL_App_Notification+0x5a8>
 8012c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c04:	d02e      	beq.n	8012c64 <SVCCTL_App_Notification+0x388>
 8012c06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012c0a:	f300 813b 	bgt.w	8012e84 <SVCCTL_App_Notification+0x5a8>
 8012c0e:	2b04      	cmp	r3, #4
 8012c10:	f000 8134 	beq.w	8012e7c <SVCCTL_App_Notification+0x5a0>
 8012c14:	2b04      	cmp	r3, #4
 8012c16:	f2c0 8135 	blt.w	8012e84 <SVCCTL_App_Notification+0x5a8>
 8012c1a:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012c1e:	4293      	cmp	r3, r2
 8012c20:	f300 8130 	bgt.w	8012e84 <SVCCTL_App_Notification+0x5a8>
 8012c24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012c28:	f340 812c 	ble.w	8012e84 <SVCCTL_App_Notification+0x5a8>
 8012c2c:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8012c30:	2b09      	cmp	r3, #9
 8012c32:	f200 8127 	bhi.w	8012e84 <SVCCTL_App_Notification+0x5a8>
 8012c36:	a201      	add	r2, pc, #4	@ (adr r2, 8012c3c <SVCCTL_App_Notification+0x360>)
 8012c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c3c:	08012dd1 	.word	0x08012dd1
 8012c40:	08012ca5 	.word	0x08012ca5
 8012c44:	08012e85 	.word	0x08012e85
 8012c48:	08012e85 	.word	0x08012e85
 8012c4c:	08012e85 	.word	0x08012e85
 8012c50:	08012e85 	.word	0x08012e85
 8012c54:	08012c6d 	.word	0x08012c6d
 8012c58:	08012e85 	.word	0x08012e85
 8012c5c:	08012d17 	.word	0x08012d17
 8012c60:	08012c89 	.word	0x08012c89
          mutex = 1;
 8012c64:	4b8a      	ldr	r3, [pc, #552]	@ (8012e90 <SVCCTL_App_Notification+0x5b4>)
 8012c66:	2201      	movs	r2, #1
 8012c68:	701a      	strb	r2, [r3, #0]
          break;
 8012c6a:	e108      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8012c6c:	4889      	ldr	r0, [pc, #548]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012c6e:	f7fe ffd9 	bl	8011c24 <DbgTraceGetFileName>
 8012c72:	4601      	mov	r1, r0
 8012c74:	f240 237f 	movw	r3, #639	@ 0x27f
 8012c78:	4a87      	ldr	r2, [pc, #540]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012c7a:	4888      	ldr	r0, [pc, #544]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012c7c:	f002 ff06 	bl	8015a8c <iprintf>
 8012c80:	4887      	ldr	r0, [pc, #540]	@ (8012ea0 <SVCCTL_App_Notification+0x5c4>)
 8012c82:	f002 ff03 	bl	8015a8c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8012c86:	e0fa      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8012c88:	4882      	ldr	r0, [pc, #520]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012c8a:	f7fe ffcb 	bl	8011c24 <DbgTraceGetFileName>
 8012c8e:	4601      	mov	r1, r0
 8012c90:	f240 238f 	movw	r3, #655	@ 0x28f
 8012c94:	4a80      	ldr	r2, [pc, #512]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012c96:	4881      	ldr	r0, [pc, #516]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012c98:	f002 fef8 	bl	8015a8c <iprintf>
 8012c9c:	4881      	ldr	r0, [pc, #516]	@ (8012ea4 <SVCCTL_App_Notification+0x5c8>)
 8012c9e:	f002 ff65 	bl	8015b6c <puts>
          break;
 8012ca2:	e0ec      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8012ca4:	487b      	ldr	r0, [pc, #492]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012ca6:	f7fe ffbd 	bl	8011c24 <DbgTraceGetFileName>
 8012caa:	4601      	mov	r1, r0
 8012cac:	f240 2396 	movw	r3, #662	@ 0x296
 8012cb0:	4a79      	ldr	r2, [pc, #484]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012cb2:	487a      	ldr	r0, [pc, #488]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012cb4:	f002 feea 	bl	8015a8c <iprintf>
 8012cb8:	487b      	ldr	r0, [pc, #492]	@ (8012ea8 <SVCCTL_App_Notification+0x5cc>)
 8012cba:	f002 ff57 	bl	8015b6c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8012cbe:	4b7b      	ldr	r3, [pc, #492]	@ (8012eac <SVCCTL_App_Notification+0x5d0>)
 8012cc0:	8adb      	ldrh	r3, [r3, #22]
 8012cc2:	497b      	ldr	r1, [pc, #492]	@ (8012eb0 <SVCCTL_App_Notification+0x5d4>)
 8012cc4:	4618      	mov	r0, r3
 8012cc6:	f7fd f87b 	bl	800fdc0 <aci_gap_pass_key_resp>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8012cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d010      	beq.n	8012cfa <SVCCTL_App_Notification+0x41e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8012cd8:	486e      	ldr	r0, [pc, #440]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012cda:	f7fe ffa3 	bl	8011c24 <DbgTraceGetFileName>
 8012cde:	4601      	mov	r1, r0
 8012ce0:	f240 239b 	movw	r3, #667	@ 0x29b
 8012ce4:	4a6c      	ldr	r2, [pc, #432]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012ce6:	486d      	ldr	r0, [pc, #436]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012ce8:	f002 fed0 	bl	8015a8c <iprintf>
 8012cec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012cf0:	4619      	mov	r1, r3
 8012cf2:	4870      	ldr	r0, [pc, #448]	@ (8012eb4 <SVCCTL_App_Notification+0x5d8>)
 8012cf4:	f002 feca 	bl	8015a8c <iprintf>
          break;
 8012cf8:	e0c1      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8012cfa:	4866      	ldr	r0, [pc, #408]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012cfc:	f7fe ff92 	bl	8011c24 <DbgTraceGetFileName>
 8012d00:	4601      	mov	r1, r0
 8012d02:	f240 239f 	movw	r3, #671	@ 0x29f
 8012d06:	4a64      	ldr	r2, [pc, #400]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012d08:	4864      	ldr	r0, [pc, #400]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012d0a:	f002 febf 	bl	8015a8c <iprintf>
 8012d0e:	486a      	ldr	r0, [pc, #424]	@ (8012eb8 <SVCCTL_App_Notification+0x5dc>)
 8012d10:	f002 ff2c 	bl	8015b6c <puts>
          break;
 8012d14:	e0b3      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8012d16:	485f      	ldr	r0, [pc, #380]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012d18:	f7fe ff84 	bl	8011c24 <DbgTraceGetFileName>
 8012d1c:	4601      	mov	r1, r0
 8012d1e:	f240 23a7 	movw	r3, #679	@ 0x2a7
 8012d22:	4a5d      	ldr	r2, [pc, #372]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012d24:	485d      	ldr	r0, [pc, #372]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012d26:	f002 feb1 	bl	8015a8c <iprintf>
 8012d2a:	4864      	ldr	r0, [pc, #400]	@ (8012ebc <SVCCTL_App_Notification+0x5e0>)
 8012d2c:	f002 ff1e 	bl	8015b6c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8012d30:	4858      	ldr	r0, [pc, #352]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012d32:	f7fe ff77 	bl	8011c24 <DbgTraceGetFileName>
 8012d36:	4601      	mov	r1, r0
 8012d38:	f44f 732a 	mov.w	r3, #680	@ 0x2a8
 8012d3c:	4a56      	ldr	r2, [pc, #344]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012d3e:	4857      	ldr	r0, [pc, #348]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012d40:	f002 fea4 	bl	8015a8c <iprintf>
 8012d44:	69fb      	ldr	r3, [r7, #28]
 8012d46:	3302      	adds	r3, #2
 8012d48:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012d4c:	4619      	mov	r1, r3
 8012d4e:	485c      	ldr	r0, [pc, #368]	@ (8012ec0 <SVCCTL_App_Notification+0x5e4>)
 8012d50:	f002 fe9c 	bl	8015a8c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8012d54:	484f      	ldr	r0, [pc, #316]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012d56:	f7fe ff65 	bl	8011c24 <DbgTraceGetFileName>
 8012d5a:	4601      	mov	r1, r0
 8012d5c:	f240 23aa 	movw	r3, #682	@ 0x2aa
 8012d60:	4a4d      	ldr	r2, [pc, #308]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012d62:	484e      	ldr	r0, [pc, #312]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012d64:	f002 fe92 	bl	8015a8c <iprintf>
 8012d68:	69fb      	ldr	r3, [r7, #28]
 8012d6a:	3302      	adds	r3, #2
 8012d6c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012d70:	4619      	mov	r1, r3
 8012d72:	4854      	ldr	r0, [pc, #336]	@ (8012ec4 <SVCCTL_App_Notification+0x5e8>)
 8012d74:	f002 fe8a 	bl	8015a8c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8012d78:	4b4c      	ldr	r3, [pc, #304]	@ (8012eac <SVCCTL_App_Notification+0x5d0>)
 8012d7a:	8adb      	ldrh	r3, [r3, #22]
 8012d7c:	2101      	movs	r1, #1
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7fd f9c8 	bl	8010114 <aci_gap_numeric_comparison_value_confirm_yesno>
 8012d84:	4603      	mov	r3, r0
 8012d86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8012d8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d010      	beq.n	8012db4 <SVCCTL_App_Notification+0x4d8>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8012d92:	4840      	ldr	r0, [pc, #256]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012d94:	f7fe ff46 	bl	8011c24 <DbgTraceGetFileName>
 8012d98:	4601      	mov	r1, r0
 8012d9a:	f240 23af 	movw	r3, #687	@ 0x2af
 8012d9e:	4a3e      	ldr	r2, [pc, #248]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012da0:	483e      	ldr	r0, [pc, #248]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012da2:	f002 fe73 	bl	8015a8c <iprintf>
 8012da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012daa:	4619      	mov	r1, r3
 8012dac:	4846      	ldr	r0, [pc, #280]	@ (8012ec8 <SVCCTL_App_Notification+0x5ec>)
 8012dae:	f002 fe6d 	bl	8015a8c <iprintf>
          break;
 8012db2:	e064      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8012db4:	4837      	ldr	r0, [pc, #220]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012db6:	f7fe ff35 	bl	8011c24 <DbgTraceGetFileName>
 8012dba:	4601      	mov	r1, r0
 8012dbc:	f240 23b3 	movw	r3, #691	@ 0x2b3
 8012dc0:	4a35      	ldr	r2, [pc, #212]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012dc2:	4836      	ldr	r0, [pc, #216]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012dc4:	f002 fe62 	bl	8015a8c <iprintf>
 8012dc8:	4840      	ldr	r0, [pc, #256]	@ (8012ecc <SVCCTL_App_Notification+0x5f0>)
 8012dca:	f002 fecf 	bl	8015b6c <puts>
          break;
 8012dce:	e056      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8012dd0:	69fb      	ldr	r3, [r7, #28]
 8012dd2:	3302      	adds	r3, #2
 8012dd4:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8012dd6:	482f      	ldr	r0, [pc, #188]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012dd8:	f7fe ff24 	bl	8011c24 <DbgTraceGetFileName>
 8012ddc:	4601      	mov	r1, r0
 8012dde:	f240 23bd 	movw	r3, #701	@ 0x2bd
 8012de2:	4a2d      	ldr	r2, [pc, #180]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012de4:	482d      	ldr	r0, [pc, #180]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012de6:	f002 fe51 	bl	8015a8c <iprintf>
 8012dea:	4839      	ldr	r0, [pc, #228]	@ (8012ed0 <SVCCTL_App_Notification+0x5f4>)
 8012dec:	f002 febe 	bl	8015b6c <puts>
          if (p_pairing_complete->Status != 0)
 8012df0:	69bb      	ldr	r3, [r7, #24]
 8012df2:	789b      	ldrb	r3, [r3, #2]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d013      	beq.n	8012e20 <SVCCTL_App_Notification+0x544>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8012df8:	4826      	ldr	r0, [pc, #152]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012dfa:	f7fe ff13 	bl	8011c24 <DbgTraceGetFileName>
 8012dfe:	4601      	mov	r1, r0
 8012e00:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8012e04:	4a24      	ldr	r2, [pc, #144]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012e06:	4825      	ldr	r0, [pc, #148]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012e08:	f002 fe40 	bl	8015a8c <iprintf>
 8012e0c:	69bb      	ldr	r3, [r7, #24]
 8012e0e:	789b      	ldrb	r3, [r3, #2]
 8012e10:	4619      	mov	r1, r3
 8012e12:	69bb      	ldr	r3, [r7, #24]
 8012e14:	78db      	ldrb	r3, [r3, #3]
 8012e16:	461a      	mov	r2, r3
 8012e18:	482e      	ldr	r0, [pc, #184]	@ (8012ed4 <SVCCTL_App_Notification+0x5f8>)
 8012e1a:	f002 fe37 	bl	8015a8c <iprintf>
 8012e1e:	e00c      	b.n	8012e3a <SVCCTL_App_Notification+0x55e>
            APP_DBG_MSG("     - Pairing Success\n");
 8012e20:	481c      	ldr	r0, [pc, #112]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012e22:	f7fe feff 	bl	8011c24 <DbgTraceGetFileName>
 8012e26:	4601      	mov	r1, r0
 8012e28:	f44f 7331 	mov.w	r3, #708	@ 0x2c4
 8012e2c:	4a1a      	ldr	r2, [pc, #104]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012e2e:	481b      	ldr	r0, [pc, #108]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012e30:	f002 fe2c 	bl	8015a8c <iprintf>
 8012e34:	4828      	ldr	r0, [pc, #160]	@ (8012ed8 <SVCCTL_App_Notification+0x5fc>)
 8012e36:	f002 fe99 	bl	8015b6c <puts>
          APP_DBG_MSG("\n");
 8012e3a:	4816      	ldr	r0, [pc, #88]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012e3c:	f7fe fef2 	bl	8011c24 <DbgTraceGetFileName>
 8012e40:	4601      	mov	r1, r0
 8012e42:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8012e46:	4a14      	ldr	r2, [pc, #80]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012e48:	4814      	ldr	r0, [pc, #80]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012e4a:	f002 fe1f 	bl	8015a8c <iprintf>
 8012e4e:	200a      	movs	r0, #10
 8012e50:	f002 fe2e 	bl	8015ab0 <putchar>
          break;
 8012e54:	e013      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8012e56:	480f      	ldr	r0, [pc, #60]	@ (8012e94 <SVCCTL_App_Notification+0x5b8>)
 8012e58:	f7fe fee4 	bl	8011c24 <DbgTraceGetFileName>
 8012e5c:	4601      	mov	r1, r0
 8012e5e:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8012e62:	4a0d      	ldr	r2, [pc, #52]	@ (8012e98 <SVCCTL_App_Notification+0x5bc>)
 8012e64:	480d      	ldr	r0, [pc, #52]	@ (8012e9c <SVCCTL_App_Notification+0x5c0>)
 8012e66:	f002 fe11 	bl	8015a8c <iprintf>
 8012e6a:	481c      	ldr	r0, [pc, #112]	@ (8012edc <SVCCTL_App_Notification+0x600>)
 8012e6c:	f002 fe0e 	bl	8015a8c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8012e70:	4b0e      	ldr	r3, [pc, #56]	@ (8012eac <SVCCTL_App_Notification+0x5d0>)
 8012e72:	8adb      	ldrh	r3, [r3, #22]
 8012e74:	4618      	mov	r0, r3
 8012e76:	f7fd fc60 	bl	801073a <aci_gatt_confirm_indication>
        break;
 8012e7a:	e000      	b.n	8012e7e <SVCCTL_App_Notification+0x5a2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8012e7c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012e7e:	e001      	b.n	8012e84 <SVCCTL_App_Notification+0x5a8>
      break;
 8012e80:	bf00      	nop
 8012e82:	e000      	b.n	8012e86 <SVCCTL_App_Notification+0x5aa>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012e84:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8012e86:	2301      	movs	r3, #1
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	3728      	adds	r7, #40	@ 0x28
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8012e90:	2000107d 	.word	0x2000107d
 8012e94:	080171f0 	.word	0x080171f0
 8012e98:	08018944 	.word	0x08018944
 8012e9c:	0801720c 	.word	0x0801720c
 8012ea0:	0801757c 	.word	0x0801757c
 8012ea4:	080175a4 	.word	0x080175a4
 8012ea8:	080175d4 	.word	0x080175d4
 8012eac:	20000ff4 	.word	0x20000ff4
 8012eb0:	0001b207 	.word	0x0001b207
 8012eb4:	080175fc 	.word	0x080175fc
 8012eb8:	08017630 	.word	0x08017630
 8012ebc:	08017658 	.word	0x08017658
 8012ec0:	0801768c 	.word	0x0801768c
 8012ec4:	080176a8 	.word	0x080176a8
 8012ec8:	080176c0 	.word	0x080176c0
 8012ecc:	08017710 	.word	0x08017710
 8012ed0:	08017758 	.word	0x08017758
 8012ed4:	08017784 	.word	0x08017784
 8012ed8:	080177c0 	.word	0x080177c0
 8012edc:	080177d8 	.word	0x080177d8

08012ee0 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b082      	sub	sp, #8
 8012ee4:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8012ee6:	4b06      	ldr	r3, [pc, #24]	@ (8012f00 <Ble_Tl_Init+0x20>)
 8012ee8:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8012eea:	4b06      	ldr	r3, [pc, #24]	@ (8012f04 <Ble_Tl_Init+0x24>)
 8012eec:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8012eee:	463b      	mov	r3, r7
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	4805      	ldr	r0, [pc, #20]	@ (8012f08 <Ble_Tl_Init+0x28>)
 8012ef4:	f7fe f97a 	bl	80111ec <hci_init>

  return;
 8012ef8:	bf00      	nop
}
 8012efa:	3708      	adds	r7, #8
 8012efc:	46bd      	mov	sp, r7
 8012efe:	bd80      	pop	{r7, pc}
 8012f00:	200300d8 	.word	0x200300d8
 8012f04:	080138a1 	.word	0x080138a1
 8012f08:	08013869 	.word	0x08013869

08012f0c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8012f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012f0e:	b08d      	sub	sp, #52	@ 0x34
 8012f10:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8012f12:	2300      	movs	r3, #0
 8012f14:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8012f16:	2392      	movs	r3, #146	@ 0x92
 8012f18:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8012f1a:	48a3      	ldr	r0, [pc, #652]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f1c:	f7fe fe82 	bl	8011c24 <DbgTraceGetFileName>
 8012f20:	4601      	mov	r1, r0
 8012f22:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8012f26:	4aa1      	ldr	r2, [pc, #644]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f28:	48a1      	ldr	r0, [pc, #644]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f2a:	f002 fdaf 	bl	8015a8c <iprintf>
 8012f2e:	48a1      	ldr	r0, [pc, #644]	@ (80131b4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8012f30:	f002 fe1c 	bl	8015b6c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8012f34:	f7fd fdeb 	bl	8010b0e <hci_reset>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012f3c:	7dfb      	ldrb	r3, [r7, #23]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d00f      	beq.n	8012f62 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8012f42:	4899      	ldr	r0, [pc, #612]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f44:	f7fe fe6e 	bl	8011c24 <DbgTraceGetFileName>
 8012f48:	4601      	mov	r1, r0
 8012f4a:	f240 3315 	movw	r3, #789	@ 0x315
 8012f4e:	4a97      	ldr	r2, [pc, #604]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f50:	4897      	ldr	r0, [pc, #604]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f52:	f002 fd9b 	bl	8015a8c <iprintf>
 8012f56:	7dfb      	ldrb	r3, [r7, #23]
 8012f58:	4619      	mov	r1, r3
 8012f5a:	4897      	ldr	r0, [pc, #604]	@ (80131b8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8012f5c:	f002 fd96 	bl	8015a8c <iprintf>
 8012f60:	e00c      	b.n	8012f7c <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8012f62:	4891      	ldr	r0, [pc, #580]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f64:	f7fe fe5e 	bl	8011c24 <DbgTraceGetFileName>
 8012f68:	4601      	mov	r1, r0
 8012f6a:	f240 3319 	movw	r3, #793	@ 0x319
 8012f6e:	4a8f      	ldr	r2, [pc, #572]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012f70:	488f      	ldr	r0, [pc, #572]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012f72:	f002 fd8b 	bl	8015a8c <iprintf>
 8012f76:	4891      	ldr	r0, [pc, #580]	@ (80131bc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8012f78:	f002 fdf8 	bl	8015b6c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8012f7c:	f000 fad8 	bl	8013530 <BleGetBdAddress>
 8012f80:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8012f82:	693a      	ldr	r2, [r7, #16]
 8012f84:	2106      	movs	r1, #6
 8012f86:	2000      	movs	r0, #0
 8012f88:	f7fd fc81 	bl	801088e <aci_hal_write_config_data>
 8012f8c:	4603      	mov	r3, r0
 8012f8e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8012f90:	7dfb      	ldrb	r3, [r7, #23]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d00f      	beq.n	8012fb6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8012f96:	4884      	ldr	r0, [pc, #528]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012f98:	f7fe fe44 	bl	8011c24 <DbgTraceGetFileName>
 8012f9c:	4601      	mov	r1, r0
 8012f9e:	f240 3323 	movw	r3, #803	@ 0x323
 8012fa2:	4a82      	ldr	r2, [pc, #520]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fa4:	4882      	ldr	r0, [pc, #520]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012fa6:	f002 fd71 	bl	8015a8c <iprintf>
 8012faa:	7dfb      	ldrb	r3, [r7, #23]
 8012fac:	4619      	mov	r1, r3
 8012fae:	4884      	ldr	r0, [pc, #528]	@ (80131c0 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8012fb0:	f002 fd6c 	bl	8015a8c <iprintf>
 8012fb4:	e035      	b.n	8013022 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8012fb6:	487c      	ldr	r0, [pc, #496]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012fb8:	f7fe fe34 	bl	8011c24 <DbgTraceGetFileName>
 8012fbc:	4601      	mov	r1, r0
 8012fbe:	f240 3327 	movw	r3, #807	@ 0x327
 8012fc2:	4a7a      	ldr	r2, [pc, #488]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fc4:	487a      	ldr	r0, [pc, #488]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012fc6:	f002 fd61 	bl	8015a8c <iprintf>
 8012fca:	487e      	ldr	r0, [pc, #504]	@ (80131c4 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8012fcc:	f002 fdce 	bl	8015b6c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8012fd0:	4875      	ldr	r0, [pc, #468]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8012fd2:	f7fe fe27 	bl	8011c24 <DbgTraceGetFileName>
 8012fd6:	4601      	mov	r1, r0
 8012fd8:	f44f 734a 	mov.w	r3, #808	@ 0x328
 8012fdc:	4a73      	ldr	r2, [pc, #460]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8012fde:	4874      	ldr	r0, [pc, #464]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8012fe0:	f002 fd54 	bl	8015a8c <iprintf>
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	3305      	adds	r3, #5
 8012fe8:	781b      	ldrb	r3, [r3, #0]
 8012fea:	4618      	mov	r0, r3
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	3304      	adds	r3, #4
 8012ff0:	781b      	ldrb	r3, [r3, #0]
 8012ff2:	461c      	mov	r4, r3
 8012ff4:	693b      	ldr	r3, [r7, #16]
 8012ff6:	3303      	adds	r3, #3
 8012ff8:	781b      	ldrb	r3, [r3, #0]
 8012ffa:	461d      	mov	r5, r3
 8012ffc:	693b      	ldr	r3, [r7, #16]
 8012ffe:	3302      	adds	r3, #2
 8013000:	781b      	ldrb	r3, [r3, #0]
 8013002:	461a      	mov	r2, r3
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	3301      	adds	r3, #1
 8013008:	781b      	ldrb	r3, [r3, #0]
 801300a:	4619      	mov	r1, r3
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	781b      	ldrb	r3, [r3, #0]
 8013010:	9302      	str	r3, [sp, #8]
 8013012:	9101      	str	r1, [sp, #4]
 8013014:	9200      	str	r2, [sp, #0]
 8013016:	462b      	mov	r3, r5
 8013018:	4622      	mov	r2, r4
 801301a:	4601      	mov	r1, r0
 801301c:	486a      	ldr	r0, [pc, #424]	@ (80131c8 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 801301e:	f002 fd35 	bl	8015a8c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8013022:	4a6a      	ldr	r2, [pc, #424]	@ (80131cc <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8013024:	2110      	movs	r1, #16
 8013026:	2018      	movs	r0, #24
 8013028:	f7fd fc31 	bl	801088e <aci_hal_write_config_data>
 801302c:	4603      	mov	r3, r0
 801302e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013030:	7dfb      	ldrb	r3, [r7, #23]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d00f      	beq.n	8013056 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8013036:	485c      	ldr	r0, [pc, #368]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013038:	f7fe fdf4 	bl	8011c24 <DbgTraceGetFileName>
 801303c:	4601      	mov	r1, r0
 801303e:	f240 3372 	movw	r3, #882	@ 0x372
 8013042:	4a5a      	ldr	r2, [pc, #360]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013044:	485a      	ldr	r0, [pc, #360]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013046:	f002 fd21 	bl	8015a8c <iprintf>
 801304a:	7dfb      	ldrb	r3, [r7, #23]
 801304c:	4619      	mov	r1, r3
 801304e:	4860      	ldr	r0, [pc, #384]	@ (80131d0 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8013050:	f002 fd1c 	bl	8015a8c <iprintf>
 8013054:	e00c      	b.n	8013070 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8013056:	4854      	ldr	r0, [pc, #336]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013058:	f7fe fde4 	bl	8011c24 <DbgTraceGetFileName>
 801305c:	4601      	mov	r1, r0
 801305e:	f240 3376 	movw	r3, #886	@ 0x376
 8013062:	4a52      	ldr	r2, [pc, #328]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013064:	4852      	ldr	r0, [pc, #328]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013066:	f002 fd11 	bl	8015a8c <iprintf>
 801306a:	485a      	ldr	r0, [pc, #360]	@ (80131d4 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 801306c:	f002 fd7e 	bl	8015b6c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8013070:	4a59      	ldr	r2, [pc, #356]	@ (80131d8 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8013072:	2110      	movs	r1, #16
 8013074:	2008      	movs	r0, #8
 8013076:	f7fd fc0a 	bl	801088e <aci_hal_write_config_data>
 801307a:	4603      	mov	r3, r0
 801307c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801307e:	7dfb      	ldrb	r3, [r7, #23]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d00f      	beq.n	80130a4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8013084:	4848      	ldr	r0, [pc, #288]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013086:	f7fe fdcd 	bl	8011c24 <DbgTraceGetFileName>
 801308a:	4601      	mov	r1, r0
 801308c:	f240 337f 	movw	r3, #895	@ 0x37f
 8013090:	4a46      	ldr	r2, [pc, #280]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013092:	4847      	ldr	r0, [pc, #284]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013094:	f002 fcfa 	bl	8015a8c <iprintf>
 8013098:	7dfb      	ldrb	r3, [r7, #23]
 801309a:	4619      	mov	r1, r3
 801309c:	484f      	ldr	r0, [pc, #316]	@ (80131dc <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 801309e:	f002 fcf5 	bl	8015a8c <iprintf>
 80130a2:	e00c      	b.n	80130be <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 80130a4:	4840      	ldr	r0, [pc, #256]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80130a6:	f7fe fdbd 	bl	8011c24 <DbgTraceGetFileName>
 80130aa:	4601      	mov	r1, r0
 80130ac:	f240 3383 	movw	r3, #899	@ 0x383
 80130b0:	4a3e      	ldr	r2, [pc, #248]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80130b2:	483f      	ldr	r0, [pc, #252]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80130b4:	f002 fcea 	bl	8015a8c <iprintf>
 80130b8:	4849      	ldr	r0, [pc, #292]	@ (80131e0 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80130ba:	f002 fd57 	bl	8015b6c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80130be:	2119      	movs	r1, #25
 80130c0:	2001      	movs	r0, #1
 80130c2:	f7fd fc69 	bl	8010998 <aci_hal_set_tx_power_level>
 80130c6:	4603      	mov	r3, r0
 80130c8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80130ca:	7dfb      	ldrb	r3, [r7, #23]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d00f      	beq.n	80130f0 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80130d0:	4835      	ldr	r0, [pc, #212]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80130d2:	f7fe fda7 	bl	8011c24 <DbgTraceGetFileName>
 80130d6:	4601      	mov	r1, r0
 80130d8:	f44f 7363 	mov.w	r3, #908	@ 0x38c
 80130dc:	4a33      	ldr	r2, [pc, #204]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80130de:	4834      	ldr	r0, [pc, #208]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80130e0:	f002 fcd4 	bl	8015a8c <iprintf>
 80130e4:	7dfb      	ldrb	r3, [r7, #23]
 80130e6:	4619      	mov	r1, r3
 80130e8:	483e      	ldr	r0, [pc, #248]	@ (80131e4 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80130ea:	f002 fccf 	bl	8015a8c <iprintf>
 80130ee:	e00c      	b.n	801310a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80130f0:	482d      	ldr	r0, [pc, #180]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80130f2:	f7fe fd97 	bl	8011c24 <DbgTraceGetFileName>
 80130f6:	4601      	mov	r1, r0
 80130f8:	f44f 7364 	mov.w	r3, #912	@ 0x390
 80130fc:	4a2b      	ldr	r2, [pc, #172]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80130fe:	482c      	ldr	r0, [pc, #176]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013100:	f002 fcc4 	bl	8015a8c <iprintf>
 8013104:	4838      	ldr	r0, [pc, #224]	@ (80131e8 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8013106:	f002 fd31 	bl	8015b6c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801310a:	f7fd f86a 	bl	80101e2 <aci_gatt_init>
 801310e:	4603      	mov	r3, r0
 8013110:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013112:	7dfb      	ldrb	r3, [r7, #23]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d00f      	beq.n	8013138 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8013118:	4823      	ldr	r0, [pc, #140]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801311a:	f7fe fd83 	bl	8011c24 <DbgTraceGetFileName>
 801311e:	4601      	mov	r1, r0
 8013120:	f240 3399 	movw	r3, #921	@ 0x399
 8013124:	4a21      	ldr	r2, [pc, #132]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013126:	4822      	ldr	r0, [pc, #136]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013128:	f002 fcb0 	bl	8015a8c <iprintf>
 801312c:	7dfb      	ldrb	r3, [r7, #23]
 801312e:	4619      	mov	r1, r3
 8013130:	482e      	ldr	r0, [pc, #184]	@ (80131ec <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8013132:	f002 fcab 	bl	8015a8c <iprintf>
 8013136:	e00c      	b.n	8013152 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8013138:	481b      	ldr	r0, [pc, #108]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801313a:	f7fe fd73 	bl	8011c24 <DbgTraceGetFileName>
 801313e:	4601      	mov	r1, r0
 8013140:	f240 339d 	movw	r3, #925	@ 0x39d
 8013144:	4a19      	ldr	r2, [pc, #100]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013146:	481a      	ldr	r0, [pc, #104]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013148:	f002 fca0 	bl	8015a8c <iprintf>
 801314c:	4828      	ldr	r0, [pc, #160]	@ (80131f0 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801314e:	f002 fd0d 	bl	8015b6c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8013152:	2300      	movs	r3, #0
 8013154:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8013156:	7bfb      	ldrb	r3, [r7, #15]
 8013158:	f043 0301 	orr.w	r3, r3, #1
 801315c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801315e:	7bfb      	ldrb	r3, [r7, #15]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d069      	beq.n	8013238 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8013164:	4b23      	ldr	r3, [pc, #140]	@ (80131f4 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8013166:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8013168:	1dba      	adds	r2, r7, #6
 801316a:	7bf8      	ldrb	r0, [r7, #15]
 801316c:	1cbb      	adds	r3, r7, #2
 801316e:	9301      	str	r3, [sp, #4]
 8013170:	1d3b      	adds	r3, r7, #4
 8013172:	9300      	str	r3, [sp, #0]
 8013174:	4613      	mov	r3, r2
 8013176:	2209      	movs	r2, #9
 8013178:	2100      	movs	r1, #0
 801317a:	f7fc fe88 	bl	800fe8e <aci_gap_init>
 801317e:	4603      	mov	r3, r0
 8013180:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8013182:	7dfb      	ldrb	r3, [r7, #23]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d039      	beq.n	80131fc <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8013188:	4807      	ldr	r0, [pc, #28]	@ (80131a8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801318a:	f7fe fd4b 	bl	8011c24 <DbgTraceGetFileName>
 801318e:	4601      	mov	r1, r0
 8013190:	f240 33bd 	movw	r3, #957	@ 0x3bd
 8013194:	4a05      	ldr	r2, [pc, #20]	@ (80131ac <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013196:	4806      	ldr	r0, [pc, #24]	@ (80131b0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013198:	f002 fc78 	bl	8015a8c <iprintf>
 801319c:	7dfb      	ldrb	r3, [r7, #23]
 801319e:	4619      	mov	r1, r3
 80131a0:	4815      	ldr	r0, [pc, #84]	@ (80131f8 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 80131a2:	f002 fc73 	bl	8015a8c <iprintf>
 80131a6:	e036      	b.n	8013216 <Ble_Hci_Gap_Gatt_Init+0x30a>
 80131a8:	080171f0 	.word	0x080171f0
 80131ac:	0801895c 	.word	0x0801895c
 80131b0:	0801720c 	.word	0x0801720c
 80131b4:	08017800 	.word	0x08017800
 80131b8:	0801782c 	.word	0x0801782c
 80131bc:	0801785c 	.word	0x0801785c
 80131c0:	0801787c 	.word	0x0801787c
 80131c4:	080178d8 	.word	0x080178d8
 80131c8:	08017924 	.word	0x08017924
 80131cc:	08018914 	.word	0x08018914
 80131d0:	08017960 	.word	0x08017960
 80131d4:	080179b8 	.word	0x080179b8
 80131d8:	08018924 	.word	0x08018924
 80131dc:	08017a00 	.word	0x08017a00
 80131e0:	08017a58 	.word	0x08017a58
 80131e4:	08017aa0 	.word	0x08017aa0
 80131e8:	08017ae0 	.word	0x08017ae0
 80131ec:	08017b10 	.word	0x08017b10
 80131f0:	08017b44 	.word	0x08017b44
 80131f4:	08017b68 	.word	0x08017b68
 80131f8:	08017b74 	.word	0x08017b74
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80131fc:	487e      	ldr	r0, [pc, #504]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80131fe:	f7fe fd11 	bl	8011c24 <DbgTraceGetFileName>
 8013202:	4601      	mov	r1, r0
 8013204:	f240 33c1 	movw	r3, #961	@ 0x3c1
 8013208:	4a7c      	ldr	r2, [pc, #496]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801320a:	487d      	ldr	r0, [pc, #500]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801320c:	f002 fc3e 	bl	8015a8c <iprintf>
 8013210:	487c      	ldr	r0, [pc, #496]	@ (8013404 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8013212:	f002 fcab 	bl	8015b6c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8013216:	88fc      	ldrh	r4, [r7, #6]
 8013218:	88bd      	ldrh	r5, [r7, #4]
 801321a:	68b8      	ldr	r0, [r7, #8]
 801321c:	f7ec ffb0 	bl	8000180 <strlen>
 8013220:	4603      	mov	r3, r0
 8013222:	b2da      	uxtb	r2, r3
 8013224:	68bb      	ldr	r3, [r7, #8]
 8013226:	9300      	str	r3, [sp, #0]
 8013228:	4613      	mov	r3, r2
 801322a:	2200      	movs	r2, #0
 801322c:	4629      	mov	r1, r5
 801322e:	4620      	mov	r0, r4
 8013230:	f7fd f9da 	bl	80105e8 <aci_gatt_update_char_value>
 8013234:	4603      	mov	r3, r0
 8013236:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8013238:	88f8      	ldrh	r0, [r7, #6]
 801323a:	8879      	ldrh	r1, [r7, #2]
 801323c:	463b      	mov	r3, r7
 801323e:	9300      	str	r3, [sp, #0]
 8013240:	2302      	movs	r3, #2
 8013242:	2200      	movs	r2, #0
 8013244:	f7fd f9d0 	bl	80105e8 <aci_gatt_update_char_value>
 8013248:	4603      	mov	r3, r0
 801324a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 801324c:	2202      	movs	r2, #2
 801324e:	2102      	movs	r1, #2
 8013250:	2000      	movs	r0, #0
 8013252:	f7fd fc80 	bl	8010b56 <hci_le_set_default_phy>
 8013256:	4603      	mov	r3, r0
 8013258:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801325a:	7dfb      	ldrb	r3, [r7, #23]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00f      	beq.n	8013280 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8013260:	4865      	ldr	r0, [pc, #404]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013262:	f7fe fcdf 	bl	8011c24 <DbgTraceGetFileName>
 8013266:	4601      	mov	r1, r0
 8013268:	f240 33e3 	movw	r3, #995	@ 0x3e3
 801326c:	4a63      	ldr	r2, [pc, #396]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801326e:	4864      	ldr	r0, [pc, #400]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013270:	f002 fc0c 	bl	8015a8c <iprintf>
 8013274:	7dfb      	ldrb	r3, [r7, #23]
 8013276:	4619      	mov	r1, r3
 8013278:	4863      	ldr	r0, [pc, #396]	@ (8013408 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 801327a:	f002 fc07 	bl	8015a8c <iprintf>
 801327e:	e00c      	b.n	801329a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8013280:	485d      	ldr	r0, [pc, #372]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013282:	f7fe fccf 	bl	8011c24 <DbgTraceGetFileName>
 8013286:	4601      	mov	r1, r0
 8013288:	f240 33e7 	movw	r3, #999	@ 0x3e7
 801328c:	4a5b      	ldr	r2, [pc, #364]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801328e:	485c      	ldr	r0, [pc, #368]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013290:	f002 fbfc 	bl	8015a8c <iprintf>
 8013294:	485d      	ldr	r0, [pc, #372]	@ (801340c <Ble_Hci_Gap_Gatt_Init+0x500>)
 8013296:	f002 fc69 	bl	8015b6c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801329a:	4b5d      	ldr	r3, [pc, #372]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801329c:	2201      	movs	r2, #1
 801329e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80132a0:	4b5b      	ldr	r3, [pc, #364]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	4618      	mov	r0, r3
 80132a6:	f7fc fc73 	bl	800fb90 <aci_gap_set_io_capability>
 80132aa:	4603      	mov	r3, r0
 80132ac:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80132ae:	7dfb      	ldrb	r3, [r7, #23]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d00f      	beq.n	80132d4 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80132b4:	4850      	ldr	r0, [pc, #320]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132b6:	f7fe fcb5 	bl	8011c24 <DbgTraceGetFileName>
 80132ba:	4601      	mov	r1, r0
 80132bc:	f240 33f1 	movw	r3, #1009	@ 0x3f1
 80132c0:	4a4e      	ldr	r2, [pc, #312]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80132c2:	484f      	ldr	r0, [pc, #316]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80132c4:	f002 fbe2 	bl	8015a8c <iprintf>
 80132c8:	7dfb      	ldrb	r3, [r7, #23]
 80132ca:	4619      	mov	r1, r3
 80132cc:	4851      	ldr	r0, [pc, #324]	@ (8013414 <Ble_Hci_Gap_Gatt_Init+0x508>)
 80132ce:	f002 fbdd 	bl	8015a8c <iprintf>
 80132d2:	e00c      	b.n	80132ee <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80132d4:	4848      	ldr	r0, [pc, #288]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80132d6:	f7fe fca5 	bl	8011c24 <DbgTraceGetFileName>
 80132da:	4601      	mov	r1, r0
 80132dc:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 80132e0:	4a46      	ldr	r2, [pc, #280]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80132e2:	4847      	ldr	r0, [pc, #284]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80132e4:	f002 fbd2 	bl	8015a8c <iprintf>
 80132e8:	484b      	ldr	r0, [pc, #300]	@ (8013418 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 80132ea:	f002 fc3f 	bl	8015b6c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80132ee:	4b48      	ldr	r3, [pc, #288]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80132f0:	2201      	movs	r2, #1
 80132f2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80132f4:	4b46      	ldr	r3, [pc, #280]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80132f6:	2208      	movs	r2, #8
 80132f8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80132fa:	4b45      	ldr	r3, [pc, #276]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80132fc:	2210      	movs	r2, #16
 80132fe:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8013300:	4b43      	ldr	r3, [pc, #268]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013302:	2200      	movs	r2, #0
 8013304:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8013306:	4b42      	ldr	r3, [pc, #264]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013308:	4a44      	ldr	r2, [pc, #272]	@ (801341c <Ble_Hci_Gap_Gatt_Init+0x510>)
 801330a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 801330c:	4b40      	ldr	r3, [pc, #256]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801330e:	2200      	movs	r2, #0
 8013310:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8013312:	4b3f      	ldr	r3, [pc, #252]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013314:	789c      	ldrb	r4, [r3, #2]
 8013316:	4b3e      	ldr	r3, [pc, #248]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013318:	785d      	ldrb	r5, [r3, #1]
 801331a:	4b3d      	ldr	r3, [pc, #244]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801331c:	791b      	ldrb	r3, [r3, #4]
 801331e:	4a3c      	ldr	r2, [pc, #240]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013320:	7952      	ldrb	r2, [r2, #5]
 8013322:	493b      	ldr	r1, [pc, #236]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013324:	78c9      	ldrb	r1, [r1, #3]
 8013326:	483a      	ldr	r0, [pc, #232]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013328:	6880      	ldr	r0, [r0, #8]
 801332a:	2600      	movs	r6, #0
 801332c:	9604      	str	r6, [sp, #16]
 801332e:	9003      	str	r0, [sp, #12]
 8013330:	9102      	str	r1, [sp, #8]
 8013332:	9201      	str	r2, [sp, #4]
 8013334:	9300      	str	r3, [sp, #0]
 8013336:	2300      	movs	r3, #0
 8013338:	2201      	movs	r2, #1
 801333a:	4629      	mov	r1, r5
 801333c:	4620      	mov	r0, r4
 801333e:	f7fc fc7b 	bl	800fc38 <aci_gap_set_authentication_requirement>
 8013342:	4603      	mov	r3, r0
 8013344:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8013346:	7dfb      	ldrb	r3, [r7, #23]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d00f      	beq.n	801336c <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 801334c:	482a      	ldr	r0, [pc, #168]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801334e:	f7fe fc69 	bl	8011c24 <DbgTraceGetFileName>
 8013352:	4601      	mov	r1, r0
 8013354:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8013358:	4a28      	ldr	r2, [pc, #160]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801335a:	4829      	ldr	r0, [pc, #164]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801335c:	f002 fb96 	bl	8015a8c <iprintf>
 8013360:	7dfb      	ldrb	r3, [r7, #23]
 8013362:	4619      	mov	r1, r3
 8013364:	482e      	ldr	r0, [pc, #184]	@ (8013420 <Ble_Hci_Gap_Gatt_Init+0x514>)
 8013366:	f002 fb91 	bl	8015a8c <iprintf>
 801336a:	e00c      	b.n	8013386 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 801336c:	4822      	ldr	r0, [pc, #136]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801336e:	f7fe fc59 	bl	8011c24 <DbgTraceGetFileName>
 8013372:	4601      	mov	r1, r0
 8013374:	f240 4314 	movw	r3, #1044	@ 0x414
 8013378:	4a20      	ldr	r2, [pc, #128]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801337a:	4821      	ldr	r0, [pc, #132]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801337c:	f002 fb86 	bl	8015a8c <iprintf>
 8013380:	4828      	ldr	r0, [pc, #160]	@ (8013424 <Ble_Hci_Gap_Gatt_Init+0x518>)
 8013382:	f002 fbf3 	bl	8015b6c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8013386:	4b22      	ldr	r3, [pc, #136]	@ (8013410 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013388:	789b      	ldrb	r3, [r3, #2]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d023      	beq.n	80133d6 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 801338e:	f7fc fe9d 	bl	80100cc <aci_gap_configure_filter_accept_list>
 8013392:	4603      	mov	r3, r0
 8013394:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8013396:	7dfb      	ldrb	r3, [r7, #23]
 8013398:	2b00      	cmp	r3, #0
 801339a:	d00f      	beq.n	80133bc <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 801339c:	4816      	ldr	r0, [pc, #88]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801339e:	f7fe fc41 	bl	8011c24 <DbgTraceGetFileName>
 80133a2:	4601      	mov	r1, r0
 80133a4:	f240 431f 	movw	r3, #1055	@ 0x41f
 80133a8:	4a14      	ldr	r2, [pc, #80]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80133aa:	4815      	ldr	r0, [pc, #84]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80133ac:	f002 fb6e 	bl	8015a8c <iprintf>
 80133b0:	7dfb      	ldrb	r3, [r7, #23]
 80133b2:	4619      	mov	r1, r3
 80133b4:	481c      	ldr	r0, [pc, #112]	@ (8013428 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 80133b6:	f002 fb69 	bl	8015a8c <iprintf>
 80133ba:	e00c      	b.n	80133d6 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80133bc:	480e      	ldr	r0, [pc, #56]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80133be:	f7fe fc31 	bl	8011c24 <DbgTraceGetFileName>
 80133c2:	4601      	mov	r1, r0
 80133c4:	f240 4323 	movw	r3, #1059	@ 0x423
 80133c8:	4a0c      	ldr	r2, [pc, #48]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80133ca:	480d      	ldr	r0, [pc, #52]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80133cc:	f002 fb5e 	bl	8015a8c <iprintf>
 80133d0:	4816      	ldr	r0, [pc, #88]	@ (801342c <Ble_Hci_Gap_Gatt_Init+0x520>)
 80133d2:	f002 fbcb 	bl	8015b6c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80133d6:	4808      	ldr	r0, [pc, #32]	@ (80133f8 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80133d8:	f7fe fc24 	bl	8011c24 <DbgTraceGetFileName>
 80133dc:	4601      	mov	r1, r0
 80133de:	f240 4326 	movw	r3, #1062	@ 0x426
 80133e2:	4a06      	ldr	r2, [pc, #24]	@ (80133fc <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80133e4:	4806      	ldr	r0, [pc, #24]	@ (8013400 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80133e6:	f002 fb51 	bl	8015a8c <iprintf>
 80133ea:	4811      	ldr	r0, [pc, #68]	@ (8013430 <Ble_Hci_Gap_Gatt_Init+0x524>)
 80133ec:	f002 fb4e 	bl	8015a8c <iprintf>
}
 80133f0:	bf00      	nop
 80133f2:	371c      	adds	r7, #28
 80133f4:	46bd      	mov	sp, r7
 80133f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80133f8:	080171f0 	.word	0x080171f0
 80133fc:	0801895c 	.word	0x0801895c
 8013400:	0801720c 	.word	0x0801720c
 8013404:	08017ba4 	.word	0x08017ba4
 8013408:	08017bc4 	.word	0x08017bc4
 801340c:	08017c00 	.word	0x08017c00
 8013410:	20000ff4 	.word	0x20000ff4
 8013414:	08017c2c 	.word	0x08017c2c
 8013418:	08017c6c 	.word	0x08017c6c
 801341c:	0001b207 	.word	0x0001b207
 8013420:	08017c9c 	.word	0x08017c9c
 8013424:	08017ce8 	.word	0x08017ce8
 8013428:	08017d24 	.word	0x08017d24
 801342c:	08017d64 	.word	0x08017d64
 8013430:	08017d94 	.word	0x08017d94

08013434 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b08c      	sub	sp, #48	@ 0x30
 8013438:	af08      	add	r7, sp, #32
 801343a:	4603      	mov	r3, r0
 801343c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801343e:	2392      	movs	r3, #146	@ 0x92
 8013440:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8013442:	4a32      	ldr	r2, [pc, #200]	@ (801350c <Adv_Request+0xd8>)
 8013444:	79fb      	ldrb	r3, [r7, #7]
 8013446:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801344a:	2300      	movs	r3, #0
 801344c:	9306      	str	r3, [sp, #24]
 801344e:	2300      	movs	r3, #0
 8013450:	9305      	str	r3, [sp, #20]
 8013452:	2300      	movs	r3, #0
 8013454:	9304      	str	r3, [sp, #16]
 8013456:	2300      	movs	r3, #0
 8013458:	9303      	str	r3, [sp, #12]
 801345a:	2300      	movs	r3, #0
 801345c:	9302      	str	r3, [sp, #8]
 801345e:	2300      	movs	r3, #0
 8013460:	9301      	str	r3, [sp, #4]
 8013462:	2300      	movs	r3, #0
 8013464:	9300      	str	r3, [sp, #0]
 8013466:	2300      	movs	r3, #0
 8013468:	22a0      	movs	r2, #160	@ 0xa0
 801346a:	2180      	movs	r1, #128	@ 0x80
 801346c:	2000      	movs	r0, #0
 801346e:	f7fc fa95 	bl	800f99c <aci_gap_set_discoverable>
 8013472:	4603      	mov	r3, r0
 8013474:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8013476:	7bfb      	ldrb	r3, [r7, #15]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d00f      	beq.n	801349c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 801347c:	4824      	ldr	r0, [pc, #144]	@ (8013510 <Adv_Request+0xdc>)
 801347e:	f7fe fbd1 	bl	8011c24 <DbgTraceGetFileName>
 8013482:	4601      	mov	r1, r0
 8013484:	f240 433c 	movw	r3, #1084	@ 0x43c
 8013488:	4a22      	ldr	r2, [pc, #136]	@ (8013514 <Adv_Request+0xe0>)
 801348a:	4823      	ldr	r0, [pc, #140]	@ (8013518 <Adv_Request+0xe4>)
 801348c:	f002 fafe 	bl	8015a8c <iprintf>
 8013490:	7bfb      	ldrb	r3, [r7, #15]
 8013492:	4619      	mov	r1, r3
 8013494:	4821      	ldr	r0, [pc, #132]	@ (801351c <Adv_Request+0xe8>)
 8013496:	f002 faf9 	bl	8015a8c <iprintf>
 801349a:	e00c      	b.n	80134b6 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 801349c:	481c      	ldr	r0, [pc, #112]	@ (8013510 <Adv_Request+0xdc>)
 801349e:	f7fe fbc1 	bl	8011c24 <DbgTraceGetFileName>
 80134a2:	4601      	mov	r1, r0
 80134a4:	f44f 6388 	mov.w	r3, #1088	@ 0x440
 80134a8:	4a1a      	ldr	r2, [pc, #104]	@ (8013514 <Adv_Request+0xe0>)
 80134aa:	481b      	ldr	r0, [pc, #108]	@ (8013518 <Adv_Request+0xe4>)
 80134ac:	f002 faee 	bl	8015a8c <iprintf>
 80134b0:	481b      	ldr	r0, [pc, #108]	@ (8013520 <Adv_Request+0xec>)
 80134b2:	f002 fb5b 	bl	8015b6c <puts>
#endif

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80134b6:	491b      	ldr	r1, [pc, #108]	@ (8013524 <Adv_Request+0xf0>)
 80134b8:	2013      	movs	r0, #19
 80134ba:	f7fc fd95 	bl	800ffe8 <aci_gap_update_adv_data>
 80134be:	4603      	mov	r3, r0
 80134c0:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 80134c2:	7bfb      	ldrb	r3, [r7, #15]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d00f      	beq.n	80134e8 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80134c8:	4811      	ldr	r0, [pc, #68]	@ (8013510 <Adv_Request+0xdc>)
 80134ca:	f7fe fbab 	bl	8011c24 <DbgTraceGetFileName>
 80134ce:	4601      	mov	r1, r0
 80134d0:	f240 434f 	movw	r3, #1103	@ 0x44f
 80134d4:	4a0f      	ldr	r2, [pc, #60]	@ (8013514 <Adv_Request+0xe0>)
 80134d6:	4810      	ldr	r0, [pc, #64]	@ (8013518 <Adv_Request+0xe4>)
 80134d8:	f002 fad8 	bl	8015a8c <iprintf>
 80134dc:	7bfb      	ldrb	r3, [r7, #15]
 80134de:	4619      	mov	r1, r3
 80134e0:	4811      	ldr	r0, [pc, #68]	@ (8013528 <Adv_Request+0xf4>)
 80134e2:	f002 fad3 	bl	8015a8c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80134e6:	e00d      	b.n	8013504 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80134e8:	4809      	ldr	r0, [pc, #36]	@ (8013510 <Adv_Request+0xdc>)
 80134ea:	f7fe fb9b 	bl	8011c24 <DbgTraceGetFileName>
 80134ee:	4601      	mov	r1, r0
 80134f0:	f240 4353 	movw	r3, #1107	@ 0x453
 80134f4:	4a07      	ldr	r2, [pc, #28]	@ (8013514 <Adv_Request+0xe0>)
 80134f6:	4808      	ldr	r0, [pc, #32]	@ (8013518 <Adv_Request+0xe4>)
 80134f8:	f002 fac8 	bl	8015a8c <iprintf>
 80134fc:	480b      	ldr	r0, [pc, #44]	@ (801352c <Adv_Request+0xf8>)
 80134fe:	f002 fac5 	bl	8015a8c <iprintf>
  return;
 8013502:	bf00      	nop
}
 8013504:	3710      	adds	r7, #16
 8013506:	46bd      	mov	sp, r7
 8013508:	bd80      	pop	{r7, pc}
 801350a:	bf00      	nop
 801350c:	20000ff4 	.word	0x20000ff4
 8013510:	080171f0 	.word	0x080171f0
 8013514:	08018974 	.word	0x08018974
 8013518:	0801720c 	.word	0x0801720c
 801351c:	08017dc0 	.word	0x08017dc0
 8013520:	08017df8 	.word	0x08017df8
 8013524:	200000a4 	.word	0x200000a4
 8013528:	08017e20 	.word	0x08017e20
 801352c:	08017e54 	.word	0x08017e54

08013530 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8013530:	b580      	push	{r7, lr}
 8013532:	b086      	sub	sp, #24
 8013534:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013536:	f7ff f8ed 	bl	8012714 <LL_FLASH_GetUDN>
 801353a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 801353c:	693b      	ldr	r3, [r7, #16]
 801353e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013542:	d023      	beq.n	801358c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013544:	f7ff f8fe 	bl	8012744 <LL_FLASH_GetSTCompanyID>
 8013548:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801354a:	f7ff f8ef 	bl	801272c <LL_FLASH_GetDeviceID>
 801354e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8013550:	693b      	ldr	r3, [r7, #16]
 8013552:	b2da      	uxtb	r2, r3
 8013554:	4b16      	ldr	r3, [pc, #88]	@ (80135b0 <BleGetBdAddress+0x80>)
 8013556:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	0a1b      	lsrs	r3, r3, #8
 801355c:	b2da      	uxtb	r2, r3
 801355e:	4b14      	ldr	r3, [pc, #80]	@ (80135b0 <BleGetBdAddress+0x80>)
 8013560:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	b2da      	uxtb	r2, r3
 8013566:	4b12      	ldr	r3, [pc, #72]	@ (80135b0 <BleGetBdAddress+0x80>)
 8013568:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	b2da      	uxtb	r2, r3
 801356e:	4b10      	ldr	r3, [pc, #64]	@ (80135b0 <BleGetBdAddress+0x80>)
 8013570:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8013572:	68bb      	ldr	r3, [r7, #8]
 8013574:	0a1b      	lsrs	r3, r3, #8
 8013576:	b2da      	uxtb	r2, r3
 8013578:	4b0d      	ldr	r3, [pc, #52]	@ (80135b0 <BleGetBdAddress+0x80>)
 801357a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 801357c:	68bb      	ldr	r3, [r7, #8]
 801357e:	0c1b      	lsrs	r3, r3, #16
 8013580:	b2da      	uxtb	r2, r3
 8013582:	4b0b      	ldr	r3, [pc, #44]	@ (80135b0 <BleGetBdAddress+0x80>)
 8013584:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8013586:	4b0a      	ldr	r3, [pc, #40]	@ (80135b0 <BleGetBdAddress+0x80>)
 8013588:	617b      	str	r3, [r7, #20]
 801358a:	e00b      	b.n	80135a4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 801358c:	2000      	movs	r0, #0
 801358e:	f7fe fc11 	bl	8011db4 <OTP_Read>
 8013592:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d002      	beq.n	80135a0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	617b      	str	r3, [r7, #20]
 801359e:	e001      	b.n	80135a4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80135a0:	4b04      	ldr	r3, [pc, #16]	@ (80135b4 <BleGetBdAddress+0x84>)
 80135a2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80135a4:	697b      	ldr	r3, [r7, #20]
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3718      	adds	r7, #24
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}
 80135ae:	bf00      	nop
 80135b0:	20000fec 	.word	0x20000fec
 80135b4:	0801890c 	.word	0x0801890c

080135b8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80135b8:	b580      	push	{r7, lr}
 80135ba:	b082      	sub	sp, #8
 80135bc:	af00      	add	r7, sp, #0
	  DIAG (" BLE Debug ->\tAdvertising cancelled\n\r" );
#endif

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80135be:	4b1f      	ldr	r3, [pc, #124]	@ (801363c <Adv_Cancel+0x84>)
 80135c0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80135c4:	2b05      	cmp	r3, #5
 80135c6:	d035      	beq.n	8013634 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80135c8:	2392      	movs	r3, #146	@ 0x92
 80135ca:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80135cc:	f7fc f9c2 	bl	800f954 <aci_gap_set_non_discoverable>
 80135d0:	4603      	mov	r3, r0
 80135d2:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80135d4:	4b19      	ldr	r3, [pc, #100]	@ (801363c <Adv_Cancel+0x84>)
 80135d6:	2200      	movs	r2, #0
 80135d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80135dc:	79fb      	ldrb	r3, [r7, #7]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d00d      	beq.n	80135fe <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80135e2:	4817      	ldr	r0, [pc, #92]	@ (8013640 <Adv_Cancel+0x88>)
 80135e4:	f7fe fb1e 	bl	8011c24 <DbgTraceGetFileName>
 80135e8:	4601      	mov	r1, r0
 80135ea:	f240 43a5 	movw	r3, #1189	@ 0x4a5
 80135ee:	4a15      	ldr	r2, [pc, #84]	@ (8013644 <Adv_Cancel+0x8c>)
 80135f0:	4815      	ldr	r0, [pc, #84]	@ (8013648 <Adv_Cancel+0x90>)
 80135f2:	f002 fa4b 	bl	8015a8c <iprintf>
 80135f6:	4815      	ldr	r0, [pc, #84]	@ (801364c <Adv_Cancel+0x94>)
 80135f8:	f002 fa48 	bl	8015a8c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80135fc:	e01a      	b.n	8013634 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 80135fe:	4810      	ldr	r0, [pc, #64]	@ (8013640 <Adv_Cancel+0x88>)
 8013600:	f7fe fb10 	bl	8011c24 <DbgTraceGetFileName>
 8013604:	4601      	mov	r1, r0
 8013606:	f240 43a9 	movw	r3, #1193	@ 0x4a9
 801360a:	4a0e      	ldr	r2, [pc, #56]	@ (8013644 <Adv_Cancel+0x8c>)
 801360c:	480e      	ldr	r0, [pc, #56]	@ (8013648 <Adv_Cancel+0x90>)
 801360e:	f002 fa3d 	bl	8015a8c <iprintf>
 8013612:	480f      	ldr	r0, [pc, #60]	@ (8013650 <Adv_Cancel+0x98>)
 8013614:	f002 fa3a 	bl	8015a8c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8013618:	4809      	ldr	r0, [pc, #36]	@ (8013640 <Adv_Cancel+0x88>)
 801361a:	f7fe fb03 	bl	8011c24 <DbgTraceGetFileName>
 801361e:	4601      	mov	r1, r0
 8013620:	f240 43aa 	movw	r3, #1194	@ 0x4aa
 8013624:	4a07      	ldr	r2, [pc, #28]	@ (8013644 <Adv_Cancel+0x8c>)
 8013626:	4808      	ldr	r0, [pc, #32]	@ (8013648 <Adv_Cancel+0x90>)
 8013628:	f002 fa30 	bl	8015a8c <iprintf>
 801362c:	4809      	ldr	r0, [pc, #36]	@ (8013654 <Adv_Cancel+0x9c>)
 801362e:	f002 fa2d 	bl	8015a8c <iprintf>
  return;
 8013632:	bf00      	nop
 8013634:	bf00      	nop
}
 8013636:	3708      	adds	r7, #8
 8013638:	46bd      	mov	sp, r7
 801363a:	bd80      	pop	{r7, pc}
 801363c:	20000ff4 	.word	0x20000ff4
 8013640:	080171f0 	.word	0x080171f0
 8013644:	08018980 	.word	0x08018980
 8013648:	0801720c 	.word	0x0801720c
 801364c:	08017e7c 	.word	0x08017e7c
 8013650:	08017ea0 	.word	0x08017ea0
 8013654:	08017ea8 	.word	0x08017ea8

08013658 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8013658:	b590      	push	{r4, r7, lr}
 801365a:	b08d      	sub	sp, #52	@ 0x34
 801365c:	af02      	add	r7, sp, #8
 801365e:	4603      	mov	r3, r0
 8013660:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	float a_ConnInterval[SIZE_TAB_CONN_INT] = {10, 25}; /* ms */
 8013662:	4a59      	ldr	r2, [pc, #356]	@ (80137c8 <BLE_SVC_L2CAP_Conn_Update+0x170>)
 8013664:	f107 030c 	add.w	r3, r7, #12
 8013668:	e892 0003 	ldmia.w	r2, {r0, r1}
 801366c:	e883 0003 	stmia.w	r3, {r0, r1}


    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8013670:	4b56      	ldr	r3, [pc, #344]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013672:	781b      	ldrb	r3, [r3, #0]
 8013674:	3301      	adds	r3, #1
 8013676:	2b00      	cmp	r3, #0
 8013678:	f003 0301 	and.w	r3, r3, #1
 801367c:	bfb8      	it	lt
 801367e:	425b      	neglt	r3, r3
 8013680:	b2da      	uxtb	r2, r3
 8013682:	4b52      	ldr	r3, [pc, #328]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013684:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8013686:	4b51      	ldr	r3, [pc, #324]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013688:	781b      	ldrb	r3, [r3, #0]
 801368a:	009b      	lsls	r3, r3, #2
 801368c:	3328      	adds	r3, #40	@ 0x28
 801368e:	443b      	add	r3, r7
 8013690:	3b1c      	subs	r3, #28
 8013692:	ed93 7a00 	vldr	s14, [r3]
 8013696:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801369a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801369e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136a2:	ee17 3a90 	vmov	r3, s15
 80136a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 80136a8:	4b48      	ldr	r3, [pc, #288]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80136aa:	781b      	ldrb	r3, [r3, #0]
 80136ac:	009b      	lsls	r3, r3, #2
 80136ae:	3328      	adds	r3, #40	@ 0x28
 80136b0:	443b      	add	r3, r7
 80136b2:	3b1c      	subs	r3, #28
 80136b4:	ed93 7a00 	vldr	s14, [r3]
 80136b8:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80136bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80136c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80136c4:	ee17 3a90 	vmov	r3, s15
 80136c8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 80136ca:	2300      	movs	r3, #0
 80136cc:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80136ce:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80136d2:	843b      	strh	r3, [r7, #32]



  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 80136d4:	4b3e      	ldr	r3, [pc, #248]	@ (80137d0 <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	2b01      	cmp	r3, #1
 80136da:	d15e      	bne.n	801379a <BLE_SVC_L2CAP_Conn_Update+0x142>
  {
    mutex = 0;
 80136dc:	4b3c      	ldr	r3, [pc, #240]	@ (80137d0 <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80136de:	2200      	movs	r2, #0
 80136e0:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80136e2:	4b3a      	ldr	r3, [pc, #232]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80136e4:	781b      	ldrb	r3, [r3, #0]
 80136e6:	3301      	adds	r3, #1
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f003 0301 	and.w	r3, r3, #1
 80136ee:	bfb8      	it	lt
 80136f0:	425b      	neglt	r3, r3
 80136f2:	b2da      	uxtb	r2, r3
 80136f4:	4b35      	ldr	r3, [pc, #212]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80136f6:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80136f8:	4b34      	ldr	r3, [pc, #208]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	009b      	lsls	r3, r3, #2
 80136fe:	3328      	adds	r3, #40	@ 0x28
 8013700:	443b      	add	r3, r7
 8013702:	3b1c      	subs	r3, #28
 8013704:	ed93 7a00 	vldr	s14, [r3]
 8013708:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801370c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013714:	ee17 3a90 	vmov	r3, s15
 8013718:	83fb      	strh	r3, [r7, #30]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 801371a:	4b2c      	ldr	r3, [pc, #176]	@ (80137cc <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801371c:	781b      	ldrb	r3, [r3, #0]
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	3328      	adds	r3, #40	@ 0x28
 8013722:	443b      	add	r3, r7
 8013724:	3b1c      	subs	r3, #28
 8013726:	ed93 7a00 	vldr	s14, [r3]
 801372a:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801372e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013732:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013736:	ee17 3a90 	vmov	r3, s15
 801373a:	83bb      	strh	r3, [r7, #28]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 801373c:	2300      	movs	r3, #0
 801373e:	837b      	strh	r3, [r7, #26]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8013740:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013744:	833b      	strh	r3, [r7, #24]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8013746:	4b23      	ldr	r3, [pc, #140]	@ (80137d4 <BLE_SVC_L2CAP_Conn_Update+0x17c>)
 8013748:	8ad8      	ldrh	r0, [r3, #22]
 801374a:	8b7c      	ldrh	r4, [r7, #26]
 801374c:	8bba      	ldrh	r2, [r7, #28]
 801374e:	8bf9      	ldrh	r1, [r7, #30]
 8013750:	8b3b      	ldrh	r3, [r7, #24]
 8013752:	9300      	str	r3, [sp, #0]
 8013754:	4623      	mov	r3, r4
 8013756:	f7fd fa7b 	bl	8010c50 <aci_l2cap_connection_parameter_update_req>
 801375a:	4603      	mov	r3, r0
 801375c:	75fb      	strb	r3, [r7, #23]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 801375e:	7dfb      	ldrb	r3, [r7, #23]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d00d      	beq.n	8013780 <BLE_SVC_L2CAP_Conn_Update+0x128>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8013764:	481c      	ldr	r0, [pc, #112]	@ (80137d8 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 8013766:	f7fe fa5d 	bl	8011c24 <DbgTraceGetFileName>
 801376a:	4601      	mov	r1, r0
 801376c:	f240 43d7 	movw	r3, #1239	@ 0x4d7
 8013770:	4a1a      	ldr	r2, [pc, #104]	@ (80137dc <BLE_SVC_L2CAP_Conn_Update+0x184>)
 8013772:	481b      	ldr	r0, [pc, #108]	@ (80137e0 <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8013774:	f002 f98a 	bl	8015a8c <iprintf>
 8013778:	481a      	ldr	r0, [pc, #104]	@ (80137e4 <BLE_SVC_L2CAP_Conn_Update+0x18c>)
 801377a:	f002 f987 	bl	8015a8c <iprintf>
 801377e:	e00c      	b.n	801379a <BLE_SVC_L2CAP_Conn_Update+0x142>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8013780:	4815      	ldr	r0, [pc, #84]	@ (80137d8 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 8013782:	f7fe fa4f 	bl	8011c24 <DbgTraceGetFileName>
 8013786:	4601      	mov	r1, r0
 8013788:	f240 43db 	movw	r3, #1243	@ 0x4db
 801378c:	4a13      	ldr	r2, [pc, #76]	@ (80137dc <BLE_SVC_L2CAP_Conn_Update+0x184>)
 801378e:	4814      	ldr	r0, [pc, #80]	@ (80137e0 <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8013790:	f002 f97c 	bl	8015a8c <iprintf>
 8013794:	4814      	ldr	r0, [pc, #80]	@ (80137e8 <BLE_SVC_L2CAP_Conn_Update+0x190>)
 8013796:	f002 f979 	bl	8015a8c <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */



  if (ret != BLE_STATUS_SUCCESS)
 801379a:	7dbb      	ldrb	r3, [r7, #22]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d003      	beq.n	80137a8 <BLE_SVC_L2CAP_Conn_Update+0x150>
  {
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 80137a0:	4812      	ldr	r0, [pc, #72]	@ (80137ec <BLE_SVC_L2CAP_Conn_Update+0x194>)
 80137a2:	f7ee fec1 	bl	8002528 <DIAG>
  }


  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 80137a6:	e00c      	b.n	80137c2 <BLE_SVC_L2CAP_Conn_Update+0x16a>
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 80137a8:	4811      	ldr	r0, [pc, #68]	@ (80137f0 <BLE_SVC_L2CAP_Conn_Update+0x198>)
 80137aa:	f7ee febd 	bl	8002528 <DIAG>
    DIAG("\t\t- Connection Interval:   %d - %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 80137ae:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 80137b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80137b2:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80137b4:	8c3b      	ldrh	r3, [r7, #32]
 80137b6:	9300      	str	r3, [sp, #0]
 80137b8:	4603      	mov	r3, r0
 80137ba:	480e      	ldr	r0, [pc, #56]	@ (80137f4 <BLE_SVC_L2CAP_Conn_Update+0x19c>)
 80137bc:	f7ee feb4 	bl	8002528 <DIAG>
  return;
 80137c0:	bf00      	nop
}
 80137c2:	372c      	adds	r7, #44	@ 0x2c
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd90      	pop	{r4, r7, pc}
 80137c8:	08017ff8 	.word	0x08017ff8
 80137cc:	2000107c 	.word	0x2000107c
 80137d0:	2000107d 	.word	0x2000107d
 80137d4:	20000ff4 	.word	0x20000ff4
 80137d8:	080171f0 	.word	0x080171f0
 80137dc:	0801898c 	.word	0x0801898c
 80137e0:	0801720c 	.word	0x0801720c
 80137e4:	08017ec4 	.word	0x08017ec4
 80137e8:	08017eec 	.word	0x08017eec
 80137ec:	08017f1c 	.word	0x08017f1c
 80137f0:	08017f54 	.word	0x08017f54
 80137f4:	08017f90 	.word	0x08017f90

080137f8 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 80137fc:	4b08      	ldr	r3, [pc, #32]	@ (8013820 <Connection_Interval_Update_Req+0x28>)
 80137fe:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013802:	2b01      	cmp	r3, #1
 8013804:	d00a      	beq.n	801381c <Connection_Interval_Update_Req+0x24>
 8013806:	4b06      	ldr	r3, [pc, #24]	@ (8013820 <Connection_Interval_Update_Req+0x28>)
 8013808:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801380c:	2b00      	cmp	r3, #0
 801380e:	d005      	beq.n	801381c <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8013810:	4b03      	ldr	r3, [pc, #12]	@ (8013820 <Connection_Interval_Update_Req+0x28>)
 8013812:	8adb      	ldrh	r3, [r3, #22]
 8013814:	4618      	mov	r0, r3
 8013816:	f7ff ff1f 	bl	8013658 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 801381a:	bf00      	nop
 801381c:	bf00      	nop
}
 801381e:	bd80      	pop	{r7, pc}
 8013820:	20000ff4 	.word	0x20000ff4

08013824 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b082      	sub	sp, #8
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 801382c:	2100      	movs	r1, #0
 801382e:	2004      	movs	r0, #4
 8013830:	f001 ff4e 	bl	80156d0 <UTIL_SEQ_SetTask>

  return;
 8013834:	bf00      	nop
}
 8013836:	3708      	adds	r7, #8
 8013838:	46bd      	mov	sp, r7
 801383a:	bd80      	pop	{r7, pc}

0801383c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8013844:	2001      	movs	r0, #1
 8013846:	f001 ffaf 	bl	80157a8 <UTIL_SEQ_SetEvt>

  return;
 801384a:	bf00      	nop
}
 801384c:	3708      	adds	r7, #8
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}

08013852 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8013852:	b580      	push	{r7, lr}
 8013854:	b082      	sub	sp, #8
 8013856:	af00      	add	r7, sp, #0
 8013858:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801385a:	2001      	movs	r0, #1
 801385c:	f001 ffc4 	bl	80157e8 <UTIL_SEQ_WaitEvt>

  return;
 8013860:	bf00      	nop
}
 8013862:	3708      	adds	r7, #8
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	3308      	adds	r3, #8
 801387a:	4618      	mov	r0, r3
 801387c:	f7fd fb70 	bl	8010f60 <SVCCTL_UserEvtRx>
 8013880:	4603      	mov	r3, r0
 8013882:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8013884:	7afb      	ldrb	r3, [r7, #11]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d003      	beq.n	8013892 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	2201      	movs	r2, #1
 801388e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8013890:	e003      	b.n	801389a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	2200      	movs	r2, #0
 8013896:	701a      	strb	r2, [r3, #0]
  return;
 8013898:	bf00      	nop
}
 801389a:	3710      	adds	r7, #16
 801389c:	46bd      	mov	sp, r7
 801389e:	bd80      	pop	{r7, pc}

080138a0 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b084      	sub	sp, #16
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	4603      	mov	r3, r0
 80138a8:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 80138aa:	79fb      	ldrb	r3, [r7, #7]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <BLE_StatusNot+0x16>
 80138b0:	2b01      	cmp	r3, #1
 80138b2:	d006      	beq.n	80138c2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80138b4:	e00b      	b.n	80138ce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80138b6:	233f      	movs	r3, #63	@ 0x3f
 80138b8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80138ba:	68f8      	ldr	r0, [r7, #12]
 80138bc:	f001 ff34 	bl	8015728 <UTIL_SEQ_PauseTask>
      break;
 80138c0:	e005      	b.n	80138ce <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80138c2:	233f      	movs	r3, #63	@ 0x3f
 80138c4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80138c6:	68f8      	ldr	r0, [r7, #12]
 80138c8:	f001 ff4e 	bl	8015768 <UTIL_SEQ_ResumeTask>
      break;
 80138cc:	bf00      	nop
  }

  return;
 80138ce:	bf00      	nop
}
 80138d0:	3710      	adds	r7, #16
 80138d2:	46bd      	mov	sp, r7
 80138d4:	bd80      	pop	{r7, pc}
	...

080138d8 <ALL_SENs_Task>:

/* USER CODE BEGIN PFP */


void ALL_SENs_Task (void)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	af00      	add	r7, sp, #0
	if ( tsBle.App.ScgSetTask )
 80138dc:	4b06      	ldr	r3, [pc, #24]	@ (80138f8 <ALL_SENs_Task+0x20>)
 80138de:	7a5b      	ldrb	r3, [r3, #9]
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d006      	beq.n	80138f2 <ALL_SENs_Task+0x1a>
	{
		tsBle.App.ScgSetTask = false;
 80138e4:	4b04      	ldr	r3, [pc, #16]	@ (80138f8 <ALL_SENs_Task+0x20>)
 80138e6:	2200      	movs	r2, #0
 80138e8:	725a      	strb	r2, [r3, #9]
		Custom_STM_App_Update_Char(CUSTOM_STM_ALL_SENS, (uint8_t*)(tsStreamSCG.u8TxData));
 80138ea:	4904      	ldr	r1, [pc, #16]	@ (80138fc <ALL_SENs_Task+0x24>)
 80138ec:	2003      	movs	r0, #3
 80138ee:	f000 fc95 	bl	801421c <Custom_STM_App_Update_Char>
	}
}
 80138f2:	bf00      	nop
 80138f4:	bd80      	pop	{r7, pc}
 80138f6:	bf00      	nop
 80138f8:	20000fe0 	.word	0x20000fe0
 80138fc:	20000426 	.word	0x20000426

08013900 <ACCEL_Task>:
//--------------------------------------------------------------------------------------------

void ACCEL_Task(void)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	af00      	add	r7, sp, #0
	if ( tsBle.App.AccelSetTask )
 8013904:	4b06      	ldr	r3, [pc, #24]	@ (8013920 <ACCEL_Task+0x20>)
 8013906:	7a9b      	ldrb	r3, [r3, #10]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d006      	beq.n	801391a <ACCEL_Task+0x1a>
	{
		tsBle.App.AccelSetTask = false;
 801390c:	4b04      	ldr	r3, [pc, #16]	@ (8013920 <ACCEL_Task+0x20>)
 801390e:	2200      	movs	r2, #0
 8013910:	729a      	strb	r2, [r3, #10]
		Custom_STM_App_Update_Char(CUSTOM_STM_ACCEL_S, (uint8_t*)(tsStreamIMU.u8TxData));
 8013912:	4904      	ldr	r1, [pc, #16]	@ (8013924 <ACCEL_Task+0x24>)
 8013914:	2000      	movs	r0, #0
 8013916:	f000 fc81 	bl	801421c <Custom_STM_App_Update_Char>
	}
}
 801391a:	bf00      	nop
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	20000fe0 	.word	0x20000fe0
 8013924:	2000074a 	.word	0x2000074a

08013928 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	2b08      	cmp	r3, #8
 8013936:	d831      	bhi.n	801399c <Custom_STM_App_Notification+0x74>
 8013938:	a201      	add	r2, pc, #4	@ (adr r2, 8013940 <Custom_STM_App_Notification+0x18>)
 801393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801393e:	bf00      	nop
 8013940:	08013965 	.word	0x08013965
 8013944:	08013979 	.word	0x08013979
 8013948:	0801399d 	.word	0x0801399d
 801394c:	0801399d 	.word	0x0801399d
 8013950:	0801399d 	.word	0x0801399d
 8013954:	08013987 	.word	0x08013987
 8013958:	0801398f 	.word	0x0801398f
 801395c:	0801399d 	.word	0x0801399d
 8013960:	0801399d 	.word	0x0801399d

    /* SENSOR_DATA */
    case CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */

    	tsBle.App.McgNotification = true;
 8013964:	4b10      	ldr	r3, [pc, #64]	@ (80139a8 <Custom_STM_App_Notification+0x80>)
 8013966:	2201      	movs	r2, #1
 8013968:	719a      	strb	r2, [r3, #6]
    	tsBle.App.AccelNotification = true;
 801396a:	4b0f      	ldr	r3, [pc, #60]	@ (80139a8 <Custom_STM_App_Notification+0x80>)
 801396c:	2201      	movs	r2, #1
 801396e:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Enabled ]\n\r");
 8013970:	480e      	ldr	r0, [pc, #56]	@ (80139ac <Custom_STM_App_Notification+0x84>)
 8013972:	f7ee fdd9 	bl	8002528 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */
      break;
 8013976:	e012      	b.n	801399e <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */


    	tsBle.App.AccelNotification = false;
 8013978:	4b0b      	ldr	r3, [pc, #44]	@ (80139a8 <Custom_STM_App_Notification+0x80>)
 801397a:	2200      	movs	r2, #0
 801397c:	71da      	strb	r2, [r3, #7]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Disabled ]\n\r");
 801397e:	480c      	ldr	r0, [pc, #48]	@ (80139b0 <Custom_STM_App_Notification+0x88>)
 8013980:	f7ee fdd2 	bl	8002528 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */
      break;
 8013984:	e00b      	b.n	801399e <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */

//    	tsBle.App.McgNotification = true;
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Enabled ]\n\r");
 8013986:	480b      	ldr	r0, [pc, #44]	@ (80139b4 <Custom_STM_App_Notification+0x8c>)
 8013988:	f7ee fdce 	bl	8002528 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */
      break;
 801398c:	e007      	b.n	801399e <Custom_STM_App_Notification+0x76>

    case CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */

    	tsBle.App.McgNotification = false;
 801398e:	4b06      	ldr	r3, [pc, #24]	@ (80139a8 <Custom_STM_App_Notification+0x80>)
 8013990:	2200      	movs	r2, #0
 8013992:	719a      	strb	r2, [r3, #6]
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Disabled ]\n\r");
 8013994:	4808      	ldr	r0, [pc, #32]	@ (80139b8 <Custom_STM_App_Notification+0x90>)
 8013996:	f7ee fdc7 	bl	8002528 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */
      break;
 801399a:	e000      	b.n	801399e <Custom_STM_App_Notification+0x76>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 801399c:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 801399e:	bf00      	nop
}
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}
 80139a6:	bf00      	nop
 80139a8:	20000fe0 	.word	0x20000fe0
 80139ac:	08018000 	.word	0x08018000
 80139b0:	08018030 	.word	0x08018030
 80139b4:	08018064 	.word	0x08018064
 80139b8:	08018094 	.word	0x08018094

080139bc <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80139bc:	b480      	push	{r7}
 80139be:	b083      	sub	sp, #12
 80139c0:	af00      	add	r7, sp, #0
 80139c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	781b      	ldrb	r3, [r3, #0]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d002      	beq.n	80139d2 <Custom_APP_Notification+0x16>
 80139cc:	2b01      	cmp	r3, #1
 80139ce:	d002      	beq.n	80139d6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80139d0:	e002      	b.n	80139d8 <Custom_APP_Notification+0x1c>
      break;
 80139d2:	bf00      	nop
 80139d4:	e000      	b.n	80139d8 <Custom_APP_Notification+0x1c>
      break;
 80139d6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80139d8:	bf00      	nop
}
 80139da:	370c      	adds	r7, #12
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr

080139e4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80139e4:	b480      	push	{r7}
 80139e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80139e8:	bf00      	nop
}
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr
	...

080139f4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b090      	sub	sp, #64	@ 0x40
 80139f8:	af02      	add	r7, sp, #8
 80139fa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80139fc:	2300      	movs	r3, #0
 80139fe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	3301      	adds	r3, #1
 8013a06:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8013a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a0a:	781b      	ldrb	r3, [r3, #0]
 8013a0c:	2bff      	cmp	r3, #255	@ 0xff
 8013a0e:	f040 81ae 	bne.w	8013d6e <Custom_STM_Event_Handler+0x37a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8013a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013a14:	3302      	adds	r3, #2
 8013a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8013a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a1a:	881b      	ldrh	r3, [r3, #0]
 8013a1c:	b29b      	uxth	r3, r3
 8013a1e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8013a22:	2b1a      	cmp	r3, #26
 8013a24:	f200 819d 	bhi.w	8013d62 <Custom_STM_Event_Handler+0x36e>
 8013a28:	a201      	add	r2, pc, #4	@ (adr r2, 8013a30 <Custom_STM_Event_Handler+0x3c>)
 8013a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a2e:	bf00      	nop
 8013a30:	08013a9d 	.word	0x08013a9d
 8013a34:	08013d63 	.word	0x08013d63
 8013a38:	08013d63 	.word	0x08013d63
 8013a3c:	08013d63 	.word	0x08013d63
 8013a40:	08013d63 	.word	0x08013d63
 8013a44:	08013d63 	.word	0x08013d63
 8013a48:	08013d63 	.word	0x08013d63
 8013a4c:	08013d63 	.word	0x08013d63
 8013a50:	08013d63 	.word	0x08013d63
 8013a54:	08013d63 	.word	0x08013d63
 8013a58:	08013d63 	.word	0x08013d63
 8013a5c:	08013d63 	.word	0x08013d63
 8013a60:	08013d63 	.word	0x08013d63
 8013a64:	08013d63 	.word	0x08013d63
 8013a68:	08013d63 	.word	0x08013d63
 8013a6c:	08013d63 	.word	0x08013d63
 8013a70:	08013d63 	.word	0x08013d63
 8013a74:	08013d63 	.word	0x08013d63
 8013a78:	08013d63 	.word	0x08013d63
 8013a7c:	08013ceb 	.word	0x08013ceb
 8013a80:	08013d63 	.word	0x08013d63
 8013a84:	08013d63 	.word	0x08013d63
 8013a88:	08013d63 	.word	0x08013d63
 8013a8c:	08013d63 	.word	0x08013d63
 8013a90:	08013d63 	.word	0x08013d63
 8013a94:	08013d63 	.word	0x08013d63
 8013a98:	08013d45 	.word	0x08013d45
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8013a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a9e:	3302      	adds	r3, #2
 8013aa0:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013aa2:	6a3b      	ldr	r3, [r7, #32]
 8013aa4:	885b      	ldrh	r3, [r3, #2]
 8013aa6:	b29b      	uxth	r3, r3
 8013aa8:	461a      	mov	r2, r3
 8013aaa:	4ba0      	ldr	r3, [pc, #640]	@ (8013d2c <Custom_STM_Event_Handler+0x338>)
 8013aac:	885b      	ldrh	r3, [r3, #2]
 8013aae:	3302      	adds	r3, #2
 8013ab0:	429a      	cmp	r2, r3
 8013ab2:	d119      	bne.n	8013ae8 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8013aba:	6a3b      	ldr	r3, [r7, #32]
 8013abc:	7a1b      	ldrb	r3, [r3, #8]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d002      	beq.n	8013ac8 <Custom_STM_Event_Handler+0xd4>
 8013ac2:	2b01      	cmp	r3, #1
 8013ac4:	d008      	beq.n	8013ad8 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8013ac6:	e10f      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT;
 8013ac8:	2301      	movs	r3, #1
 8013aca:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013acc:	f107 030c 	add.w	r3, r7, #12
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7ff ff29 	bl	8013928 <Custom_STM_App_Notification>
                break;
 8013ad6:	e107      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT;
 8013ad8:	2300      	movs	r3, #0
 8013ada:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013adc:	f107 030c 	add.w	r3, r7, #12
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f7ff ff21 	bl	8013928 <Custom_STM_App_Notification>
                break;
 8013ae6:	e0ff      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013ae8:	6a3b      	ldr	r3, [r7, #32]
 8013aea:	885b      	ldrh	r3, [r3, #2]
 8013aec:	b29b      	uxth	r3, r3
 8013aee:	461a      	mov	r2, r3
 8013af0:	4b8e      	ldr	r3, [pc, #568]	@ (8013d2c <Custom_STM_Event_Handler+0x338>)
 8013af2:	889b      	ldrh	r3, [r3, #4]
 8013af4:	3302      	adds	r3, #2
 8013af6:	429a      	cmp	r2, r3
 8013af8:	d119      	bne.n	8013b2e <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013afa:	2301      	movs	r3, #1
 8013afc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8013b00:	6a3b      	ldr	r3, [r7, #32]
 8013b02:	7a1b      	ldrb	r3, [r3, #8]
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d002      	beq.n	8013b0e <Custom_STM_Event_Handler+0x11a>
 8013b08:	2b01      	cmp	r3, #1
 8013b0a:	d008      	beq.n	8013b1e <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8013b0c:	e0ec      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_DISABLED_EVT;
 8013b0e:	2303      	movs	r3, #3
 8013b10:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013b12:	f107 030c 	add.w	r3, r7, #12
 8013b16:	4618      	mov	r0, r3
 8013b18:	f7ff ff06 	bl	8013928 <Custom_STM_App_Notification>
                break;
 8013b1c:	e0e4      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_ENABLED_EVT;
 8013b1e:	2302      	movs	r3, #2
 8013b20:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013b22:	f107 030c 	add.w	r3, r7, #12
 8013b26:	4618      	mov	r0, r3
 8013b28:	f7ff fefe 	bl	8013928 <Custom_STM_App_Notification>
                break;
 8013b2c:	e0dc      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013b2e:	6a3b      	ldr	r3, [r7, #32]
 8013b30:	885b      	ldrh	r3, [r3, #2]
 8013b32:	b29b      	uxth	r3, r3
 8013b34:	461a      	mov	r2, r3
 8013b36:	4b7d      	ldr	r3, [pc, #500]	@ (8013d2c <Custom_STM_Event_Handler+0x338>)
 8013b38:	891b      	ldrh	r3, [r3, #8]
 8013b3a:	3302      	adds	r3, #2
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d119      	bne.n	8013b74 <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013b40:	2301      	movs	r3, #1
 8013b42:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8013b46:	6a3b      	ldr	r3, [r7, #32]
 8013b48:	7a1b      	ldrb	r3, [r3, #8]
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d002      	beq.n	8013b54 <Custom_STM_Event_Handler+0x160>
 8013b4e:	2b01      	cmp	r3, #1
 8013b50:	d008      	beq.n	8013b64 <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 8013b52:	e0c9      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT;
 8013b54:	2306      	movs	r3, #6
 8013b56:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013b58:	f107 030c 	add.w	r3, r7, #12
 8013b5c:	4618      	mov	r0, r3
 8013b5e:	f7ff fee3 	bl	8013928 <Custom_STM_App_Notification>
                break;
 8013b62:	e0c1      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT;
 8013b64:	2305      	movs	r3, #5
 8013b66:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013b68:	f107 030c 	add.w	r3, r7, #12
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7ff fedb 	bl	8013928 <Custom_STM_App_Notification>
                break;
 8013b72:	e0b9      	b.n	8013ce8 <Custom_STM_Event_Handler+0x2f4>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013b74:	6a3b      	ldr	r3, [r7, #32]
 8013b76:	885b      	ldrh	r3, [r3, #2]
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	461a      	mov	r2, r3
 8013b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8013d2c <Custom_STM_Event_Handler+0x338>)
 8013b7e:	88db      	ldrh	r3, [r3, #6]
 8013b80:	3301      	adds	r3, #1
 8013b82:	429a      	cmp	r2, r3
 8013b84:	f040 80ef 	bne.w	8013d66 <Custom_STM_Event_Handler+0x372>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013b88:	2301      	movs	r3, #1
 8013b8a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */



            memcpy (tsCmd.u8RxCmd, attribute_modified->Attr_Data, 10);
 8013b8e:	6a3b      	ldr	r3, [r7, #32]
 8013b90:	f103 0208 	add.w	r2, r3, #8
 8013b94:	4b66      	ldr	r3, [pc, #408]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013b96:	3301      	adds	r3, #1
 8013b98:	6810      	ldr	r0, [r2, #0]
 8013b9a:	6851      	ldr	r1, [r2, #4]
 8013b9c:	6018      	str	r0, [r3, #0]
 8013b9e:	6059      	str	r1, [r3, #4]
 8013ba0:	8912      	ldrh	r2, [r2, #8]
 8013ba2:	811a      	strh	r2, [r3, #8]
            printf (tsCmd.c8RxCmd, tsCmd.u8RxCmd, 10);
 8013ba4:	220a      	movs	r2, #10
 8013ba6:	4963      	ldr	r1, [pc, #396]	@ (8013d34 <Custom_STM_Event_Handler+0x340>)
 8013ba8:	4863      	ldr	r0, [pc, #396]	@ (8013d38 <Custom_STM_Event_Handler+0x344>)
 8013baa:	f001 ff6f 	bl	8015a8c <iprintf>
        	//DIAG( "CMD In -> %c%c%c%c%c%c%d%c %d%d\r\n", tsCmd.u8RxCmd[0], tsCmd.u8RxCmd[1], tsCmd.u8RxCmd[2], tsCmd.u8RxCmd[3], tsCmd.u8RxCmd[4], tsCmd.u8RxCmd[5], tsCmd.u8RxCmd[6], tsCmd.u8RxCmd[7], tsCmd.u8RxCmd[8], tsCmd.u8RxCmd[9] );

            char str[]="";
 8013bae:	2300      	movs	r3, #0
 8013bb0:	723b      	strb	r3, [r7, #8]
            for (uint8_t i=0 ; i < 10 ; i++)
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013bb8:	e090      	b.n	8013cdc <Custom_STM_Event_Handler+0x2e8>
            {
            	// Check for CMD:  'SN'
            	if( strncmp( &tsCmd.u8RxCmd[i], "WS,", 3 ) == 0 )
 8013bba:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013bbe:	4a5c      	ldr	r2, [pc, #368]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013bc0:	4413      	add	r3, r2
 8013bc2:	3301      	adds	r3, #1
 8013bc4:	2203      	movs	r2, #3
 8013bc6:	495d      	ldr	r1, [pc, #372]	@ (8013d3c <Custom_STM_Event_Handler+0x348>)
 8013bc8:	4618      	mov	r0, r3
 8013bca:	f002 f8ef 	bl	8015dac <strncmp>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d17e      	bne.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
                    {
							 if (tsCmd.u8RxCmd[8] == STOP)			{ tsCmd.MODE 	= Stop;}
 8013bd4:	4b56      	ldr	r3, [pc, #344]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013bd6:	7a5b      	ldrb	r3, [r3, #9]
 8013bd8:	2b01      	cmp	r3, #1
 8013bda:	d103      	bne.n	8013be4 <Custom_STM_Event_Handler+0x1f0>
 8013bdc:	4b54      	ldr	r3, [pc, #336]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013bde:	2200      	movs	r2, #0
 8013be0:	755a      	strb	r2, [r3, #21]
 8013be2:	e076      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == START)			{ tsCmd.MODE 	= Start;}
 8013be4:	4b52      	ldr	r3, [pc, #328]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013be6:	7a5b      	ldrb	r3, [r3, #9]
 8013be8:	2b02      	cmp	r3, #2
 8013bea:	d103      	bne.n	8013bf4 <Custom_STM_Event_Handler+0x200>
 8013bec:	4b50      	ldr	r3, [pc, #320]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013bee:	2201      	movs	r2, #1
 8013bf0:	755a      	strb	r2, [r3, #21]
 8013bf2:	e06e      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_ON)		{ tsCmd.ECG 	= true; }
 8013bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013bf6:	7a5b      	ldrb	r3, [r3, #9]
 8013bf8:	2b03      	cmp	r3, #3
 8013bfa:	d103      	bne.n	8013c04 <Custom_STM_Event_Handler+0x210>
 8013bfc:	4b4c      	ldr	r3, [pc, #304]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013bfe:	2201      	movs	r2, #1
 8013c00:	761a      	strb	r2, [r3, #24]
 8013c02:	e066      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_OFF)		{ tsCmd.ECG 	= false;}
 8013c04:	4b4a      	ldr	r3, [pc, #296]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c06:	7a5b      	ldrb	r3, [r3, #9]
 8013c08:	2b04      	cmp	r3, #4
 8013c0a:	d103      	bne.n	8013c14 <Custom_STM_Event_Handler+0x220>
 8013c0c:	4b48      	ldr	r3, [pc, #288]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c0e:	2200      	movs	r2, #0
 8013c10:	761a      	strb	r2, [r3, #24]
 8013c12:	e05e      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_ON)	{ tsCmd.ECG_N50 = true;}
 8013c14:	4b46      	ldr	r3, [pc, #280]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c16:	7a5b      	ldrb	r3, [r3, #9]
 8013c18:	2b05      	cmp	r3, #5
 8013c1a:	d103      	bne.n	8013c24 <Custom_STM_Event_Handler+0x230>
 8013c1c:	4b44      	ldr	r3, [pc, #272]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c1e:	2201      	movs	r2, #1
 8013c20:	765a      	strb	r2, [r3, #25]
 8013c22:	e056      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_N50_OFF)	{ tsCmd.ECG_N50 = false;}
 8013c24:	4b42      	ldr	r3, [pc, #264]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c26:	7a5b      	ldrb	r3, [r3, #9]
 8013c28:	2b06      	cmp	r3, #6
 8013c2a:	d103      	bne.n	8013c34 <Custom_STM_Event_Handler+0x240>
 8013c2c:	4b40      	ldr	r3, [pc, #256]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c2e:	2200      	movs	r2, #0
 8013c30:	765a      	strb	r2, [r3, #25]
 8013c32:	e04e      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_ON)	{ tsCmd.ECG_HPF = true;}
 8013c34:	4b3e      	ldr	r3, [pc, #248]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c36:	7a5b      	ldrb	r3, [r3, #9]
 8013c38:	2b07      	cmp	r3, #7
 8013c3a:	d103      	bne.n	8013c44 <Custom_STM_Event_Handler+0x250>
 8013c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c3e:	2201      	movs	r2, #1
 8013c40:	769a      	strb	r2, [r3, #26]
 8013c42:	e046      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == ECG_HPF_OFF)	{ tsCmd.ECG_HPF = false;}
 8013c44:	4b3a      	ldr	r3, [pc, #232]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c46:	7a5b      	ldrb	r3, [r3, #9]
 8013c48:	2b08      	cmp	r3, #8
 8013c4a:	d103      	bne.n	8013c54 <Custom_STM_Event_Handler+0x260>
 8013c4c:	4b38      	ldr	r3, [pc, #224]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c4e:	2200      	movs	r2, #0
 8013c50:	769a      	strb	r2, [r3, #26]
 8013c52:	e03e      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_ON)		{ tsCmd.MCG 	= true;}
 8013c54:	4b36      	ldr	r3, [pc, #216]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c56:	7a5b      	ldrb	r3, [r3, #9]
 8013c58:	2b09      	cmp	r3, #9
 8013c5a:	d103      	bne.n	8013c64 <Custom_STM_Event_Handler+0x270>
 8013c5c:	4b34      	ldr	r3, [pc, #208]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c5e:	2201      	movs	r2, #1
 8013c60:	76da      	strb	r2, [r3, #27]
 8013c62:	e036      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_OFF)		{ tsCmd.MCG 	= false;}
 8013c64:	4b32      	ldr	r3, [pc, #200]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c66:	7a5b      	ldrb	r3, [r3, #9]
 8013c68:	2b0a      	cmp	r3, #10
 8013c6a:	d103      	bne.n	8013c74 <Custom_STM_Event_Handler+0x280>
 8013c6c:	4b30      	ldr	r3, [pc, #192]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c6e:	2200      	movs	r2, #0
 8013c70:	76da      	strb	r2, [r3, #27]
 8013c72:	e02e      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_ON)	{ tsCmd.MCG_N50 = true;}
 8013c74:	4b2e      	ldr	r3, [pc, #184]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c76:	7a5b      	ldrb	r3, [r3, #9]
 8013c78:	2b0b      	cmp	r3, #11
 8013c7a:	d103      	bne.n	8013c84 <Custom_STM_Event_Handler+0x290>
 8013c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c7e:	2201      	movs	r2, #1
 8013c80:	771a      	strb	r2, [r3, #28]
 8013c82:	e026      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_N50_OFF)	{ tsCmd.MCG_N50 = false;}
 8013c84:	4b2a      	ldr	r3, [pc, #168]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c86:	7a5b      	ldrb	r3, [r3, #9]
 8013c88:	2b0c      	cmp	r3, #12
 8013c8a:	d103      	bne.n	8013c94 <Custom_STM_Event_Handler+0x2a0>
 8013c8c:	4b28      	ldr	r3, [pc, #160]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c8e:	2200      	movs	r2, #0
 8013c90:	771a      	strb	r2, [r3, #28]
 8013c92:	e01e      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_ON)	{ tsCmd.MCG_HPF = true;}
 8013c94:	4b26      	ldr	r3, [pc, #152]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c96:	7a5b      	ldrb	r3, [r3, #9]
 8013c98:	2b0d      	cmp	r3, #13
 8013c9a:	d103      	bne.n	8013ca4 <Custom_STM_Event_Handler+0x2b0>
 8013c9c:	4b24      	ldr	r3, [pc, #144]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013c9e:	2201      	movs	r2, #1
 8013ca0:	775a      	strb	r2, [r3, #29]
 8013ca2:	e016      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == MCG_HPF_OFF)	{ tsCmd.MCG_HPF = false;}
 8013ca4:	4b22      	ldr	r3, [pc, #136]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013ca6:	7a5b      	ldrb	r3, [r3, #9]
 8013ca8:	2b0e      	cmp	r3, #14
 8013caa:	d103      	bne.n	8013cb4 <Custom_STM_Event_Handler+0x2c0>
 8013cac:	4b20      	ldr	r3, [pc, #128]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	775a      	strb	r2, [r3, #29]
 8013cb2:	e00e      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_ON)		{ tsCmd.LED 	= true; }
 8013cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013cb6:	7a5b      	ldrb	r3, [r3, #9]
 8013cb8:	2b0f      	cmp	r3, #15
 8013cba:	d103      	bne.n	8013cc4 <Custom_STM_Event_Handler+0x2d0>
 8013cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	75da      	strb	r2, [r3, #23]
 8013cc2:	e006      	b.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
						else if (tsCmd.u8RxCmd[8] == LED_OFF)  		{ tsCmd.LED 	= false; }
 8013cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013cc6:	7a5b      	ldrb	r3, [r3, #9]
 8013cc8:	2b10      	cmp	r3, #16
 8013cca:	d102      	bne.n	8013cd2 <Custom_STM_Event_Handler+0x2de>
 8013ccc:	4b18      	ldr	r3, [pc, #96]	@ (8013d30 <Custom_STM_Event_Handler+0x33c>)
 8013cce:	2200      	movs	r2, #0
 8013cd0:	75da      	strb	r2, [r3, #23]
            for (uint8_t i=0 ; i < 10 ; i++)
 8013cd2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013cd6:	3301      	adds	r3, #1
 8013cd8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013cdc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013ce0:	2b09      	cmp	r3, #9
 8013ce2:	f67f af6a 	bls.w	8013bba <Custom_STM_Event_Handler+0x1c6>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8013ce6:	e03e      	b.n	8013d66 <Custom_STM_Event_Handler+0x372>
 8013ce8:	e03d      	b.n	8013d66 <Custom_STM_Event_Handler+0x372>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8013cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cec:	3302      	adds	r3, #2
 8013cee:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013cf2:	885b      	ldrh	r3, [r3, #2]
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8013d2c <Custom_STM_Event_Handler+0x338>)
 8013cfa:	895b      	ldrh	r3, [r3, #10]
 8013cfc:	3301      	adds	r3, #1
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d133      	bne.n	8013d6a <Custom_STM_Event_Handler+0x376>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013d02:	2301      	movs	r3, #1
 8013d04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 8013d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d0a:	881b      	ldrh	r3, [r3, #0]
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fc fd68 	bl	80107e4 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */


 			aci_gatt_update_char_value(	CustomContext.CustomS_DataHdle,
 8013d14:	4b05      	ldr	r3, [pc, #20]	@ (8013d2c <Custom_STM_Event_Handler+0x338>)
 8013d16:	8818      	ldrh	r0, [r3, #0]
 8013d18:	4b04      	ldr	r3, [pc, #16]	@ (8013d2c <Custom_STM_Event_Handler+0x338>)
 8013d1a:	8959      	ldrh	r1, [r3, #10]
 8013d1c:	4b08      	ldr	r3, [pc, #32]	@ (8013d40 <Custom_STM_Event_Handler+0x34c>)
 8013d1e:	9300      	str	r3, [sp, #0]
 8013d20:	2314      	movs	r3, #20
 8013d22:	2200      	movs	r2, #0
 8013d24:	f7fc fc60 	bl	80105e8 <aci_gatt_update_char_value>
            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 8013d28:	e01f      	b.n	8013d6a <Custom_STM_Event_Handler+0x376>
 8013d2a:	bf00      	nop
 8013d2c:	20001080 	.word	0x20001080
 8013d30:	20000ca0 	.word	0x20000ca0
 8013d34:	20000ca1 	.word	0x20000ca1
 8013d38:	20000cab 	.word	0x20000cab
 8013d3c:	080180cc 	.word	0x080180cc
 8013d40:	080180d0 	.word	0x080180d0
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8013d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013d46:	3302      	adds	r3, #2
 8013d48:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8013d4a:	2308      	movs	r3, #8
 8013d4c:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8013d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d50:	881b      	ldrh	r3, [r3, #0]
 8013d52:	b29b      	uxth	r3, r3
 8013d54:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8013d56:	f107 030c 	add.w	r3, r7, #12
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7ff fde4 	bl	8013928 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8013d60:	e004      	b.n	8013d6c <Custom_STM_Event_Handler+0x378>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8013d62:	bf00      	nop
 8013d64:	e004      	b.n	8013d70 <Custom_STM_Event_Handler+0x37c>
          break;
 8013d66:	bf00      	nop
 8013d68:	e002      	b.n	8013d70 <Custom_STM_Event_Handler+0x37c>
          break;
 8013d6a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013d6c:	e000      	b.n	8013d70 <Custom_STM_Event_Handler+0x37c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8013d6e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8013d70:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8013d74:	4618      	mov	r0, r3
 8013d76:	3738      	adds	r7, #56	@ 0x38
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	bd80      	pop	{r7, pc}

08013d7c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b08c      	sub	sp, #48	@ 0x30
 8013d80:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013d82:	2392      	movs	r3, #146	@ 0x92
 8013d84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8013d86:	48a5      	ldr	r0, [pc, #660]	@ (801401c <SVCCTL_InitCustomSvc+0x2a0>)
 8013d88:	f7fd f8d0 	bl	8010f2c <SVCCTL_RegisterSvcHandler>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 8013d8c:	230e      	movs	r3, #14
 8013d8e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 8013d90:	238f      	movs	r3, #143	@ 0x8f
 8013d92:	713b      	strb	r3, [r7, #4]
 8013d94:	23e5      	movs	r3, #229	@ 0xe5
 8013d96:	717b      	strb	r3, [r7, #5]
 8013d98:	23b3      	movs	r3, #179	@ 0xb3
 8013d9a:	71bb      	strb	r3, [r7, #6]
 8013d9c:	23d5      	movs	r3, #213	@ 0xd5
 8013d9e:	71fb      	strb	r3, [r7, #7]
 8013da0:	232e      	movs	r3, #46	@ 0x2e
 8013da2:	723b      	strb	r3, [r7, #8]
 8013da4:	237f      	movs	r3, #127	@ 0x7f
 8013da6:	727b      	strb	r3, [r7, #9]
 8013da8:	234a      	movs	r3, #74	@ 0x4a
 8013daa:	72bb      	strb	r3, [r7, #10]
 8013dac:	2398      	movs	r3, #152	@ 0x98
 8013dae:	72fb      	strb	r3, [r7, #11]
 8013db0:	232a      	movs	r3, #42	@ 0x2a
 8013db2:	733b      	strb	r3, [r7, #12]
 8013db4:	2348      	movs	r3, #72	@ 0x48
 8013db6:	737b      	strb	r3, [r7, #13]
 8013db8:	237a      	movs	r3, #122	@ 0x7a
 8013dba:	73bb      	strb	r3, [r7, #14]
 8013dbc:	23cc      	movs	r3, #204	@ 0xcc
 8013dbe:	73fb      	strb	r3, [r7, #15]
 8013dc0:	2300      	movs	r3, #0
 8013dc2:	743b      	strb	r3, [r7, #16]
 8013dc4:	2300      	movs	r3, #0
 8013dc6:	747b      	strb	r3, [r7, #17]
 8013dc8:	2300      	movs	r3, #0
 8013dca:	74bb      	strb	r3, [r7, #18]
 8013dcc:	2300      	movs	r3, #0
 8013dce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8013dd0:	7dbb      	ldrb	r3, [r7, #22]
 8013dd2:	1d39      	adds	r1, r7, #4
 8013dd4:	4a92      	ldr	r2, [pc, #584]	@ (8014020 <SVCCTL_InitCustomSvc+0x2a4>)
 8013dd6:	9200      	str	r2, [sp, #0]
 8013dd8:	2201      	movs	r2, #1
 8013dda:	2002      	movs	r0, #2
 8013ddc:	f7fc fa26 	bl	801022c <aci_gatt_add_service>
 8013de0:	4603      	mov	r3, r0
 8013de2:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomS_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013de4:	7dfb      	ldrb	r3, [r7, #23]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00f      	beq.n	8013e0a <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: S_DATA, error code: 0x%x \n\r", ret);
 8013dea:	488e      	ldr	r0, [pc, #568]	@ (8014024 <SVCCTL_InitCustomSvc+0x2a8>)
 8013dec:	f7fd ff1a 	bl	8011c24 <DbgTraceGetFileName>
 8013df0:	4601      	mov	r1, r0
 8013df2:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 8013df6:	4a8c      	ldr	r2, [pc, #560]	@ (8014028 <SVCCTL_InitCustomSvc+0x2ac>)
 8013df8:	488c      	ldr	r0, [pc, #560]	@ (801402c <SVCCTL_InitCustomSvc+0x2b0>)
 8013dfa:	f001 fe47 	bl	8015a8c <iprintf>
 8013dfe:	7dfb      	ldrb	r3, [r7, #23]
 8013e00:	4619      	mov	r1, r3
 8013e02:	488b      	ldr	r0, [pc, #556]	@ (8014030 <SVCCTL_InitCustomSvc+0x2b4>)
 8013e04:	f001 fe42 	bl	8015a8c <iprintf>
 8013e08:	e00c      	b.n	8013e24 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: S_DATA \n\r");
 8013e0a:	4886      	ldr	r0, [pc, #536]	@ (8014024 <SVCCTL_InitCustomSvc+0x2a8>)
 8013e0c:	f7fd ff0a 	bl	8011c24 <DbgTraceGetFileName>
 8013e10:	4601      	mov	r1, r0
 8013e12:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 8013e16:	4a84      	ldr	r2, [pc, #528]	@ (8014028 <SVCCTL_InitCustomSvc+0x2ac>)
 8013e18:	4884      	ldr	r0, [pc, #528]	@ (801402c <SVCCTL_InitCustomSvc+0x2b0>)
 8013e1a:	f001 fe37 	bl	8015a8c <iprintf>
 8013e1e:	4885      	ldr	r0, [pc, #532]	@ (8014034 <SVCCTL_InitCustomSvc+0x2b8>)
 8013e20:	f001 fe34 	bl	8015a8c <iprintf>
  }

  /**
   *  IMU_ACCEL
   */
  COPY_IMU_ACCEL_UUID(uuid.Char_UUID_128);
 8013e24:	2319      	movs	r3, #25
 8013e26:	713b      	strb	r3, [r7, #4]
 8013e28:	23ed      	movs	r3, #237	@ 0xed
 8013e2a:	717b      	strb	r3, [r7, #5]
 8013e2c:	2382      	movs	r3, #130	@ 0x82
 8013e2e:	71bb      	strb	r3, [r7, #6]
 8013e30:	23ae      	movs	r3, #174	@ 0xae
 8013e32:	71fb      	strb	r3, [r7, #7]
 8013e34:	23ed      	movs	r3, #237	@ 0xed
 8013e36:	723b      	strb	r3, [r7, #8]
 8013e38:	2321      	movs	r3, #33	@ 0x21
 8013e3a:	727b      	strb	r3, [r7, #9]
 8013e3c:	234c      	movs	r3, #76	@ 0x4c
 8013e3e:	72bb      	strb	r3, [r7, #10]
 8013e40:	239d      	movs	r3, #157	@ 0x9d
 8013e42:	72fb      	strb	r3, [r7, #11]
 8013e44:	2341      	movs	r3, #65	@ 0x41
 8013e46:	733b      	strb	r3, [r7, #12]
 8013e48:	2345      	movs	r3, #69	@ 0x45
 8013e4a:	737b      	strb	r3, [r7, #13]
 8013e4c:	2322      	movs	r3, #34	@ 0x22
 8013e4e:	73bb      	strb	r3, [r7, #14]
 8013e50:	238e      	movs	r3, #142	@ 0x8e
 8013e52:	73fb      	strb	r3, [r7, #15]
 8013e54:	2336      	movs	r3, #54	@ 0x36
 8013e56:	743b      	strb	r3, [r7, #16]
 8013e58:	232a      	movs	r3, #42	@ 0x2a
 8013e5a:	747b      	strb	r3, [r7, #17]
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	74bb      	strb	r3, [r7, #18]
 8013e60:	2300      	movs	r3, #0
 8013e62:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013e64:	4b6e      	ldr	r3, [pc, #440]	@ (8014020 <SVCCTL_InitCustomSvc+0x2a4>)
 8013e66:	8818      	ldrh	r0, [r3, #0]
 8013e68:	4b73      	ldr	r3, [pc, #460]	@ (8014038 <SVCCTL_InitCustomSvc+0x2bc>)
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	4619      	mov	r1, r3
 8013e6e:	1d3a      	adds	r2, r7, #4
 8013e70:	4b72      	ldr	r3, [pc, #456]	@ (801403c <SVCCTL_InitCustomSvc+0x2c0>)
 8013e72:	9305      	str	r3, [sp, #20]
 8013e74:	2300      	movs	r3, #0
 8013e76:	9304      	str	r3, [sp, #16]
 8013e78:	2310      	movs	r3, #16
 8013e7a:	9303      	str	r3, [sp, #12]
 8013e7c:	2307      	movs	r3, #7
 8013e7e:	9302      	str	r3, [sp, #8]
 8013e80:	2300      	movs	r3, #0
 8013e82:	9301      	str	r3, [sp, #4]
 8013e84:	2310      	movs	r3, #16
 8013e86:	9300      	str	r3, [sp, #0]
 8013e88:	460b      	mov	r3, r1
 8013e8a:	2102      	movs	r1, #2
 8013e8c:	f7fc faa4 	bl	80103d8 <aci_gatt_add_char>
 8013e90:	4603      	mov	r3, r0
 8013e92:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAccel_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013e94:	7dfb      	ldrb	r3, [r7, #23]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d00f      	beq.n	8013eba <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCEL_S, error code: 0x%x \n\r", ret);
 8013e9a:	4862      	ldr	r0, [pc, #392]	@ (8014024 <SVCCTL_InitCustomSvc+0x2a8>)
 8013e9c:	f7fd fec2 	bl	8011c24 <DbgTraceGetFileName>
 8013ea0:	4601      	mov	r1, r0
 8013ea2:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8013ea6:	4a60      	ldr	r2, [pc, #384]	@ (8014028 <SVCCTL_InitCustomSvc+0x2ac>)
 8013ea8:	4860      	ldr	r0, [pc, #384]	@ (801402c <SVCCTL_InitCustomSvc+0x2b0>)
 8013eaa:	f001 fdef 	bl	8015a8c <iprintf>
 8013eae:	7dfb      	ldrb	r3, [r7, #23]
 8013eb0:	4619      	mov	r1, r3
 8013eb2:	4863      	ldr	r0, [pc, #396]	@ (8014040 <SVCCTL_InitCustomSvc+0x2c4>)
 8013eb4:	f001 fdea 	bl	8015a8c <iprintf>
 8013eb8:	e00c      	b.n	8013ed4 <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCEL_S \n\r");
 8013eba:	485a      	ldr	r0, [pc, #360]	@ (8014024 <SVCCTL_InitCustomSvc+0x2a8>)
 8013ebc:	f7fd feb2 	bl	8011c24 <DbgTraceGetFileName>
 8013ec0:	4601      	mov	r1, r0
 8013ec2:	f44f 7305 	mov.w	r3, #532	@ 0x214
 8013ec6:	4a58      	ldr	r2, [pc, #352]	@ (8014028 <SVCCTL_InitCustomSvc+0x2ac>)
 8013ec8:	4858      	ldr	r0, [pc, #352]	@ (801402c <SVCCTL_InitCustomSvc+0x2b0>)
 8013eca:	f001 fddf 	bl	8015a8c <iprintf>
 8013ece:	485d      	ldr	r0, [pc, #372]	@ (8014044 <SVCCTL_InitCustomSvc+0x2c8>)
 8013ed0:	f001 fddc 	bl	8015a8c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  ECG_SENSOR
   */
  COPY_ECG_SENSOR_UUID(uuid.Char_UUID_128);
 8013ed4:	2319      	movs	r3, #25
 8013ed6:	713b      	strb	r3, [r7, #4]
 8013ed8:	23ed      	movs	r3, #237	@ 0xed
 8013eda:	717b      	strb	r3, [r7, #5]
 8013edc:	2382      	movs	r3, #130	@ 0x82
 8013ede:	71bb      	strb	r3, [r7, #6]
 8013ee0:	23ae      	movs	r3, #174	@ 0xae
 8013ee2:	71fb      	strb	r3, [r7, #7]
 8013ee4:	23ed      	movs	r3, #237	@ 0xed
 8013ee6:	723b      	strb	r3, [r7, #8]
 8013ee8:	2321      	movs	r3, #33	@ 0x21
 8013eea:	727b      	strb	r3, [r7, #9]
 8013eec:	234c      	movs	r3, #76	@ 0x4c
 8013eee:	72bb      	strb	r3, [r7, #10]
 8013ef0:	239d      	movs	r3, #157	@ 0x9d
 8013ef2:	72fb      	strb	r3, [r7, #11]
 8013ef4:	2341      	movs	r3, #65	@ 0x41
 8013ef6:	733b      	strb	r3, [r7, #12]
 8013ef8:	2345      	movs	r3, #69	@ 0x45
 8013efa:	737b      	strb	r3, [r7, #13]
 8013efc:	2322      	movs	r3, #34	@ 0x22
 8013efe:	73bb      	strb	r3, [r7, #14]
 8013f00:	238e      	movs	r3, #142	@ 0x8e
 8013f02:	73fb      	strb	r3, [r7, #15]
 8013f04:	2337      	movs	r3, #55	@ 0x37
 8013f06:	743b      	strb	r3, [r7, #16]
 8013f08:	232a      	movs	r3, #42	@ 0x2a
 8013f0a:	747b      	strb	r3, [r7, #17]
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	74bb      	strb	r3, [r7, #18]
 8013f10:	2300      	movs	r3, #0
 8013f12:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013f14:	4b42      	ldr	r3, [pc, #264]	@ (8014020 <SVCCTL_InitCustomSvc+0x2a4>)
 8013f16:	8818      	ldrh	r0, [r3, #0]
 8013f18:	4b4b      	ldr	r3, [pc, #300]	@ (8014048 <SVCCTL_InitCustomSvc+0x2cc>)
 8013f1a:	781b      	ldrb	r3, [r3, #0]
 8013f1c:	4619      	mov	r1, r3
 8013f1e:	1d3a      	adds	r2, r7, #4
 8013f20:	4b4a      	ldr	r3, [pc, #296]	@ (801404c <SVCCTL_InitCustomSvc+0x2d0>)
 8013f22:	9305      	str	r3, [sp, #20]
 8013f24:	2300      	movs	r3, #0
 8013f26:	9304      	str	r3, [sp, #16]
 8013f28:	2310      	movs	r3, #16
 8013f2a:	9303      	str	r3, [sp, #12]
 8013f2c:	2307      	movs	r3, #7
 8013f2e:	9302      	str	r3, [sp, #8]
 8013f30:	2300      	movs	r3, #0
 8013f32:	9301      	str	r3, [sp, #4]
 8013f34:	2310      	movs	r3, #16
 8013f36:	9300      	str	r3, [sp, #0]
 8013f38:	460b      	mov	r3, r1
 8013f3a:	2102      	movs	r1, #2
 8013f3c:	f7fc fa4c 	bl	80103d8 <aci_gatt_add_char>
 8013f40:	4603      	mov	r3, r0
 8013f42:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcg_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013f44:	7dfb      	ldrb	r3, [r7, #23]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d00f      	beq.n	8013f6a <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ECG_S, error code: 0x%x \n\r", ret);
 8013f4a:	4836      	ldr	r0, [pc, #216]	@ (8014024 <SVCCTL_InitCustomSvc+0x2a8>)
 8013f4c:	f7fd fe6a 	bl	8011c24 <DbgTraceGetFileName>
 8013f50:	4601      	mov	r1, r0
 8013f52:	f240 232a 	movw	r3, #554	@ 0x22a
 8013f56:	4a34      	ldr	r2, [pc, #208]	@ (8014028 <SVCCTL_InitCustomSvc+0x2ac>)
 8013f58:	4834      	ldr	r0, [pc, #208]	@ (801402c <SVCCTL_InitCustomSvc+0x2b0>)
 8013f5a:	f001 fd97 	bl	8015a8c <iprintf>
 8013f5e:	7dfb      	ldrb	r3, [r7, #23]
 8013f60:	4619      	mov	r1, r3
 8013f62:	483b      	ldr	r0, [pc, #236]	@ (8014050 <SVCCTL_InitCustomSvc+0x2d4>)
 8013f64:	f001 fd92 	bl	8015a8c <iprintf>
 8013f68:	e00c      	b.n	8013f84 <SVCCTL_InitCustomSvc+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ECG_S \n\r");
 8013f6a:	482e      	ldr	r0, [pc, #184]	@ (8014024 <SVCCTL_InitCustomSvc+0x2a8>)
 8013f6c:	f7fd fe5a 	bl	8011c24 <DbgTraceGetFileName>
 8013f70:	4601      	mov	r1, r0
 8013f72:	f240 232e 	movw	r3, #558	@ 0x22e
 8013f76:	4a2c      	ldr	r2, [pc, #176]	@ (8014028 <SVCCTL_InitCustomSvc+0x2ac>)
 8013f78:	482c      	ldr	r0, [pc, #176]	@ (801402c <SVCCTL_InitCustomSvc+0x2b0>)
 8013f7a:	f001 fd87 	bl	8015a8c <iprintf>
 8013f7e:	4835      	ldr	r0, [pc, #212]	@ (8014054 <SVCCTL_InitCustomSvc+0x2d8>)
 8013f80:	f001 fd84 	bl	8015a8c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  COMMAND
   */
  COPY_COMMAND_UUID(uuid.Char_UUID_128);
 8013f84:	2319      	movs	r3, #25
 8013f86:	713b      	strb	r3, [r7, #4]
 8013f88:	23ed      	movs	r3, #237	@ 0xed
 8013f8a:	717b      	strb	r3, [r7, #5]
 8013f8c:	2382      	movs	r3, #130	@ 0x82
 8013f8e:	71bb      	strb	r3, [r7, #6]
 8013f90:	23ae      	movs	r3, #174	@ 0xae
 8013f92:	71fb      	strb	r3, [r7, #7]
 8013f94:	23ed      	movs	r3, #237	@ 0xed
 8013f96:	723b      	strb	r3, [r7, #8]
 8013f98:	2321      	movs	r3, #33	@ 0x21
 8013f9a:	727b      	strb	r3, [r7, #9]
 8013f9c:	234c      	movs	r3, #76	@ 0x4c
 8013f9e:	72bb      	strb	r3, [r7, #10]
 8013fa0:	239d      	movs	r3, #157	@ 0x9d
 8013fa2:	72fb      	strb	r3, [r7, #11]
 8013fa4:	2341      	movs	r3, #65	@ 0x41
 8013fa6:	733b      	strb	r3, [r7, #12]
 8013fa8:	2345      	movs	r3, #69	@ 0x45
 8013faa:	737b      	strb	r3, [r7, #13]
 8013fac:	2322      	movs	r3, #34	@ 0x22
 8013fae:	73bb      	strb	r3, [r7, #14]
 8013fb0:	238e      	movs	r3, #142	@ 0x8e
 8013fb2:	73fb      	strb	r3, [r7, #15]
 8013fb4:	2338      	movs	r3, #56	@ 0x38
 8013fb6:	743b      	strb	r3, [r7, #16]
 8013fb8:	232a      	movs	r3, #42	@ 0x2a
 8013fba:	747b      	strb	r3, [r7, #17]
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	74bb      	strb	r3, [r7, #18]
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013fc4:	4b16      	ldr	r3, [pc, #88]	@ (8014020 <SVCCTL_InitCustomSvc+0x2a4>)
 8013fc6:	8818      	ldrh	r0, [r3, #0]
 8013fc8:	4b23      	ldr	r3, [pc, #140]	@ (8014058 <SVCCTL_InitCustomSvc+0x2dc>)
 8013fca:	781b      	ldrb	r3, [r3, #0]
 8013fcc:	4619      	mov	r1, r3
 8013fce:	1d3a      	adds	r2, r7, #4
 8013fd0:	4b22      	ldr	r3, [pc, #136]	@ (801405c <SVCCTL_InitCustomSvc+0x2e0>)
 8013fd2:	9305      	str	r3, [sp, #20]
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	9304      	str	r3, [sp, #16]
 8013fd8:	2310      	movs	r3, #16
 8013fda:	9303      	str	r3, [sp, #12]
 8013fdc:	2301      	movs	r3, #1
 8013fde:	9302      	str	r3, [sp, #8]
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	2308      	movs	r3, #8
 8013fe6:	9300      	str	r3, [sp, #0]
 8013fe8:	460b      	mov	r3, r1
 8013fea:	2102      	movs	r1, #2
 8013fec:	f7fc f9f4 	bl	80103d8 <aci_gatt_add_char>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCmdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013ff4:	7dfb      	ldrb	r3, [r7, #23]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d034      	beq.n	8014064 <SVCCTL_InitCustomSvc+0x2e8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CMD, error code: 0x%x \n\r", ret);
 8013ffa:	480a      	ldr	r0, [pc, #40]	@ (8014024 <SVCCTL_InitCustomSvc+0x2a8>)
 8013ffc:	f7fd fe12 	bl	8011c24 <DbgTraceGetFileName>
 8014000:	4601      	mov	r1, r0
 8014002:	f44f 7311 	mov.w	r3, #580	@ 0x244
 8014006:	4a08      	ldr	r2, [pc, #32]	@ (8014028 <SVCCTL_InitCustomSvc+0x2ac>)
 8014008:	4808      	ldr	r0, [pc, #32]	@ (801402c <SVCCTL_InitCustomSvc+0x2b0>)
 801400a:	f001 fd3f 	bl	8015a8c <iprintf>
 801400e:	7dfb      	ldrb	r3, [r7, #23]
 8014010:	4619      	mov	r1, r3
 8014012:	4813      	ldr	r0, [pc, #76]	@ (8014060 <SVCCTL_InitCustomSvc+0x2e4>)
 8014014:	f001 fd3a 	bl	8015a8c <iprintf>
 8014018:	e031      	b.n	801407e <SVCCTL_InitCustomSvc+0x302>
 801401a:	bf00      	nop
 801401c:	080139f5 	.word	0x080139f5
 8014020:	20001080 	.word	0x20001080
 8014024:	080180e4 	.word	0x080180e4
 8014028:	080189a8 	.word	0x080189a8
 801402c:	08018104 	.word	0x08018104
 8014030:	08018118 	.word	0x08018118
 8014034:	08018160 	.word	0x08018160
 8014038:	200000b7 	.word	0x200000b7
 801403c:	20001082 	.word	0x20001082
 8014040:	08018194 	.word	0x08018194
 8014044:	080181dc 	.word	0x080181dc
 8014048:	200000b8 	.word	0x200000b8
 801404c:	20001084 	.word	0x20001084
 8014050:	08018210 	.word	0x08018210
 8014054:	08018254 	.word	0x08018254
 8014058:	200000b9 	.word	0x200000b9
 801405c:	20001086 	.word	0x20001086
 8014060:	08018288 	.word	0x08018288
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CMD \n\r");
 8014064:	4860      	ldr	r0, [pc, #384]	@ (80141e8 <SVCCTL_InitCustomSvc+0x46c>)
 8014066:	f7fd fddd 	bl	8011c24 <DbgTraceGetFileName>
 801406a:	4601      	mov	r1, r0
 801406c:	f44f 7312 	mov.w	r3, #584	@ 0x248
 8014070:	4a5e      	ldr	r2, [pc, #376]	@ (80141ec <SVCCTL_InitCustomSvc+0x470>)
 8014072:	485f      	ldr	r0, [pc, #380]	@ (80141f0 <SVCCTL_InitCustomSvc+0x474>)
 8014074:	f001 fd0a 	bl	8015a8c <iprintf>
 8014078:	485e      	ldr	r0, [pc, #376]	@ (80141f4 <SVCCTL_InitCustomSvc+0x478>)
 801407a:	f001 fd07 	bl	8015a8c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  ALL_SENSOR
   */
  COPY_ALL_SENSOR_UUID(uuid.Char_UUID_128);
 801407e:	2319      	movs	r3, #25
 8014080:	713b      	strb	r3, [r7, #4]
 8014082:	23ed      	movs	r3, #237	@ 0xed
 8014084:	717b      	strb	r3, [r7, #5]
 8014086:	2382      	movs	r3, #130	@ 0x82
 8014088:	71bb      	strb	r3, [r7, #6]
 801408a:	23ae      	movs	r3, #174	@ 0xae
 801408c:	71fb      	strb	r3, [r7, #7]
 801408e:	23ed      	movs	r3, #237	@ 0xed
 8014090:	723b      	strb	r3, [r7, #8]
 8014092:	2321      	movs	r3, #33	@ 0x21
 8014094:	727b      	strb	r3, [r7, #9]
 8014096:	234c      	movs	r3, #76	@ 0x4c
 8014098:	72bb      	strb	r3, [r7, #10]
 801409a:	239d      	movs	r3, #157	@ 0x9d
 801409c:	72fb      	strb	r3, [r7, #11]
 801409e:	2341      	movs	r3, #65	@ 0x41
 80140a0:	733b      	strb	r3, [r7, #12]
 80140a2:	2345      	movs	r3, #69	@ 0x45
 80140a4:	737b      	strb	r3, [r7, #13]
 80140a6:	2322      	movs	r3, #34	@ 0x22
 80140a8:	73bb      	strb	r3, [r7, #14]
 80140aa:	238e      	movs	r3, #142	@ 0x8e
 80140ac:	73fb      	strb	r3, [r7, #15]
 80140ae:	2339      	movs	r3, #57	@ 0x39
 80140b0:	743b      	strb	r3, [r7, #16]
 80140b2:	232a      	movs	r3, #42	@ 0x2a
 80140b4:	747b      	strb	r3, [r7, #17]
 80140b6:	2300      	movs	r3, #0
 80140b8:	74bb      	strb	r3, [r7, #18]
 80140ba:	2300      	movs	r3, #0
 80140bc:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 80140be:	4b4e      	ldr	r3, [pc, #312]	@ (80141f8 <SVCCTL_InitCustomSvc+0x47c>)
 80140c0:	8818      	ldrh	r0, [r3, #0]
 80140c2:	4b4e      	ldr	r3, [pc, #312]	@ (80141fc <SVCCTL_InitCustomSvc+0x480>)
 80140c4:	781b      	ldrb	r3, [r3, #0]
 80140c6:	4619      	mov	r1, r3
 80140c8:	1d3a      	adds	r2, r7, #4
 80140ca:	4b4d      	ldr	r3, [pc, #308]	@ (8014200 <SVCCTL_InitCustomSvc+0x484>)
 80140cc:	9305      	str	r3, [sp, #20]
 80140ce:	2300      	movs	r3, #0
 80140d0:	9304      	str	r3, [sp, #16]
 80140d2:	2310      	movs	r3, #16
 80140d4:	9303      	str	r3, [sp, #12]
 80140d6:	2307      	movs	r3, #7
 80140d8:	9302      	str	r3, [sp, #8]
 80140da:	2300      	movs	r3, #0
 80140dc:	9301      	str	r3, [sp, #4]
 80140de:	2310      	movs	r3, #16
 80140e0:	9300      	str	r3, [sp, #0]
 80140e2:	460b      	mov	r3, r1
 80140e4:	2102      	movs	r1, #2
 80140e6:	f7fc f977 	bl	80103d8 <aci_gatt_add_char>
 80140ea:	4603      	mov	r3, r0
 80140ec:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAll_SensHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80140ee:	7dfb      	ldrb	r3, [r7, #23]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d00f      	beq.n	8014114 <SVCCTL_InitCustomSvc+0x398>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ALL_SENS, error code: 0x%x \n\r", ret);
 80140f4:	483c      	ldr	r0, [pc, #240]	@ (80141e8 <SVCCTL_InitCustomSvc+0x46c>)
 80140f6:	f7fd fd95 	bl	8011c24 <DbgTraceGetFileName>
 80140fa:	4601      	mov	r1, r0
 80140fc:	f240 235e 	movw	r3, #606	@ 0x25e
 8014100:	4a3a      	ldr	r2, [pc, #232]	@ (80141ec <SVCCTL_InitCustomSvc+0x470>)
 8014102:	483b      	ldr	r0, [pc, #236]	@ (80141f0 <SVCCTL_InitCustomSvc+0x474>)
 8014104:	f001 fcc2 	bl	8015a8c <iprintf>
 8014108:	7dfb      	ldrb	r3, [r7, #23]
 801410a:	4619      	mov	r1, r3
 801410c:	483d      	ldr	r0, [pc, #244]	@ (8014204 <SVCCTL_InitCustomSvc+0x488>)
 801410e:	f001 fcbd 	bl	8015a8c <iprintf>
 8014112:	e00c      	b.n	801412e <SVCCTL_InitCustomSvc+0x3b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ALL_SENS \n\r");
 8014114:	4834      	ldr	r0, [pc, #208]	@ (80141e8 <SVCCTL_InitCustomSvc+0x46c>)
 8014116:	f7fd fd85 	bl	8011c24 <DbgTraceGetFileName>
 801411a:	4601      	mov	r1, r0
 801411c:	f240 2362 	movw	r3, #610	@ 0x262
 8014120:	4a32      	ldr	r2, [pc, #200]	@ (80141ec <SVCCTL_InitCustomSvc+0x470>)
 8014122:	4833      	ldr	r0, [pc, #204]	@ (80141f0 <SVCCTL_InitCustomSvc+0x474>)
 8014124:	f001 fcb2 	bl	8015a8c <iprintf>
 8014128:	4837      	ldr	r0, [pc, #220]	@ (8014208 <SVCCTL_InitCustomSvc+0x48c>)
 801412a:	f001 fcaf 	bl	8015a8c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  READ_DEVICE_INFO
   */
  COPY_READ_DEVICE_INFO_UUID(uuid.Char_UUID_128);
 801412e:	2319      	movs	r3, #25
 8014130:	713b      	strb	r3, [r7, #4]
 8014132:	23ed      	movs	r3, #237	@ 0xed
 8014134:	717b      	strb	r3, [r7, #5]
 8014136:	2382      	movs	r3, #130	@ 0x82
 8014138:	71bb      	strb	r3, [r7, #6]
 801413a:	23ae      	movs	r3, #174	@ 0xae
 801413c:	71fb      	strb	r3, [r7, #7]
 801413e:	23ed      	movs	r3, #237	@ 0xed
 8014140:	723b      	strb	r3, [r7, #8]
 8014142:	2321      	movs	r3, #33	@ 0x21
 8014144:	727b      	strb	r3, [r7, #9]
 8014146:	234c      	movs	r3, #76	@ 0x4c
 8014148:	72bb      	strb	r3, [r7, #10]
 801414a:	239d      	movs	r3, #157	@ 0x9d
 801414c:	72fb      	strb	r3, [r7, #11]
 801414e:	2341      	movs	r3, #65	@ 0x41
 8014150:	733b      	strb	r3, [r7, #12]
 8014152:	2345      	movs	r3, #69	@ 0x45
 8014154:	737b      	strb	r3, [r7, #13]
 8014156:	2322      	movs	r3, #34	@ 0x22
 8014158:	73bb      	strb	r3, [r7, #14]
 801415a:	238e      	movs	r3, #142	@ 0x8e
 801415c:	73fb      	strb	r3, [r7, #15]
 801415e:	2340      	movs	r3, #64	@ 0x40
 8014160:	743b      	strb	r3, [r7, #16]
 8014162:	232a      	movs	r3, #42	@ 0x2a
 8014164:	747b      	strb	r3, [r7, #17]
 8014166:	2300      	movs	r3, #0
 8014168:	74bb      	strb	r3, [r7, #18]
 801416a:	2300      	movs	r3, #0
 801416c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 801416e:	4b22      	ldr	r3, [pc, #136]	@ (80141f8 <SVCCTL_InitCustomSvc+0x47c>)
 8014170:	8818      	ldrh	r0, [r3, #0]
 8014172:	4b26      	ldr	r3, [pc, #152]	@ (801420c <SVCCTL_InitCustomSvc+0x490>)
 8014174:	781b      	ldrb	r3, [r3, #0]
 8014176:	4619      	mov	r1, r3
 8014178:	1d3a      	adds	r2, r7, #4
 801417a:	4b25      	ldr	r3, [pc, #148]	@ (8014210 <SVCCTL_InitCustomSvc+0x494>)
 801417c:	9305      	str	r3, [sp, #20]
 801417e:	2300      	movs	r3, #0
 8014180:	9304      	str	r3, [sp, #16]
 8014182:	2310      	movs	r3, #16
 8014184:	9303      	str	r3, [sp, #12]
 8014186:	2304      	movs	r3, #4
 8014188:	9302      	str	r3, [sp, #8]
 801418a:	2300      	movs	r3, #0
 801418c:	9301      	str	r3, [sp, #4]
 801418e:	2302      	movs	r3, #2
 8014190:	9300      	str	r3, [sp, #0]
 8014192:	460b      	mov	r3, r1
 8014194:	2102      	movs	r1, #2
 8014196:	f7fc f91f 	bl	80103d8 <aci_gatt_add_char>
 801419a:	4603      	mov	r3, r0
 801419c:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDevice_InfoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801419e:	7dfb      	ldrb	r3, [r7, #23]
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d00f      	beq.n	80141c4 <SVCCTL_InitCustomSvc+0x448>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DEVICE_INFO, error code: 0x%x \n\r", ret);
 80141a4:	4810      	ldr	r0, [pc, #64]	@ (80141e8 <SVCCTL_InitCustomSvc+0x46c>)
 80141a6:	f7fd fd3d 	bl	8011c24 <DbgTraceGetFileName>
 80141aa:	4601      	mov	r1, r0
 80141ac:	f44f 731e 	mov.w	r3, #632	@ 0x278
 80141b0:	4a0e      	ldr	r2, [pc, #56]	@ (80141ec <SVCCTL_InitCustomSvc+0x470>)
 80141b2:	480f      	ldr	r0, [pc, #60]	@ (80141f0 <SVCCTL_InitCustomSvc+0x474>)
 80141b4:	f001 fc6a 	bl	8015a8c <iprintf>
 80141b8:	7dfb      	ldrb	r3, [r7, #23]
 80141ba:	4619      	mov	r1, r3
 80141bc:	4815      	ldr	r0, [pc, #84]	@ (8014214 <SVCCTL_InitCustomSvc+0x498>)
 80141be:	f001 fc65 	bl	8015a8c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80141c2:	e00d      	b.n	80141e0 <SVCCTL_InitCustomSvc+0x464>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DEVICE_INFO \n\r");
 80141c4:	4808      	ldr	r0, [pc, #32]	@ (80141e8 <SVCCTL_InitCustomSvc+0x46c>)
 80141c6:	f7fd fd2d 	bl	8011c24 <DbgTraceGetFileName>
 80141ca:	4601      	mov	r1, r0
 80141cc:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 80141d0:	4a06      	ldr	r2, [pc, #24]	@ (80141ec <SVCCTL_InitCustomSvc+0x470>)
 80141d2:	4807      	ldr	r0, [pc, #28]	@ (80141f0 <SVCCTL_InitCustomSvc+0x474>)
 80141d4:	f001 fc5a 	bl	8015a8c <iprintf>
 80141d8:	480f      	ldr	r0, [pc, #60]	@ (8014218 <SVCCTL_InitCustomSvc+0x49c>)
 80141da:	f001 fc57 	bl	8015a8c <iprintf>
  return;
 80141de:	bf00      	nop
}
 80141e0:	3718      	adds	r7, #24
 80141e2:	46bd      	mov	sp, r7
 80141e4:	bd80      	pop	{r7, pc}
 80141e6:	bf00      	nop
 80141e8:	080180e4 	.word	0x080180e4
 80141ec:	080189a8 	.word	0x080189a8
 80141f0:	08018104 	.word	0x08018104
 80141f4:	080182cc 	.word	0x080182cc
 80141f8:	20001080 	.word	0x20001080
 80141fc:	200000ba 	.word	0x200000ba
 8014200:	20001088 	.word	0x20001088
 8014204:	080182fc 	.word	0x080182fc
 8014208:	08018344 	.word	0x08018344
 801420c:	200000bb 	.word	0x200000bb
 8014210:	2000108a 	.word	0x2000108a
 8014214:	0801837c 	.word	0x0801837c
 8014218:	080183c8 	.word	0x080183c8

0801421c <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b086      	sub	sp, #24
 8014220:	af02      	add	r7, sp, #8
 8014222:	4603      	mov	r3, r0
 8014224:	6039      	str	r1, [r7, #0]
 8014226:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014228:	2392      	movs	r3, #146	@ 0x92
 801422a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 801422c:	79fb      	ldrb	r3, [r7, #7]
 801422e:	2b04      	cmp	r3, #4
 8014230:	f200 8115 	bhi.w	801445e <Custom_STM_App_Update_Char+0x242>
 8014234:	a201      	add	r2, pc, #4	@ (adr r2, 801423c <Custom_STM_App_Update_Char+0x20>)
 8014236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801423a:	bf00      	nop
 801423c:	08014251 	.word	0x08014251
 8014240:	080142bd 	.word	0x080142bd
 8014244:	0801431b 	.word	0x0801431b
 8014248:	08014379 	.word	0x08014379
 801424c:	08014401 	.word	0x08014401
  {

    case CUSTOM_STM_ACCEL_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014250:	4b87      	ldr	r3, [pc, #540]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 8014252:	8818      	ldrh	r0, [r3, #0]
 8014254:	4b86      	ldr	r3, [pc, #536]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 8014256:	8859      	ldrh	r1, [r3, #2]
 8014258:	4b86      	ldr	r3, [pc, #536]	@ (8014474 <Custom_STM_App_Update_Char+0x258>)
 801425a:	781a      	ldrb	r2, [r3, #0]
 801425c:	683b      	ldr	r3, [r7, #0]
 801425e:	9300      	str	r3, [sp, #0]
 8014260:	4613      	mov	r3, r2
 8014262:	2200      	movs	r2, #0
 8014264:	f7fc f9c0 	bl	80105e8 <aci_gatt_update_char_value>
 8014268:	4603      	mov	r3, r0
 801426a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccel_SHdle,
                                       0, /* charValOffset */
                                       SizeAccel_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801426c:	7bfb      	ldrb	r3, [r7, #15]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d00f      	beq.n	8014292 <Custom_STM_App_Update_Char+0x76>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCEL_S command, result : 0x%x \n\r", ret);
 8014272:	4881      	ldr	r0, [pc, #516]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 8014274:	f7fd fcd6 	bl	8011c24 <DbgTraceGetFileName>
 8014278:	4601      	mov	r1, r0
 801427a:	f240 23a3 	movw	r3, #675	@ 0x2a3
 801427e:	4a7f      	ldr	r2, [pc, #508]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 8014280:	487f      	ldr	r0, [pc, #508]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 8014282:	f001 fc03 	bl	8015a8c <iprintf>
 8014286:	7bfb      	ldrb	r3, [r7, #15]
 8014288:	4619      	mov	r1, r3
 801428a:	487e      	ldr	r0, [pc, #504]	@ (8014484 <Custom_STM_App_Update_Char+0x268>)
 801428c:	f001 fbfe 	bl	8015a8c <iprintf>
 8014290:	e00c      	b.n	80142ac <Custom_STM_App_Update_Char+0x90>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCEL_S command\n\r");
 8014292:	4879      	ldr	r0, [pc, #484]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 8014294:	f7fd fcc6 	bl	8011c24 <DbgTraceGetFileName>
 8014298:	4601      	mov	r1, r0
 801429a:	f240 23a7 	movw	r3, #679	@ 0x2a7
 801429e:	4a77      	ldr	r2, [pc, #476]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 80142a0:	4877      	ldr	r0, [pc, #476]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 80142a2:	f001 fbf3 	bl	8015a8c <iprintf>
 80142a6:	4878      	ldr	r0, [pc, #480]	@ (8014488 <Custom_STM_App_Update_Char+0x26c>)
 80142a8:	f001 fbf0 	bl	8015a8c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      if (ret == BLE_STATUS_SUCCESS)
 80142ac:	7bfb      	ldrb	r3, [r7, #15]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	f040 80d7 	bne.w	8014462 <Custom_STM_App_Update_Char+0x246>
      {
    	  tsBle.ACCEL_XferComplete = true;
 80142b4:	4b75      	ldr	r3, [pc, #468]	@ (801448c <Custom_STM_App_Update_Char+0x270>)
 80142b6:	2201      	movs	r2, #1
 80142b8:	70da      	strb	r2, [r3, #3]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 80142ba:	e0d2      	b.n	8014462 <Custom_STM_App_Update_Char+0x246>

    case CUSTOM_STM_ECG_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80142bc:	4b6c      	ldr	r3, [pc, #432]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 80142be:	8818      	ldrh	r0, [r3, #0]
 80142c0:	4b6b      	ldr	r3, [pc, #428]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 80142c2:	8899      	ldrh	r1, [r3, #4]
 80142c4:	4b72      	ldr	r3, [pc, #456]	@ (8014490 <Custom_STM_App_Update_Char+0x274>)
 80142c6:	781a      	ldrb	r2, [r3, #0]
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	9300      	str	r3, [sp, #0]
 80142cc:	4613      	mov	r3, r2
 80142ce:	2200      	movs	r2, #0
 80142d0:	f7fc f98a 	bl	80105e8 <aci_gatt_update_char_value>
 80142d4:	4603      	mov	r3, r0
 80142d6:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcg_SHdle,
                                       0, /* charValOffset */
                                       SizeEcg_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80142d8:	7bfb      	ldrb	r3, [r7, #15]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d00f      	beq.n	80142fe <Custom_STM_App_Update_Char+0xe2>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ECG_S command, result : 0x%x \n\r", ret);
 80142de:	4866      	ldr	r0, [pc, #408]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 80142e0:	f7fd fca0 	bl	8011c24 <DbgTraceGetFileName>
 80142e4:	4601      	mov	r1, r0
 80142e6:	f240 23c5 	movw	r3, #709	@ 0x2c5
 80142ea:	4a64      	ldr	r2, [pc, #400]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 80142ec:	4864      	ldr	r0, [pc, #400]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 80142ee:	f001 fbcd 	bl	8015a8c <iprintf>
 80142f2:	7bfb      	ldrb	r3, [r7, #15]
 80142f4:	4619      	mov	r1, r3
 80142f6:	4867      	ldr	r0, [pc, #412]	@ (8014494 <Custom_STM_App_Update_Char+0x278>)
 80142f8:	f001 fbc8 	bl	8015a8c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 80142fc:	e0b2      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
 80142fe:	485e      	ldr	r0, [pc, #376]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 8014300:	f7fd fc90 	bl	8011c24 <DbgTraceGetFileName>
 8014304:	4601      	mov	r1, r0
 8014306:	f240 23c9 	movw	r3, #713	@ 0x2c9
 801430a:	4a5c      	ldr	r2, [pc, #368]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 801430c:	485c      	ldr	r0, [pc, #368]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 801430e:	f001 fbbd 	bl	8015a8c <iprintf>
 8014312:	4861      	ldr	r0, [pc, #388]	@ (8014498 <Custom_STM_App_Update_Char+0x27c>)
 8014314:	f001 fbba 	bl	8015a8c <iprintf>
      break;
 8014318:	e0a4      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_CMD:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 801431a:	4b55      	ldr	r3, [pc, #340]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 801431c:	8818      	ldrh	r0, [r3, #0]
 801431e:	4b54      	ldr	r3, [pc, #336]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 8014320:	88d9      	ldrh	r1, [r3, #6]
 8014322:	4b5e      	ldr	r3, [pc, #376]	@ (801449c <Custom_STM_App_Update_Char+0x280>)
 8014324:	781a      	ldrb	r2, [r3, #0]
 8014326:	683b      	ldr	r3, [r7, #0]
 8014328:	9300      	str	r3, [sp, #0]
 801432a:	4613      	mov	r3, r2
 801432c:	2200      	movs	r2, #0
 801432e:	f7fc f95b 	bl	80105e8 <aci_gatt_update_char_value>
 8014332:	4603      	mov	r3, r0
 8014334:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomCmdHdle,
                                       0, /* charValOffset */
                                       SizeCmd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014336:	7bfb      	ldrb	r3, [r7, #15]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d00f      	beq.n	801435c <Custom_STM_App_Update_Char+0x140>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CMD command, result : 0x%x \n\r", ret);
 801433c:	484e      	ldr	r0, [pc, #312]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 801433e:	f7fd fc71 	bl	8011c24 <DbgTraceGetFileName>
 8014342:	4601      	mov	r1, r0
 8014344:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8014348:	4a4c      	ldr	r2, [pc, #304]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 801434a:	484d      	ldr	r0, [pc, #308]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 801434c:	f001 fb9e 	bl	8015a8c <iprintf>
 8014350:	7bfb      	ldrb	r3, [r7, #15]
 8014352:	4619      	mov	r1, r3
 8014354:	4852      	ldr	r0, [pc, #328]	@ (80144a0 <Custom_STM_App_Update_Char+0x284>)
 8014356:	f001 fb99 	bl	8015a8c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 801435a:	e083      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
 801435c:	4846      	ldr	r0, [pc, #280]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 801435e:	f7fd fc61 	bl	8011c24 <DbgTraceGetFileName>
 8014362:	4601      	mov	r1, r0
 8014364:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 8014368:	4a44      	ldr	r2, [pc, #272]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 801436a:	4845      	ldr	r0, [pc, #276]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 801436c:	f001 fb8e 	bl	8015a8c <iprintf>
 8014370:	484c      	ldr	r0, [pc, #304]	@ (80144a4 <Custom_STM_App_Update_Char+0x288>)
 8014372:	f001 fb8b 	bl	8015a8c <iprintf>
      break;
 8014376:	e075      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_ALL_SENS:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014378:	4b3d      	ldr	r3, [pc, #244]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 801437a:	8818      	ldrh	r0, [r3, #0]
 801437c:	4b3c      	ldr	r3, [pc, #240]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 801437e:	8919      	ldrh	r1, [r3, #8]
 8014380:	4b49      	ldr	r3, [pc, #292]	@ (80144a8 <Custom_STM_App_Update_Char+0x28c>)
 8014382:	781a      	ldrb	r2, [r3, #0]
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	9300      	str	r3, [sp, #0]
 8014388:	4613      	mov	r3, r2
 801438a:	2200      	movs	r2, #0
 801438c:	f7fc f92c 	bl	80105e8 <aci_gatt_update_char_value>
 8014390:	4603      	mov	r3, r0
 8014392:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAll_SensHdle,
                                       0, /* charValOffset */
                                       SizeAll_Sens, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014394:	7bfb      	ldrb	r3, [r7, #15]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d00f      	beq.n	80143ba <Custom_STM_App_Update_Char+0x19e>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ALL_SENS command, result : 0x%x \n\r", ret);
 801439a:	4837      	ldr	r0, [pc, #220]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 801439c:	f7fd fc42 	bl	8011c24 <DbgTraceGetFileName>
 80143a0:	4601      	mov	r1, r0
 80143a2:	f240 23eb 	movw	r3, #747	@ 0x2eb
 80143a6:	4a35      	ldr	r2, [pc, #212]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 80143a8:	4835      	ldr	r0, [pc, #212]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 80143aa:	f001 fb6f 	bl	8015a8c <iprintf>
 80143ae:	7bfb      	ldrb	r3, [r7, #15]
 80143b0:	4619      	mov	r1, r3
 80143b2:	483e      	ldr	r0, [pc, #248]	@ (80144ac <Custom_STM_App_Update_Char+0x290>)
 80143b4:	f001 fb6a 	bl	8015a8c <iprintf>
 80143b8:	e00c      	b.n	80143d4 <Custom_STM_App_Update_Char+0x1b8>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ALL_SENS command\n\r");
 80143ba:	482f      	ldr	r0, [pc, #188]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 80143bc:	f7fd fc32 	bl	8011c24 <DbgTraceGetFileName>
 80143c0:	4601      	mov	r1, r0
 80143c2:	f240 23ef 	movw	r3, #751	@ 0x2ef
 80143c6:	4a2d      	ldr	r2, [pc, #180]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 80143c8:	482d      	ldr	r0, [pc, #180]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 80143ca:	f001 fb5f 	bl	8015a8c <iprintf>
 80143ce:	4838      	ldr	r0, [pc, #224]	@ (80144b0 <Custom_STM_App_Update_Char+0x294>)
 80143d0:	f001 fb5c 	bl	8015a8c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/


      if (ret == BLE_STATUS_SUCCESS)
 80143d4:	7bfb      	ldrb	r3, [r7, #15]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d103      	bne.n	80143e2 <Custom_STM_App_Update_Char+0x1c6>
      {
    	  tsBle.SCG_XferComplete = true;
 80143da:	4b2c      	ldr	r3, [pc, #176]	@ (801448c <Custom_STM_App_Update_Char+0x270>)
 80143dc:	2201      	movs	r2, #1
 80143de:	709a      	strb	r2, [r3, #2]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 80143e0:	e040      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>
			      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80143e2:	4b23      	ldr	r3, [pc, #140]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 80143e4:	8818      	ldrh	r0, [r3, #0]
 80143e6:	4b22      	ldr	r3, [pc, #136]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 80143e8:	8919      	ldrh	r1, [r3, #8]
 80143ea:	4b2f      	ldr	r3, [pc, #188]	@ (80144a8 <Custom_STM_App_Update_Char+0x28c>)
 80143ec:	781a      	ldrb	r2, [r3, #0]
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	9300      	str	r3, [sp, #0]
 80143f2:	4613      	mov	r3, r2
 80143f4:	2200      	movs	r2, #0
 80143f6:	f7fc f8f7 	bl	80105e8 <aci_gatt_update_char_value>
 80143fa:	4603      	mov	r3, r0
 80143fc:	73fb      	strb	r3, [r7, #15]
      break;
 80143fe:	e031      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_DEVICE_INFO:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014400:	4b1b      	ldr	r3, [pc, #108]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 8014402:	8818      	ldrh	r0, [r3, #0]
 8014404:	4b1a      	ldr	r3, [pc, #104]	@ (8014470 <Custom_STM_App_Update_Char+0x254>)
 8014406:	8959      	ldrh	r1, [r3, #10]
 8014408:	4b2a      	ldr	r3, [pc, #168]	@ (80144b4 <Custom_STM_App_Update_Char+0x298>)
 801440a:	781a      	ldrb	r2, [r3, #0]
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	9300      	str	r3, [sp, #0]
 8014410:	4613      	mov	r3, r2
 8014412:	2200      	movs	r2, #0
 8014414:	f7fc f8e8 	bl	80105e8 <aci_gatt_update_char_value>
 8014418:	4603      	mov	r3, r0
 801441a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDevice_InfoHdle,
                                       0, /* charValOffset */
                                       SizeDevice_Info, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 801441c:	7bfb      	ldrb	r3, [r7, #15]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d00f      	beq.n	8014442 <Custom_STM_App_Update_Char+0x226>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DEVICE_INFO command, result : 0x%x \n\r", ret);
 8014422:	4815      	ldr	r0, [pc, #84]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 8014424:	f7fd fbfe 	bl	8011c24 <DbgTraceGetFileName>
 8014428:	4601      	mov	r1, r0
 801442a:	f240 3317 	movw	r3, #791	@ 0x317
 801442e:	4a13      	ldr	r2, [pc, #76]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 8014430:	4813      	ldr	r0, [pc, #76]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 8014432:	f001 fb2b 	bl	8015a8c <iprintf>
 8014436:	7bfb      	ldrb	r3, [r7, #15]
 8014438:	4619      	mov	r1, r3
 801443a:	481f      	ldr	r0, [pc, #124]	@ (80144b8 <Custom_STM_App_Update_Char+0x29c>)
 801443c:	f001 fb26 	bl	8015a8c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 8014440:	e010      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
 8014442:	480d      	ldr	r0, [pc, #52]	@ (8014478 <Custom_STM_App_Update_Char+0x25c>)
 8014444:	f7fd fbee 	bl	8011c24 <DbgTraceGetFileName>
 8014448:	4601      	mov	r1, r0
 801444a:	f240 331b 	movw	r3, #795	@ 0x31b
 801444e:	4a0b      	ldr	r2, [pc, #44]	@ (801447c <Custom_STM_App_Update_Char+0x260>)
 8014450:	480b      	ldr	r0, [pc, #44]	@ (8014480 <Custom_STM_App_Update_Char+0x264>)
 8014452:	f001 fb1b 	bl	8015a8c <iprintf>
 8014456:	4819      	ldr	r0, [pc, #100]	@ (80144bc <Custom_STM_App_Update_Char+0x2a0>)
 8014458:	f001 fb18 	bl	8015a8c <iprintf>
      break;
 801445c:	e002      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>

    default:
      break;
 801445e:	bf00      	nop
 8014460:	e000      	b.n	8014464 <Custom_STM_App_Update_Char+0x248>
      break;
 8014462:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8014464:	7bfb      	ldrb	r3, [r7, #15]
}
 8014466:	4618      	mov	r0, r3
 8014468:	3710      	adds	r7, #16
 801446a:	46bd      	mov	sp, r7
 801446c:	bd80      	pop	{r7, pc}
 801446e:	bf00      	nop
 8014470:	20001080 	.word	0x20001080
 8014474:	200000b7 	.word	0x200000b7
 8014478:	080180e4 	.word	0x080180e4
 801447c:	080189c0 	.word	0x080189c0
 8014480:	08018104 	.word	0x08018104
 8014484:	08018400 	.word	0x08018400
 8014488:	08018448 	.word	0x08018448
 801448c:	20000fe0 	.word	0x20000fe0
 8014490:	200000b8 	.word	0x200000b8
 8014494:	08018480 	.word	0x08018480
 8014498:	080184c8 	.word	0x080184c8
 801449c:	200000b9 	.word	0x200000b9
 80144a0:	08018500 	.word	0x08018500
 80144a4:	08018544 	.word	0x08018544
 80144a8:	200000ba 	.word	0x200000ba
 80144ac:	08018578 	.word	0x08018578
 80144b0:	080185c4 	.word	0x080185c4
 80144b4:	200000bb 	.word	0x200000bb
 80144b8:	08018600 	.word	0x08018600
 80144bc:	0801864c 	.word	0x0801864c

080144c0 <LL_PWR_EnableBootC2>:
{
 80144c0:	b480      	push	{r7}
 80144c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80144c4:	4b05      	ldr	r3, [pc, #20]	@ (80144dc <LL_PWR_EnableBootC2+0x1c>)
 80144c6:	68db      	ldr	r3, [r3, #12]
 80144c8:	4a04      	ldr	r2, [pc, #16]	@ (80144dc <LL_PWR_EnableBootC2+0x1c>)
 80144ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80144ce:	60d3      	str	r3, [r2, #12]
}
 80144d0:	bf00      	nop
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr
 80144da:	bf00      	nop
 80144dc:	58000400 	.word	0x58000400

080144e0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80144e0:	b480      	push	{r7}
 80144e2:	b083      	sub	sp, #12
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80144e8:	4b06      	ldr	r3, [pc, #24]	@ (8014504 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80144ea:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80144ee:	4905      	ldr	r1, [pc, #20]	@ (8014504 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	4313      	orrs	r3, r2
 80144f4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80144f8:	bf00      	nop
 80144fa:	370c      	adds	r7, #12
 80144fc:	46bd      	mov	sp, r7
 80144fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014502:	4770      	bx	lr
 8014504:	58000800 	.word	0x58000800

08014508 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014508:	b480      	push	{r7}
 801450a:	b083      	sub	sp, #12
 801450c:	af00      	add	r7, sp, #0
 801450e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014510:	4b05      	ldr	r3, [pc, #20]	@ (8014528 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014512:	6a1a      	ldr	r2, [r3, #32]
 8014514:	4904      	ldr	r1, [pc, #16]	@ (8014528 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	4313      	orrs	r3, r2
 801451a:	620b      	str	r3, [r1, #32]
}
 801451c:	bf00      	nop
 801451e:	370c      	adds	r7, #12
 8014520:	46bd      	mov	sp, r7
 8014522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014526:	4770      	bx	lr
 8014528:	58000800 	.word	0x58000800

0801452c <LL_AHB3_GRP1_EnableClock>:
{
 801452c:	b480      	push	{r7}
 801452e:	b085      	sub	sp, #20
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014538:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801453a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	4313      	orrs	r3, r2
 8014542:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014548:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	4013      	ands	r3, r2
 801454e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014550:	68fb      	ldr	r3, [r7, #12]
}
 8014552:	bf00      	nop
 8014554:	3714      	adds	r7, #20
 8014556:	46bd      	mov	sp, r7
 8014558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455c:	4770      	bx	lr

0801455e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801455e:	b480      	push	{r7}
 8014560:	b085      	sub	sp, #20
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801456a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801456e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	4313      	orrs	r3, r2
 8014576:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801457a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801457e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	4013      	ands	r3, r2
 8014586:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014588:	68fb      	ldr	r3, [r7, #12]
}
 801458a:	bf00      	nop
 801458c:	3714      	adds	r7, #20
 801458e:	46bd      	mov	sp, r7
 8014590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014594:	4770      	bx	lr

08014596 <LL_C1_IPCC_EnableIT_TXF>:
{
 8014596:	b480      	push	{r7}
 8014598:	b083      	sub	sp, #12
 801459a:	af00      	add	r7, sp, #0
 801459c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	601a      	str	r2, [r3, #0]
}
 80145aa:	bf00      	nop
 80145ac:	370c      	adds	r7, #12
 80145ae:	46bd      	mov	sp, r7
 80145b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b4:	4770      	bx	lr

080145b6 <LL_C1_IPCC_EnableIT_RXO>:
{
 80145b6:	b480      	push	{r7}
 80145b8:	b083      	sub	sp, #12
 80145ba:	af00      	add	r7, sp, #0
 80145bc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	f043 0201 	orr.w	r2, r3, #1
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	601a      	str	r2, [r3, #0]
}
 80145ca:	bf00      	nop
 80145cc:	370c      	adds	r7, #12
 80145ce:	46bd      	mov	sp, r7
 80145d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d4:	4770      	bx	lr

080145d6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80145d6:	b480      	push	{r7}
 80145d8:	b083      	sub	sp, #12
 80145da:	af00      	add	r7, sp, #0
 80145dc:	6078      	str	r0, [r7, #4]
 80145de:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	685a      	ldr	r2, [r3, #4]
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	041b      	lsls	r3, r3, #16
 80145e8:	43db      	mvns	r3, r3
 80145ea:	401a      	ands	r2, r3
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	605a      	str	r2, [r3, #4]
}
 80145f0:	bf00      	nop
 80145f2:	370c      	adds	r7, #12
 80145f4:	46bd      	mov	sp, r7
 80145f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145fa:	4770      	bx	lr

080145fc <LL_C1_IPCC_DisableTransmitChannel>:
{
 80145fc:	b480      	push	{r7}
 80145fe:	b083      	sub	sp, #12
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	685a      	ldr	r2, [r3, #4]
 801460a:	683b      	ldr	r3, [r7, #0]
 801460c:	041b      	lsls	r3, r3, #16
 801460e:	431a      	orrs	r2, r3
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	605a      	str	r2, [r3, #4]
}
 8014614:	bf00      	nop
 8014616:	370c      	adds	r7, #12
 8014618:	46bd      	mov	sp, r7
 801461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461e:	4770      	bx	lr

08014620 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014620:	b480      	push	{r7}
 8014622:	b083      	sub	sp, #12
 8014624:	af00      	add	r7, sp, #0
 8014626:	6078      	str	r0, [r7, #4]
 8014628:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	685a      	ldr	r2, [r3, #4]
 801462e:	683b      	ldr	r3, [r7, #0]
 8014630:	43db      	mvns	r3, r3
 8014632:	401a      	ands	r2, r3
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	605a      	str	r2, [r3, #4]
}
 8014638:	bf00      	nop
 801463a:	370c      	adds	r7, #12
 801463c:	46bd      	mov	sp, r7
 801463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014642:	4770      	bx	lr

08014644 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
 801464a:	6078      	str	r0, [r7, #4]
 801464c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	683a      	ldr	r2, [r7, #0]
 8014652:	609a      	str	r2, [r3, #8]
}
 8014654:	bf00      	nop
 8014656:	370c      	adds	r7, #12
 8014658:	46bd      	mov	sp, r7
 801465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801465e:	4770      	bx	lr

08014660 <LL_C1_IPCC_SetFlag_CHx>:
{
 8014660:	b480      	push	{r7}
 8014662:	b083      	sub	sp, #12
 8014664:	af00      	add	r7, sp, #0
 8014666:	6078      	str	r0, [r7, #4]
 8014668:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801466a:	683b      	ldr	r3, [r7, #0]
 801466c:	041a      	lsls	r2, r3, #16
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	609a      	str	r2, [r3, #8]
}
 8014672:	bf00      	nop
 8014674:	370c      	adds	r7, #12
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr

0801467e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801467e:	b480      	push	{r7}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	6078      	str	r0, [r7, #4]
 8014686:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	68da      	ldr	r2, [r3, #12]
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	4013      	ands	r3, r2
 8014690:	683a      	ldr	r2, [r7, #0]
 8014692:	429a      	cmp	r2, r3
 8014694:	d101      	bne.n	801469a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014696:	2301      	movs	r3, #1
 8014698:	e000      	b.n	801469c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801469a:	2300      	movs	r3, #0
}
 801469c:	4618      	mov	r0, r3
 801469e:	370c      	adds	r7, #12
 80146a0:	46bd      	mov	sp, r7
 80146a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a6:	4770      	bx	lr

080146a8 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80146a8:	b480      	push	{r7}
 80146aa:	b083      	sub	sp, #12
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
 80146b0:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	69da      	ldr	r2, [r3, #28]
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	4013      	ands	r3, r2
 80146ba:	683a      	ldr	r2, [r7, #0]
 80146bc:	429a      	cmp	r2, r3
 80146be:	d101      	bne.n	80146c4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80146c0:	2301      	movs	r3, #1
 80146c2:	e000      	b.n	80146c6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80146c4:	2300      	movs	r3, #0
}
 80146c6:	4618      	mov	r0, r3
 80146c8:	370c      	adds	r7, #12
 80146ca:	46bd      	mov	sp, r7
 80146cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d0:	4770      	bx	lr
	...

080146d4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80146d4:	b580      	push	{r7, lr}
 80146d6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80146d8:	2102      	movs	r1, #2
 80146da:	4818      	ldr	r0, [pc, #96]	@ (801473c <HW_IPCC_Rx_Handler+0x68>)
 80146dc:	f7ff ffe4 	bl	80146a8 <LL_C2_IPCC_IsActiveFlag_CHx>
 80146e0:	4603      	mov	r3, r0
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d008      	beq.n	80146f8 <HW_IPCC_Rx_Handler+0x24>
 80146e6:	4b15      	ldr	r3, [pc, #84]	@ (801473c <HW_IPCC_Rx_Handler+0x68>)
 80146e8:	685b      	ldr	r3, [r3, #4]
 80146ea:	f003 0302 	and.w	r3, r3, #2
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d102      	bne.n	80146f8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80146f2:	f000 f8d5 	bl	80148a0 <HW_IPCC_SYS_EvtHandler>
 80146f6:	e01e      	b.n	8014736 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80146f8:	2101      	movs	r1, #1
 80146fa:	4810      	ldr	r0, [pc, #64]	@ (801473c <HW_IPCC_Rx_Handler+0x68>)
 80146fc:	f7ff ffd4 	bl	80146a8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014700:	4603      	mov	r3, r0
 8014702:	2b00      	cmp	r3, #0
 8014704:	d008      	beq.n	8014718 <HW_IPCC_Rx_Handler+0x44>
 8014706:	4b0d      	ldr	r3, [pc, #52]	@ (801473c <HW_IPCC_Rx_Handler+0x68>)
 8014708:	685b      	ldr	r3, [r3, #4]
 801470a:	f003 0301 	and.w	r3, r3, #1
 801470e:	2b00      	cmp	r3, #0
 8014710:	d102      	bne.n	8014718 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8014712:	f000 f889 	bl	8014828 <HW_IPCC_BLE_EvtHandler>
 8014716:	e00e      	b.n	8014736 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014718:	2108      	movs	r1, #8
 801471a:	4808      	ldr	r0, [pc, #32]	@ (801473c <HW_IPCC_Rx_Handler+0x68>)
 801471c:	f7ff ffc4 	bl	80146a8 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014720:	4603      	mov	r3, r0
 8014722:	2b00      	cmp	r3, #0
 8014724:	d008      	beq.n	8014738 <HW_IPCC_Rx_Handler+0x64>
 8014726:	4b05      	ldr	r3, [pc, #20]	@ (801473c <HW_IPCC_Rx_Handler+0x68>)
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	f003 0308 	and.w	r3, r3, #8
 801472e:	2b00      	cmp	r3, #0
 8014730:	d102      	bne.n	8014738 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014732:	f000 f901 	bl	8014938 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014736:	bf00      	nop
 8014738:	bf00      	nop
}
 801473a:	bd80      	pop	{r7, pc}
 801473c:	58000c00 	.word	0x58000c00

08014740 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014740:	b580      	push	{r7, lr}
 8014742:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014744:	2102      	movs	r1, #2
 8014746:	4818      	ldr	r0, [pc, #96]	@ (80147a8 <HW_IPCC_Tx_Handler+0x68>)
 8014748:	f7ff ff99 	bl	801467e <LL_C1_IPCC_IsActiveFlag_CHx>
 801474c:	4603      	mov	r3, r0
 801474e:	2b00      	cmp	r3, #0
 8014750:	d108      	bne.n	8014764 <HW_IPCC_Tx_Handler+0x24>
 8014752:	4b15      	ldr	r3, [pc, #84]	@ (80147a8 <HW_IPCC_Tx_Handler+0x68>)
 8014754:	685b      	ldr	r3, [r3, #4]
 8014756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801475a:	2b00      	cmp	r3, #0
 801475c:	d102      	bne.n	8014764 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801475e:	f000 f893 	bl	8014888 <HW_IPCC_SYS_CmdEvtHandler>
 8014762:	e01e      	b.n	80147a2 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014764:	2108      	movs	r1, #8
 8014766:	4810      	ldr	r0, [pc, #64]	@ (80147a8 <HW_IPCC_Tx_Handler+0x68>)
 8014768:	f7ff ff89 	bl	801467e <LL_C1_IPCC_IsActiveFlag_CHx>
 801476c:	4603      	mov	r3, r0
 801476e:	2b00      	cmp	r3, #0
 8014770:	d108      	bne.n	8014784 <HW_IPCC_Tx_Handler+0x44>
 8014772:	4b0d      	ldr	r3, [pc, #52]	@ (80147a8 <HW_IPCC_Tx_Handler+0x68>)
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801477a:	2b00      	cmp	r3, #0
 801477c:	d102      	bne.n	8014784 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801477e:	f000 f8bd 	bl	80148fc <HW_IPCC_MM_FreeBufHandler>
 8014782:	e00e      	b.n	80147a2 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014784:	2120      	movs	r1, #32
 8014786:	4808      	ldr	r0, [pc, #32]	@ (80147a8 <HW_IPCC_Tx_Handler+0x68>)
 8014788:	f7ff ff79 	bl	801467e <LL_C1_IPCC_IsActiveFlag_CHx>
 801478c:	4603      	mov	r3, r0
 801478e:	2b00      	cmp	r3, #0
 8014790:	d108      	bne.n	80147a4 <HW_IPCC_Tx_Handler+0x64>
 8014792:	4b05      	ldr	r3, [pc, #20]	@ (80147a8 <HW_IPCC_Tx_Handler+0x68>)
 8014794:	685b      	ldr	r3, [r3, #4]
 8014796:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801479a:	2b00      	cmp	r3, #0
 801479c:	d102      	bne.n	80147a4 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801479e:	f000 f84f 	bl	8014840 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80147a2:	bf00      	nop
 80147a4:	bf00      	nop
}
 80147a6:	bd80      	pop	{r7, pc}
 80147a8:	58000c00 	.word	0x58000c00

080147ac <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80147ac:	b580      	push	{r7, lr}
 80147ae:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80147b0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80147b4:	f7ff fed3 	bl	801455e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80147b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80147bc:	f7ff fea4 	bl	8014508 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80147c0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80147c4:	f7ff fe8c 	bl	80144e0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80147c8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80147ca:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80147cc:	f7ff fe78 	bl	80144c0 <LL_PWR_EnableBootC2>

  return;
 80147d0:	bf00      	nop
}
 80147d2:	bd80      	pop	{r7, pc}

080147d4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80147d8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80147dc:	f7ff fea6 	bl	801452c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80147e0:	4806      	ldr	r0, [pc, #24]	@ (80147fc <HW_IPCC_Init+0x28>)
 80147e2:	f7ff fee8 	bl	80145b6 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80147e6:	4805      	ldr	r0, [pc, #20]	@ (80147fc <HW_IPCC_Init+0x28>)
 80147e8:	f7ff fed5 	bl	8014596 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80147ec:	202c      	movs	r0, #44	@ 0x2c
 80147ee:	f7f0 f80c 	bl	800480a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80147f2:	202d      	movs	r0, #45	@ 0x2d
 80147f4:	f7f0 f809 	bl	800480a <HAL_NVIC_EnableIRQ>

  return;
 80147f8:	bf00      	nop
}
 80147fa:	bd80      	pop	{r7, pc}
 80147fc:	58000c00 	.word	0x58000c00

08014800 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8014800:	b580      	push	{r7, lr}
 8014802:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014804:	2101      	movs	r1, #1
 8014806:	4802      	ldr	r0, [pc, #8]	@ (8014810 <HW_IPCC_BLE_Init+0x10>)
 8014808:	f7ff ff0a 	bl	8014620 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801480c:	bf00      	nop
}
 801480e:	bd80      	pop	{r7, pc}
 8014810:	58000c00 	.word	0x58000c00

08014814 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8014814:	b580      	push	{r7, lr}
 8014816:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8014818:	2101      	movs	r1, #1
 801481a:	4802      	ldr	r0, [pc, #8]	@ (8014824 <HW_IPCC_BLE_SendCmd+0x10>)
 801481c:	f7ff ff20 	bl	8014660 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014820:	bf00      	nop
}
 8014822:	bd80      	pop	{r7, pc}
 8014824:	58000c00 	.word	0x58000c00

08014828 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014828:	b580      	push	{r7, lr}
 801482a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801482c:	f7fd f842 	bl	80118b4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014830:	2101      	movs	r1, #1
 8014832:	4802      	ldr	r0, [pc, #8]	@ (801483c <HW_IPCC_BLE_EvtHandler+0x14>)
 8014834:	f7ff ff06 	bl	8014644 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014838:	bf00      	nop
}
 801483a:	bd80      	pop	{r7, pc}
 801483c:	58000c00 	.word	0x58000c00

08014840 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014840:	b580      	push	{r7, lr}
 8014842:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014844:	2120      	movs	r1, #32
 8014846:	4803      	ldr	r0, [pc, #12]	@ (8014854 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014848:	f7ff fed8 	bl	80145fc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801484c:	f7fd f862 	bl	8011914 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014850:	bf00      	nop
}
 8014852:	bd80      	pop	{r7, pc}
 8014854:	58000c00 	.word	0x58000c00

08014858 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014858:	b580      	push	{r7, lr}
 801485a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801485c:	2102      	movs	r1, #2
 801485e:	4802      	ldr	r0, [pc, #8]	@ (8014868 <HW_IPCC_SYS_Init+0x10>)
 8014860:	f7ff fede 	bl	8014620 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014864:	bf00      	nop
}
 8014866:	bd80      	pop	{r7, pc}
 8014868:	58000c00 	.word	0x58000c00

0801486c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801486c:	b580      	push	{r7, lr}
 801486e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014870:	2102      	movs	r1, #2
 8014872:	4804      	ldr	r0, [pc, #16]	@ (8014884 <HW_IPCC_SYS_SendCmd+0x18>)
 8014874:	f7ff fef4 	bl	8014660 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014878:	2102      	movs	r1, #2
 801487a:	4802      	ldr	r0, [pc, #8]	@ (8014884 <HW_IPCC_SYS_SendCmd+0x18>)
 801487c:	f7ff feab 	bl	80145d6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014880:	bf00      	nop
}
 8014882:	bd80      	pop	{r7, pc}
 8014884:	58000c00 	.word	0x58000c00

08014888 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014888:	b580      	push	{r7, lr}
 801488a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801488c:	2102      	movs	r1, #2
 801488e:	4803      	ldr	r0, [pc, #12]	@ (801489c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014890:	f7ff feb4 	bl	80145fc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014894:	f7fd f88e 	bl	80119b4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014898:	bf00      	nop
}
 801489a:	bd80      	pop	{r7, pc}
 801489c:	58000c00 	.word	0x58000c00

080148a0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80148a4:	f7fd f89c 	bl	80119e0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80148a8:	2102      	movs	r1, #2
 80148aa:	4802      	ldr	r0, [pc, #8]	@ (80148b4 <HW_IPCC_SYS_EvtHandler+0x14>)
 80148ac:	f7ff feca 	bl	8014644 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80148b0:	bf00      	nop
}
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	58000c00 	.word	0x58000c00

080148b8 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b082      	sub	sp, #8
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80148c0:	2108      	movs	r1, #8
 80148c2:	480c      	ldr	r0, [pc, #48]	@ (80148f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80148c4:	f7ff fedb 	bl	801467e <LL_C1_IPCC_IsActiveFlag_CHx>
 80148c8:	4603      	mov	r3, r0
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d007      	beq.n	80148de <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80148ce:	4a0a      	ldr	r2, [pc, #40]	@ (80148f8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80148d4:	2108      	movs	r1, #8
 80148d6:	4807      	ldr	r0, [pc, #28]	@ (80148f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80148d8:	f7ff fe7d 	bl	80145d6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80148dc:	e006      	b.n	80148ec <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80148e2:	2108      	movs	r1, #8
 80148e4:	4803      	ldr	r0, [pc, #12]	@ (80148f4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80148e6:	f7ff febb 	bl	8014660 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80148ea:	bf00      	nop
}
 80148ec:	3708      	adds	r7, #8
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}
 80148f2:	bf00      	nop
 80148f4:	58000c00 	.word	0x58000c00
 80148f8:	2000108c 	.word	0x2000108c

080148fc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8014900:	2108      	movs	r1, #8
 8014902:	4806      	ldr	r0, [pc, #24]	@ (801491c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014904:	f7ff fe7a 	bl	80145fc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8014908:	4b05      	ldr	r3, [pc, #20]	@ (8014920 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801490a:	681b      	ldr	r3, [r3, #0]
 801490c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801490e:	2108      	movs	r1, #8
 8014910:	4802      	ldr	r0, [pc, #8]	@ (801491c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8014912:	f7ff fea5 	bl	8014660 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014916:	bf00      	nop
}
 8014918:	bd80      	pop	{r7, pc}
 801491a:	bf00      	nop
 801491c:	58000c00 	.word	0x58000c00
 8014920:	2000108c 	.word	0x2000108c

08014924 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014924:	b580      	push	{r7, lr}
 8014926:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014928:	2108      	movs	r1, #8
 801492a:	4802      	ldr	r0, [pc, #8]	@ (8014934 <HW_IPCC_TRACES_Init+0x10>)
 801492c:	f7ff fe78 	bl	8014620 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014930:	bf00      	nop
}
 8014932:	bd80      	pop	{r7, pc}
 8014934:	58000c00 	.word	0x58000c00

08014938 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014938:	b580      	push	{r7, lr}
 801493a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801493c:	f7fd f8f8 	bl	8011b30 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014940:	2108      	movs	r1, #8
 8014942:	4802      	ldr	r0, [pc, #8]	@ (801494c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014944:	f7ff fe7e 	bl	8014644 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014948:	bf00      	nop
}
 801494a:	bd80      	pop	{r7, pc}
 801494c:	58000c00 	.word	0x58000c00

08014950 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014954:	2200      	movs	r2, #0
 8014956:	4912      	ldr	r1, [pc, #72]	@ (80149a0 <MX_USB_Device_Init+0x50>)
 8014958:	4812      	ldr	r0, [pc, #72]	@ (80149a4 <MX_USB_Device_Init+0x54>)
 801495a:	f7f9 fd6d 	bl	800e438 <USBD_Init>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d001      	beq.n	8014968 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014964:	f7ef f9d2 	bl	8003d0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014968:	490f      	ldr	r1, [pc, #60]	@ (80149a8 <MX_USB_Device_Init+0x58>)
 801496a:	480e      	ldr	r0, [pc, #56]	@ (80149a4 <MX_USB_Device_Init+0x54>)
 801496c:	f7f9 fd94 	bl	800e498 <USBD_RegisterClass>
 8014970:	4603      	mov	r3, r0
 8014972:	2b00      	cmp	r3, #0
 8014974:	d001      	beq.n	801497a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014976:	f7ef f9c9 	bl	8003d0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801497a:	490c      	ldr	r1, [pc, #48]	@ (80149ac <MX_USB_Device_Init+0x5c>)
 801497c:	4809      	ldr	r0, [pc, #36]	@ (80149a4 <MX_USB_Device_Init+0x54>)
 801497e:	f7f9 fc8b 	bl	800e298 <USBD_CDC_RegisterInterface>
 8014982:	4603      	mov	r3, r0
 8014984:	2b00      	cmp	r3, #0
 8014986:	d001      	beq.n	801498c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014988:	f7ef f9c0 	bl	8003d0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801498c:	4805      	ldr	r0, [pc, #20]	@ (80149a4 <MX_USB_Device_Init+0x54>)
 801498e:	f7f9 fdb9 	bl	800e504 <USBD_Start>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d001      	beq.n	801499c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014998:	f7ef f9b8 	bl	8003d0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801499c:	bf00      	nop
 801499e:	bd80      	pop	{r7, pc}
 80149a0:	200000d0 	.word	0x200000d0
 80149a4:	20001090 	.word	0x20001090
 80149a8:	20000024 	.word	0x20000024
 80149ac:	200000bc 	.word	0x200000bc

080149b0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80149b4:	2200      	movs	r2, #0
 80149b6:	4905      	ldr	r1, [pc, #20]	@ (80149cc <CDC_Init_FS+0x1c>)
 80149b8:	4805      	ldr	r0, [pc, #20]	@ (80149d0 <CDC_Init_FS+0x20>)
 80149ba:	f7f9 fc87 	bl	800e2cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80149be:	4905      	ldr	r1, [pc, #20]	@ (80149d4 <CDC_Init_FS+0x24>)
 80149c0:	4803      	ldr	r0, [pc, #12]	@ (80149d0 <CDC_Init_FS+0x20>)
 80149c2:	f7f9 fca5 	bl	800e310 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80149c6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80149c8:	4618      	mov	r0, r3
 80149ca:	bd80      	pop	{r7, pc}
 80149cc:	20001b6c 	.word	0x20001b6c
 80149d0:	20001090 	.word	0x20001090
 80149d4:	2000136c 	.word	0x2000136c

080149d8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80149d8:	b480      	push	{r7}
 80149da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80149dc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80149de:	4618      	mov	r0, r3
 80149e0:	46bd      	mov	sp, r7
 80149e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e6:	4770      	bx	lr

080149e8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80149e8:	b480      	push	{r7}
 80149ea:	b083      	sub	sp, #12
 80149ec:	af00      	add	r7, sp, #0
 80149ee:	4603      	mov	r3, r0
 80149f0:	6039      	str	r1, [r7, #0]
 80149f2:	71fb      	strb	r3, [r7, #7]
 80149f4:	4613      	mov	r3, r2
 80149f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80149f8:	79fb      	ldrb	r3, [r7, #7]
 80149fa:	2b23      	cmp	r3, #35	@ 0x23
 80149fc:	d84a      	bhi.n	8014a94 <CDC_Control_FS+0xac>
 80149fe:	a201      	add	r2, pc, #4	@ (adr r2, 8014a04 <CDC_Control_FS+0x1c>)
 8014a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014a04:	08014a95 	.word	0x08014a95
 8014a08:	08014a95 	.word	0x08014a95
 8014a0c:	08014a95 	.word	0x08014a95
 8014a10:	08014a95 	.word	0x08014a95
 8014a14:	08014a95 	.word	0x08014a95
 8014a18:	08014a95 	.word	0x08014a95
 8014a1c:	08014a95 	.word	0x08014a95
 8014a20:	08014a95 	.word	0x08014a95
 8014a24:	08014a95 	.word	0x08014a95
 8014a28:	08014a95 	.word	0x08014a95
 8014a2c:	08014a95 	.word	0x08014a95
 8014a30:	08014a95 	.word	0x08014a95
 8014a34:	08014a95 	.word	0x08014a95
 8014a38:	08014a95 	.word	0x08014a95
 8014a3c:	08014a95 	.word	0x08014a95
 8014a40:	08014a95 	.word	0x08014a95
 8014a44:	08014a95 	.word	0x08014a95
 8014a48:	08014a95 	.word	0x08014a95
 8014a4c:	08014a95 	.word	0x08014a95
 8014a50:	08014a95 	.word	0x08014a95
 8014a54:	08014a95 	.word	0x08014a95
 8014a58:	08014a95 	.word	0x08014a95
 8014a5c:	08014a95 	.word	0x08014a95
 8014a60:	08014a95 	.word	0x08014a95
 8014a64:	08014a95 	.word	0x08014a95
 8014a68:	08014a95 	.word	0x08014a95
 8014a6c:	08014a95 	.word	0x08014a95
 8014a70:	08014a95 	.word	0x08014a95
 8014a74:	08014a95 	.word	0x08014a95
 8014a78:	08014a95 	.word	0x08014a95
 8014a7c:	08014a95 	.word	0x08014a95
 8014a80:	08014a95 	.word	0x08014a95
 8014a84:	08014a95 	.word	0x08014a95
 8014a88:	08014a95 	.word	0x08014a95
 8014a8c:	08014a95 	.word	0x08014a95
 8014a90:	08014a95 	.word	0x08014a95
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014a94:	bf00      	nop
  }

  return (USBD_OK);
 8014a96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014a98:	4618      	mov	r0, r3
 8014a9a:	370c      	adds	r7, #12
 8014a9c:	46bd      	mov	sp, r7
 8014a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aa2:	4770      	bx	lr

08014aa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014aae:	6879      	ldr	r1, [r7, #4]
 8014ab0:	4805      	ldr	r0, [pc, #20]	@ (8014ac8 <CDC_Receive_FS+0x24>)
 8014ab2:	f7f9 fc2d 	bl	800e310 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014ab6:	4804      	ldr	r0, [pc, #16]	@ (8014ac8 <CDC_Receive_FS+0x24>)
 8014ab8:	f7f9 fc88 	bl	800e3cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014abc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	3708      	adds	r7, #8
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	bd80      	pop	{r7, pc}
 8014ac6:	bf00      	nop
 8014ac8:	20001090 	.word	0x20001090

08014acc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
 8014ad4:	460b      	mov	r3, r1
 8014ad6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014ad8:	2300      	movs	r3, #0
 8014ada:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014adc:	4b0d      	ldr	r3, [pc, #52]	@ (8014b14 <CDC_Transmit_FS+0x48>)
 8014ade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014ae2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014ae4:	68bb      	ldr	r3, [r7, #8]
 8014ae6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d001      	beq.n	8014af2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014aee:	2301      	movs	r3, #1
 8014af0:	e00b      	b.n	8014b0a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014af2:	887b      	ldrh	r3, [r7, #2]
 8014af4:	461a      	mov	r2, r3
 8014af6:	6879      	ldr	r1, [r7, #4]
 8014af8:	4806      	ldr	r0, [pc, #24]	@ (8014b14 <CDC_Transmit_FS+0x48>)
 8014afa:	f7f9 fbe7 	bl	800e2cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014afe:	4805      	ldr	r0, [pc, #20]	@ (8014b14 <CDC_Transmit_FS+0x48>)
 8014b00:	f7f9 fc24 	bl	800e34c <USBD_CDC_TransmitPacket>
 8014b04:	4603      	mov	r3, r0
 8014b06:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b0a:	4618      	mov	r0, r3
 8014b0c:	3710      	adds	r7, #16
 8014b0e:	46bd      	mov	sp, r7
 8014b10:	bd80      	pop	{r7, pc}
 8014b12:	bf00      	nop
 8014b14:	20001090 	.word	0x20001090

08014b18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b087      	sub	sp, #28
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	60f8      	str	r0, [r7, #12]
 8014b20:	60b9      	str	r1, [r7, #8]
 8014b22:	4613      	mov	r3, r2
 8014b24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014b26:	2300      	movs	r3, #0
 8014b28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014b2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b2e:	4618      	mov	r0, r3
 8014b30:	371c      	adds	r7, #28
 8014b32:	46bd      	mov	sp, r7
 8014b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b38:	4770      	bx	lr
	...

08014b3c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b3c:	b480      	push	{r7}
 8014b3e:	b083      	sub	sp, #12
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	4603      	mov	r3, r0
 8014b44:	6039      	str	r1, [r7, #0]
 8014b46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	2212      	movs	r2, #18
 8014b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014b4e:	4b03      	ldr	r3, [pc, #12]	@ (8014b5c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	370c      	adds	r7, #12
 8014b54:	46bd      	mov	sp, r7
 8014b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b5a:	4770      	bx	lr
 8014b5c:	200000f0 	.word	0x200000f0

08014b60 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b60:	b480      	push	{r7}
 8014b62:	b083      	sub	sp, #12
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	4603      	mov	r3, r0
 8014b68:	6039      	str	r1, [r7, #0]
 8014b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	2204      	movs	r2, #4
 8014b70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014b72:	4b03      	ldr	r3, [pc, #12]	@ (8014b80 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	370c      	adds	r7, #12
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7e:	4770      	bx	lr
 8014b80:	20000104 	.word	0x20000104

08014b84 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	6039      	str	r1, [r7, #0]
 8014b8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014b90:	79fb      	ldrb	r3, [r7, #7]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d105      	bne.n	8014ba2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014b96:	683a      	ldr	r2, [r7, #0]
 8014b98:	4907      	ldr	r1, [pc, #28]	@ (8014bb8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014b9a:	4808      	ldr	r0, [pc, #32]	@ (8014bbc <USBD_CDC_ProductStrDescriptor+0x38>)
 8014b9c:	f7fa fdfa 	bl	800f794 <USBD_GetString>
 8014ba0:	e004      	b.n	8014bac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014ba2:	683a      	ldr	r2, [r7, #0]
 8014ba4:	4904      	ldr	r1, [pc, #16]	@ (8014bb8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014ba6:	4805      	ldr	r0, [pc, #20]	@ (8014bbc <USBD_CDC_ProductStrDescriptor+0x38>)
 8014ba8:	f7fa fdf4 	bl	800f794 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014bac:	4b02      	ldr	r3, [pc, #8]	@ (8014bb8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3708      	adds	r7, #8
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	2000236c 	.word	0x2000236c
 8014bbc:	08018688 	.word	0x08018688

08014bc0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b082      	sub	sp, #8
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	4603      	mov	r3, r0
 8014bc8:	6039      	str	r1, [r7, #0]
 8014bca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014bcc:	683a      	ldr	r2, [r7, #0]
 8014bce:	4904      	ldr	r1, [pc, #16]	@ (8014be0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014bd0:	4804      	ldr	r0, [pc, #16]	@ (8014be4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8014bd2:	f7fa fddf 	bl	800f794 <USBD_GetString>
  return USBD_StrDesc;
 8014bd6:	4b02      	ldr	r3, [pc, #8]	@ (8014be0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014bd8:	4618      	mov	r0, r3
 8014bda:	3708      	adds	r7, #8
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	bd80      	pop	{r7, pc}
 8014be0:	2000236c 	.word	0x2000236c
 8014be4:	080186a0 	.word	0x080186a0

08014be8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	4603      	mov	r3, r0
 8014bf0:	6039      	str	r1, [r7, #0]
 8014bf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014bf4:	683b      	ldr	r3, [r7, #0]
 8014bf6:	221a      	movs	r2, #26
 8014bf8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014bfa:	f000 f843 	bl	8014c84 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014bfe:	4b02      	ldr	r3, [pc, #8]	@ (8014c08 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014c00:	4618      	mov	r0, r3
 8014c02:	3708      	adds	r7, #8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	20000108 	.word	0x20000108

08014c0c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	4603      	mov	r3, r0
 8014c14:	6039      	str	r1, [r7, #0]
 8014c16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014c18:	79fb      	ldrb	r3, [r7, #7]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d105      	bne.n	8014c2a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014c1e:	683a      	ldr	r2, [r7, #0]
 8014c20:	4907      	ldr	r1, [pc, #28]	@ (8014c40 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014c22:	4808      	ldr	r0, [pc, #32]	@ (8014c44 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014c24:	f7fa fdb6 	bl	800f794 <USBD_GetString>
 8014c28:	e004      	b.n	8014c34 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014c2a:	683a      	ldr	r2, [r7, #0]
 8014c2c:	4904      	ldr	r1, [pc, #16]	@ (8014c40 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014c2e:	4805      	ldr	r0, [pc, #20]	@ (8014c44 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014c30:	f7fa fdb0 	bl	800f794 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c34:	4b02      	ldr	r3, [pc, #8]	@ (8014c40 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014c36:	4618      	mov	r0, r3
 8014c38:	3708      	adds	r7, #8
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	bd80      	pop	{r7, pc}
 8014c3e:	bf00      	nop
 8014c40:	2000236c 	.word	0x2000236c
 8014c44:	080186b4 	.word	0x080186b4

08014c48 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b082      	sub	sp, #8
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	4603      	mov	r3, r0
 8014c50:	6039      	str	r1, [r7, #0]
 8014c52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014c54:	79fb      	ldrb	r3, [r7, #7]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d105      	bne.n	8014c66 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014c5a:	683a      	ldr	r2, [r7, #0]
 8014c5c:	4907      	ldr	r1, [pc, #28]	@ (8014c7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014c5e:	4808      	ldr	r0, [pc, #32]	@ (8014c80 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014c60:	f7fa fd98 	bl	800f794 <USBD_GetString>
 8014c64:	e004      	b.n	8014c70 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014c66:	683a      	ldr	r2, [r7, #0]
 8014c68:	4904      	ldr	r1, [pc, #16]	@ (8014c7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014c6a:	4805      	ldr	r0, [pc, #20]	@ (8014c80 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014c6c:	f7fa fd92 	bl	800f794 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c70:	4b02      	ldr	r3, [pc, #8]	@ (8014c7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3708      	adds	r7, #8
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}
 8014c7a:	bf00      	nop
 8014c7c:	2000236c 	.word	0x2000236c
 8014c80:	080186c0 	.word	0x080186c0

08014c84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b084      	sub	sp, #16
 8014c88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8014cc8 <Get_SerialNum+0x44>)
 8014c8c:	681b      	ldr	r3, [r3, #0]
 8014c8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014c90:	4b0e      	ldr	r3, [pc, #56]	@ (8014ccc <Get_SerialNum+0x48>)
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014c96:	4b0e      	ldr	r3, [pc, #56]	@ (8014cd0 <Get_SerialNum+0x4c>)
 8014c98:	681b      	ldr	r3, [r3, #0]
 8014c9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014c9c:	68fa      	ldr	r2, [r7, #12]
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d009      	beq.n	8014cbe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014caa:	2208      	movs	r2, #8
 8014cac:	4909      	ldr	r1, [pc, #36]	@ (8014cd4 <Get_SerialNum+0x50>)
 8014cae:	68f8      	ldr	r0, [r7, #12]
 8014cb0:	f000 f814 	bl	8014cdc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014cb4:	2204      	movs	r2, #4
 8014cb6:	4908      	ldr	r1, [pc, #32]	@ (8014cd8 <Get_SerialNum+0x54>)
 8014cb8:	68b8      	ldr	r0, [r7, #8]
 8014cba:	f000 f80f 	bl	8014cdc <IntToUnicode>
  }
}
 8014cbe:	bf00      	nop
 8014cc0:	3710      	adds	r7, #16
 8014cc2:	46bd      	mov	sp, r7
 8014cc4:	bd80      	pop	{r7, pc}
 8014cc6:	bf00      	nop
 8014cc8:	1fff7590 	.word	0x1fff7590
 8014ccc:	1fff7594 	.word	0x1fff7594
 8014cd0:	1fff7598 	.word	0x1fff7598
 8014cd4:	2000010a 	.word	0x2000010a
 8014cd8:	2000011a 	.word	0x2000011a

08014cdc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b087      	sub	sp, #28
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	60f8      	str	r0, [r7, #12]
 8014ce4:	60b9      	str	r1, [r7, #8]
 8014ce6:	4613      	mov	r3, r2
 8014ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014cea:	2300      	movs	r3, #0
 8014cec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014cee:	2300      	movs	r3, #0
 8014cf0:	75fb      	strb	r3, [r7, #23]
 8014cf2:	e027      	b.n	8014d44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	0f1b      	lsrs	r3, r3, #28
 8014cf8:	2b09      	cmp	r3, #9
 8014cfa:	d80b      	bhi.n	8014d14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	0f1b      	lsrs	r3, r3, #28
 8014d00:	b2da      	uxtb	r2, r3
 8014d02:	7dfb      	ldrb	r3, [r7, #23]
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	4619      	mov	r1, r3
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	440b      	add	r3, r1
 8014d0c:	3230      	adds	r2, #48	@ 0x30
 8014d0e:	b2d2      	uxtb	r2, r2
 8014d10:	701a      	strb	r2, [r3, #0]
 8014d12:	e00a      	b.n	8014d2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	0f1b      	lsrs	r3, r3, #28
 8014d18:	b2da      	uxtb	r2, r3
 8014d1a:	7dfb      	ldrb	r3, [r7, #23]
 8014d1c:	005b      	lsls	r3, r3, #1
 8014d1e:	4619      	mov	r1, r3
 8014d20:	68bb      	ldr	r3, [r7, #8]
 8014d22:	440b      	add	r3, r1
 8014d24:	3237      	adds	r2, #55	@ 0x37
 8014d26:	b2d2      	uxtb	r2, r2
 8014d28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	011b      	lsls	r3, r3, #4
 8014d2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014d30:	7dfb      	ldrb	r3, [r7, #23]
 8014d32:	005b      	lsls	r3, r3, #1
 8014d34:	3301      	adds	r3, #1
 8014d36:	68ba      	ldr	r2, [r7, #8]
 8014d38:	4413      	add	r3, r2
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014d3e:	7dfb      	ldrb	r3, [r7, #23]
 8014d40:	3301      	adds	r3, #1
 8014d42:	75fb      	strb	r3, [r7, #23]
 8014d44:	7dfa      	ldrb	r2, [r7, #23]
 8014d46:	79fb      	ldrb	r3, [r7, #7]
 8014d48:	429a      	cmp	r2, r3
 8014d4a:	d3d3      	bcc.n	8014cf4 <IntToUnicode+0x18>
  }
}
 8014d4c:	bf00      	nop
 8014d4e:	bf00      	nop
 8014d50:	371c      	adds	r7, #28
 8014d52:	46bd      	mov	sp, r7
 8014d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d58:	4770      	bx	lr

08014d5a <LL_AHB2_GRP1_EnableClock>:
{
 8014d5a:	b480      	push	{r7}
 8014d5c:	b085      	sub	sp, #20
 8014d5e:	af00      	add	r7, sp, #0
 8014d60:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	4313      	orrs	r3, r2
 8014d70:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014d72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	4013      	ands	r3, r2
 8014d7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014d7e:	68fb      	ldr	r3, [r7, #12]
}
 8014d80:	bf00      	nop
 8014d82:	3714      	adds	r7, #20
 8014d84:	46bd      	mov	sp, r7
 8014d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8a:	4770      	bx	lr

08014d8c <LL_APB1_GRP1_EnableClock>:
{
 8014d8c:	b480      	push	{r7}
 8014d8e:	b085      	sub	sp, #20
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8014d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014d98:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	4313      	orrs	r3, r2
 8014da2:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014da8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	4013      	ands	r3, r2
 8014dae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014db0:	68fb      	ldr	r3, [r7, #12]
}
 8014db2:	bf00      	nop
 8014db4:	3714      	adds	r7, #20
 8014db6:	46bd      	mov	sp, r7
 8014db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbc:	4770      	bx	lr
	...

08014dc0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b09c      	sub	sp, #112	@ 0x70
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014dc8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014dcc:	2200      	movs	r2, #0
 8014dce:	601a      	str	r2, [r3, #0]
 8014dd0:	605a      	str	r2, [r3, #4]
 8014dd2:	609a      	str	r2, [r3, #8]
 8014dd4:	60da      	str	r2, [r3, #12]
 8014dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014dd8:	f107 030c 	add.w	r3, r7, #12
 8014ddc:	2250      	movs	r2, #80	@ 0x50
 8014dde:	2100      	movs	r1, #0
 8014de0:	4618      	mov	r0, r3
 8014de2:	f000 ffdb 	bl	8015d9c <memset>
  if(pcdHandle->Instance==USB)
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4a23      	ldr	r2, [pc, #140]	@ (8014e78 <HAL_PCD_MspInit+0xb8>)
 8014dec:	4293      	cmp	r3, r2
 8014dee:	d13e      	bne.n	8014e6e <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014df4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8014df6:	2306      	movs	r3, #6
 8014df8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8014dfa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014dfe:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8014e00:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014e04:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8014e06:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8014e0a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8014e0c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014e10:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8014e12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8014e16:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014e18:	f107 030c 	add.w	r3, r7, #12
 8014e1c:	4618      	mov	r0, r3
 8014e1e:	f7f3 fe79 	bl	8008b14 <HAL_RCCEx_PeriphCLKConfig>
 8014e22:	4603      	mov	r3, r0
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d001      	beq.n	8014e2c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8014e28:	f7ee ff70 	bl	8003d0c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e2c:	2001      	movs	r0, #1
 8014e2e:	f7ff ff94 	bl	8014d5a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014e32:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014e36:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e38:	2302      	movs	r3, #2
 8014e3a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014e40:	2300      	movs	r3, #0
 8014e42:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8014e44:	230a      	movs	r3, #10
 8014e46:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014e48:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014e4c:	4619      	mov	r1, r3
 8014e4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8014e52:	f7ef ff45 	bl	8004ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014e56:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8014e5a:	f7ff ff97 	bl	8014d8c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8014e5e:	2200      	movs	r2, #0
 8014e60:	2105      	movs	r1, #5
 8014e62:	2014      	movs	r0, #20
 8014e64:	f7ef fcb7 	bl	80047d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014e68:	2014      	movs	r0, #20
 8014e6a:	f7ef fcce 	bl	800480a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014e6e:	bf00      	nop
 8014e70:	3770      	adds	r7, #112	@ 0x70
 8014e72:	46bd      	mov	sp, r7
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	40006800 	.word	0x40006800

08014e7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b082      	sub	sp, #8
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8014e90:	4619      	mov	r1, r3
 8014e92:	4610      	mov	r0, r2
 8014e94:	f7f9 fb83 	bl	800e59e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014e98:	bf00      	nop
 8014e9a:	3708      	adds	r7, #8
 8014e9c:	46bd      	mov	sp, r7
 8014e9e:	bd80      	pop	{r7, pc}

08014ea0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014eb2:	78fa      	ldrb	r2, [r7, #3]
 8014eb4:	6879      	ldr	r1, [r7, #4]
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	009b      	lsls	r3, r3, #2
 8014eba:	4413      	add	r3, r2
 8014ebc:	00db      	lsls	r3, r3, #3
 8014ebe:	440b      	add	r3, r1
 8014ec0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014ec4:	681a      	ldr	r2, [r3, #0]
 8014ec6:	78fb      	ldrb	r3, [r7, #3]
 8014ec8:	4619      	mov	r1, r3
 8014eca:	f7f9 fbbd 	bl	800e648 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014ece:	bf00      	nop
 8014ed0:	3708      	adds	r7, #8
 8014ed2:	46bd      	mov	sp, r7
 8014ed4:	bd80      	pop	{r7, pc}

08014ed6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ed6:	b580      	push	{r7, lr}
 8014ed8:	b082      	sub	sp, #8
 8014eda:	af00      	add	r7, sp, #0
 8014edc:	6078      	str	r0, [r7, #4]
 8014ede:	460b      	mov	r3, r1
 8014ee0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014ee8:	78fa      	ldrb	r2, [r7, #3]
 8014eea:	6879      	ldr	r1, [r7, #4]
 8014eec:	4613      	mov	r3, r2
 8014eee:	009b      	lsls	r3, r3, #2
 8014ef0:	4413      	add	r3, r2
 8014ef2:	00db      	lsls	r3, r3, #3
 8014ef4:	440b      	add	r3, r1
 8014ef6:	3324      	adds	r3, #36	@ 0x24
 8014ef8:	681a      	ldr	r2, [r3, #0]
 8014efa:	78fb      	ldrb	r3, [r7, #3]
 8014efc:	4619      	mov	r1, r3
 8014efe:	f7f9 fc56 	bl	800e7ae <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014f02:	bf00      	nop
 8014f04:	3708      	adds	r7, #8
 8014f06:	46bd      	mov	sp, r7
 8014f08:	bd80      	pop	{r7, pc}

08014f0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f0a:	b580      	push	{r7, lr}
 8014f0c:	b082      	sub	sp, #8
 8014f0e:	af00      	add	r7, sp, #0
 8014f10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f7f9 fd90 	bl	800ea3e <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014f1e:	bf00      	nop
 8014f20:	3708      	adds	r7, #8
 8014f22:	46bd      	mov	sp, r7
 8014f24:	bd80      	pop	{r7, pc}

08014f26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f26:	b580      	push	{r7, lr}
 8014f28:	b084      	sub	sp, #16
 8014f2a:	af00      	add	r7, sp, #0
 8014f2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8014f2e:	2301      	movs	r3, #1
 8014f30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	795b      	ldrb	r3, [r3, #5]
 8014f36:	2b02      	cmp	r3, #2
 8014f38:	d001      	beq.n	8014f3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8014f3a:	f7ee fee7 	bl	8003d0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014f44:	7bfa      	ldrb	r2, [r7, #15]
 8014f46:	4611      	mov	r1, r2
 8014f48:	4618      	mov	r0, r3
 8014f4a:	f7f9 fd34 	bl	800e9b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014f54:	4618      	mov	r0, r3
 8014f56:	f7f9 fcdc 	bl	800e912 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8014f5a:	bf00      	nop
 8014f5c:	3710      	adds	r7, #16
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
	...

08014f64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b082      	sub	sp, #8
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014f72:	4618      	mov	r0, r3
 8014f74:	f7f9 fd2f 	bl	800e9d6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	7a5b      	ldrb	r3, [r3, #9]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d005      	beq.n	8014f8c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014f80:	4b04      	ldr	r3, [pc, #16]	@ (8014f94 <HAL_PCD_SuspendCallback+0x30>)
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	4a03      	ldr	r2, [pc, #12]	@ (8014f94 <HAL_PCD_SuspendCallback+0x30>)
 8014f86:	f043 0306 	orr.w	r3, r3, #6
 8014f8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8014f8c:	bf00      	nop
 8014f8e:	3708      	adds	r7, #8
 8014f90:	46bd      	mov	sp, r7
 8014f92:	bd80      	pop	{r7, pc}
 8014f94:	e000ed00 	.word	0xe000ed00

08014f98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f98:	b580      	push	{r7, lr}
 8014f9a:	b082      	sub	sp, #8
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	7a5b      	ldrb	r3, [r3, #9]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d007      	beq.n	8014fb8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014fa8:	4b08      	ldr	r3, [pc, #32]	@ (8014fcc <HAL_PCD_ResumeCallback+0x34>)
 8014faa:	691b      	ldr	r3, [r3, #16]
 8014fac:	4a07      	ldr	r2, [pc, #28]	@ (8014fcc <HAL_PCD_ResumeCallback+0x34>)
 8014fae:	f023 0306 	bic.w	r3, r3, #6
 8014fb2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8014fb4:	f000 f9fa 	bl	80153ac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f7f9 fd25 	bl	800ea0e <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8014fc4:	bf00      	nop
 8014fc6:	3708      	adds	r7, #8
 8014fc8:	46bd      	mov	sp, r7
 8014fca:	bd80      	pop	{r7, pc}
 8014fcc:	e000ed00 	.word	0xe000ed00

08014fd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8014fd8:	4a2c      	ldr	r2, [pc, #176]	@ (801508c <USBD_LL_Init+0xbc>)
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	4a2a      	ldr	r2, [pc, #168]	@ (801508c <USBD_LL_Init+0xbc>)
 8014fe4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8014fe8:	f7f2 fa7c 	bl	80074e4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8014fec:	4b27      	ldr	r3, [pc, #156]	@ (801508c <USBD_LL_Init+0xbc>)
 8014fee:	4a28      	ldr	r2, [pc, #160]	@ (8015090 <USBD_LL_Init+0xc0>)
 8014ff0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8014ff2:	4b26      	ldr	r3, [pc, #152]	@ (801508c <USBD_LL_Init+0xbc>)
 8014ff4:	2208      	movs	r2, #8
 8014ff6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8014ff8:	4b24      	ldr	r3, [pc, #144]	@ (801508c <USBD_LL_Init+0xbc>)
 8014ffa:	2202      	movs	r2, #2
 8014ffc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014ffe:	4b23      	ldr	r3, [pc, #140]	@ (801508c <USBD_LL_Init+0xbc>)
 8015000:	2202      	movs	r2, #2
 8015002:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015004:	4b21      	ldr	r3, [pc, #132]	@ (801508c <USBD_LL_Init+0xbc>)
 8015006:	2200      	movs	r2, #0
 8015008:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801500a:	4b20      	ldr	r3, [pc, #128]	@ (801508c <USBD_LL_Init+0xbc>)
 801500c:	2200      	movs	r2, #0
 801500e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015010:	4b1e      	ldr	r3, [pc, #120]	@ (801508c <USBD_LL_Init+0xbc>)
 8015012:	2200      	movs	r2, #0
 8015014:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015016:	4b1d      	ldr	r3, [pc, #116]	@ (801508c <USBD_LL_Init+0xbc>)
 8015018:	2200      	movs	r2, #0
 801501a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801501c:	481b      	ldr	r0, [pc, #108]	@ (801508c <USBD_LL_Init+0xbc>)
 801501e:	f7f0 fd0f 	bl	8005a40 <HAL_PCD_Init>
 8015022:	4603      	mov	r3, r0
 8015024:	2b00      	cmp	r3, #0
 8015026:	d001      	beq.n	801502c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015028:	f7ee fe70 	bl	8003d0c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015032:	2318      	movs	r3, #24
 8015034:	2200      	movs	r2, #0
 8015036:	2100      	movs	r1, #0
 8015038:	f7f2 f9c8 	bl	80073cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015042:	2358      	movs	r3, #88	@ 0x58
 8015044:	2200      	movs	r2, #0
 8015046:	2180      	movs	r1, #128	@ 0x80
 8015048:	f7f2 f9c0 	bl	80073cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015052:	23c0      	movs	r3, #192	@ 0xc0
 8015054:	2200      	movs	r2, #0
 8015056:	2181      	movs	r1, #129	@ 0x81
 8015058:	f7f2 f9b8 	bl	80073cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015062:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015066:	2200      	movs	r2, #0
 8015068:	2101      	movs	r1, #1
 801506a:	f7f2 f9af 	bl	80073cc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015078:	2200      	movs	r2, #0
 801507a:	2182      	movs	r1, #130	@ 0x82
 801507c:	f7f2 f9a6 	bl	80073cc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015080:	2300      	movs	r3, #0
}
 8015082:	4618      	mov	r0, r3
 8015084:	3708      	adds	r7, #8
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop
 801508c:	2000256c 	.word	0x2000256c
 8015090:	40006800 	.word	0x40006800

08015094 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015094:	b580      	push	{r7, lr}
 8015096:	b084      	sub	sp, #16
 8015098:	af00      	add	r7, sp, #0
 801509a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801509c:	2300      	movs	r3, #0
 801509e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150a0:	2300      	movs	r3, #0
 80150a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80150aa:	4618      	mov	r0, r3
 80150ac:	f7f0 fd96 	bl	8005bdc <HAL_PCD_Start>
 80150b0:	4603      	mov	r3, r0
 80150b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80150b4:	7bfb      	ldrb	r3, [r7, #15]
 80150b6:	4618      	mov	r0, r3
 80150b8:	f000 f97e 	bl	80153b8 <USBD_Get_USB_Status>
 80150bc:	4603      	mov	r3, r0
 80150be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80150c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80150c2:	4618      	mov	r0, r3
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}

080150ca <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b084      	sub	sp, #16
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
 80150d2:	4608      	mov	r0, r1
 80150d4:	4611      	mov	r1, r2
 80150d6:	461a      	mov	r2, r3
 80150d8:	4603      	mov	r3, r0
 80150da:	70fb      	strb	r3, [r7, #3]
 80150dc:	460b      	mov	r3, r1
 80150de:	70bb      	strb	r3, [r7, #2]
 80150e0:	4613      	mov	r3, r2
 80150e2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80150e4:	2300      	movs	r3, #0
 80150e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80150e8:	2300      	movs	r3, #0
 80150ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80150f2:	78bb      	ldrb	r3, [r7, #2]
 80150f4:	883a      	ldrh	r2, [r7, #0]
 80150f6:	78f9      	ldrb	r1, [r7, #3]
 80150f8:	f7f0 fedd 	bl	8005eb6 <HAL_PCD_EP_Open>
 80150fc:	4603      	mov	r3, r0
 80150fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015100:	7bfb      	ldrb	r3, [r7, #15]
 8015102:	4618      	mov	r0, r3
 8015104:	f000 f958 	bl	80153b8 <USBD_Get_USB_Status>
 8015108:	4603      	mov	r3, r0
 801510a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801510c:	7bbb      	ldrb	r3, [r7, #14]
}
 801510e:	4618      	mov	r0, r3
 8015110:	3710      	adds	r7, #16
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}

08015116 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015116:	b580      	push	{r7, lr}
 8015118:	b084      	sub	sp, #16
 801511a:	af00      	add	r7, sp, #0
 801511c:	6078      	str	r0, [r7, #4]
 801511e:	460b      	mov	r3, r1
 8015120:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015122:	2300      	movs	r3, #0
 8015124:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015126:	2300      	movs	r3, #0
 8015128:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015130:	78fa      	ldrb	r2, [r7, #3]
 8015132:	4611      	mov	r1, r2
 8015134:	4618      	mov	r0, r3
 8015136:	f7f0 ff1b 	bl	8005f70 <HAL_PCD_EP_Close>
 801513a:	4603      	mov	r3, r0
 801513c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801513e:	7bfb      	ldrb	r3, [r7, #15]
 8015140:	4618      	mov	r0, r3
 8015142:	f000 f939 	bl	80153b8 <USBD_Get_USB_Status>
 8015146:	4603      	mov	r3, r0
 8015148:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801514a:	7bbb      	ldrb	r3, [r7, #14]
}
 801514c:	4618      	mov	r0, r3
 801514e:	3710      	adds	r7, #16
 8015150:	46bd      	mov	sp, r7
 8015152:	bd80      	pop	{r7, pc}

08015154 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b084      	sub	sp, #16
 8015158:	af00      	add	r7, sp, #0
 801515a:	6078      	str	r0, [r7, #4]
 801515c:	460b      	mov	r3, r1
 801515e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015160:	2300      	movs	r3, #0
 8015162:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015164:	2300      	movs	r3, #0
 8015166:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801516e:	78fa      	ldrb	r2, [r7, #3]
 8015170:	4611      	mov	r1, r2
 8015172:	4618      	mov	r0, r3
 8015174:	f7f0 ffc4 	bl	8006100 <HAL_PCD_EP_SetStall>
 8015178:	4603      	mov	r3, r0
 801517a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801517c:	7bfb      	ldrb	r3, [r7, #15]
 801517e:	4618      	mov	r0, r3
 8015180:	f000 f91a 	bl	80153b8 <USBD_Get_USB_Status>
 8015184:	4603      	mov	r3, r0
 8015186:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015188:	7bbb      	ldrb	r3, [r7, #14]
}
 801518a:	4618      	mov	r0, r3
 801518c:	3710      	adds	r7, #16
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015192:	b580      	push	{r7, lr}
 8015194:	b084      	sub	sp, #16
 8015196:	af00      	add	r7, sp, #0
 8015198:	6078      	str	r0, [r7, #4]
 801519a:	460b      	mov	r3, r1
 801519c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801519e:	2300      	movs	r3, #0
 80151a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151a2:	2300      	movs	r3, #0
 80151a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80151ac:	78fa      	ldrb	r2, [r7, #3]
 80151ae:	4611      	mov	r1, r2
 80151b0:	4618      	mov	r0, r3
 80151b2:	f7f0 fff7 	bl	80061a4 <HAL_PCD_EP_ClrStall>
 80151b6:	4603      	mov	r3, r0
 80151b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151ba:	7bfb      	ldrb	r3, [r7, #15]
 80151bc:	4618      	mov	r0, r3
 80151be:	f000 f8fb 	bl	80153b8 <USBD_Get_USB_Status>
 80151c2:	4603      	mov	r3, r0
 80151c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3710      	adds	r7, #16
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80151d0:	b480      	push	{r7}
 80151d2:	b085      	sub	sp, #20
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	460b      	mov	r3, r1
 80151da:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80151e2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80151e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	da0b      	bge.n	8015204 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80151ec:	78fb      	ldrb	r3, [r7, #3]
 80151ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80151f2:	68f9      	ldr	r1, [r7, #12]
 80151f4:	4613      	mov	r3, r2
 80151f6:	009b      	lsls	r3, r3, #2
 80151f8:	4413      	add	r3, r2
 80151fa:	00db      	lsls	r3, r3, #3
 80151fc:	440b      	add	r3, r1
 80151fe:	3312      	adds	r3, #18
 8015200:	781b      	ldrb	r3, [r3, #0]
 8015202:	e00b      	b.n	801521c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015204:	78fb      	ldrb	r3, [r7, #3]
 8015206:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801520a:	68f9      	ldr	r1, [r7, #12]
 801520c:	4613      	mov	r3, r2
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	4413      	add	r3, r2
 8015212:	00db      	lsls	r3, r3, #3
 8015214:	440b      	add	r3, r1
 8015216:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801521a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801521c:	4618      	mov	r0, r3
 801521e:	3714      	adds	r7, #20
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr

08015228 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
 8015230:	460b      	mov	r3, r1
 8015232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015234:	2300      	movs	r3, #0
 8015236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015238:	2300      	movs	r3, #0
 801523a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015242:	78fa      	ldrb	r2, [r7, #3]
 8015244:	4611      	mov	r1, r2
 8015246:	4618      	mov	r0, r3
 8015248:	f7f0 fe11 	bl	8005e6e <HAL_PCD_SetAddress>
 801524c:	4603      	mov	r3, r0
 801524e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015250:	7bfb      	ldrb	r3, [r7, #15]
 8015252:	4618      	mov	r0, r3
 8015254:	f000 f8b0 	bl	80153b8 <USBD_Get_USB_Status>
 8015258:	4603      	mov	r3, r0
 801525a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801525c:	7bbb      	ldrb	r3, [r7, #14]
}
 801525e:	4618      	mov	r0, r3
 8015260:	3710      	adds	r7, #16
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}

08015266 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015266:	b580      	push	{r7, lr}
 8015268:	b086      	sub	sp, #24
 801526a:	af00      	add	r7, sp, #0
 801526c:	60f8      	str	r0, [r7, #12]
 801526e:	607a      	str	r2, [r7, #4]
 8015270:	603b      	str	r3, [r7, #0]
 8015272:	460b      	mov	r3, r1
 8015274:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015276:	2300      	movs	r3, #0
 8015278:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801527a:	2300      	movs	r3, #0
 801527c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015284:	7af9      	ldrb	r1, [r7, #11]
 8015286:	683b      	ldr	r3, [r7, #0]
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	f7f0 ff02 	bl	8006092 <HAL_PCD_EP_Transmit>
 801528e:	4603      	mov	r3, r0
 8015290:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015292:	7dfb      	ldrb	r3, [r7, #23]
 8015294:	4618      	mov	r0, r3
 8015296:	f000 f88f 	bl	80153b8 <USBD_Get_USB_Status>
 801529a:	4603      	mov	r3, r0
 801529c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801529e:	7dbb      	ldrb	r3, [r7, #22]
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	3718      	adds	r7, #24
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}

080152a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80152a8:	b580      	push	{r7, lr}
 80152aa:	b086      	sub	sp, #24
 80152ac:	af00      	add	r7, sp, #0
 80152ae:	60f8      	str	r0, [r7, #12]
 80152b0:	607a      	str	r2, [r7, #4]
 80152b2:	603b      	str	r3, [r7, #0]
 80152b4:	460b      	mov	r3, r1
 80152b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152b8:	2300      	movs	r3, #0
 80152ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152bc:	2300      	movs	r3, #0
 80152be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80152c6:	7af9      	ldrb	r1, [r7, #11]
 80152c8:	683b      	ldr	r3, [r7, #0]
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	f7f0 fe98 	bl	8006000 <HAL_PCD_EP_Receive>
 80152d0:	4603      	mov	r3, r0
 80152d2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152d4:	7dfb      	ldrb	r3, [r7, #23]
 80152d6:	4618      	mov	r0, r3
 80152d8:	f000 f86e 	bl	80153b8 <USBD_Get_USB_Status>
 80152dc:	4603      	mov	r3, r0
 80152de:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80152e0:	7dbb      	ldrb	r3, [r7, #22]
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3718      	adds	r7, #24
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}

080152ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152ea:	b580      	push	{r7, lr}
 80152ec:	b082      	sub	sp, #8
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	460b      	mov	r3, r1
 80152f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80152fc:	78fa      	ldrb	r2, [r7, #3]
 80152fe:	4611      	mov	r1, r2
 8015300:	4618      	mov	r0, r3
 8015302:	f7f0 feae 	bl	8006062 <HAL_PCD_EP_GetRxCount>
 8015306:	4603      	mov	r3, r0
}
 8015308:	4618      	mov	r0, r3
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}

08015310 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	460b      	mov	r3, r1
 801531a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801531c:	78fb      	ldrb	r3, [r7, #3]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d002      	beq.n	8015328 <HAL_PCDEx_LPM_Callback+0x18>
 8015322:	2b01      	cmp	r3, #1
 8015324:	d013      	beq.n	801534e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015326:	e023      	b.n	8015370 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	7a5b      	ldrb	r3, [r3, #9]
 801532c:	2b00      	cmp	r3, #0
 801532e:	d007      	beq.n	8015340 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015330:	f000 f83c 	bl	80153ac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015334:	4b10      	ldr	r3, [pc, #64]	@ (8015378 <HAL_PCDEx_LPM_Callback+0x68>)
 8015336:	691b      	ldr	r3, [r3, #16]
 8015338:	4a0f      	ldr	r2, [pc, #60]	@ (8015378 <HAL_PCDEx_LPM_Callback+0x68>)
 801533a:	f023 0306 	bic.w	r3, r3, #6
 801533e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015346:	4618      	mov	r0, r3
 8015348:	f7f9 fb61 	bl	800ea0e <USBD_LL_Resume>
    break;
 801534c:	e010      	b.n	8015370 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015354:	4618      	mov	r0, r3
 8015356:	f7f9 fb3e 	bl	800e9d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	7a5b      	ldrb	r3, [r3, #9]
 801535e:	2b00      	cmp	r3, #0
 8015360:	d005      	beq.n	801536e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015362:	4b05      	ldr	r3, [pc, #20]	@ (8015378 <HAL_PCDEx_LPM_Callback+0x68>)
 8015364:	691b      	ldr	r3, [r3, #16]
 8015366:	4a04      	ldr	r2, [pc, #16]	@ (8015378 <HAL_PCDEx_LPM_Callback+0x68>)
 8015368:	f043 0306 	orr.w	r3, r3, #6
 801536c:	6113      	str	r3, [r2, #16]
    break;
 801536e:	bf00      	nop
}
 8015370:	bf00      	nop
 8015372:	3708      	adds	r7, #8
 8015374:	46bd      	mov	sp, r7
 8015376:	bd80      	pop	{r7, pc}
 8015378:	e000ed00 	.word	0xe000ed00

0801537c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801537c:	b480      	push	{r7}
 801537e:	b083      	sub	sp, #12
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015384:	4b03      	ldr	r3, [pc, #12]	@ (8015394 <USBD_static_malloc+0x18>)
}
 8015386:	4618      	mov	r0, r3
 8015388:	370c      	adds	r7, #12
 801538a:	46bd      	mov	sp, r7
 801538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015390:	4770      	bx	lr
 8015392:	bf00      	nop
 8015394:	20002848 	.word	0x20002848

08015398 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015398:	b480      	push	{r7}
 801539a:	b083      	sub	sp, #12
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80153a0:	bf00      	nop
 80153a2:	370c      	adds	r7, #12
 80153a4:	46bd      	mov	sp, r7
 80153a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153aa:	4770      	bx	lr

080153ac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80153b0:	f7ee fa36 	bl	8003820 <SystemClock_Config>
}
 80153b4:	bf00      	nop
 80153b6:	bd80      	pop	{r7, pc}

080153b8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80153b8:	b480      	push	{r7}
 80153ba:	b085      	sub	sp, #20
 80153bc:	af00      	add	r7, sp, #0
 80153be:	4603      	mov	r3, r0
 80153c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80153c2:	2300      	movs	r3, #0
 80153c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80153c6:	79fb      	ldrb	r3, [r7, #7]
 80153c8:	2b03      	cmp	r3, #3
 80153ca:	d817      	bhi.n	80153fc <USBD_Get_USB_Status+0x44>
 80153cc:	a201      	add	r2, pc, #4	@ (adr r2, 80153d4 <USBD_Get_USB_Status+0x1c>)
 80153ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153d2:	bf00      	nop
 80153d4:	080153e5 	.word	0x080153e5
 80153d8:	080153eb 	.word	0x080153eb
 80153dc:	080153f1 	.word	0x080153f1
 80153e0:	080153f7 	.word	0x080153f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80153e4:	2300      	movs	r3, #0
 80153e6:	73fb      	strb	r3, [r7, #15]
    break;
 80153e8:	e00b      	b.n	8015402 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80153ea:	2303      	movs	r3, #3
 80153ec:	73fb      	strb	r3, [r7, #15]
    break;
 80153ee:	e008      	b.n	8015402 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80153f0:	2301      	movs	r3, #1
 80153f2:	73fb      	strb	r3, [r7, #15]
    break;
 80153f4:	e005      	b.n	8015402 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80153f6:	2303      	movs	r3, #3
 80153f8:	73fb      	strb	r3, [r7, #15]
    break;
 80153fa:	e002      	b.n	8015402 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80153fc:	2303      	movs	r3, #3
 80153fe:	73fb      	strb	r3, [r7, #15]
    break;
 8015400:	bf00      	nop
  }
  return usb_status;
 8015402:	7bfb      	ldrb	r3, [r7, #15]
}
 8015404:	4618      	mov	r0, r3
 8015406:	3714      	adds	r7, #20
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr

08015410 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8015410:	b480      	push	{r7}
 8015412:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015414:	4b05      	ldr	r3, [pc, #20]	@ (801542c <UTIL_LPM_Init+0x1c>)
 8015416:	2200      	movs	r2, #0
 8015418:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801541a:	4b05      	ldr	r3, [pc, #20]	@ (8015430 <UTIL_LPM_Init+0x20>)
 801541c:	2200      	movs	r2, #0
 801541e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015420:	bf00      	nop
 8015422:	46bd      	mov	sp, r7
 8015424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015428:	4770      	bx	lr
 801542a:	bf00      	nop
 801542c:	20002a68 	.word	0x20002a68
 8015430:	20002a6c 	.word	0x20002a6c

08015434 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015434:	b480      	push	{r7}
 8015436:	b087      	sub	sp, #28
 8015438:	af00      	add	r7, sp, #0
 801543a:	6078      	str	r0, [r7, #4]
 801543c:	460b      	mov	r3, r1
 801543e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015440:	f3ef 8310 	mrs	r3, PRIMASK
 8015444:	613b      	str	r3, [r7, #16]
  return(result);
 8015446:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015448:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801544a:	b672      	cpsid	i
}
 801544c:	bf00      	nop
  
  switch(state)
 801544e:	78fb      	ldrb	r3, [r7, #3]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d008      	beq.n	8015466 <UTIL_LPM_SetOffMode+0x32>
 8015454:	2b01      	cmp	r3, #1
 8015456:	d10e      	bne.n	8015476 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015458:	4b0d      	ldr	r3, [pc, #52]	@ (8015490 <UTIL_LPM_SetOffMode+0x5c>)
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	4313      	orrs	r3, r2
 8015460:	4a0b      	ldr	r2, [pc, #44]	@ (8015490 <UTIL_LPM_SetOffMode+0x5c>)
 8015462:	6013      	str	r3, [r2, #0]
      break;
 8015464:	e008      	b.n	8015478 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	43da      	mvns	r2, r3
 801546a:	4b09      	ldr	r3, [pc, #36]	@ (8015490 <UTIL_LPM_SetOffMode+0x5c>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	4013      	ands	r3, r2
 8015470:	4a07      	ldr	r2, [pc, #28]	@ (8015490 <UTIL_LPM_SetOffMode+0x5c>)
 8015472:	6013      	str	r3, [r2, #0]
      break;
 8015474:	e000      	b.n	8015478 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8015476:	bf00      	nop
 8015478:	697b      	ldr	r3, [r7, #20]
 801547a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	f383 8810 	msr	PRIMASK, r3
}
 8015482:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015484:	bf00      	nop
 8015486:	371c      	adds	r7, #28
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr
 8015490:	20002a6c 	.word	0x20002a6c

08015494 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b090      	sub	sp, #64	@ 0x40
 8015498:	af00      	add	r7, sp, #0
 801549a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801549c:	4b73      	ldr	r3, [pc, #460]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80154a2:	4b72      	ldr	r3, [pc, #456]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	4013      	ands	r3, r2
 80154aa:	4a70      	ldr	r2, [pc, #448]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 80154ac:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80154ae:	4b70      	ldr	r3, [pc, #448]	@ (8015670 <UTIL_SEQ_Run+0x1dc>)
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80154b4:	4b6f      	ldr	r3, [pc, #444]	@ (8015674 <UTIL_SEQ_Run+0x1e0>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80154ba:	4b6f      	ldr	r3, [pc, #444]	@ (8015678 <UTIL_SEQ_Run+0x1e4>)
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80154c0:	4b6e      	ldr	r3, [pc, #440]	@ (801567c <UTIL_SEQ_Run+0x1e8>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80154c6:	e08d      	b.n	80155e4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80154c8:	2300      	movs	r3, #0
 80154ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80154cc:	e002      	b.n	80154d4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80154ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154d0:	3301      	adds	r3, #1
 80154d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80154d4:	4a6a      	ldr	r2, [pc, #424]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 80154d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80154dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154de:	401a      	ands	r2, r3
 80154e0:	4b62      	ldr	r3, [pc, #392]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	4013      	ands	r3, r2
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d0f1      	beq.n	80154ce <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80154ea:	4a65      	ldr	r2, [pc, #404]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 80154ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80154ee:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80154f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f4:	401a      	ands	r2, r3
 80154f6:	4b5d      	ldr	r3, [pc, #372]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	4013      	ands	r3, r2
 80154fc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80154fe:	4a60      	ldr	r2, [pc, #384]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 8015500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015502:	00db      	lsls	r3, r3, #3
 8015504:	4413      	add	r3, r2
 8015506:	685a      	ldr	r2, [r3, #4]
 8015508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801550a:	4013      	ands	r3, r2
 801550c:	2b00      	cmp	r3, #0
 801550e:	d106      	bne.n	801551e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8015510:	4a5b      	ldr	r2, [pc, #364]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 8015512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015514:	00db      	lsls	r3, r3, #3
 8015516:	4413      	add	r3, r2
 8015518:	f04f 32ff 	mov.w	r2, #4294967295
 801551c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801551e:	4a58      	ldr	r2, [pc, #352]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 8015520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015522:	00db      	lsls	r3, r3, #3
 8015524:	4413      	add	r3, r2
 8015526:	685a      	ldr	r2, [r3, #4]
 8015528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801552a:	4013      	ands	r3, r2
 801552c:	4618      	mov	r0, r3
 801552e:	f000 f9b3 	bl	8015898 <SEQ_BitPosition>
 8015532:	4603      	mov	r3, r0
 8015534:	461a      	mov	r2, r3
 8015536:	4b53      	ldr	r3, [pc, #332]	@ (8015684 <UTIL_SEQ_Run+0x1f0>)
 8015538:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801553a:	4a51      	ldr	r2, [pc, #324]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 801553c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801553e:	00db      	lsls	r3, r3, #3
 8015540:	4413      	add	r3, r2
 8015542:	685a      	ldr	r2, [r3, #4]
 8015544:	4b4f      	ldr	r3, [pc, #316]	@ (8015684 <UTIL_SEQ_Run+0x1f0>)
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	2101      	movs	r1, #1
 801554a:	fa01 f303 	lsl.w	r3, r1, r3
 801554e:	43db      	mvns	r3, r3
 8015550:	401a      	ands	r2, r3
 8015552:	494b      	ldr	r1, [pc, #300]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 8015554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015556:	00db      	lsls	r3, r3, #3
 8015558:	440b      	add	r3, r1
 801555a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801555c:	f3ef 8310 	mrs	r3, PRIMASK
 8015560:	61bb      	str	r3, [r7, #24]
  return(result);
 8015562:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015564:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8015566:	b672      	cpsid	i
}
 8015568:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801556a:	4b46      	ldr	r3, [pc, #280]	@ (8015684 <UTIL_SEQ_Run+0x1f0>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	2201      	movs	r2, #1
 8015570:	fa02 f303 	lsl.w	r3, r2, r3
 8015574:	43da      	mvns	r2, r3
 8015576:	4b3e      	ldr	r3, [pc, #248]	@ (8015670 <UTIL_SEQ_Run+0x1dc>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	4013      	ands	r3, r2
 801557c:	4a3c      	ldr	r2, [pc, #240]	@ (8015670 <UTIL_SEQ_Run+0x1dc>)
 801557e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015580:	2302      	movs	r3, #2
 8015582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015584:	e013      	b.n	80155ae <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8015586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015588:	3b01      	subs	r3, #1
 801558a:	4a3d      	ldr	r2, [pc, #244]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 801558c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8015590:	4b3c      	ldr	r3, [pc, #240]	@ (8015684 <UTIL_SEQ_Run+0x1f0>)
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	2201      	movs	r2, #1
 8015596:	fa02 f303 	lsl.w	r3, r2, r3
 801559a:	43da      	mvns	r2, r3
 801559c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801559e:	3b01      	subs	r3, #1
 80155a0:	400a      	ands	r2, r1
 80155a2:	4937      	ldr	r1, [pc, #220]	@ (8015680 <UTIL_SEQ_Run+0x1ec>)
 80155a4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80155a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155aa:	3b01      	subs	r3, #1
 80155ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80155ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155b0:	2b00      	cmp	r3, #0
 80155b2:	d1e8      	bne.n	8015586 <UTIL_SEQ_Run+0xf2>
 80155b4:	6a3b      	ldr	r3, [r7, #32]
 80155b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	f383 8810 	msr	PRIMASK, r3
}
 80155be:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80155c0:	4b30      	ldr	r3, [pc, #192]	@ (8015684 <UTIL_SEQ_Run+0x1f0>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4a30      	ldr	r2, [pc, #192]	@ (8015688 <UTIL_SEQ_Run+0x1f4>)
 80155c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80155ca:	4798      	blx	r3

    local_taskset = TaskSet;
 80155cc:	4b28      	ldr	r3, [pc, #160]	@ (8015670 <UTIL_SEQ_Run+0x1dc>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80155d2:	4b28      	ldr	r3, [pc, #160]	@ (8015674 <UTIL_SEQ_Run+0x1e0>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80155d8:	4b27      	ldr	r3, [pc, #156]	@ (8015678 <UTIL_SEQ_Run+0x1e4>)
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80155de:	4b27      	ldr	r3, [pc, #156]	@ (801567c <UTIL_SEQ_Run+0x1e8>)
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80155e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80155e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155e8:	401a      	ands	r2, r3
 80155ea:	4b20      	ldr	r3, [pc, #128]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	4013      	ands	r3, r2
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d005      	beq.n	8015600 <UTIL_SEQ_Run+0x16c>
 80155f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80155f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80155f8:	4013      	ands	r3, r2
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f43f af64 	beq.w	80154c8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8015600:	4b20      	ldr	r3, [pc, #128]	@ (8015684 <UTIL_SEQ_Run+0x1f0>)
 8015602:	f04f 32ff 	mov.w	r2, #4294967295
 8015606:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8015608:	f000 f938 	bl	801587c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801560c:	f3ef 8310 	mrs	r3, PRIMASK
 8015610:	613b      	str	r3, [r7, #16]
  return(result);
 8015612:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8015614:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015616:	b672      	cpsid	i
}
 8015618:	bf00      	nop
  local_taskset = TaskSet;
 801561a:	4b15      	ldr	r3, [pc, #84]	@ (8015670 <UTIL_SEQ_Run+0x1dc>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015620:	4b14      	ldr	r3, [pc, #80]	@ (8015674 <UTIL_SEQ_Run+0x1e0>)
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015626:	4b14      	ldr	r3, [pc, #80]	@ (8015678 <UTIL_SEQ_Run+0x1e4>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801562c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015630:	401a      	ands	r2, r3
 8015632:	4b0e      	ldr	r3, [pc, #56]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	4013      	ands	r3, r2
 8015638:	2b00      	cmp	r3, #0
 801563a:	d107      	bne.n	801564c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801563c:	4b0f      	ldr	r3, [pc, #60]	@ (801567c <UTIL_SEQ_Run+0x1e8>)
 801563e:	681a      	ldr	r2, [r3, #0]
 8015640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015642:	4013      	ands	r3, r2
 8015644:	2b00      	cmp	r3, #0
 8015646:	d101      	bne.n	801564c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8015648:	f7ec ff0f 	bl	800246a <UTIL_SEQ_Idle>
 801564c:	69fb      	ldr	r3, [r7, #28]
 801564e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	f383 8810 	msr	PRIMASK, r3
}
 8015656:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8015658:	f000 f917 	bl	801588a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801565c:	4a03      	ldr	r2, [pc, #12]	@ (801566c <UTIL_SEQ_Run+0x1d8>)
 801565e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015660:	6013      	str	r3, [r2, #0]

  return;
 8015662:	bf00      	nop
}
 8015664:	3740      	adds	r7, #64	@ 0x40
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
 801566a:	bf00      	nop
 801566c:	20000128 	.word	0x20000128
 8015670:	20002a70 	.word	0x20002a70
 8015674:	20002a74 	.word	0x20002a74
 8015678:	20000124 	.word	0x20000124
 801567c:	20002a78 	.word	0x20002a78
 8015680:	20002b00 	.word	0x20002b00
 8015684:	20002a7c 	.word	0x20002a7c
 8015688:	20002a80 	.word	0x20002a80

0801568c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801568c:	b580      	push	{r7, lr}
 801568e:	b088      	sub	sp, #32
 8015690:	af00      	add	r7, sp, #0
 8015692:	60f8      	str	r0, [r7, #12]
 8015694:	60b9      	str	r1, [r7, #8]
 8015696:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015698:	f3ef 8310 	mrs	r3, PRIMASK
 801569c:	617b      	str	r3, [r7, #20]
  return(result);
 801569e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80156a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80156a2:	b672      	cpsid	i
}
 80156a4:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80156a6:	68f8      	ldr	r0, [r7, #12]
 80156a8:	f000 f8f6 	bl	8015898 <SEQ_BitPosition>
 80156ac:	4603      	mov	r3, r0
 80156ae:	4619      	mov	r1, r3
 80156b0:	4a06      	ldr	r2, [pc, #24]	@ (80156cc <UTIL_SEQ_RegTask+0x40>)
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80156b8:	69fb      	ldr	r3, [r7, #28]
 80156ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80156bc:	69bb      	ldr	r3, [r7, #24]
 80156be:	f383 8810 	msr	PRIMASK, r3
}
 80156c2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80156c4:	bf00      	nop
}
 80156c6:	3720      	adds	r7, #32
 80156c8:	46bd      	mov	sp, r7
 80156ca:	bd80      	pop	{r7, pc}
 80156cc:	20002a80 	.word	0x20002a80

080156d0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80156d0:	b480      	push	{r7}
 80156d2:	b087      	sub	sp, #28
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
 80156d8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156da:	f3ef 8310 	mrs	r3, PRIMASK
 80156de:	60fb      	str	r3, [r7, #12]
  return(result);
 80156e0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80156e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80156e4:	b672      	cpsid	i
}
 80156e6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80156e8:	4b0d      	ldr	r3, [pc, #52]	@ (8015720 <UTIL_SEQ_SetTask+0x50>)
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	4313      	orrs	r3, r2
 80156f0:	4a0b      	ldr	r2, [pc, #44]	@ (8015720 <UTIL_SEQ_SetTask+0x50>)
 80156f2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80156f4:	4a0b      	ldr	r2, [pc, #44]	@ (8015724 <UTIL_SEQ_SetTask+0x54>)
 80156f6:	683b      	ldr	r3, [r7, #0]
 80156f8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	431a      	orrs	r2, r3
 8015700:	4908      	ldr	r1, [pc, #32]	@ (8015724 <UTIL_SEQ_SetTask+0x54>)
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	f383 8810 	msr	PRIMASK, r3
}
 8015712:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015714:	bf00      	nop
}
 8015716:	371c      	adds	r7, #28
 8015718:	46bd      	mov	sp, r7
 801571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571e:	4770      	bx	lr
 8015720:	20002a70 	.word	0x20002a70
 8015724:	20002b00 	.word	0x20002b00

08015728 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015728:	b480      	push	{r7}
 801572a:	b087      	sub	sp, #28
 801572c:	af00      	add	r7, sp, #0
 801572e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015730:	f3ef 8310 	mrs	r3, PRIMASK
 8015734:	60fb      	str	r3, [r7, #12]
  return(result);
 8015736:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801573a:	b672      	cpsid	i
}
 801573c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	43da      	mvns	r2, r3
 8015742:	4b08      	ldr	r3, [pc, #32]	@ (8015764 <UTIL_SEQ_PauseTask+0x3c>)
 8015744:	681b      	ldr	r3, [r3, #0]
 8015746:	4013      	ands	r3, r2
 8015748:	4a06      	ldr	r2, [pc, #24]	@ (8015764 <UTIL_SEQ_PauseTask+0x3c>)
 801574a:	6013      	str	r3, [r2, #0]
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015750:	693b      	ldr	r3, [r7, #16]
 8015752:	f383 8810 	msr	PRIMASK, r3
}
 8015756:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015758:	bf00      	nop
}
 801575a:	371c      	adds	r7, #28
 801575c:	46bd      	mov	sp, r7
 801575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015762:	4770      	bx	lr
 8015764:	20000124 	.word	0x20000124

08015768 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015768:	b480      	push	{r7}
 801576a:	b087      	sub	sp, #28
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015770:	f3ef 8310 	mrs	r3, PRIMASK
 8015774:	60fb      	str	r3, [r7, #12]
  return(result);
 8015776:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015778:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801577a:	b672      	cpsid	i
}
 801577c:	bf00      	nop

  TaskMask |= TaskId_bm;
 801577e:	4b09      	ldr	r3, [pc, #36]	@ (80157a4 <UTIL_SEQ_ResumeTask+0x3c>)
 8015780:	681a      	ldr	r2, [r3, #0]
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	4313      	orrs	r3, r2
 8015786:	4a07      	ldr	r2, [pc, #28]	@ (80157a4 <UTIL_SEQ_ResumeTask+0x3c>)
 8015788:	6013      	str	r3, [r2, #0]
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801578e:	693b      	ldr	r3, [r7, #16]
 8015790:	f383 8810 	msr	PRIMASK, r3
}
 8015794:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015796:	bf00      	nop
}
 8015798:	371c      	adds	r7, #28
 801579a:	46bd      	mov	sp, r7
 801579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a0:	4770      	bx	lr
 80157a2:	bf00      	nop
 80157a4:	20000124 	.word	0x20000124

080157a8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80157a8:	b480      	push	{r7}
 80157aa:	b087      	sub	sp, #28
 80157ac:	af00      	add	r7, sp, #0
 80157ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80157b0:	f3ef 8310 	mrs	r3, PRIMASK
 80157b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80157b6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80157b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80157ba:	b672      	cpsid	i
}
 80157bc:	bf00      	nop

  EvtSet |= EvtId_bm;
 80157be:	4b09      	ldr	r3, [pc, #36]	@ (80157e4 <UTIL_SEQ_SetEvt+0x3c>)
 80157c0:	681a      	ldr	r2, [r3, #0]
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	4313      	orrs	r3, r2
 80157c6:	4a07      	ldr	r2, [pc, #28]	@ (80157e4 <UTIL_SEQ_SetEvt+0x3c>)
 80157c8:	6013      	str	r3, [r2, #0]
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	f383 8810 	msr	PRIMASK, r3
}
 80157d4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80157d6:	bf00      	nop
}
 80157d8:	371c      	adds	r7, #28
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr
 80157e2:	bf00      	nop
 80157e4:	20002a74 	.word	0x20002a74

080157e8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b088      	sub	sp, #32
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80157f0:	4b1f      	ldr	r3, [pc, #124]	@ (8015870 <UTIL_SEQ_WaitEvt+0x88>)
 80157f2:	681b      	ldr	r3, [r3, #0]
 80157f4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80157f6:	4b1e      	ldr	r3, [pc, #120]	@ (8015870 <UTIL_SEQ_WaitEvt+0x88>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157fe:	d102      	bne.n	8015806 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8015800:	2300      	movs	r3, #0
 8015802:	61fb      	str	r3, [r7, #28]
 8015804:	e005      	b.n	8015812 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8015806:	4b1a      	ldr	r3, [pc, #104]	@ (8015870 <UTIL_SEQ_WaitEvt+0x88>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	2201      	movs	r2, #1
 801580c:	fa02 f303 	lsl.w	r3, r2, r3
 8015810:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8015812:	4b18      	ldr	r3, [pc, #96]	@ (8015874 <UTIL_SEQ_WaitEvt+0x8c>)
 8015814:	681b      	ldr	r3, [r3, #0]
 8015816:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8015818:	4a16      	ldr	r2, [pc, #88]	@ (8015874 <UTIL_SEQ_WaitEvt+0x8c>)
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801581e:	e003      	b.n	8015828 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8015820:	6879      	ldr	r1, [r7, #4]
 8015822:	69f8      	ldr	r0, [r7, #28]
 8015824:	f7ec fe28 	bl	8002478 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8015828:	4b13      	ldr	r3, [pc, #76]	@ (8015878 <UTIL_SEQ_WaitEvt+0x90>)
 801582a:	681a      	ldr	r2, [r3, #0]
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	4013      	ands	r3, r2
 8015830:	2b00      	cmp	r3, #0
 8015832:	d0f5      	beq.n	8015820 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8015834:	4a0e      	ldr	r2, [pc, #56]	@ (8015870 <UTIL_SEQ_WaitEvt+0x88>)
 8015836:	69bb      	ldr	r3, [r7, #24]
 8015838:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801583a:	f3ef 8310 	mrs	r3, PRIMASK
 801583e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015840:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015842:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015844:	b672      	cpsid	i
}
 8015846:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	43da      	mvns	r2, r3
 801584c:	4b0a      	ldr	r3, [pc, #40]	@ (8015878 <UTIL_SEQ_WaitEvt+0x90>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	4013      	ands	r3, r2
 8015852:	4a09      	ldr	r2, [pc, #36]	@ (8015878 <UTIL_SEQ_WaitEvt+0x90>)
 8015854:	6013      	str	r3, [r2, #0]
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801585a:	68fb      	ldr	r3, [r7, #12]
 801585c:	f383 8810 	msr	PRIMASK, r3
}
 8015860:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8015862:	4a04      	ldr	r2, [pc, #16]	@ (8015874 <UTIL_SEQ_WaitEvt+0x8c>)
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	6013      	str	r3, [r2, #0]
  return;
 8015868:	bf00      	nop
}
 801586a:	3720      	adds	r7, #32
 801586c:	46bd      	mov	sp, r7
 801586e:	bd80      	pop	{r7, pc}
 8015870:	20002a7c 	.word	0x20002a7c
 8015874:	20002a78 	.word	0x20002a78
 8015878:	20002a74 	.word	0x20002a74

0801587c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801587c:	b480      	push	{r7}
 801587e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8015880:	bf00      	nop
}
 8015882:	46bd      	mov	sp, r7
 8015884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015888:	4770      	bx	lr

0801588a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801588a:	b480      	push	{r7}
 801588c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801588e:	bf00      	nop
}
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr

08015898 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8015898:	b480      	push	{r7}
 801589a:	b085      	sub	sp, #20
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80158a0:	2300      	movs	r3, #0
 80158a2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80158a8:	68bb      	ldr	r3, [r7, #8]
 80158aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80158ae:	d204      	bcs.n	80158ba <SEQ_BitPosition+0x22>
 80158b0:	2310      	movs	r3, #16
 80158b2:	73fb      	strb	r3, [r7, #15]
 80158b4:	68bb      	ldr	r3, [r7, #8]
 80158b6:	041b      	lsls	r3, r3, #16
 80158b8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80158c0:	d205      	bcs.n	80158ce <SEQ_BitPosition+0x36>
 80158c2:	7bfb      	ldrb	r3, [r7, #15]
 80158c4:	3308      	adds	r3, #8
 80158c6:	73fb      	strb	r3, [r7, #15]
 80158c8:	68bb      	ldr	r3, [r7, #8]
 80158ca:	021b      	lsls	r3, r3, #8
 80158cc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80158ce:	68bb      	ldr	r3, [r7, #8]
 80158d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80158d4:	d205      	bcs.n	80158e2 <SEQ_BitPosition+0x4a>
 80158d6:	7bfb      	ldrb	r3, [r7, #15]
 80158d8:	3304      	adds	r3, #4
 80158da:	73fb      	strb	r3, [r7, #15]
 80158dc:	68bb      	ldr	r3, [r7, #8]
 80158de:	011b      	lsls	r3, r3, #4
 80158e0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	0f1b      	lsrs	r3, r3, #28
 80158e6:	4a07      	ldr	r2, [pc, #28]	@ (8015904 <SEQ_BitPosition+0x6c>)
 80158e8:	5cd2      	ldrb	r2, [r2, r3]
 80158ea:	7bfb      	ldrb	r3, [r7, #15]
 80158ec:	4413      	add	r3, r2
 80158ee:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80158f0:	7bfb      	ldrb	r3, [r7, #15]
 80158f2:	f1c3 031f 	rsb	r3, r3, #31
 80158f6:	b2db      	uxtb	r3, r3
}
 80158f8:	4618      	mov	r0, r3
 80158fa:	3714      	adds	r7, #20
 80158fc:	46bd      	mov	sp, r7
 80158fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015902:	4770      	bx	lr
 8015904:	080189dc 	.word	0x080189dc

08015908 <std>:
 8015908:	2300      	movs	r3, #0
 801590a:	b510      	push	{r4, lr}
 801590c:	4604      	mov	r4, r0
 801590e:	e9c0 3300 	strd	r3, r3, [r0]
 8015912:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015916:	6083      	str	r3, [r0, #8]
 8015918:	8181      	strh	r1, [r0, #12]
 801591a:	6643      	str	r3, [r0, #100]	@ 0x64
 801591c:	81c2      	strh	r2, [r0, #14]
 801591e:	6183      	str	r3, [r0, #24]
 8015920:	4619      	mov	r1, r3
 8015922:	2208      	movs	r2, #8
 8015924:	305c      	adds	r0, #92	@ 0x5c
 8015926:	f000 fa39 	bl	8015d9c <memset>
 801592a:	4b0d      	ldr	r3, [pc, #52]	@ (8015960 <std+0x58>)
 801592c:	6263      	str	r3, [r4, #36]	@ 0x24
 801592e:	4b0d      	ldr	r3, [pc, #52]	@ (8015964 <std+0x5c>)
 8015930:	62a3      	str	r3, [r4, #40]	@ 0x28
 8015932:	4b0d      	ldr	r3, [pc, #52]	@ (8015968 <std+0x60>)
 8015934:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8015936:	4b0d      	ldr	r3, [pc, #52]	@ (801596c <std+0x64>)
 8015938:	6323      	str	r3, [r4, #48]	@ 0x30
 801593a:	4b0d      	ldr	r3, [pc, #52]	@ (8015970 <std+0x68>)
 801593c:	6224      	str	r4, [r4, #32]
 801593e:	429c      	cmp	r4, r3
 8015940:	d006      	beq.n	8015950 <std+0x48>
 8015942:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8015946:	4294      	cmp	r4, r2
 8015948:	d002      	beq.n	8015950 <std+0x48>
 801594a:	33d0      	adds	r3, #208	@ 0xd0
 801594c:	429c      	cmp	r4, r3
 801594e:	d105      	bne.n	801595c <std+0x54>
 8015950:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8015954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015958:	f000 bac0 	b.w	8015edc <__retarget_lock_init_recursive>
 801595c:	bd10      	pop	{r4, pc}
 801595e:	bf00      	nop
 8015960:	08015b7d 	.word	0x08015b7d
 8015964:	08015b9f 	.word	0x08015b9f
 8015968:	08015bd7 	.word	0x08015bd7
 801596c:	08015bfb 	.word	0x08015bfb
 8015970:	20002b10 	.word	0x20002b10

08015974 <stdio_exit_handler>:
 8015974:	4a02      	ldr	r2, [pc, #8]	@ (8015980 <stdio_exit_handler+0xc>)
 8015976:	4903      	ldr	r1, [pc, #12]	@ (8015984 <stdio_exit_handler+0x10>)
 8015978:	4803      	ldr	r0, [pc, #12]	@ (8015988 <stdio_exit_handler+0x14>)
 801597a:	f000 b869 	b.w	8015a50 <_fwalk_sglue>
 801597e:	bf00      	nop
 8015980:	2000012c 	.word	0x2000012c
 8015984:	08016a49 	.word	0x08016a49
 8015988:	2000013c 	.word	0x2000013c

0801598c <cleanup_stdio>:
 801598c:	6841      	ldr	r1, [r0, #4]
 801598e:	4b0c      	ldr	r3, [pc, #48]	@ (80159c0 <cleanup_stdio+0x34>)
 8015990:	4299      	cmp	r1, r3
 8015992:	b510      	push	{r4, lr}
 8015994:	4604      	mov	r4, r0
 8015996:	d001      	beq.n	801599c <cleanup_stdio+0x10>
 8015998:	f001 f856 	bl	8016a48 <_fflush_r>
 801599c:	68a1      	ldr	r1, [r4, #8]
 801599e:	4b09      	ldr	r3, [pc, #36]	@ (80159c4 <cleanup_stdio+0x38>)
 80159a0:	4299      	cmp	r1, r3
 80159a2:	d002      	beq.n	80159aa <cleanup_stdio+0x1e>
 80159a4:	4620      	mov	r0, r4
 80159a6:	f001 f84f 	bl	8016a48 <_fflush_r>
 80159aa:	68e1      	ldr	r1, [r4, #12]
 80159ac:	4b06      	ldr	r3, [pc, #24]	@ (80159c8 <cleanup_stdio+0x3c>)
 80159ae:	4299      	cmp	r1, r3
 80159b0:	d004      	beq.n	80159bc <cleanup_stdio+0x30>
 80159b2:	4620      	mov	r0, r4
 80159b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159b8:	f001 b846 	b.w	8016a48 <_fflush_r>
 80159bc:	bd10      	pop	{r4, pc}
 80159be:	bf00      	nop
 80159c0:	20002b10 	.word	0x20002b10
 80159c4:	20002b78 	.word	0x20002b78
 80159c8:	20002be0 	.word	0x20002be0

080159cc <global_stdio_init.part.0>:
 80159cc:	b510      	push	{r4, lr}
 80159ce:	4b0b      	ldr	r3, [pc, #44]	@ (80159fc <global_stdio_init.part.0+0x30>)
 80159d0:	4c0b      	ldr	r4, [pc, #44]	@ (8015a00 <global_stdio_init.part.0+0x34>)
 80159d2:	4a0c      	ldr	r2, [pc, #48]	@ (8015a04 <global_stdio_init.part.0+0x38>)
 80159d4:	601a      	str	r2, [r3, #0]
 80159d6:	4620      	mov	r0, r4
 80159d8:	2200      	movs	r2, #0
 80159da:	2104      	movs	r1, #4
 80159dc:	f7ff ff94 	bl	8015908 <std>
 80159e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80159e4:	2201      	movs	r2, #1
 80159e6:	2109      	movs	r1, #9
 80159e8:	f7ff ff8e 	bl	8015908 <std>
 80159ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80159f0:	2202      	movs	r2, #2
 80159f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159f6:	2112      	movs	r1, #18
 80159f8:	f7ff bf86 	b.w	8015908 <std>
 80159fc:	20002c48 	.word	0x20002c48
 8015a00:	20002b10 	.word	0x20002b10
 8015a04:	08015975 	.word	0x08015975

08015a08 <__sfp_lock_acquire>:
 8015a08:	4801      	ldr	r0, [pc, #4]	@ (8015a10 <__sfp_lock_acquire+0x8>)
 8015a0a:	f000 ba68 	b.w	8015ede <__retarget_lock_acquire_recursive>
 8015a0e:	bf00      	nop
 8015a10:	20002c51 	.word	0x20002c51

08015a14 <__sfp_lock_release>:
 8015a14:	4801      	ldr	r0, [pc, #4]	@ (8015a1c <__sfp_lock_release+0x8>)
 8015a16:	f000 ba63 	b.w	8015ee0 <__retarget_lock_release_recursive>
 8015a1a:	bf00      	nop
 8015a1c:	20002c51 	.word	0x20002c51

08015a20 <__sinit>:
 8015a20:	b510      	push	{r4, lr}
 8015a22:	4604      	mov	r4, r0
 8015a24:	f7ff fff0 	bl	8015a08 <__sfp_lock_acquire>
 8015a28:	6a23      	ldr	r3, [r4, #32]
 8015a2a:	b11b      	cbz	r3, 8015a34 <__sinit+0x14>
 8015a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a30:	f7ff bff0 	b.w	8015a14 <__sfp_lock_release>
 8015a34:	4b04      	ldr	r3, [pc, #16]	@ (8015a48 <__sinit+0x28>)
 8015a36:	6223      	str	r3, [r4, #32]
 8015a38:	4b04      	ldr	r3, [pc, #16]	@ (8015a4c <__sinit+0x2c>)
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	d1f5      	bne.n	8015a2c <__sinit+0xc>
 8015a40:	f7ff ffc4 	bl	80159cc <global_stdio_init.part.0>
 8015a44:	e7f2      	b.n	8015a2c <__sinit+0xc>
 8015a46:	bf00      	nop
 8015a48:	0801598d 	.word	0x0801598d
 8015a4c:	20002c48 	.word	0x20002c48

08015a50 <_fwalk_sglue>:
 8015a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015a54:	4607      	mov	r7, r0
 8015a56:	4688      	mov	r8, r1
 8015a58:	4614      	mov	r4, r2
 8015a5a:	2600      	movs	r6, #0
 8015a5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015a60:	f1b9 0901 	subs.w	r9, r9, #1
 8015a64:	d505      	bpl.n	8015a72 <_fwalk_sglue+0x22>
 8015a66:	6824      	ldr	r4, [r4, #0]
 8015a68:	2c00      	cmp	r4, #0
 8015a6a:	d1f7      	bne.n	8015a5c <_fwalk_sglue+0xc>
 8015a6c:	4630      	mov	r0, r6
 8015a6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a72:	89ab      	ldrh	r3, [r5, #12]
 8015a74:	2b01      	cmp	r3, #1
 8015a76:	d907      	bls.n	8015a88 <_fwalk_sglue+0x38>
 8015a78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015a7c:	3301      	adds	r3, #1
 8015a7e:	d003      	beq.n	8015a88 <_fwalk_sglue+0x38>
 8015a80:	4629      	mov	r1, r5
 8015a82:	4638      	mov	r0, r7
 8015a84:	47c0      	blx	r8
 8015a86:	4306      	orrs	r6, r0
 8015a88:	3568      	adds	r5, #104	@ 0x68
 8015a8a:	e7e9      	b.n	8015a60 <_fwalk_sglue+0x10>

08015a8c <iprintf>:
 8015a8c:	b40f      	push	{r0, r1, r2, r3}
 8015a8e:	b507      	push	{r0, r1, r2, lr}
 8015a90:	4906      	ldr	r1, [pc, #24]	@ (8015aac <iprintf+0x20>)
 8015a92:	ab04      	add	r3, sp, #16
 8015a94:	6808      	ldr	r0, [r1, #0]
 8015a96:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a9a:	6881      	ldr	r1, [r0, #8]
 8015a9c:	9301      	str	r3, [sp, #4]
 8015a9e:	f000 fca9 	bl	80163f4 <_vfiprintf_r>
 8015aa2:	b003      	add	sp, #12
 8015aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8015aa8:	b004      	add	sp, #16
 8015aaa:	4770      	bx	lr
 8015aac:	20000138 	.word	0x20000138

08015ab0 <putchar>:
 8015ab0:	4b02      	ldr	r3, [pc, #8]	@ (8015abc <putchar+0xc>)
 8015ab2:	4601      	mov	r1, r0
 8015ab4:	6818      	ldr	r0, [r3, #0]
 8015ab6:	6882      	ldr	r2, [r0, #8]
 8015ab8:	f001 b850 	b.w	8016b5c <_putc_r>
 8015abc:	20000138 	.word	0x20000138

08015ac0 <_puts_r>:
 8015ac0:	6a03      	ldr	r3, [r0, #32]
 8015ac2:	b570      	push	{r4, r5, r6, lr}
 8015ac4:	6884      	ldr	r4, [r0, #8]
 8015ac6:	4605      	mov	r5, r0
 8015ac8:	460e      	mov	r6, r1
 8015aca:	b90b      	cbnz	r3, 8015ad0 <_puts_r+0x10>
 8015acc:	f7ff ffa8 	bl	8015a20 <__sinit>
 8015ad0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015ad2:	07db      	lsls	r3, r3, #31
 8015ad4:	d405      	bmi.n	8015ae2 <_puts_r+0x22>
 8015ad6:	89a3      	ldrh	r3, [r4, #12]
 8015ad8:	0598      	lsls	r0, r3, #22
 8015ada:	d402      	bmi.n	8015ae2 <_puts_r+0x22>
 8015adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015ade:	f000 f9fe 	bl	8015ede <__retarget_lock_acquire_recursive>
 8015ae2:	89a3      	ldrh	r3, [r4, #12]
 8015ae4:	0719      	lsls	r1, r3, #28
 8015ae6:	d502      	bpl.n	8015aee <_puts_r+0x2e>
 8015ae8:	6923      	ldr	r3, [r4, #16]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d135      	bne.n	8015b5a <_puts_r+0x9a>
 8015aee:	4621      	mov	r1, r4
 8015af0:	4628      	mov	r0, r5
 8015af2:	f000 f8fd 	bl	8015cf0 <__swsetup_r>
 8015af6:	b380      	cbz	r0, 8015b5a <_puts_r+0x9a>
 8015af8:	f04f 35ff 	mov.w	r5, #4294967295
 8015afc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015afe:	07da      	lsls	r2, r3, #31
 8015b00:	d405      	bmi.n	8015b0e <_puts_r+0x4e>
 8015b02:	89a3      	ldrh	r3, [r4, #12]
 8015b04:	059b      	lsls	r3, r3, #22
 8015b06:	d402      	bmi.n	8015b0e <_puts_r+0x4e>
 8015b08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b0a:	f000 f9e9 	bl	8015ee0 <__retarget_lock_release_recursive>
 8015b0e:	4628      	mov	r0, r5
 8015b10:	bd70      	pop	{r4, r5, r6, pc}
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	da04      	bge.n	8015b20 <_puts_r+0x60>
 8015b16:	69a2      	ldr	r2, [r4, #24]
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	dc17      	bgt.n	8015b4c <_puts_r+0x8c>
 8015b1c:	290a      	cmp	r1, #10
 8015b1e:	d015      	beq.n	8015b4c <_puts_r+0x8c>
 8015b20:	6823      	ldr	r3, [r4, #0]
 8015b22:	1c5a      	adds	r2, r3, #1
 8015b24:	6022      	str	r2, [r4, #0]
 8015b26:	7019      	strb	r1, [r3, #0]
 8015b28:	68a3      	ldr	r3, [r4, #8]
 8015b2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015b2e:	3b01      	subs	r3, #1
 8015b30:	60a3      	str	r3, [r4, #8]
 8015b32:	2900      	cmp	r1, #0
 8015b34:	d1ed      	bne.n	8015b12 <_puts_r+0x52>
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	da11      	bge.n	8015b5e <_puts_r+0x9e>
 8015b3a:	4622      	mov	r2, r4
 8015b3c:	210a      	movs	r1, #10
 8015b3e:	4628      	mov	r0, r5
 8015b40:	f000 f898 	bl	8015c74 <__swbuf_r>
 8015b44:	3001      	adds	r0, #1
 8015b46:	d0d7      	beq.n	8015af8 <_puts_r+0x38>
 8015b48:	250a      	movs	r5, #10
 8015b4a:	e7d7      	b.n	8015afc <_puts_r+0x3c>
 8015b4c:	4622      	mov	r2, r4
 8015b4e:	4628      	mov	r0, r5
 8015b50:	f000 f890 	bl	8015c74 <__swbuf_r>
 8015b54:	3001      	adds	r0, #1
 8015b56:	d1e7      	bne.n	8015b28 <_puts_r+0x68>
 8015b58:	e7ce      	b.n	8015af8 <_puts_r+0x38>
 8015b5a:	3e01      	subs	r6, #1
 8015b5c:	e7e4      	b.n	8015b28 <_puts_r+0x68>
 8015b5e:	6823      	ldr	r3, [r4, #0]
 8015b60:	1c5a      	adds	r2, r3, #1
 8015b62:	6022      	str	r2, [r4, #0]
 8015b64:	220a      	movs	r2, #10
 8015b66:	701a      	strb	r2, [r3, #0]
 8015b68:	e7ee      	b.n	8015b48 <_puts_r+0x88>
	...

08015b6c <puts>:
 8015b6c:	4b02      	ldr	r3, [pc, #8]	@ (8015b78 <puts+0xc>)
 8015b6e:	4601      	mov	r1, r0
 8015b70:	6818      	ldr	r0, [r3, #0]
 8015b72:	f7ff bfa5 	b.w	8015ac0 <_puts_r>
 8015b76:	bf00      	nop
 8015b78:	20000138 	.word	0x20000138

08015b7c <__sread>:
 8015b7c:	b510      	push	{r4, lr}
 8015b7e:	460c      	mov	r4, r1
 8015b80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015b84:	f000 f95c 	bl	8015e40 <_read_r>
 8015b88:	2800      	cmp	r0, #0
 8015b8a:	bfab      	itete	ge
 8015b8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015b8e:	89a3      	ldrhlt	r3, [r4, #12]
 8015b90:	181b      	addge	r3, r3, r0
 8015b92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015b96:	bfac      	ite	ge
 8015b98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015b9a:	81a3      	strhlt	r3, [r4, #12]
 8015b9c:	bd10      	pop	{r4, pc}

08015b9e <__swrite>:
 8015b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba2:	461f      	mov	r7, r3
 8015ba4:	898b      	ldrh	r3, [r1, #12]
 8015ba6:	05db      	lsls	r3, r3, #23
 8015ba8:	4605      	mov	r5, r0
 8015baa:	460c      	mov	r4, r1
 8015bac:	4616      	mov	r6, r2
 8015bae:	d505      	bpl.n	8015bbc <__swrite+0x1e>
 8015bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bb4:	2302      	movs	r3, #2
 8015bb6:	2200      	movs	r2, #0
 8015bb8:	f000 f930 	bl	8015e1c <_lseek_r>
 8015bbc:	89a3      	ldrh	r3, [r4, #12]
 8015bbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015bc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015bc6:	81a3      	strh	r3, [r4, #12]
 8015bc8:	4632      	mov	r2, r6
 8015bca:	463b      	mov	r3, r7
 8015bcc:	4628      	mov	r0, r5
 8015bce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015bd2:	f000 b947 	b.w	8015e64 <_write_r>

08015bd6 <__sseek>:
 8015bd6:	b510      	push	{r4, lr}
 8015bd8:	460c      	mov	r4, r1
 8015bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bde:	f000 f91d 	bl	8015e1c <_lseek_r>
 8015be2:	1c43      	adds	r3, r0, #1
 8015be4:	89a3      	ldrh	r3, [r4, #12]
 8015be6:	bf15      	itete	ne
 8015be8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015bea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015bee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015bf2:	81a3      	strheq	r3, [r4, #12]
 8015bf4:	bf18      	it	ne
 8015bf6:	81a3      	strhne	r3, [r4, #12]
 8015bf8:	bd10      	pop	{r4, pc}

08015bfa <__sclose>:
 8015bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015bfe:	f000 b8fd 	b.w	8015dfc <_close_r>

08015c02 <_vsniprintf_r>:
 8015c02:	b530      	push	{r4, r5, lr}
 8015c04:	4614      	mov	r4, r2
 8015c06:	2c00      	cmp	r4, #0
 8015c08:	b09b      	sub	sp, #108	@ 0x6c
 8015c0a:	4605      	mov	r5, r0
 8015c0c:	461a      	mov	r2, r3
 8015c0e:	da05      	bge.n	8015c1c <_vsniprintf_r+0x1a>
 8015c10:	238b      	movs	r3, #139	@ 0x8b
 8015c12:	6003      	str	r3, [r0, #0]
 8015c14:	f04f 30ff 	mov.w	r0, #4294967295
 8015c18:	b01b      	add	sp, #108	@ 0x6c
 8015c1a:	bd30      	pop	{r4, r5, pc}
 8015c1c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015c20:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015c24:	bf14      	ite	ne
 8015c26:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015c2a:	4623      	moveq	r3, r4
 8015c2c:	9302      	str	r3, [sp, #8]
 8015c2e:	9305      	str	r3, [sp, #20]
 8015c30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015c34:	9100      	str	r1, [sp, #0]
 8015c36:	9104      	str	r1, [sp, #16]
 8015c38:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015c3c:	4669      	mov	r1, sp
 8015c3e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015c40:	f000 fab2 	bl	80161a8 <_svfiprintf_r>
 8015c44:	1c43      	adds	r3, r0, #1
 8015c46:	bfbc      	itt	lt
 8015c48:	238b      	movlt	r3, #139	@ 0x8b
 8015c4a:	602b      	strlt	r3, [r5, #0]
 8015c4c:	2c00      	cmp	r4, #0
 8015c4e:	d0e3      	beq.n	8015c18 <_vsniprintf_r+0x16>
 8015c50:	9b00      	ldr	r3, [sp, #0]
 8015c52:	2200      	movs	r2, #0
 8015c54:	701a      	strb	r2, [r3, #0]
 8015c56:	e7df      	b.n	8015c18 <_vsniprintf_r+0x16>

08015c58 <vsniprintf>:
 8015c58:	b507      	push	{r0, r1, r2, lr}
 8015c5a:	9300      	str	r3, [sp, #0]
 8015c5c:	4613      	mov	r3, r2
 8015c5e:	460a      	mov	r2, r1
 8015c60:	4601      	mov	r1, r0
 8015c62:	4803      	ldr	r0, [pc, #12]	@ (8015c70 <vsniprintf+0x18>)
 8015c64:	6800      	ldr	r0, [r0, #0]
 8015c66:	f7ff ffcc 	bl	8015c02 <_vsniprintf_r>
 8015c6a:	b003      	add	sp, #12
 8015c6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015c70:	20000138 	.word	0x20000138

08015c74 <__swbuf_r>:
 8015c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015c76:	460e      	mov	r6, r1
 8015c78:	4614      	mov	r4, r2
 8015c7a:	4605      	mov	r5, r0
 8015c7c:	b118      	cbz	r0, 8015c86 <__swbuf_r+0x12>
 8015c7e:	6a03      	ldr	r3, [r0, #32]
 8015c80:	b90b      	cbnz	r3, 8015c86 <__swbuf_r+0x12>
 8015c82:	f7ff fecd 	bl	8015a20 <__sinit>
 8015c86:	69a3      	ldr	r3, [r4, #24]
 8015c88:	60a3      	str	r3, [r4, #8]
 8015c8a:	89a3      	ldrh	r3, [r4, #12]
 8015c8c:	071a      	lsls	r2, r3, #28
 8015c8e:	d501      	bpl.n	8015c94 <__swbuf_r+0x20>
 8015c90:	6923      	ldr	r3, [r4, #16]
 8015c92:	b943      	cbnz	r3, 8015ca6 <__swbuf_r+0x32>
 8015c94:	4621      	mov	r1, r4
 8015c96:	4628      	mov	r0, r5
 8015c98:	f000 f82a 	bl	8015cf0 <__swsetup_r>
 8015c9c:	b118      	cbz	r0, 8015ca6 <__swbuf_r+0x32>
 8015c9e:	f04f 37ff 	mov.w	r7, #4294967295
 8015ca2:	4638      	mov	r0, r7
 8015ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015ca6:	6823      	ldr	r3, [r4, #0]
 8015ca8:	6922      	ldr	r2, [r4, #16]
 8015caa:	1a98      	subs	r0, r3, r2
 8015cac:	6963      	ldr	r3, [r4, #20]
 8015cae:	b2f6      	uxtb	r6, r6
 8015cb0:	4283      	cmp	r3, r0
 8015cb2:	4637      	mov	r7, r6
 8015cb4:	dc05      	bgt.n	8015cc2 <__swbuf_r+0x4e>
 8015cb6:	4621      	mov	r1, r4
 8015cb8:	4628      	mov	r0, r5
 8015cba:	f000 fec5 	bl	8016a48 <_fflush_r>
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	d1ed      	bne.n	8015c9e <__swbuf_r+0x2a>
 8015cc2:	68a3      	ldr	r3, [r4, #8]
 8015cc4:	3b01      	subs	r3, #1
 8015cc6:	60a3      	str	r3, [r4, #8]
 8015cc8:	6823      	ldr	r3, [r4, #0]
 8015cca:	1c5a      	adds	r2, r3, #1
 8015ccc:	6022      	str	r2, [r4, #0]
 8015cce:	701e      	strb	r6, [r3, #0]
 8015cd0:	6962      	ldr	r2, [r4, #20]
 8015cd2:	1c43      	adds	r3, r0, #1
 8015cd4:	429a      	cmp	r2, r3
 8015cd6:	d004      	beq.n	8015ce2 <__swbuf_r+0x6e>
 8015cd8:	89a3      	ldrh	r3, [r4, #12]
 8015cda:	07db      	lsls	r3, r3, #31
 8015cdc:	d5e1      	bpl.n	8015ca2 <__swbuf_r+0x2e>
 8015cde:	2e0a      	cmp	r6, #10
 8015ce0:	d1df      	bne.n	8015ca2 <__swbuf_r+0x2e>
 8015ce2:	4621      	mov	r1, r4
 8015ce4:	4628      	mov	r0, r5
 8015ce6:	f000 feaf 	bl	8016a48 <_fflush_r>
 8015cea:	2800      	cmp	r0, #0
 8015cec:	d0d9      	beq.n	8015ca2 <__swbuf_r+0x2e>
 8015cee:	e7d6      	b.n	8015c9e <__swbuf_r+0x2a>

08015cf0 <__swsetup_r>:
 8015cf0:	b538      	push	{r3, r4, r5, lr}
 8015cf2:	4b29      	ldr	r3, [pc, #164]	@ (8015d98 <__swsetup_r+0xa8>)
 8015cf4:	4605      	mov	r5, r0
 8015cf6:	6818      	ldr	r0, [r3, #0]
 8015cf8:	460c      	mov	r4, r1
 8015cfa:	b118      	cbz	r0, 8015d04 <__swsetup_r+0x14>
 8015cfc:	6a03      	ldr	r3, [r0, #32]
 8015cfe:	b90b      	cbnz	r3, 8015d04 <__swsetup_r+0x14>
 8015d00:	f7ff fe8e 	bl	8015a20 <__sinit>
 8015d04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d08:	0719      	lsls	r1, r3, #28
 8015d0a:	d422      	bmi.n	8015d52 <__swsetup_r+0x62>
 8015d0c:	06da      	lsls	r2, r3, #27
 8015d0e:	d407      	bmi.n	8015d20 <__swsetup_r+0x30>
 8015d10:	2209      	movs	r2, #9
 8015d12:	602a      	str	r2, [r5, #0]
 8015d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015d18:	81a3      	strh	r3, [r4, #12]
 8015d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8015d1e:	e033      	b.n	8015d88 <__swsetup_r+0x98>
 8015d20:	0758      	lsls	r0, r3, #29
 8015d22:	d512      	bpl.n	8015d4a <__swsetup_r+0x5a>
 8015d24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015d26:	b141      	cbz	r1, 8015d3a <__swsetup_r+0x4a>
 8015d28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015d2c:	4299      	cmp	r1, r3
 8015d2e:	d002      	beq.n	8015d36 <__swsetup_r+0x46>
 8015d30:	4628      	mov	r0, r5
 8015d32:	f000 f8e5 	bl	8015f00 <_free_r>
 8015d36:	2300      	movs	r3, #0
 8015d38:	6363      	str	r3, [r4, #52]	@ 0x34
 8015d3a:	89a3      	ldrh	r3, [r4, #12]
 8015d3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015d40:	81a3      	strh	r3, [r4, #12]
 8015d42:	2300      	movs	r3, #0
 8015d44:	6063      	str	r3, [r4, #4]
 8015d46:	6923      	ldr	r3, [r4, #16]
 8015d48:	6023      	str	r3, [r4, #0]
 8015d4a:	89a3      	ldrh	r3, [r4, #12]
 8015d4c:	f043 0308 	orr.w	r3, r3, #8
 8015d50:	81a3      	strh	r3, [r4, #12]
 8015d52:	6923      	ldr	r3, [r4, #16]
 8015d54:	b94b      	cbnz	r3, 8015d6a <__swsetup_r+0x7a>
 8015d56:	89a3      	ldrh	r3, [r4, #12]
 8015d58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015d5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015d60:	d003      	beq.n	8015d6a <__swsetup_r+0x7a>
 8015d62:	4621      	mov	r1, r4
 8015d64:	4628      	mov	r0, r5
 8015d66:	f000 febd 	bl	8016ae4 <__smakebuf_r>
 8015d6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d6e:	f013 0201 	ands.w	r2, r3, #1
 8015d72:	d00a      	beq.n	8015d8a <__swsetup_r+0x9a>
 8015d74:	2200      	movs	r2, #0
 8015d76:	60a2      	str	r2, [r4, #8]
 8015d78:	6962      	ldr	r2, [r4, #20]
 8015d7a:	4252      	negs	r2, r2
 8015d7c:	61a2      	str	r2, [r4, #24]
 8015d7e:	6922      	ldr	r2, [r4, #16]
 8015d80:	b942      	cbnz	r2, 8015d94 <__swsetup_r+0xa4>
 8015d82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015d86:	d1c5      	bne.n	8015d14 <__swsetup_r+0x24>
 8015d88:	bd38      	pop	{r3, r4, r5, pc}
 8015d8a:	0799      	lsls	r1, r3, #30
 8015d8c:	bf58      	it	pl
 8015d8e:	6962      	ldrpl	r2, [r4, #20]
 8015d90:	60a2      	str	r2, [r4, #8]
 8015d92:	e7f4      	b.n	8015d7e <__swsetup_r+0x8e>
 8015d94:	2000      	movs	r0, #0
 8015d96:	e7f7      	b.n	8015d88 <__swsetup_r+0x98>
 8015d98:	20000138 	.word	0x20000138

08015d9c <memset>:
 8015d9c:	4402      	add	r2, r0
 8015d9e:	4603      	mov	r3, r0
 8015da0:	4293      	cmp	r3, r2
 8015da2:	d100      	bne.n	8015da6 <memset+0xa>
 8015da4:	4770      	bx	lr
 8015da6:	f803 1b01 	strb.w	r1, [r3], #1
 8015daa:	e7f9      	b.n	8015da0 <memset+0x4>

08015dac <strncmp>:
 8015dac:	b510      	push	{r4, lr}
 8015dae:	b16a      	cbz	r2, 8015dcc <strncmp+0x20>
 8015db0:	3901      	subs	r1, #1
 8015db2:	1884      	adds	r4, r0, r2
 8015db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015db8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8015dbc:	429a      	cmp	r2, r3
 8015dbe:	d103      	bne.n	8015dc8 <strncmp+0x1c>
 8015dc0:	42a0      	cmp	r0, r4
 8015dc2:	d001      	beq.n	8015dc8 <strncmp+0x1c>
 8015dc4:	2a00      	cmp	r2, #0
 8015dc6:	d1f5      	bne.n	8015db4 <strncmp+0x8>
 8015dc8:	1ad0      	subs	r0, r2, r3
 8015dca:	bd10      	pop	{r4, pc}
 8015dcc:	4610      	mov	r0, r2
 8015dce:	e7fc      	b.n	8015dca <strncmp+0x1e>

08015dd0 <strrchr>:
 8015dd0:	b538      	push	{r3, r4, r5, lr}
 8015dd2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8015dd6:	4603      	mov	r3, r0
 8015dd8:	d10e      	bne.n	8015df8 <strrchr+0x28>
 8015dda:	4621      	mov	r1, r4
 8015ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015de0:	f000 bf0a 	b.w	8016bf8 <strchr>
 8015de4:	1c43      	adds	r3, r0, #1
 8015de6:	4605      	mov	r5, r0
 8015de8:	4621      	mov	r1, r4
 8015dea:	4618      	mov	r0, r3
 8015dec:	f000 ff04 	bl	8016bf8 <strchr>
 8015df0:	2800      	cmp	r0, #0
 8015df2:	d1f7      	bne.n	8015de4 <strrchr+0x14>
 8015df4:	4628      	mov	r0, r5
 8015df6:	bd38      	pop	{r3, r4, r5, pc}
 8015df8:	2500      	movs	r5, #0
 8015dfa:	e7f5      	b.n	8015de8 <strrchr+0x18>

08015dfc <_close_r>:
 8015dfc:	b538      	push	{r3, r4, r5, lr}
 8015dfe:	4d06      	ldr	r5, [pc, #24]	@ (8015e18 <_close_r+0x1c>)
 8015e00:	2300      	movs	r3, #0
 8015e02:	4604      	mov	r4, r0
 8015e04:	4608      	mov	r0, r1
 8015e06:	602b      	str	r3, [r5, #0]
 8015e08:	f7ee f9ef 	bl	80041ea <_close>
 8015e0c:	1c43      	adds	r3, r0, #1
 8015e0e:	d102      	bne.n	8015e16 <_close_r+0x1a>
 8015e10:	682b      	ldr	r3, [r5, #0]
 8015e12:	b103      	cbz	r3, 8015e16 <_close_r+0x1a>
 8015e14:	6023      	str	r3, [r4, #0]
 8015e16:	bd38      	pop	{r3, r4, r5, pc}
 8015e18:	20002c4c 	.word	0x20002c4c

08015e1c <_lseek_r>:
 8015e1c:	b538      	push	{r3, r4, r5, lr}
 8015e1e:	4d07      	ldr	r5, [pc, #28]	@ (8015e3c <_lseek_r+0x20>)
 8015e20:	4604      	mov	r4, r0
 8015e22:	4608      	mov	r0, r1
 8015e24:	4611      	mov	r1, r2
 8015e26:	2200      	movs	r2, #0
 8015e28:	602a      	str	r2, [r5, #0]
 8015e2a:	461a      	mov	r2, r3
 8015e2c:	f7ee fa04 	bl	8004238 <_lseek>
 8015e30:	1c43      	adds	r3, r0, #1
 8015e32:	d102      	bne.n	8015e3a <_lseek_r+0x1e>
 8015e34:	682b      	ldr	r3, [r5, #0]
 8015e36:	b103      	cbz	r3, 8015e3a <_lseek_r+0x1e>
 8015e38:	6023      	str	r3, [r4, #0]
 8015e3a:	bd38      	pop	{r3, r4, r5, pc}
 8015e3c:	20002c4c 	.word	0x20002c4c

08015e40 <_read_r>:
 8015e40:	b538      	push	{r3, r4, r5, lr}
 8015e42:	4d07      	ldr	r5, [pc, #28]	@ (8015e60 <_read_r+0x20>)
 8015e44:	4604      	mov	r4, r0
 8015e46:	4608      	mov	r0, r1
 8015e48:	4611      	mov	r1, r2
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	602a      	str	r2, [r5, #0]
 8015e4e:	461a      	mov	r2, r3
 8015e50:	f7ee f9ae 	bl	80041b0 <_read>
 8015e54:	1c43      	adds	r3, r0, #1
 8015e56:	d102      	bne.n	8015e5e <_read_r+0x1e>
 8015e58:	682b      	ldr	r3, [r5, #0]
 8015e5a:	b103      	cbz	r3, 8015e5e <_read_r+0x1e>
 8015e5c:	6023      	str	r3, [r4, #0]
 8015e5e:	bd38      	pop	{r3, r4, r5, pc}
 8015e60:	20002c4c 	.word	0x20002c4c

08015e64 <_write_r>:
 8015e64:	b538      	push	{r3, r4, r5, lr}
 8015e66:	4d07      	ldr	r5, [pc, #28]	@ (8015e84 <_write_r+0x20>)
 8015e68:	4604      	mov	r4, r0
 8015e6a:	4608      	mov	r0, r1
 8015e6c:	4611      	mov	r1, r2
 8015e6e:	2200      	movs	r2, #0
 8015e70:	602a      	str	r2, [r5, #0]
 8015e72:	461a      	mov	r2, r3
 8015e74:	f7fb ff36 	bl	8011ce4 <_write>
 8015e78:	1c43      	adds	r3, r0, #1
 8015e7a:	d102      	bne.n	8015e82 <_write_r+0x1e>
 8015e7c:	682b      	ldr	r3, [r5, #0]
 8015e7e:	b103      	cbz	r3, 8015e82 <_write_r+0x1e>
 8015e80:	6023      	str	r3, [r4, #0]
 8015e82:	bd38      	pop	{r3, r4, r5, pc}
 8015e84:	20002c4c 	.word	0x20002c4c

08015e88 <__errno>:
 8015e88:	4b01      	ldr	r3, [pc, #4]	@ (8015e90 <__errno+0x8>)
 8015e8a:	6818      	ldr	r0, [r3, #0]
 8015e8c:	4770      	bx	lr
 8015e8e:	bf00      	nop
 8015e90:	20000138 	.word	0x20000138

08015e94 <__libc_init_array>:
 8015e94:	b570      	push	{r4, r5, r6, lr}
 8015e96:	4d0d      	ldr	r5, [pc, #52]	@ (8015ecc <__libc_init_array+0x38>)
 8015e98:	4c0d      	ldr	r4, [pc, #52]	@ (8015ed0 <__libc_init_array+0x3c>)
 8015e9a:	1b64      	subs	r4, r4, r5
 8015e9c:	10a4      	asrs	r4, r4, #2
 8015e9e:	2600      	movs	r6, #0
 8015ea0:	42a6      	cmp	r6, r4
 8015ea2:	d109      	bne.n	8015eb8 <__libc_init_array+0x24>
 8015ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8015ed4 <__libc_init_array+0x40>)
 8015ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8015ed8 <__libc_init_array+0x44>)
 8015ea8:	f000 ff1c 	bl	8016ce4 <_init>
 8015eac:	1b64      	subs	r4, r4, r5
 8015eae:	10a4      	asrs	r4, r4, #2
 8015eb0:	2600      	movs	r6, #0
 8015eb2:	42a6      	cmp	r6, r4
 8015eb4:	d105      	bne.n	8015ec2 <__libc_init_array+0x2e>
 8015eb6:	bd70      	pop	{r4, r5, r6, pc}
 8015eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ebc:	4798      	blx	r3
 8015ebe:	3601      	adds	r6, #1
 8015ec0:	e7ee      	b.n	8015ea0 <__libc_init_array+0xc>
 8015ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8015ec6:	4798      	blx	r3
 8015ec8:	3601      	adds	r6, #1
 8015eca:	e7f2      	b.n	8015eb2 <__libc_init_array+0x1e>
 8015ecc:	08018a28 	.word	0x08018a28
 8015ed0:	08018a28 	.word	0x08018a28
 8015ed4:	08018a28 	.word	0x08018a28
 8015ed8:	08018a2c 	.word	0x08018a2c

08015edc <__retarget_lock_init_recursive>:
 8015edc:	4770      	bx	lr

08015ede <__retarget_lock_acquire_recursive>:
 8015ede:	4770      	bx	lr

08015ee0 <__retarget_lock_release_recursive>:
 8015ee0:	4770      	bx	lr

08015ee2 <memcpy>:
 8015ee2:	440a      	add	r2, r1
 8015ee4:	4291      	cmp	r1, r2
 8015ee6:	f100 33ff 	add.w	r3, r0, #4294967295
 8015eea:	d100      	bne.n	8015eee <memcpy+0xc>
 8015eec:	4770      	bx	lr
 8015eee:	b510      	push	{r4, lr}
 8015ef0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015ef4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015ef8:	4291      	cmp	r1, r2
 8015efa:	d1f9      	bne.n	8015ef0 <memcpy+0xe>
 8015efc:	bd10      	pop	{r4, pc}
	...

08015f00 <_free_r>:
 8015f00:	b538      	push	{r3, r4, r5, lr}
 8015f02:	4605      	mov	r5, r0
 8015f04:	2900      	cmp	r1, #0
 8015f06:	d041      	beq.n	8015f8c <_free_r+0x8c>
 8015f08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f0c:	1f0c      	subs	r4, r1, #4
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	bfb8      	it	lt
 8015f12:	18e4      	addlt	r4, r4, r3
 8015f14:	f000 f8e0 	bl	80160d8 <__malloc_lock>
 8015f18:	4a1d      	ldr	r2, [pc, #116]	@ (8015f90 <_free_r+0x90>)
 8015f1a:	6813      	ldr	r3, [r2, #0]
 8015f1c:	b933      	cbnz	r3, 8015f2c <_free_r+0x2c>
 8015f1e:	6063      	str	r3, [r4, #4]
 8015f20:	6014      	str	r4, [r2, #0]
 8015f22:	4628      	mov	r0, r5
 8015f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015f28:	f000 b8dc 	b.w	80160e4 <__malloc_unlock>
 8015f2c:	42a3      	cmp	r3, r4
 8015f2e:	d908      	bls.n	8015f42 <_free_r+0x42>
 8015f30:	6820      	ldr	r0, [r4, #0]
 8015f32:	1821      	adds	r1, r4, r0
 8015f34:	428b      	cmp	r3, r1
 8015f36:	bf01      	itttt	eq
 8015f38:	6819      	ldreq	r1, [r3, #0]
 8015f3a:	685b      	ldreq	r3, [r3, #4]
 8015f3c:	1809      	addeq	r1, r1, r0
 8015f3e:	6021      	streq	r1, [r4, #0]
 8015f40:	e7ed      	b.n	8015f1e <_free_r+0x1e>
 8015f42:	461a      	mov	r2, r3
 8015f44:	685b      	ldr	r3, [r3, #4]
 8015f46:	b10b      	cbz	r3, 8015f4c <_free_r+0x4c>
 8015f48:	42a3      	cmp	r3, r4
 8015f4a:	d9fa      	bls.n	8015f42 <_free_r+0x42>
 8015f4c:	6811      	ldr	r1, [r2, #0]
 8015f4e:	1850      	adds	r0, r2, r1
 8015f50:	42a0      	cmp	r0, r4
 8015f52:	d10b      	bne.n	8015f6c <_free_r+0x6c>
 8015f54:	6820      	ldr	r0, [r4, #0]
 8015f56:	4401      	add	r1, r0
 8015f58:	1850      	adds	r0, r2, r1
 8015f5a:	4283      	cmp	r3, r0
 8015f5c:	6011      	str	r1, [r2, #0]
 8015f5e:	d1e0      	bne.n	8015f22 <_free_r+0x22>
 8015f60:	6818      	ldr	r0, [r3, #0]
 8015f62:	685b      	ldr	r3, [r3, #4]
 8015f64:	6053      	str	r3, [r2, #4]
 8015f66:	4408      	add	r0, r1
 8015f68:	6010      	str	r0, [r2, #0]
 8015f6a:	e7da      	b.n	8015f22 <_free_r+0x22>
 8015f6c:	d902      	bls.n	8015f74 <_free_r+0x74>
 8015f6e:	230c      	movs	r3, #12
 8015f70:	602b      	str	r3, [r5, #0]
 8015f72:	e7d6      	b.n	8015f22 <_free_r+0x22>
 8015f74:	6820      	ldr	r0, [r4, #0]
 8015f76:	1821      	adds	r1, r4, r0
 8015f78:	428b      	cmp	r3, r1
 8015f7a:	bf04      	itt	eq
 8015f7c:	6819      	ldreq	r1, [r3, #0]
 8015f7e:	685b      	ldreq	r3, [r3, #4]
 8015f80:	6063      	str	r3, [r4, #4]
 8015f82:	bf04      	itt	eq
 8015f84:	1809      	addeq	r1, r1, r0
 8015f86:	6021      	streq	r1, [r4, #0]
 8015f88:	6054      	str	r4, [r2, #4]
 8015f8a:	e7ca      	b.n	8015f22 <_free_r+0x22>
 8015f8c:	bd38      	pop	{r3, r4, r5, pc}
 8015f8e:	bf00      	nop
 8015f90:	20002c58 	.word	0x20002c58

08015f94 <sbrk_aligned>:
 8015f94:	b570      	push	{r4, r5, r6, lr}
 8015f96:	4e0f      	ldr	r6, [pc, #60]	@ (8015fd4 <sbrk_aligned+0x40>)
 8015f98:	460c      	mov	r4, r1
 8015f9a:	6831      	ldr	r1, [r6, #0]
 8015f9c:	4605      	mov	r5, r0
 8015f9e:	b911      	cbnz	r1, 8015fa6 <sbrk_aligned+0x12>
 8015fa0:	f000 fe5a 	bl	8016c58 <_sbrk_r>
 8015fa4:	6030      	str	r0, [r6, #0]
 8015fa6:	4621      	mov	r1, r4
 8015fa8:	4628      	mov	r0, r5
 8015faa:	f000 fe55 	bl	8016c58 <_sbrk_r>
 8015fae:	1c43      	adds	r3, r0, #1
 8015fb0:	d103      	bne.n	8015fba <sbrk_aligned+0x26>
 8015fb2:	f04f 34ff 	mov.w	r4, #4294967295
 8015fb6:	4620      	mov	r0, r4
 8015fb8:	bd70      	pop	{r4, r5, r6, pc}
 8015fba:	1cc4      	adds	r4, r0, #3
 8015fbc:	f024 0403 	bic.w	r4, r4, #3
 8015fc0:	42a0      	cmp	r0, r4
 8015fc2:	d0f8      	beq.n	8015fb6 <sbrk_aligned+0x22>
 8015fc4:	1a21      	subs	r1, r4, r0
 8015fc6:	4628      	mov	r0, r5
 8015fc8:	f000 fe46 	bl	8016c58 <_sbrk_r>
 8015fcc:	3001      	adds	r0, #1
 8015fce:	d1f2      	bne.n	8015fb6 <sbrk_aligned+0x22>
 8015fd0:	e7ef      	b.n	8015fb2 <sbrk_aligned+0x1e>
 8015fd2:	bf00      	nop
 8015fd4:	20002c54 	.word	0x20002c54

08015fd8 <_malloc_r>:
 8015fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015fdc:	1ccd      	adds	r5, r1, #3
 8015fde:	f025 0503 	bic.w	r5, r5, #3
 8015fe2:	3508      	adds	r5, #8
 8015fe4:	2d0c      	cmp	r5, #12
 8015fe6:	bf38      	it	cc
 8015fe8:	250c      	movcc	r5, #12
 8015fea:	2d00      	cmp	r5, #0
 8015fec:	4606      	mov	r6, r0
 8015fee:	db01      	blt.n	8015ff4 <_malloc_r+0x1c>
 8015ff0:	42a9      	cmp	r1, r5
 8015ff2:	d904      	bls.n	8015ffe <_malloc_r+0x26>
 8015ff4:	230c      	movs	r3, #12
 8015ff6:	6033      	str	r3, [r6, #0]
 8015ff8:	2000      	movs	r0, #0
 8015ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015ffe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80160d4 <_malloc_r+0xfc>
 8016002:	f000 f869 	bl	80160d8 <__malloc_lock>
 8016006:	f8d8 3000 	ldr.w	r3, [r8]
 801600a:	461c      	mov	r4, r3
 801600c:	bb44      	cbnz	r4, 8016060 <_malloc_r+0x88>
 801600e:	4629      	mov	r1, r5
 8016010:	4630      	mov	r0, r6
 8016012:	f7ff ffbf 	bl	8015f94 <sbrk_aligned>
 8016016:	1c43      	adds	r3, r0, #1
 8016018:	4604      	mov	r4, r0
 801601a:	d158      	bne.n	80160ce <_malloc_r+0xf6>
 801601c:	f8d8 4000 	ldr.w	r4, [r8]
 8016020:	4627      	mov	r7, r4
 8016022:	2f00      	cmp	r7, #0
 8016024:	d143      	bne.n	80160ae <_malloc_r+0xd6>
 8016026:	2c00      	cmp	r4, #0
 8016028:	d04b      	beq.n	80160c2 <_malloc_r+0xea>
 801602a:	6823      	ldr	r3, [r4, #0]
 801602c:	4639      	mov	r1, r7
 801602e:	4630      	mov	r0, r6
 8016030:	eb04 0903 	add.w	r9, r4, r3
 8016034:	f000 fe10 	bl	8016c58 <_sbrk_r>
 8016038:	4581      	cmp	r9, r0
 801603a:	d142      	bne.n	80160c2 <_malloc_r+0xea>
 801603c:	6821      	ldr	r1, [r4, #0]
 801603e:	1a6d      	subs	r5, r5, r1
 8016040:	4629      	mov	r1, r5
 8016042:	4630      	mov	r0, r6
 8016044:	f7ff ffa6 	bl	8015f94 <sbrk_aligned>
 8016048:	3001      	adds	r0, #1
 801604a:	d03a      	beq.n	80160c2 <_malloc_r+0xea>
 801604c:	6823      	ldr	r3, [r4, #0]
 801604e:	442b      	add	r3, r5
 8016050:	6023      	str	r3, [r4, #0]
 8016052:	f8d8 3000 	ldr.w	r3, [r8]
 8016056:	685a      	ldr	r2, [r3, #4]
 8016058:	bb62      	cbnz	r2, 80160b4 <_malloc_r+0xdc>
 801605a:	f8c8 7000 	str.w	r7, [r8]
 801605e:	e00f      	b.n	8016080 <_malloc_r+0xa8>
 8016060:	6822      	ldr	r2, [r4, #0]
 8016062:	1b52      	subs	r2, r2, r5
 8016064:	d420      	bmi.n	80160a8 <_malloc_r+0xd0>
 8016066:	2a0b      	cmp	r2, #11
 8016068:	d917      	bls.n	801609a <_malloc_r+0xc2>
 801606a:	1961      	adds	r1, r4, r5
 801606c:	42a3      	cmp	r3, r4
 801606e:	6025      	str	r5, [r4, #0]
 8016070:	bf18      	it	ne
 8016072:	6059      	strne	r1, [r3, #4]
 8016074:	6863      	ldr	r3, [r4, #4]
 8016076:	bf08      	it	eq
 8016078:	f8c8 1000 	streq.w	r1, [r8]
 801607c:	5162      	str	r2, [r4, r5]
 801607e:	604b      	str	r3, [r1, #4]
 8016080:	4630      	mov	r0, r6
 8016082:	f000 f82f 	bl	80160e4 <__malloc_unlock>
 8016086:	f104 000b 	add.w	r0, r4, #11
 801608a:	1d23      	adds	r3, r4, #4
 801608c:	f020 0007 	bic.w	r0, r0, #7
 8016090:	1ac2      	subs	r2, r0, r3
 8016092:	bf1c      	itt	ne
 8016094:	1a1b      	subne	r3, r3, r0
 8016096:	50a3      	strne	r3, [r4, r2]
 8016098:	e7af      	b.n	8015ffa <_malloc_r+0x22>
 801609a:	6862      	ldr	r2, [r4, #4]
 801609c:	42a3      	cmp	r3, r4
 801609e:	bf0c      	ite	eq
 80160a0:	f8c8 2000 	streq.w	r2, [r8]
 80160a4:	605a      	strne	r2, [r3, #4]
 80160a6:	e7eb      	b.n	8016080 <_malloc_r+0xa8>
 80160a8:	4623      	mov	r3, r4
 80160aa:	6864      	ldr	r4, [r4, #4]
 80160ac:	e7ae      	b.n	801600c <_malloc_r+0x34>
 80160ae:	463c      	mov	r4, r7
 80160b0:	687f      	ldr	r7, [r7, #4]
 80160b2:	e7b6      	b.n	8016022 <_malloc_r+0x4a>
 80160b4:	461a      	mov	r2, r3
 80160b6:	685b      	ldr	r3, [r3, #4]
 80160b8:	42a3      	cmp	r3, r4
 80160ba:	d1fb      	bne.n	80160b4 <_malloc_r+0xdc>
 80160bc:	2300      	movs	r3, #0
 80160be:	6053      	str	r3, [r2, #4]
 80160c0:	e7de      	b.n	8016080 <_malloc_r+0xa8>
 80160c2:	230c      	movs	r3, #12
 80160c4:	6033      	str	r3, [r6, #0]
 80160c6:	4630      	mov	r0, r6
 80160c8:	f000 f80c 	bl	80160e4 <__malloc_unlock>
 80160cc:	e794      	b.n	8015ff8 <_malloc_r+0x20>
 80160ce:	6005      	str	r5, [r0, #0]
 80160d0:	e7d6      	b.n	8016080 <_malloc_r+0xa8>
 80160d2:	bf00      	nop
 80160d4:	20002c58 	.word	0x20002c58

080160d8 <__malloc_lock>:
 80160d8:	4801      	ldr	r0, [pc, #4]	@ (80160e0 <__malloc_lock+0x8>)
 80160da:	f7ff bf00 	b.w	8015ede <__retarget_lock_acquire_recursive>
 80160de:	bf00      	nop
 80160e0:	20002c50 	.word	0x20002c50

080160e4 <__malloc_unlock>:
 80160e4:	4801      	ldr	r0, [pc, #4]	@ (80160ec <__malloc_unlock+0x8>)
 80160e6:	f7ff befb 	b.w	8015ee0 <__retarget_lock_release_recursive>
 80160ea:	bf00      	nop
 80160ec:	20002c50 	.word	0x20002c50

080160f0 <__ssputs_r>:
 80160f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160f4:	688e      	ldr	r6, [r1, #8]
 80160f6:	461f      	mov	r7, r3
 80160f8:	42be      	cmp	r6, r7
 80160fa:	680b      	ldr	r3, [r1, #0]
 80160fc:	4682      	mov	sl, r0
 80160fe:	460c      	mov	r4, r1
 8016100:	4690      	mov	r8, r2
 8016102:	d82d      	bhi.n	8016160 <__ssputs_r+0x70>
 8016104:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016108:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801610c:	d026      	beq.n	801615c <__ssputs_r+0x6c>
 801610e:	6965      	ldr	r5, [r4, #20]
 8016110:	6909      	ldr	r1, [r1, #16]
 8016112:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016116:	eba3 0901 	sub.w	r9, r3, r1
 801611a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801611e:	1c7b      	adds	r3, r7, #1
 8016120:	444b      	add	r3, r9
 8016122:	106d      	asrs	r5, r5, #1
 8016124:	429d      	cmp	r5, r3
 8016126:	bf38      	it	cc
 8016128:	461d      	movcc	r5, r3
 801612a:	0553      	lsls	r3, r2, #21
 801612c:	d527      	bpl.n	801617e <__ssputs_r+0x8e>
 801612e:	4629      	mov	r1, r5
 8016130:	f7ff ff52 	bl	8015fd8 <_malloc_r>
 8016134:	4606      	mov	r6, r0
 8016136:	b360      	cbz	r0, 8016192 <__ssputs_r+0xa2>
 8016138:	6921      	ldr	r1, [r4, #16]
 801613a:	464a      	mov	r2, r9
 801613c:	f7ff fed1 	bl	8015ee2 <memcpy>
 8016140:	89a3      	ldrh	r3, [r4, #12]
 8016142:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8016146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801614a:	81a3      	strh	r3, [r4, #12]
 801614c:	6126      	str	r6, [r4, #16]
 801614e:	6165      	str	r5, [r4, #20]
 8016150:	444e      	add	r6, r9
 8016152:	eba5 0509 	sub.w	r5, r5, r9
 8016156:	6026      	str	r6, [r4, #0]
 8016158:	60a5      	str	r5, [r4, #8]
 801615a:	463e      	mov	r6, r7
 801615c:	42be      	cmp	r6, r7
 801615e:	d900      	bls.n	8016162 <__ssputs_r+0x72>
 8016160:	463e      	mov	r6, r7
 8016162:	6820      	ldr	r0, [r4, #0]
 8016164:	4632      	mov	r2, r6
 8016166:	4641      	mov	r1, r8
 8016168:	f000 fd2c 	bl	8016bc4 <memmove>
 801616c:	68a3      	ldr	r3, [r4, #8]
 801616e:	1b9b      	subs	r3, r3, r6
 8016170:	60a3      	str	r3, [r4, #8]
 8016172:	6823      	ldr	r3, [r4, #0]
 8016174:	4433      	add	r3, r6
 8016176:	6023      	str	r3, [r4, #0]
 8016178:	2000      	movs	r0, #0
 801617a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801617e:	462a      	mov	r2, r5
 8016180:	f000 fd7a 	bl	8016c78 <_realloc_r>
 8016184:	4606      	mov	r6, r0
 8016186:	2800      	cmp	r0, #0
 8016188:	d1e0      	bne.n	801614c <__ssputs_r+0x5c>
 801618a:	6921      	ldr	r1, [r4, #16]
 801618c:	4650      	mov	r0, sl
 801618e:	f7ff feb7 	bl	8015f00 <_free_r>
 8016192:	230c      	movs	r3, #12
 8016194:	f8ca 3000 	str.w	r3, [sl]
 8016198:	89a3      	ldrh	r3, [r4, #12]
 801619a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801619e:	81a3      	strh	r3, [r4, #12]
 80161a0:	f04f 30ff 	mov.w	r0, #4294967295
 80161a4:	e7e9      	b.n	801617a <__ssputs_r+0x8a>
	...

080161a8 <_svfiprintf_r>:
 80161a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ac:	4698      	mov	r8, r3
 80161ae:	898b      	ldrh	r3, [r1, #12]
 80161b0:	061b      	lsls	r3, r3, #24
 80161b2:	b09d      	sub	sp, #116	@ 0x74
 80161b4:	4607      	mov	r7, r0
 80161b6:	460d      	mov	r5, r1
 80161b8:	4614      	mov	r4, r2
 80161ba:	d510      	bpl.n	80161de <_svfiprintf_r+0x36>
 80161bc:	690b      	ldr	r3, [r1, #16]
 80161be:	b973      	cbnz	r3, 80161de <_svfiprintf_r+0x36>
 80161c0:	2140      	movs	r1, #64	@ 0x40
 80161c2:	f7ff ff09 	bl	8015fd8 <_malloc_r>
 80161c6:	6028      	str	r0, [r5, #0]
 80161c8:	6128      	str	r0, [r5, #16]
 80161ca:	b930      	cbnz	r0, 80161da <_svfiprintf_r+0x32>
 80161cc:	230c      	movs	r3, #12
 80161ce:	603b      	str	r3, [r7, #0]
 80161d0:	f04f 30ff 	mov.w	r0, #4294967295
 80161d4:	b01d      	add	sp, #116	@ 0x74
 80161d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161da:	2340      	movs	r3, #64	@ 0x40
 80161dc:	616b      	str	r3, [r5, #20]
 80161de:	2300      	movs	r3, #0
 80161e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80161e2:	2320      	movs	r3, #32
 80161e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80161e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80161ec:	2330      	movs	r3, #48	@ 0x30
 80161ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801638c <_svfiprintf_r+0x1e4>
 80161f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80161f6:	f04f 0901 	mov.w	r9, #1
 80161fa:	4623      	mov	r3, r4
 80161fc:	469a      	mov	sl, r3
 80161fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016202:	b10a      	cbz	r2, 8016208 <_svfiprintf_r+0x60>
 8016204:	2a25      	cmp	r2, #37	@ 0x25
 8016206:	d1f9      	bne.n	80161fc <_svfiprintf_r+0x54>
 8016208:	ebba 0b04 	subs.w	fp, sl, r4
 801620c:	d00b      	beq.n	8016226 <_svfiprintf_r+0x7e>
 801620e:	465b      	mov	r3, fp
 8016210:	4622      	mov	r2, r4
 8016212:	4629      	mov	r1, r5
 8016214:	4638      	mov	r0, r7
 8016216:	f7ff ff6b 	bl	80160f0 <__ssputs_r>
 801621a:	3001      	adds	r0, #1
 801621c:	f000 80a7 	beq.w	801636e <_svfiprintf_r+0x1c6>
 8016220:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016222:	445a      	add	r2, fp
 8016224:	9209      	str	r2, [sp, #36]	@ 0x24
 8016226:	f89a 3000 	ldrb.w	r3, [sl]
 801622a:	2b00      	cmp	r3, #0
 801622c:	f000 809f 	beq.w	801636e <_svfiprintf_r+0x1c6>
 8016230:	2300      	movs	r3, #0
 8016232:	f04f 32ff 	mov.w	r2, #4294967295
 8016236:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801623a:	f10a 0a01 	add.w	sl, sl, #1
 801623e:	9304      	str	r3, [sp, #16]
 8016240:	9307      	str	r3, [sp, #28]
 8016242:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016246:	931a      	str	r3, [sp, #104]	@ 0x68
 8016248:	4654      	mov	r4, sl
 801624a:	2205      	movs	r2, #5
 801624c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016250:	484e      	ldr	r0, [pc, #312]	@ (801638c <_svfiprintf_r+0x1e4>)
 8016252:	f7e9 ff9d 	bl	8000190 <memchr>
 8016256:	9a04      	ldr	r2, [sp, #16]
 8016258:	b9d8      	cbnz	r0, 8016292 <_svfiprintf_r+0xea>
 801625a:	06d0      	lsls	r0, r2, #27
 801625c:	bf44      	itt	mi
 801625e:	2320      	movmi	r3, #32
 8016260:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016264:	0711      	lsls	r1, r2, #28
 8016266:	bf44      	itt	mi
 8016268:	232b      	movmi	r3, #43	@ 0x2b
 801626a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801626e:	f89a 3000 	ldrb.w	r3, [sl]
 8016272:	2b2a      	cmp	r3, #42	@ 0x2a
 8016274:	d015      	beq.n	80162a2 <_svfiprintf_r+0xfa>
 8016276:	9a07      	ldr	r2, [sp, #28]
 8016278:	4654      	mov	r4, sl
 801627a:	2000      	movs	r0, #0
 801627c:	f04f 0c0a 	mov.w	ip, #10
 8016280:	4621      	mov	r1, r4
 8016282:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016286:	3b30      	subs	r3, #48	@ 0x30
 8016288:	2b09      	cmp	r3, #9
 801628a:	d94b      	bls.n	8016324 <_svfiprintf_r+0x17c>
 801628c:	b1b0      	cbz	r0, 80162bc <_svfiprintf_r+0x114>
 801628e:	9207      	str	r2, [sp, #28]
 8016290:	e014      	b.n	80162bc <_svfiprintf_r+0x114>
 8016292:	eba0 0308 	sub.w	r3, r0, r8
 8016296:	fa09 f303 	lsl.w	r3, r9, r3
 801629a:	4313      	orrs	r3, r2
 801629c:	9304      	str	r3, [sp, #16]
 801629e:	46a2      	mov	sl, r4
 80162a0:	e7d2      	b.n	8016248 <_svfiprintf_r+0xa0>
 80162a2:	9b03      	ldr	r3, [sp, #12]
 80162a4:	1d19      	adds	r1, r3, #4
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	9103      	str	r1, [sp, #12]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	bfbb      	ittet	lt
 80162ae:	425b      	neglt	r3, r3
 80162b0:	f042 0202 	orrlt.w	r2, r2, #2
 80162b4:	9307      	strge	r3, [sp, #28]
 80162b6:	9307      	strlt	r3, [sp, #28]
 80162b8:	bfb8      	it	lt
 80162ba:	9204      	strlt	r2, [sp, #16]
 80162bc:	7823      	ldrb	r3, [r4, #0]
 80162be:	2b2e      	cmp	r3, #46	@ 0x2e
 80162c0:	d10a      	bne.n	80162d8 <_svfiprintf_r+0x130>
 80162c2:	7863      	ldrb	r3, [r4, #1]
 80162c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80162c6:	d132      	bne.n	801632e <_svfiprintf_r+0x186>
 80162c8:	9b03      	ldr	r3, [sp, #12]
 80162ca:	1d1a      	adds	r2, r3, #4
 80162cc:	681b      	ldr	r3, [r3, #0]
 80162ce:	9203      	str	r2, [sp, #12]
 80162d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80162d4:	3402      	adds	r4, #2
 80162d6:	9305      	str	r3, [sp, #20]
 80162d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801639c <_svfiprintf_r+0x1f4>
 80162dc:	7821      	ldrb	r1, [r4, #0]
 80162de:	2203      	movs	r2, #3
 80162e0:	4650      	mov	r0, sl
 80162e2:	f7e9 ff55 	bl	8000190 <memchr>
 80162e6:	b138      	cbz	r0, 80162f8 <_svfiprintf_r+0x150>
 80162e8:	9b04      	ldr	r3, [sp, #16]
 80162ea:	eba0 000a 	sub.w	r0, r0, sl
 80162ee:	2240      	movs	r2, #64	@ 0x40
 80162f0:	4082      	lsls	r2, r0
 80162f2:	4313      	orrs	r3, r2
 80162f4:	3401      	adds	r4, #1
 80162f6:	9304      	str	r3, [sp, #16]
 80162f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162fc:	4824      	ldr	r0, [pc, #144]	@ (8016390 <_svfiprintf_r+0x1e8>)
 80162fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016302:	2206      	movs	r2, #6
 8016304:	f7e9 ff44 	bl	8000190 <memchr>
 8016308:	2800      	cmp	r0, #0
 801630a:	d036      	beq.n	801637a <_svfiprintf_r+0x1d2>
 801630c:	4b21      	ldr	r3, [pc, #132]	@ (8016394 <_svfiprintf_r+0x1ec>)
 801630e:	bb1b      	cbnz	r3, 8016358 <_svfiprintf_r+0x1b0>
 8016310:	9b03      	ldr	r3, [sp, #12]
 8016312:	3307      	adds	r3, #7
 8016314:	f023 0307 	bic.w	r3, r3, #7
 8016318:	3308      	adds	r3, #8
 801631a:	9303      	str	r3, [sp, #12]
 801631c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801631e:	4433      	add	r3, r6
 8016320:	9309      	str	r3, [sp, #36]	@ 0x24
 8016322:	e76a      	b.n	80161fa <_svfiprintf_r+0x52>
 8016324:	fb0c 3202 	mla	r2, ip, r2, r3
 8016328:	460c      	mov	r4, r1
 801632a:	2001      	movs	r0, #1
 801632c:	e7a8      	b.n	8016280 <_svfiprintf_r+0xd8>
 801632e:	2300      	movs	r3, #0
 8016330:	3401      	adds	r4, #1
 8016332:	9305      	str	r3, [sp, #20]
 8016334:	4619      	mov	r1, r3
 8016336:	f04f 0c0a 	mov.w	ip, #10
 801633a:	4620      	mov	r0, r4
 801633c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016340:	3a30      	subs	r2, #48	@ 0x30
 8016342:	2a09      	cmp	r2, #9
 8016344:	d903      	bls.n	801634e <_svfiprintf_r+0x1a6>
 8016346:	2b00      	cmp	r3, #0
 8016348:	d0c6      	beq.n	80162d8 <_svfiprintf_r+0x130>
 801634a:	9105      	str	r1, [sp, #20]
 801634c:	e7c4      	b.n	80162d8 <_svfiprintf_r+0x130>
 801634e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016352:	4604      	mov	r4, r0
 8016354:	2301      	movs	r3, #1
 8016356:	e7f0      	b.n	801633a <_svfiprintf_r+0x192>
 8016358:	ab03      	add	r3, sp, #12
 801635a:	9300      	str	r3, [sp, #0]
 801635c:	462a      	mov	r2, r5
 801635e:	4b0e      	ldr	r3, [pc, #56]	@ (8016398 <_svfiprintf_r+0x1f0>)
 8016360:	a904      	add	r1, sp, #16
 8016362:	4638      	mov	r0, r7
 8016364:	f3af 8000 	nop.w
 8016368:	1c42      	adds	r2, r0, #1
 801636a:	4606      	mov	r6, r0
 801636c:	d1d6      	bne.n	801631c <_svfiprintf_r+0x174>
 801636e:	89ab      	ldrh	r3, [r5, #12]
 8016370:	065b      	lsls	r3, r3, #25
 8016372:	f53f af2d 	bmi.w	80161d0 <_svfiprintf_r+0x28>
 8016376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016378:	e72c      	b.n	80161d4 <_svfiprintf_r+0x2c>
 801637a:	ab03      	add	r3, sp, #12
 801637c:	9300      	str	r3, [sp, #0]
 801637e:	462a      	mov	r2, r5
 8016380:	4b05      	ldr	r3, [pc, #20]	@ (8016398 <_svfiprintf_r+0x1f0>)
 8016382:	a904      	add	r1, sp, #16
 8016384:	4638      	mov	r0, r7
 8016386:	f000 f9bb 	bl	8016700 <_printf_i>
 801638a:	e7ed      	b.n	8016368 <_svfiprintf_r+0x1c0>
 801638c:	080189ec 	.word	0x080189ec
 8016390:	080189f6 	.word	0x080189f6
 8016394:	00000000 	.word	0x00000000
 8016398:	080160f1 	.word	0x080160f1
 801639c:	080189f2 	.word	0x080189f2

080163a0 <__sfputc_r>:
 80163a0:	6893      	ldr	r3, [r2, #8]
 80163a2:	3b01      	subs	r3, #1
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	b410      	push	{r4}
 80163a8:	6093      	str	r3, [r2, #8]
 80163aa:	da08      	bge.n	80163be <__sfputc_r+0x1e>
 80163ac:	6994      	ldr	r4, [r2, #24]
 80163ae:	42a3      	cmp	r3, r4
 80163b0:	db01      	blt.n	80163b6 <__sfputc_r+0x16>
 80163b2:	290a      	cmp	r1, #10
 80163b4:	d103      	bne.n	80163be <__sfputc_r+0x1e>
 80163b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163ba:	f7ff bc5b 	b.w	8015c74 <__swbuf_r>
 80163be:	6813      	ldr	r3, [r2, #0]
 80163c0:	1c58      	adds	r0, r3, #1
 80163c2:	6010      	str	r0, [r2, #0]
 80163c4:	7019      	strb	r1, [r3, #0]
 80163c6:	4608      	mov	r0, r1
 80163c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163cc:	4770      	bx	lr

080163ce <__sfputs_r>:
 80163ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163d0:	4606      	mov	r6, r0
 80163d2:	460f      	mov	r7, r1
 80163d4:	4614      	mov	r4, r2
 80163d6:	18d5      	adds	r5, r2, r3
 80163d8:	42ac      	cmp	r4, r5
 80163da:	d101      	bne.n	80163e0 <__sfputs_r+0x12>
 80163dc:	2000      	movs	r0, #0
 80163de:	e007      	b.n	80163f0 <__sfputs_r+0x22>
 80163e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80163e4:	463a      	mov	r2, r7
 80163e6:	4630      	mov	r0, r6
 80163e8:	f7ff ffda 	bl	80163a0 <__sfputc_r>
 80163ec:	1c43      	adds	r3, r0, #1
 80163ee:	d1f3      	bne.n	80163d8 <__sfputs_r+0xa>
 80163f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080163f4 <_vfiprintf_r>:
 80163f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163f8:	460d      	mov	r5, r1
 80163fa:	b09d      	sub	sp, #116	@ 0x74
 80163fc:	4614      	mov	r4, r2
 80163fe:	4698      	mov	r8, r3
 8016400:	4606      	mov	r6, r0
 8016402:	b118      	cbz	r0, 801640c <_vfiprintf_r+0x18>
 8016404:	6a03      	ldr	r3, [r0, #32]
 8016406:	b90b      	cbnz	r3, 801640c <_vfiprintf_r+0x18>
 8016408:	f7ff fb0a 	bl	8015a20 <__sinit>
 801640c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801640e:	07d9      	lsls	r1, r3, #31
 8016410:	d405      	bmi.n	801641e <_vfiprintf_r+0x2a>
 8016412:	89ab      	ldrh	r3, [r5, #12]
 8016414:	059a      	lsls	r2, r3, #22
 8016416:	d402      	bmi.n	801641e <_vfiprintf_r+0x2a>
 8016418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801641a:	f7ff fd60 	bl	8015ede <__retarget_lock_acquire_recursive>
 801641e:	89ab      	ldrh	r3, [r5, #12]
 8016420:	071b      	lsls	r3, r3, #28
 8016422:	d501      	bpl.n	8016428 <_vfiprintf_r+0x34>
 8016424:	692b      	ldr	r3, [r5, #16]
 8016426:	b99b      	cbnz	r3, 8016450 <_vfiprintf_r+0x5c>
 8016428:	4629      	mov	r1, r5
 801642a:	4630      	mov	r0, r6
 801642c:	f7ff fc60 	bl	8015cf0 <__swsetup_r>
 8016430:	b170      	cbz	r0, 8016450 <_vfiprintf_r+0x5c>
 8016432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016434:	07dc      	lsls	r4, r3, #31
 8016436:	d504      	bpl.n	8016442 <_vfiprintf_r+0x4e>
 8016438:	f04f 30ff 	mov.w	r0, #4294967295
 801643c:	b01d      	add	sp, #116	@ 0x74
 801643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016442:	89ab      	ldrh	r3, [r5, #12]
 8016444:	0598      	lsls	r0, r3, #22
 8016446:	d4f7      	bmi.n	8016438 <_vfiprintf_r+0x44>
 8016448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801644a:	f7ff fd49 	bl	8015ee0 <__retarget_lock_release_recursive>
 801644e:	e7f3      	b.n	8016438 <_vfiprintf_r+0x44>
 8016450:	2300      	movs	r3, #0
 8016452:	9309      	str	r3, [sp, #36]	@ 0x24
 8016454:	2320      	movs	r3, #32
 8016456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801645a:	f8cd 800c 	str.w	r8, [sp, #12]
 801645e:	2330      	movs	r3, #48	@ 0x30
 8016460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016610 <_vfiprintf_r+0x21c>
 8016464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016468:	f04f 0901 	mov.w	r9, #1
 801646c:	4623      	mov	r3, r4
 801646e:	469a      	mov	sl, r3
 8016470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016474:	b10a      	cbz	r2, 801647a <_vfiprintf_r+0x86>
 8016476:	2a25      	cmp	r2, #37	@ 0x25
 8016478:	d1f9      	bne.n	801646e <_vfiprintf_r+0x7a>
 801647a:	ebba 0b04 	subs.w	fp, sl, r4
 801647e:	d00b      	beq.n	8016498 <_vfiprintf_r+0xa4>
 8016480:	465b      	mov	r3, fp
 8016482:	4622      	mov	r2, r4
 8016484:	4629      	mov	r1, r5
 8016486:	4630      	mov	r0, r6
 8016488:	f7ff ffa1 	bl	80163ce <__sfputs_r>
 801648c:	3001      	adds	r0, #1
 801648e:	f000 80a7 	beq.w	80165e0 <_vfiprintf_r+0x1ec>
 8016492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016494:	445a      	add	r2, fp
 8016496:	9209      	str	r2, [sp, #36]	@ 0x24
 8016498:	f89a 3000 	ldrb.w	r3, [sl]
 801649c:	2b00      	cmp	r3, #0
 801649e:	f000 809f 	beq.w	80165e0 <_vfiprintf_r+0x1ec>
 80164a2:	2300      	movs	r3, #0
 80164a4:	f04f 32ff 	mov.w	r2, #4294967295
 80164a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164ac:	f10a 0a01 	add.w	sl, sl, #1
 80164b0:	9304      	str	r3, [sp, #16]
 80164b2:	9307      	str	r3, [sp, #28]
 80164b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80164b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80164ba:	4654      	mov	r4, sl
 80164bc:	2205      	movs	r2, #5
 80164be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80164c2:	4853      	ldr	r0, [pc, #332]	@ (8016610 <_vfiprintf_r+0x21c>)
 80164c4:	f7e9 fe64 	bl	8000190 <memchr>
 80164c8:	9a04      	ldr	r2, [sp, #16]
 80164ca:	b9d8      	cbnz	r0, 8016504 <_vfiprintf_r+0x110>
 80164cc:	06d1      	lsls	r1, r2, #27
 80164ce:	bf44      	itt	mi
 80164d0:	2320      	movmi	r3, #32
 80164d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80164d6:	0713      	lsls	r3, r2, #28
 80164d8:	bf44      	itt	mi
 80164da:	232b      	movmi	r3, #43	@ 0x2b
 80164dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80164e0:	f89a 3000 	ldrb.w	r3, [sl]
 80164e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80164e6:	d015      	beq.n	8016514 <_vfiprintf_r+0x120>
 80164e8:	9a07      	ldr	r2, [sp, #28]
 80164ea:	4654      	mov	r4, sl
 80164ec:	2000      	movs	r0, #0
 80164ee:	f04f 0c0a 	mov.w	ip, #10
 80164f2:	4621      	mov	r1, r4
 80164f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164f8:	3b30      	subs	r3, #48	@ 0x30
 80164fa:	2b09      	cmp	r3, #9
 80164fc:	d94b      	bls.n	8016596 <_vfiprintf_r+0x1a2>
 80164fe:	b1b0      	cbz	r0, 801652e <_vfiprintf_r+0x13a>
 8016500:	9207      	str	r2, [sp, #28]
 8016502:	e014      	b.n	801652e <_vfiprintf_r+0x13a>
 8016504:	eba0 0308 	sub.w	r3, r0, r8
 8016508:	fa09 f303 	lsl.w	r3, r9, r3
 801650c:	4313      	orrs	r3, r2
 801650e:	9304      	str	r3, [sp, #16]
 8016510:	46a2      	mov	sl, r4
 8016512:	e7d2      	b.n	80164ba <_vfiprintf_r+0xc6>
 8016514:	9b03      	ldr	r3, [sp, #12]
 8016516:	1d19      	adds	r1, r3, #4
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	9103      	str	r1, [sp, #12]
 801651c:	2b00      	cmp	r3, #0
 801651e:	bfbb      	ittet	lt
 8016520:	425b      	neglt	r3, r3
 8016522:	f042 0202 	orrlt.w	r2, r2, #2
 8016526:	9307      	strge	r3, [sp, #28]
 8016528:	9307      	strlt	r3, [sp, #28]
 801652a:	bfb8      	it	lt
 801652c:	9204      	strlt	r2, [sp, #16]
 801652e:	7823      	ldrb	r3, [r4, #0]
 8016530:	2b2e      	cmp	r3, #46	@ 0x2e
 8016532:	d10a      	bne.n	801654a <_vfiprintf_r+0x156>
 8016534:	7863      	ldrb	r3, [r4, #1]
 8016536:	2b2a      	cmp	r3, #42	@ 0x2a
 8016538:	d132      	bne.n	80165a0 <_vfiprintf_r+0x1ac>
 801653a:	9b03      	ldr	r3, [sp, #12]
 801653c:	1d1a      	adds	r2, r3, #4
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	9203      	str	r2, [sp, #12]
 8016542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016546:	3402      	adds	r4, #2
 8016548:	9305      	str	r3, [sp, #20]
 801654a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016620 <_vfiprintf_r+0x22c>
 801654e:	7821      	ldrb	r1, [r4, #0]
 8016550:	2203      	movs	r2, #3
 8016552:	4650      	mov	r0, sl
 8016554:	f7e9 fe1c 	bl	8000190 <memchr>
 8016558:	b138      	cbz	r0, 801656a <_vfiprintf_r+0x176>
 801655a:	9b04      	ldr	r3, [sp, #16]
 801655c:	eba0 000a 	sub.w	r0, r0, sl
 8016560:	2240      	movs	r2, #64	@ 0x40
 8016562:	4082      	lsls	r2, r0
 8016564:	4313      	orrs	r3, r2
 8016566:	3401      	adds	r4, #1
 8016568:	9304      	str	r3, [sp, #16]
 801656a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801656e:	4829      	ldr	r0, [pc, #164]	@ (8016614 <_vfiprintf_r+0x220>)
 8016570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016574:	2206      	movs	r2, #6
 8016576:	f7e9 fe0b 	bl	8000190 <memchr>
 801657a:	2800      	cmp	r0, #0
 801657c:	d03f      	beq.n	80165fe <_vfiprintf_r+0x20a>
 801657e:	4b26      	ldr	r3, [pc, #152]	@ (8016618 <_vfiprintf_r+0x224>)
 8016580:	bb1b      	cbnz	r3, 80165ca <_vfiprintf_r+0x1d6>
 8016582:	9b03      	ldr	r3, [sp, #12]
 8016584:	3307      	adds	r3, #7
 8016586:	f023 0307 	bic.w	r3, r3, #7
 801658a:	3308      	adds	r3, #8
 801658c:	9303      	str	r3, [sp, #12]
 801658e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016590:	443b      	add	r3, r7
 8016592:	9309      	str	r3, [sp, #36]	@ 0x24
 8016594:	e76a      	b.n	801646c <_vfiprintf_r+0x78>
 8016596:	fb0c 3202 	mla	r2, ip, r2, r3
 801659a:	460c      	mov	r4, r1
 801659c:	2001      	movs	r0, #1
 801659e:	e7a8      	b.n	80164f2 <_vfiprintf_r+0xfe>
 80165a0:	2300      	movs	r3, #0
 80165a2:	3401      	adds	r4, #1
 80165a4:	9305      	str	r3, [sp, #20]
 80165a6:	4619      	mov	r1, r3
 80165a8:	f04f 0c0a 	mov.w	ip, #10
 80165ac:	4620      	mov	r0, r4
 80165ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165b2:	3a30      	subs	r2, #48	@ 0x30
 80165b4:	2a09      	cmp	r2, #9
 80165b6:	d903      	bls.n	80165c0 <_vfiprintf_r+0x1cc>
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d0c6      	beq.n	801654a <_vfiprintf_r+0x156>
 80165bc:	9105      	str	r1, [sp, #20]
 80165be:	e7c4      	b.n	801654a <_vfiprintf_r+0x156>
 80165c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80165c4:	4604      	mov	r4, r0
 80165c6:	2301      	movs	r3, #1
 80165c8:	e7f0      	b.n	80165ac <_vfiprintf_r+0x1b8>
 80165ca:	ab03      	add	r3, sp, #12
 80165cc:	9300      	str	r3, [sp, #0]
 80165ce:	462a      	mov	r2, r5
 80165d0:	4b12      	ldr	r3, [pc, #72]	@ (801661c <_vfiprintf_r+0x228>)
 80165d2:	a904      	add	r1, sp, #16
 80165d4:	4630      	mov	r0, r6
 80165d6:	f3af 8000 	nop.w
 80165da:	4607      	mov	r7, r0
 80165dc:	1c78      	adds	r0, r7, #1
 80165de:	d1d6      	bne.n	801658e <_vfiprintf_r+0x19a>
 80165e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80165e2:	07d9      	lsls	r1, r3, #31
 80165e4:	d405      	bmi.n	80165f2 <_vfiprintf_r+0x1fe>
 80165e6:	89ab      	ldrh	r3, [r5, #12]
 80165e8:	059a      	lsls	r2, r3, #22
 80165ea:	d402      	bmi.n	80165f2 <_vfiprintf_r+0x1fe>
 80165ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80165ee:	f7ff fc77 	bl	8015ee0 <__retarget_lock_release_recursive>
 80165f2:	89ab      	ldrh	r3, [r5, #12]
 80165f4:	065b      	lsls	r3, r3, #25
 80165f6:	f53f af1f 	bmi.w	8016438 <_vfiprintf_r+0x44>
 80165fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80165fc:	e71e      	b.n	801643c <_vfiprintf_r+0x48>
 80165fe:	ab03      	add	r3, sp, #12
 8016600:	9300      	str	r3, [sp, #0]
 8016602:	462a      	mov	r2, r5
 8016604:	4b05      	ldr	r3, [pc, #20]	@ (801661c <_vfiprintf_r+0x228>)
 8016606:	a904      	add	r1, sp, #16
 8016608:	4630      	mov	r0, r6
 801660a:	f000 f879 	bl	8016700 <_printf_i>
 801660e:	e7e4      	b.n	80165da <_vfiprintf_r+0x1e6>
 8016610:	080189ec 	.word	0x080189ec
 8016614:	080189f6 	.word	0x080189f6
 8016618:	00000000 	.word	0x00000000
 801661c:	080163cf 	.word	0x080163cf
 8016620:	080189f2 	.word	0x080189f2

08016624 <_printf_common>:
 8016624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016628:	4616      	mov	r6, r2
 801662a:	4698      	mov	r8, r3
 801662c:	688a      	ldr	r2, [r1, #8]
 801662e:	690b      	ldr	r3, [r1, #16]
 8016630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016634:	4293      	cmp	r3, r2
 8016636:	bfb8      	it	lt
 8016638:	4613      	movlt	r3, r2
 801663a:	6033      	str	r3, [r6, #0]
 801663c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016640:	4607      	mov	r7, r0
 8016642:	460c      	mov	r4, r1
 8016644:	b10a      	cbz	r2, 801664a <_printf_common+0x26>
 8016646:	3301      	adds	r3, #1
 8016648:	6033      	str	r3, [r6, #0]
 801664a:	6823      	ldr	r3, [r4, #0]
 801664c:	0699      	lsls	r1, r3, #26
 801664e:	bf42      	ittt	mi
 8016650:	6833      	ldrmi	r3, [r6, #0]
 8016652:	3302      	addmi	r3, #2
 8016654:	6033      	strmi	r3, [r6, #0]
 8016656:	6825      	ldr	r5, [r4, #0]
 8016658:	f015 0506 	ands.w	r5, r5, #6
 801665c:	d106      	bne.n	801666c <_printf_common+0x48>
 801665e:	f104 0a19 	add.w	sl, r4, #25
 8016662:	68e3      	ldr	r3, [r4, #12]
 8016664:	6832      	ldr	r2, [r6, #0]
 8016666:	1a9b      	subs	r3, r3, r2
 8016668:	42ab      	cmp	r3, r5
 801666a:	dc26      	bgt.n	80166ba <_printf_common+0x96>
 801666c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016670:	6822      	ldr	r2, [r4, #0]
 8016672:	3b00      	subs	r3, #0
 8016674:	bf18      	it	ne
 8016676:	2301      	movne	r3, #1
 8016678:	0692      	lsls	r2, r2, #26
 801667a:	d42b      	bmi.n	80166d4 <_printf_common+0xb0>
 801667c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016680:	4641      	mov	r1, r8
 8016682:	4638      	mov	r0, r7
 8016684:	47c8      	blx	r9
 8016686:	3001      	adds	r0, #1
 8016688:	d01e      	beq.n	80166c8 <_printf_common+0xa4>
 801668a:	6823      	ldr	r3, [r4, #0]
 801668c:	6922      	ldr	r2, [r4, #16]
 801668e:	f003 0306 	and.w	r3, r3, #6
 8016692:	2b04      	cmp	r3, #4
 8016694:	bf02      	ittt	eq
 8016696:	68e5      	ldreq	r5, [r4, #12]
 8016698:	6833      	ldreq	r3, [r6, #0]
 801669a:	1aed      	subeq	r5, r5, r3
 801669c:	68a3      	ldr	r3, [r4, #8]
 801669e:	bf0c      	ite	eq
 80166a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80166a4:	2500      	movne	r5, #0
 80166a6:	4293      	cmp	r3, r2
 80166a8:	bfc4      	itt	gt
 80166aa:	1a9b      	subgt	r3, r3, r2
 80166ac:	18ed      	addgt	r5, r5, r3
 80166ae:	2600      	movs	r6, #0
 80166b0:	341a      	adds	r4, #26
 80166b2:	42b5      	cmp	r5, r6
 80166b4:	d11a      	bne.n	80166ec <_printf_common+0xc8>
 80166b6:	2000      	movs	r0, #0
 80166b8:	e008      	b.n	80166cc <_printf_common+0xa8>
 80166ba:	2301      	movs	r3, #1
 80166bc:	4652      	mov	r2, sl
 80166be:	4641      	mov	r1, r8
 80166c0:	4638      	mov	r0, r7
 80166c2:	47c8      	blx	r9
 80166c4:	3001      	adds	r0, #1
 80166c6:	d103      	bne.n	80166d0 <_printf_common+0xac>
 80166c8:	f04f 30ff 	mov.w	r0, #4294967295
 80166cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80166d0:	3501      	adds	r5, #1
 80166d2:	e7c6      	b.n	8016662 <_printf_common+0x3e>
 80166d4:	18e1      	adds	r1, r4, r3
 80166d6:	1c5a      	adds	r2, r3, #1
 80166d8:	2030      	movs	r0, #48	@ 0x30
 80166da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80166de:	4422      	add	r2, r4
 80166e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80166e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80166e8:	3302      	adds	r3, #2
 80166ea:	e7c7      	b.n	801667c <_printf_common+0x58>
 80166ec:	2301      	movs	r3, #1
 80166ee:	4622      	mov	r2, r4
 80166f0:	4641      	mov	r1, r8
 80166f2:	4638      	mov	r0, r7
 80166f4:	47c8      	blx	r9
 80166f6:	3001      	adds	r0, #1
 80166f8:	d0e6      	beq.n	80166c8 <_printf_common+0xa4>
 80166fa:	3601      	adds	r6, #1
 80166fc:	e7d9      	b.n	80166b2 <_printf_common+0x8e>
	...

08016700 <_printf_i>:
 8016700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016704:	7e0f      	ldrb	r7, [r1, #24]
 8016706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016708:	2f78      	cmp	r7, #120	@ 0x78
 801670a:	4691      	mov	r9, r2
 801670c:	4680      	mov	r8, r0
 801670e:	460c      	mov	r4, r1
 8016710:	469a      	mov	sl, r3
 8016712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016716:	d807      	bhi.n	8016728 <_printf_i+0x28>
 8016718:	2f62      	cmp	r7, #98	@ 0x62
 801671a:	d80a      	bhi.n	8016732 <_printf_i+0x32>
 801671c:	2f00      	cmp	r7, #0
 801671e:	f000 80d2 	beq.w	80168c6 <_printf_i+0x1c6>
 8016722:	2f58      	cmp	r7, #88	@ 0x58
 8016724:	f000 80b9 	beq.w	801689a <_printf_i+0x19a>
 8016728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801672c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016730:	e03a      	b.n	80167a8 <_printf_i+0xa8>
 8016732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016736:	2b15      	cmp	r3, #21
 8016738:	d8f6      	bhi.n	8016728 <_printf_i+0x28>
 801673a:	a101      	add	r1, pc, #4	@ (adr r1, 8016740 <_printf_i+0x40>)
 801673c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016740:	08016799 	.word	0x08016799
 8016744:	080167ad 	.word	0x080167ad
 8016748:	08016729 	.word	0x08016729
 801674c:	08016729 	.word	0x08016729
 8016750:	08016729 	.word	0x08016729
 8016754:	08016729 	.word	0x08016729
 8016758:	080167ad 	.word	0x080167ad
 801675c:	08016729 	.word	0x08016729
 8016760:	08016729 	.word	0x08016729
 8016764:	08016729 	.word	0x08016729
 8016768:	08016729 	.word	0x08016729
 801676c:	080168ad 	.word	0x080168ad
 8016770:	080167d7 	.word	0x080167d7
 8016774:	08016867 	.word	0x08016867
 8016778:	08016729 	.word	0x08016729
 801677c:	08016729 	.word	0x08016729
 8016780:	080168cf 	.word	0x080168cf
 8016784:	08016729 	.word	0x08016729
 8016788:	080167d7 	.word	0x080167d7
 801678c:	08016729 	.word	0x08016729
 8016790:	08016729 	.word	0x08016729
 8016794:	0801686f 	.word	0x0801686f
 8016798:	6833      	ldr	r3, [r6, #0]
 801679a:	1d1a      	adds	r2, r3, #4
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	6032      	str	r2, [r6, #0]
 80167a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80167a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80167a8:	2301      	movs	r3, #1
 80167aa:	e09d      	b.n	80168e8 <_printf_i+0x1e8>
 80167ac:	6833      	ldr	r3, [r6, #0]
 80167ae:	6820      	ldr	r0, [r4, #0]
 80167b0:	1d19      	adds	r1, r3, #4
 80167b2:	6031      	str	r1, [r6, #0]
 80167b4:	0606      	lsls	r6, r0, #24
 80167b6:	d501      	bpl.n	80167bc <_printf_i+0xbc>
 80167b8:	681d      	ldr	r5, [r3, #0]
 80167ba:	e003      	b.n	80167c4 <_printf_i+0xc4>
 80167bc:	0645      	lsls	r5, r0, #25
 80167be:	d5fb      	bpl.n	80167b8 <_printf_i+0xb8>
 80167c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80167c4:	2d00      	cmp	r5, #0
 80167c6:	da03      	bge.n	80167d0 <_printf_i+0xd0>
 80167c8:	232d      	movs	r3, #45	@ 0x2d
 80167ca:	426d      	negs	r5, r5
 80167cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80167d0:	4859      	ldr	r0, [pc, #356]	@ (8016938 <_printf_i+0x238>)
 80167d2:	230a      	movs	r3, #10
 80167d4:	e011      	b.n	80167fa <_printf_i+0xfa>
 80167d6:	6821      	ldr	r1, [r4, #0]
 80167d8:	6833      	ldr	r3, [r6, #0]
 80167da:	0608      	lsls	r0, r1, #24
 80167dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80167e0:	d402      	bmi.n	80167e8 <_printf_i+0xe8>
 80167e2:	0649      	lsls	r1, r1, #25
 80167e4:	bf48      	it	mi
 80167e6:	b2ad      	uxthmi	r5, r5
 80167e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80167ea:	4853      	ldr	r0, [pc, #332]	@ (8016938 <_printf_i+0x238>)
 80167ec:	6033      	str	r3, [r6, #0]
 80167ee:	bf14      	ite	ne
 80167f0:	230a      	movne	r3, #10
 80167f2:	2308      	moveq	r3, #8
 80167f4:	2100      	movs	r1, #0
 80167f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80167fa:	6866      	ldr	r6, [r4, #4]
 80167fc:	60a6      	str	r6, [r4, #8]
 80167fe:	2e00      	cmp	r6, #0
 8016800:	bfa2      	ittt	ge
 8016802:	6821      	ldrge	r1, [r4, #0]
 8016804:	f021 0104 	bicge.w	r1, r1, #4
 8016808:	6021      	strge	r1, [r4, #0]
 801680a:	b90d      	cbnz	r5, 8016810 <_printf_i+0x110>
 801680c:	2e00      	cmp	r6, #0
 801680e:	d04b      	beq.n	80168a8 <_printf_i+0x1a8>
 8016810:	4616      	mov	r6, r2
 8016812:	fbb5 f1f3 	udiv	r1, r5, r3
 8016816:	fb03 5711 	mls	r7, r3, r1, r5
 801681a:	5dc7      	ldrb	r7, [r0, r7]
 801681c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016820:	462f      	mov	r7, r5
 8016822:	42bb      	cmp	r3, r7
 8016824:	460d      	mov	r5, r1
 8016826:	d9f4      	bls.n	8016812 <_printf_i+0x112>
 8016828:	2b08      	cmp	r3, #8
 801682a:	d10b      	bne.n	8016844 <_printf_i+0x144>
 801682c:	6823      	ldr	r3, [r4, #0]
 801682e:	07df      	lsls	r7, r3, #31
 8016830:	d508      	bpl.n	8016844 <_printf_i+0x144>
 8016832:	6923      	ldr	r3, [r4, #16]
 8016834:	6861      	ldr	r1, [r4, #4]
 8016836:	4299      	cmp	r1, r3
 8016838:	bfde      	ittt	le
 801683a:	2330      	movle	r3, #48	@ 0x30
 801683c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016840:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016844:	1b92      	subs	r2, r2, r6
 8016846:	6122      	str	r2, [r4, #16]
 8016848:	f8cd a000 	str.w	sl, [sp]
 801684c:	464b      	mov	r3, r9
 801684e:	aa03      	add	r2, sp, #12
 8016850:	4621      	mov	r1, r4
 8016852:	4640      	mov	r0, r8
 8016854:	f7ff fee6 	bl	8016624 <_printf_common>
 8016858:	3001      	adds	r0, #1
 801685a:	d14a      	bne.n	80168f2 <_printf_i+0x1f2>
 801685c:	f04f 30ff 	mov.w	r0, #4294967295
 8016860:	b004      	add	sp, #16
 8016862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016866:	6823      	ldr	r3, [r4, #0]
 8016868:	f043 0320 	orr.w	r3, r3, #32
 801686c:	6023      	str	r3, [r4, #0]
 801686e:	4833      	ldr	r0, [pc, #204]	@ (801693c <_printf_i+0x23c>)
 8016870:	2778      	movs	r7, #120	@ 0x78
 8016872:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8016876:	6823      	ldr	r3, [r4, #0]
 8016878:	6831      	ldr	r1, [r6, #0]
 801687a:	061f      	lsls	r7, r3, #24
 801687c:	f851 5b04 	ldr.w	r5, [r1], #4
 8016880:	d402      	bmi.n	8016888 <_printf_i+0x188>
 8016882:	065f      	lsls	r7, r3, #25
 8016884:	bf48      	it	mi
 8016886:	b2ad      	uxthmi	r5, r5
 8016888:	6031      	str	r1, [r6, #0]
 801688a:	07d9      	lsls	r1, r3, #31
 801688c:	bf44      	itt	mi
 801688e:	f043 0320 	orrmi.w	r3, r3, #32
 8016892:	6023      	strmi	r3, [r4, #0]
 8016894:	b11d      	cbz	r5, 801689e <_printf_i+0x19e>
 8016896:	2310      	movs	r3, #16
 8016898:	e7ac      	b.n	80167f4 <_printf_i+0xf4>
 801689a:	4827      	ldr	r0, [pc, #156]	@ (8016938 <_printf_i+0x238>)
 801689c:	e7e9      	b.n	8016872 <_printf_i+0x172>
 801689e:	6823      	ldr	r3, [r4, #0]
 80168a0:	f023 0320 	bic.w	r3, r3, #32
 80168a4:	6023      	str	r3, [r4, #0]
 80168a6:	e7f6      	b.n	8016896 <_printf_i+0x196>
 80168a8:	4616      	mov	r6, r2
 80168aa:	e7bd      	b.n	8016828 <_printf_i+0x128>
 80168ac:	6833      	ldr	r3, [r6, #0]
 80168ae:	6825      	ldr	r5, [r4, #0]
 80168b0:	6961      	ldr	r1, [r4, #20]
 80168b2:	1d18      	adds	r0, r3, #4
 80168b4:	6030      	str	r0, [r6, #0]
 80168b6:	062e      	lsls	r6, r5, #24
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	d501      	bpl.n	80168c0 <_printf_i+0x1c0>
 80168bc:	6019      	str	r1, [r3, #0]
 80168be:	e002      	b.n	80168c6 <_printf_i+0x1c6>
 80168c0:	0668      	lsls	r0, r5, #25
 80168c2:	d5fb      	bpl.n	80168bc <_printf_i+0x1bc>
 80168c4:	8019      	strh	r1, [r3, #0]
 80168c6:	2300      	movs	r3, #0
 80168c8:	6123      	str	r3, [r4, #16]
 80168ca:	4616      	mov	r6, r2
 80168cc:	e7bc      	b.n	8016848 <_printf_i+0x148>
 80168ce:	6833      	ldr	r3, [r6, #0]
 80168d0:	1d1a      	adds	r2, r3, #4
 80168d2:	6032      	str	r2, [r6, #0]
 80168d4:	681e      	ldr	r6, [r3, #0]
 80168d6:	6862      	ldr	r2, [r4, #4]
 80168d8:	2100      	movs	r1, #0
 80168da:	4630      	mov	r0, r6
 80168dc:	f7e9 fc58 	bl	8000190 <memchr>
 80168e0:	b108      	cbz	r0, 80168e6 <_printf_i+0x1e6>
 80168e2:	1b80      	subs	r0, r0, r6
 80168e4:	6060      	str	r0, [r4, #4]
 80168e6:	6863      	ldr	r3, [r4, #4]
 80168e8:	6123      	str	r3, [r4, #16]
 80168ea:	2300      	movs	r3, #0
 80168ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80168f0:	e7aa      	b.n	8016848 <_printf_i+0x148>
 80168f2:	6923      	ldr	r3, [r4, #16]
 80168f4:	4632      	mov	r2, r6
 80168f6:	4649      	mov	r1, r9
 80168f8:	4640      	mov	r0, r8
 80168fa:	47d0      	blx	sl
 80168fc:	3001      	adds	r0, #1
 80168fe:	d0ad      	beq.n	801685c <_printf_i+0x15c>
 8016900:	6823      	ldr	r3, [r4, #0]
 8016902:	079b      	lsls	r3, r3, #30
 8016904:	d413      	bmi.n	801692e <_printf_i+0x22e>
 8016906:	68e0      	ldr	r0, [r4, #12]
 8016908:	9b03      	ldr	r3, [sp, #12]
 801690a:	4298      	cmp	r0, r3
 801690c:	bfb8      	it	lt
 801690e:	4618      	movlt	r0, r3
 8016910:	e7a6      	b.n	8016860 <_printf_i+0x160>
 8016912:	2301      	movs	r3, #1
 8016914:	4632      	mov	r2, r6
 8016916:	4649      	mov	r1, r9
 8016918:	4640      	mov	r0, r8
 801691a:	47d0      	blx	sl
 801691c:	3001      	adds	r0, #1
 801691e:	d09d      	beq.n	801685c <_printf_i+0x15c>
 8016920:	3501      	adds	r5, #1
 8016922:	68e3      	ldr	r3, [r4, #12]
 8016924:	9903      	ldr	r1, [sp, #12]
 8016926:	1a5b      	subs	r3, r3, r1
 8016928:	42ab      	cmp	r3, r5
 801692a:	dcf2      	bgt.n	8016912 <_printf_i+0x212>
 801692c:	e7eb      	b.n	8016906 <_printf_i+0x206>
 801692e:	2500      	movs	r5, #0
 8016930:	f104 0619 	add.w	r6, r4, #25
 8016934:	e7f5      	b.n	8016922 <_printf_i+0x222>
 8016936:	bf00      	nop
 8016938:	080189fd 	.word	0x080189fd
 801693c:	08018a0e 	.word	0x08018a0e

08016940 <__sflush_r>:
 8016940:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016948:	0716      	lsls	r6, r2, #28
 801694a:	4605      	mov	r5, r0
 801694c:	460c      	mov	r4, r1
 801694e:	d454      	bmi.n	80169fa <__sflush_r+0xba>
 8016950:	684b      	ldr	r3, [r1, #4]
 8016952:	2b00      	cmp	r3, #0
 8016954:	dc02      	bgt.n	801695c <__sflush_r+0x1c>
 8016956:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8016958:	2b00      	cmp	r3, #0
 801695a:	dd48      	ble.n	80169ee <__sflush_r+0xae>
 801695c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801695e:	2e00      	cmp	r6, #0
 8016960:	d045      	beq.n	80169ee <__sflush_r+0xae>
 8016962:	2300      	movs	r3, #0
 8016964:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8016968:	682f      	ldr	r7, [r5, #0]
 801696a:	6a21      	ldr	r1, [r4, #32]
 801696c:	602b      	str	r3, [r5, #0]
 801696e:	d030      	beq.n	80169d2 <__sflush_r+0x92>
 8016970:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8016972:	89a3      	ldrh	r3, [r4, #12]
 8016974:	0759      	lsls	r1, r3, #29
 8016976:	d505      	bpl.n	8016984 <__sflush_r+0x44>
 8016978:	6863      	ldr	r3, [r4, #4]
 801697a:	1ad2      	subs	r2, r2, r3
 801697c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801697e:	b10b      	cbz	r3, 8016984 <__sflush_r+0x44>
 8016980:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8016982:	1ad2      	subs	r2, r2, r3
 8016984:	2300      	movs	r3, #0
 8016986:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016988:	6a21      	ldr	r1, [r4, #32]
 801698a:	4628      	mov	r0, r5
 801698c:	47b0      	blx	r6
 801698e:	1c43      	adds	r3, r0, #1
 8016990:	89a3      	ldrh	r3, [r4, #12]
 8016992:	d106      	bne.n	80169a2 <__sflush_r+0x62>
 8016994:	6829      	ldr	r1, [r5, #0]
 8016996:	291d      	cmp	r1, #29
 8016998:	d82b      	bhi.n	80169f2 <__sflush_r+0xb2>
 801699a:	4a2a      	ldr	r2, [pc, #168]	@ (8016a44 <__sflush_r+0x104>)
 801699c:	410a      	asrs	r2, r1
 801699e:	07d6      	lsls	r6, r2, #31
 80169a0:	d427      	bmi.n	80169f2 <__sflush_r+0xb2>
 80169a2:	2200      	movs	r2, #0
 80169a4:	6062      	str	r2, [r4, #4]
 80169a6:	04d9      	lsls	r1, r3, #19
 80169a8:	6922      	ldr	r2, [r4, #16]
 80169aa:	6022      	str	r2, [r4, #0]
 80169ac:	d504      	bpl.n	80169b8 <__sflush_r+0x78>
 80169ae:	1c42      	adds	r2, r0, #1
 80169b0:	d101      	bne.n	80169b6 <__sflush_r+0x76>
 80169b2:	682b      	ldr	r3, [r5, #0]
 80169b4:	b903      	cbnz	r3, 80169b8 <__sflush_r+0x78>
 80169b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80169b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80169ba:	602f      	str	r7, [r5, #0]
 80169bc:	b1b9      	cbz	r1, 80169ee <__sflush_r+0xae>
 80169be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80169c2:	4299      	cmp	r1, r3
 80169c4:	d002      	beq.n	80169cc <__sflush_r+0x8c>
 80169c6:	4628      	mov	r0, r5
 80169c8:	f7ff fa9a 	bl	8015f00 <_free_r>
 80169cc:	2300      	movs	r3, #0
 80169ce:	6363      	str	r3, [r4, #52]	@ 0x34
 80169d0:	e00d      	b.n	80169ee <__sflush_r+0xae>
 80169d2:	2301      	movs	r3, #1
 80169d4:	4628      	mov	r0, r5
 80169d6:	47b0      	blx	r6
 80169d8:	4602      	mov	r2, r0
 80169da:	1c50      	adds	r0, r2, #1
 80169dc:	d1c9      	bne.n	8016972 <__sflush_r+0x32>
 80169de:	682b      	ldr	r3, [r5, #0]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d0c6      	beq.n	8016972 <__sflush_r+0x32>
 80169e4:	2b1d      	cmp	r3, #29
 80169e6:	d001      	beq.n	80169ec <__sflush_r+0xac>
 80169e8:	2b16      	cmp	r3, #22
 80169ea:	d11e      	bne.n	8016a2a <__sflush_r+0xea>
 80169ec:	602f      	str	r7, [r5, #0]
 80169ee:	2000      	movs	r0, #0
 80169f0:	e022      	b.n	8016a38 <__sflush_r+0xf8>
 80169f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80169f6:	b21b      	sxth	r3, r3
 80169f8:	e01b      	b.n	8016a32 <__sflush_r+0xf2>
 80169fa:	690f      	ldr	r7, [r1, #16]
 80169fc:	2f00      	cmp	r7, #0
 80169fe:	d0f6      	beq.n	80169ee <__sflush_r+0xae>
 8016a00:	0793      	lsls	r3, r2, #30
 8016a02:	680e      	ldr	r6, [r1, #0]
 8016a04:	bf08      	it	eq
 8016a06:	694b      	ldreq	r3, [r1, #20]
 8016a08:	600f      	str	r7, [r1, #0]
 8016a0a:	bf18      	it	ne
 8016a0c:	2300      	movne	r3, #0
 8016a0e:	eba6 0807 	sub.w	r8, r6, r7
 8016a12:	608b      	str	r3, [r1, #8]
 8016a14:	f1b8 0f00 	cmp.w	r8, #0
 8016a18:	dde9      	ble.n	80169ee <__sflush_r+0xae>
 8016a1a:	6a21      	ldr	r1, [r4, #32]
 8016a1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016a1e:	4643      	mov	r3, r8
 8016a20:	463a      	mov	r2, r7
 8016a22:	4628      	mov	r0, r5
 8016a24:	47b0      	blx	r6
 8016a26:	2800      	cmp	r0, #0
 8016a28:	dc08      	bgt.n	8016a3c <__sflush_r+0xfc>
 8016a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a32:	81a3      	strh	r3, [r4, #12]
 8016a34:	f04f 30ff 	mov.w	r0, #4294967295
 8016a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a3c:	4407      	add	r7, r0
 8016a3e:	eba8 0800 	sub.w	r8, r8, r0
 8016a42:	e7e7      	b.n	8016a14 <__sflush_r+0xd4>
 8016a44:	dfbffffe 	.word	0xdfbffffe

08016a48 <_fflush_r>:
 8016a48:	b538      	push	{r3, r4, r5, lr}
 8016a4a:	690b      	ldr	r3, [r1, #16]
 8016a4c:	4605      	mov	r5, r0
 8016a4e:	460c      	mov	r4, r1
 8016a50:	b913      	cbnz	r3, 8016a58 <_fflush_r+0x10>
 8016a52:	2500      	movs	r5, #0
 8016a54:	4628      	mov	r0, r5
 8016a56:	bd38      	pop	{r3, r4, r5, pc}
 8016a58:	b118      	cbz	r0, 8016a62 <_fflush_r+0x1a>
 8016a5a:	6a03      	ldr	r3, [r0, #32]
 8016a5c:	b90b      	cbnz	r3, 8016a62 <_fflush_r+0x1a>
 8016a5e:	f7fe ffdf 	bl	8015a20 <__sinit>
 8016a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d0f3      	beq.n	8016a52 <_fflush_r+0xa>
 8016a6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016a6c:	07d0      	lsls	r0, r2, #31
 8016a6e:	d404      	bmi.n	8016a7a <_fflush_r+0x32>
 8016a70:	0599      	lsls	r1, r3, #22
 8016a72:	d402      	bmi.n	8016a7a <_fflush_r+0x32>
 8016a74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a76:	f7ff fa32 	bl	8015ede <__retarget_lock_acquire_recursive>
 8016a7a:	4628      	mov	r0, r5
 8016a7c:	4621      	mov	r1, r4
 8016a7e:	f7ff ff5f 	bl	8016940 <__sflush_r>
 8016a82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016a84:	07da      	lsls	r2, r3, #31
 8016a86:	4605      	mov	r5, r0
 8016a88:	d4e4      	bmi.n	8016a54 <_fflush_r+0xc>
 8016a8a:	89a3      	ldrh	r3, [r4, #12]
 8016a8c:	059b      	lsls	r3, r3, #22
 8016a8e:	d4e1      	bmi.n	8016a54 <_fflush_r+0xc>
 8016a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016a92:	f7ff fa25 	bl	8015ee0 <__retarget_lock_release_recursive>
 8016a96:	e7dd      	b.n	8016a54 <_fflush_r+0xc>

08016a98 <__swhatbuf_r>:
 8016a98:	b570      	push	{r4, r5, r6, lr}
 8016a9a:	460c      	mov	r4, r1
 8016a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016aa0:	2900      	cmp	r1, #0
 8016aa2:	b096      	sub	sp, #88	@ 0x58
 8016aa4:	4615      	mov	r5, r2
 8016aa6:	461e      	mov	r6, r3
 8016aa8:	da0d      	bge.n	8016ac6 <__swhatbuf_r+0x2e>
 8016aaa:	89a3      	ldrh	r3, [r4, #12]
 8016aac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016ab0:	f04f 0100 	mov.w	r1, #0
 8016ab4:	bf14      	ite	ne
 8016ab6:	2340      	movne	r3, #64	@ 0x40
 8016ab8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016abc:	2000      	movs	r0, #0
 8016abe:	6031      	str	r1, [r6, #0]
 8016ac0:	602b      	str	r3, [r5, #0]
 8016ac2:	b016      	add	sp, #88	@ 0x58
 8016ac4:	bd70      	pop	{r4, r5, r6, pc}
 8016ac6:	466a      	mov	r2, sp
 8016ac8:	f000 f8a4 	bl	8016c14 <_fstat_r>
 8016acc:	2800      	cmp	r0, #0
 8016ace:	dbec      	blt.n	8016aaa <__swhatbuf_r+0x12>
 8016ad0:	9901      	ldr	r1, [sp, #4]
 8016ad2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016ad6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016ada:	4259      	negs	r1, r3
 8016adc:	4159      	adcs	r1, r3
 8016ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016ae2:	e7eb      	b.n	8016abc <__swhatbuf_r+0x24>

08016ae4 <__smakebuf_r>:
 8016ae4:	898b      	ldrh	r3, [r1, #12]
 8016ae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016ae8:	079d      	lsls	r5, r3, #30
 8016aea:	4606      	mov	r6, r0
 8016aec:	460c      	mov	r4, r1
 8016aee:	d507      	bpl.n	8016b00 <__smakebuf_r+0x1c>
 8016af0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016af4:	6023      	str	r3, [r4, #0]
 8016af6:	6123      	str	r3, [r4, #16]
 8016af8:	2301      	movs	r3, #1
 8016afa:	6163      	str	r3, [r4, #20]
 8016afc:	b003      	add	sp, #12
 8016afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b00:	ab01      	add	r3, sp, #4
 8016b02:	466a      	mov	r2, sp
 8016b04:	f7ff ffc8 	bl	8016a98 <__swhatbuf_r>
 8016b08:	9f00      	ldr	r7, [sp, #0]
 8016b0a:	4605      	mov	r5, r0
 8016b0c:	4639      	mov	r1, r7
 8016b0e:	4630      	mov	r0, r6
 8016b10:	f7ff fa62 	bl	8015fd8 <_malloc_r>
 8016b14:	b948      	cbnz	r0, 8016b2a <__smakebuf_r+0x46>
 8016b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b1a:	059a      	lsls	r2, r3, #22
 8016b1c:	d4ee      	bmi.n	8016afc <__smakebuf_r+0x18>
 8016b1e:	f023 0303 	bic.w	r3, r3, #3
 8016b22:	f043 0302 	orr.w	r3, r3, #2
 8016b26:	81a3      	strh	r3, [r4, #12]
 8016b28:	e7e2      	b.n	8016af0 <__smakebuf_r+0xc>
 8016b2a:	89a3      	ldrh	r3, [r4, #12]
 8016b2c:	6020      	str	r0, [r4, #0]
 8016b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016b32:	81a3      	strh	r3, [r4, #12]
 8016b34:	9b01      	ldr	r3, [sp, #4]
 8016b36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016b3a:	b15b      	cbz	r3, 8016b54 <__smakebuf_r+0x70>
 8016b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b40:	4630      	mov	r0, r6
 8016b42:	f000 f879 	bl	8016c38 <_isatty_r>
 8016b46:	b128      	cbz	r0, 8016b54 <__smakebuf_r+0x70>
 8016b48:	89a3      	ldrh	r3, [r4, #12]
 8016b4a:	f023 0303 	bic.w	r3, r3, #3
 8016b4e:	f043 0301 	orr.w	r3, r3, #1
 8016b52:	81a3      	strh	r3, [r4, #12]
 8016b54:	89a3      	ldrh	r3, [r4, #12]
 8016b56:	431d      	orrs	r5, r3
 8016b58:	81a5      	strh	r5, [r4, #12]
 8016b5a:	e7cf      	b.n	8016afc <__smakebuf_r+0x18>

08016b5c <_putc_r>:
 8016b5c:	b570      	push	{r4, r5, r6, lr}
 8016b5e:	460d      	mov	r5, r1
 8016b60:	4614      	mov	r4, r2
 8016b62:	4606      	mov	r6, r0
 8016b64:	b118      	cbz	r0, 8016b6e <_putc_r+0x12>
 8016b66:	6a03      	ldr	r3, [r0, #32]
 8016b68:	b90b      	cbnz	r3, 8016b6e <_putc_r+0x12>
 8016b6a:	f7fe ff59 	bl	8015a20 <__sinit>
 8016b6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b70:	07d8      	lsls	r0, r3, #31
 8016b72:	d405      	bmi.n	8016b80 <_putc_r+0x24>
 8016b74:	89a3      	ldrh	r3, [r4, #12]
 8016b76:	0599      	lsls	r1, r3, #22
 8016b78:	d402      	bmi.n	8016b80 <_putc_r+0x24>
 8016b7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b7c:	f7ff f9af 	bl	8015ede <__retarget_lock_acquire_recursive>
 8016b80:	68a3      	ldr	r3, [r4, #8]
 8016b82:	3b01      	subs	r3, #1
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	60a3      	str	r3, [r4, #8]
 8016b88:	da05      	bge.n	8016b96 <_putc_r+0x3a>
 8016b8a:	69a2      	ldr	r2, [r4, #24]
 8016b8c:	4293      	cmp	r3, r2
 8016b8e:	db12      	blt.n	8016bb6 <_putc_r+0x5a>
 8016b90:	b2eb      	uxtb	r3, r5
 8016b92:	2b0a      	cmp	r3, #10
 8016b94:	d00f      	beq.n	8016bb6 <_putc_r+0x5a>
 8016b96:	6823      	ldr	r3, [r4, #0]
 8016b98:	1c5a      	adds	r2, r3, #1
 8016b9a:	6022      	str	r2, [r4, #0]
 8016b9c:	701d      	strb	r5, [r3, #0]
 8016b9e:	b2ed      	uxtb	r5, r5
 8016ba0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016ba2:	07da      	lsls	r2, r3, #31
 8016ba4:	d405      	bmi.n	8016bb2 <_putc_r+0x56>
 8016ba6:	89a3      	ldrh	r3, [r4, #12]
 8016ba8:	059b      	lsls	r3, r3, #22
 8016baa:	d402      	bmi.n	8016bb2 <_putc_r+0x56>
 8016bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016bae:	f7ff f997 	bl	8015ee0 <__retarget_lock_release_recursive>
 8016bb2:	4628      	mov	r0, r5
 8016bb4:	bd70      	pop	{r4, r5, r6, pc}
 8016bb6:	4629      	mov	r1, r5
 8016bb8:	4622      	mov	r2, r4
 8016bba:	4630      	mov	r0, r6
 8016bbc:	f7ff f85a 	bl	8015c74 <__swbuf_r>
 8016bc0:	4605      	mov	r5, r0
 8016bc2:	e7ed      	b.n	8016ba0 <_putc_r+0x44>

08016bc4 <memmove>:
 8016bc4:	4288      	cmp	r0, r1
 8016bc6:	b510      	push	{r4, lr}
 8016bc8:	eb01 0402 	add.w	r4, r1, r2
 8016bcc:	d902      	bls.n	8016bd4 <memmove+0x10>
 8016bce:	4284      	cmp	r4, r0
 8016bd0:	4623      	mov	r3, r4
 8016bd2:	d807      	bhi.n	8016be4 <memmove+0x20>
 8016bd4:	1e43      	subs	r3, r0, #1
 8016bd6:	42a1      	cmp	r1, r4
 8016bd8:	d008      	beq.n	8016bec <memmove+0x28>
 8016bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016be2:	e7f8      	b.n	8016bd6 <memmove+0x12>
 8016be4:	4402      	add	r2, r0
 8016be6:	4601      	mov	r1, r0
 8016be8:	428a      	cmp	r2, r1
 8016bea:	d100      	bne.n	8016bee <memmove+0x2a>
 8016bec:	bd10      	pop	{r4, pc}
 8016bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016bf6:	e7f7      	b.n	8016be8 <memmove+0x24>

08016bf8 <strchr>:
 8016bf8:	b2c9      	uxtb	r1, r1
 8016bfa:	4603      	mov	r3, r0
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c02:	b112      	cbz	r2, 8016c0a <strchr+0x12>
 8016c04:	428a      	cmp	r2, r1
 8016c06:	d1f9      	bne.n	8016bfc <strchr+0x4>
 8016c08:	4770      	bx	lr
 8016c0a:	2900      	cmp	r1, #0
 8016c0c:	bf18      	it	ne
 8016c0e:	2000      	movne	r0, #0
 8016c10:	4770      	bx	lr
	...

08016c14 <_fstat_r>:
 8016c14:	b538      	push	{r3, r4, r5, lr}
 8016c16:	4d07      	ldr	r5, [pc, #28]	@ (8016c34 <_fstat_r+0x20>)
 8016c18:	2300      	movs	r3, #0
 8016c1a:	4604      	mov	r4, r0
 8016c1c:	4608      	mov	r0, r1
 8016c1e:	4611      	mov	r1, r2
 8016c20:	602b      	str	r3, [r5, #0]
 8016c22:	f7ed faee 	bl	8004202 <_fstat>
 8016c26:	1c43      	adds	r3, r0, #1
 8016c28:	d102      	bne.n	8016c30 <_fstat_r+0x1c>
 8016c2a:	682b      	ldr	r3, [r5, #0]
 8016c2c:	b103      	cbz	r3, 8016c30 <_fstat_r+0x1c>
 8016c2e:	6023      	str	r3, [r4, #0]
 8016c30:	bd38      	pop	{r3, r4, r5, pc}
 8016c32:	bf00      	nop
 8016c34:	20002c4c 	.word	0x20002c4c

08016c38 <_isatty_r>:
 8016c38:	b538      	push	{r3, r4, r5, lr}
 8016c3a:	4d06      	ldr	r5, [pc, #24]	@ (8016c54 <_isatty_r+0x1c>)
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	4604      	mov	r4, r0
 8016c40:	4608      	mov	r0, r1
 8016c42:	602b      	str	r3, [r5, #0]
 8016c44:	f7ed faed 	bl	8004222 <_isatty>
 8016c48:	1c43      	adds	r3, r0, #1
 8016c4a:	d102      	bne.n	8016c52 <_isatty_r+0x1a>
 8016c4c:	682b      	ldr	r3, [r5, #0]
 8016c4e:	b103      	cbz	r3, 8016c52 <_isatty_r+0x1a>
 8016c50:	6023      	str	r3, [r4, #0]
 8016c52:	bd38      	pop	{r3, r4, r5, pc}
 8016c54:	20002c4c 	.word	0x20002c4c

08016c58 <_sbrk_r>:
 8016c58:	b538      	push	{r3, r4, r5, lr}
 8016c5a:	4d06      	ldr	r5, [pc, #24]	@ (8016c74 <_sbrk_r+0x1c>)
 8016c5c:	2300      	movs	r3, #0
 8016c5e:	4604      	mov	r4, r0
 8016c60:	4608      	mov	r0, r1
 8016c62:	602b      	str	r3, [r5, #0]
 8016c64:	f7ed faf6 	bl	8004254 <_sbrk>
 8016c68:	1c43      	adds	r3, r0, #1
 8016c6a:	d102      	bne.n	8016c72 <_sbrk_r+0x1a>
 8016c6c:	682b      	ldr	r3, [r5, #0]
 8016c6e:	b103      	cbz	r3, 8016c72 <_sbrk_r+0x1a>
 8016c70:	6023      	str	r3, [r4, #0]
 8016c72:	bd38      	pop	{r3, r4, r5, pc}
 8016c74:	20002c4c 	.word	0x20002c4c

08016c78 <_realloc_r>:
 8016c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c7c:	4680      	mov	r8, r0
 8016c7e:	4615      	mov	r5, r2
 8016c80:	460c      	mov	r4, r1
 8016c82:	b921      	cbnz	r1, 8016c8e <_realloc_r+0x16>
 8016c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c88:	4611      	mov	r1, r2
 8016c8a:	f7ff b9a5 	b.w	8015fd8 <_malloc_r>
 8016c8e:	b92a      	cbnz	r2, 8016c9c <_realloc_r+0x24>
 8016c90:	f7ff f936 	bl	8015f00 <_free_r>
 8016c94:	2400      	movs	r4, #0
 8016c96:	4620      	mov	r0, r4
 8016c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016c9c:	f000 f81a 	bl	8016cd4 <_malloc_usable_size_r>
 8016ca0:	4285      	cmp	r5, r0
 8016ca2:	4606      	mov	r6, r0
 8016ca4:	d802      	bhi.n	8016cac <_realloc_r+0x34>
 8016ca6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016caa:	d8f4      	bhi.n	8016c96 <_realloc_r+0x1e>
 8016cac:	4629      	mov	r1, r5
 8016cae:	4640      	mov	r0, r8
 8016cb0:	f7ff f992 	bl	8015fd8 <_malloc_r>
 8016cb4:	4607      	mov	r7, r0
 8016cb6:	2800      	cmp	r0, #0
 8016cb8:	d0ec      	beq.n	8016c94 <_realloc_r+0x1c>
 8016cba:	42b5      	cmp	r5, r6
 8016cbc:	462a      	mov	r2, r5
 8016cbe:	4621      	mov	r1, r4
 8016cc0:	bf28      	it	cs
 8016cc2:	4632      	movcs	r2, r6
 8016cc4:	f7ff f90d 	bl	8015ee2 <memcpy>
 8016cc8:	4621      	mov	r1, r4
 8016cca:	4640      	mov	r0, r8
 8016ccc:	f7ff f918 	bl	8015f00 <_free_r>
 8016cd0:	463c      	mov	r4, r7
 8016cd2:	e7e0      	b.n	8016c96 <_realloc_r+0x1e>

08016cd4 <_malloc_usable_size_r>:
 8016cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016cd8:	1f18      	subs	r0, r3, #4
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	bfbc      	itt	lt
 8016cde:	580b      	ldrlt	r3, [r1, r0]
 8016ce0:	18c0      	addlt	r0, r0, r3
 8016ce2:	4770      	bx	lr

08016ce4 <_init>:
 8016ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ce6:	bf00      	nop
 8016ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cea:	bc08      	pop	{r3}
 8016cec:	469e      	mov	lr, r3
 8016cee:	4770      	bx	lr

08016cf0 <_fini>:
 8016cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cf2:	bf00      	nop
 8016cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cf6:	bc08      	pop	{r3}
 8016cf8:	469e      	mov	lr, r3
 8016cfa:	4770      	bx	lr
