
V4_DevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017c98  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002180  08017dd8  08017dd8  00018dd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019f58  08019f58  0001af58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019f60  08019f60  0001af60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019f64  08019f64  0001af64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000018c  20000008  08019f68  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000194  0801a0f4  0001b194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001cc  0801a129  0001b1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003494  200001e0  0801a13a  0001b1e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  20003674  0801a13a  0001b674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001cf57  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001d000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001d000  2**2
                  ALLOC
 14 .MB_MEM2      00001d73  200301e4  0801a13a  0001b1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00049564  00000000  00000000  0001cf87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a2e3  00000000  00000000  000664eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d88  00000000  00000000  000707d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002f36  00000000  00000000  00074558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ba61  00000000  00000000  0007748e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00051cad  00000000  00000000  000b2eef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001129a7  00000000  00000000  00104b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00217543  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010df8  00000000  00000000  00217588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007c  00000000  00000000  00228380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	08017dc0 	.word	0x08017dc0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	08017dc0 	.word	0x08017dc0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <ADS1293_Init>:
//  DESCRIPTION:
//  Configures the assigned interface to function as a SPI port and
//  initializes it.
//------------------------------------------------------------------------------
void ADS1293_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	ENABLE_RSTB_ADS;			// Reset ADS
 8000bd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bd8:	619a      	str	r2, [r3, #24]
	HAL_Delay (25);
 8000bda:	2019      	movs	r0, #25
 8000bdc:	f001 ffdc 	bl	8002b98 <HAL_Delay>
	DISABLE_RSTB_ADS;			// Release Reset pin
 8000be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be4:	2201      	movs	r2, #1
 8000be6:	619a      	str	r2, [r3, #24]
	HAL_Delay (100);
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f001 ffd5 	bl	8002b98 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_CONFIG_REG			, ADS_STOP );
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f885 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f001 ffce 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_OSC_CN_REG			, 0x04 );				// Use external crystal and feed the internal oscillator's output to the digital.
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	2012      	movs	r0, #18
 8000c00:	f000 f87e 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c04:	2019      	movs	r0, #25
 8000c06:	f001 ffc7 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH1_CN_REG	, 0x0A );				// CH1 is routed to: N = IN1 , P = IN2
 8000c0a:	210a      	movs	r1, #10
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 f877 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c12:	2019      	movs	r0, #25
 8000c14:	f001 ffc0 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH2_CN_REG	, 0x1C );				// CH1 is routed to: N = IN1 , P = IN2
 8000c18:	211c      	movs	r1, #28
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f000 f870 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c20:	2019      	movs	r0, #25
 8000c22:	f001 ffb9 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH3_CN_REG	, 0x2E );				// CH3 is routed to: N = IN6 , P = IN5   0x2E	0x35
 8000c26:	212e      	movs	r1, #46	@ 0x2e
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f869 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c2e:	2019      	movs	r0, #25
 8000c30:	f001 ffb2 	bl	8002b98 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_RLD_CN_REG			, 0x06 );				// 0x04: RLD amplifier powered down, 0x03: Right-leg drive output connected to IN3
 8000c34:	2106      	movs	r1, #6
 8000c36:	200c      	movs	r0, #12
 8000c38:	f000 f862 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c3c:	2019      	movs	r0, #25
 8000c3e:	f001 ffab 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CMDET_EN_REG		, 0x30 );				// 0x04: RLD amplifier powered down
 8000c42:	2130      	movs	r1, #48	@ 0x30
 8000c44:	200a      	movs	r0, #10
 8000c46:	f000 f85b 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f001 ffa4 	bl	8002b98 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_R2_RATE_REG		, R2_4 );				// Configures the R2 decimation rate as 5 for all channels.
 8000c50:	2101      	movs	r1, #1
 8000c52:	2021      	movs	r0, #33	@ 0x21
 8000c54:	f000 f854 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f001 ff9d 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE1_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 1. (853 sps, 175 Hz)
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2022      	movs	r0, #34	@ 0x22
 8000c62:	f000 f84d 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c66:	2019      	movs	r0, #25
 8000c68:	f001 ff96 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE2_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	2023      	movs	r0, #35	@ 0x23
 8000c70:	f000 f846 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c74:	2019      	movs	r0, #25
 8000c76:	f001 ff8f 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE3_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	2024      	movs	r0, #36	@ 0x24
 8000c7e:	f000 f83f 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c82:	2019      	movs	r0, #25
 8000c84:	f001 ff88 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_DRDYB_SRC_REG		, 0x08 );				// Data Ready Pin Source CH1 ECG 0x08
 8000c88:	2108      	movs	r1, #8
 8000c8a:	2027      	movs	r0, #39	@ 0x27
 8000c8c:	f000 f838 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c90:	2019      	movs	r0, #25
 8000c92:	f001 ff81 	bl	8002b98 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CH_CNFG_REG		, 0x70 );				// Channel for Loop Read Back: CH1
 8000c96:	2170      	movs	r1, #112	@ 0x70
 8000c98:	202f      	movs	r0, #47	@ 0x2f
 8000c9a:	f000 f831 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c9e:	2019      	movs	r0, #25
 8000ca0:	f001 ff7a 	bl	8002b98 <HAL_Delay>
	//ADS1293_SPIWriteReg( ADS1293_DIS_EFILTER_REG	, 0x05 );				// Channel for Loop Read Back: CH1 and CH2
	//HAL_Delay (25);

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <ADS1293_SPIReadReg>:
//  DESCRIPTION:
//  Reads a single configuration register at address "addr" and returns the
//  value read.
//------------------------------------------------------------------------------
uint8_t ADS1293_SPIReadReg(uint8_t addr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	TxData[0] = addr | ADS1293_READ_BIT;											// register address
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00;
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	705a      	strb	r2, [r3, #1]

	ENABLE_CS; 												// CS enable
 8000cc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ccc:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2,100);								// Send it, receive it
 8000cce:	2364      	movs	r3, #100	@ 0x64
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <ADS1293_SPIReadReg+0x50>)
 8000cd6:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cd8:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <ADS1293_SPIReadReg+0x54>)
 8000cda:	f009 fb96 	bl	800a40a <HAL_SPI_TransmitReceive>
	DISABLE_CS; 											// CS disable
 8000cde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	619a      	str	r2, [r3, #24]
#ifdef ADS_DEBUG_EN
	DIAG(">>> Read Reg. -> [ Address= %0X, Value= %0X ]\r\n", addr, RxData[1]);				// Send DBG
	HAL_Delay(50);
#endif

	return RxData[1];
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <ADS1293_SPIReadReg+0x50>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001fc 	.word	0x200001fc
 8000cf8:	20000208 	.word	0x20000208
 8000cfc:	20001730 	.word	0x20001730

08000d00 <ADS1293_SPIWriteReg>:
//
//  DESCRIPTION:
//  Writes "value" to a single configuration register at address "addr".
//------------------------------------------------------------------------------
void ADS1293_SPIWriteReg(uint8_t addr, uint8_t value)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
	TxData[0] = addr & ADS1293_WRITE_BIT;											// register address
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d1a:	701a      	strb	r2, [r3, #0]
	TxData[1] = value;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	7053      	strb	r3, [r2, #1]

	ENABLE_CS; 												// CS enable
 8000d22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d2a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, TxData, 2,100);						// Send it
 8000d2c:	2364      	movs	r3, #100	@ 0x64
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4905      	ldr	r1, [pc, #20]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <ADS1293_SPIWriteReg+0x4c>)
 8000d34:	f009 f9f3 	bl	800a11e <HAL_SPI_Transmit>
	DISABLE_CS; 											// CS disable
 8000d38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	619a      	str	r2, [r3, #24]
	#ifdef ADS_DEBUG_EN
		DIAG(">>>Write Reg. -> [ Address= %0X, Value= %0X ]\r\n",addr, value);				// Send DBG
		HAL_Delay(50);
	#endif

}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001fc 	.word	0x200001fc
 8000d4c:	20001730 	.word	0x20001730

08000d50 <ADS1293_SPIStreamReadReg>:
//  Data Loop Register read is extended "count+1" times where "count" is number of source bytes
//  enabled in CH_CNFG. Data read are deposited sequentially starting at address "buffer"
//  until "count" bytes have been read.
//------------------------------------------------------------------------------
void ADS1293_SPIStreamReadReg ( uint8_t *buffer, uint8_t count )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	TxData[0] = ADS1293_READ_BIT | ADS1293_DATA_LOOP_REG;											// register address
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d5e:	22d0      	movs	r2, #208	@ 0xd0
 8000d60:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00; TxData[2] = 0x00; TxData[3] = 0x00; TxData[4] = 0x00; TxData[5] = 0x00; TxData[6] = 0x00; TxData[7] = 0x00; TxData[8] = 0x00; TxData[9] = 0x00;	// write dummy data to read
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	709a      	strb	r2, [r3, #2]
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	70da      	strb	r2, [r3, #3]
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	715a      	strb	r2, [r3, #5]
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	719a      	strb	r2, [r3, #6]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	71da      	strb	r2, [r3, #7]
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	721a      	strb	r2, [r3, #8]
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	725a      	strb	r2, [r3, #9]

	ENABLE_CS; 																						// CS enable
 8000d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000da0:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, (uint8_t *)buffer, ( count + 1 ), 100);					// Send it, receive it
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2264      	movs	r2, #100	@ 0x64
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4905      	ldr	r1, [pc, #20]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <ADS1293_SPIStreamReadReg+0x7c>)
 8000db4:	f009 fb29 	bl	800a40a <HAL_SPI_TransmitReceive>
	DISABLE_CS;
 8000db8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	619a      	str	r2, [r3, #24]

	#ifdef ADS_DEBUG_EN
		DIAG(">>> Stream read. -> [ Address= %0X, Value= %0X - %0X - %0X - %0X - %0X - %0X ]\r\n", ADS1293_DATA_LOOP_REG, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[6] );				// Send DBG
		HAL_Delay(50);
	#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001fc 	.word	0x200001fc
 8000dcc:	20001730 	.word	0x20001730

08000dd0 <AFE_Init>:
 uint8_t SpiTxData[10], Temp_buff_count, Output_buff_count;
 //------------------------------------------------------------------------------------------//
 //                                        Initialisation                                    //
 //------------------------------------------------------------------------------------------//
 void AFE_Init (void)
 {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0


	 // Initialize filters
	 init_combined_filter(&combined_filter, 10.0, 100.0, 50.0);
 8000dd4:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8000df8 <AFE_Init+0x28>
 8000dd8:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8000e00 <AFE_Init+0x30>
 8000ddc:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8000e08 <AFE_Init+0x38>
 8000de0:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <AFE_Init+0x40>)
 8000de2:	f000 fda1 	bl	8001928 <init_combined_filter>

	 DIAG ("\t\tAFE initialised\r\n");
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <AFE_Init+0x44>)
 8000de8:	f001 ff72 	bl	8002cd0 <DIAG>
	 HAL_Delay (10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f001 fed3 	bl	8002b98 <HAL_Delay>
 }
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40490000 	.word	0x40490000
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40590000 	.word	0x40590000
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40240000 	.word	0x40240000
 8000e10:	20000de0 	.word	0x20000de0
 8000e14:	08017dd8 	.word	0x08017dd8

08000e18 <AFE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void AFE_Control ( void )
 {
 8000e18:	b598      	push	{r3, r4, r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
 	  switch (eAFE_STATE)
 8000e1c:	4b43      	ldr	r3, [pc, #268]	@ (8000f2c <AFE_Control+0x114>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d813      	bhi.n	8000e4c <AFE_Control+0x34>
 8000e24:	a201      	add	r2, pc, #4	@ (adr r2, 8000e2c <AFE_Control+0x14>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e55 	.word	0x08000e55
 8000e30:	08000e7b 	.word	0x08000e7b
 8000e34:	08000e87 	.word	0x08000e87
 8000e38:	08000ead 	.word	0x08000ead
 8000e3c:	08000ed1 	.word	0x08000ed1
 8000e40:	08000f49 	.word	0x08000f49
 8000e44:	08001439 	.word	0x08001439
 8000e48:	08001441 	.word	0x08001441
 	  	  default:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE STATE_DEFAULT\r\n");
 		  	  #endif

 	  	    eAFE_STATE = AFE_STATE_RESET;
 8000e4c:	4b37      	ldr	r3, [pc, #220]	@ (8000f2c <AFE_Control+0x114>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 	  		break;
 8000e52:	e2f9      	b.n	8001448 <AFE_Control+0x630>

 	  	  case AFE_STATE_RESET:
 			  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_RESET\r\n");
 			  #endif
 	  		  ENABLE_RSTB_ADS; 											// Pull RESET low
 8000e54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e5c:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(5); 											// Wait for a brief period
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f001 fe9a 	bl	8002b98 <HAL_Delay>
 	  		  DISABLE_RSTB_ADS; 										// Release RESET
 8000e64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e68:	2201      	movs	r2, #1
 8000e6a:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(25); 											// Wait for a brief period
 8000e6c:	2019      	movs	r0, #25
 8000e6e:	f001 fe93 	bl	8002b98 <HAL_Delay>

 	  	      eAFE_STATE = AFE_STATE_INIT;
 8000e72:	4b2e      	ldr	r3, [pc, #184]	@ (8000f2c <AFE_Control+0x114>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000e78:	e2e6      	b.n	8001448 <AFE_Control+0x630>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_INIT:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_INIT\r\n");
 			  #endif
 		  	  ADS1293_Init();
 8000e7a:	f7ff fea7 	bl	8000bcc <ADS1293_Init>

 		  	  eAFE_STATE = AFE_STATE_ID;
 8000e7e:	4b2b      	ldr	r3, [pc, #172]	@ (8000f2c <AFE_Control+0x114>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000e84:	e2e0      	b.n	8001448 <AFE_Control+0x630>
 	  	  case AFE_STATE_ID:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_READ_DEVICE_ID\r\n");
 			  #endif

 	  		  u8temp = ADS1293_SPIReadReg(ADS1293_REVID_REG);
 8000e86:	2040      	movs	r0, #64	@ 0x40
 8000e88:	f7ff ff0e 	bl	8000ca8 <ADS1293_SPIReadReg>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <AFE_Control+0x118>)
 8000e92:	701a      	strb	r2, [r3, #0]
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> DEVICE_ID = [%X] \r\n", u8temp );
 	  		  	  HAL_Delay(1000);
        	  #endif

 	  		  if ( u8temp == ADS1293_ID )
 8000e94:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <AFE_Control+0x118>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d103      	bne.n	8000ea4 <AFE_Control+0x8c>
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_START ;		//ADS_STATE_START ADS_STATE_ID
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <AFE_Control+0x114>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	701a      	strb	r2, [r3, #0]
 	  		  else
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 	  		  }

 	  		  break;
 8000ea2:	e2d1      	b.n	8001448 <AFE_Control+0x630>
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 8000ea4:	4b21      	ldr	r3, [pc, #132]	@ (8000f2c <AFE_Control+0x114>)
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000eaa:	e2cd      	b.n	8001448 <AFE_Control+0x630>
 	  	  case AFE_STATE_START:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> AFE_START_CONVERSION\r\n");
 			  #endif

 		  	  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff26 	bl	8000d00 <ADS1293_SPIWriteReg>
 		  	  HAL_Delay(50);
 8000eb4:	2032      	movs	r0, #50	@ 0x32
 8000eb6:	f001 fe6f 	bl	8002b98 <HAL_Delay>
 	  		  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff ff1f 	bl	8000d00 <ADS1293_SPIWriteReg>
 	  		  HAL_Delay(50);
 8000ec2:	2032      	movs	r0, #50	@ 0x32
 8000ec4:	f001 fe68 	bl	8002b98 <HAL_Delay>

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <AFE_Control+0x114>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ece:	e2bb      	b.n	8001448 <AFE_Control+0x630>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_READ_DATA:


 	  		  // Check if DRDY pin is triggered, then start reading data.
 	  		  if (ADS.DRDY == true)
 8000ed0:	4b18      	ldr	r3, [pc, #96]	@ (8000f34 <AFE_Control+0x11c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d124      	bne.n	8000f24 <AFE_Control+0x10c>
 	  		  {
				 #ifdef AFE_DEBUG_EN
						  DIAG(">>> AFE_READ_DATA\r\n");
				 #endif
				// Each time we sample from AFE, sample forom IMU too
 	  			  tsTimer.bImuFlag = true;
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <AFE_Control+0x120>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	70da      	strb	r2, [r3, #3]

 	  			  ADS.DRDY = false;
 8000ee0:	4b14      	ldr	r3, [pc, #80]	@ (8000f34 <AFE_Control+0x11c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 	  			  ADS1293_SPIStreamReadReg( SpiRxData, 9 );
 8000ee6:	2109      	movs	r1, #9
 8000ee8:	4814      	ldr	r0, [pc, #80]	@ (8000f3c <AFE_Control+0x124>)
 8000eea:	f7ff ff31 	bl	8000d50 <ADS1293_SPIStreamReadReg>

 	  			  // Count SPS
// 	  			  AFE.u16SampleCount++;

 	  			num_samples++;
 8000eee:	4b14      	ldr	r3, [pc, #80]	@ (8000f40 <AFE_Control+0x128>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a12      	ldr	r2, [pc, #72]	@ (8000f40 <AFE_Control+0x128>)
 8000ef6:	6013      	str	r3, [r2, #0]
 	  			  if ( num_samples > 5)
 8000ef8:	4b11      	ldr	r3, [pc, #68]	@ (8000f40 <AFE_Control+0x128>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	dd0d      	ble.n	8000f1c <AFE_Control+0x104>
 	  			  {
 	 	  			  // Count SPS
 	 	  			  AFE.u16SampleCount++;
 8000f00:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <AFE_Control+0x12c>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <AFE_Control+0x12c>)
 8000f0c:	801a      	strh	r2, [r3, #0]
 	  				num_samples = 0;
 8000f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <AFE_Control+0x128>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 	  			  eAFE_STATE = AFE_STATE_PROCESS_DATA;
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <AFE_Control+0x114>)
 8000f16:	2205      	movs	r2, #5
 8000f18:	701a      	strb	r2, [r3, #0]
 	  		  }
 	  		  else
 	  		  {
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 	  		  }
 	  		  break;
 8000f1a:	e295      	b.n	8001448 <AFE_Control+0x630>
 	  				eAFE_STATE = AFE_STATE_READ_DATA;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	@ (8000f2c <AFE_Control+0x114>)
 8000f1e:	2204      	movs	r2, #4
 8000f20:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000f22:	e291      	b.n	8001448 <AFE_Control+0x630>
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 8000f24:	4b01      	ldr	r3, [pc, #4]	@ (8000f2c <AFE_Control+0x114>)
 8000f26:	2204      	movs	r2, #4
 8000f28:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000f2a:	e28d      	b.n	8001448 <AFE_Control+0x630>
 8000f2c:	20000212 	.word	0x20000212
 8000f30:	20000e70 	.word	0x20000e70
 8000f34:	20000214 	.word	0x20000214
 8000f38:	20001924 	.word	0x20001924
 8000f3c:	20000e74 	.word	0x20000e74
 8000f40:	20000008 	.word	0x20000008
 8000f44:	2000193c 	.word	0x2000193c
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_PROCESS_DATA:

 	  		  TMR1.Input = (int32_t)( (SpiRxData[1] << 16) | (uint16_t)(SpiRxData[2] << 8) | SpiRxData[3]);
 8000f48:	4bc3      	ldr	r3, [pc, #780]	@ (8001258 <AFE_Control+0x440>)
 8000f4a:	785b      	ldrb	r3, [r3, #1]
 8000f4c:	041b      	lsls	r3, r3, #16
 8000f4e:	4ac2      	ldr	r2, [pc, #776]	@ (8001258 <AFE_Control+0x440>)
 8000f50:	7892      	ldrb	r2, [r2, #2]
 8000f52:	0212      	lsls	r2, r2, #8
 8000f54:	b292      	uxth	r2, r2
 8000f56:	4313      	orrs	r3, r2
 8000f58:	4abf      	ldr	r2, [pc, #764]	@ (8001258 <AFE_Control+0x440>)
 8000f5a:	78d2      	ldrb	r2, [r2, #3]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	4abf      	ldr	r2, [pc, #764]	@ (800125c <AFE_Control+0x444>)
 8000f60:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  TMR1.Vin = ( 2.4 * ( ( (2.0 * (double)TMR1.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8000f64:	4bbd      	ldr	r3, [pc, #756]	@ (800125c <AFE_Control+0x444>)
 8000f66:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fab2 	bl	80004d4 <__aeabi_i2d>
 8000f70:	4602      	mov	r2, r0
 8000f72:	460b      	mov	r3, r1
 8000f74:	f7ff f962 	bl	800023c <__adddf3>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	a3b1      	add	r3, pc, #708	@ (adr r3, 8001248 <AFE_Control+0x430>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fc39 	bl	80007fc <__aeabi_ddiv>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	4bb2      	ldr	r3, [pc, #712]	@ (8001260 <AFE_Control+0x448>)
 8000f98:	f7ff f94e 	bl	8000238 <__aeabi_dsub>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	a3aa      	add	r3, pc, #680	@ (adr r3, 8001250 <AFE_Control+0x438>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff fafd 	bl	80005a8 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	4baa      	ldr	r3, [pc, #680]	@ (8001264 <AFE_Control+0x44c>)
 8000fbc:	f7ff fc1e 	bl	80007fc <__aeabi_ddiv>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f7ff fdb0 	bl	8000b2c <__aeabi_d2f>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	4aa3      	ldr	r2, [pc, #652]	@ (800125c <AFE_Control+0x444>)
 8000fd0:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  TMR1.Raw[Temp_buff_count] = (int)(TMR1.Vin * 1000000);
 8000fd4:	4ba1      	ldr	r3, [pc, #644]	@ (800125c <AFE_Control+0x444>)
 8000fd6:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8000fda:	ed9f 7aa3 	vldr	s14, [pc, #652]	@ 8001268 <AFE_Control+0x450>
 8000fde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fe2:	4ba2      	ldr	r3, [pc, #648]	@ (800126c <AFE_Control+0x454>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fec:	ee17 1a90 	vmov	r1, s15
 8000ff0:	4b9a      	ldr	r3, [pc, #616]	@ (800125c <AFE_Control+0x444>)
 8000ff2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  TMR2.Input = (int32_t)( (SpiRxData[4] << 16) | (uint16_t)(SpiRxData[5] << 8) | SpiRxData[6]);
 8000ff6:	4b98      	ldr	r3, [pc, #608]	@ (8001258 <AFE_Control+0x440>)
 8000ff8:	791b      	ldrb	r3, [r3, #4]
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	4a96      	ldr	r2, [pc, #600]	@ (8001258 <AFE_Control+0x440>)
 8000ffe:	7952      	ldrb	r2, [r2, #5]
 8001000:	0212      	lsls	r2, r2, #8
 8001002:	b292      	uxth	r2, r2
 8001004:	4313      	orrs	r3, r2
 8001006:	4a94      	ldr	r2, [pc, #592]	@ (8001258 <AFE_Control+0x440>)
 8001008:	7992      	ldrb	r2, [r2, #6]
 800100a:	4313      	orrs	r3, r2
 800100c:	4a98      	ldr	r2, [pc, #608]	@ (8001270 <AFE_Control+0x458>)
 800100e:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  TMR2.Vin = ( 2.4 * ( ( (2.0 * (double)TMR2.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8001012:	4b97      	ldr	r3, [pc, #604]	@ (8001270 <AFE_Control+0x458>)
 8001014:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fa5b 	bl	80004d4 <__aeabi_i2d>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	f7ff f90b 	bl	800023c <__adddf3>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	a386      	add	r3, pc, #536	@ (adr r3, 8001248 <AFE_Control+0x430>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fbe2 	bl	80007fc <__aeabi_ddiv>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b86      	ldr	r3, [pc, #536]	@ (8001260 <AFE_Control+0x448>)
 8001046:	f7ff f8f7 	bl	8000238 <__aeabi_dsub>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	a37f      	add	r3, pc, #508	@ (adr r3, 8001250 <AFE_Control+0x438>)
 8001054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001058:	f7ff faa6 	bl	80005a8 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4610      	mov	r0, r2
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	4b7e      	ldr	r3, [pc, #504]	@ (8001264 <AFE_Control+0x44c>)
 800106a:	f7ff fbc7 	bl	80007fc <__aeabi_ddiv>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	4610      	mov	r0, r2
 8001074:	4619      	mov	r1, r3
 8001076:	f7ff fd59 	bl	8000b2c <__aeabi_d2f>
 800107a:	4603      	mov	r3, r0
 800107c:	4a7c      	ldr	r2, [pc, #496]	@ (8001270 <AFE_Control+0x458>)
 800107e:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  TMR2.Raw[Temp_buff_count] = (int)(TMR2.Vin * 1000000);
 8001082:	4b7b      	ldr	r3, [pc, #492]	@ (8001270 <AFE_Control+0x458>)
 8001084:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8001088:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001268 <AFE_Control+0x450>
 800108c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001090:	4b76      	ldr	r3, [pc, #472]	@ (800126c <AFE_Control+0x454>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800109a:	ee17 1a90 	vmov	r1, s15
 800109e:	4b74      	ldr	r3, [pc, #464]	@ (8001270 <AFE_Control+0x458>)
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  EMG.Input = (int32_t)( (SpiRxData[7] << 16) | (uint16_t)(SpiRxData[8] << 8) | SpiRxData[9]);
 80010a4:	4b6c      	ldr	r3, [pc, #432]	@ (8001258 <AFE_Control+0x440>)
 80010a6:	79db      	ldrb	r3, [r3, #7]
 80010a8:	041b      	lsls	r3, r3, #16
 80010aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001258 <AFE_Control+0x440>)
 80010ac:	7a12      	ldrb	r2, [r2, #8]
 80010ae:	0212      	lsls	r2, r2, #8
 80010b0:	b292      	uxth	r2, r2
 80010b2:	4313      	orrs	r3, r2
 80010b4:	4a68      	ldr	r2, [pc, #416]	@ (8001258 <AFE_Control+0x440>)
 80010b6:	7a52      	ldrb	r2, [r2, #9]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001274 <AFE_Control+0x45c>)
 80010bc:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  EMG.Vin = ( 2.4 * ( ( (2.0 * (double)EMG.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 80010c0:	4b6c      	ldr	r3, [pc, #432]	@ (8001274 <AFE_Control+0x45c>)
 80010c2:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa04 	bl	80004d4 <__aeabi_i2d>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	f7ff f8b4 	bl	800023c <__adddf3>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	a35a      	add	r3, pc, #360	@ (adr r3, 8001248 <AFE_Control+0x430>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fb8b 	bl	80007fc <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001260 <AFE_Control+0x448>)
 80010f4:	f7ff f8a0 	bl	8000238 <__aeabi_dsub>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	a353      	add	r3, pc, #332	@ (adr r3, 8001250 <AFE_Control+0x438>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa4f 	bl	80005a8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b53      	ldr	r3, [pc, #332]	@ (8001264 <AFE_Control+0x44c>)
 8001118:	f7ff fb70 	bl	80007fc <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd02 	bl	8000b2c <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
 800112a:	4a52      	ldr	r2, [pc, #328]	@ (8001274 <AFE_Control+0x45c>)
 800112c:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  EMG.Raw[Temp_buff_count] = (int)(EMG.Vin * 1000000);
 8001130:	4b50      	ldr	r3, [pc, #320]	@ (8001274 <AFE_Control+0x45c>)
 8001132:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8001136:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8001268 <AFE_Control+0x450>
 800113a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800113e:	4b4b      	ldr	r3, [pc, #300]	@ (800126c <AFE_Control+0x454>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001148:	ee17 1a90 	vmov	r1, s15
 800114c:	4b49      	ldr	r3, [pc, #292]	@ (8001274 <AFE_Control+0x45c>)
 800114e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
// 	  		  TMR2.Filtered [Temp_buff_count] = apply_combined_filter(&combined_filter, TMR2.Raw[Temp_buff_count]);
// 	  		  // Apply Bandpass filter
// 	  		  EMG.Filtered  [Temp_buff_count] = apply_combined_filter(&combined_filter, EMG.Raw[Temp_buff_count]);


 	  		  TMR1.Filtered [Temp_buff_count] = IIR_AFE ( &TMR1, Temp_buff_count);
 8001152:	4b46      	ldr	r3, [pc, #280]	@ (800126c <AFE_Control+0x454>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	4a45      	ldr	r2, [pc, #276]	@ (800126c <AFE_Control+0x454>)
 8001158:	7812      	ldrb	r2, [r2, #0]
 800115a:	4614      	mov	r4, r2
 800115c:	4619      	mov	r1, r3
 800115e:	483f      	ldr	r0, [pc, #252]	@ (800125c <AFE_Control+0x444>)
 8001160:	f000 fd24 	bl	8001bac <IIR_AFE>
 8001164:	4602      	mov	r2, r0
 8001166:	493d      	ldr	r1, [pc, #244]	@ (800125c <AFE_Control+0x444>)
 8001168:	f104 0318 	add.w	r3, r4, #24
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	440b      	add	r3, r1
 8001170:	605a      	str	r2, [r3, #4]
 	  		  TMR2.Filtered [Temp_buff_count] = IIR_AFE ( &TMR2, Temp_buff_count);
 8001172:	4b3e      	ldr	r3, [pc, #248]	@ (800126c <AFE_Control+0x454>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4a3d      	ldr	r2, [pc, #244]	@ (800126c <AFE_Control+0x454>)
 8001178:	7812      	ldrb	r2, [r2, #0]
 800117a:	4614      	mov	r4, r2
 800117c:	4619      	mov	r1, r3
 800117e:	483c      	ldr	r0, [pc, #240]	@ (8001270 <AFE_Control+0x458>)
 8001180:	f000 fd14 	bl	8001bac <IIR_AFE>
 8001184:	4602      	mov	r2, r0
 8001186:	493a      	ldr	r1, [pc, #232]	@ (8001270 <AFE_Control+0x458>)
 8001188:	f104 0318 	add.w	r3, r4, #24
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	440b      	add	r3, r1
 8001190:	605a      	str	r2, [r3, #4]
 	  		  EMG.Filtered  [Temp_buff_count] = IIR_AFE ( &EMG, Temp_buff_count);
 8001192:	4b36      	ldr	r3, [pc, #216]	@ (800126c <AFE_Control+0x454>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	4a35      	ldr	r2, [pc, #212]	@ (800126c <AFE_Control+0x454>)
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	4614      	mov	r4, r2
 800119c:	4619      	mov	r1, r3
 800119e:	4835      	ldr	r0, [pc, #212]	@ (8001274 <AFE_Control+0x45c>)
 80011a0:	f000 fd04 	bl	8001bac <IIR_AFE>
 80011a4:	4602      	mov	r2, r0
 80011a6:	4933      	ldr	r1, [pc, #204]	@ (8001274 <AFE_Control+0x45c>)
 80011a8:	f104 0318 	add.w	r3, r4, #24
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	605a      	str	r2, [r3, #4]





 	  		  TMR1.u8TxData[u8TMR1DataLen++] 	= ( (  		  TMR1.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 80011b2:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <AFE_Control+0x454>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4a29      	ldr	r2, [pc, #164]	@ (800125c <AFE_Control+0x444>)
 80011b8:	3318      	adds	r3, #24
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	1218      	asrs	r0, r3, #8
 80011c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001278 <AFE_Control+0x460>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	b2d1      	uxtb	r1, r2
 80011ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001278 <AFE_Control+0x460>)
 80011cc:	7011      	strb	r1, [r2, #0]
 80011ce:	4619      	mov	r1, r3
 80011d0:	b2c2      	uxtb	r2, r0
 80011d2:	4b22      	ldr	r3, [pc, #136]	@ (800125c <AFE_Control+0x444>)
 80011d4:	440b      	add	r3, r1
 80011d6:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  TMR1.u8TxData[u8TMR1DataLen++] 	= ( (uint8_t) TMR1.Filtered [Temp_buff_count] & 0x00FF );
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <AFE_Control+0x454>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4a1f      	ldr	r2, [pc, #124]	@ (800125c <AFE_Control+0x444>)
 80011e0:	3318      	adds	r3, #24
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <AFE_Control+0x460>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	b2d1      	uxtb	r1, r2
 80011f0:	4a21      	ldr	r2, [pc, #132]	@ (8001278 <AFE_Control+0x460>)
 80011f2:	7011      	strb	r1, [r2, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	b2c2      	uxtb	r2, r0
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <AFE_Control+0x444>)
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 	  		  TMR2.u8TxData[u8TMR2DataLen++]   	= ( (  		  TMR2.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 8001200:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <AFE_Control+0x454>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4a1a      	ldr	r2, [pc, #104]	@ (8001270 <AFE_Control+0x458>)
 8001206:	3318      	adds	r3, #24
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	1218      	asrs	r0, r3, #8
 8001210:	4b1a      	ldr	r3, [pc, #104]	@ (800127c <AFE_Control+0x464>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	1c5a      	adds	r2, r3, #1
 8001216:	b2d1      	uxtb	r1, r2
 8001218:	4a18      	ldr	r2, [pc, #96]	@ (800127c <AFE_Control+0x464>)
 800121a:	7011      	strb	r1, [r2, #0]
 800121c:	4619      	mov	r1, r3
 800121e:	b2c2      	uxtb	r2, r0
 8001220:	4b13      	ldr	r3, [pc, #76]	@ (8001270 <AFE_Control+0x458>)
 8001222:	440b      	add	r3, r1
 8001224:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  TMR2.u8TxData[u8TMR2DataLen++]   	= ( (uint8_t) TMR2.Filtered [Temp_buff_count] & 0x00FF );
 8001228:	4b10      	ldr	r3, [pc, #64]	@ (800126c <AFE_Control+0x454>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4a10      	ldr	r2, [pc, #64]	@ (8001270 <AFE_Control+0x458>)
 800122e:	3318      	adds	r3, #24
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	4413      	add	r3, r2
 8001234:	6858      	ldr	r0, [r3, #4]
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <AFE_Control+0x464>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	1c5a      	adds	r2, r3, #1
 800123c:	b2d1      	uxtb	r1, r2
 800123e:	4a0f      	ldr	r2, [pc, #60]	@ (800127c <AFE_Control+0x464>)
 8001240:	7011      	strb	r1, [r2, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	e01c      	b.n	8001280 <AFE_Control+0x468>
 8001246:	bf00      	nop
 8001248:	00000000 	.word	0x00000000
 800124c:	41686a00 	.word	0x41686a00
 8001250:	33333333 	.word	0x33333333
 8001254:	40033333 	.word	0x40033333
 8001258:	20000e74 	.word	0x20000e74
 800125c:	20000218 	.word	0x20000218
 8001260:	3ff00000 	.word	0x3ff00000
 8001264:	400c0000 	.word	0x400c0000
 8001268:	49742400 	.word	0x49742400
 800126c:	20000e7e 	.word	0x20000e7e
 8001270:	2000051c 	.word	0x2000051c
 8001274:	20000820 	.word	0x20000820
 8001278:	20000e71 	.word	0x20000e71
 800127c:	20000e72 	.word	0x20000e72
 8001280:	b2c2      	uxtb	r2, r0
 8001282:	4b72      	ldr	r3, [pc, #456]	@ (800144c <AFE_Control+0x634>)
 8001284:	440b      	add	r3, r1
 8001286:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 	  		  EMG.u8TxData [u8EMGDataLen++]    	= ( (  		  EMG.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 800128a:	4b71      	ldr	r3, [pc, #452]	@ (8001450 <AFE_Control+0x638>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	4a71      	ldr	r2, [pc, #452]	@ (8001454 <AFE_Control+0x63c>)
 8001290:	3318      	adds	r3, #24
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	4413      	add	r3, r2
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	1218      	asrs	r0, r3, #8
 800129a:	4b6f      	ldr	r3, [pc, #444]	@ (8001458 <AFE_Control+0x640>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	b2d1      	uxtb	r1, r2
 80012a2:	4a6d      	ldr	r2, [pc, #436]	@ (8001458 <AFE_Control+0x640>)
 80012a4:	7011      	strb	r1, [r2, #0]
 80012a6:	4619      	mov	r1, r3
 80012a8:	b2c2      	uxtb	r2, r0
 80012aa:	4b6a      	ldr	r3, [pc, #424]	@ (8001454 <AFE_Control+0x63c>)
 80012ac:	440b      	add	r3, r1
 80012ae:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  EMG.u8TxData [u8EMGDataLen++]    	= ( (uint8_t) EMG.Filtered [Temp_buff_count] & 0x00FF );
 80012b2:	4b67      	ldr	r3, [pc, #412]	@ (8001450 <AFE_Control+0x638>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4a67      	ldr	r2, [pc, #412]	@ (8001454 <AFE_Control+0x63c>)
 80012b8:	3318      	adds	r3, #24
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	6858      	ldr	r0, [r3, #4]
 80012c0:	4b65      	ldr	r3, [pc, #404]	@ (8001458 <AFE_Control+0x640>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	1c5a      	adds	r2, r3, #1
 80012c6:	b2d1      	uxtb	r1, r2
 80012c8:	4a63      	ldr	r2, [pc, #396]	@ (8001458 <AFE_Control+0x640>)
 80012ca:	7011      	strb	r1, [r2, #0]
 80012cc:	4619      	mov	r1, r3
 80012ce:	b2c2      	uxtb	r2, r0
 80012d0:	4b60      	ldr	r3, [pc, #384]	@ (8001454 <AFE_Control+0x63c>)
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 			  #ifdef DATA_DEBUG_EN
 				  if (tsCmd.TMR == true && tsCmd.EMG == true)
 80012d8:	4b60      	ldr	r3, [pc, #384]	@ (800145c <AFE_Control+0x644>)
 80012da:	7e1b      	ldrb	r3, [r3, #24]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d125      	bne.n	800132c <AFE_Control+0x514>
 80012e0:	4b5e      	ldr	r3, [pc, #376]	@ (800145c <AFE_Control+0x644>)
 80012e2:	7edb      	ldrb	r3, [r3, #27]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d121      	bne.n	800132c <AFE_Control+0x514>
 				  {
 					 tsDebug.i16TxTMR1 = TMR1.Filtered [Temp_buff_count];
 80012e8:	4b59      	ldr	r3, [pc, #356]	@ (8001450 <AFE_Control+0x638>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4a5c      	ldr	r2, [pc, #368]	@ (8001460 <AFE_Control+0x648>)
 80012ee:	3318      	adds	r3, #24
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	b21a      	sxth	r2, r3
 80012f8:	4b5a      	ldr	r3, [pc, #360]	@ (8001464 <AFE_Control+0x64c>)
 80012fa:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
 					 tsDebug.i16TxTMR2 = TMR2.Filtered [Temp_buff_count];
 80012fe:	4b54      	ldr	r3, [pc, #336]	@ (8001450 <AFE_Control+0x638>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	4a52      	ldr	r2, [pc, #328]	@ (800144c <AFE_Control+0x634>)
 8001304:	3318      	adds	r3, #24
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b55      	ldr	r3, [pc, #340]	@ (8001464 <AFE_Control+0x64c>)
 8001310:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 					 tsDebug.i16TxEMG  = EMG.Filtered  [Temp_buff_count];
 8001314:	4b4e      	ldr	r3, [pc, #312]	@ (8001450 <AFE_Control+0x638>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4a4e      	ldr	r2, [pc, #312]	@ (8001454 <AFE_Control+0x63c>)
 800131a:	3318      	adds	r3, #24
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b4f      	ldr	r3, [pc, #316]	@ (8001464 <AFE_Control+0x64c>)
 8001326:	f8a3 2264 	strh.w	r2, [r3, #612]	@ 0x264
 800132a:	e03d      	b.n	80013a8 <AFE_Control+0x590>
 				  }
 				  else if (tsCmd.TMR == true && tsCmd.EMG == false )
 800132c:	4b4b      	ldr	r3, [pc, #300]	@ (800145c <AFE_Control+0x644>)
 800132e:	7e1b      	ldrb	r3, [r3, #24]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d11e      	bne.n	8001372 <AFE_Control+0x55a>
 8001334:	4b49      	ldr	r3, [pc, #292]	@ (800145c <AFE_Control+0x644>)
 8001336:	7edb      	ldrb	r3, [r3, #27]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d11a      	bne.n	8001372 <AFE_Control+0x55a>
 				  {
  					 tsDebug.i16TxTMR1 = TMR1.Filtered [Temp_buff_count];
 800133c:	4b44      	ldr	r3, [pc, #272]	@ (8001450 <AFE_Control+0x638>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4a47      	ldr	r2, [pc, #284]	@ (8001460 <AFE_Control+0x648>)
 8001342:	3318      	adds	r3, #24
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	b21a      	sxth	r2, r3
 800134c:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <AFE_Control+0x64c>)
 800134e:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
  					 tsDebug.i16TxTMR2 = TMR2.Filtered [Temp_buff_count];
 8001352:	4b3f      	ldr	r3, [pc, #252]	@ (8001450 <AFE_Control+0x638>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	4a3d      	ldr	r2, [pc, #244]	@ (800144c <AFE_Control+0x634>)
 8001358:	3318      	adds	r3, #24
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	b21a      	sxth	r2, r3
 8001362:	4b40      	ldr	r3, [pc, #256]	@ (8001464 <AFE_Control+0x64c>)
 8001364:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxEMG  = 0x00;
 8001368:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <AFE_Control+0x64c>)
 800136a:	2200      	movs	r2, #0
 800136c:	f8a3 2264 	strh.w	r2, [r3, #612]	@ 0x264
 8001370:	e01a      	b.n	80013a8 <AFE_Control+0x590>
 				  }

 				  else if (tsCmd.TMR == false && tsCmd.EMG == true )
 8001372:	4b3a      	ldr	r3, [pc, #232]	@ (800145c <AFE_Control+0x644>)
 8001374:	7e1b      	ldrb	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <AFE_Control+0x590>
 800137a:	4b38      	ldr	r3, [pc, #224]	@ (800145c <AFE_Control+0x644>)
 800137c:	7edb      	ldrb	r3, [r3, #27]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d112      	bne.n	80013a8 <AFE_Control+0x590>
 				  {
  					 tsDebug.i16TxTMR1 = 0x00;
 8001382:	4b38      	ldr	r3, [pc, #224]	@ (8001464 <AFE_Control+0x64c>)
 8001384:	2200      	movs	r2, #0
 8001386:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
  					 tsDebug.i16TxTMR2 = 0x00;
 800138a:	4b36      	ldr	r3, [pc, #216]	@ (8001464 <AFE_Control+0x64c>)
 800138c:	2200      	movs	r2, #0
 800138e:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxEMG  = EMG.Filtered [Temp_buff_count];
 8001392:	4b2f      	ldr	r3, [pc, #188]	@ (8001450 <AFE_Control+0x638>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <AFE_Control+0x63c>)
 8001398:	3318      	adds	r3, #24
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b30      	ldr	r3, [pc, #192]	@ (8001464 <AFE_Control+0x64c>)
 80013a4:	f8a3 2264 	strh.w	r2, [r3, #612]	@ 0x264
 				  }
 				 tsDebug.bReleaseAFEData= true;
 80013a8:	4b2e      	ldr	r3, [pc, #184]	@ (8001464 <AFE_Control+0x64c>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 2266 	strb.w	r2, [r3, #614]	@ 0x266
 			  #endif


	  		  Temp_buff_count++;		if (Temp_buff_count  ==  Temp_BUF_LEN ) 	{ Temp_buff_count = 0; }
 80013b0:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <AFE_Control+0x638>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b25      	ldr	r3, [pc, #148]	@ (8001450 <AFE_Control+0x638>)
 80013ba:	701a      	strb	r2, [r3, #0]
 80013bc:	4b24      	ldr	r3, [pc, #144]	@ (8001450 <AFE_Control+0x638>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b19      	cmp	r3, #25
 80013c2:	d102      	bne.n	80013ca <AFE_Control+0x5b2>
 80013c4:	4b22      	ldr	r3, [pc, #136]	@ (8001450 <AFE_Control+0x638>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	701a      	strb	r2, [r3, #0]

 	  		if ( u8TMR1DataLen >=  BLE_Data_Length )
 80013ca:	4b27      	ldr	r3, [pc, #156]	@ (8001468 <AFE_Control+0x650>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80013d0:	d92e      	bls.n	8001430 <AFE_Control+0x618>
 	  		{
 	  			memcpy ( tsStreamAFE.u8TMR1TxCpy, TMR1.u8TxData, 64 );
 80013d2:	2240      	movs	r2, #64	@ 0x40
 80013d4:	4925      	ldr	r1, [pc, #148]	@ (800146c <AFE_Control+0x654>)
 80013d6:	4826      	ldr	r0, [pc, #152]	@ (8001470 <AFE_Control+0x658>)
 80013d8:	f014 fdc1 	bl	8015f5e <memcpy>
 	  			memcpy ( tsStreamAFE.u8TMR2TxCpy, TMR2.u8TxData, 64 );
 80013dc:	2240      	movs	r2, #64	@ 0x40
 80013de:	4925      	ldr	r1, [pc, #148]	@ (8001474 <AFE_Control+0x65c>)
 80013e0:	4825      	ldr	r0, [pc, #148]	@ (8001478 <AFE_Control+0x660>)
 80013e2:	f014 fdbc 	bl	8015f5e <memcpy>
 	  			memcpy ( tsStreamAFE.u8EMGTxCpy, EMG.u8TxData, 64 );
 80013e6:	2240      	movs	r2, #64	@ 0x40
 80013e8:	4924      	ldr	r1, [pc, #144]	@ (800147c <AFE_Control+0x664>)
 80013ea:	4825      	ldr	r0, [pc, #148]	@ (8001480 <AFE_Control+0x668>)
 80013ec:	f014 fdb7 	bl	8015f5e <memcpy>


 	  			// Copy TMR data length
 	  			TMR1.u8TxLen = u8TMR1DataLen;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001468 <AFE_Control+0x650>)
 80013f2:	781a      	ldrb	r2, [r3, #0]
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <AFE_Control+0x648>)
 80013f6:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
 	  			TMR2.u8TxLen = u8TMR2DataLen;
 80013fa:	4b22      	ldr	r3, [pc, #136]	@ (8001484 <AFE_Control+0x66c>)
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	4b13      	ldr	r3, [pc, #76]	@ (800144c <AFE_Control+0x634>)
 8001400:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
 	  			EMG.u8TxLen = u8EMGDataLen;
 8001404:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <AFE_Control+0x640>)
 8001406:	781a      	ldrb	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <AFE_Control+0x63c>)
 800140a:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2

 	  			// Enable BLE data transmission
 	  			tsStreamAFE.bReleaseAfeData = true;
 800140e:	4b1e      	ldr	r3, [pc, #120]	@ (8001488 <AFE_Control+0x670>)
 8001410:	2201      	movs	r2, #1
 8001412:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9
 	  			tsStreamIMU.bReleaseAccelData = true;
 8001416:	4b1d      	ldr	r3, [pc, #116]	@ (800148c <AFE_Control+0x674>)
 8001418:	2201      	movs	r2, #1
 800141a:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
 	  			u8TMR1DataLen = 0;
 800141e:	4b12      	ldr	r3, [pc, #72]	@ (8001468 <AFE_Control+0x650>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
 	  			u8TMR2DataLen = 0;
 8001424:	4b17      	ldr	r3, [pc, #92]	@ (8001484 <AFE_Control+0x66c>)
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]
 	  			u8EMGDataLen = 0;
 800142a:	4b0b      	ldr	r3, [pc, #44]	@ (8001458 <AFE_Control+0x640>)
 800142c:	2200      	movs	r2, #0
 800142e:	701a      	strb	r2, [r3, #0]
 	  		}

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8001430:	4b17      	ldr	r3, [pc, #92]	@ (8001490 <AFE_Control+0x678>)
 8001432:	2204      	movs	r2, #4
 8001434:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8001436:	e007      	b.n	8001448 <AFE_Control+0x630>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_IDLE:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_IDLE\r\n");
 			  #endif
 	  		  eAFE_STATE = AFE_STATE_IDLE;
 8001438:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <AFE_Control+0x678>)
 800143a:	2206      	movs	r2, #6
 800143c:	701a      	strb	r2, [r3, #0]
 	  		  break;
 800143e:	e003      	b.n	8001448 <AFE_Control+0x630>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_ERROR:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_ADS_ERROR\r\n");
      	 	  #endif
 	  		  eAFE_STATE = AFE_STATE_RESET;
 8001440:	4b13      	ldr	r3, [pc, #76]	@ (8001490 <AFE_Control+0x678>)
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8001446:	bf00      	nop
 	  	  }
 }
 8001448:	bf00      	nop
 800144a:	bd98      	pop	{r3, r4, r7, pc}
 800144c:	2000051c 	.word	0x2000051c
 8001450:	20000e7e 	.word	0x20000e7e
 8001454:	20000820 	.word	0x20000820
 8001458:	20000e73 	.word	0x20000e73
 800145c:	20001638 	.word	0x20001638
 8001460:	20000218 	.word	0x20000218
 8001464:	20001324 	.word	0x20001324
 8001468:	20000e71 	.word	0x20000e71
 800146c:	20000474 	.word	0x20000474
 8001470:	20000c2a 	.word	0x20000c2a
 8001474:	20000778 	.word	0x20000778
 8001478:	20000c72 	.word	0x20000c72
 800147c:	20000a7c 	.word	0x20000a7c
 8001480:	20000cba 	.word	0x20000cba
 8001484:	20000e72 	.word	0x20000e72
 8001488:	20000b24 	.word	0x20000b24
 800148c:	20001048 	.word	0x20001048
 8001490:	20000212 	.word	0x20000212

08001494 <AFE_StreamDataPack>:

 void AFE_StreamDataPack 		( uint8_t *TMR1Data, uint8_t TMR1DataLen,
		  	  	  	  	  	  	  uint8_t *TMR2Data, uint8_t TMR2DataLen,
								  uint8_t *EMGData , uint8_t EMGDataLen,
								  uint8_t *outputString )
 {
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	72fb      	strb	r3, [r7, #11]
 80014a4:	4613      	mov	r3, r2
 80014a6:	72bb      	strb	r3, [r7, #10]
 	uint8_t index=0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamAFE.u8TxData, 0, sizeof(tsStreamAFE.u8TxData) );
 80014ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014b0:	2100      	movs	r1, #0
 80014b2:	4875      	ldr	r0, [pc, #468]	@ (8001688 <AFE_StreamDataPack+0x1f4>)
 80014b4:	f014 fcc2 	bl	8015e3c <memset>

//#ifdef IMU_ENABLE
 	outputString [index++] = 'S';
 80014b8:	7dfb      	ldrb	r3, [r7, #23]
 80014ba:	1c5a      	adds	r2, r3, #1
 80014bc:	75fa      	strb	r2, [r7, #23]
 80014be:	461a      	mov	r2, r3
 80014c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014c2:	4413      	add	r3, r2
 80014c4:	2253      	movs	r2, #83	@ 0x53
 80014c6:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp++;
 80014c8:	4b70      	ldr	r3, [pc, #448]	@ (800168c <AFE_StreamDataPack+0x1f8>)
 80014ca:	795b      	ldrb	r3, [r3, #5]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	b2d1      	uxtb	r1, r2
 80014d0:	4a6e      	ldr	r2, [pc, #440]	@ (800168c <AFE_StreamDataPack+0x1f8>)
 80014d2:	7151      	strb	r1, [r2, #5]
 80014d4:	7dfa      	ldrb	r2, [r7, #23]
 80014d6:	1c51      	adds	r1, r2, #1
 80014d8:	75f9      	strb	r1, [r7, #23]
 80014da:	4611      	mov	r1, r2
 80014dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014de:	440a      	add	r2, r1
 80014e0:	7013      	strb	r3, [r2, #0]
 	outputString [index++] = ',';
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	75fa      	strb	r2, [r7, #23]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	4413      	add	r3, r2
 80014ee:	222c      	movs	r2, #44	@ 0x2c
 80014f0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	75fa      	strb	r2, [r7, #23]
 80014f8:	461a      	mov	r2, r3
 80014fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fc:	4413      	add	r3, r2
 80014fe:	2243      	movs	r2, #67	@ 0x43
 8001500:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '0';
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	75fa      	strb	r2, [r7, #23]
 8001508:	461a      	mov	r2, r3
 800150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150c:	4413      	add	r3, r2
 800150e:	2230      	movs	r2, #48	@ 0x30
 8001510:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	75fa      	strb	r2, [r7, #23]
 8001518:	461a      	mov	r2, r3
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	4413      	add	r3, r2
 800151e:	222c      	movs	r2, #44	@ 0x2c
 8001520:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = TMR1DataLen;
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	75fa      	strb	r2, [r7, #23]
 8001528:	461a      	mov	r2, r3
 800152a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800152c:	4413      	add	r3, r2
 800152e:	7afa      	ldrb	r2, [r7, #11]
 8001530:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	75fa      	strb	r2, [r7, #23]
 8001538:	461a      	mov	r2, r3
 800153a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153c:	4413      	add	r3, r2
 800153e:	222c      	movs	r2, #44	@ 0x2c
 8001540:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, TMR1Data, TMR1DataLen );
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001546:	4413      	add	r3, r2
 8001548:	7afa      	ldrb	r2, [r7, #11]
 800154a:	68f9      	ldr	r1, [r7, #12]
 800154c:	4618      	mov	r0, r3
 800154e:	f014 fd06 	bl	8015f5e <memcpy>

 	index += TMR1DataLen;
 8001552:	7dfa      	ldrb	r2, [r7, #23]
 8001554:	7afb      	ldrb	r3, [r7, #11]
 8001556:	4413      	add	r3, r2
 8001558:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	75fa      	strb	r2, [r7, #23]
 8001560:	461a      	mov	r2, r3
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	4413      	add	r3, r2
 8001566:	222c      	movs	r2, #44	@ 0x2c
 8001568:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	75fa      	strb	r2, [r7, #23]
 8001570:	461a      	mov	r2, r3
 8001572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001574:	4413      	add	r3, r2
 8001576:	2243      	movs	r2, #67	@ 0x43
 8001578:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '1';
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	75fa      	strb	r2, [r7, #23]
 8001580:	461a      	mov	r2, r3
 8001582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001584:	4413      	add	r3, r2
 8001586:	2231      	movs	r2, #49	@ 0x31
 8001588:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	75fa      	strb	r2, [r7, #23]
 8001590:	461a      	mov	r2, r3
 8001592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001594:	4413      	add	r3, r2
 8001596:	222c      	movs	r2, #44	@ 0x2c
 8001598:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = TMR2DataLen;
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	75fa      	strb	r2, [r7, #23]
 80015a0:	461a      	mov	r2, r3
 80015a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015a4:	4413      	add	r3, r2
 80015a6:	7aba      	ldrb	r2, [r7, #10]
 80015a8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	1c5a      	adds	r2, r3, #1
 80015ae:	75fa      	strb	r2, [r7, #23]
 80015b0:	461a      	mov	r2, r3
 80015b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015b4:	4413      	add	r3, r2
 80015b6:	222c      	movs	r2, #44	@ 0x2c
 80015b8:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, TMR2Data, TMR2DataLen );
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015be:	4413      	add	r3, r2
 80015c0:	7aba      	ldrb	r2, [r7, #10]
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f014 fcca 	bl	8015f5e <memcpy>

 	index += TMR2DataLen;
 80015ca:	7dfa      	ldrb	r2, [r7, #23]
 80015cc:	7abb      	ldrb	r3, [r7, #10]
 80015ce:	4413      	add	r3, r2
 80015d0:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	75fa      	strb	r2, [r7, #23]
 80015d8:	461a      	mov	r2, r3
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	4413      	add	r3, r2
 80015de:	222c      	movs	r2, #44	@ 0x2c
 80015e0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	75fa      	strb	r2, [r7, #23]
 80015e8:	461a      	mov	r2, r3
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	4413      	add	r3, r2
 80015ee:	2243      	movs	r2, #67	@ 0x43
 80015f0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '2';
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	75fa      	strb	r2, [r7, #23]
 80015f8:	461a      	mov	r2, r3
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	4413      	add	r3, r2
 80015fe:	2232      	movs	r2, #50	@ 0x32
 8001600:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	75fa      	strb	r2, [r7, #23]
 8001608:	461a      	mov	r2, r3
 800160a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160c:	4413      	add	r3, r2
 800160e:	222c      	movs	r2, #44	@ 0x2c
 8001610:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = EMGDataLen;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
 8001614:	1c5a      	adds	r2, r3, #1
 8001616:	75fa      	strb	r2, [r7, #23]
 8001618:	461a      	mov	r2, r3
 800161a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800161c:	4413      	add	r3, r2
 800161e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001622:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001624:	7dfb      	ldrb	r3, [r7, #23]
 8001626:	1c5a      	adds	r2, r3, #1
 8001628:	75fa      	strb	r2, [r7, #23]
 800162a:	461a      	mov	r2, r3
 800162c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800162e:	4413      	add	r3, r2
 8001630:	222c      	movs	r2, #44	@ 0x2c
 8001632:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, EMGData, EMGDataLen );
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001638:	4413      	add	r3, r2
 800163a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800163e:	6a39      	ldr	r1, [r7, #32]
 8001640:	4618      	mov	r0, r3
 8001642:	f014 fc8c 	bl	8015f5e <memcpy>

 	index += EMGDataLen;
 8001646:	7dfa      	ldrb	r2, [r7, #23]
 8001648:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800164c:	4413      	add	r3, r2
 800164e:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = 'T';
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	75fa      	strb	r2, [r7, #23]
 8001656:	461a      	mov	r2, r3
 8001658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165a:	4413      	add	r3, r2
 800165c:	2254      	movs	r2, #84	@ 0x54
 800165e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'M';
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	1c5a      	adds	r2, r3, #1
 8001664:	75fa      	strb	r2, [r7, #23]
 8001666:	461a      	mov	r2, r3
 8001668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800166a:	4413      	add	r3, r2
 800166c:	224d      	movs	r2, #77	@ 0x4d
 800166e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'M';
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	75fa      	strb	r2, [r7, #23]
 8001676:	461a      	mov	r2, r3
 8001678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800167a:	4413      	add	r3, r2
 800167c:	224d      	movs	r2, #77	@ 0x4d
 800167e:	701a      	strb	r2, [r3, #0]
//	outputString [index++] = ',';
//
//	memcpy ( outputString + index, TMR2Data, TMR2DataLen );
//#endif

 }
 8001680:	bf00      	nop
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000b2a 	.word	0x20000b2a
 800168c:	200019dc 	.word	0x200019dc

08001690 <BLE_Init>:
 uint16_t u16temp;
//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
 void BLE_Init (void)
 {
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0

	 tsBle.App.AccelNotification = false;
 8001694:	4b08      	ldr	r3, [pc, #32]	@ (80016b8 <BLE_Init+0x28>)
 8001696:	2200      	movs	r2, #0
 8001698:	725a      	strb	r2, [r3, #9]
	 tsBle.App.GyroNotification = false;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <BLE_Init+0x28>)
 800169c:	2200      	movs	r2, #0
 800169e:	729a      	strb	r2, [r3, #10]
	 tsBle.App.AfeNotification = false;
 80016a0:	4b05      	ldr	r3, [pc, #20]	@ (80016b8 <BLE_Init+0x28>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	721a      	strb	r2, [r3, #8]

	 DIAG ("\t\tBLE initialised\r\n");
 80016a6:	4805      	ldr	r0, [pc, #20]	@ (80016bc <BLE_Init+0x2c>)
 80016a8:	f001 fb12 	bl	8002cd0 <DIAG>
	 HAL_Delay (10);
 80016ac:	200a      	movs	r0, #10
 80016ae:	f001 fa73 	bl	8002b98 <HAL_Delay>
 }
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	200019dc 	.word	0x200019dc
 80016bc:	08017dec 	.word	0x08017dec

080016c0 <BLE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void BLE_Control ( void )
 {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af04      	add	r7, sp, #16

	 switch( eBLE_STATE )
 80016c6:	4b88      	ldr	r3, [pc, #544]	@ (80018e8 <BLE_Control+0x228>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	f200 8105 	bhi.w	80018da <BLE_Control+0x21a>
 80016d0:	a201      	add	r2, pc, #4	@ (adr r2, 80016d8 <BLE_Control+0x18>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	0800170d 	.word	0x0800170d
 80016dc:	08001715 	.word	0x08001715
 80016e0:	0800171d 	.word	0x0800171d
 80016e4:	08001725 	.word	0x08001725
 80016e8:	0800173f 	.word	0x0800173f
 80016ec:	08001759 	.word	0x08001759
 80016f0:	080017cf 	.word	0x080017cf
 80016f4:	080017ed 	.word	0x080017ed
 80016f8:	08001847 	.word	0x08001847
 80016fc:	0800186b 	.word	0x0800186b
 8001700:	080018a7 	.word	0x080018a7
 8001704:	080018cb 	.word	0x080018cb
 8001708:	080018d3 	.word	0x080018d3
	 {
// ---------------------------------------------

	 case BLE_STATE_RESET:

		 eBLE_STATE = BLE_STATE_INIT;
 800170c:	4b76      	ldr	r3, [pc, #472]	@ (80018e8 <BLE_Control+0x228>)
 800170e:	2201      	movs	r2, #1
 8001710:	701a      	strb	r2, [r3, #0]
		 break;
 8001712:	e0e6      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_INIT:

		 eBLE_STATE = BLE_STATE_ADV;
 8001714:	4b74      	ldr	r3, [pc, #464]	@ (80018e8 <BLE_Control+0x228>)
 8001716:	2202      	movs	r2, #2
 8001718:	701a      	strb	r2, [r3, #0]
		 break;
 800171a:	e0e2      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_ADV:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 800171c:	4b72      	ldr	r3, [pc, #456]	@ (80018e8 <BLE_Control+0x228>)
 800171e:	2203      	movs	r2, #3
 8001720:	701a      	strb	r2, [r3, #0]
		 break;
 8001722:	e0de      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_CHECK_CONNECTION:

		 if ( tsBle.Connected )
 8001724:	4b71      	ldr	r3, [pc, #452]	@ (80018ec <BLE_Control+0x22c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <BLE_Control+0x76>
		 {
			 #if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
			 	 //BLE_SVC_L2CAP_Conn_Update(0x00);
			 #endif
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 800172e:	4b6e      	ldr	r3, [pc, #440]	@ (80018e8 <BLE_Control+0x228>)
 8001730:	2205      	movs	r2, #5
 8001732:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
		 }
		 break;
 8001734:	e0d5      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 8001736:	4b6c      	ldr	r3, [pc, #432]	@ (80018e8 <BLE_Control+0x228>)
 8001738:	2203      	movs	r2, #3
 800173a:	701a      	strb	r2, [r3, #0]
		 break;
 800173c:	e0d1      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_CONNECTED:
		 if ( tsBle.Connected )
 800173e:	4b6b      	ldr	r3, [pc, #428]	@ (80018ec <BLE_Control+0x22c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	d003      	beq.n	8001750 <BLE_Control+0x90>
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001748:	4b67      	ldr	r3, [pc, #412]	@ (80018e8 <BLE_Control+0x228>)
 800174a:	2205      	movs	r2, #5
 800174c:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_ADV;
		 }
		 break;
 800174e:	e0c8      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_ADV;
 8001750:	4b65      	ldr	r3, [pc, #404]	@ (80018e8 <BLE_Control+0x228>)
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
		 break;
 8001756:	e0c4      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_SCG:

		 if ( tsBle.App.AfeNotification )
 8001758:	4b64      	ldr	r3, [pc, #400]	@ (80018ec <BLE_Control+0x22c>)
 800175a:	7a1b      	ldrb	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d032      	beq.n	80017c6 <BLE_Control+0x106>
		 {
			 if ( tsStreamAFE.bReleaseAfeData == true )
 8001760:	4b63      	ldr	r3, [pc, #396]	@ (80018f0 <BLE_Control+0x230>)
 8001762:	f893 32b9 	ldrb.w	r3, [r3, #697]	@ 0x2b9
 8001766:	2b01      	cmp	r3, #1
 8001768:	d129      	bne.n	80017be <BLE_Control+0xfe>
			 {
				 tsStreamAFE.bReleaseAfeData = false;
 800176a:	4b61      	ldr	r3, [pc, #388]	@ (80018f0 <BLE_Control+0x230>)
 800176c:	2200      	movs	r2, #0
 800176e:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9
				 AFE_StreamDataPack ( tsStreamAFE.u8TMR1TxCpy, TMR1.u8TxLen,
 8001772:	4b60      	ldr	r3, [pc, #384]	@ (80018f4 <BLE_Control+0x234>)
 8001774:	f893 12f2 	ldrb.w	r1, [r3, #754]	@ 0x2f2
 8001778:	4b5f      	ldr	r3, [pc, #380]	@ (80018f8 <BLE_Control+0x238>)
 800177a:	f893 22f2 	ldrb.w	r2, [r3, #754]	@ 0x2f2
 800177e:	4b5f      	ldr	r3, [pc, #380]	@ (80018fc <BLE_Control+0x23c>)
 8001780:	f893 32f2 	ldrb.w	r3, [r3, #754]	@ 0x2f2
 8001784:	485e      	ldr	r0, [pc, #376]	@ (8001900 <BLE_Control+0x240>)
 8001786:	9002      	str	r0, [sp, #8]
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	4b5e      	ldr	r3, [pc, #376]	@ (8001904 <BLE_Control+0x244>)
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	4613      	mov	r3, r2
 8001790:	4a5d      	ldr	r2, [pc, #372]	@ (8001908 <BLE_Control+0x248>)
 8001792:	485e      	ldr	r0, [pc, #376]	@ (800190c <BLE_Control+0x24c>)
 8001794:	f7ff fe7e 	bl	8001494 <AFE_StreamDataPack>
						 	 	 	  tsStreamAFE.u8TMR2TxCpy, TMR2.u8TxLen,
									  tsStreamAFE.u8EMGTxCpy, EMG.u8TxLen,
									  tsStreamAFE.u8TxData );
				 // Reset data length
				 TMR1.u8TxLen = 0;
 8001798:	4b56      	ldr	r3, [pc, #344]	@ (80018f4 <BLE_Control+0x234>)
 800179a:	2200      	movs	r2, #0
 800179c:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 TMR2.u8TxLen = 0;
 80017a0:	4b55      	ldr	r3, [pc, #340]	@ (80018f8 <BLE_Control+0x238>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 EMG.u8TxLen = 0;
 80017a8:	4b54      	ldr	r3, [pc, #336]	@ (80018fc <BLE_Control+0x23c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 // Set the task for BLE
				 tsBle.App.AfeSetTask = true;
 80017b0:	4b4e      	ldr	r3, [pc, #312]	@ (80018ec <BLE_Control+0x22c>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	72da      	strb	r2, [r3, #11]

				 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 80017b6:	4b4c      	ldr	r3, [pc, #304]	@ (80018e8 <BLE_Control+0x228>)
 80017b8:	2206      	movs	r2, #6
 80017ba:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
		 }
		 break;
 80017bc:	e091      	b.n	80018e2 <BLE_Control+0x222>
				 eBLE_STATE = BLE_STATE_XFER_SCG;
 80017be:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <BLE_Control+0x228>)
 80017c0:	2205      	movs	r2, #5
 80017c2:	701a      	strb	r2, [r3, #0]
		 break;
 80017c4:	e08d      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 80017c6:	4b48      	ldr	r3, [pc, #288]	@ (80018e8 <BLE_Control+0x228>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	701a      	strb	r2, [r3, #0]
		 break;
 80017cc:	e089      	b.n	80018e2 <BLE_Control+0x222>


	 case BLE_STATE_XFER_SCG_Cmplt:


		 if ( tsBle.AFE_XferComplete )
 80017ce:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <BLE_Control+0x22c>)
 80017d0:	789b      	ldrb	r3, [r3, #2]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <BLE_Control+0x124>
		 {
			 tsBle.AFE_XferComplete = false;
 80017d6:	4b45      	ldr	r3, [pc, #276]	@ (80018ec <BLE_Control+0x22c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	709a      	strb	r2, [r3, #2]

			 // By default the next step is waiting another SCG/MCG data, but if IMU is enabled, so ACCEL would be the next step.
			 eBLE_STATE = BLE_STATE_IDLE;
 80017dc:	4b42      	ldr	r3, [pc, #264]	@ (80018e8 <BLE_Control+0x228>)
 80017de:	220b      	movs	r2, #11
 80017e0:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
		 }
		 break;
 80017e2:	e07e      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 80017e4:	4b40      	ldr	r3, [pc, #256]	@ (80018e8 <BLE_Control+0x228>)
 80017e6:	2206      	movs	r2, #6
 80017e8:	701a      	strb	r2, [r3, #0]
		 break;
 80017ea:	e07a      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL:

		 if ( tsBle.App.AccelNotification )
 80017ec:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <BLE_Control+0x22c>)
 80017ee:	7a5b      	ldrb	r3, [r3, #9]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d024      	beq.n	800183e <BLE_Control+0x17e>
		 {
			 if ( tsStreamIMU.bReleaseAccelData == true )
 80017f4:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <BLE_Control+0x250>)
 80017f6:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d11b      	bne.n	8001836 <BLE_Control+0x176>
			 {
				 tsStreamIMU.bReleaseAccelData = false;
 80017fe:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <BLE_Control+0x250>)
 8001800:	2200      	movs	r2, #0
 8001802:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
				 IMU_StreamDataPack ( Accelerometer, IMU.u8AxTxData, IMU.u8AyTxData, IMU.u8AzTxData, tsStreamIMU.u8TxData );
 8001806:	4b43      	ldr	r3, [pc, #268]	@ (8001914 <BLE_Control+0x254>)
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <BLE_Control+0x258>)
 800180c:	4a43      	ldr	r2, [pc, #268]	@ (800191c <BLE_Control+0x25c>)
 800180e:	4944      	ldr	r1, [pc, #272]	@ (8001920 <BLE_Control+0x260>)
 8001810:	2000      	movs	r0, #0
 8001812:	f000 fb95 	bl	8001f40 <IMU_StreamDataPack>
				 //Reset data length
				 IMU.u8AxTxLen = 0;
 8001816:	4b43      	ldr	r3, [pc, #268]	@ (8001924 <BLE_Control+0x264>)
 8001818:	2200      	movs	r2, #0
 800181a:	731a      	strb	r2, [r3, #12]
				 IMU.u8AyTxLen = 0;
 800181c:	4b41      	ldr	r3, [pc, #260]	@ (8001924 <BLE_Control+0x264>)
 800181e:	2200      	movs	r2, #0
 8001820:	735a      	strb	r2, [r3, #13]
				 IMU.u8AzTxLen = 0;
 8001822:	4b40      	ldr	r3, [pc, #256]	@ (8001924 <BLE_Control+0x264>)
 8001824:	2200      	movs	r2, #0
 8001826:	739a      	strb	r2, [r3, #14]
				 // Set the task for BLE
				 tsBle.App.AccelSetTask= true;
 8001828:	4b30      	ldr	r3, [pc, #192]	@ (80018ec <BLE_Control+0x22c>)
 800182a:	2201      	movs	r2, #1
 800182c:	731a      	strb	r2, [r3, #12]

				 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 800182e:	4b2e      	ldr	r3, [pc, #184]	@ (80018e8 <BLE_Control+0x228>)
 8001830:	2208      	movs	r2, #8
 8001832:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_IDLE;
		 }
		 break;
 8001834:	e055      	b.n	80018e2 <BLE_Control+0x222>
				 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 8001836:	4b2c      	ldr	r3, [pc, #176]	@ (80018e8 <BLE_Control+0x228>)
 8001838:	2207      	movs	r2, #7
 800183a:	701a      	strb	r2, [r3, #0]
		 break;
 800183c:	e051      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_IDLE;
 800183e:	4b2a      	ldr	r3, [pc, #168]	@ (80018e8 <BLE_Control+0x228>)
 8001840:	220b      	movs	r2, #11
 8001842:	701a      	strb	r2, [r3, #0]
		 break;
 8001844:	e04d      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL_Cmplt:

		 if ( tsBle.ACCEL_XferComplete )
 8001846:	4b29      	ldr	r3, [pc, #164]	@ (80018ec <BLE_Control+0x22c>)
 8001848:	78db      	ldrb	r3, [r3, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <BLE_Control+0x1a2>
		 {
			 tsBle.ACCEL_XferComplete = false;
 800184e:	4b27      	ldr	r3, [pc, #156]	@ (80018ec <BLE_Control+0x22c>)
 8001850:	2200      	movs	r2, #0
 8001852:	70da      	strb	r2, [r3, #3]

			 eBLE_STATE = BLE_STATE_IDLE;
 8001854:	4b24      	ldr	r3, [pc, #144]	@ (80018e8 <BLE_Control+0x228>)
 8001856:	220b      	movs	r2, #11
 8001858:	701a      	strb	r2, [r3, #0]
			 #ifdef GYRO_ENABLE
			 	 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800185a:	4b23      	ldr	r3, [pc, #140]	@ (80018e8 <BLE_Control+0x228>)
 800185c:	2209      	movs	r2, #9
 800185e:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
		 }
		 break;
 8001860:	e03f      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 8001862:	4b21      	ldr	r3, [pc, #132]	@ (80018e8 <BLE_Control+0x228>)
 8001864:	2208      	movs	r2, #8
 8001866:	701a      	strb	r2, [r3, #0]
		 break;
 8001868:	e03b      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO:

		 tsStreamIMU.bReleaseGyroData = true;
 800186a:	4b29      	ldr	r3, [pc, #164]	@ (8001910 <BLE_Control+0x250>)
 800186c:	2201      	movs	r2, #1
 800186e:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
		 if ( tsStreamIMU.bReleaseGyroData == true )
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <BLE_Control+0x250>)
 8001874:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8001878:	2b01      	cmp	r3, #1
 800187a:	d110      	bne.n	800189e <BLE_Control+0x1de>
		 {
			 // Pack all the data
			 	IMU.u8GxTxLen = 0;
 800187c:	4b29      	ldr	r3, [pc, #164]	@ (8001924 <BLE_Control+0x264>)
 800187e:	2200      	movs	r2, #0
 8001880:	73da      	strb	r2, [r3, #15]
			 	IMU.u8GyTxLen = 0;
 8001882:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <BLE_Control+0x264>)
 8001884:	2200      	movs	r2, #0
 8001886:	741a      	strb	r2, [r3, #16]
			 	IMU.u8GzTxLen = 0;
 8001888:	4b26      	ldr	r3, [pc, #152]	@ (8001924 <BLE_Control+0x264>)
 800188a:	2200      	movs	r2, #0
 800188c:	745a      	strb	r2, [r3, #17]

			 tsStreamIMU.bReleaseGyroData = false;
 800188e:	4b20      	ldr	r3, [pc, #128]	@ (8001910 <BLE_Control+0x250>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
			 eBLE_STATE = BLE_STATE_XFER_GYRO_Cmplt;
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <BLE_Control+0x228>)
 8001898:	220a      	movs	r2, #10
 800189a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 800189c:	e021      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800189e:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <BLE_Control+0x228>)
 80018a0:	2209      	movs	r2, #9
 80018a2:	701a      	strb	r2, [r3, #0]
		 break;
 80018a4:	e01d      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO_Cmplt:

		 tsBle.GYRO_XferComplete = true;
 80018a6:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <BLE_Control+0x22c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	711a      	strb	r2, [r3, #4]
		 if ( tsBle.GYRO_XferComplete )
 80018ac:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <BLE_Control+0x22c>)
 80018ae:	791b      	ldrb	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d006      	beq.n	80018c2 <BLE_Control+0x202>
		 {
			 tsBle.GYRO_XferComplete = false;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <BLE_Control+0x22c>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	711a      	strb	r2, [r3, #4]
			 eBLE_STATE = BLE_STATE_IDLE;
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <BLE_Control+0x228>)
 80018bc:	220b      	movs	r2, #11
 80018be:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 80018c0:	e00f      	b.n	80018e2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 80018c2:	4b09      	ldr	r3, [pc, #36]	@ (80018e8 <BLE_Control+0x228>)
 80018c4:	2209      	movs	r2, #9
 80018c6:	701a      	strb	r2, [r3, #0]
		 break;
 80018c8:	e00b      	b.n	80018e2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_IDLE:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80018ca:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <BLE_Control+0x228>)
 80018cc:	2203      	movs	r2, #3
 80018ce:	701a      	strb	r2, [r3, #0]
		 break;
 80018d0:	e007      	b.n	80018e2 <BLE_Control+0x222>

	 case BLE_STATE_DISCONNECTED:

		 eBLE_STATE = BLE_STATE_ADV;
 80018d2:	4b05      	ldr	r3, [pc, #20]	@ (80018e8 <BLE_Control+0x228>)
 80018d4:	2202      	movs	r2, #2
 80018d6:	701a      	strb	r2, [r3, #0]
		 break;
 80018d8:	e003      	b.n	80018e2 <BLE_Control+0x222>

// Unknown state--------------------------------

	 default:

		 eBLE_STATE = BLE_STATE_RESET;
 80018da:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <BLE_Control+0x228>)
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
		 break;
 80018e0:	bf00      	nop

	 }
// ---------------------------------------------

 }
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000e7f 	.word	0x20000e7f
 80018ec:	200019dc 	.word	0x200019dc
 80018f0:	20000b24 	.word	0x20000b24
 80018f4:	20000218 	.word	0x20000218
 80018f8:	2000051c 	.word	0x2000051c
 80018fc:	20000820 	.word	0x20000820
 8001900:	20000b2a 	.word	0x20000b2a
 8001904:	20000cba 	.word	0x20000cba
 8001908:	20000c72 	.word	0x20000c72
 800190c:	20000c2a 	.word	0x20000c2a
 8001910:	20001048 	.word	0x20001048
 8001914:	2000104e 	.word	0x2000104e
 8001918:	20000f22 	.word	0x20000f22
 800191c:	20000eda 	.word	0x20000eda
 8001920:	20000e92 	.word	0x20000e92
 8001924:	20000e80 	.word	0x20000e80

08001928 <init_combined_filter>:
//--------------------------------------------------------------------------------------------


// Function to initialize Bandpass Filter
void init_combined_filter( Filter *filter, double low_fc, double high_fc, double notch_fc )
{
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b098      	sub	sp, #96	@ 0x60
 800192c:	af00      	add	r7, sp, #0
 800192e:	61f8      	str	r0, [r7, #28]
 8001930:	ed87 0b04 	vstr	d0, [r7, #16]
 8001934:	ed87 1b02 	vstr	d1, [r7, #8]
 8001938:	ed87 2b00 	vstr	d2, [r7]
    // Bandpass Filter initialization
    double nyquist = SAMPLE_RATE / 2.0;
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b97      	ldr	r3, [pc, #604]	@ (8001ba0 <init_combined_filter+0x278>)
 8001942:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double low = low_fc / nyquist;
 8001946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800194a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800194e:	f7fe ff55 	bl	80007fc <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double high = high_fc / nyquist;
 800195a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800195e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001962:	f7fe ff4b 	bl	80007fc <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double W0 = 2 * PI * (high + low) / 2.0;  // Center frequency
 800196e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001972:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001976:	f7fe fc61 	bl	800023c <__adddf3>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	a385      	add	r3, pc, #532	@ (adr r3, 8001b98 <init_combined_filter+0x270>)
 8001984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001988:	f7fe fe0e 	bl	80005a8 <__aeabi_dmul>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800199c:	f7fe ff2e 	bl	80007fc <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double BW = high - low;                  // Bandwidth
 80019a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80019ac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80019b0:	f7fe fc42 	bl	8000238 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double Q = W0 / BW;                      // Quality factor
 80019bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019c0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019c4:	f7fe ff1a 	bl	80007fc <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Bandpass filter coefficients for a second-order Butterworth filter (simplified)
    filter->b_bpf[0] = BW / 2.0;
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80019dc:	f7fe ff0e 	bl	80007fc <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	69f9      	ldr	r1, [r7, #28]
 80019e6:	e9c1 2300 	strd	r2, r3, [r1]
    filter->b_bpf[1] = 0.0;
 80019ea:	69f9      	ldr	r1, [r7, #28]
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    filter->b_bpf[2] = -BW / 2.0;
 80019f8:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80019fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019fc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fef6 	bl	80007fc <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	69f9      	ldr	r1, [r7, #28]
 8001a16:	e9c1 2304 	strd	r2, r3, [r1, #16]

    filter->a_bpf[0] = 1.0 + BW / Q;
 8001a1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a1e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a22:	f7fe feeb 	bl	80007fc <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	4b5c      	ldr	r3, [pc, #368]	@ (8001ba4 <init_combined_filter+0x27c>)
 8001a34:	f7fe fc02 	bl	800023c <__adddf3>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	69f9      	ldr	r1, [r7, #28]
 8001a3e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    filter->a_bpf[1] = -2.0 * cos(W0);
 8001a42:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001a46:	f015 f98b 	bl	8016d60 <cos>
 8001a4a:	ec51 0b10 	vmov	r0, r1, d0
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001a56:	f7fe fda7 	bl	80005a8 <__aeabi_dmul>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	69f9      	ldr	r1, [r7, #28]
 8001a60:	e9c1 2308 	strd	r2, r3, [r1, #32]
    filter->a_bpf[2] = 1.0 - BW / Q;
 8001a64:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a6c:	f7fe fec6 	bl	80007fc <__aeabi_ddiv>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	f04f 0000 	mov.w	r0, #0
 8001a78:	494a      	ldr	r1, [pc, #296]	@ (8001ba4 <init_combined_filter+0x27c>)
 8001a7a:	f7fe fbdd 	bl	8000238 <__aeabi_dsub>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	69f9      	ldr	r1, [r7, #28]
 8001a84:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // Initialize bandpass filter state to zero
    filter->z_bpf[0] = filter->z_bpf[1] = filter->z_bpf[2] = 0.0;
 8001a88:	69f9      	ldr	r1, [r7, #28]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001a9c:	69f9      	ldr	r1, [r7, #28]
 8001a9e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001aa8:	69f9      	ldr	r1, [r7, #28]
 8001aaa:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    // Notch Filter initialization
    double W0_notch = 2 * PI * notch_fc / nyquist;
 8001aae:	a33a      	add	r3, pc, #232	@ (adr r3, 8001b98 <init_combined_filter+0x270>)
 8001ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ab8:	f7fe fd76 	bl	80005a8 <__aeabi_dmul>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ac8:	f7fe fe98 	bl	80007fc <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double BW_notch = 5.0;  // Bandwidth of the notch (adjustable)
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b33      	ldr	r3, [pc, #204]	@ (8001ba8 <init_combined_filter+0x280>)
 8001ada:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Notch filter coefficients (second-order IIR)
    filter->b_notch[0] = 1.0;
 8001ade:	69f9      	ldr	r1, [r7, #28]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba4 <init_combined_filter+0x27c>)
 8001ae6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    filter->b_notch[1] = -2.0 * cos(W0_notch);
 8001aea:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001aee:	f015 f937 	bl	8016d60 <cos>
 8001af2:	ec51 0b10 	vmov	r0, r1, d0
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001afe:	f7fe fd53 	bl	80005a8 <__aeabi_dmul>
 8001b02:	4602      	mov	r2, r0
 8001b04:	460b      	mov	r3, r1
 8001b06:	69f9      	ldr	r1, [r7, #28]
 8001b08:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    filter->b_notch[2] = 1.0;
 8001b0c:	69f9      	ldr	r1, [r7, #28]
 8001b0e:	f04f 0200 	mov.w	r2, #0
 8001b12:	4b24      	ldr	r3, [pc, #144]	@ (8001ba4 <init_combined_filter+0x27c>)
 8001b14:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

    filter->a_notch[0] = 1.0 + BW_notch;
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <init_combined_filter+0x27c>)
 8001b1e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b22:	f7fe fb8b 	bl	800023c <__adddf3>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	69f9      	ldr	r1, [r7, #28]
 8001b2c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    filter->a_notch[1] = -2.0 * cos(W0_notch);
 8001b30:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001b34:	f015 f914 	bl	8016d60 <cos>
 8001b38:	ec51 0b10 	vmov	r0, r1, d0
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001b44:	f7fe fd30 	bl	80005a8 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	69f9      	ldr	r1, [r7, #28]
 8001b4e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    filter->a_notch[2] = 1.0 - BW_notch;
 8001b52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b56:	f04f 0000 	mov.w	r0, #0
 8001b5a:	4912      	ldr	r1, [pc, #72]	@ (8001ba4 <init_combined_filter+0x27c>)
 8001b5c:	f7fe fb6c 	bl	8000238 <__aeabi_dsub>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	69f9      	ldr	r1, [r7, #28]
 8001b66:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    // Initialize notch filter state to zero
    filter->z_notch[0] = filter->z_notch[1] = filter->z_notch[2] = 0.0;
 8001b6a:	69f9      	ldr	r1, [r7, #28]
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001b7e:	69f9      	ldr	r1, [r7, #28]
 8001b80:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001b8a:	69f9      	ldr	r1, [r7, #28]
 8001b8c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
}
 8001b90:	bf00      	nop
 8001b92:	3760      	adds	r7, #96	@ 0x60
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdb0      	pop	{r4, r5, r7, pc}
 8001b98:	54442d18 	.word	0x54442d18
 8001b9c:	401921fb 	.word	0x401921fb
 8001ba0:	4080ac00 	.word	0x4080ac00
 8001ba4:	3ff00000 	.word	0x3ff00000
 8001ba8:	40140000 	.word	0x40140000

08001bac <IIR_AFE>:

//--------------------------------------------------------------------------------------------
//								IIR Bandpass Filter
//--------------------------------------------------------------------------------------------
int32_t IIR_AFE ( tsSIG *Signal, uint8_t Temp_xyptr )
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	70fb      	strb	r3, [r7, #3]

	float  		convM = 0;
 8001bb8:	f04f 0300 	mov.w	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
	float  		conv1M = 0, conv2M = 0;
 8001bbe:	f04f 0300 	mov.w	r3, #0
 8001bc2:	61bb      	str	r3, [r7, #24]
 8001bc4:	f04f 0300 	mov.w	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
	uint8_t 	o = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	73fb      	strb	r3, [r7, #15]


	// BPF Implementation ------------------------------------------------------------------------------------
	if (tsCmd.TMR_HPF)
 8001bce:	4b8d      	ldr	r3, [pc, #564]	@ (8001e04 <IIR_AFE+0x258>)
 8001bd0:	7e9b      	ldrb	r3, [r3, #26]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d07e      	beq.n	8001cd4 <IIR_AFE+0x128>
	{
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	74fb      	strb	r3, [r7, #19]
 8001bda:	e020      	b.n	8001c1e <IIR_AFE+0x72>
		{
			o= RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001bdc:	7cfa      	ldrb	r2, [r7, #19]
 8001bde:	78fb      	ldrb	r3, [r7, #3]
 8001be0:	4619      	mov	r1, r3
 8001be2:	2019      	movs	r0, #25
 8001be4:	f000 f918 	bl	8001e18 <RecentValueIndex>
 8001be8:	4603      	mov	r3, r0
 8001bea:	73fb      	strb	r3, [r7, #15]
			conv1M +=  b[i] * Signal->Raw[o];
 8001bec:	7cfb      	ldrb	r3, [r7, #19]
 8001bee:	4a86      	ldr	r2, [pc, #536]	@ (8001e08 <IIR_AFE+0x25c>)
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ed93 7a00 	vldr	s14, [r3]
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c00:	ee07 3a90 	vmov	s15, r3
 8001c04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c0c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 8001c18:	7cfb      	ldrb	r3, [r7, #19]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	74fb      	strb	r3, [r7, #19]
 8001c1e:	7cfb      	ldrb	r3, [r7, #19]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d9db      	bls.n	8001bdc <IIR_AFE+0x30>
		}

		o=0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	73fb      	strb	r3, [r7, #15]

		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 8001c28:	2301      	movs	r3, #1
 8001c2a:	74bb      	strb	r3, [r7, #18]
 8001c2c:	e03f      	b.n	8001cae <IIR_AFE+0x102>
		{
			o = RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001c2e:	7cba      	ldrb	r2, [r7, #18]
 8001c30:	78fb      	ldrb	r3, [r7, #3]
 8001c32:	4619      	mov	r1, r3
 8001c34:	2019      	movs	r0, #25
 8001c36:	f000 f8ef 	bl	8001e18 <RecentValueIndex>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	73fb      	strb	r3, [r7, #15]
			if (tsCmd.TMR_N50) {conv2M += a[i] * Signal->HPF [o];} else {conv2M += a[i] * Signal->Filtered [o];}
 8001c3e:	4b71      	ldr	r3, [pc, #452]	@ (8001e04 <IIR_AFE+0x258>)
 8001c40:	7e5b      	ldrb	r3, [r3, #25]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d018      	beq.n	8001c78 <IIR_AFE+0xcc>
 8001c46:	7cbb      	ldrb	r3, [r7, #18]
 8001c48:	4a70      	ldr	r2, [pc, #448]	@ (8001e0c <IIR_AFE+0x260>)
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	ed93 7a00 	vldr	s14, [r3]
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	334a      	adds	r3, #74	@ 0x4a
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	ee07 3a90 	vmov	s15, r3
 8001c62:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c76:	e017      	b.n	8001ca8 <IIR_AFE+0xfc>
 8001c78:	7cbb      	ldrb	r3, [r7, #18]
 8001c7a:	4a64      	ldr	r2, [pc, #400]	@ (8001e0c <IIR_AFE+0x260>)
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	4413      	add	r3, r2
 8001c80:	ed93 7a00 	vldr	s14, [r3]
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	3318      	adds	r3, #24
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	4413      	add	r3, r2
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	ee07 3a90 	vmov	s15, r3
 8001c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c9c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc7 7a05 	vstr	s15, [r7, #20]
		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 8001ca8:	7cbb      	ldrb	r3, [r7, #18]
 8001caa:	3301      	adds	r3, #1
 8001cac:	74bb      	strb	r3, [r7, #18]
 8001cae:	7cbb      	ldrb	r3, [r7, #18]
 8001cb0:	2b04      	cmp	r3, #4
 8001cb2:	d9bc      	bls.n	8001c2e <IIR_AFE+0x82>
		}

		Signal->HPF [Temp_xyptr] =  conv1M -  conv2M ;
 8001cb4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001cb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc0:	78fb      	ldrb	r3, [r7, #3]
 8001cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cc6:	ee17 1a90 	vmov	r1, s15
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	334a      	adds	r3, #74	@ 0x4a
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	4413      	add	r3, r2
 8001cd2:	6059      	str	r1, [r3, #4]
	}

	// Notch Filter implementation ---------------------------------------------------------------------------
	if (tsCmd.TMR_N50)
 8001cd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001e04 <IIR_AFE+0x258>)
 8001cd6:	7e5b      	ldrb	r3, [r3, #25]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d07c      	beq.n	8001dd6 <IIR_AFE+0x22a>
	{
		conv1M= 0;		conv2M= 0;
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]

		// 50 Notch Filter Implementation
		for ( uint8_t i=0 ; i < NF_order ; i++ )
 8001ce8:	2300      	movs	r3, #0
 8001cea:	747b      	strb	r3, [r7, #17]
 8001cec:	e03d      	b.n	8001d6a <IIR_AFE+0x1be>
		{
			o = RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001cee:	7c7a      	ldrb	r2, [r7, #17]
 8001cf0:	78fb      	ldrb	r3, [r7, #3]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	2019      	movs	r0, #25
 8001cf6:	f000 f88f 	bl	8001e18 <RecentValueIndex>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	73fb      	strb	r3, [r7, #15]
			if (tsCmd.TMR_HPF) { conv1M +=  b_N50_60[i] * Signal->HPF[o]; } else { conv1M +=  b_N50_60[i] * Signal->Raw[o]; }
 8001cfe:	4b41      	ldr	r3, [pc, #260]	@ (8001e04 <IIR_AFE+0x258>)
 8001d00:	7e9b      	ldrb	r3, [r3, #26]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d018      	beq.n	8001d38 <IIR_AFE+0x18c>
 8001d06:	7c7b      	ldrb	r3, [r7, #17]
 8001d08:	4a41      	ldr	r2, [pc, #260]	@ (8001e10 <IIR_AFE+0x264>)
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	334a      	adds	r3, #74	@ 0x4a
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	4413      	add	r3, r2
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d36:	e015      	b.n	8001d64 <IIR_AFE+0x1b8>
 8001d38:	7c7b      	ldrb	r3, [r7, #17]
 8001d3a:	4a35      	ldr	r2, [pc, #212]	@ (8001e10 <IIR_AFE+0x264>)
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d4c:	ee07 3a90 	vmov	s15, r3
 8001d50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d58:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=0 ; i < NF_order ; i++ )
 8001d64:	7c7b      	ldrb	r3, [r7, #17]
 8001d66:	3301      	adds	r3, #1
 8001d68:	747b      	strb	r3, [r7, #17]
 8001d6a:	7c7b      	ldrb	r3, [r7, #17]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d9be      	bls.n	8001cee <IIR_AFE+0x142>
		}

		o=0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	73fb      	strb	r3, [r7, #15]

		for ( uint8_t i=1 ; i < NF_order ; i++ )
 8001d74:	2301      	movs	r3, #1
 8001d76:	743b      	strb	r3, [r7, #16]
 8001d78:	e022      	b.n	8001dc0 <IIR_AFE+0x214>
		{
			o=RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001d7a:	7c3a      	ldrb	r2, [r7, #16]
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2019      	movs	r0, #25
 8001d82:	f000 f849 	bl	8001e18 <RecentValueIndex>
 8001d86:	4603      	mov	r3, r0
 8001d88:	73fb      	strb	r3, [r7, #15]
			 conv2M += a_N50_60[i] * Signal->Filtered[o] ;
 8001d8a:	7c3b      	ldrb	r3, [r7, #16]
 8001d8c:	4a21      	ldr	r2, [pc, #132]	@ (8001e14 <IIR_AFE+0x268>)
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	ed93 7a00 	vldr	s14, [r3]
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	3318      	adds	r3, #24
 8001d9c:	009b      	lsls	r3, r3, #2
 8001d9e:	4413      	add	r3, r2
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	ed97 7a05 	vldr	s14, [r7, #20]
 8001db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001db6:	edc7 7a05 	vstr	s15, [r7, #20]
		for ( uint8_t i=1 ; i < NF_order ; i++ )
 8001dba:	7c3b      	ldrb	r3, [r7, #16]
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	743b      	strb	r3, [r7, #16]
 8001dc0:	7c3b      	ldrb	r3, [r7, #16]
 8001dc2:	2b04      	cmp	r3, #4
 8001dc4:	d9d9      	bls.n	8001d7a <IIR_AFE+0x1ce>
		}

		convM= conv1M - conv2M;
 8001dc6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001dca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dd2:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if (tsCmd.TMR_HPF == false && tsCmd.TMR_N50 == false)
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <IIR_AFE+0x258>)
 8001dd8:	7e9b      	ldrb	r3, [r3, #26]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d108      	bne.n	8001df0 <IIR_AFE+0x244>
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <IIR_AFE+0x258>)
 8001de0:	7e5b      	ldrb	r3, [r3, #25]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d104      	bne.n	8001df0 <IIR_AFE+0x244>
	{
		return Signal->Raw[Temp_xyptr];
 8001de6:	78fa      	ldrb	r2, [r7, #3]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	e005      	b.n	8001dfc <IIR_AFE+0x250>
	}
	else
	{
		return  (int)convM; //(int)conv;
 8001df0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001df4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df8:	ee17 3a90 	vmov	r3, s15
	}

}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20001638 	.word	0x20001638
 8001e08:	08019a38 	.word	0x08019a38
 8001e0c:	08019a4c 	.word	0x08019a4c
 8001e10:	08019a60 	.word	0x08019a60
 8001e14:	08019a74 	.word	0x08019a74

08001e18 <RecentValueIndex>:

//--------------------------------------------------------------------------------------------
//						Get buffer position for past values
//--------------------------------------------------------------------------------------------
uint8_t RecentValueIndex ( uint8_t BufferLen, uint8_t BufferPos, uint8_t in_dex )
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
 8001e22:	460b      	mov	r3, r1
 8001e24:	71bb      	strb	r3, [r7, #6]
 8001e26:	4613      	mov	r3, r2
 8001e28:	717b      	strb	r3, [r7, #5]
	uint8_t out_xy = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	73fb      	strb	r3, [r7, #15]

	if ( ( BufferPos - in_dex ) <  0 )	{ out_xy = ( BufferLen + BufferPos ) - in_dex; }	// Calculate pointer of the circular buffer for previous values
 8001e2e:	79ba      	ldrb	r2, [r7, #6]
 8001e30:	797b      	ldrb	r3, [r7, #5]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da06      	bge.n	8001e46 <RecentValueIndex+0x2e>
 8001e38:	79fa      	ldrb	r2, [r7, #7]
 8001e3a:	79bb      	ldrb	r3, [r7, #6]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	797b      	ldrb	r3, [r7, #5]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	73fb      	strb	r3, [r7, #15]
	if ( ( BufferPos - in_dex ) >= 0 )	{ out_xy = BufferPos - in_dex; }				// Calculate pointer of the circular buffer for previous values
 8001e46:	79ba      	ldrb	r2, [r7, #6]
 8001e48:	797b      	ldrb	r3, [r7, #5]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	db03      	blt.n	8001e58 <RecentValueIndex+0x40>
 8001e50:	79ba      	ldrb	r2, [r7, #6]
 8001e52:	797b      	ldrb	r3, [r7, #5]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	73fb      	strb	r3, [r7, #15]

	return out_xy;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <IMU_Init>:

#define 	M_PI 			3.14159265358979323846
#define		IMU_SPS			1067
//----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_Init(I2C_HandleTypeDef *hi2c)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af02      	add	r7, sp, #8
 8001e6e:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set the HW address on IMU to 0x6A
    ADDR_IMU_6A;
 8001e70:	4b2d      	ldr	r3, [pc, #180]	@ (8001f28 <IMU_Init+0xc0>)
 8001e72:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e76:	619a      	str	r2, [r3, #24]

    // Enable accelerometer, 104 Hz, 2g
    config[0] = IMU_CTRL1_XL;
 8001e78:	2310      	movs	r3, #16
 8001e7a:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001e7c:	2340      	movs	r3, #64	@ 0x40
 8001e7e:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001e80:	f107 020c 	add.w	r2, r7, #12
 8001e84:	230a      	movs	r3, #10
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	21d4      	movs	r1, #212	@ 0xd4
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f003 feed 	bl	8005c6c <HAL_I2C_Master_Transmit>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <IMU_Init+0x34>
    {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e041      	b.n	8001f20 <IMU_Init+0xb8>
    }

    // Enable gyroscope, 104 Hz, 250 dps
    config[0] = IMU_CTRL2_G;
 8001e9c:	2311      	movs	r3, #17
 8001e9e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001ea0:	2340      	movs	r3, #64	@ 0x40
 8001ea2:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001ea4:	f107 020c 	add.w	r2, r7, #12
 8001ea8:	230a      	movs	r3, #10
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2302      	movs	r3, #2
 8001eae:	21d4      	movs	r1, #212	@ 0xd4
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f003 fedb 	bl	8005c6c <HAL_I2C_Master_Transmit>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <IMU_Init+0x58>
    {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e02f      	b.n	8001f20 <IMU_Init+0xb8>
    }

    // BDU (Block Data Update) enabled
    config[0] = IMU_CTRL3_C;
 8001ec0:	2312      	movs	r3, #18
 8001ec2:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44;
 8001ec4:	2344      	movs	r3, #68	@ 0x44
 8001ec6:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001ec8:	f107 020c 	add.w	r2, r7, #12
 8001ecc:	230a      	movs	r3, #10
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	21d4      	movs	r1, #212	@ 0xd4
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f003 fec9 	bl	8005c6c <HAL_I2C_Master_Transmit>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <IMU_Init+0x7c>
    {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e01d      	b.n	8001f20 <IMU_Init+0xb8>
    }

    HighPassFilter_Init	( &accelFilter, cutoff_freq, IMU_SPS );
 8001ee4:	4b11      	ldr	r3, [pc, #68]	@ (8001f2c <IMU_Init+0xc4>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	ee07 3a90 	vmov	s15, r3
 8001eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ef0:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001f30 <IMU_Init+0xc8>
 8001ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef8:	480e      	ldr	r0, [pc, #56]	@ (8001f34 <IMU_Init+0xcc>)
 8001efa:	f000 f91d 	bl	8002138 <HighPassFilter_Init>
    HighPassFilter_Init	( &gyroFilter , cutoff_freq, IMU_SPS );
 8001efe:	4b0b      	ldr	r3, [pc, #44]	@ (8001f2c <IMU_Init+0xc4>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0a:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001f30 <IMU_Init+0xc8>
 8001f0e:	eeb0 0a67 	vmov.f32	s0, s15
 8001f12:	4809      	ldr	r0, [pc, #36]	@ (8001f38 <IMU_Init+0xd0>)
 8001f14:	f000 f910 	bl	8002138 <HighPassFilter_Init>

    DIAG ("\t\tIMU initialised\r\n");
 8001f18:	4808      	ldr	r0, [pc, #32]	@ (8001f3c <IMU_Init+0xd4>)
 8001f1a:	f000 fed9 	bl	8002cd0 <DIAG>

    return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3710      	adds	r7, #16
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	48000400 	.word	0x48000400
 8001f2c:	2000000c 	.word	0x2000000c
 8001f30:	44856000 	.word	0x44856000
 8001f34:	20001304 	.word	0x20001304
 8001f38:	20001314 	.word	0x20001314
 8001f3c:	08017e00 	.word	0x08017e00

08001f40 <IMU_StreamDataPack>:
	//tsSystem.u8Error |= eBus_Error;
}
//--------------------------------------------------------------------------------------------

void IMU_StreamDataPack ( uint8_t sensor, uint8_t *x_pData, uint8_t *y_pData, uint8_t *z_pData, uint8_t *outputString   )
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b086      	sub	sp, #24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]
 	uint8_t index=0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamIMU.u8TxData, 0, sizeof(tsStreamIMU.u8TxData) );
 8001f54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4875      	ldr	r0, [pc, #468]	@ (8002130 <IMU_StreamDataPack+0x1f0>)
 8001f5c:	f013 ff6e 	bl	8015e3c <memset>

 	outputString [index++] = 'S';
 8001f60:	7dfb      	ldrb	r3, [r7, #23]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	75fa      	strb	r2, [r7, #23]
 8001f66:	461a      	mov	r2, r3
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	2253      	movs	r2, #83	@ 0x53
 8001f6e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp;				//'N'
 8001f70:	7dfb      	ldrb	r3, [r7, #23]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	75fa      	strb	r2, [r7, #23]
 8001f76:	461a      	mov	r2, r3
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	4a6d      	ldr	r2, [pc, #436]	@ (8002134 <IMU_StreamDataPack+0x1f4>)
 8001f7e:	7952      	ldrb	r2, [r2, #5]
 8001f80:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	75fa      	strb	r2, [r7, #23]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	222c      	movs	r2, #44	@ 0x2c
 8001f90:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001f92:	7dfb      	ldrb	r3, [r7, #23]
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	75fa      	strb	r2, [r7, #23]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	2243      	movs	r2, #67	@ 0x43
 8001fa0:	701a      	strb	r2, [r3, #0]
 	if ( sensor == Accelerometer)
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d108      	bne.n	8001fba <IMU_StreamDataPack+0x7a>
 	{
 		outputString [index++] = '3';
 8001fa8:	7dfb      	ldrb	r3, [r7, #23]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	75fa      	strb	r2, [r7, #23]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	2233      	movs	r2, #51	@ 0x33
 8001fb6:	701a      	strb	r2, [r3, #0]
 8001fb8:	e007      	b.n	8001fca <IMU_StreamDataPack+0x8a>
 	}
 	else
 	{
 		outputString [index++] = '6';
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	75fa      	strb	r2, [r7, #23]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2236      	movs	r2, #54	@ 0x36
 8001fc8:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	75fa      	strb	r2, [r7, #23]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	222c      	movs	r2, #44	@ 0x2c
 8001fd8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	75fa      	strb	r2, [r7, #23]
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	2240      	movs	r2, #64	@ 0x40
 8001fe8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	75fa      	strb	r2, [r7, #23]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	222c      	movs	r2, #44	@ 0x2c
 8001ff8:	701a      	strb	r2, [r3, #0]

 	//DIAG( "%d\r", tsStreamSCG.Counter);
 	memcpy ( outputString + index, x_pData, 64 );
 8001ffa:	7dfb      	ldrb	r3, [r7, #23]
 8001ffc:	6a3a      	ldr	r2, [r7, #32]
 8001ffe:	4413      	add	r3, r2
 8002000:	2240      	movs	r2, #64	@ 0x40
 8002002:	68b9      	ldr	r1, [r7, #8]
 8002004:	4618      	mov	r0, r3
 8002006:	f013 ffaa 	bl	8015f5e <memcpy>
 	index += 64;
 800200a:	7dfb      	ldrb	r3, [r7, #23]
 800200c:	3340      	adds	r3, #64	@ 0x40
 800200e:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	75fa      	strb	r2, [r7, #23]
 8002016:	461a      	mov	r2, r3
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	4413      	add	r3, r2
 800201c:	222c      	movs	r2, #44	@ 0x2c
 800201e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	1c5a      	adds	r2, r3, #1
 8002024:	75fa      	strb	r2, [r7, #23]
 8002026:	461a      	mov	r2, r3
 8002028:	6a3b      	ldr	r3, [r7, #32]
 800202a:	4413      	add	r3, r2
 800202c:	2243      	movs	r2, #67	@ 0x43
 800202e:	701a      	strb	r2, [r3, #0]
 	if ( sensor == Accelerometer)
 8002030:	7bfb      	ldrb	r3, [r7, #15]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d108      	bne.n	8002048 <IMU_StreamDataPack+0x108>
 	{
 		outputString [index++] = '4';
 8002036:	7dfb      	ldrb	r3, [r7, #23]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	75fa      	strb	r2, [r7, #23]
 800203c:	461a      	mov	r2, r3
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	4413      	add	r3, r2
 8002042:	2234      	movs	r2, #52	@ 0x34
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e007      	b.n	8002058 <IMU_StreamDataPack+0x118>
 	}
 	else
 	{
 		outputString [index++] = '7';
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	75fa      	strb	r2, [r7, #23]
 800204e:	461a      	mov	r2, r3
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	4413      	add	r3, r2
 8002054:	2237      	movs	r2, #55	@ 0x37
 8002056:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	75fa      	strb	r2, [r7, #23]
 800205e:	461a      	mov	r2, r3
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	4413      	add	r3, r2
 8002064:	222c      	movs	r2, #44	@ 0x2c
 8002066:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	75fa      	strb	r2, [r7, #23]
 800206e:	461a      	mov	r2, r3
 8002070:	6a3b      	ldr	r3, [r7, #32]
 8002072:	4413      	add	r3, r2
 8002074:	2240      	movs	r2, #64	@ 0x40
 8002076:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	75fa      	strb	r2, [r7, #23]
 800207e:	461a      	mov	r2, r3
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	4413      	add	r3, r2
 8002084:	222c      	movs	r2, #44	@ 0x2c
 8002086:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, y_pData, 64 );
 8002088:	7dfb      	ldrb	r3, [r7, #23]
 800208a:	6a3a      	ldr	r2, [r7, #32]
 800208c:	4413      	add	r3, r2
 800208e:	2240      	movs	r2, #64	@ 0x40
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4618      	mov	r0, r3
 8002094:	f013 ff63 	bl	8015f5e <memcpy>
 	index += 64;
 8002098:	7dfb      	ldrb	r3, [r7, #23]
 800209a:	3340      	adds	r3, #64	@ 0x40
 800209c:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 800209e:	7dfb      	ldrb	r3, [r7, #23]
 80020a0:	1c5a      	adds	r2, r3, #1
 80020a2:	75fa      	strb	r2, [r7, #23]
 80020a4:	461a      	mov	r2, r3
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	4413      	add	r3, r2
 80020aa:	222c      	movs	r2, #44	@ 0x2c
 80020ac:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80020ae:	7dfb      	ldrb	r3, [r7, #23]
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	75fa      	strb	r2, [r7, #23]
 80020b4:	461a      	mov	r2, r3
 80020b6:	6a3b      	ldr	r3, [r7, #32]
 80020b8:	4413      	add	r3, r2
 80020ba:	2243      	movs	r2, #67	@ 0x43
 80020bc:	701a      	strb	r2, [r3, #0]
 	if ( sensor == 0)
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d108      	bne.n	80020d6 <IMU_StreamDataPack+0x196>
 	{
 		outputString [index++] = '5';
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	75fa      	strb	r2, [r7, #23]
 80020ca:	461a      	mov	r2, r3
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	4413      	add	r3, r2
 80020d0:	2235      	movs	r2, #53	@ 0x35
 80020d2:	701a      	strb	r2, [r3, #0]
 80020d4:	e007      	b.n	80020e6 <IMU_StreamDataPack+0x1a6>
 	}
 	else
 	{
 		outputString [index++] = '8';
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	75fa      	strb	r2, [r7, #23]
 80020dc:	461a      	mov	r2, r3
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	4413      	add	r3, r2
 80020e2:	2238      	movs	r2, #56	@ 0x38
 80020e4:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	75fa      	strb	r2, [r7, #23]
 80020ec:	461a      	mov	r2, r3
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	4413      	add	r3, r2
 80020f2:	222c      	movs	r2, #44	@ 0x2c
 80020f4:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	75fa      	strb	r2, [r7, #23]
 80020fc:	461a      	mov	r2, r3
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	4413      	add	r3, r2
 8002102:	2240      	movs	r2, #64	@ 0x40
 8002104:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	75fa      	strb	r2, [r7, #23]
 800210c:	461a      	mov	r2, r3
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	4413      	add	r3, r2
 8002112:	222c      	movs	r2, #44	@ 0x2c
 8002114:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, z_pData, 64 );
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	6a3a      	ldr	r2, [r7, #32]
 800211a:	4413      	add	r3, r2
 800211c:	2240      	movs	r2, #64	@ 0x40
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f013 ff1c 	bl	8015f5e <memcpy>
}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000104e 	.word	0x2000104e
 8002134:	200019dc 	.word	0x200019dc

08002138 <HighPassFilter_Init>:
//--------------------------------------------------------------------------------------------

void HighPassFilter_Init(tsHighPassFilter *filter, float cutoff_freq, float sampling_rate)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	ed87 0a02 	vstr	s0, [r7, #8]
 8002144:	edc7 0a01 	vstr	s1, [r7, #4]
    float rc = 1.0 / (2.0 * M_PI * cutoff_freq);
 8002148:	68b8      	ldr	r0, [r7, #8]
 800214a:	f7fe f9d5 	bl	80004f8 <__aeabi_f2d>
 800214e:	a321      	add	r3, pc, #132	@ (adr r3, 80021d4 <HighPassFilter_Init+0x9c>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fa28 	bl	80005a8 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	f04f 0000 	mov.w	r0, #0
 8002160:	491b      	ldr	r1, [pc, #108]	@ (80021d0 <HighPassFilter_Init+0x98>)
 8002162:	f7fe fb4b 	bl	80007fc <__aeabi_ddiv>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f7fe fcdd 	bl	8000b2c <__aeabi_d2f>
 8002172:	4603      	mov	r3, r0
 8002174:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / sampling_rate;
 8002176:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800217a:	ed97 7a01 	vldr	s14, [r7, #4]
 800217e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002182:	edc7 7a04 	vstr	s15, [r7, #16]
    filter->alpha = rc / (rc + dt);
 8002186:	ed97 7a05 	vldr	s14, [r7, #20]
 800218a:	edd7 7a04 	vldr	s15, [r7, #16]
 800218e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002192:	edd7 6a05 	vldr	s13, [r7, #20]
 8002196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	edc3 7a00 	vstr	s15, [r3]

    filter->prev_input.x = 0;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = 0;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = 0;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = 0;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = 0;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = 0;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	81da      	strh	r2, [r3, #14]
}
 80021c4:	bf00      	nop
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	f3af 8000 	nop.w
 80021d0:	3ff00000 	.word	0x3ff00000
 80021d4:	54442d18 	.word	0x54442d18
 80021d8:	401921fb 	.word	0x401921fb

080021dc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80021dc:	b5b0      	push	{r4, r5, r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <APPD_EnableCPU2+0x34>)
 80021e4:	1d3c      	adds	r4, r7, #4
 80021e6:	461d      	mov	r5, r3
 80021e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021f0:	c403      	stmia	r4!, {r0, r1}
 80021f2:	8022      	strh	r2, [r4, #0]
 80021f4:	3402      	adds	r4, #2
 80021f6:	0c13      	lsrs	r3, r2, #16
 80021f8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80021fa:	f00f fd0f 	bl	8011c1c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	4618      	mov	r0, r3
 8002202:	f00e ffa0 	bl	8011146 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8002206:	bf00      	nop
}
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bdb0      	pop	{r4, r5, r7, pc}
 800220e:	bf00      	nop
 8002210:	08017e24 	.word	0x08017e24

08002214 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	460b      	mov	r3, r1
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002222:	897a      	ldrh	r2, [r7, #10]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68f9      	ldr	r1, [r7, #12]
 8002228:	2000      	movs	r0, #0
 800222a:	f001 fbad 	bl	8003988 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800222e:	bf00      	nop
}
 8002230:	3710      	adds	r7, #16
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 800223c:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <LL_PWR_SMPS_Enable+0x1c>)
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <LL_PWR_SMPS_Enable+0x1c>)
 8002242:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002246:	61d3      	str	r3, [r2, #28]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	58000400 	.word	0x58000400

08002258 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002268:	4904      	ldr	r1, [pc, #16]	@ (800227c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4313      	orrs	r3, r2
 800226e:	61cb      	str	r3, [r1, #28]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	58000400 	.word	0x58000400

08002280 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8002280:	b480      	push	{r7}
 8002282:	b087      	sub	sp, #28
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8002288:	4b18      	ldr	r3, [pc, #96]	@ (80022ec <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d108      	bne.n	80022ac <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800229a:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f023 020f 	bic.w	r2, r3, #15
 80022a2:	4913      	ldr	r1, [pc, #76]	@ (80022f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 80022aa:	e019      	b.n	80022e0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3b06      	subs	r3, #6
 80022b0:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	da02      	bge.n	80022c6 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	e004      	b.n	80022d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2b0f      	cmp	r3, #15
 80022ca:	dd01      	ble.n	80022d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80022cc:	230f      	movs	r3, #15
 80022ce:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80022d0:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	f023 020f 	bic.w	r2, r3, #15
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	4905      	ldr	r1, [pc, #20]	@ (80022f0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	61cb      	str	r3, [r1, #28]
}
 80022e0:	bf00      	nop
 80022e2:	371c      	adds	r7, #28
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	1fff7558 	.word	0x1fff7558
 80022f0:	58000400 	.word	0x58000400

080022f4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80022fc:	4b07      	ldr	r3, [pc, #28]	@ (800231c <LL_C2_PWR_SetPowerMode+0x28>)
 80022fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002302:	f023 0207 	bic.w	r2, r3, #7
 8002306:	4905      	ldr	r1, [pc, #20]	@ (800231c <LL_C2_PWR_SetPowerMode+0x28>)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4313      	orrs	r3, r2
 800230c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	58000400 	.word	0x58000400

08002320 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002328:	4b06      	ldr	r3, [pc, #24]	@ (8002344 <LL_EXTI_EnableIT_32_63+0x24>)
 800232a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800232e:	4905      	ldr	r1, [pc, #20]	@ (8002344 <LL_EXTI_EnableIT_32_63+0x24>)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	58000800 	.word	0x58000800

08002348 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002354:	4a0a      	ldr	r2, [pc, #40]	@ (8002380 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002356:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800235a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800235e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002362:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	021b      	lsls	r3, r3, #8
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800236e:	4313      	orrs	r3, r2
 8002370:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	cafecafe 	.word	0xcafecafe

08002384 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800238c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002396:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4313      	orrs	r3, r2
 800239e:	608b      	str	r3, [r1, #8]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80023ac:	b480      	push	{r7}
 80023ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80023f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002404:	d101      	bne.n	800240a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8002416:	b480      	push	{r7}
 8002418:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800241a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800242a:	d101      	bne.n	8002430 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002444:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002448:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800244a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4313      	orrs	r3, r2
 8002452:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002458:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4013      	ands	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002460:	68fb      	ldr	r3, [r7, #12]
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <LL_DBGMCU_GetDeviceID+0x18>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e0042000 	.word	0xe0042000

0800248c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002490:	4b04      	ldr	r3, [pc, #16]	@ (80024a4 <LL_DBGMCU_GetRevisionID+0x18>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	b29b      	uxth	r3, r3
}
 8002498:	4618      	mov	r0, r3
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e0042000 	.word	0xe0042000

080024a8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	041b      	lsls	r3, r3, #16
 80024ba:	431a      	orrs	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	605a      	str	r2, [r3, #4]
}
 80024c0:	bf00      	nop
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	605a      	str	r2, [r3, #4]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	041b      	lsls	r3, r3, #16
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	615a      	str	r2, [r3, #20]
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695a      	ldr	r2, [r3, #20]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	615a      	str	r2, [r3, #20]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	619a      	str	r2, [r3, #24]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002570:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <LL_LPM_EnableSleep+0x1c>)
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <LL_LPM_EnableSleep+0x1c>)
 8002576:	f023 0304 	bic.w	r3, r3, #4
 800257a:	6113      	str	r3, [r2, #16]
}
 800257c:	bf00      	nop
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	22ff      	movs	r2, #255	@ 0xff
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	22ca      	movs	r2, #202	@ 0xca
 80025b2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2253      	movs	r2, #83	@ 0x53
 80025b8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr

080025c6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f023 0207 	bic.w	r2, r3, #7
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	431a      	orrs	r2, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	609a      	str	r2, [r3, #8]
}
 80025e0:	bf00      	nop
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025f0:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <MX_APPE_Config+0x18>)
 80025f2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025f6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80025f8:	f000 f829 	bl	800264e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80025fc:	f000 f868 	bl	80026d0 <Config_HSE>

  return;
 8002600:	bf00      	nop
}
 8002602:	bd80      	pop	{r7, pc}
 8002604:	58004000 	.word	0x58004000

08002608 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800260c:	f000 f874 	bl	80026f8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8002610:	f000 f88c 	bl	800272c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8002614:	4903      	ldr	r1, [pc, #12]	@ (8002624 <MX_APPE_Init+0x1c>)
 8002616:	2000      	movs	r0, #0
 8002618:	f000 ffc4 	bl	80035a4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800261c:	f000 f896 	bl	800274c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002620:	bf00      	nop
}
 8002622:	bd80      	pop	{r7, pc}
 8002624:	2000170c 	.word	0x2000170c

08002628 <Init_Smps>:

void Init_Smps(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 800262c:	2000      	movs	r0, #0
 800262e:	f7ff fe13 	bl	8002258 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8002632:	2004      	movs	r0, #4
 8002634:	f7ff fe24 	bl	8002280 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8002638:	f7ff fdfe 	bl	8002238 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 800263c:	bf00      	nop
}
 800263e:	bd80      	pop	{r7, pc}

08002640 <Init_Exti>:

void Init_Exti(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002644:	2050      	movs	r0, #80	@ 0x50
 8002646:	f7ff fe6b 	bl	8002320 <LL_EXTI_EnableIT_32_63>

  return;
 800264a:	bf00      	nop
}
 800264c:	bd80      	pop	{r7, pc}

0800264e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8002652:	f000 f804 	bl	800265e <Reset_BackupDomain>

  Reset_IPCC();
 8002656:	f000 f819 	bl	800268c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800265a:	bf00      	nop
}
 800265c:	bd80      	pop	{r7, pc}

0800265e <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800265e:	b580      	push	{r7, lr}
 8002660:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002662:	f7ff fec5 	bl	80023f0 <LL_RCC_IsActiveFlag_PINRST>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00d      	beq.n	8002688 <Reset_BackupDomain+0x2a>
 800266c:	f7ff fed3 	bl	8002416 <LL_RCC_IsActiveFlag_SFTRST>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002676:	f005 fc5d 	bl	8007f34 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800267a:	f005 fc5b 	bl	8007f34 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800267e:	f7ff fe95 	bl	80023ac <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002682:	f7ff fea4 	bl	80023ce <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002686:	bf00      	nop
 8002688:	bf00      	nop
}
 800268a:	bd80      	pop	{r7, pc}

0800268c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002690:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002694:	f7ff fed2 	bl	800243c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002698:	213f      	movs	r1, #63	@ 0x3f
 800269a:	480c      	ldr	r0, [pc, #48]	@ (80026cc <Reset_IPCC+0x40>)
 800269c:	f7ff ff4a 	bl	8002534 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80026a0:	213f      	movs	r1, #63	@ 0x3f
 80026a2:	480a      	ldr	r0, [pc, #40]	@ (80026cc <Reset_IPCC+0x40>)
 80026a4:	f7ff ff54 	bl	8002550 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80026a8:	213f      	movs	r1, #63	@ 0x3f
 80026aa:	4808      	ldr	r0, [pc, #32]	@ (80026cc <Reset_IPCC+0x40>)
 80026ac:	f7ff fefc 	bl	80024a8 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80026b0:	213f      	movs	r1, #63	@ 0x3f
 80026b2:	4806      	ldr	r0, [pc, #24]	@ (80026cc <Reset_IPCC+0x40>)
 80026b4:	f7ff ff1b 	bl	80024ee <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80026b8:	213f      	movs	r1, #63	@ 0x3f
 80026ba:	4804      	ldr	r0, [pc, #16]	@ (80026cc <Reset_IPCC+0x40>)
 80026bc:	f7ff ff06 	bl	80024cc <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80026c0:	213f      	movs	r1, #63	@ 0x3f
 80026c2:	4802      	ldr	r0, [pc, #8]	@ (80026cc <Reset_IPCC+0x40>)
 80026c4:	f7ff ff25 	bl	8002512 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80026c8:	bf00      	nop
}
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	58000c00 	.word	0x58000c00

080026d0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f00f fbf4 	bl	8011ec4 <OTP_Read>
 80026dc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d005      	beq.n	80026f0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	799b      	ldrb	r3, [r3, #6]
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fe2d 	bl	8002348 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
}
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <System_Init>:

static void System_Init(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  Init_Smps();
 80026fc:	f7ff ff94 	bl	8002628 <Init_Smps>

  Init_Exti();
 8002700:	f7ff ff9e 	bl	8002640 <Init_Exti>

  Init_Rtc();
 8002704:	f000 f802 	bl	800270c <Init_Rtc>

  return;
 8002708:	bf00      	nop
}
 800270a:	bd80      	pop	{r7, pc}

0800270c <Init_Rtc>:

static void Init_Rtc(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8002710:	4805      	ldr	r0, [pc, #20]	@ (8002728 <Init_Rtc+0x1c>)
 8002712:	f7ff ff48 	bl	80025a6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8002716:	2100      	movs	r1, #0
 8002718:	4803      	ldr	r0, [pc, #12]	@ (8002728 <Init_Rtc+0x1c>)
 800271a:	f7ff ff54 	bl	80025c6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800271e:	4802      	ldr	r0, [pc, #8]	@ (8002728 <Init_Rtc+0x1c>)
 8002720:	f7ff ff34 	bl	800258c <LL_RTC_EnableWriteProtection>

  return;
 8002724:	bf00      	nop
}
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40002800 	.word	0x40002800

0800272c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002730:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002734:	f7ff fe26 	bl	8002384 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002738:	f012 feda 	bl	80154f0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800273c:	2004      	movs	r0, #4
 800273e:	f7ff fdd9 	bl	80022f4 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8002742:	f005 fc15 	bl	8007f70 <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002746:	bf00      	nop
}
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b088      	sub	sp, #32
 8002750:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002752:	f00f f8ad 	bl	80118b0 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002756:	4a11      	ldr	r2, [pc, #68]	@ (800279c <appe_Tl_Init+0x50>)
 8002758:	2100      	movs	r1, #0
 800275a:	2040      	movs	r0, #64	@ 0x40
 800275c:	f013 f806 	bl	801576c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002760:	4b0f      	ldr	r3, [pc, #60]	@ (80027a0 <appe_Tl_Init+0x54>)
 8002762:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002764:	4b0f      	ldr	r3, [pc, #60]	@ (80027a4 <appe_Tl_Init+0x58>)
 8002766:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002768:	463b      	mov	r3, r7
 800276a:	4619      	mov	r1, r3
 800276c:	480e      	ldr	r0, [pc, #56]	@ (80027a8 <appe_Tl_Init+0x5c>)
 800276e:	f00e ff61 	bl	8011634 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002772:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <appe_Tl_Init+0x60>)
 8002774:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002776:	4b0e      	ldr	r3, [pc, #56]	@ (80027b0 <appe_Tl_Init+0x64>)
 8002778:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800277a:	4b0e      	ldr	r3, [pc, #56]	@ (80027b4 <appe_Tl_Init+0x68>)
 800277c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800277e:	f641 232c 	movw	r3, #6700	@ 0x1a2c
 8002782:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	4618      	mov	r0, r3
 800278a:	f00f f9d3 	bl	8011b34 <TL_MM_Init>

  TL_Enable();
 800278e:	f00f f889 	bl	80118a4 <TL_Enable>

  return;
 8002792:	bf00      	nop
}
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	0801166d 	.word	0x0801166d
 80027a0:	20031c24 	.word	0x20031c24
 80027a4:	080027b9 	.word	0x080027b9
 80027a8:	080027d1 	.word	0x080027d1
 80027ac:	20031e3c 	.word	0x20031e3c
 80027b0:	20031d30 	.word	0x20031d30
 80027b4:	200301f8 	.word	0x200301f8

080027b8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80027c2:	bf00      	nop
}
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	330b      	adds	r3, #11
 80027de:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80027ea:	2b07      	cmp	r3, #7
 80027ec:	f200 80d0 	bhi.w	8002990 <APPE_SysUserEvtRx+0x1c0>
 80027f0:	a201      	add	r2, pc, #4	@ (adr r2, 80027f8 <APPE_SysUserEvtRx+0x28>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	08002819 	.word	0x08002819
 80027fc:	080028ab 	.word	0x080028ab
 8002800:	080028cd 	.word	0x080028cd
 8002804:	08002991 	.word	0x08002991
 8002808:	08002911 	.word	0x08002911
 800280c:	08002935 	.word	0x08002935
 8002810:	08002951 	.word	0x08002951
 8002814:	08002975 	.word	0x08002975
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	4618      	mov	r0, r3
 800281e:	f00e fcbf 	bl	80111a0 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8002822:	485e      	ldr	r0, [pc, #376]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 8002824:	f00f fa86 	bl	8011d34 <DbgTraceGetFileName>
 8002828:	4601      	mov	r1, r0
 800282a:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 800282e:	4a5c      	ldr	r2, [pc, #368]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 8002830:	485c      	ldr	r0, [pc, #368]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002832:	f013 f97b 	bl	8015b2c <iprintf>
 8002836:	7b3b      	ldrb	r3, [r7, #12]
 8002838:	4619      	mov	r1, r3
 800283a:	7b7b      	ldrb	r3, [r7, #13]
 800283c:	461a      	mov	r2, r3
 800283e:	7bbb      	ldrb	r3, [r7, #14]
 8002840:	4859      	ldr	r0, [pc, #356]	@ (80029a8 <APPE_SysUserEvtRx+0x1d8>)
 8002842:	f013 f973 	bl	8015b2c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8002846:	4855      	ldr	r0, [pc, #340]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 8002848:	f00f fa74 	bl	8011d34 <DbgTraceGetFileName>
 800284c:	4601      	mov	r1, r0
 800284e:	f240 136b 	movw	r3, #363	@ 0x16b
 8002852:	4a53      	ldr	r2, [pc, #332]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 8002854:	4853      	ldr	r0, [pc, #332]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002856:	f013 f969 	bl	8015b2c <iprintf>
 800285a:	7c3b      	ldrb	r3, [r7, #16]
 800285c:	4619      	mov	r1, r3
 800285e:	4853      	ldr	r0, [pc, #332]	@ (80029ac <APPE_SysUserEvtRx+0x1dc>)
 8002860:	f013 f964 	bl	8015b2c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8002864:	484d      	ldr	r0, [pc, #308]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 8002866:	f00f fa65 	bl	8011d34 <DbgTraceGetFileName>
 800286a:	4601      	mov	r1, r0
 800286c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002870:	4a4b      	ldr	r2, [pc, #300]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 8002872:	484c      	ldr	r0, [pc, #304]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002874:	f013 f95a 	bl	8015b2c <iprintf>
 8002878:	7dbb      	ldrb	r3, [r7, #22]
 800287a:	4619      	mov	r1, r3
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	461a      	mov	r2, r3
 8002880:	7e3b      	ldrb	r3, [r7, #24]
 8002882:	484b      	ldr	r0, [pc, #300]	@ (80029b0 <APPE_SysUserEvtRx+0x1e0>)
 8002884:	f013 f952 	bl	8015b2c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8002888:	4844      	ldr	r0, [pc, #272]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 800288a:	f00f fa53 	bl	8011d34 <DbgTraceGetFileName>
 800288e:	4601      	mov	r1, r0
 8002890:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8002894:	4a42      	ldr	r2, [pc, #264]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 8002896:	4843      	ldr	r0, [pc, #268]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002898:	f013 f948 	bl	8015b2c <iprintf>
 800289c:	4845      	ldr	r0, [pc, #276]	@ (80029b4 <APPE_SysUserEvtRx+0x1e4>)
 800289e:	f013 f945 	bl	8015b2c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8e0 	bl	8002a68 <APPE_SysEvtReadyProcessing>
    break;
 80028a8:	e073      	b.n	8002992 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80028aa:	483c      	ldr	r0, [pc, #240]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 80028ac:	f00f fa42 	bl	8011d34 <DbgTraceGetFileName>
 80028b0:	4601      	mov	r1, r0
 80028b2:	f240 1373 	movw	r3, #371	@ 0x173
 80028b6:	4a3a      	ldr	r2, [pc, #232]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 80028b8:	483a      	ldr	r0, [pc, #232]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 80028ba:	f013 f937 	bl	8015b2c <iprintf>
 80028be:	483e      	ldr	r0, [pc, #248]	@ (80029b8 <APPE_SysUserEvtRx+0x1e8>)
 80028c0:	f013 f934 	bl	8015b2c <iprintf>
    APPE_SysEvtError(pPayload);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f885 	bl	80029d4 <APPE_SysEvtError>
    break;
 80028ca:	e062      	b.n	8002992 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80028cc:	4833      	ldr	r0, [pc, #204]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 80028ce:	f00f fa31 	bl	8011d34 <DbgTraceGetFileName>
 80028d2:	4601      	mov	r1, r0
 80028d4:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 80028d8:	4a31      	ldr	r2, [pc, #196]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 80028da:	4832      	ldr	r0, [pc, #200]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 80028dc:	f013 f926 	bl	8015b2c <iprintf>
 80028e0:	4836      	ldr	r0, [pc, #216]	@ (80029bc <APPE_SysUserEvtRx+0x1ec>)
 80028e2:	f013 f993 	bl	8015c0c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80028e6:	482d      	ldr	r0, [pc, #180]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 80028e8:	f00f fa24 	bl	8011d34 <DbgTraceGetFileName>
 80028ec:	4601      	mov	r1, r0
 80028ee:	f240 1379 	movw	r3, #377	@ 0x179
 80028f2:	4a2b      	ldr	r2, [pc, #172]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 80028f4:	482b      	ldr	r0, [pc, #172]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 80028f6:	f013 f919 	bl	8015b2c <iprintf>
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	3302      	adds	r3, #2
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3302      	adds	r3, #2
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	461a      	mov	r2, r3
 8002908:	482d      	ldr	r0, [pc, #180]	@ (80029c0 <APPE_SysUserEvtRx+0x1f0>)
 800290a:	f013 f90f 	bl	8015b2c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 800290e:	e040      	b.n	8002992 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8002910:	4822      	ldr	r0, [pc, #136]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 8002912:	f00f fa0f 	bl	8011d34 <DbgTraceGetFileName>
 8002916:	4601      	mov	r1, r0
 8002918:	f240 137f 	movw	r3, #383	@ 0x17f
 800291c:	4a20      	ldr	r2, [pc, #128]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 800291e:	4821      	ldr	r0, [pc, #132]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002920:	f013 f904 	bl	8015b2c <iprintf>
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	3302      	adds	r3, #2
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4619      	mov	r1, r3
 800292c:	4825      	ldr	r0, [pc, #148]	@ (80029c4 <APPE_SysUserEvtRx+0x1f4>)
 800292e:	f013 f8fd 	bl	8015b2c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8002932:	e02e      	b.n	8002992 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8002934:	4819      	ldr	r0, [pc, #100]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 8002936:	f00f f9fd 	bl	8011d34 <DbgTraceGetFileName>
 800293a:	4601      	mov	r1, r0
 800293c:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8002940:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 8002942:	4818      	ldr	r0, [pc, #96]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002944:	f013 f8f2 	bl	8015b2c <iprintf>
 8002948:	481f      	ldr	r0, [pc, #124]	@ (80029c8 <APPE_SysUserEvtRx+0x1f8>)
 800294a:	f013 f8ef 	bl	8015b2c <iprintf>
    break;
 800294e:	e020      	b.n	8002992 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8002950:	4812      	ldr	r0, [pc, #72]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 8002952:	f00f f9ef 	bl	8011d34 <DbgTraceGetFileName>
 8002956:	4601      	mov	r1, r0
 8002958:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 800295c:	4a10      	ldr	r2, [pc, #64]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 800295e:	4811      	ldr	r0, [pc, #68]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002960:	f013 f8e4 	bl	8015b2c <iprintf>
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	3302      	adds	r3, #2
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4619      	mov	r1, r3
 800296c:	4817      	ldr	r0, [pc, #92]	@ (80029cc <APPE_SysUserEvtRx+0x1fc>)
 800296e:	f013 f8dd 	bl	8015b2c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8002972:	e00e      	b.n	8002992 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8002974:	4809      	ldr	r0, [pc, #36]	@ (800299c <APPE_SysUserEvtRx+0x1cc>)
 8002976:	f00f f9dd 	bl	8011d34 <DbgTraceGetFileName>
 800297a:	4601      	mov	r1, r0
 800297c:	f240 138d 	movw	r3, #397	@ 0x18d
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <APPE_SysUserEvtRx+0x1d0>)
 8002982:	4808      	ldr	r0, [pc, #32]	@ (80029a4 <APPE_SysUserEvtRx+0x1d4>)
 8002984:	f013 f8d2 	bl	8015b2c <iprintf>
 8002988:	4811      	ldr	r0, [pc, #68]	@ (80029d0 <APPE_SysUserEvtRx+0x200>)
 800298a:	f013 f8cf 	bl	8015b2c <iprintf>
    break;
 800298e:	e000      	b.n	8002992 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8002990:	bf00      	nop
  }

  return;
 8002992:	bf00      	nop
}
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	08017e40 	.word	0x08017e40
 80029a0:	08019bb8 	.word	0x08019bb8
 80029a4:	08017e58 	.word	0x08017e58
 80029a8:	08017e6c 	.word	0x08017e6c
 80029ac:	08017e90 	.word	0x08017e90
 80029b0:	08017eac 	.word	0x08017eac
 80029b4:	08017ec4 	.word	0x08017ec4
 80029b8:	08017ee4 	.word	0x08017ee4
 80029bc:	08017f08 	.word	0x08017f08
 80029c0:	08017f58 	.word	0x08017f58
 80029c4:	08017f80 	.word	0x08017f80
 80029c8:	08017fbc 	.word	0x08017fbc
 80029cc:	08017fe0 	.word	0x08017fe0
 80029d0:	0801801c 	.word	0x0801801c

080029d4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	330b      	adds	r3, #11
 80029e2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	3302      	adds	r3, #2
 80029e8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80029ea:	4819      	ldr	r0, [pc, #100]	@ (8002a50 <APPE_SysEvtError+0x7c>)
 80029ec:	f00f f9a2 	bl	8011d34 <DbgTraceGetFileName>
 80029f0:	4601      	mov	r1, r0
 80029f2:	f240 13a5 	movw	r3, #421	@ 0x1a5
 80029f6:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <APPE_SysEvtError+0x80>)
 80029f8:	4817      	ldr	r0, [pc, #92]	@ (8002a58 <APPE_SysEvtError+0x84>)
 80029fa:	f013 f897 	bl	8015b2c <iprintf>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	4619      	mov	r1, r3
 8002a04:	4815      	ldr	r0, [pc, #84]	@ (8002a5c <APPE_SysEvtError+0x88>)
 8002a06:	f013 f891 	bl	8015b2c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10d      	bne.n	8002a2e <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8002a12:	480f      	ldr	r0, [pc, #60]	@ (8002a50 <APPE_SysEvtError+0x7c>)
 8002a14:	f00f f98e 	bl	8011d34 <DbgTraceGetFileName>
 8002a18:	4601      	mov	r1, r0
 8002a1a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8002a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8002a54 <APPE_SysEvtError+0x80>)
 8002a20:	480d      	ldr	r0, [pc, #52]	@ (8002a58 <APPE_SysEvtError+0x84>)
 8002a22:	f013 f883 	bl	8015b2c <iprintf>
 8002a26:	480e      	ldr	r0, [pc, #56]	@ (8002a60 <APPE_SysEvtError+0x8c>)
 8002a28:	f013 f8f0 	bl	8015c0c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002a2c:	e00d      	b.n	8002a4a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8002a2e:	4808      	ldr	r0, [pc, #32]	@ (8002a50 <APPE_SysEvtError+0x7c>)
 8002a30:	f00f f980 	bl	8011d34 <DbgTraceGetFileName>
 8002a34:	4601      	mov	r1, r0
 8002a36:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8002a3a:	4a06      	ldr	r2, [pc, #24]	@ (8002a54 <APPE_SysEvtError+0x80>)
 8002a3c:	4806      	ldr	r0, [pc, #24]	@ (8002a58 <APPE_SysEvtError+0x84>)
 8002a3e:	f013 f875 	bl	8015b2c <iprintf>
 8002a42:	4808      	ldr	r0, [pc, #32]	@ (8002a64 <APPE_SysEvtError+0x90>)
 8002a44:	f013 f8e2 	bl	8015c0c <puts>
  return;
 8002a48:	bf00      	nop
}
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	08017e40 	.word	0x08017e40
 8002a54:	08019bcc 	.word	0x08019bcc
 8002a58:	08017e58 	.word	0x08017e58
 8002a5c:	08018040 	.word	0x08018040
 8002a60:	08018070 	.word	0x08018070
 8002a64:	080180ac 	.word	0x080180ac

08002a68 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	@ 0x28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002a70:	f107 0308 	add.w	r3, r7, #8
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	330b      	adds	r3, #11
 8002a8c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3302      	adds	r3, #2
 8002a92:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d146      	bne.n	8002b2a <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8002a9c:	4836      	ldr	r0, [pc, #216]	@ (8002b78 <APPE_SysEvtReadyProcessing+0x110>)
 8002a9e:	f00f f949 	bl	8011d34 <DbgTraceGetFileName>
 8002aa2:	4601      	mov	r1, r0
 8002aa4:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002aa8:	4a34      	ldr	r2, [pc, #208]	@ (8002b7c <APPE_SysEvtReadyProcessing+0x114>)
 8002aaa:	4835      	ldr	r0, [pc, #212]	@ (8002b80 <APPE_SysEvtReadyProcessing+0x118>)
 8002aac:	f013 f83e 	bl	8015b2c <iprintf>
 8002ab0:	4834      	ldr	r0, [pc, #208]	@ (8002b84 <APPE_SysEvtReadyProcessing+0x11c>)
 8002ab2:	f013 f8ab 	bl	8015c0c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002ab6:	f7ff fb91 	bl	80021dc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002aba:	230f      	movs	r3, #15
 8002abc:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002abe:	237f      	movs	r3, #127	@ 0x7f
 8002ac0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002ac2:	f7ff fce3 	bl	800248c <LL_DBGMCU_GetRevisionID>
 8002ac6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002ac8:	482b      	ldr	r0, [pc, #172]	@ (8002b78 <APPE_SysEvtReadyProcessing+0x110>)
 8002aca:	f00f f933 	bl	8011d34 <DbgTraceGetFileName>
 8002ace:	4601      	mov	r1, r0
 8002ad0:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8002ad4:	4a29      	ldr	r2, [pc, #164]	@ (8002b7c <APPE_SysEvtReadyProcessing+0x114>)
 8002ad6:	482a      	ldr	r0, [pc, #168]	@ (8002b80 <APPE_SysEvtReadyProcessing+0x118>)
 8002ad8:	f013 f828 	bl	8015b2c <iprintf>
 8002adc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ade:	482a      	ldr	r0, [pc, #168]	@ (8002b88 <APPE_SysEvtReadyProcessing+0x120>)
 8002ae0:	f013 f824 	bl	8015b2c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002aea:	f7ff fcc1 	bl	8002470 <LL_DBGMCU_GetDeviceID>
 8002aee:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8002af0:	4821      	ldr	r0, [pc, #132]	@ (8002b78 <APPE_SysEvtReadyProcessing+0x110>)
 8002af2:	f00f f91f 	bl	8011d34 <DbgTraceGetFileName>
 8002af6:	4601      	mov	r1, r0
 8002af8:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8002afc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b7c <APPE_SysEvtReadyProcessing+0x114>)
 8002afe:	4820      	ldr	r0, [pc, #128]	@ (8002b80 <APPE_SysEvtReadyProcessing+0x118>)
 8002b00:	f013 f814 	bl	8015b2c <iprintf>
 8002b04:	6a39      	ldr	r1, [r7, #32]
 8002b06:	4821      	ldr	r0, [pc, #132]	@ (8002b8c <APPE_SysEvtReadyProcessing+0x124>)
 8002b08:	f013 f810 	bl	8015b2c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8002b12:	f107 0308 	add.w	r3, r7, #8
 8002b16:	4618      	mov	r0, r3
 8002b18:	f00e fb2c 	bl	8011174 <SHCI_C2_Config>

    APP_BLE_Init();
 8002b1c:	f00f febc 	bl	8012898 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002b20:	2100      	movs	r1, #0
 8002b22:	2001      	movs	r0, #1
 8002b24:	f012 fcf6 	bl	8015514 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002b28:	e022      	b.n	8002b70 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d110      	bne.n	8002b54 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8002b32:	4811      	ldr	r0, [pc, #68]	@ (8002b78 <APPE_SysEvtReadyProcessing+0x110>)
 8002b34:	f00f f8fe 	bl	8011d34 <DbgTraceGetFileName>
 8002b38:	4601      	mov	r1, r0
 8002b3a:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b7c <APPE_SysEvtReadyProcessing+0x114>)
 8002b40:	480f      	ldr	r0, [pc, #60]	@ (8002b80 <APPE_SysEvtReadyProcessing+0x118>)
 8002b42:	f012 fff3 	bl	8015b2c <iprintf>
 8002b46:	4812      	ldr	r0, [pc, #72]	@ (8002b90 <APPE_SysEvtReadyProcessing+0x128>)
 8002b48:	f012 fff0 	bl	8015b2c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
  return;
 8002b52:	e00d      	b.n	8002b70 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8002b54:	4808      	ldr	r0, [pc, #32]	@ (8002b78 <APPE_SysEvtReadyProcessing+0x110>)
 8002b56:	f00f f8ed 	bl	8011d34 <DbgTraceGetFileName>
 8002b5a:	4601      	mov	r1, r0
 8002b5c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002b60:	4a06      	ldr	r2, [pc, #24]	@ (8002b7c <APPE_SysEvtReadyProcessing+0x114>)
 8002b62:	4807      	ldr	r0, [pc, #28]	@ (8002b80 <APPE_SysEvtReadyProcessing+0x118>)
 8002b64:	f012 ffe2 	bl	8015b2c <iprintf>
 8002b68:	480a      	ldr	r0, [pc, #40]	@ (8002b94 <APPE_SysEvtReadyProcessing+0x12c>)
 8002b6a:	f012 ffdf 	bl	8015b2c <iprintf>
  return;
 8002b6e:	bf00      	nop
}
 8002b70:	3728      	adds	r7, #40	@ 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	08017e40 	.word	0x08017e40
 8002b7c:	08019be0 	.word	0x08019be0
 8002b80:	08017e58 	.word	0x08017e58
 8002b84:	080180e4 	.word	0x080180e4
 8002b88:	08018100 	.word	0x08018100
 8002b8c:	08018124 	.word	0x08018124
 8002b90:	08018144 	.word	0x08018144
 8002b94:	08018178 	.word	0x08018178

08002b98 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f002 fa08 	bl	8004fb4 <HAL_GetTick>
 8002ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d00a      	beq.n	8002bc8 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002bb2:	f002 fa17 	bl	8004fe4 <HAL_GetTickFreq>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bc0:	e002      	b.n	8002bc8 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002bc2:	f7ff fcd3 	bl	800256c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8002bc6:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002bc8:	f002 f9f4 	bl	8004fb4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d8f4      	bhi.n	8002bc2 <HAL_Delay+0x2a>
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002be6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bea:	f012 fcc3 	bl	8015574 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002bf6:	bf00      	nop
}
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr

08002c00 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0e:	f012 fcb1 	bl	8015574 <UTIL_SEQ_Run>
  return;
 8002c12:	bf00      	nop
}
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002c22:	2100      	movs	r1, #0
 8002c24:	2040      	movs	r0, #64	@ 0x40
 8002c26:	f012 fdc3 	bl	80157b0 <UTIL_SEQ_SetTask>
  return;
 8002c2a:	bf00      	nop
}
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002c3a:	2002      	movs	r0, #2
 8002c3c:	f012 fe24 	bl	8015888 <UTIL_SEQ_SetEvt>
  return;
 8002c40:	bf00      	nop
}
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002c50:	2002      	movs	r0, #2
 8002c52:	f012 fe39 	bl	80158c8 <UTIL_SEQ_WaitEvt>
  return;
 8002c56:	bf00      	nop
}
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <Debug_Init>:
uint16_t u16dummy =0;


//-----------------------------------------------------------------------------------
void Debug_Init (void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0

	DIAG ("\t\tDebug initialised\r\n");
 8002c64:	4803      	ldr	r0, [pc, #12]	@ (8002c74 <Debug_Init+0x14>)
 8002c66:	f000 f833 	bl	8002cd0 <DIAG>
	HAL_Delay(10);
 8002c6a:	200a      	movs	r0, #10
 8002c6c:	f7ff ff94 	bl	8002b98 <HAL_Delay>
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	080181ac 	.word	0x080181ac

08002c78 <Debug_Control>:

//-----------------------------------------------------------------------------------
void Debug_Control (void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af02      	add	r7, sp, #8

#ifndef BLE_Debug
#ifdef DATA_DEBUG_EN

		#ifndef IMU_ENABLE
			if ( tsDebug.bReleaseAFEData )
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <Debug_Control+0x48>)
 8002c80:	f893 3266 	ldrb.w	r3, [r3, #614]	@ 0x266
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d018      	beq.n	8002cba <Debug_Control+0x42>
			{
//				DIAG ( "%d,%d,%d\r\n", tsDebug.i16TxTMR1, tsDebug.i16TxTMR2, tsDebug.i16TxEMG );
//				DIAG ( "%d,%d,%d,%d,%d\r\n", tsDebug.i16TxTMR1, tsDebug.i16TxTMR2, tsDebug.i16TxEMG, tsDebug.u8PacketCount[0], tsDebug.u8PacketCount[1] );

				DIAG (  "[%d - %d]-%d,%d\r\n", AFE.u16SPS, IMU.u16SPS, tsDebug.i16TxTMR1, tsDebug.i16TxTMR2 );
 8002c88:	4b0e      	ldr	r3, [pc, #56]	@ (8002cc4 <Debug_Control+0x4c>)
 8002c8a:	885b      	ldrh	r3, [r3, #2]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4619      	mov	r1, r3
 8002c90:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <Debug_Control+0x50>)
 8002c92:	f8b3 31c4 	ldrh.w	r3, [r3, #452]	@ 0x1c4
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <Debug_Control+0x48>)
 8002c9c:	f9b3 3260 	ldrsh.w	r3, [r3, #608]	@ 0x260
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <Debug_Control+0x48>)
 8002ca4:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	4603      	mov	r3, r0
 8002cac:	4807      	ldr	r0, [pc, #28]	@ (8002ccc <Debug_Control+0x54>)
 8002cae:	f000 f80f 	bl	8002cd0 <DIAG>

				tsDebug.bReleaseAFEData= false;
 8002cb2:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <Debug_Control+0x48>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2266 	strb.w	r2, [r3, #614]	@ 0x266
			}
		#endif

#endif
#endif
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	20001324 	.word	0x20001324
 8002cc4:	2000193c 	.word	0x2000193c
 8002cc8:	20000e80 	.word	0x20000e80
 8002ccc:	080181c4 	.word	0x080181c4

08002cd0 <DIAG>:
   // HAL_UART_Transmit_DMA(&huart1, (uint8_t*)buffer, strlen(buffer) );
   // HAL_UART_DMAResume(&huart1);
}
#else

void DIAG(const char *fmt, ...) {
 8002cd0:	b40f      	push	{r0, r1, r2, r3}
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8002cd8:	af00      	add	r7, sp, #0
    char buffer[4048];
    va_list args;
    va_start(args, fmt);
 8002cda:	f607 72e4 	addw	r2, r7, #4068	@ 0xfe4
 8002cde:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002ce2:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002ce6:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002ce8:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002cec:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002cf0:	f107 0008 	add.w	r0, r7, #8
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	@ 0xfe0
 8002cfa:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8002cfe:	f012 fffb 	bl	8015cf8 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002d02:	f107 0308 	add.w	r3, r7, #8
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fd fa3a 	bl	8000180 <strlen>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	f107 0308 	add.w	r3, r7, #8
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f011 ff48 	bl	8014bac <CDC_Transmit_FS>
}
 8002d1c:	bf00      	nop
 8002d1e:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d28:	b004      	add	sp, #16
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_EXTI_Callback>:
	HAL_Delay (10);
}

//----------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]

	//----------------------------------------------
	if (GPIO_Pin == ADS_DRDY_Pin)
 8002d36:	88fb      	ldrh	r3, [r7, #6]
 8002d38:	2b80      	cmp	r3, #128	@ 0x80
 8002d3a:	d105      	bne.n	8002d48 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ADS.DRDY = true;
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <HAL_GPIO_EXTI_Callback+0x40>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(ADS_DRDY_Pin);
 8002d42:	4b0b      	ldr	r3, [pc, #44]	@ (8002d70 <HAL_GPIO_EXTI_Callback+0x44>)
 8002d44:	2280      	movs	r2, #128	@ 0x80
 8002d46:	60da      	str	r2, [r3, #12]
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT1_Pin)
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d109      	bne.n	8002d62 <HAL_GPIO_EXTI_Callback+0x36>
	{
		IMU.bInt1 = true;
 8002d4e:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_GPIO_EXTI_Callback+0x48>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 21c6 	strb.w	r2, [r3, #454]	@ 0x1c6
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_GPIO_EXTI_Callback+0x44>)
 8002d58:	2210      	movs	r2, #16
 8002d5a:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT1 \r\n");
 8002d5c:	4806      	ldr	r0, [pc, #24]	@ (8002d78 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002d5e:	f7ff ffb7 	bl	8002cd0 <DIAG>
//		tsSystem.OFF = true;
//		__HAL_GPIO_EXTI_CLEAR_IT(PWR_ON_Pin);
//		DIAG (" PWR SW Pressed \r\n");
	}

}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	20000214 	.word	0x20000214
 8002d70:	58000800 	.word	0x58000800
 8002d74:	20000e80 	.word	0x20000e80
 8002d78:	080181f0 	.word	0x080181f0

08002d7c <LL_EXTI_EnableIT_0_31>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d86:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d8a:	4905      	ldr	r1, [pc, #20]	@ (8002da0 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	58000800 	.word	0x58000800

08002da4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002dac:	4b05      	ldr	r3, [pc, #20]	@ (8002dc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4904      	ldr	r1, [pc, #16]	@ (8002dc4 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	600b      	str	r3, [r1, #0]

}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	58000800 	.word	0x58000800

08002dc8 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <ReadRtcSsrValue+0x3c>)
 8002dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <ReadRtcSsrValue+0x3c>)
 8002dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002dde:	e005      	b.n	8002dec <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002de4:	4b07      	ldr	r3, [pc, #28]	@ (8002e04 <ReadRtcSsrValue+0x3c>)
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d1f5      	bne.n	8002de0 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002df4:	683b      	ldr	r3, [r7, #0]
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	40002800 	.word	0x40002800

08002e08 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	460a      	mov	r2, r1
 8002e12:	71fb      	strb	r3, [r7, #7]
 8002e14:	4613      	mov	r3, r2
 8002e16:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002e18:	79ba      	ldrb	r2, [r7, #6]
 8002e1a:	491d      	ldr	r1, [pc, #116]	@ (8002e90 <LinkTimerAfter+0x88>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4413      	add	r3, r2
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	440b      	add	r3, r1
 8002e26:	3315      	adds	r3, #21
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	2b06      	cmp	r3, #6
 8002e30:	d009      	beq.n	8002e46 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002e32:	7bfa      	ldrb	r2, [r7, #15]
 8002e34:	4916      	ldr	r1, [pc, #88]	@ (8002e90 <LinkTimerAfter+0x88>)
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	3314      	adds	r3, #20
 8002e42:	79fa      	ldrb	r2, [r7, #7]
 8002e44:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002e46:	79fa      	ldrb	r2, [r7, #7]
 8002e48:	4911      	ldr	r1, [pc, #68]	@ (8002e90 <LinkTimerAfter+0x88>)
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	3315      	adds	r3, #21
 8002e56:	7bfa      	ldrb	r2, [r7, #15]
 8002e58:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002e5a:	79fa      	ldrb	r2, [r7, #7]
 8002e5c:	490c      	ldr	r1, [pc, #48]	@ (8002e90 <LinkTimerAfter+0x88>)
 8002e5e:	4613      	mov	r3, r2
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4413      	add	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	440b      	add	r3, r1
 8002e68:	3314      	adds	r3, #20
 8002e6a:	79ba      	ldrb	r2, [r7, #6]
 8002e6c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002e6e:	79ba      	ldrb	r2, [r7, #6]
 8002e70:	4907      	ldr	r1, [pc, #28]	@ (8002e90 <LinkTimerAfter+0x88>)
 8002e72:	4613      	mov	r3, r2
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	4413      	add	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3315      	adds	r3, #21
 8002e7e:	79fa      	ldrb	r2, [r7, #7]
 8002e80:	701a      	strb	r2, [r3, #0]

  return;
 8002e82:	bf00      	nop
}
 8002e84:	3714      	adds	r7, #20
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20001590 	.word	0x20001590

08002e94 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	71fb      	strb	r3, [r7, #7]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002ea4:	4b29      	ldr	r3, [pc, #164]	@ (8002f4c <LinkTimerBefore+0xb8>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	79ba      	ldrb	r2, [r7, #6]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d032      	beq.n	8002f16 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002eb0:	79ba      	ldrb	r2, [r7, #6]
 8002eb2:	4927      	ldr	r1, [pc, #156]	@ (8002f50 <LinkTimerBefore+0xbc>)
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	4413      	add	r3, r2
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	440b      	add	r3, r1
 8002ebe:	3314      	adds	r3, #20
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002ec4:	7bfa      	ldrb	r2, [r7, #15]
 8002ec6:	4922      	ldr	r1, [pc, #136]	@ (8002f50 <LinkTimerBefore+0xbc>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	00db      	lsls	r3, r3, #3
 8002ed0:	440b      	add	r3, r1
 8002ed2:	3315      	adds	r3, #21
 8002ed4:	79fa      	ldrb	r2, [r7, #7]
 8002ed6:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002ed8:	79fa      	ldrb	r2, [r7, #7]
 8002eda:	491d      	ldr	r1, [pc, #116]	@ (8002f50 <LinkTimerBefore+0xbc>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3315      	adds	r3, #21
 8002ee8:	79ba      	ldrb	r2, [r7, #6]
 8002eea:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002eec:	79fa      	ldrb	r2, [r7, #7]
 8002eee:	4918      	ldr	r1, [pc, #96]	@ (8002f50 <LinkTimerBefore+0xbc>)
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	440b      	add	r3, r1
 8002efa:	3314      	adds	r3, #20
 8002efc:	7bfa      	ldrb	r2, [r7, #15]
 8002efe:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f00:	79ba      	ldrb	r2, [r7, #6]
 8002f02:	4913      	ldr	r1, [pc, #76]	@ (8002f50 <LinkTimerBefore+0xbc>)
 8002f04:	4613      	mov	r3, r2
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	4413      	add	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3314      	adds	r3, #20
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002f14:	e014      	b.n	8002f40 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002f16:	79fa      	ldrb	r2, [r7, #7]
 8002f18:	490d      	ldr	r1, [pc, #52]	@ (8002f50 <LinkTimerBefore+0xbc>)
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	4413      	add	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	440b      	add	r3, r1
 8002f24:	3315      	adds	r3, #21
 8002f26:	79ba      	ldrb	r2, [r7, #6]
 8002f28:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f2a:	79ba      	ldrb	r2, [r7, #6]
 8002f2c:	4908      	ldr	r1, [pc, #32]	@ (8002f50 <LinkTimerBefore+0xbc>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	005b      	lsls	r3, r3, #1
 8002f32:	4413      	add	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	440b      	add	r3, r1
 8002f38:	3314      	adds	r3, #20
 8002f3a:	79fa      	ldrb	r2, [r7, #7]
 8002f3c:	701a      	strb	r2, [r3, #0]
  return;
 8002f3e:	bf00      	nop
}
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20001620 	.word	0x20001620
 8002f50:	20001590 	.word	0x20001590

08002f54 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f5e:	4b4e      	ldr	r3, [pc, #312]	@ (8003098 <linkTimer+0x144>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b06      	cmp	r3, #6
 8002f66:	d118      	bne.n	8002f9a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f68:	4b4b      	ldr	r3, [pc, #300]	@ (8003098 <linkTimer+0x144>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b2da      	uxtb	r2, r3
 8002f6e:	4b4b      	ldr	r3, [pc, #300]	@ (800309c <linkTimer+0x148>)
 8002f70:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002f72:	4a49      	ldr	r2, [pc, #292]	@ (8003098 <linkTimer+0x144>)
 8002f74:	79fb      	ldrb	r3, [r7, #7]
 8002f76:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002f78:	79fa      	ldrb	r2, [r7, #7]
 8002f7a:	4949      	ldr	r1, [pc, #292]	@ (80030a0 <linkTimer+0x14c>)
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	440b      	add	r3, r1
 8002f86:	3315      	adds	r3, #21
 8002f88:	2206      	movs	r2, #6
 8002f8a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002f8c:	4b45      	ldr	r3, [pc, #276]	@ (80030a4 <linkTimer+0x150>)
 8002f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002f92:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	81fb      	strh	r3, [r7, #14]
 8002f98:	e078      	b.n	800308c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002f9a:	f000 f909 	bl	80031b0 <ReturnTimeElapsed>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002fa2:	79fa      	ldrb	r2, [r7, #7]
 8002fa4:	493e      	ldr	r1, [pc, #248]	@ (80030a0 <linkTimer+0x14c>)
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	00db      	lsls	r3, r3, #3
 8002fae:	440b      	add	r3, r1
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
 8002fb6:	79fa      	ldrb	r2, [r7, #7]
 8002fb8:	4419      	add	r1, r3
 8002fba:	4839      	ldr	r0, [pc, #228]	@ (80030a0 <linkTimer+0x14c>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4403      	add	r3, r0
 8002fc6:	3308      	adds	r3, #8
 8002fc8:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002fca:	79fa      	ldrb	r2, [r7, #7]
 8002fcc:	4934      	ldr	r1, [pc, #208]	@ (80030a0 <linkTimer+0x14c>)
 8002fce:	4613      	mov	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	4413      	add	r3, r2
 8002fd4:	00db      	lsls	r3, r3, #3
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3308      	adds	r3, #8
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002fde:	4b2e      	ldr	r3, [pc, #184]	@ (8003098 <linkTimer+0x144>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4a2e      	ldr	r2, [pc, #184]	@ (80030a0 <linkTimer+0x14c>)
 8002fe8:	460b      	mov	r3, r1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	440b      	add	r3, r1
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d337      	bcc.n	800306c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002ffc:	4b26      	ldr	r3, [pc, #152]	@ (8003098 <linkTimer+0x144>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8003002:	7b7a      	ldrb	r2, [r7, #13]
 8003004:	4926      	ldr	r1, [pc, #152]	@ (80030a0 <linkTimer+0x14c>)
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	00db      	lsls	r3, r3, #3
 800300e:	440b      	add	r3, r1
 8003010:	3315      	adds	r3, #21
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003016:	e013      	b.n	8003040 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8003018:	7b7a      	ldrb	r2, [r7, #13]
 800301a:	4921      	ldr	r1, [pc, #132]	@ (80030a0 <linkTimer+0x14c>)
 800301c:	4613      	mov	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4413      	add	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	440b      	add	r3, r1
 8003026:	3315      	adds	r3, #21
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 800302c:	7b7a      	ldrb	r2, [r7, #13]
 800302e:	491c      	ldr	r1, [pc, #112]	@ (80030a0 <linkTimer+0x14c>)
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	440b      	add	r3, r1
 800303a:	3315      	adds	r3, #21
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003040:	7b3b      	ldrb	r3, [r7, #12]
 8003042:	2b06      	cmp	r3, #6
 8003044:	d00b      	beq.n	800305e <linkTimer+0x10a>
 8003046:	7b3a      	ldrb	r2, [r7, #12]
 8003048:	4915      	ldr	r1, [pc, #84]	@ (80030a0 <linkTimer+0x14c>)
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	3308      	adds	r3, #8
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	429a      	cmp	r2, r3
 800305c:	d2dc      	bcs.n	8003018 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800305e:	7b7a      	ldrb	r2, [r7, #13]
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff fecf 	bl	8002e08 <LinkTimerAfter>
 800306a:	e00f      	b.n	800308c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800306c:	4b0a      	ldr	r3, [pc, #40]	@ (8003098 <linkTimer+0x144>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b2da      	uxtb	r2, r3
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff ff0c 	bl	8002e94 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800307c:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <linkTimer+0x144>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b06      	ldr	r3, [pc, #24]	@ (800309c <linkTimer+0x148>)
 8003084:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8003086:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <linkTimer+0x144>)
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800308c:	89fb      	ldrh	r3, [r7, #14]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20001620 	.word	0x20001620
 800309c:	20001621 	.word	0x20001621
 80030a0:	20001590 	.word	0x20001590
 80030a4:	20001624 	.word	0x20001624

080030a8 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	460a      	mov	r2, r1
 80030b2:	71fb      	strb	r3, [r7, #7]
 80030b4:	4613      	mov	r3, r2
 80030b6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 80030b8:	4b39      	ldr	r3, [pc, #228]	@ (80031a0 <UnlinkTimer+0xf8>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	79fa      	ldrb	r2, [r7, #7]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d111      	bne.n	80030e8 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80030c4:	4b36      	ldr	r3, [pc, #216]	@ (80031a0 <UnlinkTimer+0xf8>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <UnlinkTimer+0xfc>)
 80030cc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80030ce:	79fa      	ldrb	r2, [r7, #7]
 80030d0:	4935      	ldr	r1, [pc, #212]	@ (80031a8 <UnlinkTimer+0x100>)
 80030d2:	4613      	mov	r3, r2
 80030d4:	005b      	lsls	r3, r3, #1
 80030d6:	4413      	add	r3, r2
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	440b      	add	r3, r1
 80030dc:	3315      	adds	r3, #21
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b2da      	uxtb	r2, r3
 80030e2:	4b2f      	ldr	r3, [pc, #188]	@ (80031a0 <UnlinkTimer+0xf8>)
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	e03e      	b.n	8003166 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80030e8:	79fa      	ldrb	r2, [r7, #7]
 80030ea:	492f      	ldr	r1, [pc, #188]	@ (80031a8 <UnlinkTimer+0x100>)
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	440b      	add	r3, r1
 80030f6:	3314      	adds	r3, #20
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80030fc:	79fa      	ldrb	r2, [r7, #7]
 80030fe:	492a      	ldr	r1, [pc, #168]	@ (80031a8 <UnlinkTimer+0x100>)
 8003100:	4613      	mov	r3, r2
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	4413      	add	r3, r2
 8003106:	00db      	lsls	r3, r3, #3
 8003108:	440b      	add	r3, r1
 800310a:	3315      	adds	r3, #21
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8003110:	79f9      	ldrb	r1, [r7, #7]
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	4824      	ldr	r0, [pc, #144]	@ (80031a8 <UnlinkTimer+0x100>)
 8003116:	460b      	mov	r3, r1
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	440b      	add	r3, r1
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4403      	add	r3, r0
 8003120:	3315      	adds	r3, #21
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	b2d8      	uxtb	r0, r3
 8003126:	4920      	ldr	r1, [pc, #128]	@ (80031a8 <UnlinkTimer+0x100>)
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	3315      	adds	r3, #21
 8003134:	4602      	mov	r2, r0
 8003136:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003138:	7bbb      	ldrb	r3, [r7, #14]
 800313a:	2b06      	cmp	r3, #6
 800313c:	d013      	beq.n	8003166 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800313e:	79f9      	ldrb	r1, [r7, #7]
 8003140:	7bba      	ldrb	r2, [r7, #14]
 8003142:	4819      	ldr	r0, [pc, #100]	@ (80031a8 <UnlinkTimer+0x100>)
 8003144:	460b      	mov	r3, r1
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	440b      	add	r3, r1
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4403      	add	r3, r0
 800314e:	3314      	adds	r3, #20
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	b2d8      	uxtb	r0, r3
 8003154:	4914      	ldr	r1, [pc, #80]	@ (80031a8 <UnlinkTimer+0x100>)
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	00db      	lsls	r3, r3, #3
 800315e:	440b      	add	r3, r1
 8003160:	3314      	adds	r3, #20
 8003162:	4602      	mov	r2, r0
 8003164:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8003166:	79fa      	ldrb	r2, [r7, #7]
 8003168:	490f      	ldr	r1, [pc, #60]	@ (80031a8 <UnlinkTimer+0x100>)
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	440b      	add	r3, r1
 8003174:	330c      	adds	r3, #12
 8003176:	2201      	movs	r2, #1
 8003178:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <UnlinkTimer+0xf8>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	b2db      	uxtb	r3, r3
 8003180:	2b06      	cmp	r3, #6
 8003182:	d107      	bne.n	8003194 <UnlinkTimer+0xec>
 8003184:	79bb      	ldrb	r3, [r7, #6]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d104      	bne.n	8003194 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800318a:	4b08      	ldr	r3, [pc, #32]	@ (80031ac <UnlinkTimer+0x104>)
 800318c:	f04f 32ff 	mov.w	r2, #4294967295
 8003190:	601a      	str	r2, [r3, #0]
  }

  return;
 8003192:	bf00      	nop
 8003194:	bf00      	nop
}
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	20001620 	.word	0x20001620
 80031a4:	20001621 	.word	0x20001621
 80031a8:	20001590 	.word	0x20001590
 80031ac:	20001624 	.word	0x20001624

080031b0 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <ReturnTimeElapsed+0x70>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031be:	d026      	beq.n	800320e <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80031c0:	f7ff fe02 	bl	8002dc8 <ReadRtcSsrValue>
 80031c4:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80031c6:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <ReturnTimeElapsed+0x70>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d805      	bhi.n	80031dc <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80031d0:	4b13      	ldr	r3, [pc, #76]	@ (8003220 <ReturnTimeElapsed+0x70>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	e00a      	b.n	80031f2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80031dc:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <ReturnTimeElapsed+0x74>)
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80031e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003220 <ReturnTimeElapsed+0x70>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	4413      	add	r3, r2
 80031f0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80031f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003228 <ReturnTimeElapsed+0x78>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	fb02 f303 	mul.w	r3, r2, r3
 80031fe:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8003200:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <ReturnTimeElapsed+0x7c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	40d3      	lsrs	r3, r2
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	e001      	b.n	8003212 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	b29b      	uxth	r3, r3
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	20001624 	.word	0x20001624
 8003224:	2000162c 	.word	0x2000162c
 8003228:	2000162a 	.word	0x2000162a
 800322c:	20001629 	.word	0x20001629

08003230 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800323a:	88fb      	ldrh	r3, [r7, #6]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003240:	f7ff fdc2 	bl	8002dc8 <ReadRtcSsrValue>
 8003244:	4603      	mov	r3, r0
 8003246:	4a21      	ldr	r2, [pc, #132]	@ (80032cc <RestartWakeupCounter+0x9c>)
 8003248:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800324a:	2003      	movs	r0, #3
 800324c:	f002 f853 	bl	80052f6 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003250:	e039      	b.n	80032c6 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d803      	bhi.n	8003260 <RestartWakeupCounter+0x30>
 8003258:	4b1d      	ldr	r3, [pc, #116]	@ (80032d0 <RestartWakeupCounter+0xa0>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d002      	beq.n	8003266 <RestartWakeupCounter+0x36>
      Value -= 1;
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	3b01      	subs	r3, #1
 8003264:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003266:	bf00      	nop
 8003268:	4b1a      	ldr	r3, [pc, #104]	@ (80032d4 <RestartWakeupCounter+0xa4>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f8      	beq.n	8003268 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003276:	4b17      	ldr	r3, [pc, #92]	@ (80032d4 <RestartWakeupCounter+0xa4>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	b2da      	uxtb	r2, r3
 800327e:	4b15      	ldr	r3, [pc, #84]	@ (80032d4 <RestartWakeupCounter+0xa4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003286:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003288:	4b13      	ldr	r3, [pc, #76]	@ (80032d8 <RestartWakeupCounter+0xa8>)
 800328a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800328e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003290:	2003      	movs	r0, #3
 8003292:	f002 f83e 	bl	8005312 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8003296:	4b11      	ldr	r3, [pc, #68]	@ (80032dc <RestartWakeupCounter+0xac>)
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	0c1b      	lsrs	r3, r3, #16
 800329c:	041b      	lsls	r3, r3, #16
 800329e:	88fa      	ldrh	r2, [r7, #6]
 80032a0:	490e      	ldr	r1, [pc, #56]	@ (80032dc <RestartWakeupCounter+0xac>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80032a6:	f7ff fd8f 	bl	8002dc8 <ReadRtcSsrValue>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4a07      	ldr	r2, [pc, #28]	@ (80032cc <RestartWakeupCounter+0x9c>)
 80032ae:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80032b0:	4b08      	ldr	r3, [pc, #32]	@ (80032d4 <RestartWakeupCounter+0xa4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	4b07      	ldr	r3, [pc, #28]	@ (80032d4 <RestartWakeupCounter+0xa4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032be:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80032c0:	f3af 8000 	nop.w
  return ;
 80032c4:	bf00      	nop
}
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20001624 	.word	0x20001624
 80032d0:	20001629 	.word	0x20001629
 80032d4:	2000170c 	.word	0x2000170c
 80032d8:	58000800 	.word	0x58000800
 80032dc:	40002800 	.word	0x40002800

080032e0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80032e6:	4b45      	ldr	r3, [pc, #276]	@ (80033fc <RescheduleTimerList+0x11c>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032f2:	d107      	bne.n	8003304 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80032f4:	bf00      	nop
 80032f6:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <RescheduleTimerList+0x120>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f8      	bne.n	80032f6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8003304:	4b3e      	ldr	r3, [pc, #248]	@ (8003400 <RescheduleTimerList+0x120>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	4b3d      	ldr	r3, [pc, #244]	@ (8003400 <RescheduleTimerList+0x120>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003312:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8003314:	4b3b      	ldr	r3, [pc, #236]	@ (8003404 <RescheduleTimerList+0x124>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800331a:	7bfa      	ldrb	r2, [r7, #15]
 800331c:	493a      	ldr	r1, [pc, #232]	@ (8003408 <RescheduleTimerList+0x128>)
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	3308      	adds	r3, #8
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800332e:	f7ff ff3f 	bl	80031b0 <ReturnTimeElapsed>
 8003332:	4603      	mov	r3, r0
 8003334:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	429a      	cmp	r2, r3
 800333c:	d205      	bcs.n	800334a <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800333e:	2300      	movs	r3, #0
 8003340:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003342:	4b32      	ldr	r3, [pc, #200]	@ (800340c <RescheduleTimerList+0x12c>)
 8003344:	2201      	movs	r2, #1
 8003346:	701a      	strb	r2, [r3, #0]
 8003348:	e04d      	b.n	80033e6 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800334a:	88fb      	ldrh	r3, [r7, #6]
 800334c:	4a30      	ldr	r2, [pc, #192]	@ (8003410 <RescheduleTimerList+0x130>)
 800334e:	8812      	ldrh	r2, [r2, #0]
 8003350:	b292      	uxth	r2, r2
 8003352:	4413      	add	r3, r2
 8003354:	461a      	mov	r2, r3
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	4293      	cmp	r3, r2
 800335a:	d906      	bls.n	800336a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800335c:	4b2c      	ldr	r3, [pc, #176]	@ (8003410 <RescheduleTimerList+0x130>)
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003362:	4b2a      	ldr	r3, [pc, #168]	@ (800340c <RescheduleTimerList+0x12c>)
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
 8003368:	e03d      	b.n	80033e6 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	b29a      	uxth	r2, r3
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003374:	4b25      	ldr	r3, [pc, #148]	@ (800340c <RescheduleTimerList+0x12c>)
 8003376:	2201      	movs	r2, #1
 8003378:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800337a:	e034      	b.n	80033e6 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	4922      	ldr	r1, [pc, #136]	@ (8003408 <RescheduleTimerList+0x128>)
 8003380:	4613      	mov	r3, r2
 8003382:	005b      	lsls	r3, r3, #1
 8003384:	4413      	add	r3, r2
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	440b      	add	r3, r1
 800338a:	3308      	adds	r3, #8
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	429a      	cmp	r2, r3
 8003392:	d20a      	bcs.n	80033aa <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	491c      	ldr	r1, [pc, #112]	@ (8003408 <RescheduleTimerList+0x128>)
 8003398:	4613      	mov	r3, r2
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4413      	add	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	440b      	add	r3, r1
 80033a2:	3308      	adds	r3, #8
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	e013      	b.n	80033d2 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	4916      	ldr	r1, [pc, #88]	@ (8003408 <RescheduleTimerList+0x128>)
 80033ae:	4613      	mov	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	4413      	add	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	440b      	add	r3, r1
 80033b8:	3308      	adds	r3, #8
 80033ba:	6819      	ldr	r1, [r3, #0]
 80033bc:	88fb      	ldrh	r3, [r7, #6]
 80033be:	7bfa      	ldrb	r2, [r7, #15]
 80033c0:	1ac9      	subs	r1, r1, r3
 80033c2:	4811      	ldr	r0, [pc, #68]	@ (8003408 <RescheduleTimerList+0x128>)
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4403      	add	r3, r0
 80033ce:	3308      	adds	r3, #8
 80033d0:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80033d2:	7bfa      	ldrb	r2, [r7, #15]
 80033d4:	490c      	ldr	r1, [pc, #48]	@ (8003408 <RescheduleTimerList+0x128>)
 80033d6:	4613      	mov	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	4413      	add	r3, r2
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	440b      	add	r3, r1
 80033e0:	3315      	adds	r3, #21
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033e6:	7bfb      	ldrb	r3, [r7, #15]
 80033e8:	2b06      	cmp	r3, #6
 80033ea:	d1c7      	bne.n	800337c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80033ec:	89bb      	ldrh	r3, [r7, #12]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff ff1e 	bl	8003230 <RestartWakeupCounter>

  return ;
 80033f4:	bf00      	nop
}
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40002800 	.word	0x40002800
 8003400:	2000170c 	.word	0x2000170c
 8003404:	20001620 	.word	0x20001620
 8003408:	20001590 	.word	0x20001590
 800340c:	20001628 	.word	0x20001628
 8003410:	2000162e 	.word	0x2000162e

08003414 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800341a:	f3ef 8310 	mrs	r3, PRIMASK
 800341e:	617b      	str	r3, [r7, #20]
  return(result);
 8003420:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003424:	b672      	cpsid	i
}
 8003426:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003428:	4b59      	ldr	r3, [pc, #356]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	22ca      	movs	r2, #202	@ 0xca
 800342e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003430:	4b57      	ldr	r3, [pc, #348]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2253      	movs	r2, #83	@ 0x53
 8003436:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8003438:	4b55      	ldr	r3, [pc, #340]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	4b54      	ldr	r3, [pc, #336]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003446:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003448:	4b52      	ldr	r3, [pc, #328]	@ (8003594 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003450:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003454:	4950      	ldr	r1, [pc, #320]	@ (8003598 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003456:	4613      	mov	r3, r2
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	330c      	adds	r3, #12
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d16e      	bne.n	8003548 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800346a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800346e:	494a      	ldr	r1, [pc, #296]	@ (8003598 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	00db      	lsls	r3, r3, #3
 8003478:	440b      	add	r3, r1
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800347e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003482:	4945      	ldr	r1, [pc, #276]	@ (8003598 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	3310      	adds	r3, #16
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003494:	4b41      	ldr	r3, [pc, #260]	@ (800359c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d04c      	beq.n	8003538 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800349e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80034a2:	493d      	ldr	r1, [pc, #244]	@ (8003598 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80034a4:	4613      	mov	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	440b      	add	r3, r1
 80034ae:	330d      	adds	r3, #13
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d124      	bne.n	8003502 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80034b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034bc:	2101      	movs	r1, #1
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fdf2 	bl	80030a8 <UnlinkTimer>
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80034d0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80034d4:	4930      	ldr	r1, [pc, #192]	@ (8003598 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034e8:	4611      	mov	r1, r2
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f9b8 	bl	8003860 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034f0:	4b27      	ldr	r3, [pc, #156]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	22ca      	movs	r2, #202	@ 0xca
 80034f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80034f8:	4b25      	ldr	r3, [pc, #148]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2253      	movs	r2, #83	@ 0x53
 80034fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003500:	e012      	b.n	8003528 <HW_TS_RTC_Wakeup_Handler+0x114>
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800350e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f920 	bl	8003758 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003518:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	22ca      	movs	r2, #202	@ 0xca
 800351e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003520:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2253      	movs	r2, #83	@ 0x53
 8003526:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8003528:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800352c:	69fa      	ldr	r2, [r7, #28]
 800352e:	4619      	mov	r1, r3
 8003530:	69b8      	ldr	r0, [r7, #24]
 8003532:	f000 fa1b 	bl	800396c <HW_TS_RTC_Int_AppNot>
 8003536:	e022      	b.n	800357e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8003538:	f7ff fed2 	bl	80032e0 <RescheduleTimerList>
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	e01a      	b.n	800357e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8003548:	bf00      	nop
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d0f8      	beq.n	800354a <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8003558:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003568:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800356a:	4b0d      	ldr	r3, [pc, #52]	@ (80035a0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800356c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003570:	60da      	str	r2, [r3, #12]
 8003572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003574:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f383 8810 	msr	PRIMASK, r3
}
 800357c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	22ff      	movs	r2, #255	@ 0xff
 8003584:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8003586:	bf00      	nop
}
 8003588:	3728      	adds	r7, #40	@ 0x28
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	2000170c 	.word	0x2000170c
 8003594:	20001620 	.word	0x20001620
 8003598:	20001590 	.word	0x20001590
 800359c:	20001628 	.word	0x20001628
 80035a0:	58000800 	.word	0x58000800

080035a4 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	6039      	str	r1, [r7, #0]
 80035ae:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80035b0:	4b5e      	ldr	r3, [pc, #376]	@ (800372c <HW_TS_Init+0x188>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	22ca      	movs	r2, #202	@ 0xca
 80035b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80035b8:	4b5c      	ldr	r3, [pc, #368]	@ (800372c <HW_TS_Init+0x188>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2253      	movs	r2, #83	@ 0x53
 80035be:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035c0:	4b5b      	ldr	r3, [pc, #364]	@ (8003730 <HW_TS_Init+0x18c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	4a5a      	ldr	r2, [pc, #360]	@ (8003730 <HW_TS_Init+0x18c>)
 80035c6:	f043 0320 	orr.w	r3, r3, #32
 80035ca:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80035cc:	4b58      	ldr	r3, [pc, #352]	@ (8003730 <HW_TS_Init+0x18c>)
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	f1c3 0304 	rsb	r3, r3, #4
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b55      	ldr	r3, [pc, #340]	@ (8003734 <HW_TS_Init+0x190>)
 80035e0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80035e2:	4b53      	ldr	r3, [pc, #332]	@ (8003730 <HW_TS_Init+0x18c>)
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035ea:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80035ee:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	fa92 f2a2 	rbit	r2, r2
 80035f6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	2a00      	cmp	r2, #0
 8003600:	d101      	bne.n	8003606 <HW_TS_Init+0x62>
  {
    return 32U;
 8003602:	2220      	movs	r2, #32
 8003604:	e003      	b.n	800360e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	fab2 f282 	clz	r2, r2
 800360c:	b2d2      	uxtb	r2, r2
 800360e:	40d3      	lsrs	r3, r2
 8003610:	b2db      	uxtb	r3, r3
 8003612:	3301      	adds	r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4b48      	ldr	r3, [pc, #288]	@ (8003738 <HW_TS_Init+0x194>)
 8003618:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800361a:	4b45      	ldr	r3, [pc, #276]	@ (8003730 <HW_TS_Init+0x18c>)
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003624:	b29b      	uxth	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	b29a      	uxth	r2, r3
 800362a:	4b44      	ldr	r3, [pc, #272]	@ (800373c <HW_TS_Init+0x198>)
 800362c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800362e:	4b43      	ldr	r3, [pc, #268]	@ (800373c <HW_TS_Init+0x198>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	3b01      	subs	r3, #1
 8003634:	4a40      	ldr	r2, [pc, #256]	@ (8003738 <HW_TS_Init+0x194>)
 8003636:	7812      	ldrb	r2, [r2, #0]
 8003638:	fb02 f303 	mul.w	r3, r2, r3
 800363c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003640:	4a3c      	ldr	r2, [pc, #240]	@ (8003734 <HW_TS_Init+0x190>)
 8003642:	7812      	ldrb	r2, [r2, #0]
 8003644:	40d3      	lsrs	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800364e:	4293      	cmp	r3, r2
 8003650:	d904      	bls.n	800365c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003652:	4b3b      	ldr	r3, [pc, #236]	@ (8003740 <HW_TS_Init+0x19c>)
 8003654:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003658:	801a      	strh	r2, [r3, #0]
 800365a:	e003      	b.n	8003664 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	b29a      	uxth	r2, r3
 8003660:	4b37      	ldr	r3, [pc, #220]	@ (8003740 <HW_TS_Init+0x19c>)
 8003662:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003664:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003668:	f7ff fb9c 	bl	8002da4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800366c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003670:	f7ff fb84 	bl	8002d7c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003674:	79fb      	ldrb	r3, [r7, #7]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d13d      	bne.n	80036f6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800367a:	4b32      	ldr	r3, [pc, #200]	@ (8003744 <HW_TS_Init+0x1a0>)
 800367c:	2201      	movs	r2, #1
 800367e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003680:	4b31      	ldr	r3, [pc, #196]	@ (8003748 <HW_TS_Init+0x1a4>)
 8003682:	f04f 32ff 	mov.w	r2, #4294967295
 8003686:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003688:	2300      	movs	r3, #0
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	e00c      	b.n	80036a8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800368e:	7ffa      	ldrb	r2, [r7, #31]
 8003690:	492e      	ldr	r1, [pc, #184]	@ (800374c <HW_TS_Init+0x1a8>)
 8003692:	4613      	mov	r3, r2
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	4413      	add	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	440b      	add	r3, r1
 800369c:	330c      	adds	r3, #12
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	3301      	adds	r3, #1
 80036a6:	77fb      	strb	r3, [r7, #31]
 80036a8:	7ffb      	ldrb	r3, [r7, #31]
 80036aa:	2b05      	cmp	r3, #5
 80036ac:	d9ef      	bls.n	800368e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80036ae:	4b28      	ldr	r3, [pc, #160]	@ (8003750 <HW_TS_Init+0x1ac>)
 80036b0:	2206      	movs	r2, #6
 80036b2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80036b4:	4b1d      	ldr	r3, [pc, #116]	@ (800372c <HW_TS_Init+0x188>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689a      	ldr	r2, [r3, #8]
 80036ba:	4b1c      	ldr	r3, [pc, #112]	@ (800372c <HW_TS_Init+0x188>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036c2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80036c4:	4b19      	ldr	r3, [pc, #100]	@ (800372c <HW_TS_Init+0x188>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	b2da      	uxtb	r2, r3
 80036cc:	4b17      	ldr	r3, [pc, #92]	@ (800372c <HW_TS_Init+0x188>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80036d4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80036d6:	4b1f      	ldr	r3, [pc, #124]	@ (8003754 <HW_TS_Init+0x1b0>)
 80036d8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80036dc:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80036de:	2003      	movs	r0, #3
 80036e0:	f001 fe17 	bl	8005312 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80036e4:	4b11      	ldr	r3, [pc, #68]	@ (800372c <HW_TS_Init+0x188>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <HW_TS_Init+0x188>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036f2:	609a      	str	r2, [r3, #8]
 80036f4:	e009      	b.n	800370a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80036f6:	4b0d      	ldr	r3, [pc, #52]	@ (800372c <HW_TS_Init+0x188>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8003704:	2003      	movs	r0, #3
 8003706:	f001 fdf6 	bl	80052f6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800370a:	4b08      	ldr	r3, [pc, #32]	@ (800372c <HW_TS_Init+0x188>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	22ff      	movs	r2, #255	@ 0xff
 8003710:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003712:	2200      	movs	r2, #0
 8003714:	2103      	movs	r1, #3
 8003716:	2003      	movs	r0, #3
 8003718:	f001 fdab 	bl	8005272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800371c:	2003      	movs	r0, #3
 800371e:	f001 fdc2 	bl	80052a6 <HAL_NVIC_EnableIRQ>

  return;
 8003722:	bf00      	nop
}
 8003724:	3720      	adds	r7, #32
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	2000170c 	.word	0x2000170c
 8003730:	40002800 	.word	0x40002800
 8003734:	20001629 	.word	0x20001629
 8003738:	2000162a 	.word	0x2000162a
 800373c:	2000162c 	.word	0x2000162c
 8003740:	2000162e 	.word	0x2000162e
 8003744:	20001628 	.word	0x20001628
 8003748:	20001624 	.word	0x20001624
 800374c:	20001590 	.word	0x20001590
 8003750:	20001620 	.word	0x20001620
 8003754:	58000800 	.word	0x58000800

08003758 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003762:	f3ef 8310 	mrs	r3, PRIMASK
 8003766:	60fb      	str	r3, [r7, #12]
  return(result);
 8003768:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800376a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800376c:	b672      	cpsid	i
}
 800376e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003770:	2003      	movs	r0, #3
 8003772:	f001 fda6 	bl	80052c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003776:	4b34      	ldr	r3, [pc, #208]	@ (8003848 <HW_TS_Stop+0xf0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	22ca      	movs	r2, #202	@ 0xca
 800377c:	625a      	str	r2, [r3, #36]	@ 0x24
 800377e:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <HW_TS_Stop+0xf0>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2253      	movs	r2, #83	@ 0x53
 8003784:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003786:	79fa      	ldrb	r2, [r7, #7]
 8003788:	4930      	ldr	r1, [pc, #192]	@ (800384c <HW_TS_Stop+0xf4>)
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	330c      	adds	r3, #12
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d142      	bne.n	8003824 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800379e:	79fb      	ldrb	r3, [r7, #7]
 80037a0:	2100      	movs	r1, #0
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fc80 	bl	80030a8 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80037a8:	4b29      	ldr	r3, [pc, #164]	@ (8003850 <HW_TS_Stop+0xf8>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b06      	cmp	r3, #6
 80037b2:	d12f      	bne.n	8003814 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80037b4:	4b27      	ldr	r3, [pc, #156]	@ (8003854 <HW_TS_Stop+0xfc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c0:	d107      	bne.n	80037d2 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80037c2:	bf00      	nop
 80037c4:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <HW_TS_Stop+0xf0>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	f003 0304 	and.w	r3, r3, #4
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1f8      	bne.n	80037c4 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80037d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003848 <HW_TS_Stop+0xf0>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003848 <HW_TS_Stop+0xf0>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e0:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80037e2:	bf00      	nop
 80037e4:	4b18      	ldr	r3, [pc, #96]	@ (8003848 <HW_TS_Stop+0xf0>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f003 0304 	and.w	r3, r3, #4
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f8      	beq.n	80037e4 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <HW_TS_Stop+0xf0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b13      	ldr	r3, [pc, #76]	@ (8003848 <HW_TS_Stop+0xf0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8003802:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003804:	4b14      	ldr	r3, [pc, #80]	@ (8003858 <HW_TS_Stop+0x100>)
 8003806:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800380a:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800380c:	2003      	movs	r0, #3
 800380e:	f001 fd80 	bl	8005312 <HAL_NVIC_ClearPendingIRQ>
 8003812:	e007      	b.n	8003824 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8003814:	4b11      	ldr	r3, [pc, #68]	@ (800385c <HW_TS_Stop+0x104>)
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	7cfa      	ldrb	r2, [r7, #19]
 800381c:	429a      	cmp	r2, r3
 800381e:	d001      	beq.n	8003824 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003820:	f7ff fd5e 	bl	80032e0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003824:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <HW_TS_Stop+0xf0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	22ff      	movs	r2, #255	@ 0xff
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800382c:	2003      	movs	r0, #3
 800382e:	f001 fd3a 	bl	80052a6 <HAL_NVIC_EnableIRQ>
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f383 8810 	msr	PRIMASK, r3
}
 800383c:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800383e:	bf00      	nop
}
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	2000170c 	.word	0x2000170c
 800384c:	20001590 	.word	0x20001590
 8003850:	20001620 	.word	0x20001620
 8003854:	40002800 	.word	0x40002800
 8003858:	58000800 	.word	0x58000800
 800385c:	20001621 	.word	0x20001621

08003860 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	6039      	str	r1, [r7, #0]
 800386a:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800386c:	79fa      	ldrb	r2, [r7, #7]
 800386e:	493b      	ldr	r1, [pc, #236]	@ (800395c <HW_TS_Start+0xfc>)
 8003870:	4613      	mov	r3, r2
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	4413      	add	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	440b      	add	r3, r1
 800387a:	330c      	adds	r3, #12
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d103      	bne.n	800388c <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003884:	79fb      	ldrb	r3, [r7, #7]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff66 	bl	8003758 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388c:	f3ef 8310 	mrs	r3, PRIMASK
 8003890:	60fb      	str	r3, [r7, #12]
  return(result);
 8003892:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003894:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003896:	b672      	cpsid	i
}
 8003898:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800389a:	2003      	movs	r0, #3
 800389c:	f001 fd11 	bl	80052c2 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80038a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003960 <HW_TS_Start+0x100>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	22ca      	movs	r2, #202	@ 0xca
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80038a8:	4b2d      	ldr	r3, [pc, #180]	@ (8003960 <HW_TS_Start+0x100>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2253      	movs	r2, #83	@ 0x53
 80038ae:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80038b0:	79fa      	ldrb	r2, [r7, #7]
 80038b2:	492a      	ldr	r1, [pc, #168]	@ (800395c <HW_TS_Start+0xfc>)
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	440b      	add	r3, r1
 80038be:	330c      	adds	r3, #12
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80038c4:	79fa      	ldrb	r2, [r7, #7]
 80038c6:	4925      	ldr	r1, [pc, #148]	@ (800395c <HW_TS_Start+0xfc>)
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	440b      	add	r3, r1
 80038d2:	3308      	adds	r3, #8
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80038d8:	79fa      	ldrb	r2, [r7, #7]
 80038da:	4920      	ldr	r1, [pc, #128]	@ (800395c <HW_TS_Start+0xfc>)
 80038dc:	4613      	mov	r3, r2
 80038de:	005b      	lsls	r3, r3, #1
 80038e0:	4413      	add	r3, r2
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	440b      	add	r3, r1
 80038e6:	3304      	adds	r3, #4
 80038e8:	683a      	ldr	r2, [r7, #0]
 80038ea:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80038ec:	79fb      	ldrb	r3, [r7, #7]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fb30 	bl	8002f54 <linkTimer>
 80038f4:	4603      	mov	r3, r0
 80038f6:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80038f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003964 <HW_TS_Start+0x104>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80038fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <HW_TS_Start+0x108>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	7c7a      	ldrb	r2, [r7, #17]
 8003906:	429a      	cmp	r2, r3
 8003908:	d002      	beq.n	8003910 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 800390a:	f7ff fce9 	bl	80032e0 <RescheduleTimerList>
 800390e:	e013      	b.n	8003938 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8003910:	79fa      	ldrb	r2, [r7, #7]
 8003912:	4912      	ldr	r1, [pc, #72]	@ (800395c <HW_TS_Start+0xfc>)
 8003914:	4613      	mov	r3, r2
 8003916:	005b      	lsls	r3, r3, #1
 8003918:	4413      	add	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	440b      	add	r3, r1
 800391e:	3308      	adds	r3, #8
 8003920:	6819      	ldr	r1, [r3, #0]
 8003922:	8a7b      	ldrh	r3, [r7, #18]
 8003924:	79fa      	ldrb	r2, [r7, #7]
 8003926:	1ac9      	subs	r1, r1, r3
 8003928:	480c      	ldr	r0, [pc, #48]	@ (800395c <HW_TS_Start+0xfc>)
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4403      	add	r3, r0
 8003934:	3308      	adds	r3, #8
 8003936:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003938:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <HW_TS_Start+0x100>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	22ff      	movs	r2, #255	@ 0xff
 800393e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003940:	2003      	movs	r0, #3
 8003942:	f001 fcb0 	bl	80052a6 <HAL_NVIC_EnableIRQ>
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003952:	bf00      	nop
}
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	20001590 	.word	0x20001590
 8003960:	2000170c 	.word	0x2000170c
 8003964:	20001620 	.word	0x20001620
 8003968:	20001621 	.word	0x20001621

0800396c <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b084      	sub	sp, #16
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	460b      	mov	r3, r1
 8003976:	607a      	str	r2, [r7, #4]
 8003978:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4798      	blx	r3

  return;
 800397e:	bf00      	nop
}
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
	...

08003988 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	4603      	mov	r3, r0
 8003994:	73fb      	strb	r3, [r7, #15]
 8003996:	4613      	mov	r3, r2
 8003998:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800399a:	2300      	movs	r3, #0
 800399c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800399e:	2300      	movs	r3, #0
 80039a0:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10e      	bne.n	80039c6 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80039a8:	4a17      	ldr	r2, [pc, #92]	@ (8003a08 <HW_UART_Transmit_DMA+0x80>)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80039ae:	4b17      	ldr	r3, [pc, #92]	@ (8003a0c <HW_UART_Transmit_DMA+0x84>)
 80039b0:	4a17      	ldr	r2, [pc, #92]	@ (8003a10 <HW_UART_Transmit_DMA+0x88>)
 80039b2:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80039b4:	89bb      	ldrh	r3, [r7, #12]
 80039b6:	461a      	mov	r2, r3
 80039b8:	68b9      	ldr	r1, [r7, #8]
 80039ba:	4814      	ldr	r0, [pc, #80]	@ (8003a0c <HW_UART_Transmit_DMA+0x84>)
 80039bc:	f007 fcd0 	bl	800b360 <HAL_UART_Transmit_DMA>
 80039c0:	4603      	mov	r3, r0
 80039c2:	75fb      	strb	r3, [r7, #23]
            break;
 80039c4:	e000      	b.n	80039c8 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80039c6:	bf00      	nop
    }

    switch (hal_status)
 80039c8:	7dfb      	ldrb	r3, [r7, #23]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d816      	bhi.n	80039fc <HW_UART_Transmit_DMA+0x74>
 80039ce:	a201      	add	r2, pc, #4	@ (adr r2, 80039d4 <HW_UART_Transmit_DMA+0x4c>)
 80039d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d4:	080039e5 	.word	0x080039e5
 80039d8:	080039eb 	.word	0x080039eb
 80039dc:	080039f1 	.word	0x080039f1
 80039e0:	080039f7 	.word	0x080039f7
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80039e4:	2300      	movs	r3, #0
 80039e6:	75bb      	strb	r3, [r7, #22]
            break;
 80039e8:	e009      	b.n	80039fe <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80039ea:	2301      	movs	r3, #1
 80039ec:	75bb      	strb	r3, [r7, #22]
            break;
 80039ee:	e006      	b.n	80039fe <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80039f0:	2302      	movs	r3, #2
 80039f2:	75bb      	strb	r3, [r7, #22]
            break;
 80039f4:	e003      	b.n	80039fe <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80039f6:	2303      	movs	r3, #3
 80039f8:	75bb      	strb	r3, [r7, #22]
            break;
 80039fa:	e000      	b.n	80039fe <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80039fc:	bf00      	nop
    }

    return hw_status;
 80039fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	20001630 	.word	0x20001630
 8003a0c:	2000182c 	.word	0x2000182c
 8003a10:	40013800 	.word	0x40013800

08003a14 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	461a      	mov	r2, r3
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_UART_TxCpltCallback+0x34>)
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d107      	bne.n	8003a38 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003a28:	4b08      	ldr	r3, [pc, #32]	@ (8003a4c <HAL_UART_TxCpltCallback+0x38>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003a30:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <HAL_UART_TxCpltCallback+0x38>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4798      	blx	r3
            }
            break;
 8003a36:	e001      	b.n	8003a3c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003a38:	bf00      	nop
 8003a3a:	e000      	b.n	8003a3e <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003a3c:	bf00      	nop
    }

    return;
 8003a3e:	bf00      	nop
}
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	40013800 	.word	0x40013800
 8003a4c:	20001630 	.word	0x20001630

08003a50 <Kernel_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Kernel_Init (void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0

	tsSystem.bPowerOnFlag = false;
 8003a54:	4b4a      	ldr	r3, [pc, #296]	@ (8003b80 <Kernel_Init+0x130>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	715a      	strb	r2, [r3, #5]
	HAL_Delay(250);
 8003a5a:	20fa      	movs	r0, #250	@ 0xfa
 8003a5c:	f7ff f89c 	bl	8002b98 <HAL_Delay>
	ENABLE_PWR;
 8003a60:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a64:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8003a68:	619a      	str	r2, [r3, #24]

	tsSystem.ON = true;
 8003a6a:	4b45      	ldr	r3, [pc, #276]	@ (8003b80 <Kernel_Init+0x130>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	705a      	strb	r2, [r3, #1]

	SET_RGB_COLOR(GREEN);
 8003a70:	2201      	movs	r2, #1
 8003a72:	2110      	movs	r1, #16
 8003a74:	4843      	ldr	r0, [pc, #268]	@ (8003b84 <Kernel_Init+0x134>)
 8003a76:	f002 f809 	bl	8005a8c <HAL_GPIO_WritePin>
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4842      	ldr	r0, [pc, #264]	@ (8003b88 <Kernel_Init+0x138>)
 8003a80:	f002 f804 	bl	8005a8c <HAL_GPIO_WritePin>
 8003a84:	2201      	movs	r2, #1
 8003a86:	2101      	movs	r1, #1
 8003a88:	483f      	ldr	r0, [pc, #252]	@ (8003b88 <Kernel_Init+0x138>)
 8003a8a:	f001 ffff 	bl	8005a8c <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003a8e:	20fa      	movs	r0, #250	@ 0xfa
 8003a90:	f7ff f882 	bl	8002b98 <HAL_Delay>
	SET_RGB_COLOR(OFF);
 8003a94:	2201      	movs	r2, #1
 8003a96:	2110      	movs	r1, #16
 8003a98:	483a      	ldr	r0, [pc, #232]	@ (8003b84 <Kernel_Init+0x134>)
 8003a9a:	f001 fff7 	bl	8005a8c <HAL_GPIO_WritePin>
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	2102      	movs	r1, #2
 8003aa2:	4839      	ldr	r0, [pc, #228]	@ (8003b88 <Kernel_Init+0x138>)
 8003aa4:	f001 fff2 	bl	8005a8c <HAL_GPIO_WritePin>
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	2101      	movs	r1, #1
 8003aac:	4836      	ldr	r0, [pc, #216]	@ (8003b88 <Kernel_Init+0x138>)
 8003aae:	f001 ffed 	bl	8005a8c <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003ab2:	20fa      	movs	r0, #250	@ 0xfa
 8003ab4:	f7ff f870 	bl	8002b98 <HAL_Delay>
	SET_RGB_COLOR(GREEN);
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2110      	movs	r1, #16
 8003abc:	4831      	ldr	r0, [pc, #196]	@ (8003b84 <Kernel_Init+0x134>)
 8003abe:	f001 ffe5 	bl	8005a8c <HAL_GPIO_WritePin>
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	2102      	movs	r1, #2
 8003ac6:	4830      	ldr	r0, [pc, #192]	@ (8003b88 <Kernel_Init+0x138>)
 8003ac8:	f001 ffe0 	bl	8005a8c <HAL_GPIO_WritePin>
 8003acc:	2201      	movs	r2, #1
 8003ace:	2101      	movs	r1, #1
 8003ad0:	482d      	ldr	r0, [pc, #180]	@ (8003b88 <Kernel_Init+0x138>)
 8003ad2:	f001 ffdb 	bl	8005a8c <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003ad6:	20fa      	movs	r0, #250	@ 0xfa
 8003ad8:	f7ff f85e 	bl	8002b98 <HAL_Delay>
	SET_RGB_COLOR(OFF);
 8003adc:	2201      	movs	r2, #1
 8003ade:	2110      	movs	r1, #16
 8003ae0:	4828      	ldr	r0, [pc, #160]	@ (8003b84 <Kernel_Init+0x134>)
 8003ae2:	f001 ffd3 	bl	8005a8c <HAL_GPIO_WritePin>
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	2102      	movs	r1, #2
 8003aea:	4827      	ldr	r0, [pc, #156]	@ (8003b88 <Kernel_Init+0x138>)
 8003aec:	f001 ffce 	bl	8005a8c <HAL_GPIO_WritePin>
 8003af0:	2201      	movs	r2, #1
 8003af2:	2101      	movs	r1, #1
 8003af4:	4824      	ldr	r0, [pc, #144]	@ (8003b88 <Kernel_Init+0x138>)
 8003af6:	f001 ffc9 	bl	8005a8c <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003afa:	20fa      	movs	r0, #250	@ 0xfa
 8003afc:	f7ff f84c 	bl	8002b98 <HAL_Delay>
	SET_RGB_COLOR(GREEN);
 8003b00:	2201      	movs	r2, #1
 8003b02:	2110      	movs	r1, #16
 8003b04:	481f      	ldr	r0, [pc, #124]	@ (8003b84 <Kernel_Init+0x134>)
 8003b06:	f001 ffc1 	bl	8005a8c <HAL_GPIO_WritePin>
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2102      	movs	r1, #2
 8003b0e:	481e      	ldr	r0, [pc, #120]	@ (8003b88 <Kernel_Init+0x138>)
 8003b10:	f001 ffbc 	bl	8005a8c <HAL_GPIO_WritePin>
 8003b14:	2201      	movs	r2, #1
 8003b16:	2101      	movs	r1, #1
 8003b18:	481b      	ldr	r0, [pc, #108]	@ (8003b88 <Kernel_Init+0x138>)
 8003b1a:	f001 ffb7 	bl	8005a8c <HAL_GPIO_WritePin>

	tsCmd.MODE		= Start;
 8003b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	755a      	strb	r2, [r3, #21]
	tsCmd.LED		= true;
 8003b24:	4b19      	ldr	r3, [pc, #100]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b26:	2201      	movs	r2, #1
 8003b28:	75da      	strb	r2, [r3, #23]
	tsCmd.HLP 		= true;
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	759a      	strb	r2, [r3, #22]

	tsCmd.TMR 		= true;
 8003b30:	4b16      	ldr	r3, [pc, #88]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	761a      	strb	r2, [r3, #24]
	tsCmd.TMR_N50 	= true;
 8003b36:	4b15      	ldr	r3, [pc, #84]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	765a      	strb	r2, [r3, #25]
	tsCmd.TMR_HPF	= true;
 8003b3c:	4b13      	ldr	r3, [pc, #76]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b3e:	2201      	movs	r2, #1
 8003b40:	769a      	strb	r2, [r3, #26]

	tsCmd.EMG		= true;
 8003b42:	4b12      	ldr	r3, [pc, #72]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	76da      	strb	r2, [r3, #27]
	tsCmd.EMG_N50	= true;
 8003b48:	4b10      	ldr	r3, [pc, #64]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	771a      	strb	r2, [r3, #28]
	tsCmd.EMG_HPF	= true;
 8003b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b8c <Kernel_Init+0x13c>)
 8003b50:	2201      	movs	r2, #1
 8003b52:	775a      	strb	r2, [r3, #29]


	DIAG ("-----------------------------------------\r\n");
 8003b54:	480e      	ldr	r0, [pc, #56]	@ (8003b90 <Kernel_Init+0x140>)
 8003b56:	f7ff f8bb 	bl	8002cd0 <DIAG>
	HAL_Delay(1);
 8003b5a:	2001      	movs	r0, #1
 8003b5c:	f7ff f81c 	bl	8002b98 <HAL_Delay>
	DIAG (" System ON ->\t%s\r\n\n", DEVICE_INFO);
 8003b60:	490c      	ldr	r1, [pc, #48]	@ (8003b94 <Kernel_Init+0x144>)
 8003b62:	480d      	ldr	r0, [pc, #52]	@ (8003b98 <Kernel_Init+0x148>)
 8003b64:	f7ff f8b4 	bl	8002cd0 <DIAG>
	HAL_Delay(500);
 8003b68:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b6c:	f7ff f814 	bl	8002b98 <HAL_Delay>

	// Wait until USB being recognised by the PC.


	tsBle.Connected	= false;
 8003b70:	4b0a      	ldr	r3, [pc, #40]	@ (8003b9c <Kernel_Init+0x14c>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	701a      	strb	r2, [r3, #0]
	tsSystem.Power	= true;
 8003b76:	4b02      	ldr	r3, [pc, #8]	@ (8003b80 <Kernel_Init+0x130>)
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]

}
 8003b7c:	bf00      	nop
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20001658 	.word	0x20001658
 8003b84:	48001000 	.word	0x48001000
 8003b88:	48000400 	.word	0x48000400
 8003b8c:	20001638 	.word	0x20001638
 8003b90:	08018200 	.word	0x08018200
 8003b94:	0801822c 	.word	0x0801822c
 8003b98:	08018240 	.word	0x08018240
 8003b9c:	200019dc 	.word	0x200019dc

08003ba0 <Main_Process>:
//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//

void Main_Process (void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0

	switch (eSYS_STATE)
 8003ba4:	4bb0      	ldr	r3, [pc, #704]	@ (8003e68 <Main_Process+0x2c8>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d80f      	bhi.n	8003bcc <Main_Process+0x2c>
 8003bac:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb4 <Main_Process+0x14>)
 8003bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb2:	bf00      	nop
 8003bb4:	08003bd5 	.word	0x08003bd5
 8003bb8:	08003bcd 	.word	0x08003bcd
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003c03 	.word	0x08003c03
 8003bc4:	08003d93 	.word	0x08003d93
 8003bc8:	08003e05 	.word	0x08003e05
	{

	default:


		eSYS_STATE = SYS_STATE_INIT;
 8003bcc:	4ba6      	ldr	r3, [pc, #664]	@ (8003e68 <Main_Process+0x2c8>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	701a      	strb	r2, [r3, #0]
		break;
 8003bd2:	e146      	b.n	8003e62 <Main_Process+0x2c2>
		//----------------------------------------------------

	case SYS_STATE_INIT:

		AFE_Init();
 8003bd4:	f7fd f8fc 	bl	8000dd0 <AFE_Init>
		IMU_Init( &hi2c1 );
 8003bd8:	48a4      	ldr	r0, [pc, #656]	@ (8003e6c <Main_Process+0x2cc>)
 8003bda:	f7fe f945 	bl	8001e68 <IMU_Init>
		BLE_Init();
 8003bde:	f7fd fd57 	bl	8001690 <BLE_Init>
		Debug_Init();
 8003be2:	f7ff f83d 	bl	8002c60 <Debug_Init>
		Timer_Init();
 8003be6:	f001 f89f 	bl	8004d28 <Timer_Init>
		BLE_Init();
 8003bea:	f7fd fd51 	bl	8001690 <BLE_Init>

		DIAG ("-----------------------------------------\r\n\n");
 8003bee:	48a0      	ldr	r0, [pc, #640]	@ (8003e70 <Main_Process+0x2d0>)
 8003bf0:	f7ff f86e 	bl	8002cd0 <DIAG>
		HAL_Delay(1);
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	f7fe ffcf 	bl	8002b98 <HAL_Delay>
		eSYS_STATE= SYS_STATE_NORMAL;
 8003bfa:	4b9b      	ldr	r3, [pc, #620]	@ (8003e68 <Main_Process+0x2c8>)
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	701a      	strb	r2, [r3, #0]
		break;
 8003c00:	e12f      	b.n	8003e62 <Main_Process+0x2c2>
		//----------------------------------------------------

	case SYS_STATE_NORMAL:

		if (tsSystem.Power)
 8003c02:	4b9c      	ldr	r3, [pc, #624]	@ (8003e74 <Main_Process+0x2d4>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 80b0 	beq.w	8003d6c <Main_Process+0x1cc>
		{

			AFE_Control();
 8003c0c:	f7fd f904 	bl	8000e18 <AFE_Control>

	        #ifdef IMU_ENABLE
				IMU_Control();
	        #endif

			Debug_Control();
 8003c10:	f7ff f832 	bl	8002c78 <Debug_Control>

			#ifdef WBxx_BLE
				BLE_Control();
 8003c14:	f7fd fd54 	bl	80016c0 <BLE_Control>
			#endif

			if (!tsBle.Connected)
 8003c18:	4b97      	ldr	r3, [pc, #604]	@ (8003e78 <Main_Process+0x2d8>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d112      	bne.n	8003c48 <Main_Process+0xa8>
			{
				SET_RGB_COLOR(GREEN);
 8003c22:	2201      	movs	r2, #1
 8003c24:	2110      	movs	r1, #16
 8003c26:	4895      	ldr	r0, [pc, #596]	@ (8003e7c <Main_Process+0x2dc>)
 8003c28:	f001 ff30 	bl	8005a8c <HAL_GPIO_WritePin>
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4893      	ldr	r0, [pc, #588]	@ (8003e80 <Main_Process+0x2e0>)
 8003c32:	f001 ff2b 	bl	8005a8c <HAL_GPIO_WritePin>
 8003c36:	2201      	movs	r2, #1
 8003c38:	2101      	movs	r1, #1
 8003c3a:	4891      	ldr	r0, [pc, #580]	@ (8003e80 <Main_Process+0x2e0>)
 8003c3c:	f001 ff26 	bl	8005a8c <HAL_GPIO_WritePin>

				// If BLE is disconnected, keep the timestamp zero
				tsBle.Timestamp = 0;
 8003c40:	4b8d      	ldr	r3, [pc, #564]	@ (8003e78 <Main_Process+0x2d8>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	715a      	strb	r2, [r3, #5]
 8003c46:	e0a0      	b.n	8003d8a <Main_Process+0x1ea>
			}
			else
			{
				if (tsTimer.u8TimeFlag)
 8003c48:	4b8e      	ldr	r3, [pc, #568]	@ (8003e84 <Main_Process+0x2e4>)
 8003c4a:	789b      	ldrb	r3, [r3, #2]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 809b 	beq.w	8003d8a <Main_Process+0x1ea>
				{
					tsTimer.u8TimeFlag = false;
 8003c54:	4b8b      	ldr	r3, [pc, #556]	@ (8003e84 <Main_Process+0x2e4>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	709a      	strb	r2, [r3, #2]

					switch (LedRGB.color)
 8003c5a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e88 <Main_Process+0x2e8>)
 8003c5c:	791b      	ldrb	r3, [r3, #4]
 8003c5e:	2b07      	cmp	r3, #7
 8003c60:	d812      	bhi.n	8003c88 <Main_Process+0xe8>
 8003c62:	a201      	add	r2, pc, #4	@ (adr r2, 8003c68 <Main_Process+0xc8>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003caf 	.word	0x08003caf
 8003c6c:	08003d47 	.word	0x08003d47
 8003c70:	08003c89 	.word	0x08003c89
 8003c74:	08003cfb 	.word	0x08003cfb
 8003c78:	08003cd5 	.word	0x08003cd5
 8003c7c:	08003c89 	.word	0x08003c89
 8003c80:	08003c89 	.word	0x08003c89
 8003c84:	08003d21 	.word	0x08003d21
					{
					default:
						SET_RGB_COLOR(OFF);
 8003c88:	2201      	movs	r2, #1
 8003c8a:	2110      	movs	r1, #16
 8003c8c:	487b      	ldr	r0, [pc, #492]	@ (8003e7c <Main_Process+0x2dc>)
 8003c8e:	f001 fefd 	bl	8005a8c <HAL_GPIO_WritePin>
 8003c92:	2201      	movs	r2, #1
 8003c94:	2102      	movs	r1, #2
 8003c96:	487a      	ldr	r0, [pc, #488]	@ (8003e80 <Main_Process+0x2e0>)
 8003c98:	f001 fef8 	bl	8005a8c <HAL_GPIO_WritePin>
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4877      	ldr	r0, [pc, #476]	@ (8003e80 <Main_Process+0x2e0>)
 8003ca2:	f001 fef3 	bl	8005a8c <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 8003ca6:	4b78      	ldr	r3, [pc, #480]	@ (8003e88 <Main_Process+0x2e8>)
 8003ca8:	2204      	movs	r2, #4
 8003caa:	711a      	strb	r2, [r3, #4]
						break;
 8003cac:	e06d      	b.n	8003d8a <Main_Process+0x1ea>

					case OFF:
						SET_RGB_COLOR(OFF);
 8003cae:	2201      	movs	r2, #1
 8003cb0:	2110      	movs	r1, #16
 8003cb2:	4872      	ldr	r0, [pc, #456]	@ (8003e7c <Main_Process+0x2dc>)
 8003cb4:	f001 feea 	bl	8005a8c <HAL_GPIO_WritePin>
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2102      	movs	r1, #2
 8003cbc:	4870      	ldr	r0, [pc, #448]	@ (8003e80 <Main_Process+0x2e0>)
 8003cbe:	f001 fee5 	bl	8005a8c <HAL_GPIO_WritePin>
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	486e      	ldr	r0, [pc, #440]	@ (8003e80 <Main_Process+0x2e0>)
 8003cc8:	f001 fee0 	bl	8005a8c <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 8003ccc:	4b6e      	ldr	r3, [pc, #440]	@ (8003e88 <Main_Process+0x2e8>)
 8003cce:	2204      	movs	r2, #4
 8003cd0:	711a      	strb	r2, [r3, #4]
						break;
 8003cd2:	e05a      	b.n	8003d8a <Main_Process+0x1ea>

					case BLUE:
						SET_RGB_COLOR(BLUE);
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	2110      	movs	r1, #16
 8003cd8:	4868      	ldr	r0, [pc, #416]	@ (8003e7c <Main_Process+0x2dc>)
 8003cda:	f001 fed7 	bl	8005a8c <HAL_GPIO_WritePin>
 8003cde:	2201      	movs	r2, #1
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	4867      	ldr	r0, [pc, #412]	@ (8003e80 <Main_Process+0x2e0>)
 8003ce4:	f001 fed2 	bl	8005a8c <HAL_GPIO_WritePin>
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2101      	movs	r1, #1
 8003cec:	4864      	ldr	r0, [pc, #400]	@ (8003e80 <Main_Process+0x2e0>)
 8003cee:	f001 fecd 	bl	8005a8c <HAL_GPIO_WritePin>
						LedRGB.color = YELLOW;
 8003cf2:	4b65      	ldr	r3, [pc, #404]	@ (8003e88 <Main_Process+0x2e8>)
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	711a      	strb	r2, [r3, #4]
						break;
 8003cf8:	e047      	b.n	8003d8a <Main_Process+0x1ea>

					case YELLOW:
						SET_RGB_COLOR(OFF);
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	2110      	movs	r1, #16
 8003cfe:	485f      	ldr	r0, [pc, #380]	@ (8003e7c <Main_Process+0x2dc>)
 8003d00:	f001 fec4 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d04:	2201      	movs	r2, #1
 8003d06:	2102      	movs	r1, #2
 8003d08:	485d      	ldr	r0, [pc, #372]	@ (8003e80 <Main_Process+0x2e0>)
 8003d0a:	f001 febf 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d0e:	2201      	movs	r2, #1
 8003d10:	2101      	movs	r1, #1
 8003d12:	485b      	ldr	r0, [pc, #364]	@ (8003e80 <Main_Process+0x2e0>)
 8003d14:	f001 feba 	bl	8005a8c <HAL_GPIO_WritePin>
						LedRGB.color = WHITE;
 8003d18:	4b5b      	ldr	r3, [pc, #364]	@ (8003e88 <Main_Process+0x2e8>)
 8003d1a:	2207      	movs	r2, #7
 8003d1c:	711a      	strb	r2, [r3, #4]
						break;
 8003d1e:	e034      	b.n	8003d8a <Main_Process+0x1ea>

					case WHITE:
						SET_RGB_COLOR(OFF);
 8003d20:	2201      	movs	r2, #1
 8003d22:	2110      	movs	r1, #16
 8003d24:	4855      	ldr	r0, [pc, #340]	@ (8003e7c <Main_Process+0x2dc>)
 8003d26:	f001 feb1 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4854      	ldr	r0, [pc, #336]	@ (8003e80 <Main_Process+0x2e0>)
 8003d30:	f001 feac 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d34:	2201      	movs	r2, #1
 8003d36:	2101      	movs	r1, #1
 8003d38:	4851      	ldr	r0, [pc, #324]	@ (8003e80 <Main_Process+0x2e0>)
 8003d3a:	f001 fea7 	bl	8005a8c <HAL_GPIO_WritePin>
						LedRGB.color = RED;
 8003d3e:	4b52      	ldr	r3, [pc, #328]	@ (8003e88 <Main_Process+0x2e8>)
 8003d40:	2201      	movs	r2, #1
 8003d42:	711a      	strb	r2, [r3, #4]
						break;
 8003d44:	e021      	b.n	8003d8a <Main_Process+0x1ea>

					case RED:
						SET_RGB_COLOR(OFF);
 8003d46:	2201      	movs	r2, #1
 8003d48:	2110      	movs	r1, #16
 8003d4a:	484c      	ldr	r0, [pc, #304]	@ (8003e7c <Main_Process+0x2dc>)
 8003d4c:	f001 fe9e 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d50:	2201      	movs	r2, #1
 8003d52:	2102      	movs	r1, #2
 8003d54:	484a      	ldr	r0, [pc, #296]	@ (8003e80 <Main_Process+0x2e0>)
 8003d56:	f001 fe99 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4848      	ldr	r0, [pc, #288]	@ (8003e80 <Main_Process+0x2e0>)
 8003d60:	f001 fe94 	bl	8005a8c <HAL_GPIO_WritePin>
						LedRGB.color = OFF;
 8003d64:	4b48      	ldr	r3, [pc, #288]	@ (8003e88 <Main_Process+0x2e8>)
 8003d66:	2200      	movs	r2, #0
 8003d68:	711a      	strb	r2, [r3, #4]
						break;
 8003d6a:	e00e      	b.n	8003d8a <Main_Process+0x1ea>
				}
			}
		}
		else
		{
			SET_RGB_COLOR(OFF);
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	2110      	movs	r1, #16
 8003d70:	4842      	ldr	r0, [pc, #264]	@ (8003e7c <Main_Process+0x2dc>)
 8003d72:	f001 fe8b 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d76:	2201      	movs	r2, #1
 8003d78:	2102      	movs	r1, #2
 8003d7a:	4841      	ldr	r0, [pc, #260]	@ (8003e80 <Main_Process+0x2e0>)
 8003d7c:	f001 fe86 	bl	8005a8c <HAL_GPIO_WritePin>
 8003d80:	2201      	movs	r2, #1
 8003d82:	2101      	movs	r1, #1
 8003d84:	483e      	ldr	r0, [pc, #248]	@ (8003e80 <Main_Process+0x2e0>)
 8003d86:	f001 fe81 	bl	8005a8c <HAL_GPIO_WritePin>
		}

		eSYS_STATE = SYS_STATE_WAIT_CMD;
 8003d8a:	4b37      	ldr	r3, [pc, #220]	@ (8003e68 <Main_Process+0x2c8>)
 8003d8c:	2204      	movs	r2, #4
 8003d8e:	701a      	strb	r2, [r3, #0]
		break;
 8003d90:	e067      	b.n	8003e62 <Main_Process+0x2c2>
		//----------------------------------------------------
	case SYS_STATE_WAIT_CMD:

		//DIAG("BLE Notified- Kernel - > %d\r\n", McgTimer.TimeFlag );

		if (tsCmd.MODE == Start)
 8003d92:	4b3e      	ldr	r3, [pc, #248]	@ (8003e8c <Main_Process+0x2ec>)
 8003d94:	7d5b      	ldrb	r3, [r3, #21]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d106      	bne.n	8003da8 <Main_Process+0x208>
		{
			tsCmd.MODE = Idle;
 8003d9a:	4b3c      	ldr	r3, [pc, #240]	@ (8003e8c <Main_Process+0x2ec>)
 8003d9c:	22ff      	movs	r2, #255	@ 0xff
 8003d9e:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8003da0:	2101      	movs	r1, #1
 8003da2:	2000      	movs	r0, #0
 8003da4:	f7fc ffac 	bl	8000d00 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == Stop)
 8003da8:	4b38      	ldr	r3, [pc, #224]	@ (8003e8c <Main_Process+0x2ec>)
 8003daa:	7d5b      	ldrb	r3, [r3, #21]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d106      	bne.n	8003dbe <Main_Process+0x21e>
		{
			tsCmd.MODE = Idle;
 8003db0:	4b36      	ldr	r3, [pc, #216]	@ (8003e8c <Main_Process+0x2ec>)
 8003db2:	22ff      	movs	r2, #255	@ 0xff
 8003db4:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8003db6:	2100      	movs	r1, #0
 8003db8:	2000      	movs	r0, #0
 8003dba:	f7fc ffa1 	bl	8000d00 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == PrintSetting )
 8003dbe:	4b33      	ldr	r3, [pc, #204]	@ (8003e8c <Main_Process+0x2ec>)
 8003dc0:	7d5b      	ldrb	r3, [r3, #21]
 8003dc2:	2b06      	cmp	r3, #6
 8003dc4:	d104      	bne.n	8003dd0 <Main_Process+0x230>
		{
			tsCmd.MODE = Idle;
 8003dc6:	4b31      	ldr	r3, [pc, #196]	@ (8003e8c <Main_Process+0x2ec>)
 8003dc8:	22ff      	movs	r2, #255	@ 0xff
 8003dca:	755a      	strb	r2, [r3, #21]
			Print_Setting();
 8003dcc:	f000 f867 	bl	8003e9e <Print_Setting>
		}

		if ( tsCmd.HLP == true )
 8003dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e8c <Main_Process+0x2ec>)
 8003dd2:	7d9b      	ldrb	r3, [r3, #22]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d104      	bne.n	8003de2 <Main_Process+0x242>
		{
			//tsCmd.MODE = Idle;
			Print_Help();
 8003dd8:	f000 f85a 	bl	8003e90 <Print_Help>
			tsCmd.HLP = false;
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	@ (8003e8c <Main_Process+0x2ec>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	759a      	strb	r2, [r3, #22]
		}
					#ifdef WBxx_BLE
						if ( tsBle.Connected )
 8003de2:	4b25      	ldr	r3, [pc, #148]	@ (8003e78 <Main_Process+0x2d8>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d007      	beq.n	8003dfc <Main_Process+0x25c>
						{
							 if ( tsBle.App.AfeNotification )
 8003dec:	4b22      	ldr	r3, [pc, #136]	@ (8003e78 <Main_Process+0x2d8>)
 8003dee:	7a1b      	ldrb	r3, [r3, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <Main_Process+0x25c>
							 {
								UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);
 8003df4:	2100      	movs	r1, #0
 8003df6:	2020      	movs	r0, #32
 8003df8:	f011 fcda 	bl	80157b0 <UTIL_SEQ_SetTask>
								 }
							 #endif
						}
					#endif

		eSYS_STATE = SYS_STATE_OBSERVE_POWER;
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e68 <Main_Process+0x2c8>)
 8003dfe:	2205      	movs	r2, #5
 8003e00:	701a      	strb	r2, [r3, #0]
		break;
 8003e02:	e02e      	b.n	8003e62 <Main_Process+0x2c2>
		//----------------------------------------------------

	case SYS_STATE_OBSERVE_POWER:

		if (tsSystem.ON)
 8003e04:	4b1b      	ldr	r3, [pc, #108]	@ (8003e74 <Main_Process+0x2d4>)
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d026      	beq.n	8003e5a <Main_Process+0x2ba>
		{
			if ( tsSystem.OFF)
 8003e0c:	4b19      	ldr	r3, [pc, #100]	@ (8003e74 <Main_Process+0x2d4>)
 8003e0e:	789b      	ldrb	r3, [r3, #2]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d017      	beq.n	8003e44 <Main_Process+0x2a4>
			{
				SET_RGB_COLOR(RED);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2110      	movs	r1, #16
 8003e18:	4818      	ldr	r0, [pc, #96]	@ (8003e7c <Main_Process+0x2dc>)
 8003e1a:	f001 fe37 	bl	8005a8c <HAL_GPIO_WritePin>
 8003e1e:	2201      	movs	r2, #1
 8003e20:	2102      	movs	r1, #2
 8003e22:	4817      	ldr	r0, [pc, #92]	@ (8003e80 <Main_Process+0x2e0>)
 8003e24:	f001 fe32 	bl	8005a8c <HAL_GPIO_WritePin>
 8003e28:	2201      	movs	r2, #1
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4814      	ldr	r0, [pc, #80]	@ (8003e80 <Main_Process+0x2e0>)
 8003e2e:	f001 fe2d 	bl	8005a8c <HAL_GPIO_WritePin>
				HAL_Delay(1000);
 8003e32:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003e36:	f7fe feaf 	bl	8002b98 <HAL_Delay>
				DISABLE_PWR;
 8003e3a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003e3e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003e42:	619a      	str	r2, [r3, #24]
			}

			if ( HAL_GPIO_ReadPin( GPIOA, PWR_SW_Pin ) == true )
 8003e44:	2120      	movs	r1, #32
 8003e46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003e4a:	f001 fe07 	bl	8005a5c <HAL_GPIO_ReadPin>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d102      	bne.n	8003e5a <Main_Process+0x2ba>
			{
				tsSystem.bPowerOnFlag = true;
 8003e54:	4b07      	ldr	r3, [pc, #28]	@ (8003e74 <Main_Process+0x2d4>)
 8003e56:	2201      	movs	r2, #1
 8003e58:	715a      	strb	r2, [r3, #5]
			}
		}

		eSYS_STATE = SYS_STATE_NORMAL;
 8003e5a:	4b03      	ldr	r3, [pc, #12]	@ (8003e68 <Main_Process+0x2c8>)
 8003e5c:	2203      	movs	r2, #3
 8003e5e:	701a      	strb	r2, [r3, #0]
		break;
 8003e60:	bf00      	nop
		//----------------------------------------------------
	}
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	20001634 	.word	0x20001634
 8003e6c:	20001668 	.word	0x20001668
 8003e70:	08018254 	.word	0x08018254
 8003e74:	20001658 	.word	0x20001658
 8003e78:	200019dc 	.word	0x200019dc
 8003e7c:	48001000 	.word	0x48001000
 8003e80:	48000400 	.word	0x48000400
 8003e84:	20001924 	.word	0x20001924
 8003e88:	20001660 	.word	0x20001660
 8003e8c:	20001638 	.word	0x20001638

08003e90 <Print_Help>:

//------------------------------------------------------------------------------------------------

void Print_Help( void )
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
	DIAG(" Examples 1: https://hackaday.io/project/5334-serialplot-realtime\r\n");
	HAL_Delay(10);
	DIAG(" Examples 2: https://x-io.co.uk/serial-oscilloscope\r\n");
	HAL_Delay(10);
*/
}
 8003e94:	bf00      	nop
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <Print_Setting>:
//--------------------------------------------------------------------------------------------------------

void Print_Setting ( void )
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	af00      	add	r7, sp, #0
	HAL_Delay(10);

	DIAG("LED status\t\t: %s\r\n", tsCmd.LED ? "active" : "deactive");
	HAL_Delay(10);
*/
}
 8003ea2:	bf00      	nop
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_RCC_HSI48_Enable>:
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eb8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <LL_RCC_HSI48_IsReady>:
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ed6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d101      	bne.n	8003ee6 <LL_RCC_HSI48_IsReady+0x18>
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e000      	b.n	8003ee8 <LL_RCC_HSI48_IsReady+0x1a>
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_RCC_LSE_SetDriveCapability>:
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f023 0218 	bic.w	r2, r3, #24
 8003f06:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_AHB1_GRP1_EnableClock>:
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b085      	sub	sp, #20
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003f36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	bf00      	nop
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <LL_AHB2_GRP1_EnableClock>:
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f5c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003f68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4013      	ands	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	bf00      	nop
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003f8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f8e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003f90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003f9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003f9e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4013      	ands	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
}
 8003fa8:	bf00      	nop
 8003faa:	3714      	adds	r7, #20
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	3220      	adds	r2, #32
 8003fc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fc8:	4a05      	ldr	r2, [pc, #20]	@ (8003fe0 <LL_HSEM_1StepLock+0x2c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d001      	beq.n	8003fd2 <LL_HSEM_1StepLock+0x1e>
 8003fce:	2301      	movs	r3, #1
 8003fd0:	e000      	b.n	8003fd4 <LL_HSEM_1StepLock+0x20>
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	80000400 	.word	0x80000400

08003fe4 <PeriphUsbClock_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PeriphUsbClock_Config(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b09a      	sub	sp, #104	@ 0x68
 8003fe8:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003fea:	f107 0318 	add.w	r3, r7, #24
 8003fee:	2250      	movs	r2, #80	@ 0x50
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f011 ff22 	bl	8015e3c <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003ff8:	463b      	mov	r3, r7
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	605a      	str	r2, [r3, #4]
 8004000:	609a      	str	r2, [r3, #8]
 8004002:	60da      	str	r2, [r3, #12]
 8004004:	611a      	str	r2, [r3, #16]
 8004006:	615a      	str	r2, [r3, #20]

/* This prevents the CPU2 to disable the HSI48 oscillator when
 * It does not use anymore the RNG IP */

LL_HSEM_1StepLock( HSEM, 5 );
 8004008:	2105      	movs	r1, #5
 800400a:	4817      	ldr	r0, [pc, #92]	@ (8004068 <PeriphUsbClock_Config+0x84>)
 800400c:	f7ff ffd2 	bl	8003fb4 <LL_HSEM_1StepLock>


/* Enables the HSI48 Clock Source */

LL_RCC_HSI48_Enable();
 8004010:	f7ff ff4c 	bl	8003eac <LL_RCC_HSI48_Enable>

while(!LL_RCC_HSI48_IsReady());
 8004014:	bf00      	nop
 8004016:	f7ff ff5a 	bl	8003ece <LL_RCC_HSI48_IsReady>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0fa      	beq.n	8004016 <PeriphUsbClock_Config+0x32>

/* Select HSI48 as USB clock source */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004020:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004024:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004026:	2300      	movs	r3, #0
 8004028:	64fb      	str	r3, [r7, #76]	@ 0x4c
HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800402a:	f107 0318 	add.w	r3, r7, #24
 800402e:	4618      	mov	r0, r3
 8004030:	f005 fab6 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>


/* Configure the clock recovery system (CRS)**********************************/

/* Enable CRS Clock */
__HAL_RCC_CRS_CLK_ENABLE();
 8004034:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8004038:	f7ff ffa3 	bl	8003f82 <LL_APB1_GRP1_EnableClock>

/* Default Synchro Signal division factor (not divided) */
RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800403c:	2300      	movs	r3, #0
 800403e:	603b      	str	r3, [r7, #0]

/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8004040:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004044:	607b      	str	r3, [r7, #4]

/* HSI48 is synchronized with USB SOF at 1KHz rate */
RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 8004046:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 800404a:	60fb      	str	r3, [r7, #12]
RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 800404c:	2322      	movs	r3, #34	@ 0x22
 800404e:	613b      	str	r3, [r7, #16]
RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8004050:	2300      	movs	r3, #0
 8004052:	60bb      	str	r3, [r7, #8]

/* Set the TRIM[5:0] to the default value*/
RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8004054:	2320      	movs	r3, #32
 8004056:	617b      	str	r3, [r7, #20]

/* Start automatic synchronization */
HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8004058:	463b      	mov	r3, r7
 800405a:	4618      	mov	r0, r3
 800405c:	f005 fc16 	bl	800988c <HAL_RCCEx_CRSConfig>

#endif

	return;
 8004060:	bf00      	nop
}
 8004062:	3768      	adds	r7, #104	@ 0x68
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	58001400 	.word	0x58001400

0800406c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004070:	f000 ff32 	bl	8004ed8 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8004074:	f7fe faba 	bl	80025ec <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004078:	f000 f824 	bl	80040c4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800407c:	f000 f88e 	bl	800419c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8004080:	f000 f8f0 	bl	8004264 <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_RF_Init();
 8004084:	f000 f902 	bl	800428c <MX_RF_Init>
  MX_GPIO_Init();
 8004088:	f000 fa44 	bl	8004514 <MX_GPIO_Init>
  MX_DMA_Init();
 800408c:	f000 fa30 	bl	80044f0 <MX_DMA_Init>
  MX_TIM2_Init();
 8004090:	f000 f9e0 	bl	8004454 <MX_TIM2_Init>
  MX_SPI1_Init();
 8004094:	f000 f94c 	bl	8004330 <MX_SPI1_Init>
  MX_RTC_Init();
 8004098:	f000 f916 	bl	80042c8 <MX_RTC_Init>
  MX_USB_Device_Init();
 800409c:	f010 fcc8 	bl	8014a30 <MX_USB_Device_Init>
  MX_I2C1_Init();
 80040a0:	f000 f89c 	bl	80041dc <MX_I2C1_Init>
  MX_RNG_Init();
 80040a4:	f000 f8fa 	bl	800429c <MX_RNG_Init>
  MX_TIM1_Init();
 80040a8:	f000 f980 	bl	80043ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Kernel_Init();
 80040ac:	f7ff fcd0 	bl	8003a50 <Kernel_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80040b0:	f7fe faaa 	bl	8002608 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PeriphUsbClock_Config();
 80040b4:	f7ff ff96 	bl	8003fe4 <PeriphUsbClock_Config>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80040b8:	f7fe fd93 	bl	8002be2 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    Main_Process();
 80040bc:	f7ff fd70 	bl	8003ba0 <Main_Process>
    MX_APPE_Process();
 80040c0:	bf00      	nop
 80040c2:	e7f9      	b.n	80040b8 <main+0x4c>

080040c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b09a      	sub	sp, #104	@ 0x68
 80040c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ca:	f107 0320 	add.w	r3, r7, #32
 80040ce:	2248      	movs	r2, #72	@ 0x48
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f011 feb2 	bl	8015e3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040d8:	1d3b      	adds	r3, r7, #4
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	605a      	str	r2, [r3, #4]
 80040e0:	609a      	str	r2, [r3, #8]
 80040e2:	60da      	str	r2, [r3, #12]
 80040e4:	611a      	str	r2, [r3, #16]
 80040e6:	615a      	str	r2, [r3, #20]
 80040e8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80040ea:	f003 ff23 	bl	8007f34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80040ee:	2000      	movs	r0, #0
 80040f0:	f7ff feff 	bl	8003ef2 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80040f4:	4b28      	ldr	r3, [pc, #160]	@ (8004198 <SystemClock_Config+0xd4>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040fc:	4a26      	ldr	r2, [pc, #152]	@ (8004198 <SystemClock_Config+0xd4>)
 80040fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	4b24      	ldr	r3, [pc, #144]	@ (8004198 <SystemClock_Config+0xd4>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800410c:	603b      	str	r3, [r7, #0]
 800410e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004110:	2307      	movs	r3, #7
 8004112:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004114:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800411a:	2301      	movs	r3, #1
 800411c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800411e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004122:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004124:	2340      	movs	r3, #64	@ 0x40
 8004126:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004128:	2302      	movs	r3, #2
 800412a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800412c:	2303      	movs	r3, #3
 800412e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004130:	2310      	movs	r3, #16
 8004132:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004134:	2308      	movs	r3, #8
 8004136:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004138:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800413c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800413e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004142:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004144:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004148:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800414a:	f107 0320 	add.w	r3, r7, #32
 800414e:	4618      	mov	r0, r3
 8004150:	f004 fa7c 	bl	800864c <HAL_RCC_OscConfig>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800415a:	f000 fa9b 	bl	8004694 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800415e:	236f      	movs	r3, #111	@ 0x6f
 8004160:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004162:	2303      	movs	r3, #3
 8004164:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8004172:	2380      	movs	r3, #128	@ 0x80
 8004174:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800417a:	1d3b      	adds	r3, r7, #4
 800417c:	2103      	movs	r1, #3
 800417e:	4618      	mov	r0, r3
 8004180:	f004 fdd8 	bl	8008d34 <HAL_RCC_ClockConfig>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800418a:	f000 fa83 	bl	8004694 <Error_Handler>
  }
}
 800418e:	bf00      	nop
 8004190:	3768      	adds	r7, #104	@ 0x68
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	58000400 	.word	0x58000400

0800419c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b094      	sub	sp, #80	@ 0x50
 80041a0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041a2:	463b      	mov	r3, r7
 80041a4:	2250      	movs	r2, #80	@ 0x50
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f011 fe47 	bl	8015e3c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80041ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80041b2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80041b4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041b8:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80041ba:	2302      	movs	r3, #2
 80041bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80041be:	2310      	movs	r3, #16
 80041c0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041c2:	463b      	mov	r3, r7
 80041c4:	4618      	mov	r0, r3
 80041c6:	f005 f9eb 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d001      	beq.n	80041d4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80041d0:	f000 fa60 	bl	8004694 <Error_Handler>
  /* USER CODE BEGIN Smps */



  /* USER CODE END Smps */
}
 80041d4:	bf00      	nop
 80041d6:	3750      	adds	r7, #80	@ 0x50
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004258 <MX_I2C1_Init+0x7c>)
 80041e2:	4a1e      	ldr	r2, [pc, #120]	@ (800425c <MX_I2C1_Init+0x80>)
 80041e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00910B1C;
 80041e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004258 <MX_I2C1_Init+0x7c>)
 80041e8:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <MX_I2C1_Init+0x84>)
 80041ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80041ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004258 <MX_I2C1_Init+0x7c>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041f2:	4b19      	ldr	r3, [pc, #100]	@ (8004258 <MX_I2C1_Init+0x7c>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80041f8:	4b17      	ldr	r3, [pc, #92]	@ (8004258 <MX_I2C1_Init+0x7c>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80041fe:	4b16      	ldr	r3, [pc, #88]	@ (8004258 <MX_I2C1_Init+0x7c>)
 8004200:	2200      	movs	r2, #0
 8004202:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004204:	4b14      	ldr	r3, [pc, #80]	@ (8004258 <MX_I2C1_Init+0x7c>)
 8004206:	2200      	movs	r2, #0
 8004208:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800420a:	4b13      	ldr	r3, [pc, #76]	@ (8004258 <MX_I2C1_Init+0x7c>)
 800420c:	2200      	movs	r2, #0
 800420e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004210:	4b11      	ldr	r3, [pc, #68]	@ (8004258 <MX_I2C1_Init+0x7c>)
 8004212:	2200      	movs	r2, #0
 8004214:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004216:	4810      	ldr	r0, [pc, #64]	@ (8004258 <MX_I2C1_Init+0x7c>)
 8004218:	f001 fc8c 	bl	8005b34 <HAL_I2C_Init>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004222:	f000 fa37 	bl	8004694 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004226:	2100      	movs	r1, #0
 8004228:	480b      	ldr	r0, [pc, #44]	@ (8004258 <MX_I2C1_Init+0x7c>)
 800422a:	f002 f851 	bl	80062d0 <HAL_I2CEx_ConfigAnalogFilter>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004234:	f000 fa2e 	bl	8004694 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004238:	2100      	movs	r1, #0
 800423a:	4807      	ldr	r0, [pc, #28]	@ (8004258 <MX_I2C1_Init+0x7c>)
 800423c:	f002 f893 	bl	8006366 <HAL_I2CEx_ConfigDigitalFilter>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004246:	f000 fa25 	bl	8004694 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800424a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800424e:	f002 f8d7 	bl	8006400 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20001668 	.word	0x20001668
 800425c:	40005400 	.word	0x40005400
 8004260:	00910b1c 	.word	0x00910b1c

08004264 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8004268:	4b06      	ldr	r3, [pc, #24]	@ (8004284 <MX_IPCC_Init+0x20>)
 800426a:	4a07      	ldr	r2, [pc, #28]	@ (8004288 <MX_IPCC_Init+0x24>)
 800426c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 800426e:	4805      	ldr	r0, [pc, #20]	@ (8004284 <MX_IPCC_Init+0x20>)
 8004270:	f002 f8d8 	bl	8006424 <HAL_IPCC_Init>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800427a:	f000 fa0b 	bl	8004694 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 800427e:	bf00      	nop
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	200016bc 	.word	0x200016bc
 8004288:	58000c00 	.word	0x58000c00

0800428c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8004290:	bf00      	nop
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
	...

0800429c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80042a0:	4b07      	ldr	r3, [pc, #28]	@ (80042c0 <MX_RNG_Init+0x24>)
 80042a2:	4a08      	ldr	r2, [pc, #32]	@ (80042c4 <MX_RNG_Init+0x28>)
 80042a4:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <MX_RNG_Init+0x24>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80042ac:	4804      	ldr	r0, [pc, #16]	@ (80042c0 <MX_RNG_Init+0x24>)
 80042ae:	f005 fc38 	bl	8009b22 <HAL_RNG_Init>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80042b8:	f000 f9ec 	bl	8004694 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80042bc:	bf00      	nop
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	200016f8 	.word	0x200016f8
 80042c4:	58001000 	.word	0x58001000

080042c8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80042cc:	4b16      	ldr	r3, [pc, #88]	@ (8004328 <MX_RTC_Init+0x60>)
 80042ce:	4a17      	ldr	r2, [pc, #92]	@ (800432c <MX_RTC_Init+0x64>)
 80042d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80042d2:	4b15      	ldr	r3, [pc, #84]	@ (8004328 <MX_RTC_Init+0x60>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80042d8:	4b13      	ldr	r3, [pc, #76]	@ (8004328 <MX_RTC_Init+0x60>)
 80042da:	220f      	movs	r2, #15
 80042dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <MX_RTC_Init+0x60>)
 80042e0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80042e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042e6:	4b10      	ldr	r3, [pc, #64]	@ (8004328 <MX_RTC_Init+0x60>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004328 <MX_RTC_Init+0x60>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004328 <MX_RTC_Init+0x60>)
 80042f4:	2200      	movs	r2, #0
 80042f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <MX_RTC_Init+0x60>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042fe:	480a      	ldr	r0, [pc, #40]	@ (8004328 <MX_RTC_Init+0x60>)
 8004300:	f005 fcae 	bl	8009c60 <HAL_RTC_Init>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800430a:	f000 f9c3 	bl	8004694 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800430e:	2200      	movs	r2, #0
 8004310:	2100      	movs	r1, #0
 8004312:	4805      	ldr	r0, [pc, #20]	@ (8004328 <MX_RTC_Init+0x60>)
 8004314:	f005 fda4 	bl	8009e60 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800431e:	f000 f9b9 	bl	8004694 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8004322:	bf00      	nop
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000170c 	.word	0x2000170c
 800432c:	40002800 	.word	0x40002800

08004330 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004334:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004336:	4a1c      	ldr	r2, [pc, #112]	@ (80043a8 <MX_SPI1_Init+0x78>)
 8004338:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800433a:	4b1a      	ldr	r3, [pc, #104]	@ (80043a4 <MX_SPI1_Init+0x74>)
 800433c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004340:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004342:	4b18      	ldr	r3, [pc, #96]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004344:	2200      	movs	r2, #0
 8004346:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004348:	4b16      	ldr	r3, [pc, #88]	@ (80043a4 <MX_SPI1_Init+0x74>)
 800434a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800434e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004350:	4b14      	ldr	r3, [pc, #80]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004352:	2200      	movs	r2, #0
 8004354:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004356:	4b13      	ldr	r3, [pc, #76]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004358:	2200      	movs	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <MX_SPI1_Init+0x74>)
 800435e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004362:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8004364:	4b0f      	ldr	r3, [pc, #60]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004366:	2208      	movs	r2, #8
 8004368:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800436a:	4b0e      	ldr	r3, [pc, #56]	@ (80043a4 <MX_SPI1_Init+0x74>)
 800436c:	2200      	movs	r2, #0
 800436e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004370:	4b0c      	ldr	r3, [pc, #48]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004372:	2200      	movs	r2, #0
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004376:	4b0b      	ldr	r3, [pc, #44]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004378:	2200      	movs	r2, #0
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800437c:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <MX_SPI1_Init+0x74>)
 800437e:	2207      	movs	r2, #7
 8004380:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004382:	4b08      	ldr	r3, [pc, #32]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004384:	2200      	movs	r2, #0
 8004386:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <MX_SPI1_Init+0x74>)
 800438a:	2208      	movs	r2, #8
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800438e:	4805      	ldr	r0, [pc, #20]	@ (80043a4 <MX_SPI1_Init+0x74>)
 8004390:	f005 fe22 	bl	8009fd8 <HAL_SPI_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800439a:	f000 f97b 	bl	8004694 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20001730 	.word	0x20001730
 80043a8:	40013000 	.word	0x40013000

080043ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c0:	1d3b      	adds	r3, r7, #4
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80043ca:	4b20      	ldr	r3, [pc, #128]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043cc:	4a20      	ldr	r2, [pc, #128]	@ (8004450 <MX_TIM1_Init+0xa4>)
 80043ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3199;
 80043d0:	4b1e      	ldr	r3, [pc, #120]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043d2:	f640 427f 	movw	r2, #3199	@ 0xc7f
 80043d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80043d8:	4b1c      	ldr	r3, [pc, #112]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043da:	2210      	movs	r2, #16
 80043dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80043de:	4b1b      	ldr	r3, [pc, #108]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043e0:	2209      	movs	r2, #9
 80043e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e4:	4b19      	ldr	r3, [pc, #100]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80043ea:	4b18      	ldr	r3, [pc, #96]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80043f0:	4b16      	ldr	r3, [pc, #88]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043f2:	2280      	movs	r2, #128	@ 0x80
 80043f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80043f6:	4815      	ldr	r0, [pc, #84]	@ (800444c <MX_TIM1_Init+0xa0>)
 80043f8:	f006 fb8a 	bl	800ab10 <HAL_TIM_Base_Init>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004402:	f000 f947 	bl	8004694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004406:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800440a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800440c:	f107 0310 	add.w	r3, r7, #16
 8004410:	4619      	mov	r1, r3
 8004412:	480e      	ldr	r0, [pc, #56]	@ (800444c <MX_TIM1_Init+0xa0>)
 8004414:	f006 fd29 	bl	800ae6a <HAL_TIM_ConfigClockSource>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800441e:	f000 f939 	bl	8004694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800442a:	2300      	movs	r3, #0
 800442c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4806      	ldr	r0, [pc, #24]	@ (800444c <MX_TIM1_Init+0xa0>)
 8004434:	f006 ff16 	bl	800b264 <HAL_TIMEx_MasterConfigSynchronization>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800443e:	f000 f929 	bl	8004694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20001794 	.word	0x20001794
 8004450:	40012c00 	.word	0x40012c00

08004454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800445a:	f107 0310 	add.w	r3, r7, #16
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	605a      	str	r2, [r3, #4]
 8004464:	609a      	str	r2, [r3, #8]
 8004466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004468:	1d3b      	adds	r3, r7, #4
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004472:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <MX_TIM2_Init+0x98>)
 8004474:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004478:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 800447a:	4b1c      	ldr	r3, [pc, #112]	@ (80044ec <MX_TIM2_Init+0x98>)
 800447c:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 8004480:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004482:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <MX_TIM2_Init+0x98>)
 8004484:	2210      	movs	r2, #16
 8004486:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8004488:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <MX_TIM2_Init+0x98>)
 800448a:	2264      	movs	r2, #100	@ 0x64
 800448c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800448e:	4b17      	ldr	r3, [pc, #92]	@ (80044ec <MX_TIM2_Init+0x98>)
 8004490:	2200      	movs	r2, #0
 8004492:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004494:	4b15      	ldr	r3, [pc, #84]	@ (80044ec <MX_TIM2_Init+0x98>)
 8004496:	2200      	movs	r2, #0
 8004498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800449a:	4814      	ldr	r0, [pc, #80]	@ (80044ec <MX_TIM2_Init+0x98>)
 800449c:	f006 fb38 	bl	800ab10 <HAL_TIM_Base_Init>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80044a6:	f000 f8f5 	bl	8004694 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044b0:	f107 0310 	add.w	r3, r7, #16
 80044b4:	4619      	mov	r1, r3
 80044b6:	480d      	ldr	r0, [pc, #52]	@ (80044ec <MX_TIM2_Init+0x98>)
 80044b8:	f006 fcd7 	bl	800ae6a <HAL_TIM_ConfigClockSource>
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80044c2:	f000 f8e7 	bl	8004694 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044c6:	2300      	movs	r3, #0
 80044c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044ce:	1d3b      	adds	r3, r7, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4806      	ldr	r0, [pc, #24]	@ (80044ec <MX_TIM2_Init+0x98>)
 80044d4:	f006 fec6 	bl	800b264 <HAL_TIMEx_MasterConfigSynchronization>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80044de:	f000 f8d9 	bl	8004694 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80044e2:	bf00      	nop
 80044e4:	3720      	adds	r7, #32
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	200017e0 	.word	0x200017e0

080044f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80044f4:	2004      	movs	r0, #4
 80044f6:	f7ff fd12 	bl	8003f1e <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80044fa:	2001      	movs	r0, #1
 80044fc:	f7ff fd0f 	bl	8003f1e <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004500:	2200      	movs	r2, #0
 8004502:	2100      	movs	r1, #0
 8004504:	200b      	movs	r0, #11
 8004506:	f000 feb4 	bl	8005272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800450a:	200b      	movs	r0, #11
 800450c:	f000 fecb 	bl	80052a6 <HAL_NVIC_EnableIRQ>

}
 8004510:	bf00      	nop
 8004512:	bd80      	pop	{r7, pc}

08004514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004528:	2004      	movs	r0, #4
 800452a:	f7ff fd11 	bl	8003f50 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800452e:	2002      	movs	r0, #2
 8004530:	f7ff fd0e 	bl	8003f50 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004534:	2001      	movs	r0, #1
 8004536:	f7ff fd0b 	bl	8003f50 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800453a:	2010      	movs	r0, #16
 800453c:	f7ff fd08 	bl	8003f50 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_RSTB_Pin|ADS_CS_Pin, GPIO_PIN_SET);
 8004540:	2201      	movs	r2, #1
 8004542:	2103      	movs	r1, #3
 8004544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004548:	f001 faa0 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, IMU_CS_Pin|PWR_ON_Pin, GPIO_PIN_RESET);
 800454c:	2200      	movs	r2, #0
 800454e:	f248 0140 	movw	r1, #32832	@ 0x8040
 8004552:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004556:	f001 fa99 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_ADDR_GPIO_Port, IMU_ADDR_Pin, GPIO_PIN_RESET);
 800455a:	2200      	movs	r2, #0
 800455c:	2104      	movs	r1, #4
 800455e:	484b      	ldr	r0, [pc, #300]	@ (800468c <MX_GPIO_Init+0x178>)
 8004560:	f001 fa94 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);
 8004564:	2201      	movs	r2, #1
 8004566:	2103      	movs	r1, #3
 8004568:	4848      	ldr	r0, [pc, #288]	@ (800468c <MX_GPIO_Init+0x178>)
 800456a:	f001 fa8f 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET);
 800456e:	2201      	movs	r2, #1
 8004570:	2110      	movs	r1, #16
 8004572:	4847      	ldr	r0, [pc, #284]	@ (8004690 <MX_GPIO_Init+0x17c>)
 8004574:	f001 fa8a 	bl	8005a8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADS_RSTB_Pin ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_RSTB_Pin|ADS_CS_Pin;
 8004578:	2303      	movs	r3, #3
 800457a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800457c:	2301      	movs	r3, #1
 800457e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004580:	2301      	movs	r3, #1
 8004582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004584:	2300      	movs	r3, #0
 8004586:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004588:	1d3b      	adds	r3, r7, #4
 800458a:	4619      	mov	r1, r3
 800458c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004590:	f001 f8f4 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin;
 8004594:	2310      	movs	r3, #16
 8004596:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004598:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800459c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800459e:	2301      	movs	r3, #1
 80045a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(IMU_INT1_GPIO_Port, &GPIO_InitStruct);
 80045a2:	1d3b      	adds	r3, r7, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045aa:	f001 f8e7 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_SW_Pin */
  GPIO_InitStruct.Pin = PWR_SW_Pin;
 80045ae:	2320      	movs	r3, #32
 80045b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80045b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80045b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(PWR_SW_GPIO_Port, &GPIO_InitStruct);
 80045bc:	1d3b      	adds	r3, r7, #4
 80045be:	4619      	mov	r1, r3
 80045c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045c4:	f001 f8da 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 80045c8:	2340      	movs	r3, #64	@ 0x40
 80045ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045cc:	2301      	movs	r3, #1
 80045ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d4:	2300      	movs	r3, #0
 80045d6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 80045d8:	1d3b      	adds	r3, r7, #4
 80045da:	4619      	mov	r1, r3
 80045dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80045e0:	f001 f8cc 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_ADDR_Pin RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = IMU_ADDR_Pin|RGB_B_Pin|RGB_G_Pin;
 80045e4:	2307      	movs	r3, #7
 80045e6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045e8:	2301      	movs	r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ec:	2300      	movs	r3, #0
 80045ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045f4:	1d3b      	adds	r3, r7, #4
 80045f6:	4619      	mov	r1, r3
 80045f8:	4824      	ldr	r0, [pc, #144]	@ (800468c <MX_GPIO_Init+0x178>)
 80045fa:	f001 f8bf 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 80045fe:	2310      	movs	r3, #16
 8004600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004602:	2301      	movs	r3, #1
 8004604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 800460e:	1d3b      	adds	r3, r7, #4
 8004610:	4619      	mov	r1, r3
 8004612:	481f      	ldr	r0, [pc, #124]	@ (8004690 <MX_GPIO_Init+0x17c>)
 8004614:	f001 f8b2 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pin : PWR_ON_Pin */
  GPIO_InitStruct.Pin = PWR_ON_Pin;
 8004618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800461c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800461e:	2301      	movs	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004622:	2302      	movs	r3, #2
 8004624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(PWR_ON_GPIO_Port, &GPIO_InitStruct);
 800462a:	1d3b      	adds	r3, r7, #4
 800462c:	4619      	mov	r1, r3
 800462e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004632:	f001 f8a3 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_ALARMB_Pin */
  GPIO_InitStruct.Pin = ADS_ALARMB_Pin;
 8004636:	2340      	movs	r3, #64	@ 0x40
 8004638:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800463a:	2300      	movs	r3, #0
 800463c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800463e:	2301      	movs	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_ALARMB_GPIO_Port, &GPIO_InitStruct);
 8004642:	1d3b      	adds	r3, r7, #4
 8004644:	4619      	mov	r1, r3
 8004646:	4811      	ldr	r0, [pc, #68]	@ (800468c <MX_GPIO_Init+0x178>)
 8004648:	f001 f898 	bl	800577c <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 800464c:	2380      	movs	r3, #128	@ 0x80
 800464e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004650:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004656:	2301      	movs	r3, #1
 8004658:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 800465a:	1d3b      	adds	r3, r7, #4
 800465c:	4619      	mov	r1, r3
 800465e:	480b      	ldr	r0, [pc, #44]	@ (800468c <MX_GPIO_Init+0x178>)
 8004660:	f001 f88c 	bl	800577c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004664:	2200      	movs	r2, #0
 8004666:	2100      	movs	r1, #0
 8004668:	200a      	movs	r0, #10
 800466a:	f000 fe02 	bl	8005272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800466e:	200a      	movs	r0, #10
 8004670:	f000 fe19 	bl	80052a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004674:	2200      	movs	r2, #0
 8004676:	2100      	movs	r1, #0
 8004678:	2017      	movs	r0, #23
 800467a:	f000 fdfa 	bl	8005272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800467e:	2017      	movs	r0, #23
 8004680:	f000 fe11 	bl	80052a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004684:	bf00      	nop
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	48000400 	.word	0x48000400
 8004690:	48001000 	.word	0x48001000

08004694 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004698:	b672      	cpsid	i
}
 800469a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SET_RGB_COLOR(RED);
 800469c:	2200      	movs	r2, #0
 800469e:	2110      	movs	r1, #16
 80046a0:	4806      	ldr	r0, [pc, #24]	@ (80046bc <Error_Handler+0x28>)
 80046a2:	f001 f9f3 	bl	8005a8c <HAL_GPIO_WritePin>
 80046a6:	2201      	movs	r2, #1
 80046a8:	2102      	movs	r1, #2
 80046aa:	4805      	ldr	r0, [pc, #20]	@ (80046c0 <Error_Handler+0x2c>)
 80046ac:	f001 f9ee 	bl	8005a8c <HAL_GPIO_WritePin>
 80046b0:	2201      	movs	r2, #1
 80046b2:	2101      	movs	r1, #1
 80046b4:	4802      	ldr	r0, [pc, #8]	@ (80046c0 <Error_Handler+0x2c>)
 80046b6:	f001 f9e9 	bl	8005a8c <HAL_GPIO_WritePin>
 80046ba:	e7ef      	b.n	800469c <Error_Handler+0x8>
 80046bc:	48001000 	.word	0x48001000
 80046c0:	48000400 	.word	0x48000400

080046c4 <LL_RCC_EnableRTC>:
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80046c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80046d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80046dc:	bf00      	nop
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <LL_AHB2_GRP1_EnableClock>:
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80046ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80046f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80046fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4013      	ands	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800470a:	68fb      	ldr	r3, [r7, #12]
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <LL_AHB3_GRP1_EnableClock>:
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004720:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004724:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4313      	orrs	r3, r2
 800472e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004730:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4013      	ands	r3, r2
 800473a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	bf00      	nop
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_APB1_GRP1_EnableClock>:
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004756:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004758:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4313      	orrs	r3, r2
 8004760:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004762:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004766:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4013      	ands	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004788:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800478a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4313      	orrs	r3, r2
 8004792:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004794:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004798:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4013      	ands	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80047a0:	68fb      	ldr	r3, [r7, #12]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047ae:	b580      	push	{r7, lr}
 80047b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80047b2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80047b6:	f7ff ffaf 	bl	8004718 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	2005      	movs	r0, #5
 80047c0:	f000 fd57 	bl	8005272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80047c4:	2005      	movs	r0, #5
 80047c6:	f000 fd6e 	bl	80052a6 <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80047ca:	2200      	movs	r2, #0
 80047cc:	2100      	movs	r1, #0
 80047ce:	202e      	movs	r0, #46	@ 0x2e
 80047d0:	f000 fd4f 	bl	8005272 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80047d4:	202e      	movs	r0, #46	@ 0x2e
 80047d6:	f000 fd66 	bl	80052a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047da:	bf00      	nop
 80047dc:	bd80      	pop	{r7, pc}
	...

080047e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b09c      	sub	sp, #112	@ 0x70
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	609a      	str	r2, [r3, #8]
 80047f4:	60da      	str	r2, [r3, #12]
 80047f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047f8:	f107 030c 	add.w	r3, r7, #12
 80047fc:	2250      	movs	r2, #80	@ 0x50
 80047fe:	2100      	movs	r1, #0
 8004800:	4618      	mov	r0, r3
 8004802:	f011 fb1b 	bl	8015e3c <memset>
  if(hi2c->Instance==I2C1)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a17      	ldr	r2, [pc, #92]	@ (8004868 <HAL_I2C_MspInit+0x88>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d126      	bne.n	800485e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004810:	2304      	movs	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004814:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004818:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800481a:	f107 030c 	add.w	r3, r7, #12
 800481e:	4618      	mov	r0, r3
 8004820:	f004 febe 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800482a:	f7ff ff33 	bl	8004694 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800482e:	2002      	movs	r0, #2
 8004830:	f7ff ff59 	bl	80046e6 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004834:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004838:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800483a:	2312      	movs	r3, #18
 800483c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483e:	2300      	movs	r3, #0
 8004840:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004842:	2300      	movs	r3, #0
 8004844:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004846:	2304      	movs	r3, #4
 8004848:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800484a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800484e:	4619      	mov	r1, r3
 8004850:	4806      	ldr	r0, [pc, #24]	@ (800486c <HAL_I2C_MspInit+0x8c>)
 8004852:	f000 ff93 	bl	800577c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004856:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800485a:	f7ff ff76 	bl	800474a <LL_APB1_GRP1_EnableClock>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800485e:	bf00      	nop
 8004860:	3770      	adds	r7, #112	@ 0x70
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40005400 	.word	0x40005400
 800486c:	48000400 	.word	0x48000400

08004870 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <HAL_IPCC_MspInit+0x44>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d113      	bne.n	80048aa <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8004882:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004886:	f7ff ff47 	bl	8004718 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800488a:	2200      	movs	r2, #0
 800488c:	2100      	movs	r1, #0
 800488e:	202c      	movs	r0, #44	@ 0x2c
 8004890:	f000 fcef 	bl	8005272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8004894:	202c      	movs	r0, #44	@ 0x2c
 8004896:	f000 fd06 	bl	80052a6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	202d      	movs	r0, #45	@ 0x2d
 80048a0:	f000 fce7 	bl	8005272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80048a4:	202d      	movs	r0, #45	@ 0x2d
 80048a6:	f000 fcfe 	bl	80052a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	58000c00 	.word	0x58000c00

080048b8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b096      	sub	sp, #88	@ 0x58
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80048c0:	f107 0308 	add.w	r3, r7, #8
 80048c4:	2250      	movs	r2, #80	@ 0x50
 80048c6:	2100      	movs	r1, #0
 80048c8:	4618      	mov	r0, r3
 80048ca:	f011 fab7 	bl	8015e3c <memset>
  if(hrng->Instance==RNG)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a11      	ldr	r2, [pc, #68]	@ (8004918 <HAL_RNG_MspInit+0x60>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d11b      	bne.n	8004910 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80048d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80048dc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 80048de:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80048e2:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048e4:	f107 0308 	add.w	r3, r7, #8
 80048e8:	4618      	mov	r0, r3
 80048ea:	f004 fe59 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d001      	beq.n	80048f8 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80048f4:	f7ff fece 	bl	8004694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80048f8:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80048fc:	f7ff ff0c 	bl	8004718 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8004900:	2200      	movs	r2, #0
 8004902:	2100      	movs	r1, #0
 8004904:	2035      	movs	r0, #53	@ 0x35
 8004906:	f000 fcb4 	bl	8005272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800490a:	2035      	movs	r0, #53	@ 0x35
 800490c:	f000 fccb 	bl	80052a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8004910:	bf00      	nop
 8004912:	3758      	adds	r7, #88	@ 0x58
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	58001000 	.word	0x58001000

0800491c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b096      	sub	sp, #88	@ 0x58
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004924:	f107 0308 	add.w	r3, r7, #8
 8004928:	2250      	movs	r2, #80	@ 0x50
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f011 fa85 	bl	8015e3c <memset>
  if(hrtc->Instance==RTC)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a12      	ldr	r2, [pc, #72]	@ (8004980 <HAL_RTC_MspInit+0x64>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d11d      	bne.n	8004978 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800493c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004940:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004942:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004946:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004948:	f107 0308 	add.w	r3, r7, #8
 800494c:	4618      	mov	r0, r3
 800494e:	f004 fe27 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004958:	f7ff fe9c 	bl	8004694 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800495c:	f7ff feb2 	bl	80046c4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004960:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004964:	f7ff fef1 	bl	800474a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004968:	2200      	movs	r2, #0
 800496a:	2100      	movs	r1, #0
 800496c:	2003      	movs	r0, #3
 800496e:	f000 fc80 	bl	8005272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004972:	2003      	movs	r0, #3
 8004974:	f000 fc97 	bl	80052a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8004978:	bf00      	nop
 800497a:	3758      	adds	r7, #88	@ 0x58
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40002800 	.word	0x40002800

08004984 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b088      	sub	sp, #32
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	60da      	str	r2, [r3, #12]
 800499a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a0e      	ldr	r2, [pc, #56]	@ (80049dc <HAL_SPI_MspInit+0x58>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d116      	bne.n	80049d4 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80049a6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80049aa:	f7ff fee7 	bl	800477c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ae:	2002      	movs	r0, #2
 80049b0:	f7ff fe99 	bl	80046e6 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80049b4:	2338      	movs	r3, #56	@ 0x38
 80049b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b8:	2302      	movs	r3, #2
 80049ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049bc:	2300      	movs	r3, #0
 80049be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049c0:	2300      	movs	r3, #0
 80049c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80049c4:	2305      	movs	r3, #5
 80049c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049c8:	f107 030c 	add.w	r3, r7, #12
 80049cc:	4619      	mov	r1, r3
 80049ce:	4804      	ldr	r0, [pc, #16]	@ (80049e0 <HAL_SPI_MspInit+0x5c>)
 80049d0:	f000 fed4 	bl	800577c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80049d4:	bf00      	nop
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40013000 	.word	0x40013000
 80049e0:	48000400 	.word	0x48000400

080049e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a11      	ldr	r2, [pc, #68]	@ (8004a38 <HAL_TIM_Base_MspInit+0x54>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d10c      	bne.n	8004a10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049f6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80049fa:	f7ff febf 	bl	800477c <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80049fe:	2200      	movs	r2, #0
 8004a00:	2100      	movs	r1, #0
 8004a02:	2019      	movs	r0, #25
 8004a04:	f000 fc35 	bl	8005272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004a08:	2019      	movs	r0, #25
 8004a0a:	f000 fc4c 	bl	80052a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004a0e:	e00f      	b.n	8004a30 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM2)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a18:	d10a      	bne.n	8004a30 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	f7ff fe95 	bl	800474a <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004a20:	2200      	movs	r2, #0
 8004a22:	2100      	movs	r1, #0
 8004a24:	201c      	movs	r0, #28
 8004a26:	f000 fc24 	bl	8005272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004a2a:	201c      	movs	r0, #28
 8004a2c:	f000 fc3b 	bl	80052a6 <HAL_NVIC_EnableIRQ>
}
 8004a30:	bf00      	nop
 8004a32:	3708      	adds	r7, #8
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40012c00 	.word	0x40012c00

08004a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <NMI_Handler+0x4>

08004a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004a44:	b480      	push	{r7}
 8004a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004a48:	bf00      	nop
 8004a4a:	e7fd      	b.n	8004a48 <HardFault_Handler+0x4>

08004a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <MemManage_Handler+0x4>

08004a54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004a54:	b480      	push	{r7}
 8004a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <BusFault_Handler+0x4>

08004a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004a60:	bf00      	nop
 8004a62:	e7fd      	b.n	8004a60 <UsageFault_Handler+0x4>

08004a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004a68:	bf00      	nop
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004a76:	bf00      	nop
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004a84:	bf00      	nop
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004a92:	f000 fa7b 	bl	8004f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004a96:	bf00      	nop
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8004a9e:	f7fe fcb9 	bl	8003414 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}

08004aa6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004aaa:	bf00      	nop
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8004ab8:	2010      	movs	r0, #16
 8004aba:	f000 ffff 	bl	8005abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
	...

08004ac4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004ac8:	4802      	ldr	r0, [pc, #8]	@ (8004ad4 <DMA1_Channel1_IRQHandler+0x10>)
 8004aca:	f000 fd69 	bl	80055a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200018c0 	.word	0x200018c0

08004ad8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004adc:	4802      	ldr	r0, [pc, #8]	@ (8004ae8 <USB_LP_IRQHandler+0x10>)
 8004ade:	f001 fe17 	bl	8006710 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20002f6c 	.word	0x20002f6c

08004aec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PWR_SW_Pin);
 8004af0:	2020      	movs	r0, #32
 8004af2:	f000 ffe3 	bl	8005abc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8004af6:	2080      	movs	r0, #128	@ 0x80
 8004af8:	f000 ffe0 	bl	8005abc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}

08004b00 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004b04:	4802      	ldr	r0, [pc, #8]	@ (8004b10 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004b06:	f006 f8a9 	bl	800ac5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20001794 	.word	0x20001794

08004b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b18:	4802      	ldr	r0, [pc, #8]	@ (8004b24 <TIM2_IRQHandler+0x10>)
 8004b1a:	f006 f89f 	bl	800ac5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	200017e0 	.word	0x200017e0

08004b28 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004b2c:	4802      	ldr	r0, [pc, #8]	@ (8004b38 <USART1_IRQHandler+0x10>)
 8004b2e:	f006 fc97 	bl	800b460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	2000182c 	.word	0x2000182c

08004b3c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004b40:	f00f fe38 	bl	80147b4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8004b44:	bf00      	nop
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004b4c:	f00f fe68 	bl	8014820 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004b58:	f000 ffc8 	bl	8005aec <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004b5c:	bf00      	nop
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8004b64:	4802      	ldr	r0, [pc, #8]	@ (8004b70 <RNG_IRQHandler+0x10>)
 8004b66:	f005 f811 	bl	8009b8c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	200016f8 	.word	0x200016f8

08004b74 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b086      	sub	sp, #24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b80:	2300      	movs	r3, #0
 8004b82:	617b      	str	r3, [r7, #20]
 8004b84:	e00a      	b.n	8004b9c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004b86:	f3af 8000 	nop.w
 8004b8a:	4601      	mov	r1, r0
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	60ba      	str	r2, [r7, #8]
 8004b92:	b2ca      	uxtb	r2, r1
 8004b94:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	dbf0      	blt.n	8004b86 <_read+0x12>
  }

  return len;
 8004ba4:	687b      	ldr	r3, [r7, #4]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <_close>:
  }
  return len;
}

int _close(int file)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004bb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	370c      	adds	r7, #12
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004bd6:	605a      	str	r2, [r3, #4]
  return 0;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <_isatty>:

int _isatty(int file)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004bee:	2301      	movs	r3, #1
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3714      	adds	r7, #20
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
	...

08004c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004c20:	4a14      	ldr	r2, [pc, #80]	@ (8004c74 <_sbrk+0x5c>)
 8004c22:	4b15      	ldr	r3, [pc, #84]	@ (8004c78 <_sbrk+0x60>)
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004c2c:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <_sbrk+0x64>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c34:	4b11      	ldr	r3, [pc, #68]	@ (8004c7c <_sbrk+0x64>)
 8004c36:	4a12      	ldr	r2, [pc, #72]	@ (8004c80 <_sbrk+0x68>)
 8004c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c3a:	4b10      	ldr	r3, [pc, #64]	@ (8004c7c <_sbrk+0x64>)
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4413      	add	r3, r2
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d207      	bcs.n	8004c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c48:	f011 f95c 	bl	8015f04 <__errno>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	220c      	movs	r2, #12
 8004c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004c52:	f04f 33ff 	mov.w	r3, #4294967295
 8004c56:	e009      	b.n	8004c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c58:	4b08      	ldr	r3, [pc, #32]	@ (8004c7c <_sbrk+0x64>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c5e:	4b07      	ldr	r3, [pc, #28]	@ (8004c7c <_sbrk+0x64>)
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	4a05      	ldr	r2, [pc, #20]	@ (8004c7c <_sbrk+0x64>)
 8004c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	20030000 	.word	0x20030000
 8004c78:	00000600 	.word	0x00000600
 8004c7c:	20001920 	.word	0x20001920
 8004c80:	20003678 	.word	0x20003678

08004c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c84:	b480      	push	{r7}
 8004c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004c88:	4b24      	ldr	r3, [pc, #144]	@ (8004d1c <SystemInit+0x98>)
 8004c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c8e:	4a23      	ldr	r2, [pc, #140]	@ (8004d1c <SystemInit+0x98>)
 8004c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004ca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cac:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004cb0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004cbc:	4b18      	ldr	r3, [pc, #96]	@ (8004d20 <SystemInit+0x9c>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004cce:	f023 0305 	bic.w	r3, r3, #5
 8004cd2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004cd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ce2:	f023 0301 	bic.w	r3, r3, #1
 8004ce6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004cea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cee:	4a0d      	ldr	r2, [pc, #52]	@ (8004d24 <SystemInit+0xa0>)
 8004cf0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cf6:	4a0b      	ldr	r2, [pc, #44]	@ (8004d24 <SystemInit+0xa0>)
 8004cf8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004d04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004d08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004d0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004d0e:	2200      	movs	r2, #0
 8004d10:	619a      	str	r2, [r3, #24]
}
 8004d12:	bf00      	nop
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	e000ed00 	.word	0xe000ed00
 8004d20:	faf6fefb 	.word	0xfaf6fefb
 8004d24:	22041000 	.word	0x22041000

08004d28 <Timer_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Timer_Init (void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
	DIAG ("\t\tTimer initialised\r\n");
 8004d2c:	4806      	ldr	r0, [pc, #24]	@ (8004d48 <Timer_Init+0x20>)
 8004d2e:	f7fd ffcf 	bl	8002cd0 <DIAG>
	HAL_Delay (10);
 8004d32:	200a      	movs	r0, #10
 8004d34:	f7fd ff30 	bl	8002b98 <HAL_Delay>
	// Start TIM2 in basic mode
	HAL_TIM_Base_Start_IT(&htim2);
 8004d38:	4804      	ldr	r0, [pc, #16]	@ (8004d4c <Timer_Init+0x24>)
 8004d3a:	f005 ff41 	bl	800abc0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8004d3e:	4804      	ldr	r0, [pc, #16]	@ (8004d50 <Timer_Init+0x28>)
 8004d40:	f005 ff3e 	bl	800abc0 <HAL_TIM_Base_Start_IT>
}
 8004d44:	bf00      	nop
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	08018284 	.word	0x08018284
 8004d4c:	200017e0 	.word	0x200017e0
 8004d50:	20001794 	.word	0x20001794

08004d54 <HAL_TIM_PeriodElapsedCallback>:

//------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]

	// Base timer @ 1ms
	if (htim->Instance == TIM2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d64:	d130      	bne.n	8004dc8 <HAL_TIM_PeriodElapsedCallback+0x74>
	{
		// Clear the timer interrupt flag
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);		  // Clear the timer interrupt flag
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0201 	mvn.w	r2, #1
 8004d6e:	611a      	str	r2, [r3, #16]
		tsTimer.u8TimeFlag = true;
 8004d70:	4b33      	ldr	r3, [pc, #204]	@ (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	709a      	strb	r2, [r3, #2]
		htim2.Init.Period = Interrupt_ms;
 8004d76:	4b33      	ldr	r3, [pc, #204]	@ (8004e44 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8004d78:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004d7c:	60da      	str	r2, [r3, #12]

		// Detecting Power Button
		if ( HAL_GPIO_ReadPin( GPIOA, PWR_SW_Pin ) == false && tsSystem.bPowerOnFlag == true )
 8004d7e:	2120      	movs	r1, #32
 8004d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004d84:	f000 fe6a 	bl	8005a5c <HAL_GPIO_ReadPin>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d116      	bne.n	8004dbc <HAL_TIM_PeriodElapsedCallback+0x68>
 8004d8e:	4b2e      	ldr	r3, [pc, #184]	@ (8004e48 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004d90:	795b      	ldrb	r3, [r3, #5]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d112      	bne.n	8004dbc <HAL_TIM_PeriodElapsedCallback+0x68>
		{

			tsTimer.u16PwrCount++;
 8004d96:	4b2a      	ldr	r3, [pc, #168]	@ (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004d98:	895b      	ldrh	r3, [r3, #10]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	4b27      	ldr	r3, [pc, #156]	@ (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004da2:	815a      	strh	r2, [r3, #10]
			if ( tsTimer.u16PwrCount >= PowerOffTime )
 8004da4:	4b26      	ldr	r3, [pc, #152]	@ (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004da6:	895b      	ldrh	r3, [r3, #10]
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	2b1d      	cmp	r3, #29
 8004dac:	d90c      	bls.n	8004dc8 <HAL_TIM_PeriodElapsedCallback+0x74>
			{
				tsSystem.OFF = true;
 8004dae:	4b26      	ldr	r3, [pc, #152]	@ (8004e48 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	709a      	strb	r2, [r3, #2]
				tsTimer.u16PwrCount = PowerOffTime + 1;
 8004db4:	4b22      	ldr	r3, [pc, #136]	@ (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004db6:	221f      	movs	r2, #31
 8004db8:	815a      	strh	r2, [r3, #10]
			if ( tsTimer.u16PwrCount >= PowerOffTime )
 8004dba:	e005      	b.n	8004dc8 <HAL_TIM_PeriodElapsedCallback+0x74>
			}
		}
		else
		{
			tsTimer.u16PwrCount = 0;
 8004dbc:	4b20      	ldr	r3, [pc, #128]	@ (8004e40 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	815a      	strh	r2, [r3, #10]
			tsSystem.OFF = false;
 8004dc2:	4b21      	ldr	r3, [pc, #132]	@ (8004e48 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	709a      	strb	r2, [r3, #2]
		}
	}

	// Calculating AFE sampling rate
	if (htim->Instance == TIM1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8004e4c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d132      	bne.n	8004e38 <HAL_TIM_PeriodElapsedCallback+0xe4>
	{
		tsTimer1.u16Count++;
 8004dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004dd4:	891b      	ldrh	r3, [r3, #8]
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8004e50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004dde:	811a      	strh	r2, [r3, #8]

		if ( tsTimer1.u16Count > 1999)
 8004de0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004de2:	891b      	ldrh	r3, [r3, #8]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004dea:	d325      	bcc.n	8004e38 <HAL_TIM_PeriodElapsedCallback+0xe4>
		{
			tsTimer1.u16Count = 0;
 8004dec:	4b18      	ldr	r3, [pc, #96]	@ (8004e50 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	811a      	strh	r2, [r3, #8]
			AFE.u16SPS = AFE.u16SampleCount;
 8004df2:	4b18      	ldr	r3, [pc, #96]	@ (8004e54 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	4b16      	ldr	r3, [pc, #88]	@ (8004e54 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004dfa:	805a      	strh	r2, [r3, #2]
			AFE.u16SampleCount =0;
 8004dfc:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	801a      	strh	r2, [r3, #0]
			tsDebug.u8PacketCount[0]= tsBle.u8PacketCount[0];
 8004e02:	4b15      	ldr	r3, [pc, #84]	@ (8004e58 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004e04:	799a      	ldrb	r2, [r3, #6]
 8004e06:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004e08:	f883 226a 	strb.w	r2, [r3, #618]	@ 0x26a
			tsDebug.u8PacketCount[1]= tsBle.u8PacketCount[1];
 8004e0c:	4b12      	ldr	r3, [pc, #72]	@ (8004e58 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004e0e:	79da      	ldrb	r2, [r3, #7]
 8004e10:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004e12:	f883 226b 	strb.w	r2, [r3, #619]	@ 0x26b
			tsBle.u8PacketCount[0] = 0;
 8004e16:	4b10      	ldr	r3, [pc, #64]	@ (8004e58 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	719a      	strb	r2, [r3, #6]
			tsBle.u8PacketCount[1] = 0;
 8004e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8004e58 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	71da      	strb	r2, [r3, #7]

			IMU.u16SPS = IMU.u16SampleCount;
 8004e22:	4b0f      	ldr	r3, [pc, #60]	@ (8004e60 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004e24:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e60 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004e2c:	f8a3 21c4 	strh.w	r2, [r3, #452]	@ 0x1c4
			IMU.u16SampleCount =0;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	@ (8004e60 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	f8a3 21c2 	strh.w	r2, [r3, #450]	@ 0x1c2
		}
	}



}
 8004e38:	bf00      	nop
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20001924 	.word	0x20001924
 8004e44:	200017e0 	.word	0x200017e0
 8004e48:	20001658 	.word	0x20001658
 8004e4c:	40012c00 	.word	0x40012c00
 8004e50:	20001930 	.word	0x20001930
 8004e54:	2000193c 	.word	0x2000193c
 8004e58:	200019dc 	.word	0x200019dc
 8004e5c:	20001324 	.word	0x20001324
 8004e60:	20000e80 	.word	0x20000e80

08004e64 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004e64:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e66:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e68:	3304      	adds	r3, #4

08004e6a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e6a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e6c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004e6e:	d3f9      	bcc.n	8004e64 <CopyDataInit>
  bx lr
 8004e70:	4770      	bx	lr

08004e72 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004e72:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004e74:	3004      	adds	r0, #4

08004e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004e76:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004e78:	d3fb      	bcc.n	8004e72 <FillZerobss>
  bx lr
 8004e7a:	4770      	bx	lr

08004e7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004e7c:	480c      	ldr	r0, [pc, #48]	@ (8004eb0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004e7e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004e80:	f7ff ff00 	bl	8004c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004e84:	480b      	ldr	r0, [pc, #44]	@ (8004eb4 <LoopForever+0x6>)
 8004e86:	490c      	ldr	r1, [pc, #48]	@ (8004eb8 <LoopForever+0xa>)
 8004e88:	4a0c      	ldr	r2, [pc, #48]	@ (8004ebc <LoopForever+0xe>)
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f7ff ffed 	bl	8004e6a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004e90:	480b      	ldr	r0, [pc, #44]	@ (8004ec0 <LoopForever+0x12>)
 8004e92:	490c      	ldr	r1, [pc, #48]	@ (8004ec4 <LoopForever+0x16>)
 8004e94:	4a0c      	ldr	r2, [pc, #48]	@ (8004ec8 <LoopForever+0x1a>)
 8004e96:	2300      	movs	r3, #0
 8004e98:	f7ff ffe7 	bl	8004e6a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004e9c:	480b      	ldr	r0, [pc, #44]	@ (8004ecc <LoopForever+0x1e>)
 8004e9e:	490c      	ldr	r1, [pc, #48]	@ (8004ed0 <LoopForever+0x22>)
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	f7ff ffe8 	bl	8004e76 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004ea6:	f011 f833 	bl	8015f10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004eaa:	f7ff f8df 	bl	800406c <main>

08004eae <LoopForever>:

LoopForever:
  b LoopForever
 8004eae:	e7fe      	b.n	8004eae <LoopForever>
  ldr   r0, =_estack
 8004eb0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004eb4:	20000008 	.word	0x20000008
 8004eb8:	20000194 	.word	0x20000194
 8004ebc:	08019f68 	.word	0x08019f68
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004ec0:	200301e4 	.word	0x200301e4
 8004ec4:	20031f57 	.word	0x20031f57
 8004ec8:	0801a13a 	.word	0x0801a13a
  INIT_BSS _sbss, _ebss
 8004ecc:	200001e0 	.word	0x200001e0
 8004ed0:	20003674 	.word	0x20003674

08004ed4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ed4:	e7fe      	b.n	8004ed4 <ADC1_IRQHandler>
	...

08004ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8004f14 <HAL_Init+0x3c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8004f14 <HAL_Init+0x3c>)
 8004ee8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eec:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004eee:	2003      	movs	r0, #3
 8004ef0:	f000 f9b4 	bl	800525c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ef4:	2000      	movs	r0, #0
 8004ef6:	f000 f80f 	bl	8004f18 <HAL_InitTick>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d002      	beq.n	8004f06 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	71fb      	strb	r3, [r7, #7]
 8004f04:	e001      	b.n	8004f0a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004f06:	f7ff fc52 	bl	80047ae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	58004000 	.word	0x58004000

08004f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004f24:	4b17      	ldr	r3, [pc, #92]	@ (8004f84 <HAL_InitTick+0x6c>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d024      	beq.n	8004f76 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004f2c:	f004 f8ae 	bl	800908c <HAL_RCC_GetHCLKFreq>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b14      	ldr	r3, [pc, #80]	@ (8004f84 <HAL_InitTick+0x6c>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	4619      	mov	r1, r3
 8004f38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004f3c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f44:	4618      	mov	r0, r3
 8004f46:	f000 f9ca 	bl	80052de <HAL_SYSTICK_Config>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b0f      	cmp	r3, #15
 8004f54:	d809      	bhi.n	8004f6a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f56:	2200      	movs	r2, #0
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f5e:	f000 f988 	bl	8005272 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004f62:	4a09      	ldr	r2, [pc, #36]	@ (8004f88 <HAL_InitTick+0x70>)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6013      	str	r3, [r2, #0]
 8004f68:	e007      	b.n	8004f7a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	73fb      	strb	r3, [r7, #15]
 8004f6e:	e004      	b.n	8004f7a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	e001      	b.n	8004f7a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	20000018 	.word	0x20000018
 8004f88:	20000014 	.word	0x20000014

08004f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f90:	4b06      	ldr	r3, [pc, #24]	@ (8004fac <HAL_IncTick+0x20>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	4b06      	ldr	r3, [pc, #24]	@ (8004fb0 <HAL_IncTick+0x24>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	4a04      	ldr	r2, [pc, #16]	@ (8004fb0 <HAL_IncTick+0x24>)
 8004f9e:	6013      	str	r3, [r2, #0]
}
 8004fa0:	bf00      	nop
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	20000018 	.word	0x20000018
 8004fb0:	20001940 	.word	0x20001940

08004fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8004fb8:	4b03      	ldr	r3, [pc, #12]	@ (8004fc8 <HAL_GetTick+0x14>)
 8004fba:	681b      	ldr	r3, [r3, #0]
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	20001940 	.word	0x20001940

08004fcc <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004fd0:	4b03      	ldr	r3, [pc, #12]	@ (8004fe0 <HAL_GetTickPrio+0x14>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000014 	.word	0x20000014

08004fe4 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_GetTickFreq+0x14>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000018 	.word	0x20000018

08004ffc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f003 0307 	and.w	r3, r3, #7
 800500a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800500c:	4b0c      	ldr	r3, [pc, #48]	@ (8005040 <__NVIC_SetPriorityGrouping+0x44>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005012:	68ba      	ldr	r2, [r7, #8]
 8005014:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005018:	4013      	ands	r3, r2
 800501a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005024:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005028:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800502c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800502e:	4a04      	ldr	r2, [pc, #16]	@ (8005040 <__NVIC_SetPriorityGrouping+0x44>)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	60d3      	str	r3, [r2, #12]
}
 8005034:	bf00      	nop
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr
 8005040:	e000ed00 	.word	0xe000ed00

08005044 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005048:	4b04      	ldr	r3, [pc, #16]	@ (800505c <__NVIC_GetPriorityGrouping+0x18>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	0a1b      	lsrs	r3, r3, #8
 800504e:	f003 0307 	and.w	r3, r3, #7
}
 8005052:	4618      	mov	r0, r3
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	e000ed00 	.word	0xe000ed00

08005060 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	4603      	mov	r3, r0
 8005068:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800506a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506e:	2b00      	cmp	r3, #0
 8005070:	db0b      	blt.n	800508a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005072:	79fb      	ldrb	r3, [r7, #7]
 8005074:	f003 021f 	and.w	r2, r3, #31
 8005078:	4907      	ldr	r1, [pc, #28]	@ (8005098 <__NVIC_EnableIRQ+0x38>)
 800507a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507e:	095b      	lsrs	r3, r3, #5
 8005080:	2001      	movs	r0, #1
 8005082:	fa00 f202 	lsl.w	r2, r0, r2
 8005086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	e000e100 	.word	0xe000e100

0800509c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	4603      	mov	r3, r0
 80050a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	db12      	blt.n	80050d4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	f003 021f 	and.w	r2, r3, #31
 80050b4:	490a      	ldr	r1, [pc, #40]	@ (80050e0 <__NVIC_DisableIRQ+0x44>)
 80050b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2001      	movs	r0, #1
 80050be:	fa00 f202 	lsl.w	r2, r0, r2
 80050c2:	3320      	adds	r3, #32
 80050c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80050c8:	f3bf 8f4f 	dsb	sy
}
 80050cc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80050ce:	f3bf 8f6f 	isb	sy
}
 80050d2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	e000e100 	.word	0xe000e100

080050e4 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	db0c      	blt.n	8005110 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	f003 021f 	and.w	r2, r3, #31
 80050fc:	4907      	ldr	r1, [pc, #28]	@ (800511c <__NVIC_SetPendingIRQ+0x38>)
 80050fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005102:	095b      	lsrs	r3, r3, #5
 8005104:	2001      	movs	r0, #1
 8005106:	fa00 f202 	lsl.w	r2, r0, r2
 800510a:	3340      	adds	r3, #64	@ 0x40
 800510c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr
 800511c:	e000e100 	.word	0xe000e100

08005120 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800512a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800512e:	2b00      	cmp	r3, #0
 8005130:	db0c      	blt.n	800514c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	f003 021f 	and.w	r2, r3, #31
 8005138:	4907      	ldr	r1, [pc, #28]	@ (8005158 <__NVIC_ClearPendingIRQ+0x38>)
 800513a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	2001      	movs	r0, #1
 8005142:	fa00 f202 	lsl.w	r2, r0, r2
 8005146:	3360      	adds	r3, #96	@ 0x60
 8005148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800514c:	bf00      	nop
 800514e:	370c      	adds	r7, #12
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000e100 	.word	0xe000e100

0800515c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516c:	2b00      	cmp	r3, #0
 800516e:	db0a      	blt.n	8005186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	b2da      	uxtb	r2, r3
 8005174:	490c      	ldr	r1, [pc, #48]	@ (80051a8 <__NVIC_SetPriority+0x4c>)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	0112      	lsls	r2, r2, #4
 800517c:	b2d2      	uxtb	r2, r2
 800517e:	440b      	add	r3, r1
 8005180:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005184:	e00a      	b.n	800519c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	b2da      	uxtb	r2, r3
 800518a:	4908      	ldr	r1, [pc, #32]	@ (80051ac <__NVIC_SetPriority+0x50>)
 800518c:	79fb      	ldrb	r3, [r7, #7]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	3b04      	subs	r3, #4
 8005194:	0112      	lsls	r2, r2, #4
 8005196:	b2d2      	uxtb	r2, r2
 8005198:	440b      	add	r3, r1
 800519a:	761a      	strb	r2, [r3, #24]
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	e000e100 	.word	0xe000e100
 80051ac:	e000ed00 	.word	0xe000ed00

080051b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b089      	sub	sp, #36	@ 0x24
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f1c3 0307 	rsb	r3, r3, #7
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	bf28      	it	cs
 80051ce:	2304      	movcs	r3, #4
 80051d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	3304      	adds	r3, #4
 80051d6:	2b06      	cmp	r3, #6
 80051d8:	d902      	bls.n	80051e0 <NVIC_EncodePriority+0x30>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	3b03      	subs	r3, #3
 80051de:	e000      	b.n	80051e2 <NVIC_EncodePriority+0x32>
 80051e0:	2300      	movs	r3, #0
 80051e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051e4:	f04f 32ff 	mov.w	r2, #4294967295
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43da      	mvns	r2, r3
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	401a      	ands	r2, r3
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80051f8:	f04f 31ff 	mov.w	r1, #4294967295
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005202:	43d9      	mvns	r1, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005208:	4313      	orrs	r3, r2
         );
}
 800520a:	4618      	mov	r0, r3
 800520c:	3724      	adds	r7, #36	@ 0x24
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
	...

08005218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3b01      	subs	r3, #1
 8005224:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005228:	d301      	bcc.n	800522e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800522a:	2301      	movs	r3, #1
 800522c:	e00f      	b.n	800524e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800522e:	4a0a      	ldr	r2, [pc, #40]	@ (8005258 <SysTick_Config+0x40>)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	3b01      	subs	r3, #1
 8005234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005236:	210f      	movs	r1, #15
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	f7ff ff8e 	bl	800515c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005240:	4b05      	ldr	r3, [pc, #20]	@ (8005258 <SysTick_Config+0x40>)
 8005242:	2200      	movs	r2, #0
 8005244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005246:	4b04      	ldr	r3, [pc, #16]	@ (8005258 <SysTick_Config+0x40>)
 8005248:	2207      	movs	r2, #7
 800524a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	e000e010 	.word	0xe000e010

0800525c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fec9 	bl	8004ffc <__NVIC_SetPriorityGrouping>
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b086      	sub	sp, #24
 8005276:	af00      	add	r7, sp, #0
 8005278:	4603      	mov	r3, r0
 800527a:	60b9      	str	r1, [r7, #8]
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005280:	f7ff fee0 	bl	8005044 <__NVIC_GetPriorityGrouping>
 8005284:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	6978      	ldr	r0, [r7, #20]
 800528c:	f7ff ff90 	bl	80051b0 <NVIC_EncodePriority>
 8005290:	4602      	mov	r2, r0
 8005292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f7ff ff5f 	bl	800515c <__NVIC_SetPriority>
}
 800529e:	bf00      	nop
 80052a0:	3718      	adds	r7, #24
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052a6:	b580      	push	{r7, lr}
 80052a8:	b082      	sub	sp, #8
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	4603      	mov	r3, r0
 80052ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fed3 	bl	8005060 <__NVIC_EnableIRQ>
}
 80052ba:	bf00      	nop
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b082      	sub	sp, #8
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	4603      	mov	r3, r0
 80052ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80052cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fee3 	bl	800509c <__NVIC_DisableIRQ>
}
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f7ff ff96 	bl	8005218 <SysTick_Config>
 80052ec:	4603      	mov	r3, r0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	4603      	mov	r3, r0
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff feed 	bl	80050e4 <__NVIC_SetPendingIRQ>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	4603      	mov	r3, r0
 800531a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800531c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005320:	4618      	mov	r0, r3
 8005322:	f7ff fefd 	bl	8005120 <__NVIC_ClearPendingIRQ>
}
 8005326:	bf00      	nop
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800532e:	b580      	push	{r7, lr}
 8005330:	b086      	sub	sp, #24
 8005332:	af00      	add	r7, sp, #0
 8005334:	60f8      	str	r0, [r7, #12]
 8005336:	60b9      	str	r1, [r7, #8]
 8005338:	607a      	str	r2, [r7, #4]
 800533a:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800533c:	2300      	movs	r3, #0
 800533e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005346:	2b01      	cmp	r3, #1
 8005348:	d101      	bne.n	800534e <HAL_DMA_Start_IT+0x20>
 800534a:	2302      	movs	r3, #2
 800534c:	e066      	b.n	800541c <HAL_DMA_Start_IT+0xee>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b01      	cmp	r3, #1
 8005360:	d155      	bne.n	800540e <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2202      	movs	r2, #2
 8005366:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	68b9      	ldr	r1, [r7, #8]
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f000 f9b9 	bl	80056fe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 020e 	orr.w	r2, r2, #14
 80053a2:	601a      	str	r2, [r3, #0]
 80053a4:	e00f      	b.n	80053c6 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 0204 	bic.w	r2, r2, #4
 80053b4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f042 020a 	orr.w	r2, r2, #10
 80053c4:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053e2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053fa:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681a      	ldr	r2, [r3, #0]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0201 	orr.w	r2, r2, #1
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e005      	b.n	800541a <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005416:	2302      	movs	r3, #2
 8005418:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800541a:	7dfb      	ldrb	r3, [r7, #23]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3718      	adds	r7, #24
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e04f      	b.n	80054d6 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d008      	beq.n	8005454 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2204      	movs	r2, #4
 8005446:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e040      	b.n	80054d6 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 020e 	bic.w	r2, r2, #14
 8005462:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800546e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005472:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005488:	f003 021c 	and.w	r2, r3, #28
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005490:	2101      	movs	r1, #1
 8005492:	fa01 f202 	lsl.w	r2, r1, r2
 8005496:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054a0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00c      	beq.n	80054c4 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80054c2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d005      	beq.n	8005506 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2204      	movs	r2, #4
 80054fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	73fb      	strb	r3, [r7, #15]
 8005504:	e047      	b.n	8005596 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 020e 	bic.w	r2, r2, #14
 8005514:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0201 	bic.w	r2, r2, #1
 8005524:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005530:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005534:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	f003 021c 	and.w	r2, r3, #28
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	2101      	movs	r1, #1
 8005544:	fa01 f202 	lsl.w	r2, r1, r2
 8005548:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005552:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005566:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800556a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005574:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	4798      	blx	r3
    }
  }
  return status;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055bc:	f003 031c 	and.w	r3, r3, #28
 80055c0:	2204      	movs	r2, #4
 80055c2:	409a      	lsls	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	4013      	ands	r3, r2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d026      	beq.n	800561a <HAL_DMA_IRQHandler+0x7a>
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f003 0304 	and.w	r3, r3, #4
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d021      	beq.n	800561a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0320 	and.w	r3, r3, #32
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d107      	bne.n	80055f4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681a      	ldr	r2, [r3, #0]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f022 0204 	bic.w	r2, r2, #4
 80055f2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f8:	f003 021c 	and.w	r2, r3, #28
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005600:	2104      	movs	r1, #4
 8005602:	fa01 f202 	lsl.w	r2, r1, r2
 8005606:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560c:	2b00      	cmp	r3, #0
 800560e:	d071      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005618:	e06c      	b.n	80056f4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800561e:	f003 031c 	and.w	r3, r3, #28
 8005622:	2202      	movs	r2, #2
 8005624:	409a      	lsls	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d02e      	beq.n	800568c <HAL_DMA_IRQHandler+0xec>
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d029      	beq.n	800568c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 020a 	bic.w	r2, r2, #10
 8005654:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005662:	f003 021c 	and.w	r2, r3, #28
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800566a:	2102      	movs	r1, #2
 800566c:	fa01 f202 	lsl.w	r2, r1, r2
 8005670:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d038      	beq.n	80056f4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800568a:	e033      	b.n	80056f4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005690:	f003 031c 	and.w	r3, r3, #28
 8005694:	2208      	movs	r2, #8
 8005696:	409a      	lsls	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4013      	ands	r3, r2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d02a      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x156>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0308 	and.w	r3, r3, #8
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d025      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 020e 	bic.w	r2, r2, #14
 80056b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056be:	f003 021c 	and.w	r2, r3, #28
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c6:	2101      	movs	r1, #1
 80056c8:	fa01 f202 	lsl.w	r2, r1, r2
 80056cc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2201      	movs	r2, #1
 80056d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d004      	beq.n	80056f6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
}
 80056f8:	3710      	adds	r7, #16
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	607a      	str	r2, [r7, #4]
 800570a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005714:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005726:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572c:	f003 021c 	and.w	r2, r3, #28
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	2101      	movs	r1, #1
 8005736:	fa01 f202 	lsl.w	r2, r1, r2
 800573a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b10      	cmp	r3, #16
 800574a:	d108      	bne.n	800575e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800575c:	e007      	b.n	800576e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	60da      	str	r2, [r3, #12]
}
 800576e:	bf00      	nop
 8005770:	3714      	adds	r7, #20
 8005772:	46bd      	mov	sp, r7
 8005774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005778:	4770      	bx	lr
	...

0800577c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005786:	2300      	movs	r3, #0
 8005788:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800578a:	e14c      	b.n	8005a26 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	2101      	movs	r1, #1
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	fa01 f303 	lsl.w	r3, r1, r3
 8005798:	4013      	ands	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 813e 	beq.w	8005a20 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f003 0303 	and.w	r3, r3, #3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d005      	beq.n	80057bc <HAL_GPIO_Init+0x40>
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0303 	and.w	r3, r3, #3
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d130      	bne.n	800581e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	005b      	lsls	r3, r3, #1
 80057c6:	2203      	movs	r2, #3
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4013      	ands	r3, r2
 80057d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68da      	ldr	r2, [r3, #12]
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	fa02 f303 	lsl.w	r3, r2, r3
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	693a      	ldr	r2, [r7, #16]
 80057ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80057f2:	2201      	movs	r2, #1
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	fa02 f303 	lsl.w	r3, r2, r3
 80057fa:	43db      	mvns	r3, r3
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4013      	ands	r3, r2
 8005800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	091b      	lsrs	r3, r3, #4
 8005808:	f003 0201 	and.w	r2, r3, #1
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	fa02 f303 	lsl.w	r3, r2, r3
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 0303 	and.w	r3, r3, #3
 8005826:	2b03      	cmp	r3, #3
 8005828:	d017      	beq.n	800585a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	2203      	movs	r2, #3
 8005836:	fa02 f303 	lsl.w	r3, r2, r3
 800583a:	43db      	mvns	r3, r3
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	4013      	ands	r3, r2
 8005840:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	fa02 f303 	lsl.w	r3, r2, r3
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f003 0303 	and.w	r3, r3, #3
 8005862:	2b02      	cmp	r3, #2
 8005864:	d123      	bne.n	80058ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	08da      	lsrs	r2, r3, #3
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	3208      	adds	r2, #8
 800586e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005872:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	220f      	movs	r2, #15
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43db      	mvns	r3, r3
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	4013      	ands	r3, r2
 8005888:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 0307 	and.w	r3, r3, #7
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	08da      	lsrs	r2, r3, #3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	3208      	adds	r2, #8
 80058a8:	6939      	ldr	r1, [r7, #16]
 80058aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	2203      	movs	r2, #3
 80058ba:	fa02 f303 	lsl.w	r3, r2, r3
 80058be:	43db      	mvns	r3, r3
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4013      	ands	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	f003 0203 	and.w	r2, r3, #3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	fa02 f303 	lsl.w	r3, r2, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	693a      	ldr	r2, [r7, #16]
 80058e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	f000 8098 	beq.w	8005a20 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80058f0:	4a54      	ldr	r2, [pc, #336]	@ (8005a44 <HAL_GPIO_Init+0x2c8>)
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	089b      	lsrs	r3, r3, #2
 80058f6:	3302      	adds	r3, #2
 80058f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f003 0303 	and.w	r3, r3, #3
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	220f      	movs	r2, #15
 8005908:	fa02 f303 	lsl.w	r3, r2, r3
 800590c:	43db      	mvns	r3, r3
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	4013      	ands	r3, r2
 8005912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800591a:	d019      	beq.n	8005950 <HAL_GPIO_Init+0x1d4>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a4a      	ldr	r2, [pc, #296]	@ (8005a48 <HAL_GPIO_Init+0x2cc>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d013      	beq.n	800594c <HAL_GPIO_Init+0x1d0>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a49      	ldr	r2, [pc, #292]	@ (8005a4c <HAL_GPIO_Init+0x2d0>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00d      	beq.n	8005948 <HAL_GPIO_Init+0x1cc>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a48      	ldr	r2, [pc, #288]	@ (8005a50 <HAL_GPIO_Init+0x2d4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <HAL_GPIO_Init+0x1c8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a47      	ldr	r2, [pc, #284]	@ (8005a54 <HAL_GPIO_Init+0x2d8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <HAL_GPIO_Init+0x1c4>
 800593c:	2304      	movs	r3, #4
 800593e:	e008      	b.n	8005952 <HAL_GPIO_Init+0x1d6>
 8005940:	2307      	movs	r3, #7
 8005942:	e006      	b.n	8005952 <HAL_GPIO_Init+0x1d6>
 8005944:	2303      	movs	r3, #3
 8005946:	e004      	b.n	8005952 <HAL_GPIO_Init+0x1d6>
 8005948:	2302      	movs	r3, #2
 800594a:	e002      	b.n	8005952 <HAL_GPIO_Init+0x1d6>
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <HAL_GPIO_Init+0x1d6>
 8005950:	2300      	movs	r3, #0
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	f002 0203 	and.w	r2, r2, #3
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	4093      	lsls	r3, r2
 800595c:	693a      	ldr	r2, [r7, #16]
 800595e:	4313      	orrs	r3, r2
 8005960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005962:	4938      	ldr	r1, [pc, #224]	@ (8005a44 <HAL_GPIO_Init+0x2c8>)
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	3302      	adds	r3, #2
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005970:	4b39      	ldr	r3, [pc, #228]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	43db      	mvns	r3, r3
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4013      	ands	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005988:	2b00      	cmp	r3, #0
 800598a:	d003      	beq.n	8005994 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005994:	4a30      	ldr	r2, [pc, #192]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800599a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	43db      	mvns	r3, r3
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4013      	ands	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80059b6:	693a      	ldr	r2, [r7, #16]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80059be:	4a26      	ldr	r2, [pc, #152]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80059c4:	4b24      	ldr	r3, [pc, #144]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 80059c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4013      	ands	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d003      	beq.n	80059ea <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80059ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80059f2:	4b19      	ldr	r3, [pc, #100]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 80059f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	43db      	mvns	r3, r3
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	4013      	ands	r3, r2
 8005a02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005a18:	4a0f      	ldr	r2, [pc, #60]	@ (8005a58 <HAL_GPIO_Init+0x2dc>)
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	3301      	adds	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f aeab 	bne.w	800578c <HAL_GPIO_Init+0x10>
  }
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40010000 	.word	0x40010000
 8005a48:	48000400 	.word	0x48000400
 8005a4c:	48000800 	.word	0x48000800
 8005a50:	48000c00 	.word	0x48000c00
 8005a54:	48001000 	.word	0x48001000
 8005a58:	58000800 	.word	0x58000800

08005a5c <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	460b      	mov	r3, r1
 8005a66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691a      	ldr	r2, [r3, #16]
 8005a6c:	887b      	ldrh	r3, [r7, #2]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
 8005a78:	e001      	b.n	8005a7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3714      	adds	r7, #20
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	460b      	mov	r3, r1
 8005a96:	807b      	strh	r3, [r7, #2]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a9c:	787b      	ldrb	r3, [r7, #1]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d003      	beq.n	8005aaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005aa2:	887a      	ldrh	r2, [r7, #2]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005aa8:	e002      	b.n	8005ab0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005aaa:	887a      	ldrh	r2, [r7, #2]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005ac6:	4b08      	ldr	r3, [pc, #32]	@ (8005ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	88fb      	ldrh	r3, [r7, #6]
 8005acc:	4013      	ands	r3, r2
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d006      	beq.n	8005ae0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ad2:	4a05      	ldr	r2, [pc, #20]	@ (8005ae8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ad4:	88fb      	ldrh	r3, [r7, #6]
 8005ad6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fd f926 	bl	8002d2c <HAL_GPIO_EXTI_Callback>
  }
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	58000800 	.word	0x58000800

08005aec <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8005af2:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <HAL_HSEM_IRQHandler+0x30>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8005af8:	4b08      	ldr	r3, [pc, #32]	@ (8005b1c <HAL_HSEM_IRQHandler+0x30>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	43db      	mvns	r3, r3
 8005b00:	4906      	ldr	r1, [pc, #24]	@ (8005b1c <HAL_HSEM_IRQHandler+0x30>)
 8005b02:	4013      	ands	r3, r2
 8005b04:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8005b06:	4a05      	ldr	r2, [pc, #20]	@ (8005b1c <HAL_HSEM_IRQHandler+0x30>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f807 	bl	8005b20 <HAL_HSEM_FreeCallback>
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	58001500 	.word	0x58001500

08005b20 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b082      	sub	sp, #8
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e08d      	b.n	8005c62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f7fe fe40 	bl	80047e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2224      	movs	r2, #36	@ 0x24
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005b84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689a      	ldr	r2, [r3, #8]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d107      	bne.n	8005bae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	689a      	ldr	r2, [r3, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005baa:	609a      	str	r2, [r3, #8]
 8005bac:	e006      	b.n	8005bbc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	689a      	ldr	r2, [r3, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005bba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d108      	bne.n	8005bd6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bd2:	605a      	str	r2, [r3, #4]
 8005bd4:	e007      	b.n	8005be6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6812      	ldr	r2, [r2, #0]
 8005bf0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68da      	ldr	r2, [r3, #12]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691a      	ldr	r2, [r3, #16]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	430a      	orrs	r2, r1
 8005c22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	69d9      	ldr	r1, [r3, #28]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6a1a      	ldr	r2, [r3, #32]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 0201 	orr.w	r2, r2, #1
 8005c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
	...

08005c6c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b088      	sub	sp, #32
 8005c70:	af02      	add	r7, sp, #8
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	607a      	str	r2, [r7, #4]
 8005c76:	461a      	mov	r2, r3
 8005c78:	460b      	mov	r3, r1
 8005c7a:	817b      	strh	r3, [r7, #10]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b20      	cmp	r3, #32
 8005c8a:	f040 80fd 	bne.w	8005e88 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d101      	bne.n	8005c9c <HAL_I2C_Master_Transmit+0x30>
 8005c98:	2302      	movs	r3, #2
 8005c9a:	e0f6      	b.n	8005e8a <HAL_I2C_Master_Transmit+0x21e>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ca4:	f7ff f986 	bl	8004fb4 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	2319      	movs	r3, #25
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f914 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e0e1      	b.n	8005e8a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2221      	movs	r2, #33	@ 0x21
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2210      	movs	r2, #16
 8005cd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	893a      	ldrh	r2, [r7, #8]
 8005ce6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2bff      	cmp	r3, #255	@ 0xff
 8005cf6:	d906      	bls.n	8005d06 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	22ff      	movs	r2, #255	@ 0xff
 8005cfc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005cfe:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d02:	617b      	str	r3, [r7, #20]
 8005d04:	e007      	b.n	8005d16 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005d10:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d14:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d024      	beq.n	8005d68 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2e:	1c5a      	adds	r2, r3, #1
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	3301      	adds	r3, #1
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	8979      	ldrh	r1, [r7, #10]
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	@ (8005e94 <HAL_I2C_Master_Transmit+0x228>)
 8005d5c:	9300      	str	r3, [sp, #0]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fa83 	bl	800626c <I2C_TransferConfig>
 8005d66:	e066      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	8979      	ldrh	r1, [r7, #10]
 8005d70:	4b48      	ldr	r3, [pc, #288]	@ (8005e94 <HAL_I2C_Master_Transmit+0x228>)
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	68f8      	ldr	r0, [r7, #12]
 8005d78:	f000 fa78 	bl	800626c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005d7c:	e05b      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	6a39      	ldr	r1, [r7, #32]
 8005d82:	68f8      	ldr	r0, [r7, #12]
 8005d84:	f000 f907 	bl	8005f96 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e07b      	b.n	8005e8a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	781a      	ldrb	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d034      	beq.n	8005e36 <HAL_I2C_Master_Transmit+0x1ca>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d130      	bne.n	8005e36 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	2180      	movs	r1, #128	@ 0x80
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f000 f880 	bl	8005ee4 <I2C_WaitOnFlagUntilTimeout>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e04d      	b.n	8005e8a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2bff      	cmp	r3, #255	@ 0xff
 8005df6:	d90e      	bls.n	8005e16 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	22ff      	movs	r2, #255	@ 0xff
 8005dfc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	8979      	ldrh	r1, [r7, #10]
 8005e06:	2300      	movs	r3, #0
 8005e08:	9300      	str	r3, [sp, #0]
 8005e0a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	f000 fa2c 	bl	800626c <I2C_TransferConfig>
 8005e14:	e00f      	b.n	8005e36 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	8979      	ldrh	r1, [r7, #10]
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fa1b 	bl	800626c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d19e      	bne.n	8005d7e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	6a39      	ldr	r1, [r7, #32]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f8ed 	bl	8006024 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e01a      	b.n	8005e8a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b0c      	ldr	r3, [pc, #48]	@ (8005e98 <HAL_I2C_Master_Transmit+0x22c>)
 8005e68:	400b      	ands	r3, r1
 8005e6a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	e000      	b.n	8005e8a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005e88:	2302      	movs	r3, #2
  }
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	80002000 	.word	0x80002000
 8005e98:	fe00e800 	.word	0xfe00e800

08005e9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d103      	bne.n	8005eba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d007      	beq.n	8005ed8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	699a      	ldr	r2, [r3, #24]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f042 0201 	orr.w	r2, r2, #1
 8005ed6:	619a      	str	r2, [r3, #24]
  }
}
 8005ed8:	bf00      	nop
 8005eda:	370c      	adds	r7, #12
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	603b      	str	r3, [r7, #0]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ef4:	e03b      	b.n	8005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ef6:	69ba      	ldr	r2, [r7, #24]
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f8d6 	bl	80060ac <I2C_IsErrorOccurred>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e041      	b.n	8005f8e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f10:	d02d      	beq.n	8005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f12:	f7ff f84f 	bl	8004fb4 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d302      	bcc.n	8005f28 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d122      	bne.n	8005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699a      	ldr	r2, [r3, #24]
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	4013      	ands	r3, r2
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	429a      	cmp	r2, r3
 8005f36:	bf0c      	ite	eq
 8005f38:	2301      	moveq	r3, #1
 8005f3a:	2300      	movne	r3, #0
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d113      	bne.n	8005f6e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4a:	f043 0220 	orr.w	r2, r3, #32
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e00f      	b.n	8005f8e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	699a      	ldr	r2, [r3, #24]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4013      	ands	r3, r2
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	bf0c      	ite	eq
 8005f7e:	2301      	moveq	r3, #1
 8005f80:	2300      	movne	r3, #0
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	461a      	mov	r2, r3
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d0b4      	beq.n	8005ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	3710      	adds	r7, #16
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b084      	sub	sp, #16
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	60f8      	str	r0, [r7, #12]
 8005f9e:	60b9      	str	r1, [r7, #8]
 8005fa0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005fa2:	e033      	b.n	800600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 f87f 	bl	80060ac <I2C_IsErrorOccurred>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e031      	b.n	800601c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fbe:	d025      	beq.n	800600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc0:	f7fe fff8 	bl	8004fb4 <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	68ba      	ldr	r2, [r7, #8]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d302      	bcc.n	8005fd6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d11a      	bne.n	800600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	d013      	beq.n	800600c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe8:	f043 0220 	orr.w	r2, r3, #32
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e007      	b.n	800601c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b02      	cmp	r3, #2
 8006018:	d1c4      	bne.n	8005fa4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800601a:	2300      	movs	r3, #0
}
 800601c:	4618      	mov	r0, r3
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006030:	e02f      	b.n	8006092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	68f8      	ldr	r0, [r7, #12]
 8006038:	f000 f838 	bl	80060ac <I2C_IsErrorOccurred>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d001      	beq.n	8006046 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e02d      	b.n	80060a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006046:	f7fe ffb5 	bl	8004fb4 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	429a      	cmp	r2, r3
 8006054:	d302      	bcc.n	800605c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d11a      	bne.n	8006092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	f003 0320 	and.w	r3, r3, #32
 8006066:	2b20      	cmp	r3, #32
 8006068:	d013      	beq.n	8006092 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606e:	f043 0220 	orr.w	r2, r3, #32
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2220      	movs	r2, #32
 800607a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e007      	b.n	80060a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	f003 0320 	and.w	r3, r3, #32
 800609c:	2b20      	cmp	r3, #32
 800609e:	d1c8      	bne.n	8006032 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b08a      	sub	sp, #40	@ 0x28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060b8:	2300      	movs	r3, #0
 80060ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	f003 0310 	and.w	r3, r3, #16
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d068      	beq.n	80061aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2210      	movs	r2, #16
 80060de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060e0:	e049      	b.n	8006176 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e8:	d045      	beq.n	8006176 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80060ea:	f7fe ff63 	bl	8004fb4 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <I2C_IsErrorOccurred+0x54>
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d13a      	bne.n	8006176 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800610a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006112:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800611e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006122:	d121      	bne.n	8006168 <I2C_IsErrorOccurred+0xbc>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800612a:	d01d      	beq.n	8006168 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800612c:	7cfb      	ldrb	r3, [r7, #19]
 800612e:	2b20      	cmp	r3, #32
 8006130:	d01a      	beq.n	8006168 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006140:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006142:	f7fe ff37 	bl	8004fb4 <HAL_GetTick>
 8006146:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006148:	e00e      	b.n	8006168 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800614a:	f7fe ff33 	bl	8004fb4 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b19      	cmp	r3, #25
 8006156:	d907      	bls.n	8006168 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	f043 0320 	orr.w	r3, r3, #32
 800615e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006166:	e006      	b.n	8006176 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d1e9      	bne.n	800614a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	699b      	ldr	r3, [r3, #24]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b20      	cmp	r3, #32
 8006182:	d003      	beq.n	800618c <I2C_IsErrorOccurred+0xe0>
 8006184:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006188:	2b00      	cmp	r3, #0
 800618a:	d0aa      	beq.n	80060e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800618c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2220      	movs	r2, #32
 800619a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	f043 0304 	orr.w	r3, r3, #4
 80061a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00b      	beq.n	80061d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80061cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00b      	beq.n	80061f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	f043 0308 	orr.w	r3, r3, #8
 80061e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80061ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	f043 0302 	orr.w	r3, r3, #2
 8006206:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006210:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800621c:	2b00      	cmp	r3, #0
 800621e:	d01c      	beq.n	800625a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff fe3b 	bl	8005e9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	6859      	ldr	r1, [r3, #4]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	4b0d      	ldr	r3, [pc, #52]	@ (8006268 <I2C_IsErrorOccurred+0x1bc>)
 8006232:	400b      	ands	r3, r1
 8006234:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	431a      	orrs	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2220      	movs	r2, #32
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800625a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800625e:	4618      	mov	r0, r3
 8006260:	3728      	adds	r7, #40	@ 0x28
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	fe00e800 	.word	0xfe00e800

0800626c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	817b      	strh	r3, [r7, #10]
 800627a:	4613      	mov	r3, r2
 800627c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800627e:	897b      	ldrh	r3, [r7, #10]
 8006280:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006284:	7a7b      	ldrb	r3, [r7, #9]
 8006286:	041b      	lsls	r3, r3, #16
 8006288:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800628c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	4313      	orrs	r3, r2
 8006296:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800629a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	6a3b      	ldr	r3, [r7, #32]
 80062a4:	0d5b      	lsrs	r3, r3, #21
 80062a6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80062aa:	4b08      	ldr	r3, [pc, #32]	@ (80062cc <I2C_TransferConfig+0x60>)
 80062ac:	430b      	orrs	r3, r1
 80062ae:	43db      	mvns	r3, r3
 80062b0:	ea02 0103 	and.w	r1, r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	03ff63ff 	.word	0x03ff63ff

080062d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d138      	bne.n	8006358 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e032      	b.n	800635a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2224      	movs	r2, #36	@ 0x24
 8006300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0201 	bic.w	r2, r2, #1
 8006312:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006322:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6819      	ldr	r1, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	e000      	b.n	800635a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006358:	2302      	movs	r3, #2
  }
}
 800635a:	4618      	mov	r0, r3
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006366:	b480      	push	{r7}
 8006368:	b085      	sub	sp, #20
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
 800636e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b20      	cmp	r3, #32
 800637a:	d139      	bne.n	80063f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006382:	2b01      	cmp	r3, #1
 8006384:	d101      	bne.n	800638a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006386:	2302      	movs	r3, #2
 8006388:	e033      	b.n	80063f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2201      	movs	r2, #1
 800638e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2224      	movs	r2, #36	@ 0x24
 8006396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80063b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80063ec:	2300      	movs	r3, #0
 80063ee:	e000      	b.n	80063f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80063f0:	2302      	movs	r3, #2
  }
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006408:	4b05      	ldr	r3, [pc, #20]	@ (8006420 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	4904      	ldr	r1, [pc, #16]	@ (8006420 <HAL_I2CEx_EnableFastModePlus+0x20>)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4313      	orrs	r3, r2
 8006412:	604b      	str	r3, [r1, #4]
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	40010000 	.word	0x40010000

08006424 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d01e      	beq.n	8006474 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8006436:	4b13      	ldr	r3, [pc, #76]	@ (8006484 <HAL_IPCC_Init+0x60>)
 8006438:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7fe fa12 	bl	8004870 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800644c:	68b8      	ldr	r0, [r7, #8]
 800644e:	f000 f85b 	bl	8006508 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f82c 	bl	80064bc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8006472:	e001      	b.n	8006478 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	58000c00 	.word	0x58000c00

08006488 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8006496:	bf00      	nop
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b085      	sub	sp, #20
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	60f8      	str	r0, [r7, #12]
 80064aa:	60b9      	str	r1, [r7, #8]
 80064ac:	4613      	mov	r3, r2
 80064ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	3714      	adds	r7, #20
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80064c4:	2300      	movs	r3, #0
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e00f      	b.n	80064ea <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006500 <IPCC_SetDefaultCallbacks+0x44>)
 80064d4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3306      	adds	r3, #6
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	4a08      	ldr	r2, [pc, #32]	@ (8006504 <IPCC_SetDefaultCallbacks+0x48>)
 80064e2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3301      	adds	r3, #1
 80064e8:	60fb      	str	r3, [r7, #12]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b05      	cmp	r3, #5
 80064ee:	d9ec      	bls.n	80064ca <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	3714      	adds	r7, #20
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	08006489 	.word	0x08006489
 8006504:	080064a3 	.word	0x080064a3

08006508 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800651c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	223f      	movs	r2, #63	@ 0x3f
 8006522:	609a      	str	r2, [r3, #8]
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	e0c0      	b.n	80066c4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8006548:	b2db      	uxtb	r3, r3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d106      	bne.n	800655c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f00e fca2 	bl	8014ea0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2203      	movs	r2, #3
 8006560:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4618      	mov	r0, r3
 800656a:	f005 fc8f 	bl	800be8c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800656e:	2300      	movs	r3, #0
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	e03e      	b.n	80065f2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	00db      	lsls	r3, r3, #3
 8006580:	440b      	add	r3, r1
 8006582:	3311      	adds	r3, #17
 8006584:	2201      	movs	r2, #1
 8006586:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006588:	7bfa      	ldrb	r2, [r7, #15]
 800658a:	6879      	ldr	r1, [r7, #4]
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	440b      	add	r3, r1
 8006596:	3310      	adds	r3, #16
 8006598:	7bfa      	ldrb	r2, [r7, #15]
 800659a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	440b      	add	r3, r1
 80065aa:	3313      	adds	r3, #19
 80065ac:	2200      	movs	r2, #0
 80065ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065b0:	7bfa      	ldrb	r2, [r7, #15]
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	4613      	mov	r3, r2
 80065b6:	009b      	lsls	r3, r3, #2
 80065b8:	4413      	add	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	440b      	add	r3, r1
 80065be:	3320      	adds	r3, #32
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065c4:	7bfa      	ldrb	r2, [r7, #15]
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	440b      	add	r3, r1
 80065d2:	3324      	adds	r3, #36	@ 0x24
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065d8:	7bfb      	ldrb	r3, [r7, #15]
 80065da:	6879      	ldr	r1, [r7, #4]
 80065dc:	1c5a      	adds	r2, r3, #1
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	440b      	add	r3, r1
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065ec:	7bfb      	ldrb	r3, [r7, #15]
 80065ee:	3301      	adds	r3, #1
 80065f0:	73fb      	strb	r3, [r7, #15]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	791b      	ldrb	r3, [r3, #4]
 80065f6:	7bfa      	ldrb	r2, [r7, #15]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d3bb      	bcc.n	8006574 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]
 8006600:	e044      	b.n	800668c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	6879      	ldr	r1, [r7, #4]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	440b      	add	r3, r1
 8006610:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8006614:	2200      	movs	r2, #0
 8006616:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006618:	7bfa      	ldrb	r2, [r7, #15]
 800661a:	6879      	ldr	r1, [r7, #4]
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	440b      	add	r3, r1
 8006626:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800662a:	7bfa      	ldrb	r2, [r7, #15]
 800662c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800662e:	7bfa      	ldrb	r2, [r7, #15]
 8006630:	6879      	ldr	r1, [r7, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4413      	add	r3, r2
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	440b      	add	r3, r1
 800663c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8006640:	2200      	movs	r2, #0
 8006642:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006644:	7bfa      	ldrb	r2, [r7, #15]
 8006646:	6879      	ldr	r1, [r7, #4]
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	440b      	add	r3, r1
 8006652:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800665a:	7bfa      	ldrb	r2, [r7, #15]
 800665c:	6879      	ldr	r1, [r7, #4]
 800665e:	4613      	mov	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	4413      	add	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	440b      	add	r3, r1
 8006668:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800666c:	2200      	movs	r2, #0
 800666e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006670:	7bfa      	ldrb	r2, [r7, #15]
 8006672:	6879      	ldr	r1, [r7, #4]
 8006674:	4613      	mov	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	4413      	add	r3, r2
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	440b      	add	r3, r1
 800667e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006686:	7bfb      	ldrb	r3, [r7, #15]
 8006688:	3301      	adds	r3, #1
 800668a:	73fb      	strb	r3, [r7, #15]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	791b      	ldrb	r3, [r3, #4]
 8006690:	7bfa      	ldrb	r2, [r7, #15]
 8006692:	429a      	cmp	r2, r3
 8006694:	d3b5      	bcc.n	8006602 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6818      	ldr	r0, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3304      	adds	r3, #4
 800669e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80066a2:	f005 fc0e 	bl	800bec2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	7a9b      	ldrb	r3, [r3, #10]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d102      	bne.n	80066c2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 fc0e 	bl	8007ede <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <HAL_PCD_Start+0x16>
 80066de:	2302      	movs	r3, #2
 80066e0:	e012      	b.n	8006708 <HAL_PCD_Start+0x3c>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f005 fbb5 	bl	800be5e <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f007 f993 	bl	800da24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4618      	mov	r0, r3
 800671e:	f007 f998 	bl	800da52 <USB_ReadInterrupts>
 8006722:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d003      	beq.n	8006736 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fb06 	bl	8006d40 <PCD_EP_ISR_Handler>

    return;
 8006734:	e110      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800673c:	2b00      	cmp	r3, #0
 800673e:	d013      	beq.n	8006768 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006748:	b29a      	uxth	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006752:	b292      	uxth	r2, r2
 8006754:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f00e fc54 	bl	8015006 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800675e:	2100      	movs	r1, #0
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f000 f8fc 	bl	800695e <HAL_PCD_SetAddress>

    return;
 8006766:	e0f7      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00c      	beq.n	800678c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800677a:	b29a      	uxth	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006784:	b292      	uxth	r2, r2
 8006786:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800678a:	e0e5      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00c      	beq.n	80067b0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800679e:	b29a      	uxth	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80067a8:	b292      	uxth	r2, r2
 80067aa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80067ae:	e0d3      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d034      	beq.n	8006824 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0204 	bic.w	r2, r2, #4
 80067cc:	b292      	uxth	r2, r2
 80067ce:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80067da:	b29a      	uxth	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0208 	bic.w	r2, r2, #8
 80067e4:	b292      	uxth	r2, r2
 80067e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d107      	bne.n	8006804 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80067fc:	2100      	movs	r1, #0
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f00e fdf6 	bl	80153f0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f00e fc37 	bl	8015078 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800681c:	b292      	uxth	r2, r2
 800681e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006822:	e099      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800682a:	2b00      	cmp	r3, #0
 800682c:	d027      	beq.n	800687e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006836:	b29a      	uxth	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f042 0208 	orr.w	r2, r2, #8
 8006840:	b292      	uxth	r2, r2
 8006842:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800684e:	b29a      	uxth	r2, r3
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006858:	b292      	uxth	r2, r2
 800685a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006866:	b29a      	uxth	r2, r3
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f042 0204 	orr.w	r2, r2, #4
 8006870:	b292      	uxth	r2, r2
 8006872:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f00e fbe4 	bl	8015044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800687c:	e06c      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006884:	2b00      	cmp	r3, #0
 8006886:	d040      	beq.n	800690a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006890:	b29a      	uxth	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800689a:	b292      	uxth	r2, r2
 800689c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d12b      	bne.n	8006902 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f042 0204 	orr.w	r2, r2, #4
 80068bc:	b292      	uxth	r2, r2
 80068be:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f042 0208 	orr.w	r2, r2, #8
 80068d4:	b292      	uxth	r2, r2
 80068d6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80068ea:	b29b      	uxth	r3, r3
 80068ec:	089b      	lsrs	r3, r3, #2
 80068ee:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80068f8:	2101      	movs	r1, #1
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f00e fd78 	bl	80153f0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006900:	e02a      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f00e fb9e 	bl	8015044 <HAL_PCD_SuspendCallback>
    return;
 8006908:	e026      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00f      	beq.n	8006934 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800691c:	b29a      	uxth	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006926:	b292      	uxth	r2, r2
 8006928:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f00e fb5c 	bl	8014fea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006932:	e011      	b.n	8006958 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006950:	b292      	uxth	r2, r2
 8006952:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006956:	bf00      	nop
  }
}
 8006958:	3710      	adds	r7, #16
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006970:	2b01      	cmp	r3, #1
 8006972:	d101      	bne.n	8006978 <HAL_PCD_SetAddress+0x1a>
 8006974:	2302      	movs	r3, #2
 8006976:	e012      	b.n	800699e <HAL_PCD_SetAddress+0x40>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	78fa      	ldrb	r2, [r7, #3]
 8006984:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	78fa      	ldrb	r2, [r7, #3]
 800698c:	4611      	mov	r1, r2
 800698e:	4618      	mov	r0, r3
 8006990:	f007 f834 	bl	800d9fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b084      	sub	sp, #16
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	4608      	mov	r0, r1
 80069b0:	4611      	mov	r1, r2
 80069b2:	461a      	mov	r2, r3
 80069b4:	4603      	mov	r3, r0
 80069b6:	70fb      	strb	r3, [r7, #3]
 80069b8:	460b      	mov	r3, r1
 80069ba:	803b      	strh	r3, [r7, #0]
 80069bc:	4613      	mov	r3, r2
 80069be:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da0e      	bge.n	80069ea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069cc:	78fb      	ldrb	r3, [r7, #3]
 80069ce:	f003 0207 	and.w	r2, r3, #7
 80069d2:	4613      	mov	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4413      	add	r3, r2
 80069d8:	00db      	lsls	r3, r3, #3
 80069da:	3310      	adds	r3, #16
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	4413      	add	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	705a      	strb	r2, [r3, #1]
 80069e8:	e00e      	b.n	8006a08 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069ea:	78fb      	ldrb	r3, [r7, #3]
 80069ec:	f003 0207 	and.w	r2, r3, #7
 80069f0:	4613      	mov	r3, r2
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	4413      	add	r3, r2
 8006a00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2200      	movs	r2, #0
 8006a06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006a08:	78fb      	ldrb	r3, [r7, #3]
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	b2da      	uxtb	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006a14:	883b      	ldrh	r3, [r7, #0]
 8006a16:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	78ba      	ldrb	r2, [r7, #2]
 8006a22:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006a24:	78bb      	ldrb	r3, [r7, #2]
 8006a26:	2b02      	cmp	r3, #2
 8006a28:	d102      	bne.n	8006a30 <HAL_PCD_EP_Open+0x8a>
  {
    ep->data_pid_start = 0U;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d101      	bne.n	8006a3e <HAL_PCD_EP_Open+0x98>
 8006a3a:	2302      	movs	r3, #2
 8006a3c:	e00e      	b.n	8006a5c <HAL_PCD_EP_Open+0xb6>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f005 fa57 	bl	800bf00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8006a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da0e      	bge.n	8006a96 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a78:	78fb      	ldrb	r3, [r7, #3]
 8006a7a:	f003 0207 	and.w	r2, r3, #7
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	00db      	lsls	r3, r3, #3
 8006a86:	3310      	adds	r3, #16
 8006a88:	687a      	ldr	r2, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	705a      	strb	r2, [r3, #1]
 8006a94:	e00e      	b.n	8006ab4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 0207 	and.w	r2, r3, #7
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	4413      	add	r3, r2
 8006aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ab4:	78fb      	ldrb	r3, [r7, #3]
 8006ab6:	f003 0307 	and.w	r3, r3, #7
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d101      	bne.n	8006ace <HAL_PCD_EP_Close+0x6a>
 8006aca:	2302      	movs	r3, #2
 8006acc:	e00e      	b.n	8006aec <HAL_PCD_EP_Close+0x88>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68f9      	ldr	r1, [r7, #12]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f005 fef7 	bl	800c8d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b086      	sub	sp, #24
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	603b      	str	r3, [r7, #0]
 8006b00:	460b      	mov	r3, r1
 8006b02:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b04:	7afb      	ldrb	r3, [r7, #11]
 8006b06:	f003 0207 	and.w	r2, r3, #7
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	009b      	lsls	r3, r3, #2
 8006b0e:	4413      	add	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4413      	add	r3, r2
 8006b1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	2200      	movs	r2, #0
 8006b32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b34:	7afb      	ldrb	r3, [r7, #11]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6979      	ldr	r1, [r7, #20]
 8006b46:	4618      	mov	r0, r3
 8006b48:	f006 f8af 	bl	800ccaa <USB_EPStartXfer>

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	460b      	mov	r3, r1
 8006b60:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 0207 	and.w	r2, r3, #7
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4413      	add	r3, r2
 8006b70:	00db      	lsls	r3, r3, #3
 8006b72:	440b      	add	r3, r1
 8006b74:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006b78:	681b      	ldr	r3, [r3, #0]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	60f8      	str	r0, [r7, #12]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
 8006b92:	460b      	mov	r3, r1
 8006b94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b96:	7afb      	ldrb	r3, [r7, #11]
 8006b98:	f003 0207 	and.w	r2, r3, #7
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	00db      	lsls	r3, r3, #3
 8006ba4:	3310      	adds	r3, #16
 8006ba6:	68fa      	ldr	r2, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	f003 0307 	and.w	r3, r3, #7
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	6979      	ldr	r1, [r7, #20]
 8006be4:	4618      	mov	r0, r3
 8006be6:	f006 f860 	bl	800ccaa <USB_EPStartXfer>

  return HAL_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006c00:	78fb      	ldrb	r3, [r7, #3]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	7912      	ldrb	r2, [r2, #4]
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d901      	bls.n	8006c12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e03e      	b.n	8006c90 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da0e      	bge.n	8006c38 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c1a:	78fb      	ldrb	r3, [r7, #3]
 8006c1c:	f003 0207 	and.w	r2, r3, #7
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	3310      	adds	r3, #16
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	705a      	strb	r2, [r3, #1]
 8006c36:	e00c      	b.n	8006c52 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	4413      	add	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2201      	movs	r2, #1
 8006c56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006c58:	78fb      	ldrb	r3, [r7, #3]
 8006c5a:	f003 0307 	and.w	r3, r3, #7
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_PCD_EP_SetStall+0x7e>
 8006c6e:	2302      	movs	r3, #2
 8006c70:	e00e      	b.n	8006c90 <HAL_PCD_EP_SetStall+0x9c>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	68f9      	ldr	r1, [r7, #12]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f006 fdc1 	bl	800d808 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	f003 030f 	and.w	r3, r3, #15
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	7912      	ldrb	r2, [r2, #4]
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d901      	bls.n	8006cb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e040      	b.n	8006d38 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	da0e      	bge.n	8006cdc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006cbe:	78fb      	ldrb	r3, [r7, #3]
 8006cc0:	f003 0207 	and.w	r2, r3, #7
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	4413      	add	r3, r2
 8006cca:	00db      	lsls	r3, r3, #3
 8006ccc:	3310      	adds	r3, #16
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	705a      	strb	r2, [r3, #1]
 8006cda:	e00e      	b.n	8006cfa <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006cdc:	78fb      	ldrb	r3, [r7, #3]
 8006cde:	f003 0207 	and.w	r2, r3, #7
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	009b      	lsls	r3, r3, #2
 8006ce6:	4413      	add	r3, r2
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	f003 0307 	and.w	r3, r3, #7
 8006d06:	b2da      	uxtb	r2, r3
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d101      	bne.n	8006d1a <HAL_PCD_EP_ClrStall+0x82>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e00e      	b.n	8006d38 <HAL_PCD_EP_ClrStall+0xa0>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	68f9      	ldr	r1, [r7, #12]
 8006d28:	4618      	mov	r0, r3
 8006d2a:	f006 fdbe 	bl	800d8aa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b092      	sub	sp, #72	@ 0x48
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006d48:	e333      	b.n	80073b2 <PCD_EP_ISR_Handler+0x672>
  {
    wIstr = hpcd->Instance->ISTR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006d52:	877b      	strh	r3, [r7, #58]	@ 0x3a

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006d54:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f003 030f 	and.w	r3, r3, #15
 8006d5c:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39

    if (epindex == 0U)
 8006d60:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f040 8108 	bne.w	8006f7a <PCD_EP_ISR_Handler+0x23a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006d6a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006d6c:	f003 0310 	and.w	r3, r3, #16
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d14c      	bne.n	8006e0e <PCD_EP_ISR_Handler+0xce>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	881b      	ldrh	r3, [r3, #0]
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d84:	813b      	strh	r3, [r7, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	893b      	ldrh	r3, [r7, #8]
 8006d8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	3310      	adds	r3, #16
 8006d9c:	643b      	str	r3, [r7, #64]	@ 0x40

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	461a      	mov	r2, r3
 8006daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	4413      	add	r3, r2
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	6812      	ldr	r2, [r2, #0]
 8006db6:	4413      	add	r3, r2
 8006db8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dbc:	881b      	ldrh	r3, [r3, #0]
 8006dbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006dc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006dc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc8:	695a      	ldr	r2, [r3, #20]
 8006dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	441a      	add	r2, r3
 8006dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f00e f8ed 	bl	8014fb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7b1b      	ldrb	r3, [r3, #12]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	f000 82e5 	beq.w	80073b2 <PCD_EP_ISR_Handler+0x672>
 8006de8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f040 82e0 	bne.w	80073b2 <PCD_EP_ISR_Handler+0x672>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	7b1b      	ldrb	r3, [r3, #12]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	731a      	strb	r2, [r3, #12]
 8006e0c:	e2d1      	b.n	80073b2 <PCD_EP_ISR_Handler+0x672>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006e14:	643b      	str	r3, [r7, #64]	@ 0x40
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	86fb      	strh	r3, [r7, #54]	@ 0x36

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006e1e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d032      	beq.n	8006e8e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	461a      	mov	r2, r3
 8006e34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	00db      	lsls	r3, r3, #3
 8006e3a:	4413      	add	r3, r2
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	6812      	ldr	r2, [r2, #0]
 8006e40:	4413      	add	r3, r2
 8006e42:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e46:	881b      	ldrh	r3, [r3, #0]
 8006e48:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e4e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e5c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e60:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	f006 fe47 	bl	800daf6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006e74:	4013      	ands	r3, r2
 8006e76:	817b      	strh	r3, [r7, #10]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	897a      	ldrh	r2, [r7, #10]
 8006e7e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e82:	b292      	uxth	r2, r2
 8006e84:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f00e f868 	bl	8014f5c <HAL_PCD_SetupStageCallback>
 8006e8c:	e291      	b.n	80073b2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006e8e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	f280 828d 	bge.w	80073b2 <PCD_EP_ISR_Handler+0x672>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	b29a      	uxth	r2, r3
 8006ea0:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	81fb      	strh	r3, [r7, #14]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	89fa      	ldrh	r2, [r7, #14]
 8006eae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006eb2:	b292      	uxth	r2, r2
 8006eb4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4413      	add	r3, r2
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006edc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006ede:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d019      	beq.n	8006f1a <PCD_EP_ISR_Handler+0x1da>
 8006ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d015      	beq.n	8006f1a <PCD_EP_ISR_Handler+0x1da>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef4:	6959      	ldr	r1, [r3, #20]
 8006ef6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ef8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006efc:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	f006 fdf9 	bl	800daf6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006f04:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	441a      	add	r2, r3
 8006f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f10:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006f12:	2100      	movs	r1, #0
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f00e f833 	bl	8014f80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	881b      	ldrh	r3, [r3, #0]
 8006f20:	86fb      	strh	r3, [r7, #54]	@ 0x36

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006f22:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 8242 	bne.w	80073b2 <PCD_EP_ISR_Handler+0x672>
 8006f2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f30:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006f34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006f38:	f000 823b 	beq.w	80073b2 <PCD_EP_ISR_Handler+0x672>
          {
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	881b      	ldrh	r3, [r3, #0]
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f4c:	81bb      	strh	r3, [r7, #12]
 8006f4e:	89bb      	ldrh	r3, [r7, #12]
 8006f50:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f54:	81bb      	strh	r3, [r7, #12]
 8006f56:	89bb      	ldrh	r3, [r7, #12]
 8006f58:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f5c:	81bb      	strh	r3, [r7, #12]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	89bb      	ldrh	r3, [r7, #12]
 8006f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8013      	strh	r3, [r2, #0]
 8006f78:	e21b      	b.n	80073b2 <PCD_EP_ISR_Handler+0x672>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	4413      	add	r3, r2
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f8c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f280 80f1 	bge.w	8007178 <PCD_EP_ISR_Handler+0x438>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4413      	add	r3, r2
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006fac:	4013      	ands	r3, r2
 8006fae:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006fba:	009b      	lsls	r3, r3, #2
 8006fbc:	4413      	add	r3, r2
 8006fbe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006fc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006fc4:	b292      	uxth	r2, r2
 8006fc6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006fc8:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8006fcc:	4613      	mov	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	4413      	add	r3, r2
 8006fd2:	00db      	lsls	r3, r3, #3
 8006fd4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	4413      	add	r3, r2
 8006fdc:	643b      	str	r3, [r7, #64]	@ 0x40

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006fe0:	7b1b      	ldrb	r3, [r3, #12]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d123      	bne.n	800702e <PCD_EP_ISR_Handler+0x2ee>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ff4:	781b      	ldrb	r3, [r3, #0]
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	4413      	add	r3, r2
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	6812      	ldr	r2, [r2, #0]
 8006ffe:	4413      	add	r3, r2
 8007000:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007004:	881b      	ldrh	r3, [r3, #0]
 8007006:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800700a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

          if (count != 0U)
 800700e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 808b 	beq.w	800712e <PCD_EP_ISR_Handler+0x3ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6818      	ldr	r0, [r3, #0]
 800701c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800701e:	6959      	ldr	r1, [r3, #20]
 8007020:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007022:	88da      	ldrh	r2, [r3, #6]
 8007024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007028:	f006 fd65 	bl	800daf6 <USB_ReadPMA>
 800702c:	e07f      	b.n	800712e <PCD_EP_ISR_Handler+0x3ee>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800702e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007030:	78db      	ldrb	r3, [r3, #3]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d109      	bne.n	800704a <PCD_EP_ISR_Handler+0x30a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8007036:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007038:	461a      	mov	r2, r3
 800703a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f9c6 	bl	80073ce <HAL_PCD_EP_DB_Receive>
 8007042:	4603      	mov	r3, r0
 8007044:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8007048:	e071      	b.n	800712e <PCD_EP_ISR_Handler+0x3ee>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007060:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007064:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800707e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007082:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	461a      	mov	r2, r3
 8007090:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4413      	add	r3, r2
 8007098:	881b      	ldrh	r3, [r3, #0]
 800709a:	b29b      	uxth	r3, r3
 800709c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d022      	beq.n	80070ea <PCD_EP_ISR_Handler+0x3aa>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	461a      	mov	r2, r3
 80070b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	00db      	lsls	r3, r3, #3
 80070b6:	4413      	add	r3, r2
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6812      	ldr	r2, [r2, #0]
 80070bc:	4413      	add	r3, r2
 80070be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80070c2:	881b      	ldrh	r3, [r3, #0]
 80070c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 80070cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d02c      	beq.n	800712e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6818      	ldr	r0, [r3, #0]
 80070d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070da:	6959      	ldr	r1, [r3, #20]
 80070dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070de:	891a      	ldrh	r2, [r3, #8]
 80070e0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070e4:	f006 fd07 	bl	800daf6 <USB_ReadPMA>
 80070e8:	e021      	b.n	800712e <PCD_EP_ISR_Handler+0x3ee>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4413      	add	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6812      	ldr	r2, [r2, #0]
 8007102:	4413      	add	r3, r2
 8007104:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800710e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46

              if (count != 0U)
 8007112:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007116:	2b00      	cmp	r3, #0
 8007118:	d009      	beq.n	800712e <PCD_EP_ISR_Handler+0x3ee>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6818      	ldr	r0, [r3, #0]
 800711e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007120:	6959      	ldr	r1, [r3, #20]
 8007122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007124:	895a      	ldrh	r2, [r3, #10]
 8007126:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800712a:	f006 fce4 	bl	800daf6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800712e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007130:	69da      	ldr	r2, [r3, #28]
 8007132:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007136:	441a      	add	r2, r3
 8007138:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800713a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800713c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800713e:	695a      	ldr	r2, [r3, #20]
 8007140:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8007144:	441a      	add	r2, r3
 8007146:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007148:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800714a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <PCD_EP_ISR_Handler+0x41e>
 8007152:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8007156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d206      	bcs.n	800716c <PCD_EP_ISR_Handler+0x42c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800715e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	4619      	mov	r1, r3
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f00d ff0b 	bl	8014f80 <HAL_PCD_DataOutStageCallback>
 800716a:	e005      	b.n	8007178 <PCD_EP_ISR_Handler+0x438>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007172:	4618      	mov	r0, r3
 8007174:	f005 fd99 	bl	800ccaa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007178:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800717a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800717e:	2b00      	cmp	r3, #0
 8007180:	f000 8117 	beq.w	80073b2 <PCD_EP_ISR_Handler+0x672>
      {
        ep = &hpcd->IN_ep[epindex];
 8007184:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8007188:	4613      	mov	r3, r2
 800718a:	009b      	lsls	r3, r3, #2
 800718c:	4413      	add	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	3310      	adds	r3, #16
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	4413      	add	r3, r2
 8007196:	643b      	str	r3, [r7, #64]	@ 0x40

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	4413      	add	r3, r2
 80071a6:	881b      	ldrh	r3, [r3, #0]
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80071ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071b2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80071c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80071d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071d2:	78db      	ldrb	r3, [r3, #3]
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	f040 80a1 	bne.w	800731c <PCD_EP_ISR_Handler+0x5dc>
        {
          ep->xfer_len = 0U;
 80071da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071dc:	2200      	movs	r2, #0
 80071de:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80071e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071e2:	7b1b      	ldrb	r3, [r3, #12]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f000 8092 	beq.w	800730e <PCD_EP_ISR_Handler+0x5ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80071ea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80071ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d046      	beq.n	8007282 <PCD_EP_ISR_Handler+0x542>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80071f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d126      	bne.n	800724a <PCD_EP_ISR_Handler+0x50a>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800720a:	b29b      	uxth	r3, r3
 800720c:	461a      	mov	r2, r3
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	00da      	lsls	r2, r3, #3
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4413      	add	r3, r2
 800721e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	b29b      	uxth	r3, r3
 800722a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800722e:	b29a      	uxth	r2, r3
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29b      	uxth	r3, r3
 800723a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800723e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007242:	b29a      	uxth	r2, r3
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	801a      	strh	r2, [r3, #0]
 8007248:	e061      	b.n	800730e <PCD_EP_ISR_Handler+0x5ce>
 800724a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800724c:	785b      	ldrb	r3, [r3, #1]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d15d      	bne.n	800730e <PCD_EP_ISR_Handler+0x5ce>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	61fb      	str	r3, [r7, #28]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007260:	b29b      	uxth	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	4413      	add	r3, r2
 8007268:	61fb      	str	r3, [r7, #28]
 800726a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	00da      	lsls	r2, r3, #3
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	4413      	add	r3, r2
 8007274:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007278:	61bb      	str	r3, [r7, #24]
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2200      	movs	r2, #0
 800727e:	801a      	strh	r2, [r3, #0]
 8007280:	e045      	b.n	800730e <PCD_EP_ISR_Handler+0x5ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007288:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d126      	bne.n	80072de <PCD_EP_ISR_Handler+0x59e>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	627b      	str	r3, [r7, #36]	@ 0x24
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800729e:	b29b      	uxth	r3, r3
 80072a0:	461a      	mov	r2, r3
 80072a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a4:	4413      	add	r3, r2
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	00da      	lsls	r2, r3, #3
 80072ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b0:	4413      	add	r3, r2
 80072b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80072b6:	623b      	str	r3, [r7, #32]
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	881b      	ldrh	r3, [r3, #0]
 80072bc:	b29b      	uxth	r3, r3
 80072be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	801a      	strh	r2, [r3, #0]
 80072c8:	6a3b      	ldr	r3, [r7, #32]
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	801a      	strh	r2, [r3, #0]
 80072dc:	e017      	b.n	800730e <PCD_EP_ISR_Handler+0x5ce>
 80072de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e0:	785b      	ldrb	r3, [r3, #1]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d113      	bne.n	800730e <PCD_EP_ISR_Handler+0x5ce>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	461a      	mov	r2, r3
 80072f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f4:	4413      	add	r3, r2
 80072f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	00da      	lsls	r2, r3, #3
 80072fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007300:	4413      	add	r3, r2
 8007302:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007306:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800730a:	2200      	movs	r2, #0
 800730c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800730e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	4619      	mov	r1, r3
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f00d fe4e 	bl	8014fb6 <HAL_PCD_DataInStageCallback>
 800731a:	e04a      	b.n	80073b2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800731c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800731e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007322:	2b00      	cmp	r3, #0
 8007324:	d13f      	bne.n	80073a6 <PCD_EP_ISR_Handler+0x666>
          {
            /* Multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800732e:	b29b      	uxth	r3, r3
 8007330:	461a      	mov	r2, r3
 8007332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	00db      	lsls	r3, r3, #3
 8007338:	4413      	add	r3, r2
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	4413      	add	r3, r2
 8007340:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007344:	881b      	ldrh	r3, [r3, #0]
 8007346:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800734a:	867b      	strh	r3, [r7, #50]	@ 0x32

            if (ep->xfer_len > TxPctSize)
 800734c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800734e:	699a      	ldr	r2, [r3, #24]
 8007350:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007352:	429a      	cmp	r2, r3
 8007354:	d906      	bls.n	8007364 <PCD_EP_ISR_Handler+0x624>
            {
              ep->xfer_len -= TxPctSize;
 8007356:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007358:	699a      	ldr	r2, [r3, #24]
 800735a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007360:	619a      	str	r2, [r3, #24]
 8007362:	e002      	b.n	800736a <PCD_EP_ISR_Handler+0x62a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007366:	2200      	movs	r2, #0
 8007368:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800736a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800736c:	699b      	ldr	r3, [r3, #24]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d106      	bne.n	8007380 <PCD_EP_ISR_Handler+0x640>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f00d fe1c 	bl	8014fb6 <HAL_PCD_DataInStageCallback>
 800737e:	e018      	b.n	80073b2 <PCD_EP_ISR_Handler+0x672>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007380:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007386:	441a      	add	r2, r3
 8007388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800738a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800738c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8007392:	441a      	add	r2, r3
 8007394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007396:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800739e:	4618      	mov	r0, r3
 80073a0:	f005 fc83 	bl	800ccaa <USB_EPStartXfer>
 80073a4:	e005      	b.n	80073b2 <PCD_EP_ISR_Handler+0x672>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80073a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073a8:	461a      	mov	r2, r3
 80073aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f917 	bl	80075e0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	b21b      	sxth	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f6ff acc3 	blt.w	8006d4a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3748      	adds	r7, #72	@ 0x48
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b088      	sub	sp, #32
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	4613      	mov	r3, r2
 80073da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073dc:	88fb      	ldrh	r3, [r7, #6]
 80073de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d07c      	beq.n	80074e0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	461a      	mov	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	6812      	ldr	r2, [r2, #0]
 80073fe:	4413      	add	r3, r2
 8007400:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800740a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	699a      	ldr	r2, [r3, #24]
 8007410:	8b7b      	ldrh	r3, [r7, #26]
 8007412:	429a      	cmp	r2, r3
 8007414:	d306      	bcc.n	8007424 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	699a      	ldr	r2, [r3, #24]
 800741a:	8b7b      	ldrh	r3, [r7, #26]
 800741c:	1ad2      	subs	r2, r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	619a      	str	r2, [r3, #24]
 8007422:	e002      	b.n	800742a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d123      	bne.n	800747a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* Set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	b29b      	uxth	r3, r3
 8007444:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007448:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744c:	833b      	strh	r3, [r7, #24]
 800744e:	8b3b      	ldrh	r3, [r7, #24]
 8007450:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007454:	833b      	strh	r3, [r7, #24]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	461a      	mov	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	441a      	add	r2, r3
 8007464:	8b3b      	ldrh	r3, [r7, #24]
 8007466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800746a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800746e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007476:	b29b      	uxth	r3, r3
 8007478:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01f      	beq.n	80074c4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	4413      	add	r3, r2
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800749a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800749e:	82fb      	strh	r3, [r7, #22]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	461a      	mov	r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	441a      	add	r2, r3
 80074ae:	8afb      	ldrh	r3, [r7, #22]
 80074b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80074c0:	b29b      	uxth	r3, r3
 80074c2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80074c4:	8b7b      	ldrh	r3, [r7, #26]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	f000 8085 	beq.w	80075d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	6959      	ldr	r1, [r3, #20]
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	891a      	ldrh	r2, [r3, #8]
 80074d8:	8b7b      	ldrh	r3, [r7, #26]
 80074da:	f006 fb0c 	bl	800daf6 <USB_ReadPMA>
 80074de:	e07a      	b.n	80075d6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	461a      	mov	r2, r3
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	00db      	lsls	r3, r3, #3
 80074f2:	4413      	add	r3, r2
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	6812      	ldr	r2, [r2, #0]
 80074f8:	4413      	add	r3, r2
 80074fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80074fe:	881b      	ldrh	r3, [r3, #0]
 8007500:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007504:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	8b7b      	ldrh	r3, [r7, #26]
 800750c:	429a      	cmp	r2, r3
 800750e:	d306      	bcc.n	800751e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	699a      	ldr	r2, [r3, #24]
 8007514:	8b7b      	ldrh	r3, [r7, #26]
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	619a      	str	r2, [r3, #24]
 800751c:	e002      	b.n	8007524 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2200      	movs	r2, #0
 8007522:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d123      	bne.n	8007574 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* Set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	461a      	mov	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29b      	uxth	r3, r3
 800753e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007542:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007546:	83fb      	strh	r3, [r7, #30]
 8007548:	8bfb      	ldrh	r3, [r7, #30]
 800754a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800754e:	83fb      	strh	r3, [r7, #30]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	441a      	add	r2, r3
 800755e:	8bfb      	ldrh	r3, [r7, #30]
 8007560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007568:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800756c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007570:	b29b      	uxth	r3, r3
 8007572:	8013      	strh	r3, [r2, #0]
    }

    /* Need to FreeUser Buffer */
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d11f      	bne.n	80075be <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	4413      	add	r3, r2
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007598:	83bb      	strh	r3, [r7, #28]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	009b      	lsls	r3, r3, #2
 80075a6:	441a      	add	r2, r3
 80075a8:	8bbb      	ldrh	r3, [r7, #28]
 80075aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075b6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80075be:	8b7b      	ldrh	r3, [r7, #26]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d008      	beq.n	80075d6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6818      	ldr	r0, [r3, #0]
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	6959      	ldr	r1, [r3, #20]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	895a      	ldrh	r2, [r3, #10]
 80075d0:	8b7b      	ldrh	r3, [r7, #26]
 80075d2:	f006 fa90 	bl	800daf6 <USB_ReadPMA>
    }
  }

  return count;
 80075d6:	8b7b      	ldrh	r3, [r7, #26]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3720      	adds	r7, #32
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b0a6      	sub	sp, #152	@ 0x98
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 81f7 	beq.w	80079e8 <HAL_PCD_EP_DB_Transmit+0x408>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007602:	b29b      	uxth	r3, r3
 8007604:	461a      	mov	r2, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4413      	add	r3, r2
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	6812      	ldr	r2, [r2, #0]
 8007612:	4413      	add	r3, r2
 8007614:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800761e:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len > TxPctSize)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	699a      	ldr	r2, [r3, #24]
 8007626:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800762a:	429a      	cmp	r2, r3
 800762c:	d907      	bls.n	800763e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	619a      	str	r2, [r3, #24]
 800763c:	e002      	b.n	8007644 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	2b00      	cmp	r3, #0
 800764a:	f040 80e1 	bne.w	8007810 <HAL_PCD_EP_DB_Transmit+0x230>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	785b      	ldrb	r3, [r3, #1]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d126      	bne.n	80076a4 <HAL_PCD_EP_DB_Transmit+0xc4>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	633b      	str	r3, [r7, #48]	@ 0x30
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007664:	b29b      	uxth	r3, r3
 8007666:	461a      	mov	r2, r3
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	4413      	add	r3, r2
 800766c:	633b      	str	r3, [r7, #48]	@ 0x30
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	781b      	ldrb	r3, [r3, #0]
 8007672:	00da      	lsls	r2, r3, #3
 8007674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007676:	4413      	add	r3, r2
 8007678:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800767c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800767e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007680:	881b      	ldrh	r3, [r3, #0]
 8007682:	b29b      	uxth	r3, r3
 8007684:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007688:	b29a      	uxth	r2, r3
 800768a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007690:	881b      	ldrh	r3, [r3, #0]
 8007692:	b29b      	uxth	r3, r3
 8007694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769c:	b29a      	uxth	r2, r3
 800769e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a0:	801a      	strh	r2, [r3, #0]
 80076a2:	e01a      	b.n	80076da <HAL_PCD_EP_DB_Transmit+0xfa>
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d116      	bne.n	80076da <HAL_PCD_EP_DB_Transmit+0xfa>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c0:	4413      	add	r3, r2
 80076c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	781b      	ldrb	r3, [r3, #0]
 80076c8:	00da      	lsls	r2, r3, #3
 80076ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076cc:	4413      	add	r3, r2
 80076ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80076d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076d6:	2200      	movs	r2, #0
 80076d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d126      	bne.n	8007736 <HAL_PCD_EP_DB_Transmit+0x156>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	623b      	str	r3, [r7, #32]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	461a      	mov	r2, r3
 80076fa:	6a3b      	ldr	r3, [r7, #32]
 80076fc:	4413      	add	r3, r2
 80076fe:	623b      	str	r3, [r7, #32]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	00da      	lsls	r2, r3, #3
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	4413      	add	r3, r2
 800770a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800770e:	61fb      	str	r3, [r7, #28]
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29b      	uxth	r3, r3
 8007716:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800771a:	b29a      	uxth	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	b29b      	uxth	r3, r3
 8007726:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800772a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772e:	b29a      	uxth	r2, r3
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	801a      	strh	r2, [r3, #0]
 8007734:	e017      	b.n	8007766 <HAL_PCD_EP_DB_Transmit+0x186>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	785b      	ldrb	r3, [r3, #1]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d113      	bne.n	8007766 <HAL_PCD_EP_DB_Transmit+0x186>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007746:	b29b      	uxth	r3, r3
 8007748:	461a      	mov	r2, r3
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	4413      	add	r3, r2
 800774e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	00da      	lsls	r2, r3, #3
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	4413      	add	r3, r2
 800775a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800775e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007762:	2200      	movs	r2, #0
 8007764:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	78db      	ldrb	r3, [r3, #3]
 800776a:	2b02      	cmp	r3, #2
 800776c:	d123      	bne.n	80077b6 <HAL_PCD_EP_DB_Transmit+0x1d6>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	009b      	lsls	r3, r3, #2
 800777a:	4413      	add	r3, r2
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	b29b      	uxth	r3, r3
 8007780:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007784:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007788:	837b      	strh	r3, [r7, #26]
 800778a:	8b7b      	ldrh	r3, [r7, #26]
 800778c:	f083 0320 	eor.w	r3, r3, #32
 8007790:	837b      	strh	r3, [r7, #26]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	461a      	mov	r2, r3
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	441a      	add	r2, r3
 80077a0:	8b7b      	ldrh	r3, [r7, #26]
 80077a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	4619      	mov	r1, r3
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f00d fbfa 	bl	8014fb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80077c2:	88fb      	ldrh	r3, [r7, #6]
 80077c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01f      	beq.n	800780c <HAL_PCD_EP_DB_Transmit+0x22c>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	009b      	lsls	r3, r3, #2
 80077d8:	4413      	add	r3, r2
 80077da:	881b      	ldrh	r3, [r3, #0]
 80077dc:	b29b      	uxth	r3, r3
 80077de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077e6:	833b      	strh	r3, [r7, #24]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	441a      	add	r2, r3
 80077f6:	8b3b      	ldrh	r3, [r7, #24]
 80077f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007800:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007804:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007808:	b29b      	uxth	r3, r3
 800780a:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	e31f      	b.n	8007e50 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d021      	beq.n	800785e <HAL_PCD_EP_DB_Transmit+0x27e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007834:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	461a      	mov	r2, r3
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	441a      	add	r2, r3
 8007846:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800784a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800784e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007852:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800785a:	b29b      	uxth	r3, r3
 800785c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007864:	2b01      	cmp	r3, #1
 8007866:	f040 82ca 	bne.w	8007dfe <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	695a      	ldr	r2, [r3, #20]
 800786e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007872:	441a      	add	r2, r3
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	69da      	ldr	r2, [r3, #28]
 800787c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007880:	441a      	add	r2, r3
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6a1a      	ldr	r2, [r3, #32]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	429a      	cmp	r2, r3
 8007890:	d309      	bcc.n	80078a6 <HAL_PCD_EP_DB_Transmit+0x2c6>
        {
          len = ep->maxpacket;
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	6a1a      	ldr	r2, [r3, #32]
 800789c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	621a      	str	r2, [r3, #32]
 80078a4:	e015      	b.n	80078d2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else if (ep->xfer_len_db == 0U)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d107      	bne.n	80078be <HAL_PCD_EP_DB_Transmit+0x2de>
        {
          len = TxPctSize;
 80078ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078b2:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	2200      	movs	r2, #0
 80078b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80078bc:	e009      	b.n	80078d2 <HAL_PCD_EP_DB_Transmit+0x2f2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	6a1b      	ldr	r3, [r3, #32]
 80078ca:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2200      	movs	r2, #0
 80078d0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer0 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d15f      	bne.n	800799a <HAL_PCD_EP_DB_Transmit+0x3ba>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	643b      	str	r3, [r7, #64]	@ 0x40
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	461a      	mov	r2, r3
 80078ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078ee:	4413      	add	r3, r2
 80078f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	00da      	lsls	r2, r3, #3
 80078f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078fa:	4413      	add	r3, r2
 80078fc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007900:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800790c:	b29a      	uxth	r2, r3
 800790e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007910:	801a      	strh	r2, [r3, #0]
 8007912:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10a      	bne.n	800792e <HAL_PCD_EP_DB_Transmit+0x34e>
 8007918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800791a:	881b      	ldrh	r3, [r3, #0]
 800791c:	b29b      	uxth	r3, r3
 800791e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007926:	b29a      	uxth	r2, r3
 8007928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800792a:	801a      	strh	r2, [r3, #0]
 800792c:	e051      	b.n	80079d2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800792e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007930:	2b3e      	cmp	r3, #62	@ 0x3e
 8007932:	d816      	bhi.n	8007962 <HAL_PCD_EP_DB_Transmit+0x382>
 8007934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007936:	085b      	lsrs	r3, r3, #1
 8007938:	653b      	str	r3, [r7, #80]	@ 0x50
 800793a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800793c:	f003 0301 	and.w	r3, r3, #1
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <HAL_PCD_EP_DB_Transmit+0x36a>
 8007944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007946:	3301      	adds	r3, #1
 8007948:	653b      	str	r3, [r7, #80]	@ 0x50
 800794a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29a      	uxth	r2, r3
 8007950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007952:	b29b      	uxth	r3, r3
 8007954:	029b      	lsls	r3, r3, #10
 8007956:	b29b      	uxth	r3, r3
 8007958:	4313      	orrs	r3, r2
 800795a:	b29a      	uxth	r2, r3
 800795c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800795e:	801a      	strh	r2, [r3, #0]
 8007960:	e037      	b.n	80079d2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 8007962:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007964:	095b      	lsrs	r3, r3, #5
 8007966:	653b      	str	r3, [r7, #80]	@ 0x50
 8007968:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800796a:	f003 031f 	and.w	r3, r3, #31
 800796e:	2b00      	cmp	r3, #0
 8007970:	d102      	bne.n	8007978 <HAL_PCD_EP_DB_Transmit+0x398>
 8007972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007974:	3b01      	subs	r3, #1
 8007976:	653b      	str	r3, [r7, #80]	@ 0x50
 8007978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29a      	uxth	r2, r3
 800797e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007980:	b29b      	uxth	r3, r3
 8007982:	029b      	lsls	r3, r3, #10
 8007984:	b29b      	uxth	r3, r3
 8007986:	4313      	orrs	r3, r2
 8007988:	b29b      	uxth	r3, r3
 800798a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800798e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007992:	b29a      	uxth	r2, r3
 8007994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e01b      	b.n	80079d2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d117      	bne.n	80079d2 <HAL_PCD_EP_DB_Transmit+0x3f2>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	461a      	mov	r2, r3
 80079b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079b6:	4413      	add	r3, r2
 80079b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	00da      	lsls	r2, r3, #3
 80079c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079c2:	4413      	add	r3, r2
 80079c4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80079ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80079d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	6959      	ldr	r1, [r3, #20]
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	891a      	ldrh	r2, [r3, #8]
 80079de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	f006 f846 	bl	800da72 <USB_WritePMA>
 80079e6:	e20a      	b.n	8007dfe <HAL_PCD_EP_DB_Transmit+0x81e>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f0:	b29b      	uxth	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	4413      	add	r3, r2
 8007a02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a06:	881b      	ldrh	r3, [r3, #0]
 8007a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a0c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

    if (ep->xfer_len >= TxPctSize)
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	699a      	ldr	r2, [r3, #24]
 8007a14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d307      	bcc.n	8007a2c <HAL_PCD_EP_DB_Transmit+0x44c>
    {
      ep->xfer_len -= TxPctSize;
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	699a      	ldr	r2, [r3, #24]
 8007a20:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007a24:	1ad2      	subs	r2, r2, r3
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	619a      	str	r2, [r3, #24]
 8007a2a:	e002      	b.n	8007a32 <HAL_PCD_EP_DB_Transmit+0x452>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	f040 80f6 	bne.w	8007c28 <HAL_PCD_EP_DB_Transmit+0x648>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d126      	bne.n	8007a92 <HAL_PCD_EP_DB_Transmit+0x4b2>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a52:	b29b      	uxth	r3, r3
 8007a54:	461a      	mov	r2, r3
 8007a56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a58:	4413      	add	r3, r2
 8007a5a:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	00da      	lsls	r2, r3, #3
 8007a62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a64:	4413      	add	r3, r2
 8007a66:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a6a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007a6c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a6e:	881b      	ldrh	r3, [r3, #0]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a8e:	801a      	strh	r2, [r3, #0]
 8007a90:	e01a      	b.n	8007ac8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d116      	bne.n	8007ac8 <HAL_PCD_EP_DB_Transmit+0x4e8>
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aae:	4413      	add	r3, r2
 8007ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	00da      	lsls	r2, r3, #3
 8007ab8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007aba:	4413      	add	r3, r2
 8007abc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d12f      	bne.n	8007b38 <HAL_PCD_EP_DB_Transmit+0x558>
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	461a      	mov	r2, r3
 8007aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007af0:	4413      	add	r3, r2
 8007af2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	781b      	ldrb	r3, [r3, #0]
 8007afa:	00da      	lsls	r2, r3, #3
 8007afc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b00:	4413      	add	r3, r2
 8007b02:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b06:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b0e:	881b      	ldrh	r3, [r3, #0]
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b16:	b29a      	uxth	r2, r3
 8007b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b1c:	801a      	strh	r2, [r3, #0]
 8007b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b34:	801a      	strh	r2, [r3, #0]
 8007b36:	e01c      	b.n	8007b72 <HAL_PCD_EP_DB_Transmit+0x592>
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	785b      	ldrb	r3, [r3, #1]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d118      	bne.n	8007b72 <HAL_PCD_EP_DB_Transmit+0x592>
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b50:	4413      	add	r3, r2
 8007b52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	00da      	lsls	r2, r3, #3
 8007b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b60:	4413      	add	r3, r2
 8007b62:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007b66:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007b6e:	2200      	movs	r2, #0
 8007b70:	801a      	strh	r2, [r3, #0]

      if (ep->type == EP_TYPE_BULK)
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	78db      	ldrb	r3, [r3, #3]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d127      	bne.n	8007bca <HAL_PCD_EP_DB_Transmit+0x5ea>
      {
        /* Set Bulk endpoint in NAK state */
        PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007b98:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007b9c:	f083 0320 	eor.w	r3, r3, #32
 8007ba0:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	461a      	mov	r2, r3
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	8013      	strh	r3, [r2, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	4619      	mov	r1, r3
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	f00d f9f0 	bl	8014fb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007bd6:	88fb      	ldrh	r3, [r7, #6]
 8007bd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d121      	bne.n	8007c24 <HAL_PCD_EP_DB_Transmit+0x644>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	461a      	mov	r2, r3
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfa:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	441a      	add	r2, r3
 8007c0c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 8007c10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	8013      	strh	r3, [r2, #0]
      }

      return HAL_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	e113      	b.n	8007e50 <HAL_PCD_EP_DB_Transmit+0x870>
    }
    else /* Transfer is not yet Done */
    {
      /* Need to Free USB Buffer */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007c28:	88fb      	ldrh	r3, [r7, #6]
 8007c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d121      	bne.n	8007c76 <HAL_PCD_EP_DB_Transmit+0x696>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	4413      	add	r3, r2
 8007c40:	881b      	ldrh	r3, [r3, #0]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c4c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	441a      	add	r2, r3
 8007c5e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007c62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007c66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007c6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f040 80be 	bne.w	8007dfe <HAL_PCD_EP_DB_Transmit+0x81e>
      {
        ep->xfer_buff += TxPctSize;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c8a:	441a      	add	r2, r3
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007c98:	441a      	add	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6a1a      	ldr	r2, [r3, #32]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	429a      	cmp	r2, r3
 8007ca8:	d309      	bcc.n	8007cbe <HAL_PCD_EP_DB_Transmit+0x6de>
        {
          len = ep->maxpacket;
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db -= len;
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	6a1a      	ldr	r2, [r3, #32]
 8007cb4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cb6:	1ad2      	subs	r2, r2, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	621a      	str	r2, [r3, #32]
 8007cbc:	e015      	b.n	8007cea <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else if (ep->xfer_len_db == 0U)
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d107      	bne.n	8007cd6 <HAL_PCD_EP_DB_Transmit+0x6f6>
        {
          len = TxPctSize;
 8007cc6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007cca:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_fill_db = 0U;
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007cd4:	e009      	b.n	8007cea <HAL_PCD_EP_DB_Transmit+0x70a>
        }
        else
        {
          len = ep->xfer_len_db;
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	65bb      	str	r3, [r7, #88]	@ 0x58
          ep->xfer_len_db = 0U;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	785b      	ldrb	r3, [r3, #1]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d15f      	bne.n	8007db8 <HAL_PCD_EP_DB_Transmit+0x7d8>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d0c:	4413      	add	r3, r2
 8007d0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	00da      	lsls	r2, r3, #3
 8007d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007d18:	4413      	add	r3, r2
 8007d1a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d20:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <HAL_PCD_EP_DB_Transmit+0x76c>
 8007d36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d48:	801a      	strh	r2, [r3, #0]
 8007d4a:	e04e      	b.n	8007dea <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d4c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d4e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d50:	d816      	bhi.n	8007d80 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8007d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d54:	085b      	lsrs	r3, r3, #1
 8007d56:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d5a:	f003 0301 	and.w	r3, r3, #1
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <HAL_PCD_EP_DB_Transmit+0x788>
 8007d62:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d64:	3301      	adds	r3, #1
 8007d66:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d6a:	881b      	ldrh	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	029b      	lsls	r3, r3, #10
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	4313      	orrs	r3, r2
 8007d78:	b29a      	uxth	r2, r3
 8007d7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d7c:	801a      	strh	r2, [r3, #0]
 8007d7e:	e034      	b.n	8007dea <HAL_PCD_EP_DB_Transmit+0x80a>
 8007d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d82:	095b      	lsrs	r3, r3, #5
 8007d84:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d88:	f003 031f 	and.w	r3, r3, #31
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d102      	bne.n	8007d96 <HAL_PCD_EP_DB_Transmit+0x7b6>
 8007d90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d92:	3b01      	subs	r3, #1
 8007d94:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d96:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	029b      	lsls	r3, r3, #10
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	4313      	orrs	r3, r2
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007db0:	b29a      	uxth	r2, r3
 8007db2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007db4:	801a      	strh	r2, [r3, #0]
 8007db6:	e018      	b.n	8007dea <HAL_PCD_EP_DB_Transmit+0x80a>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	785b      	ldrb	r3, [r3, #1]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d114      	bne.n	8007dea <HAL_PCD_EP_DB_Transmit+0x80a>
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dce:	4413      	add	r3, r2
 8007dd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	781b      	ldrb	r3, [r3, #0]
 8007dd6:	00da      	lsls	r2, r3, #3
 8007dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007dda:	4413      	add	r3, r2
 8007ddc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007de0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007de2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007de8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	6959      	ldr	r1, [r3, #20]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	895a      	ldrh	r2, [r3, #10]
 8007df6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	f005 fe3a 	bl	800da72 <USB_WritePMA>
      }
    }
  }

  /* Enable endpoint IN */
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	461a      	mov	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4413      	add	r3, r2
 8007e0c:	881b      	ldrh	r3, [r3, #0]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e18:	82fb      	strh	r3, [r7, #22]
 8007e1a:	8afb      	ldrh	r3, [r7, #22]
 8007e1c:	f083 0310 	eor.w	r3, r3, #16
 8007e20:	82fb      	strh	r3, [r7, #22]
 8007e22:	8afb      	ldrh	r3, [r7, #22]
 8007e24:	f083 0320 	eor.w	r3, r3, #32
 8007e28:	82fb      	strh	r3, [r7, #22]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	441a      	add	r2, r3
 8007e38:	8afb      	ldrh	r3, [r7, #22]
 8007e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3798      	adds	r7, #152	@ 0x98
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b087      	sub	sp, #28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	607b      	str	r3, [r7, #4]
 8007e62:	460b      	mov	r3, r1
 8007e64:	817b      	strh	r3, [r7, #10]
 8007e66:	4613      	mov	r3, r2
 8007e68:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007e6a:	897b      	ldrh	r3, [r7, #10]
 8007e6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d00b      	beq.n	8007e8e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e76:	897b      	ldrh	r3, [r7, #10]
 8007e78:	f003 0207 	and.w	r2, r3, #7
 8007e7c:	4613      	mov	r3, r2
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	00db      	lsls	r3, r3, #3
 8007e84:	3310      	adds	r3, #16
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	4413      	add	r3, r2
 8007e8a:	617b      	str	r3, [r7, #20]
 8007e8c:	e009      	b.n	8007ea2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e8e:	897a      	ldrh	r2, [r7, #10]
 8007e90:	4613      	mov	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	4413      	add	r3, r2
 8007e96:	00db      	lsls	r3, r3, #3
 8007e98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007ea2:	893b      	ldrh	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d107      	bne.n	8007eb8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	80da      	strh	r2, [r3, #6]
 8007eb6:	e00b      	b.n	8007ed0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	b29a      	uxth	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	0c1b      	lsrs	r3, r3, #16
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007ed0:	2300      	movs	r3, #0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	371c      	adds	r7, #28
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007ede:	b480      	push	{r7}
 8007ee0:	b085      	sub	sp, #20
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2201      	movs	r2, #1
 8007ef0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	f043 0301 	orr.w	r3, r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	f043 0302 	orr.w	r3, r3, #2
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
	...

08007f34 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a04      	ldr	r2, [pc, #16]	@ (8007f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f42:	6013      	str	r3, [r2, #0]
}
 8007f44:	bf00      	nop
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	58000400 	.word	0x58000400

08007f54 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007f58:	4b04      	ldr	r3, [pc, #16]	@ (8007f6c <HAL_PWREx_GetVoltageRange+0x18>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	58000400 	.word	0x58000400

08007f70 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007f74:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	4a04      	ldr	r2, [pc, #16]	@ (8007f8c <HAL_PWREx_EnableVddUSB+0x1c>)
 8007f7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f7e:	6053      	str	r3, [r2, #4]
}
 8007f80:	bf00      	nop
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	58000400 	.word	0x58000400

08007f90 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007fa2:	d101      	bne.n	8007fa8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e000      	b.n	8007faa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr

08007fb4 <LL_RCC_HSE_Enable>:
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007fb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fc6:	6013      	str	r3, [r2, #0]
}
 8007fc8:	bf00      	nop
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <LL_RCC_HSE_Disable>:
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007fd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fe4:	6013      	str	r3, [r2, #0]
}
 8007fe6:	bf00      	nop
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <LL_RCC_HSE_IsReady>:
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007ff4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ffe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008002:	d101      	bne.n	8008008 <LL_RCC_HSE_IsReady+0x18>
 8008004:	2301      	movs	r3, #1
 8008006:	e000      	b.n	800800a <LL_RCC_HSE_IsReady+0x1a>
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <LL_RCC_HSI_Enable>:
{
 8008014:	b480      	push	{r7}
 8008016:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008018:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008026:	6013      	str	r3, [r2, #0]
}
 8008028:	bf00      	nop
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <LL_RCC_HSI_Disable>:
{
 8008032:	b480      	push	{r7}
 8008034:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008036:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008044:	6013      	str	r3, [r2, #0]
}
 8008046:	bf00      	nop
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <LL_RCC_HSI_IsReady>:
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008054:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800805e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008062:	d101      	bne.n	8008068 <LL_RCC_HSI_IsReady+0x18>
 8008064:	2301      	movs	r3, #1
 8008066:	e000      	b.n	800806a <LL_RCC_HSI_IsReady+0x1a>
 8008068:	2300      	movs	r3, #0
}
 800806a:	4618      	mov	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <LL_RCC_HSI_SetCalibTrimming>:
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800807c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	061b      	lsls	r3, r3, #24
 800808a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800808e:	4313      	orrs	r3, r2
 8008090:	604b      	str	r3, [r1, #4]
}
 8008092:	bf00      	nop
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <LL_RCC_HSI48_Enable>:
{
 800809e:	b480      	push	{r7}
 80080a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80080a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80080b6:	bf00      	nop
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <LL_RCC_HSI48_Disable>:
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80080c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080d0:	f023 0301 	bic.w	r3, r3, #1
 80080d4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80080d8:	bf00      	nop
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <LL_RCC_HSI48_IsReady>:
{
 80080e2:	b480      	push	{r7}
 80080e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80080e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d101      	bne.n	80080fa <LL_RCC_HSI48_IsReady+0x18>
 80080f6:	2301      	movs	r3, #1
 80080f8:	e000      	b.n	80080fc <LL_RCC_HSI48_IsReady+0x1a>
 80080fa:	2300      	movs	r3, #0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr

08008106 <LL_RCC_LSE_Enable>:
{
 8008106:	b480      	push	{r7}
 8008108:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800810a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800810e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008112:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008116:	f043 0301 	orr.w	r3, r3, #1
 800811a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800811e:	bf00      	nop
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <LL_RCC_LSE_Disable>:
{
 8008128:	b480      	push	{r7}
 800812a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800812c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008134:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008138:	f023 0301 	bic.w	r3, r3, #1
 800813c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008140:	bf00      	nop
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <LL_RCC_LSE_EnableBypass>:
{
 800814a:	b480      	push	{r7}
 800814c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800814e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008156:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800815a:	f043 0304 	orr.w	r3, r3, #4
 800815e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008162:	bf00      	nop
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <LL_RCC_LSE_DisableBypass>:
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8008170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800817c:	f023 0304 	bic.w	r3, r3, #4
 8008180:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008184:	bf00      	nop
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <LL_RCC_LSE_IsReady>:
{
 800818e:	b480      	push	{r7}
 8008190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800819a:	f003 0302 	and.w	r3, r3, #2
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d101      	bne.n	80081a6 <LL_RCC_LSE_IsReady+0x18>
 80081a2:	2301      	movs	r3, #1
 80081a4:	e000      	b.n	80081a8 <LL_RCC_LSE_IsReady+0x1a>
 80081a6:	2300      	movs	r3, #0
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <LL_RCC_LSI1_Enable>:
{
 80081b2:	b480      	push	{r7}
 80081b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80081b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081c2:	f043 0301 	orr.w	r3, r3, #1
 80081c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80081ca:	bf00      	nop
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <LL_RCC_LSI1_Disable>:
{
 80081d4:	b480      	push	{r7}
 80081d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80081d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081e4:	f023 0301 	bic.w	r3, r3, #1
 80081e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80081ec:	bf00      	nop
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <LL_RCC_LSI1_IsReady>:
{
 80081f6:	b480      	push	{r7}
 80081f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80081fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d101      	bne.n	800820e <LL_RCC_LSI1_IsReady+0x18>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <LL_RCC_LSI1_IsReady+0x1a>
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <LL_RCC_LSI2_Enable>:
{
 800821a:	b480      	push	{r7}
 800821c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800821e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008226:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800822a:	f043 0304 	orr.w	r3, r3, #4
 800822e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008232:	bf00      	nop
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <LL_RCC_LSI2_Disable>:
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008244:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008248:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800824c:	f023 0304 	bic.w	r3, r3, #4
 8008250:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008254:	bf00      	nop
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <LL_RCC_LSI2_IsReady>:
{
 800825e:	b480      	push	{r7}
 8008260:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8008262:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	2b08      	cmp	r3, #8
 8008270:	d101      	bne.n	8008276 <LL_RCC_LSI2_IsReady+0x18>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <LL_RCC_LSI2_IsReady+0x1a>
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <LL_RCC_LSI2_SetTrimming>:
{
 8008282:	b480      	push	{r7}
 8008284:	b083      	sub	sp, #12
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800828a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800828e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008292:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	021b      	lsls	r3, r3, #8
 800829a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800829e:	4313      	orrs	r3, r2
 80082a0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80082a4:	bf00      	nop
 80082a6:	370c      	adds	r7, #12
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <LL_RCC_MSI_Enable>:
{
 80082b0:	b480      	push	{r7}
 80082b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80082b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082be:	f043 0301 	orr.w	r3, r3, #1
 80082c2:	6013      	str	r3, [r2, #0]
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <LL_RCC_MSI_Disable>:
{
 80082ce:	b480      	push	{r7}
 80082d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80082d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	6013      	str	r3, [r2, #0]
}
 80082e2:	bf00      	nop
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <LL_RCC_MSI_IsReady>:
{
 80082ec:	b480      	push	{r7}
 80082ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80082f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f003 0302 	and.w	r3, r3, #2
 80082fa:	2b02      	cmp	r3, #2
 80082fc:	d101      	bne.n	8008302 <LL_RCC_MSI_IsReady+0x16>
 80082fe:	2301      	movs	r3, #1
 8008300:	e000      	b.n	8008304 <LL_RCC_MSI_IsReady+0x18>
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <LL_RCC_MSI_SetRange>:
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008320:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4313      	orrs	r3, r2
 8008328:	600b      	str	r3, [r1, #0]
}
 800832a:	bf00      	nop
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <LL_RCC_MSI_GetRange>:
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800833c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008346:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2bb0      	cmp	r3, #176	@ 0xb0
 800834c:	d901      	bls.n	8008352 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800834e:	23b0      	movs	r3, #176	@ 0xb0
 8008350:	607b      	str	r3, [r7, #4]
  return msiRange;
 8008352:	687b      	ldr	r3, [r7, #4]
}
 8008354:	4618      	mov	r0, r3
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <LL_RCC_MSI_SetCalibTrimming>:
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800836c:	685b      	ldr	r3, [r3, #4]
 800836e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800837a:	4313      	orrs	r3, r2
 800837c:	604b      	str	r3, [r1, #4]
}
 800837e:	bf00      	nop
 8008380:	370c      	adds	r7, #12
 8008382:	46bd      	mov	sp, r7
 8008384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008388:	4770      	bx	lr

0800838a <LL_RCC_SetSysClkSource>:
{
 800838a:	b480      	push	{r7}
 800838c:	b083      	sub	sp, #12
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8008392:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f023 0203 	bic.w	r2, r3, #3
 800839c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	608b      	str	r3, [r1, #8]
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <LL_RCC_GetSysClkSource>:
{
 80083b2:	b480      	push	{r7}
 80083b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80083b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	f003 030c 	and.w	r3, r3, #12
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr

080083ca <LL_RCC_SetAHBPrescaler>:
{
 80083ca:	b480      	push	{r7}
 80083cc:	b083      	sub	sp, #12
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80083d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80083dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	608b      	str	r3, [r1, #8]
}
 80083e6:	bf00      	nop
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <LL_C2_RCC_SetAHBPrescaler>:
{
 80083f2:	b480      	push	{r7}
 80083f4:	b083      	sub	sp, #12
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80083fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083fe:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008402:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4313      	orrs	r3, r2
 800840e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <LL_RCC_SetAHB4Prescaler>:
{
 800841e:	b480      	push	{r7}
 8008420:	b083      	sub	sp, #12
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008426:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800842a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800842e:	f023 020f 	bic.w	r2, r3, #15
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	091b      	lsrs	r3, r3, #4
 8008436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800843a:	4313      	orrs	r3, r2
 800843c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <LL_RCC_SetAPB1Prescaler>:
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800845e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4313      	orrs	r3, r2
 8008466:	608b      	str	r3, [r1, #8]
}
 8008468:	bf00      	nop
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <LL_RCC_SetAPB2Prescaler>:
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800847c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008486:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	4313      	orrs	r3, r2
 800848e:	608b      	str	r3, [r1, #8]
}
 8008490:	bf00      	nop
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <LL_RCC_GetAHBPrescaler>:
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80084a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084a4:	689b      	ldr	r3, [r3, #8]
 80084a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <LL_RCC_GetAHB4Prescaler>:
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80084b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084bc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80084c0:	011b      	lsls	r3, r3, #4
 80084c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <LL_RCC_PLL_Enable>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80084d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80084e2:	6013      	str	r3, [r2, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <LL_RCC_PLL_Disable>:
{
 80084ee:	b480      	push	{r7}
 80084f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80084f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80084fc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008500:	6013      	str	r3, [r2, #0]
}
 8008502:	bf00      	nop
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <LL_RCC_PLL_IsReady>:
{
 800850c:	b480      	push	{r7}
 800850e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800851a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800851e:	d101      	bne.n	8008524 <LL_RCC_PLL_IsReady+0x18>
 8008520:	2301      	movs	r3, #1
 8008522:	e000      	b.n	8008526 <LL_RCC_PLL_IsReady+0x1a>
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <LL_RCC_PLL_GetN>:
{
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	0a1b      	lsrs	r3, r3, #8
 800853c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8008540:	4618      	mov	r0, r3
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr

0800854a <LL_RCC_PLL_GetR>:
{
 800854a:	b480      	push	{r7}
 800854c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800854e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8008558:	4618      	mov	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <LL_RCC_PLL_GetDivider>:
{
 8008562:	b480      	push	{r7}
 8008564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008566:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8008570:	4618      	mov	r0, r3
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <LL_RCC_PLL_GetMainSource>:
{
 800857a:	b480      	push	{r7}
 800857c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800857e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	f003 0303 	and.w	r3, r3, #3
}
 8008588:	4618      	mov	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr

08008592 <LL_RCC_IsActiveFlag_HPRE>:
{
 8008592:	b480      	push	{r7}
 8008594:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085a4:	d101      	bne.n	80085aa <LL_RCC_IsActiveFlag_HPRE+0x18>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e000      	b.n	80085ac <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80085b6:	b480      	push	{r7}
 80085b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80085ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085be:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80085c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80085ca:	d101      	bne.n	80085d0 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80085cc:	2301      	movs	r3, #1
 80085ce:	e000      	b.n	80085d2 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80085dc:	b480      	push	{r7}
 80085de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80085e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80085e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085f0:	d101      	bne.n	80085f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr

08008602 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8008602:	b480      	push	{r7}
 8008604:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008610:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008614:	d101      	bne.n	800861a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr

08008626 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008626:	b480      	push	{r7}
 8008628:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800862a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008634:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008638:	d101      	bne.n	800863e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800863a:	2301      	movs	r3, #1
 800863c:	e000      	b.n	8008640 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr
	...

0800864c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800864c:	b590      	push	{r4, r7, lr}
 800864e:	b08d      	sub	sp, #52	@ 0x34
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e363      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 808d 	beq.w	8008786 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800866c:	f7ff fea1 	bl	80083b2 <LL_RCC_GetSysClkSource>
 8008670:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008672:	f7ff ff82 	bl	800857a <LL_RCC_PLL_GetMainSource>
 8008676:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008678:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_RCC_OscConfig+0x3e>
 800867e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008680:	2b0c      	cmp	r3, #12
 8008682:	d147      	bne.n	8008714 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008686:	2b01      	cmp	r3, #1
 8008688:	d144      	bne.n	8008714 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e347      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800869a:	f7ff fe4c 	bl	8008336 <LL_RCC_MSI_GetRange>
 800869e:	4603      	mov	r3, r0
 80086a0:	429c      	cmp	r4, r3
 80086a2:	d914      	bls.n	80086ce <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fd03 	bl	80090b4 <RCC_SetFlashLatencyFromMSIRange>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e336      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086bc:	4618      	mov	r0, r3
 80086be:	f7ff fe26 	bl	800830e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6a1b      	ldr	r3, [r3, #32]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff fe4a 	bl	8008360 <LL_RCC_MSI_SetCalibTrimming>
 80086cc:	e013      	b.n	80086f6 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f7ff fe1b 	bl	800830e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a1b      	ldr	r3, [r3, #32]
 80086dc:	4618      	mov	r0, r3
 80086de:	f7ff fe3f 	bl	8008360 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e6:	4618      	mov	r0, r3
 80086e8:	f000 fce4 	bl	80090b4 <RCC_SetFlashLatencyFromMSIRange>
 80086ec:	4603      	mov	r3, r0
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d001      	beq.n	80086f6 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e317      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80086f6:	f000 fcc9 	bl	800908c <HAL_RCC_GetHCLKFreq>
 80086fa:	4603      	mov	r3, r0
 80086fc:	4aa4      	ldr	r2, [pc, #656]	@ (8008990 <HAL_RCC_OscConfig+0x344>)
 80086fe:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008700:	4ba4      	ldr	r3, [pc, #656]	@ (8008994 <HAL_RCC_OscConfig+0x348>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f7fc fc07 	bl	8004f18 <HAL_InitTick>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d039      	beq.n	8008784 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e308      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	69db      	ldr	r3, [r3, #28]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d01e      	beq.n	800875a <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800871c:	f7ff fdc8 	bl	80082b0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008720:	f7fc fc48 	bl	8004fb4 <HAL_GetTick>
 8008724:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008726:	e008      	b.n	800873a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008728:	f7fc fc44 	bl	8004fb4 <HAL_GetTick>
 800872c:	4602      	mov	r2, r0
 800872e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	2b02      	cmp	r3, #2
 8008734:	d901      	bls.n	800873a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008736:	2303      	movs	r3, #3
 8008738:	e2f5      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800873a:	f7ff fdd7 	bl	80082ec <LL_RCC_MSI_IsReady>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0f1      	beq.n	8008728 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008748:	4618      	mov	r0, r3
 800874a:	f7ff fde0 	bl	800830e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6a1b      	ldr	r3, [r3, #32]
 8008752:	4618      	mov	r0, r3
 8008754:	f7ff fe04 	bl	8008360 <LL_RCC_MSI_SetCalibTrimming>
 8008758:	e015      	b.n	8008786 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800875a:	f7ff fdb8 	bl	80082ce <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800875e:	f7fc fc29 	bl	8004fb4 <HAL_GetTick>
 8008762:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008764:	e008      	b.n	8008778 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008766:	f7fc fc25 	bl	8004fb4 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	2b02      	cmp	r3, #2
 8008772:	d901      	bls.n	8008778 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008774:	2303      	movs	r3, #3
 8008776:	e2d6      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008778:	f7ff fdb8 	bl	80082ec <LL_RCC_MSI_IsReady>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1f1      	bne.n	8008766 <HAL_RCC_OscConfig+0x11a>
 8008782:	e000      	b.n	8008786 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008784:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d047      	beq.n	8008822 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008792:	f7ff fe0e 	bl	80083b2 <LL_RCC_GetSysClkSource>
 8008796:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008798:	f7ff feef 	bl	800857a <LL_RCC_PLL_GetMainSource>
 800879c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	2b08      	cmp	r3, #8
 80087a2:	d005      	beq.n	80087b0 <HAL_RCC_OscConfig+0x164>
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	2b0c      	cmp	r3, #12
 80087a8:	d108      	bne.n	80087bc <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d105      	bne.n	80087bc <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d134      	bne.n	8008822 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e2b4      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80087c4:	d102      	bne.n	80087cc <HAL_RCC_OscConfig+0x180>
 80087c6:	f7ff fbf5 	bl	8007fb4 <LL_RCC_HSE_Enable>
 80087ca:	e001      	b.n	80087d0 <HAL_RCC_OscConfig+0x184>
 80087cc:	f7ff fc01 	bl	8007fd2 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d012      	beq.n	80087fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087d8:	f7fc fbec 	bl	8004fb4 <HAL_GetTick>
 80087dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80087de:	e008      	b.n	80087f2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087e0:	f7fc fbe8 	bl	8004fb4 <HAL_GetTick>
 80087e4:	4602      	mov	r2, r0
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	1ad3      	subs	r3, r2, r3
 80087ea:	2b64      	cmp	r3, #100	@ 0x64
 80087ec:	d901      	bls.n	80087f2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80087ee:	2303      	movs	r3, #3
 80087f0:	e299      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80087f2:	f7ff fbfd 	bl	8007ff0 <LL_RCC_HSE_IsReady>
 80087f6:	4603      	mov	r3, r0
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d0f1      	beq.n	80087e0 <HAL_RCC_OscConfig+0x194>
 80087fc:	e011      	b.n	8008822 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087fe:	f7fc fbd9 	bl	8004fb4 <HAL_GetTick>
 8008802:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008804:	e008      	b.n	8008818 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008806:	f7fc fbd5 	bl	8004fb4 <HAL_GetTick>
 800880a:	4602      	mov	r2, r0
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	2b64      	cmp	r3, #100	@ 0x64
 8008812:	d901      	bls.n	8008818 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008814:	2303      	movs	r3, #3
 8008816:	e286      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008818:	f7ff fbea 	bl	8007ff0 <LL_RCC_HSE_IsReady>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1f1      	bne.n	8008806 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0302 	and.w	r3, r3, #2
 800882a:	2b00      	cmp	r3, #0
 800882c:	d04c      	beq.n	80088c8 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800882e:	f7ff fdc0 	bl	80083b2 <LL_RCC_GetSysClkSource>
 8008832:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008834:	f7ff fea1 	bl	800857a <LL_RCC_PLL_GetMainSource>
 8008838:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	2b04      	cmp	r3, #4
 800883e:	d005      	beq.n	800884c <HAL_RCC_OscConfig+0x200>
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	2b0c      	cmp	r3, #12
 8008844:	d10e      	bne.n	8008864 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d10b      	bne.n	8008864 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e266      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	691b      	ldr	r3, [r3, #16]
 800885c:	4618      	mov	r0, r3
 800885e:	f7ff fc09 	bl	8008074 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008862:	e031      	b.n	80088c8 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d019      	beq.n	80088a0 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800886c:	f7ff fbd2 	bl	8008014 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008870:	f7fc fba0 	bl	8004fb4 <HAL_GetTick>
 8008874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008876:	e008      	b.n	800888a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008878:	f7fc fb9c 	bl	8004fb4 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	2b02      	cmp	r3, #2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e24d      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800888a:	f7ff fbe1 	bl	8008050 <LL_RCC_HSI_IsReady>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d0f1      	beq.n	8008878 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	4618      	mov	r0, r3
 800889a:	f7ff fbeb 	bl	8008074 <LL_RCC_HSI_SetCalibTrimming>
 800889e:	e013      	b.n	80088c8 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088a0:	f7ff fbc7 	bl	8008032 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a4:	f7fc fb86 	bl	8004fb4 <HAL_GetTick>
 80088a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80088aa:	e008      	b.n	80088be <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ac:	f7fc fb82 	bl	8004fb4 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e233      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80088be:	f7ff fbc7 	bl	8008050 <LL_RCC_HSI_IsReady>
 80088c2:	4603      	mov	r3, r0
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f1      	bne.n	80088ac <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f003 0308 	and.w	r3, r3, #8
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d106      	bne.n	80088e2 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 80a3 	beq.w	8008a28 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	695b      	ldr	r3, [r3, #20]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d076      	beq.n	80089d8 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 0310 	and.w	r3, r3, #16
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d046      	beq.n	8008984 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80088f6:	f7ff fc7e 	bl	80081f6 <LL_RCC_LSI1_IsReady>
 80088fa:	4603      	mov	r3, r0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d113      	bne.n	8008928 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008900:	f7ff fc57 	bl	80081b2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008904:	f7fc fb56 	bl	8004fb4 <HAL_GetTick>
 8008908:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800890a:	e008      	b.n	800891e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800890c:	f7fc fb52 	bl	8004fb4 <HAL_GetTick>
 8008910:	4602      	mov	r2, r0
 8008912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	2b02      	cmp	r3, #2
 8008918:	d901      	bls.n	800891e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800891a:	2303      	movs	r3, #3
 800891c:	e203      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800891e:	f7ff fc6a 	bl	80081f6 <LL_RCC_LSI1_IsReady>
 8008922:	4603      	mov	r3, r0
 8008924:	2b00      	cmp	r3, #0
 8008926:	d0f1      	beq.n	800890c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008928:	f7ff fc77 	bl	800821a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800892c:	f7fc fb42 	bl	8004fb4 <HAL_GetTick>
 8008930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008932:	e008      	b.n	8008946 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008934:	f7fc fb3e 	bl	8004fb4 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b03      	cmp	r3, #3
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e1ef      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008946:	f7ff fc8a 	bl	800825e <LL_RCC_LSI2_IsReady>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0f1      	beq.n	8008934 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	4618      	mov	r0, r3
 8008956:	f7ff fc94 	bl	8008282 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800895a:	f7ff fc3b 	bl	80081d4 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800895e:	f7fc fb29 	bl	8004fb4 <HAL_GetTick>
 8008962:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008964:	e008      	b.n	8008978 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008966:	f7fc fb25 	bl	8004fb4 <HAL_GetTick>
 800896a:	4602      	mov	r2, r0
 800896c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896e:	1ad3      	subs	r3, r2, r3
 8008970:	2b02      	cmp	r3, #2
 8008972:	d901      	bls.n	8008978 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e1d6      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008978:	f7ff fc3d 	bl	80081f6 <LL_RCC_LSI1_IsReady>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1f1      	bne.n	8008966 <HAL_RCC_OscConfig+0x31a>
 8008982:	e051      	b.n	8008a28 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008984:	f7ff fc15 	bl	80081b2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008988:	f7fc fb14 	bl	8004fb4 <HAL_GetTick>
 800898c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800898e:	e00c      	b.n	80089aa <HAL_RCC_OscConfig+0x35e>
 8008990:	20000010 	.word	0x20000010
 8008994:	20000014 	.word	0x20000014
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008998:	f7fc fb0c 	bl	8004fb4 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e1bd      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80089aa:	f7ff fc24 	bl	80081f6 <LL_RCC_LSI1_IsReady>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d0f1      	beq.n	8008998 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80089b4:	f7ff fc42 	bl	800823c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80089b8:	e008      	b.n	80089cc <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80089ba:	f7fc fafb 	bl	8004fb4 <HAL_GetTick>
 80089be:	4602      	mov	r2, r0
 80089c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089c2:	1ad3      	subs	r3, r2, r3
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d901      	bls.n	80089cc <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80089c8:	2303      	movs	r3, #3
 80089ca:	e1ac      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80089cc:	f7ff fc47 	bl	800825e <LL_RCC_LSI2_IsReady>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f1      	bne.n	80089ba <HAL_RCC_OscConfig+0x36e>
 80089d6:	e027      	b.n	8008a28 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80089d8:	f7ff fc30 	bl	800823c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089dc:	f7fc faea 	bl	8004fb4 <HAL_GetTick>
 80089e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80089e2:	e008      	b.n	80089f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80089e4:	f7fc fae6 	bl	8004fb4 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e197      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80089f6:	f7ff fc32 	bl	800825e <LL_RCC_LSI2_IsReady>
 80089fa:	4603      	mov	r3, r0
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f1      	bne.n	80089e4 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008a00:	f7ff fbe8 	bl	80081d4 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a04:	f7fc fad6 	bl	8004fb4 <HAL_GetTick>
 8008a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008a0a:	e008      	b.n	8008a1e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008a0c:	f7fc fad2 	bl	8004fb4 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d901      	bls.n	8008a1e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	e183      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008a1e:	f7ff fbea 	bl	80081f6 <LL_RCC_LSI1_IsReady>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d1f1      	bne.n	8008a0c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d05b      	beq.n	8008aec <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a34:	4ba7      	ldr	r3, [pc, #668]	@ (8008cd4 <HAL_RCC_OscConfig+0x688>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d114      	bne.n	8008a6a <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008a40:	f7ff fa78 	bl	8007f34 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008a44:	f7fc fab6 	bl	8004fb4 <HAL_GetTick>
 8008a48:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a4a:	e008      	b.n	8008a5e <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a4c:	f7fc fab2 	bl	8004fb4 <HAL_GetTick>
 8008a50:	4602      	mov	r2, r0
 8008a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a54:	1ad3      	subs	r3, r2, r3
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d901      	bls.n	8008a5e <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e163      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008a5e:	4b9d      	ldr	r3, [pc, #628]	@ (8008cd4 <HAL_RCC_OscConfig+0x688>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0f0      	beq.n	8008a4c <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d102      	bne.n	8008a78 <HAL_RCC_OscConfig+0x42c>
 8008a72:	f7ff fb48 	bl	8008106 <LL_RCC_LSE_Enable>
 8008a76:	e00c      	b.n	8008a92 <HAL_RCC_OscConfig+0x446>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	2b05      	cmp	r3, #5
 8008a7e:	d104      	bne.n	8008a8a <HAL_RCC_OscConfig+0x43e>
 8008a80:	f7ff fb63 	bl	800814a <LL_RCC_LSE_EnableBypass>
 8008a84:	f7ff fb3f 	bl	8008106 <LL_RCC_LSE_Enable>
 8008a88:	e003      	b.n	8008a92 <HAL_RCC_OscConfig+0x446>
 8008a8a:	f7ff fb4d 	bl	8008128 <LL_RCC_LSE_Disable>
 8008a8e:	f7ff fb6d 	bl	800816c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d014      	beq.n	8008ac4 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a9a:	f7fc fa8b 	bl	8004fb4 <HAL_GetTick>
 8008a9e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008aa0:	e00a      	b.n	8008ab8 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aa2:	f7fc fa87 	bl	8004fb4 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d901      	bls.n	8008ab8 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e136      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8008ab8:	f7ff fb69 	bl	800818e <LL_RCC_LSE_IsReady>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0ef      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x456>
 8008ac2:	e013      	b.n	8008aec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ac4:	f7fc fa76 	bl	8004fb4 <HAL_GetTick>
 8008ac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8008aca:	e00a      	b.n	8008ae2 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008acc:	f7fc fa72 	bl	8004fb4 <HAL_GetTick>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d901      	bls.n	8008ae2 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8008ade:	2303      	movs	r3, #3
 8008ae0:	e121      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8008ae2:	f7ff fb54 	bl	800818e <LL_RCC_LSE_IsReady>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1ef      	bne.n	8008acc <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d02c      	beq.n	8008b52 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d014      	beq.n	8008b2a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008b00:	f7ff facd 	bl	800809e <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b04:	f7fc fa56 	bl	8004fb4 <HAL_GetTick>
 8008b08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008b0a:	e008      	b.n	8008b1e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b0c:	f7fc fa52 	bl	8004fb4 <HAL_GetTick>
 8008b10:	4602      	mov	r2, r0
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d901      	bls.n	8008b1e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e103      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008b1e:	f7ff fae0 	bl	80080e2 <LL_RCC_HSI48_IsReady>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0f1      	beq.n	8008b0c <HAL_RCC_OscConfig+0x4c0>
 8008b28:	e013      	b.n	8008b52 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008b2a:	f7ff fac9 	bl	80080c0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b2e:	f7fc fa41 	bl	8004fb4 <HAL_GetTick>
 8008b32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008b34:	e008      	b.n	8008b48 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008b36:	f7fc fa3d 	bl	8004fb4 <HAL_GetTick>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3e:	1ad3      	subs	r3, r2, r3
 8008b40:	2b02      	cmp	r3, #2
 8008b42:	d901      	bls.n	8008b48 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008b44:	2303      	movs	r3, #3
 8008b46:	e0ee      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008b48:	f7ff facb 	bl	80080e2 <LL_RCC_HSI48_IsReady>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f1      	bne.n	8008b36 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 80e4 	beq.w	8008d24 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b5c:	f7ff fc29 	bl	80083b2 <LL_RCC_GetSysClkSource>
 8008b60:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008b62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b6e:	2b02      	cmp	r3, #2
 8008b70:	f040 80b4 	bne.w	8008cdc <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f003 0203 	and.w	r2, r3, #3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d123      	bne.n	8008bca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d11c      	bne.n	8008bca <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	0a1b      	lsrs	r3, r3, #8
 8008b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d114      	bne.n	8008bca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d10d      	bne.n	8008bca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d106      	bne.n	8008bca <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008bc6:	429a      	cmp	r2, r3
 8008bc8:	d05d      	beq.n	8008c86 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	2b0c      	cmp	r3, #12
 8008bce:	d058      	beq.n	8008c82 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008bd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d001      	beq.n	8008be2 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e0a1      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008be2:	f7ff fc84 	bl	80084ee <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008be6:	f7fc f9e5 	bl	8004fb4 <HAL_GetTick>
 8008bea:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bec:	e008      	b.n	8008c00 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bee:	f7fc f9e1 	bl	8004fb4 <HAL_GetTick>
 8008bf2:	4602      	mov	r2, r0
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	d901      	bls.n	8008c00 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	e092      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1ef      	bne.n	8008bee <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	4b30      	ldr	r3, [pc, #192]	@ (8008cd8 <HAL_RCC_OscConfig+0x68c>)
 8008c16:	4013      	ands	r3, r2
 8008c18:	687a      	ldr	r2, [r7, #4]
 8008c1a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008c1c:	687a      	ldr	r2, [r7, #4]
 8008c1e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c20:	4311      	orrs	r1, r2
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008c26:	0212      	lsls	r2, r2, #8
 8008c28:	4311      	orrs	r1, r2
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008c2e:	4311      	orrs	r1, r2
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008c34:	4311      	orrs	r1, r2
 8008c36:	687a      	ldr	r2, [r7, #4]
 8008c38:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008c3a:	430a      	orrs	r2, r1
 8008c3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008c44:	f7ff fc44 	bl	80084d0 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c4c:	68db      	ldr	r3, [r3, #12]
 8008c4e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008c52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008c58:	f7fc f9ac 	bl	8004fb4 <HAL_GetTick>
 8008c5c:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c5e:	e008      	b.n	8008c72 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c60:	f7fc f9a8 	bl	8004fb4 <HAL_GetTick>
 8008c64:	4602      	mov	r2, r0
 8008c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c68:	1ad3      	subs	r3, r2, r3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d901      	bls.n	8008c72 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008c6e:	2303      	movs	r3, #3
 8008c70:	e059      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d0ef      	beq.n	8008c60 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c80:	e050      	b.n	8008d24 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e04f      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d147      	bne.n	8008d24 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008c94:	f7ff fc1c 	bl	80084d0 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c9c:	68db      	ldr	r3, [r3, #12]
 8008c9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ca6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008ca8:	f7fc f984 	bl	8004fb4 <HAL_GetTick>
 8008cac:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cae:	e008      	b.n	8008cc2 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cb0:	f7fc f980 	bl	8004fb4 <HAL_GetTick>
 8008cb4:	4602      	mov	r2, r0
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d901      	bls.n	8008cc2 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e031      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008cc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d0ef      	beq.n	8008cb0 <HAL_RCC_OscConfig+0x664>
 8008cd0:	e028      	b.n	8008d24 <HAL_RCC_OscConfig+0x6d8>
 8008cd2:	bf00      	nop
 8008cd4:	58000400 	.word	0x58000400
 8008cd8:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	2b0c      	cmp	r3, #12
 8008ce0:	d01e      	beq.n	8008d20 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ce2:	f7ff fc04 	bl	80084ee <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ce6:	f7fc f965 	bl	8004fb4 <HAL_GetTick>
 8008cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cec:	e008      	b.n	8008d00 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cee:	f7fc f961 	bl	8004fb4 <HAL_GetTick>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf6:	1ad3      	subs	r3, r2, r3
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d901      	bls.n	8008d00 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	e012      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008d00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1ef      	bne.n	8008cee <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008d0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d12:	68da      	ldr	r2, [r3, #12]
 8008d14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d18:	4b05      	ldr	r3, [pc, #20]	@ (8008d30 <HAL_RCC_OscConfig+0x6e4>)
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	60cb      	str	r3, [r1, #12]
 8008d1e:	e001      	b.n	8008d24 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e000      	b.n	8008d26 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3734      	adds	r7, #52	@ 0x34
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd90      	pop	{r4, r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	eefefffc 	.word	0xeefefffc

08008d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b084      	sub	sp, #16
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e12d      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008d48:	4b98      	ldr	r3, [pc, #608]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0307 	and.w	r3, r3, #7
 8008d50:	683a      	ldr	r2, [r7, #0]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	d91b      	bls.n	8008d8e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d56:	4b95      	ldr	r3, [pc, #596]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f023 0207 	bic.w	r2, r3, #7
 8008d5e:	4993      	ldr	r1, [pc, #588]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d66:	f7fc f925 	bl	8004fb4 <HAL_GetTick>
 8008d6a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d6c:	e008      	b.n	8008d80 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008d6e:	f7fc f921 	bl	8004fb4 <HAL_GetTick>
 8008d72:	4602      	mov	r2, r0
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	2b02      	cmp	r3, #2
 8008d7a:	d901      	bls.n	8008d80 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e111      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d80:	4b8a      	ldr	r3, [pc, #552]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d1ef      	bne.n	8008d6e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d016      	beq.n	8008dc8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	689b      	ldr	r3, [r3, #8]
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7ff fb13 	bl	80083ca <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008da4:	f7fc f906 	bl	8004fb4 <HAL_GetTick>
 8008da8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008daa:	e008      	b.n	8008dbe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008dac:	f7fc f902 	bl	8004fb4 <HAL_GetTick>
 8008db0:	4602      	mov	r2, r0
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	1ad3      	subs	r3, r2, r3
 8008db6:	2b02      	cmp	r3, #2
 8008db8:	d901      	bls.n	8008dbe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008dba:	2303      	movs	r3, #3
 8008dbc:	e0f2      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008dbe:	f7ff fbe8 	bl	8008592 <LL_RCC_IsActiveFlag_HPRE>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f1      	beq.n	8008dac <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d016      	beq.n	8008e02 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff fb0a 	bl	80083f2 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008dde:	f7fc f8e9 	bl	8004fb4 <HAL_GetTick>
 8008de2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008de4:	e008      	b.n	8008df8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008de6:	f7fc f8e5 	bl	8004fb4 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d901      	bls.n	8008df8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	e0d5      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008df8:	f7ff fbdd 	bl	80085b6 <LL_RCC_IsActiveFlag_C2HPRE>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d0f1      	beq.n	8008de6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d016      	beq.n	8008e3c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff fb03 	bl	800841e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e18:	f7fc f8cc 	bl	8004fb4 <HAL_GetTick>
 8008e1c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008e1e:	e008      	b.n	8008e32 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008e20:	f7fc f8c8 	bl	8004fb4 <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e0b8      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008e32:	f7ff fbd3 	bl	80085dc <LL_RCC_IsActiveFlag_SHDHPRE>
 8008e36:	4603      	mov	r3, r0
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0f1      	beq.n	8008e20 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f003 0304 	and.w	r3, r3, #4
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d016      	beq.n	8008e76 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff fafd 	bl	800844c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e52:	f7fc f8af 	bl	8004fb4 <HAL_GetTick>
 8008e56:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008e58:	e008      	b.n	8008e6c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008e5a:	f7fc f8ab 	bl	8004fb4 <HAL_GetTick>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	1ad3      	subs	r3, r2, r3
 8008e64:	2b02      	cmp	r3, #2
 8008e66:	d901      	bls.n	8008e6c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008e68:	2303      	movs	r3, #3
 8008e6a:	e09b      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008e6c:	f7ff fbc9 	bl	8008602 <LL_RCC_IsActiveFlag_PPRE1>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d0f1      	beq.n	8008e5a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	f003 0308 	and.w	r3, r3, #8
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d017      	beq.n	8008eb2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f7ff faf3 	bl	8008474 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008e8e:	f7fc f891 	bl	8004fb4 <HAL_GetTick>
 8008e92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008e94:	e008      	b.n	8008ea8 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008e96:	f7fc f88d 	bl	8004fb4 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d901      	bls.n	8008ea8 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	e07d      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008ea8:	f7ff fbbd 	bl	8008626 <LL_RCC_IsActiveFlag_PPRE2>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d0f1      	beq.n	8008e96 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f003 0301 	and.w	r3, r3, #1
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d043      	beq.n	8008f46 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	2b02      	cmp	r3, #2
 8008ec4:	d106      	bne.n	8008ed4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008ec6:	f7ff f893 	bl	8007ff0 <LL_RCC_HSE_IsReady>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d11e      	bne.n	8008f0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e067      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	2b03      	cmp	r3, #3
 8008eda:	d106      	bne.n	8008eea <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008edc:	f7ff fb16 	bl	800850c <LL_RCC_PLL_IsReady>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d113      	bne.n	8008f0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e05c      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d106      	bne.n	8008f00 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008ef2:	f7ff f9fb 	bl	80082ec <LL_RCC_MSI_IsReady>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d108      	bne.n	8008f0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	e051      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008f00:	f7ff f8a6 	bl	8008050 <LL_RCC_HSI_IsReady>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d101      	bne.n	8008f0e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e04a      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7ff fa39 	bl	800838a <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f18:	f7fc f84c 	bl	8004fb4 <HAL_GetTick>
 8008f1c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f1e:	e00a      	b.n	8008f36 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f20:	f7fc f848 	bl	8004fb4 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d901      	bls.n	8008f36 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e036      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f36:	f7ff fa3c 	bl	80083b2 <LL_RCC_GetSysClkSource>
 8008f3a:	4602      	mov	r2, r0
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d1ec      	bne.n	8008f20 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f46:	4b19      	ldr	r3, [pc, #100]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d21b      	bcs.n	8008f8c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f54:	4b15      	ldr	r3, [pc, #84]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f023 0207 	bic.w	r2, r3, #7
 8008f5c:	4913      	ldr	r1, [pc, #76]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	4313      	orrs	r3, r2
 8008f62:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008f64:	f7fc f826 	bl	8004fb4 <HAL_GetTick>
 8008f68:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f6a:	e008      	b.n	8008f7e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008f6c:	f7fc f822 	bl	8004fb4 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e012      	b.n	8008fa4 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8008fac <HAL_RCC_ClockConfig+0x278>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	683a      	ldr	r2, [r7, #0]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d1ef      	bne.n	8008f6c <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008f8c:	f000 f87e 	bl	800908c <HAL_RCC_GetHCLKFreq>
 8008f90:	4603      	mov	r3, r0
 8008f92:	4a07      	ldr	r2, [pc, #28]	@ (8008fb0 <HAL_RCC_ClockConfig+0x27c>)
 8008f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008f96:	f7fc f819 	bl	8004fcc <HAL_GetTickPrio>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f7fb ffbb 	bl	8004f18 <HAL_InitTick>
 8008fa2:	4603      	mov	r3, r0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	58004000 	.word	0x58004000
 8008fb0:	20000010 	.word	0x20000010

08008fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fb4:	b590      	push	{r4, r7, lr}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fba:	f7ff f9fa 	bl	80083b2 <LL_RCC_GetSysClkSource>
 8008fbe:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008fc6:	f7ff f9b6 	bl	8008336 <LL_RCC_MSI_GetRange>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	091b      	lsrs	r3, r3, #4
 8008fce:	f003 030f 	and.w	r3, r3, #15
 8008fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8009080 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	e04b      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2b04      	cmp	r3, #4
 8008fe0:	d102      	bne.n	8008fe8 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008fe2:	4b28      	ldr	r3, [pc, #160]	@ (8009084 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	e045      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b08      	cmp	r3, #8
 8008fec:	d10a      	bne.n	8009004 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008fee:	f7fe ffcf 	bl	8007f90 <LL_RCC_HSE_IsEnabledDiv2>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d102      	bne.n	8008ffe <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008ff8:	4b22      	ldr	r3, [pc, #136]	@ (8009084 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	e03a      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008ffe:	4b22      	ldr	r3, [pc, #136]	@ (8009088 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009000:	60fb      	str	r3, [r7, #12]
 8009002:	e037      	b.n	8009074 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009004:	f7ff fab9 	bl	800857a <LL_RCC_PLL_GetMainSource>
 8009008:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b02      	cmp	r3, #2
 800900e:	d003      	beq.n	8009018 <HAL_RCC_GetSysClockFreq+0x64>
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d003      	beq.n	800901e <HAL_RCC_GetSysClockFreq+0x6a>
 8009016:	e00d      	b.n	8009034 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009018:	4b1a      	ldr	r3, [pc, #104]	@ (8009084 <HAL_RCC_GetSysClockFreq+0xd0>)
 800901a:	60bb      	str	r3, [r7, #8]
        break;
 800901c:	e015      	b.n	800904a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800901e:	f7fe ffb7 	bl	8007f90 <LL_RCC_HSE_IsEnabledDiv2>
 8009022:	4603      	mov	r3, r0
 8009024:	2b01      	cmp	r3, #1
 8009026:	d102      	bne.n	800902e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009028:	4b16      	ldr	r3, [pc, #88]	@ (8009084 <HAL_RCC_GetSysClockFreq+0xd0>)
 800902a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800902c:	e00d      	b.n	800904a <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800902e:	4b16      	ldr	r3, [pc, #88]	@ (8009088 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009030:	60bb      	str	r3, [r7, #8]
        break;
 8009032:	e00a      	b.n	800904a <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009034:	f7ff f97f 	bl	8008336 <LL_RCC_MSI_GetRange>
 8009038:	4603      	mov	r3, r0
 800903a:	091b      	lsrs	r3, r3, #4
 800903c:	f003 030f 	and.w	r3, r3, #15
 8009040:	4a0f      	ldr	r2, [pc, #60]	@ (8009080 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009046:	60bb      	str	r3, [r7, #8]
        break;
 8009048:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800904a:	f7ff fa71 	bl	8008530 <LL_RCC_PLL_GetN>
 800904e:	4602      	mov	r2, r0
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	fb03 f402 	mul.w	r4, r3, r2
 8009056:	f7ff fa84 	bl	8008562 <LL_RCC_PLL_GetDivider>
 800905a:	4603      	mov	r3, r0
 800905c:	091b      	lsrs	r3, r3, #4
 800905e:	3301      	adds	r3, #1
 8009060:	fbb4 f4f3 	udiv	r4, r4, r3
 8009064:	f7ff fa71 	bl	800854a <LL_RCC_PLL_GetR>
 8009068:	4603      	mov	r3, r0
 800906a:	0f5b      	lsrs	r3, r3, #29
 800906c:	3301      	adds	r3, #1
 800906e:	fbb4 f3f3 	udiv	r3, r4, r3
 8009072:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8009074:	68fb      	ldr	r3, [r7, #12]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	bd90      	pop	{r4, r7, pc}
 800907e:	bf00      	nop
 8009080:	08019c3c 	.word	0x08019c3c
 8009084:	00f42400 	.word	0x00f42400
 8009088:	01e84800 	.word	0x01e84800

0800908c <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800908c:	b598      	push	{r3, r4, r7, lr}
 800908e:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009090:	f7ff ff90 	bl	8008fb4 <HAL_RCC_GetSysClockFreq>
 8009094:	4604      	mov	r4, r0
 8009096:	f7ff fa01 	bl	800849c <LL_RCC_GetAHBPrescaler>
 800909a:	4603      	mov	r3, r0
 800909c:	091b      	lsrs	r3, r3, #4
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	4a03      	ldr	r2, [pc, #12]	@ (80090b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80090a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090a8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	bd98      	pop	{r3, r4, r7, pc}
 80090b0:	08019bfc 	.word	0x08019bfc

080090b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80090b4:	b590      	push	{r4, r7, lr}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2bb0      	cmp	r3, #176	@ 0xb0
 80090c0:	d903      	bls.n	80090ca <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80090c2:	4b15      	ldr	r3, [pc, #84]	@ (8009118 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80090c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	e007      	b.n	80090da <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	091b      	lsrs	r3, r3, #4
 80090ce:	f003 030f 	and.w	r3, r3, #15
 80090d2:	4a11      	ldr	r2, [pc, #68]	@ (8009118 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80090d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090d8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80090da:	f7ff f9eb 	bl	80084b4 <LL_RCC_GetAHB4Prescaler>
 80090de:	4603      	mov	r3, r0
 80090e0:	091b      	lsrs	r3, r3, #4
 80090e2:	f003 030f 	and.w	r3, r3, #15
 80090e6:	4a0d      	ldr	r2, [pc, #52]	@ (800911c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80090e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	4a0a      	ldr	r2, [pc, #40]	@ (8009120 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80090f8:	fba2 2303 	umull	r2, r3, r2, r3
 80090fc:	0c9c      	lsrs	r4, r3, #18
 80090fe:	f7fe ff29 	bl	8007f54 <HAL_PWREx_GetVoltageRange>
 8009102:	4603      	mov	r3, r0
 8009104:	4619      	mov	r1, r3
 8009106:	4620      	mov	r0, r4
 8009108:	f000 f80c 	bl	8009124 <RCC_SetFlashLatency>
 800910c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800910e:	4618      	mov	r0, r3
 8009110:	3714      	adds	r7, #20
 8009112:	46bd      	mov	sp, r7
 8009114:	bd90      	pop	{r4, r7, pc}
 8009116:	bf00      	nop
 8009118:	08019c3c 	.word	0x08019c3c
 800911c:	08019bfc 	.word	0x08019bfc
 8009120:	431bde83 	.word	0x431bde83

08009124 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009124:	b590      	push	{r4, r7, lr}
 8009126:	b093      	sub	sp, #76	@ 0x4c
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800912e:	4b37      	ldr	r3, [pc, #220]	@ (800920c <RCC_SetFlashLatency+0xe8>)
 8009130:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8009134:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009136:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800913a:	4a35      	ldr	r2, [pc, #212]	@ (8009210 <RCC_SetFlashLatency+0xec>)
 800913c:	f107 031c 	add.w	r3, r7, #28
 8009140:	ca07      	ldmia	r2, {r0, r1, r2}
 8009142:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009146:	4b33      	ldr	r3, [pc, #204]	@ (8009214 <RCC_SetFlashLatency+0xf0>)
 8009148:	f107 040c 	add.w	r4, r7, #12
 800914c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800914e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009152:	2300      	movs	r3, #0
 8009154:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800915c:	d11a      	bne.n	8009194 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800915e:	2300      	movs	r3, #0
 8009160:	643b      	str	r3, [r7, #64]	@ 0x40
 8009162:	e013      	b.n	800918c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009166:	009b      	lsls	r3, r3, #2
 8009168:	3348      	adds	r3, #72	@ 0x48
 800916a:	443b      	add	r3, r7
 800916c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	429a      	cmp	r2, r3
 8009174:	d807      	bhi.n	8009186 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	3348      	adds	r3, #72	@ 0x48
 800917c:	443b      	add	r3, r7
 800917e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009182:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8009184:	e020      	b.n	80091c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009186:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009188:	3301      	adds	r3, #1
 800918a:	643b      	str	r3, [r7, #64]	@ 0x40
 800918c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800918e:	2b03      	cmp	r3, #3
 8009190:	d9e8      	bls.n	8009164 <RCC_SetFlashLatency+0x40>
 8009192:	e019      	b.n	80091c8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009194:	2300      	movs	r3, #0
 8009196:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009198:	e013      	b.n	80091c2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800919a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	3348      	adds	r3, #72	@ 0x48
 80091a0:	443b      	add	r3, r7
 80091a2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d807      	bhi.n	80091bc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80091ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091ae:	009b      	lsls	r3, r3, #2
 80091b0:	3348      	adds	r3, #72	@ 0x48
 80091b2:	443b      	add	r3, r7
 80091b4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80091b8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80091ba:	e005      	b.n	80091c8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80091bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091be:	3301      	adds	r3, #1
 80091c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80091c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d9e8      	bls.n	800919a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80091c8:	4b13      	ldr	r3, [pc, #76]	@ (8009218 <RCC_SetFlashLatency+0xf4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f023 0207 	bic.w	r2, r3, #7
 80091d0:	4911      	ldr	r1, [pc, #68]	@ (8009218 <RCC_SetFlashLatency+0xf4>)
 80091d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091d4:	4313      	orrs	r3, r2
 80091d6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80091d8:	f7fb feec 	bl	8004fb4 <HAL_GetTick>
 80091dc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80091de:	e008      	b.n	80091f2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80091e0:	f7fb fee8 	bl	8004fb4 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d901      	bls.n	80091f2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e007      	b.n	8009202 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80091f2:	4b09      	ldr	r3, [pc, #36]	@ (8009218 <RCC_SetFlashLatency+0xf4>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d1ef      	bne.n	80091e0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	374c      	adds	r7, #76	@ 0x4c
 8009206:	46bd      	mov	sp, r7
 8009208:	bd90      	pop	{r4, r7, pc}
 800920a:	bf00      	nop
 800920c:	0801829c 	.word	0x0801829c
 8009210:	080182ac 	.word	0x080182ac
 8009214:	080182b8 	.word	0x080182b8
 8009218:	58004000 	.word	0x58004000

0800921c <LL_RCC_LSE_IsEnabled>:
{
 800921c:	b480      	push	{r7}
 800921e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8009220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009228:	f003 0301 	and.w	r3, r3, #1
 800922c:	2b01      	cmp	r3, #1
 800922e:	d101      	bne.n	8009234 <LL_RCC_LSE_IsEnabled+0x18>
 8009230:	2301      	movs	r3, #1
 8009232:	e000      	b.n	8009236 <LL_RCC_LSE_IsEnabled+0x1a>
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <LL_RCC_LSE_IsReady>:
{
 8009240:	b480      	push	{r7}
 8009242:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009248:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924c:	f003 0302 	and.w	r3, r3, #2
 8009250:	2b02      	cmp	r3, #2
 8009252:	d101      	bne.n	8009258 <LL_RCC_LSE_IsReady+0x18>
 8009254:	2301      	movs	r3, #1
 8009256:	e000      	b.n	800925a <LL_RCC_LSE_IsReady+0x1a>
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <LL_RCC_SetRFWKPClockSource>:
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800926c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009270:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009274:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4313      	orrs	r3, r2
 8009280:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8009284:	bf00      	nop
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <LL_RCC_SetSMPSClockSource>:
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800929c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800929e:	f023 0203 	bic.w	r2, r3, #3
 80092a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80092ac:	bf00      	nop
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_RCC_SetSMPSPrescaler>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80092c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80092ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr

080092e0 <LL_RCC_SetUSARTClockSource>:
{
 80092e0:	b480      	push	{r7}
 80092e2:	b083      	sub	sp, #12
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80092e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092f0:	f023 0203 	bic.w	r2, r3, #3
 80092f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4313      	orrs	r3, r2
 80092fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009300:	bf00      	nop
 8009302:	370c      	adds	r7, #12
 8009304:	46bd      	mov	sp, r7
 8009306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930a:	4770      	bx	lr

0800930c <LL_RCC_SetLPUARTClockSource>:
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009320:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4313      	orrs	r3, r2
 8009328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <LL_RCC_SetI2CClockSource>:
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009344:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	091b      	lsrs	r3, r3, #4
 800934c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009350:	43db      	mvns	r3, r3
 8009352:	401a      	ands	r2, r3
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800935c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009360:	4313      	orrs	r3, r2
 8009362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009366:	bf00      	nop
 8009368:	370c      	adds	r7, #12
 800936a:	46bd      	mov	sp, r7
 800936c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009370:	4770      	bx	lr

08009372 <LL_RCC_SetLPTIMClockSource>:
{
 8009372:	b480      	push	{r7}
 8009374:	b083      	sub	sp, #12
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800937a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800937e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	0c1b      	lsrs	r3, r3, #16
 8009386:	041b      	lsls	r3, r3, #16
 8009388:	43db      	mvns	r3, r3
 800938a:	401a      	ands	r2, r3
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009394:	4313      	orrs	r3, r2
 8009396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <LL_RCC_SetSAIClockSource>:
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80093ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093b6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80093ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80093c6:	bf00      	nop
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <LL_RCC_SetRNGClockSource>:
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80093da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093e2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80093e6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80093f2:	bf00      	nop
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <LL_RCC_SetCLK48ClockSource>:
{
 80093fe:	b480      	push	{r7}
 8009400:	b083      	sub	sp, #12
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800940a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800940e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009412:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	4313      	orrs	r3, r2
 800941a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <LL_RCC_SetUSBClockSource>:
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f7ff ffe3 	bl	80093fe <LL_RCC_SetCLK48ClockSource>
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <LL_RCC_SetADCClockSource>:
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800944c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009450:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009454:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4313      	orrs	r3, r2
 800945c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009460:	bf00      	nop
 8009462:	370c      	adds	r7, #12
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr

0800946c <LL_RCC_SetRTCClockSource>:
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800947c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009480:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4313      	orrs	r3, r2
 8009488:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <LL_RCC_GetRTCClockSource>:
{
 8009498:	b480      	push	{r7}
 800949a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800949c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <LL_RCC_ForceBackupDomainReset>:
{
 80094b2:	b480      	push	{r7}
 80094b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80094b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80094ca:	bf00      	nop
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <LL_RCC_ReleaseBackupDomainReset>:
{
 80094d4:	b480      	push	{r7}
 80094d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80094d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80094e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80094ec:	bf00      	nop
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr

080094f6 <LL_RCC_PLLSAI1_Enable>:
{
 80094f6:	b480      	push	{r7}
 80094f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80094fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009504:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009508:	6013      	str	r3, [r2, #0]
}
 800950a:	bf00      	nop
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <LL_RCC_PLLSAI1_Disable>:
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009518:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009522:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009526:	6013      	str	r3, [r2, #0]
}
 8009528:	bf00      	nop
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr

08009532 <LL_RCC_PLLSAI1_IsReady>:
{
 8009532:	b480      	push	{r7}
 8009534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009540:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009544:	d101      	bne.n	800954a <LL_RCC_PLLSAI1_IsReady+0x18>
 8009546:	2301      	movs	r3, #1
 8009548:	e000      	b.n	800954c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <LL_APB1_GRP1_ForceReset>:
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800955e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009562:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009564:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4313      	orrs	r3, r2
 800956c:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <LL_APB1_GRP1_ReleaseReset>:
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
 8009580:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8009582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009586:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	43db      	mvns	r3, r3
 800958c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009590:	4013      	ands	r3, r2
 8009592:	638b      	str	r3, [r1, #56]	@ 0x38
}
 8009594:	bf00      	nop
 8009596:	370c      	adds	r7, #12
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr

080095a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b088      	sub	sp, #32
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80095a8:	2300      	movs	r3, #0
 80095aa:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80095ac:	2300      	movs	r3, #0
 80095ae:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d034      	beq.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095c0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80095c4:	d021      	beq.n	800960a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80095c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80095ca:	d81b      	bhi.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80095cc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095d0:	d01d      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80095d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80095d6:	d815      	bhi.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d00b      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80095dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80095e0:	d110      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80095e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80095ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80095f0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80095f2:	e00d      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	3304      	adds	r3, #4
 80095f8:	4618      	mov	r0, r3
 80095fa:	f000 f981 	bl	8009900 <RCCEx_PLLSAI1_ConfigNP>
 80095fe:	4603      	mov	r3, r0
 8009600:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009602:	e005      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	77fb      	strb	r3, [r7, #31]
        break;
 8009608:	e002      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800960a:	bf00      	nop
 800960c:	e000      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800960e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009610:	7ffb      	ldrb	r3, [r7, #31]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d105      	bne.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800961a:	4618      	mov	r0, r3
 800961c:	f7ff fec3 	bl	80093a6 <LL_RCC_SetSAIClockSource>
 8009620:	e001      	b.n	8009626 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009622:	7ffb      	ldrb	r3, [r7, #31]
 8009624:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800962e:	2b00      	cmp	r3, #0
 8009630:	d046      	beq.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009632:	f7ff ff31 	bl	8009498 <LL_RCC_GetRTCClockSource>
 8009636:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	69ba      	ldr	r2, [r7, #24]
 800963e:	429a      	cmp	r2, r3
 8009640:	d03c      	beq.n	80096bc <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009642:	f7fe fc77 	bl	8007f34 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d105      	bne.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009650:	4618      	mov	r0, r3
 8009652:	f7ff ff0b 	bl	800946c <LL_RCC_SetRTCClockSource>
 8009656:	e02e      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800965c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009660:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009662:	f7ff ff26 	bl	80094b2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009666:	f7ff ff35 	bl	80094d4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009674:	4313      	orrs	r3, r2
 8009676:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009678:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009682:	f7ff fdcb 	bl	800921c <LL_RCC_LSE_IsEnabled>
 8009686:	4603      	mov	r3, r0
 8009688:	2b01      	cmp	r3, #1
 800968a:	d114      	bne.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800968c:	f7fb fc92 	bl	8004fb4 <HAL_GetTick>
 8009690:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009692:	e00b      	b.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009694:	f7fb fc8e 	bl	8004fb4 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d902      	bls.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	77fb      	strb	r3, [r7, #31]
              break;
 80096aa:	e004      	b.n	80096b6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80096ac:	f7ff fdc8 	bl	8009240 <LL_RCC_LSE_IsReady>
 80096b0:	4603      	mov	r3, r0
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d1ee      	bne.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80096b6:	7ffb      	ldrb	r3, [r7, #31]
 80096b8:	77bb      	strb	r3, [r7, #30]
 80096ba:	e001      	b.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096bc:	7ffb      	ldrb	r3, [r7, #31]
 80096be:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f003 0301 	and.w	r3, r3, #1
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d004      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff fe05 	bl	80092e0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d004      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	69db      	ldr	r3, [r3, #28]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff fe10 	bl	800930c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fc:	4618      	mov	r0, r3
 80096fe:	f7ff fe38 	bl	8009372 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0320 	and.w	r3, r3, #32
 800970a:	2b00      	cmp	r3, #0
 800970c:	d004      	beq.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009712:	4618      	mov	r0, r3
 8009714:	f7ff fe2d 	bl	8009372 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f003 0304 	and.w	r3, r3, #4
 8009720:	2b00      	cmp	r3, #0
 8009722:	d004      	beq.n	800972e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a1b      	ldr	r3, [r3, #32]
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff fe05 	bl	8009338 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f003 0308 	and.w	r3, r3, #8
 8009736:	2b00      	cmp	r3, #0
 8009738:	d004      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff fdfa 	bl	8009338 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800974c:	2b00      	cmp	r3, #0
 800974e:	d022      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff fe68 	bl	800942a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800975e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009762:	d107      	bne.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009764:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800976e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009772:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009778:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800977c:	d10b      	bne.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	3304      	adds	r3, #4
 8009782:	4618      	mov	r0, r3
 8009784:	f000 f917 	bl	80099b6 <RCCEx_PLLSAI1_ConfigNQ>
 8009788:	4603      	mov	r3, r0
 800978a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800978c:	7ffb      	ldrb	r3, [r7, #31]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d001      	beq.n	8009796 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009792:	7ffb      	ldrb	r3, [r7, #31]
 8009794:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d02b      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097aa:	d008      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097b4:	d003      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d105      	bne.n	80097ca <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7ff fe05 	bl	80093d2 <LL_RCC_SetRNGClockSource>
 80097c8:	e00a      	b.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80097d2:	60fb      	str	r3, [r7, #12]
 80097d4:	2000      	movs	r0, #0
 80097d6:	f7ff fdfc 	bl	80093d2 <LL_RCC_SetRNGClockSource>
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f7ff fe0f 	bl	80093fe <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097e4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80097e8:	d107      	bne.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80097ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80097f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80097f8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009802:	2b00      	cmp	r3, #0
 8009804:	d022      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800980a:	4618      	mov	r0, r3
 800980c:	f7ff fe18 	bl	8009440 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009818:	d107      	bne.n	800982a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800981a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009828:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800982e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009832:	d10b      	bne.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	3304      	adds	r3, #4
 8009838:	4618      	mov	r0, r3
 800983a:	f000 f917 	bl	8009a6c <RCCEx_PLLSAI1_ConfigNR>
 800983e:	4603      	mov	r3, r0
 8009840:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009842:	7ffb      	ldrb	r3, [r7, #31]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d001      	beq.n	800984c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009848:	7ffb      	ldrb	r3, [r7, #31]
 800984a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d004      	beq.n	8009862 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff fd01 	bl	8009264 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800986a:	2b00      	cmp	r3, #0
 800986c:	d009      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff fd20 	bl	80092b8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800987c:	4618      	mov	r0, r3
 800987e:	f7ff fd07 	bl	8009290 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009882:	7fbb      	ldrb	r3, [r7, #30]
}
 8009884:	4618      	mov	r0, r3
 8009886:	3720      	adds	r7, #32
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b084      	sub	sp, #16
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8009894:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8009898:	f7ff fe5d 	bl	8009556 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 800989c:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80098a0:	f7ff fe6b 	bl	800957a <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	431a      	orrs	r2, r3
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	4313      	orrs	r3, r2
 80098be:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	041b      	lsls	r3, r3, #16
 80098c6:	68fa      	ldr	r2, [r7, #12]
 80098c8:	4313      	orrs	r3, r2
 80098ca:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80098cc:	4a0b      	ldr	r2, [pc, #44]	@ (80098fc <HAL_RCCEx_CRSConfig+0x70>)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80098d2:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <HAL_RCCEx_CRSConfig+0x70>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	695b      	ldr	r3, [r3, #20]
 80098de:	021b      	lsls	r3, r3, #8
 80098e0:	4906      	ldr	r1, [pc, #24]	@ (80098fc <HAL_RCCEx_CRSConfig+0x70>)
 80098e2:	4313      	orrs	r3, r2
 80098e4:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80098e6:	4b05      	ldr	r3, [pc, #20]	@ (80098fc <HAL_RCCEx_CRSConfig+0x70>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	4a04      	ldr	r2, [pc, #16]	@ (80098fc <HAL_RCCEx_CRSConfig+0x70>)
 80098ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80098f0:	6013      	str	r3, [r2, #0]
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	40006000 	.word	0x40006000

08009900 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800990c:	f7ff fe02 	bl	8009514 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009910:	f7fb fb50 	bl	8004fb4 <HAL_GetTick>
 8009914:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009916:	e009      	b.n	800992c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009918:	f7fb fb4c 	bl	8004fb4 <HAL_GetTick>
 800991c:	4602      	mov	r2, r0
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	1ad3      	subs	r3, r2, r3
 8009922:	2b02      	cmp	r3, #2
 8009924:	d902      	bls.n	800992c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	73fb      	strb	r3, [r7, #15]
      break;
 800992a:	e004      	b.n	8009936 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800992c:	f7ff fe01 	bl	8009532 <LL_RCC_PLLSAI1_IsReady>
 8009930:	4603      	mov	r3, r0
 8009932:	2b00      	cmp	r3, #0
 8009934:	d1f0      	bne.n	8009918 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d137      	bne.n	80099ac <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800993c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	021b      	lsls	r3, r3, #8
 800994c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009950:	4313      	orrs	r3, r2
 8009952:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009954:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009966:	4313      	orrs	r3, r2
 8009968:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800996a:	f7ff fdc4 	bl	80094f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800996e:	f7fb fb21 	bl	8004fb4 <HAL_GetTick>
 8009972:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009974:	e009      	b.n	800998a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009976:	f7fb fb1d 	bl	8004fb4 <HAL_GetTick>
 800997a:	4602      	mov	r2, r0
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	1ad3      	subs	r3, r2, r3
 8009980:	2b02      	cmp	r3, #2
 8009982:	d902      	bls.n	800998a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009984:	2303      	movs	r3, #3
 8009986:	73fb      	strb	r3, [r7, #15]
        break;
 8009988:	e004      	b.n	8009994 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800998a:	f7ff fdd2 	bl	8009532 <LL_RCC_PLLSAI1_IsReady>
 800998e:	4603      	mov	r3, r0
 8009990:	2b01      	cmp	r3, #1
 8009992:	d1f0      	bne.n	8009976 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d108      	bne.n	80099ac <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800999a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800999e:	691a      	ldr	r2, [r3, #16]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099a8:	4313      	orrs	r3, r2
 80099aa:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80099ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b084      	sub	sp, #16
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099be:	2300      	movs	r3, #0
 80099c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80099c2:	f7ff fda7 	bl	8009514 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80099c6:	f7fb faf5 	bl	8004fb4 <HAL_GetTick>
 80099ca:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80099cc:	e009      	b.n	80099e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099ce:	f7fb faf1 	bl	8004fb4 <HAL_GetTick>
 80099d2:	4602      	mov	r2, r0
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	1ad3      	subs	r3, r2, r3
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d902      	bls.n	80099e2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80099dc:	2303      	movs	r3, #3
 80099de:	73fb      	strb	r3, [r7, #15]
      break;
 80099e0:	e004      	b.n	80099ec <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80099e2:	f7ff fda6 	bl	8009532 <LL_RCC_PLLSAI1_IsReady>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d1f0      	bne.n	80099ce <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d137      	bne.n	8009a62 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80099f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	021b      	lsls	r3, r3, #8
 8009a02:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a06:	4313      	orrs	r3, r2
 8009a08:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009a20:	f7ff fd69 	bl	80094f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a24:	f7fb fac6 	bl	8004fb4 <HAL_GetTick>
 8009a28:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a2a:	e009      	b.n	8009a40 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a2c:	f7fb fac2 	bl	8004fb4 <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d902      	bls.n	8009a40 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	73fb      	strb	r3, [r7, #15]
        break;
 8009a3e:	e004      	b.n	8009a4a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a40:	f7ff fd77 	bl	8009532 <LL_RCC_PLLSAI1_IsReady>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d1f0      	bne.n	8009a2c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009a4a:	7bfb      	ldrb	r3, [r7, #15]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d108      	bne.n	8009a62 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009a50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a54:	691a      	ldr	r2, [r3, #16]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009a78:	f7ff fd4c 	bl	8009514 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009a7c:	f7fb fa9a 	bl	8004fb4 <HAL_GetTick>
 8009a80:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009a82:	e009      	b.n	8009a98 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a84:	f7fb fa96 	bl	8004fb4 <HAL_GetTick>
 8009a88:	4602      	mov	r2, r0
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d902      	bls.n	8009a98 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	73fb      	strb	r3, [r7, #15]
      break;
 8009a96:	e004      	b.n	8009aa2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009a98:	f7ff fd4b 	bl	8009532 <LL_RCC_PLLSAI1_IsReady>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1f0      	bne.n	8009a84 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009aa2:	7bfb      	ldrb	r3, [r7, #15]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d137      	bne.n	8009b18 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009aa8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009abc:	4313      	orrs	r3, r2
 8009abe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ac4:	691b      	ldr	r3, [r3, #16]
 8009ac6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009ad6:	f7ff fd0e 	bl	80094f6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ada:	f7fb fa6b 	bl	8004fb4 <HAL_GetTick>
 8009ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009ae0:	e009      	b.n	8009af6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ae2:	f7fb fa67 	bl	8004fb4 <HAL_GetTick>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	1ad3      	subs	r3, r2, r3
 8009aec:	2b02      	cmp	r3, #2
 8009aee:	d902      	bls.n	8009af6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	73fb      	strb	r3, [r7, #15]
        break;
 8009af4:	e004      	b.n	8009b00 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009af6:	f7ff fd1c 	bl	8009532 <LL_RCC_PLLSAI1_IsReady>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d1f0      	bne.n	8009ae2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009b00:	7bfb      	ldrb	r3, [r7, #15]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d108      	bne.n	8009b18 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b0a:	691a      	ldr	r2, [r3, #16]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009b14:	4313      	orrs	r3, r2
 8009b16:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b082      	sub	sp, #8
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d101      	bne.n	8009b34 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009b30:	2301      	movs	r3, #1
 8009b32:	e027      	b.n	8009b84 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	7a5b      	ldrb	r3, [r3, #9]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d105      	bne.n	8009b4a <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7fa feb7 	bl	80048b8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f023 0120 	bic.w	r1, r3, #32
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f042 0204 	orr.w	r2, r2, #4
 8009b74:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009b94:	2300      	movs	r3, #0
 8009b96:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	f003 0320 	and.w	r3, r3, #32
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d005      	beq.n	8009bb6 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	2210      	movs	r2, #16
 8009bae:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e009      	b.n	8009bca <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d004      	beq.n	8009bca <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2208      	movs	r2, #8
 8009bc4:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009bc6:	2301      	movs	r3, #1
 8009bc8:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d10b      	bne.n	8009be8 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f837 	bl	8009c4a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009be4:	605a      	str	r2, [r3, #4]

    return;
 8009be6:	e022      	b.n	8009c2e <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	f003 0301 	and.w	r3, r3, #1
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d01d      	beq.n	8009c2e <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f022 0208 	bic.w	r2, r2, #8
 8009c00:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	689a      	ldr	r2, [r3, #8]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	7a5b      	ldrb	r3, [r3, #9]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b04      	cmp	r3, #4
 8009c14:	d00b      	beq.n	8009c2e <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f803 	bl	8009c34 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
 8009c3c:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8009c3e:	bf00      	nop
 8009c40:	370c      	adds	r7, #12
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr

08009c4a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8009c4a:	b480      	push	{r7}
 8009c4c:	b083      	sub	sp, #12
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8009c52:	bf00      	nop
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
	...

08009c60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d101      	bne.n	8009c72 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e09f      	b.n	8009db2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7fa fe48 	bl	800491c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2202      	movs	r2, #2
 8009c90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009c94:	4b49      	ldr	r3, [pc, #292]	@ (8009dbc <HAL_RTC_Init+0x15c>)
 8009c96:	68db      	ldr	r3, [r3, #12]
 8009c98:	f003 0310 	and.w	r3, r3, #16
 8009c9c:	2b10      	cmp	r3, #16
 8009c9e:	d07e      	beq.n	8009d9e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	22ca      	movs	r2, #202	@ 0xca
 8009ca6:	625a      	str	r2, [r3, #36]	@ 0x24
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2253      	movs	r2, #83	@ 0x53
 8009cae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f8ab 	bl	8009e0c <RTC_EnterInitMode>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00a      	beq.n	8009cd2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	22ff      	movs	r2, #255	@ 0xff
 8009cc2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2204      	movs	r2, #4
 8009cc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	73fb      	strb	r3, [r7, #15]
 8009cd0:	e067      	b.n	8009da2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689b      	ldr	r3, [r3, #8]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	6812      	ldr	r2, [r2, #0]
 8009cdc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009ce0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ce4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6899      	ldr	r1, [r3, #8]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685a      	ldr	r2, [r3, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	431a      	orrs	r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	431a      	orrs	r2, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	68d2      	ldr	r2, [r2, #12]
 8009d0c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	6919      	ldr	r1, [r3, #16]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689b      	ldr	r3, [r3, #8]
 8009d18:	041a      	lsls	r2, r3, #16
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	68da      	ldr	r2, [r3, #12]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d30:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f022 0203 	bic.w	r2, r2, #3
 8009d40:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	695b      	ldr	r3, [r3, #20]
 8009d50:	431a      	orrs	r2, r3
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f003 0320 	and.w	r3, r3, #32
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d113      	bne.n	8009d90 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f829 	bl	8009dc0 <HAL_RTC_WaitForSynchro>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00d      	beq.n	8009d90 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	22ff      	movs	r2, #255	@ 0xff
 8009d7a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2204      	movs	r2, #4
 8009d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	e010      	b.n	8009db2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	22ff      	movs	r2, #255	@ 0xff
 8009d96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73fb      	strb	r3, [r7, #15]
 8009d9c:	e001      	b.n	8009da2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009da2:	7bfb      	ldrb	r3, [r7, #15]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d103      	bne.n	8009db0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3710      	adds	r7, #16
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	40002800 	.word	0x40002800

08009dc0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68da      	ldr	r2, [r3, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009dd6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009dd8:	f7fb f8ec 	bl	8004fb4 <HAL_GetTick>
 8009ddc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009dde:	e009      	b.n	8009df4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009de0:	f7fb f8e8 	bl	8004fb4 <HAL_GetTick>
 8009de4:	4602      	mov	r2, r0
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	1ad3      	subs	r3, r2, r3
 8009dea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dee:	d901      	bls.n	8009df4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009df0:	2303      	movs	r3, #3
 8009df2:	e007      	b.n	8009e04 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0ee      	beq.n	8009de0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68db      	ldr	r3, [r3, #12]
 8009e1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d119      	bne.n	8009e56 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f04f 32ff 	mov.w	r2, #4294967295
 8009e2a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009e2c:	f7fb f8c2 	bl	8004fb4 <HAL_GetTick>
 8009e30:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e32:	e009      	b.n	8009e48 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009e34:	f7fb f8be 	bl	8004fb4 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e42:	d901      	bls.n	8009e48 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e007      	b.n	8009e58 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68db      	ldr	r3, [r3, #12]
 8009e4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0ee      	beq.n	8009e34 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009e56:	2300      	movs	r3, #0
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3710      	adds	r7, #16
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d101      	bne.n	8009e7a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009e76:	2302      	movs	r3, #2
 8009e78:	e0a8      	b.n	8009fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2202      	movs	r2, #2
 8009e86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	22ca      	movs	r2, #202	@ 0xca
 8009e90:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2253      	movs	r2, #83	@ 0x53
 8009e98:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d020      	beq.n	8009eea <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009ea8:	f7fb f884 	bl	8004fb4 <HAL_GetTick>
 8009eac:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009eae:	e015      	b.n	8009edc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009eb0:	f7fb f880 	bl	8004fb4 <HAL_GetTick>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	1ad3      	subs	r3, r2, r3
 8009eba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009ebe:	d90d      	bls.n	8009edc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	22ff      	movs	r2, #255	@ 0xff
 8009ec6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2203      	movs	r2, #3
 8009ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009ed8:	2303      	movs	r3, #3
 8009eda:	e077      	b.n	8009fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	68db      	ldr	r3, [r3, #12]
 8009ee2:	f003 0304 	and.w	r3, r3, #4
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1e2      	bne.n	8009eb0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	689a      	ldr	r2, [r3, #8]
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ef8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	b2da      	uxtb	r2, r3
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009f0a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009f0c:	f7fb f852 	bl	8004fb4 <HAL_GetTick>
 8009f10:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009f12:	e015      	b.n	8009f40 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009f14:	f7fb f84e 	bl	8004fb4 <HAL_GetTick>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	1ad3      	subs	r3, r2, r3
 8009f1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009f22:	d90d      	bls.n	8009f40 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	22ff      	movs	r2, #255	@ 0xff
 8009f2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2203      	movs	r2, #3
 8009f30:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	e045      	b.n	8009fcc <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	f003 0304 	and.w	r3, r3, #4
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0e2      	beq.n	8009f14 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	68ba      	ldr	r2, [r7, #8]
 8009f54:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f022 0207 	bic.w	r2, r2, #7
 8009f64:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	6899      	ldr	r1, [r3, #8]
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009f76:	4b17      	ldr	r3, [pc, #92]	@ (8009fd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f7c:	4a15      	ldr	r2, [pc, #84]	@ (8009fd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009f7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f82:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009f86:	4b13      	ldr	r3, [pc, #76]	@ (8009fd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a12      	ldr	r2, [pc, #72]	@ (8009fd4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009f8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009f90:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689a      	ldr	r2, [r3, #8]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fa0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009fb0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	22ff      	movs	r2, #255	@ 0xff
 8009fb8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2201      	movs	r2, #1
 8009fbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3718      	adds	r7, #24
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}
 8009fd4:	58000800 	.word	0x58000800

08009fd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d101      	bne.n	8009fea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e095      	b.n	800a116 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d108      	bne.n	800a004 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ffa:	d009      	beq.n	800a010 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2200      	movs	r2, #0
 800a000:	61da      	str	r2, [r3, #28]
 800a002:	e005      	b.n	800a010 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2200      	movs	r2, #0
 800a014:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d106      	bne.n	800a030 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7fa fcaa 	bl	8004984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2202      	movs	r2, #2
 800a034:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681a      	ldr	r2, [r3, #0]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a046:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68db      	ldr	r3, [r3, #12]
 800a04c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a050:	d902      	bls.n	800a058 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
 800a056:	e002      	b.n	800a05e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a058:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a05c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a066:	d007      	beq.n	800a078 <HAL_SPI_Init+0xa0>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a070:	d002      	beq.n	800a078 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2200      	movs	r2, #0
 800a076:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a088:	431a      	orrs	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 0302 	and.w	r3, r3, #2
 800a092:	431a      	orrs	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	f003 0301 	and.w	r3, r3, #1
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0a6:	431a      	orrs	r2, r3
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	69db      	ldr	r3, [r3, #28]
 800a0ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a1b      	ldr	r3, [r3, #32]
 800a0b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a0ba:	ea42 0103 	orr.w	r1, r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0c2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	699b      	ldr	r3, [r3, #24]
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	f003 0204 	and.w	r2, r3, #4
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0dc:	f003 0310 	and.w	r3, r3, #16
 800a0e0:	431a      	orrs	r2, r3
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0e6:	f003 0308 	and.w	r3, r3, #8
 800a0ea:	431a      	orrs	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a0f4:	ea42 0103 	orr.w	r1, r2, r3
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	430a      	orrs	r2, r1
 800a104:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b088      	sub	sp, #32
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	603b      	str	r3, [r7, #0]
 800a12a:	4613      	mov	r3, r2
 800a12c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a12e:	f7fa ff41 	bl	8004fb4 <HAL_GetTick>
 800a132:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800a134:	88fb      	ldrh	r3, [r7, #6]
 800a136:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	2b01      	cmp	r3, #1
 800a142:	d001      	beq.n	800a148 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800a144:	2302      	movs	r3, #2
 800a146:	e15c      	b.n	800a402 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <HAL_SPI_Transmit+0x36>
 800a14e:	88fb      	ldrh	r3, [r7, #6]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800a154:	2301      	movs	r3, #1
 800a156:	e154      	b.n	800a402 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d101      	bne.n	800a166 <HAL_SPI_Transmit+0x48>
 800a162:	2302      	movs	r3, #2
 800a164:	e14d      	b.n	800a402 <HAL_SPI_Transmit+0x2e4>
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2203      	movs	r2, #3
 800a172:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2200      	movs	r2, #0
 800a17a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	68ba      	ldr	r2, [r7, #8]
 800a180:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	88fa      	ldrh	r2, [r7, #6]
 800a186:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	88fa      	ldrh	r2, [r7, #6]
 800a18c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2200      	movs	r2, #0
 800a192:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2200      	movs	r2, #0
 800a198:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1b8:	d10f      	bne.n	800a1da <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a1d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e4:	2b40      	cmp	r3, #64	@ 0x40
 800a1e6:	d007      	beq.n	800a1f8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a200:	d952      	bls.n	800a2a8 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d002      	beq.n	800a210 <HAL_SPI_Transmit+0xf2>
 800a20a:	8b7b      	ldrh	r3, [r7, #26]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d145      	bne.n	800a29c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a214:	881a      	ldrh	r2, [r3, #0]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a220:	1c9a      	adds	r2, r3, #2
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	3b01      	subs	r3, #1
 800a22e:	b29a      	uxth	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a234:	e032      	b.n	800a29c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b02      	cmp	r3, #2
 800a242:	d112      	bne.n	800a26a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a248:	881a      	ldrh	r2, [r3, #0]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a254:	1c9a      	adds	r2, r3, #2
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a25e:	b29b      	uxth	r3, r3
 800a260:	3b01      	subs	r3, #1
 800a262:	b29a      	uxth	r2, r3
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a268:	e018      	b.n	800a29c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a26a:	f7fa fea3 	bl	8004fb4 <HAL_GetTick>
 800a26e:	4602      	mov	r2, r0
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	1ad3      	subs	r3, r2, r3
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	429a      	cmp	r2, r3
 800a278:	d803      	bhi.n	800a282 <HAL_SPI_Transmit+0x164>
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a280:	d102      	bne.n	800a288 <HAL_SPI_Transmit+0x16a>
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d109      	bne.n	800a29c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e0b2      	b.n	800a402 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1c7      	bne.n	800a236 <HAL_SPI_Transmit+0x118>
 800a2a6:	e083      	b.n	800a3b0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <HAL_SPI_Transmit+0x198>
 800a2b0:	8b7b      	ldrh	r3, [r7, #26]
 800a2b2:	2b01      	cmp	r3, #1
 800a2b4:	d177      	bne.n	800a3a6 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d912      	bls.n	800a2e6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2c4:	881a      	ldrh	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d0:	1c9a      	adds	r2, r3, #2
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	3b02      	subs	r3, #2
 800a2de:	b29a      	uxth	r2, r3
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a2e4:	e05f      	b.n	800a3a6 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	330c      	adds	r3, #12
 800a2f0:	7812      	ldrb	r2, [r2, #0]
 800a2f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2f8:	1c5a      	adds	r2, r3, #1
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a302:	b29b      	uxth	r3, r3
 800a304:	3b01      	subs	r3, #1
 800a306:	b29a      	uxth	r2, r3
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a30c:	e04b      	b.n	800a3a6 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	f003 0302 	and.w	r3, r3, #2
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d12b      	bne.n	800a374 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a320:	b29b      	uxth	r3, r3
 800a322:	2b01      	cmp	r3, #1
 800a324:	d912      	bls.n	800a34c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32a:	881a      	ldrh	r2, [r3, #0]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a336:	1c9a      	adds	r2, r3, #2
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a340:	b29b      	uxth	r3, r3
 800a342:	3b02      	subs	r3, #2
 800a344:	b29a      	uxth	r2, r3
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a34a:	e02c      	b.n	800a3a6 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	330c      	adds	r3, #12
 800a356:	7812      	ldrb	r2, [r2, #0]
 800a358:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a368:	b29b      	uxth	r3, r3
 800a36a:	3b01      	subs	r3, #1
 800a36c:	b29a      	uxth	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a372:	e018      	b.n	800a3a6 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a374:	f7fa fe1e 	bl	8004fb4 <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	69fb      	ldr	r3, [r7, #28]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	429a      	cmp	r2, r3
 800a382:	d803      	bhi.n	800a38c <HAL_SPI_Transmit+0x26e>
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38a:	d102      	bne.n	800a392 <HAL_SPI_Transmit+0x274>
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d109      	bne.n	800a3a6 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	2201      	movs	r2, #1
 800a396:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2200      	movs	r2, #0
 800a39e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e02d      	b.n	800a402 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3aa:	b29b      	uxth	r3, r3
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1ae      	bne.n	800a30e <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3b0:	69fa      	ldr	r2, [r7, #28]
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fb65 	bl	800aa84 <SPI_EndRxTxTransaction>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d002      	beq.n	800a3c6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	2220      	movs	r2, #32
 800a3c4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d10a      	bne.n	800a3e4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	617b      	str	r3, [r7, #20]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	617b      	str	r3, [r7, #20]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	689b      	ldr	r3, [r3, #8]
 800a3e0:	617b      	str	r3, [r7, #20]
 800a3e2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e000      	b.n	800a402 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800a400:	2300      	movs	r3, #0
  }
}
 800a402:	4618      	mov	r0, r3
 800a404:	3720      	adds	r7, #32
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b08a      	sub	sp, #40	@ 0x28
 800a40e:	af00      	add	r7, sp, #0
 800a410:	60f8      	str	r0, [r7, #12]
 800a412:	60b9      	str	r1, [r7, #8]
 800a414:	607a      	str	r2, [r7, #4]
 800a416:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a418:	2301      	movs	r3, #1
 800a41a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a41c:	f7fa fdca 	bl	8004fb4 <HAL_GetTick>
 800a420:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a428:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800a430:	887b      	ldrh	r3, [r7, #2]
 800a432:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800a434:	887b      	ldrh	r3, [r7, #2]
 800a436:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a438:	7ffb      	ldrb	r3, [r7, #31]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d00c      	beq.n	800a458 <HAL_SPI_TransmitReceive+0x4e>
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a444:	d106      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d102      	bne.n	800a454 <HAL_SPI_TransmitReceive+0x4a>
 800a44e:	7ffb      	ldrb	r3, [r7, #31]
 800a450:	2b04      	cmp	r3, #4
 800a452:	d001      	beq.n	800a458 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800a454:	2302      	movs	r3, #2
 800a456:	e1f3      	b.n	800a840 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d005      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x60>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d002      	beq.n	800a46a <HAL_SPI_TransmitReceive+0x60>
 800a464:	887b      	ldrh	r3, [r7, #2]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d101      	bne.n	800a46e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800a46a:	2301      	movs	r3, #1
 800a46c:	e1e8      	b.n	800a840 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a474:	2b01      	cmp	r3, #1
 800a476:	d101      	bne.n	800a47c <HAL_SPI_TransmitReceive+0x72>
 800a478:	2302      	movs	r3, #2
 800a47a:	e1e1      	b.n	800a840 <HAL_SPI_TransmitReceive+0x436>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	d003      	beq.n	800a498 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2205      	movs	r2, #5
 800a494:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	887a      	ldrh	r2, [r7, #2]
 800a4a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	887a      	ldrh	r2, [r7, #2]
 800a4b0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	887a      	ldrh	r2, [r7, #2]
 800a4be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	887a      	ldrh	r2, [r7, #2]
 800a4c4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	68db      	ldr	r3, [r3, #12]
 800a4d6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a4da:	d802      	bhi.n	800a4e2 <HAL_SPI_TransmitReceive+0xd8>
 800a4dc:	8abb      	ldrh	r3, [r7, #20]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d908      	bls.n	800a4f4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	685a      	ldr	r2, [r3, #4]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a4f0:	605a      	str	r2, [r3, #4]
 800a4f2:	e007      	b.n	800a504 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	685a      	ldr	r2, [r3, #4]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a502:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a50e:	2b40      	cmp	r3, #64	@ 0x40
 800a510:	d007      	beq.n	800a522 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	68db      	ldr	r3, [r3, #12]
 800a526:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a52a:	f240 8083 	bls.w	800a634 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d002      	beq.n	800a53c <HAL_SPI_TransmitReceive+0x132>
 800a536:	8afb      	ldrh	r3, [r7, #22]
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d16f      	bne.n	800a61c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a540:	881a      	ldrh	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a54c:	1c9a      	adds	r2, r3, #2
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a556:	b29b      	uxth	r3, r3
 800a558:	3b01      	subs	r3, #1
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a560:	e05c      	b.n	800a61c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	689b      	ldr	r3, [r3, #8]
 800a568:	f003 0302 	and.w	r3, r3, #2
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d11b      	bne.n	800a5a8 <HAL_SPI_TransmitReceive+0x19e>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d016      	beq.n	800a5a8 <HAL_SPI_TransmitReceive+0x19e>
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d113      	bne.n	800a5a8 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a584:	881a      	ldrh	r2, [r3, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a590:	1c9a      	adds	r2, r3, #2
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	3b01      	subs	r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	f003 0301 	and.w	r3, r3, #1
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d11c      	bne.n	800a5f0 <HAL_SPI_TransmitReceive+0x1e6>
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d016      	beq.n	800a5f0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68da      	ldr	r2, [r3, #12]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5cc:	b292      	uxth	r2, r2
 800a5ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d4:	1c9a      	adds	r2, r3, #2
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	3b01      	subs	r3, #1
 800a5e4:	b29a      	uxth	r2, r3
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a5f0:	f7fa fce0 	bl	8004fb4 <HAL_GetTick>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d80d      	bhi.n	800a61c <HAL_SPI_TransmitReceive+0x212>
 800a600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a602:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a606:	d009      	beq.n	800a61c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	e111      	b.n	800a840 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a620:	b29b      	uxth	r3, r3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d19d      	bne.n	800a562 <HAL_SPI_TransmitReceive+0x158>
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a62c:	b29b      	uxth	r3, r3
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d197      	bne.n	800a562 <HAL_SPI_TransmitReceive+0x158>
 800a632:	e0e5      	b.n	800a800 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d003      	beq.n	800a644 <HAL_SPI_TransmitReceive+0x23a>
 800a63c:	8afb      	ldrh	r3, [r7, #22]
 800a63e:	2b01      	cmp	r3, #1
 800a640:	f040 80d1 	bne.w	800a7e6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d912      	bls.n	800a674 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a652:	881a      	ldrh	r2, [r3, #0]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a65e:	1c9a      	adds	r2, r3, #2
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a668:	b29b      	uxth	r3, r3
 800a66a:	3b02      	subs	r3, #2
 800a66c:	b29a      	uxth	r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a672:	e0b8      	b.n	800a7e6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	330c      	adds	r3, #12
 800a67e:	7812      	ldrb	r2, [r2, #0]
 800a680:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a690:	b29b      	uxth	r3, r3
 800a692:	3b01      	subs	r3, #1
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a69a:	e0a4      	b.n	800a7e6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f003 0302 	and.w	r3, r3, #2
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d134      	bne.n	800a714 <HAL_SPI_TransmitReceive+0x30a>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d02f      	beq.n	800a714 <HAL_SPI_TransmitReceive+0x30a>
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d12c      	bne.n	800a714 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d912      	bls.n	800a6ea <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c8:	881a      	ldrh	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d4:	1c9a      	adds	r2, r3, #2
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	3b02      	subs	r3, #2
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a6e8:	e012      	b.n	800a710 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	330c      	adds	r3, #12
 800a6f4:	7812      	ldrb	r2, [r2, #0]
 800a6f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6fc:	1c5a      	adds	r2, r3, #1
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a706:	b29b      	uxth	r3, r3
 800a708:	3b01      	subs	r3, #1
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a710:	2300      	movs	r3, #0
 800a712:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	689b      	ldr	r3, [r3, #8]
 800a71a:	f003 0301 	and.w	r3, r3, #1
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d148      	bne.n	800a7b4 <HAL_SPI_TransmitReceive+0x3aa>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a728:	b29b      	uxth	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d042      	beq.n	800a7b4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a734:	b29b      	uxth	r3, r3
 800a736:	2b01      	cmp	r3, #1
 800a738:	d923      	bls.n	800a782 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68da      	ldr	r2, [r3, #12]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a744:	b292      	uxth	r2, r2
 800a746:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a74c:	1c9a      	adds	r2, r3, #2
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a758:	b29b      	uxth	r3, r3
 800a75a:	3b02      	subs	r3, #2
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	2b01      	cmp	r3, #1
 800a76e:	d81f      	bhi.n	800a7b0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a77e:	605a      	str	r2, [r3, #4]
 800a780:	e016      	b.n	800a7b0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f103 020c 	add.w	r2, r3, #12
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a78e:	7812      	ldrb	r2, [r2, #0]
 800a790:	b2d2      	uxtb	r2, r2
 800a792:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a798:	1c5a      	adds	r2, r3, #1
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	3b01      	subs	r3, #1
 800a7a8:	b29a      	uxth	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a7b4:	f7fa fbfe 	bl	8004fb4 <HAL_GetTick>
 800a7b8:	4602      	mov	r2, r0
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d803      	bhi.n	800a7cc <HAL_SPI_TransmitReceive+0x3c2>
 800a7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ca:	d102      	bne.n	800a7d2 <HAL_SPI_TransmitReceive+0x3c8>
 800a7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800a7e2:	2303      	movs	r3, #3
 800a7e4:	e02c      	b.n	800a840 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f47f af55 	bne.w	800a69c <HAL_SPI_TransmitReceive+0x292>
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f47f af4e 	bne.w	800a69c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a800:	6a3a      	ldr	r2, [r7, #32]
 800a802:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a804:	68f8      	ldr	r0, [r7, #12]
 800a806:	f000 f93d 	bl	800aa84 <SPI_EndRxTxTransaction>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2220      	movs	r2, #32
 800a814:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2200      	movs	r2, #0
 800a81a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800a81e:	2301      	movs	r3, #1
 800a820:	e00e      	b.n	800a840 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a836:	2b00      	cmp	r3, #0
 800a838:	d001      	beq.n	800a83e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e000      	b.n	800a840 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800a83e:	2300      	movs	r3, #0
  }
}
 800a840:	4618      	mov	r0, r3
 800a842:	3728      	adds	r7, #40	@ 0x28
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b088      	sub	sp, #32
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	603b      	str	r3, [r7, #0]
 800a854:	4613      	mov	r3, r2
 800a856:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a858:	f7fa fbac 	bl	8004fb4 <HAL_GetTick>
 800a85c:	4602      	mov	r2, r0
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	1a9b      	subs	r3, r3, r2
 800a862:	683a      	ldr	r2, [r7, #0]
 800a864:	4413      	add	r3, r2
 800a866:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a868:	f7fa fba4 	bl	8004fb4 <HAL_GetTick>
 800a86c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a86e:	4b39      	ldr	r3, [pc, #228]	@ (800a954 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	015b      	lsls	r3, r3, #5
 800a874:	0d1b      	lsrs	r3, r3, #20
 800a876:	69fa      	ldr	r2, [r7, #28]
 800a878:	fb02 f303 	mul.w	r3, r2, r3
 800a87c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a87e:	e054      	b.n	800a92a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a886:	d050      	beq.n	800a92a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a888:	f7fa fb94 	bl	8004fb4 <HAL_GetTick>
 800a88c:	4602      	mov	r2, r0
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	429a      	cmp	r2, r3
 800a896:	d902      	bls.n	800a89e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d13d      	bne.n	800a91a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	685b      	ldr	r3, [r3, #4]
 800a8b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a8b6:	d111      	bne.n	800a8dc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8c0:	d004      	beq.n	800a8cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a8ca:	d107      	bne.n	800a8dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a8da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8e4:	d10f      	bne.n	800a906 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a8f4:	601a      	str	r2, [r3, #0]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a904:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e017      	b.n	800a94a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a920:	2300      	movs	r3, #0
 800a922:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	3b01      	subs	r3, #1
 800a928:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	4013      	ands	r3, r2
 800a934:	68ba      	ldr	r2, [r7, #8]
 800a936:	429a      	cmp	r2, r3
 800a938:	bf0c      	ite	eq
 800a93a:	2301      	moveq	r3, #1
 800a93c:	2300      	movne	r3, #0
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	461a      	mov	r2, r3
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	429a      	cmp	r2, r3
 800a946:	d19b      	bne.n	800a880 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3720      	adds	r7, #32
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20000010 	.word	0x20000010

0800a958 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b08a      	sub	sp, #40	@ 0x28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	60b9      	str	r1, [r7, #8]
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a966:	2300      	movs	r3, #0
 800a968:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a96a:	f7fa fb23 	bl	8004fb4 <HAL_GetTick>
 800a96e:	4602      	mov	r2, r0
 800a970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	4413      	add	r3, r2
 800a978:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a97a:	f7fa fb1b 	bl	8004fb4 <HAL_GetTick>
 800a97e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	330c      	adds	r3, #12
 800a986:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a988:	4b3d      	ldr	r3, [pc, #244]	@ (800aa80 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	4613      	mov	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4413      	add	r3, r2
 800a992:	00da      	lsls	r2, r3, #3
 800a994:	1ad3      	subs	r3, r2, r3
 800a996:	0d1b      	lsrs	r3, r3, #20
 800a998:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a99a:	fb02 f303 	mul.w	r3, r2, r3
 800a99e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a9a0:	e060      	b.n	800aa64 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a9a8:	d107      	bne.n	800a9ba <SPI_WaitFifoStateUntilTimeout+0x62>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d104      	bne.n	800a9ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a9b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9c0:	d050      	beq.n	800aa64 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a9c2:	f7fa faf7 	bl	8004fb4 <HAL_GetTick>
 800a9c6:	4602      	mov	r2, r0
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	1ad3      	subs	r3, r2, r3
 800a9cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d902      	bls.n	800a9d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a9d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d13d      	bne.n	800aa54 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a9e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a9f0:	d111      	bne.n	800aa16 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9fa:	d004      	beq.n	800aa06 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	689b      	ldr	r3, [r3, #8]
 800aa00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aa04:	d107      	bne.n	800aa16 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa14:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa1e:	d10f      	bne.n	800aa40 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aa3e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800aa50:	2303      	movs	r3, #3
 800aa52:	e010      	b.n	800aa76 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800aa5e:	69bb      	ldr	r3, [r7, #24]
 800aa60:	3b01      	subs	r3, #1
 800aa62:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	689a      	ldr	r2, [r3, #8]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	687a      	ldr	r2, [r7, #4]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d196      	bne.n	800a9a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3728      	adds	r7, #40	@ 0x28
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000010 	.word	0x20000010

0800aa84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b086      	sub	sp, #24
 800aa88:	af02      	add	r7, sp, #8
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	9300      	str	r3, [sp, #0]
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2200      	movs	r2, #0
 800aa98:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800aa9c:	68f8      	ldr	r0, [r7, #12]
 800aa9e:	f7ff ff5b 	bl	800a958 <SPI_WaitFifoStateUntilTimeout>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d007      	beq.n	800aab8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aaac:	f043 0220 	orr.w	r2, r3, #32
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aab4:	2303      	movs	r3, #3
 800aab6:	e027      	b.n	800ab08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	9300      	str	r3, [sp, #0]
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	2180      	movs	r1, #128	@ 0x80
 800aac2:	68f8      	ldr	r0, [r7, #12]
 800aac4:	f7ff fec0 	bl	800a848 <SPI_WaitFlagStateUntilTimeout>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d007      	beq.n	800aade <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aad2:	f043 0220 	orr.w	r2, r3, #32
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aada:	2303      	movs	r3, #3
 800aadc:	e014      	b.n	800ab08 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	2200      	movs	r2, #0
 800aae6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	f7ff ff34 	bl	800a958 <SPI_WaitFifoStateUntilTimeout>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d007      	beq.n	800ab06 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aafa:	f043 0220 	orr.w	r2, r3, #32
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e000      	b.n	800ab08 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3710      	adds	r7, #16
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}

0800ab10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b082      	sub	sp, #8
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d101      	bne.n	800ab22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e049      	b.n	800abb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d106      	bne.n	800ab3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7f9 ff54 	bl	80049e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2202      	movs	r2, #2
 800ab40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f000 fa7c 	bl	800b04c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2201      	movs	r2, #1
 800ab58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2201      	movs	r2, #1
 800ab60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	2201      	movs	r2, #1
 800ab70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2201      	movs	r2, #1
 800ab78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2201      	movs	r2, #1
 800ab80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2201      	movs	r2, #1
 800ab90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2201      	movs	r2, #1
 800aba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2201      	movs	r2, #1
 800aba8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
	...

0800abc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b085      	sub	sp, #20
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abce:	b2db      	uxtb	r3, r3
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d001      	beq.n	800abd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800abd4:	2301      	movs	r3, #1
 800abd6:	e036      	b.n	800ac46 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2202      	movs	r2, #2
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f042 0201 	orr.w	r2, r2, #1
 800abee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	4a17      	ldr	r2, [pc, #92]	@ (800ac54 <HAL_TIM_Base_Start_IT+0x94>)
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d004      	beq.n	800ac04 <HAL_TIM_Base_Start_IT+0x44>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac02:	d115      	bne.n	800ac30 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	4b13      	ldr	r3, [pc, #76]	@ (800ac58 <HAL_TIM_Base_Start_IT+0x98>)
 800ac0c:	4013      	ands	r3, r2
 800ac0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	2b06      	cmp	r3, #6
 800ac14:	d015      	beq.n	800ac42 <HAL_TIM_Base_Start_IT+0x82>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac1c:	d011      	beq.n	800ac42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681a      	ldr	r2, [r3, #0]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f042 0201 	orr.w	r2, r2, #1
 800ac2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac2e:	e008      	b.n	800ac42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f042 0201 	orr.w	r2, r2, #1
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	e000      	b.n	800ac44 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3714      	adds	r7, #20
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr
 800ac52:	bf00      	nop
 800ac54:	40012c00 	.word	0x40012c00
 800ac58:	00010007 	.word	0x00010007

0800ac5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b084      	sub	sp, #16
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	691b      	ldr	r3, [r3, #16]
 800ac72:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	f003 0302 	and.w	r3, r3, #2
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d020      	beq.n	800acc0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	f003 0302 	and.w	r3, r3, #2
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d01b      	beq.n	800acc0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f06f 0202 	mvn.w	r2, #2
 800ac90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2201      	movs	r2, #1
 800ac96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	699b      	ldr	r3, [r3, #24]
 800ac9e:	f003 0303 	and.w	r3, r3, #3
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d003      	beq.n	800acae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 f9b2 	bl	800b010 <HAL_TIM_IC_CaptureCallback>
 800acac:	e005      	b.n	800acba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f9a4 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	f000 f9b5 	bl	800b024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2200      	movs	r2, #0
 800acbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f003 0304 	and.w	r3, r3, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d020      	beq.n	800ad0c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f003 0304 	and.w	r3, r3, #4
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d01b      	beq.n	800ad0c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	f06f 0204 	mvn.w	r2, #4
 800acdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2202      	movs	r2, #2
 800ace2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	699b      	ldr	r3, [r3, #24]
 800acea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 f98c 	bl	800b010 <HAL_TIM_IC_CaptureCallback>
 800acf8:	e005      	b.n	800ad06 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 f97e 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 f98f 	bl	800b024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	f003 0308 	and.w	r3, r3, #8
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d020      	beq.n	800ad58 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f003 0308 	and.w	r3, r3, #8
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d01b      	beq.n	800ad58 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f06f 0208 	mvn.w	r2, #8
 800ad28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2204      	movs	r2, #4
 800ad2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	69db      	ldr	r3, [r3, #28]
 800ad36:	f003 0303 	and.w	r3, r3, #3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d003      	beq.n	800ad46 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f966 	bl	800b010 <HAL_TIM_IC_CaptureCallback>
 800ad44:	e005      	b.n	800ad52 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 f958 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f969 	bl	800b024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2200      	movs	r2, #0
 800ad56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	f003 0310 	and.w	r3, r3, #16
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d020      	beq.n	800ada4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f003 0310 	and.w	r3, r3, #16
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01b      	beq.n	800ada4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f06f 0210 	mvn.w	r2, #16
 800ad74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2208      	movs	r2, #8
 800ad7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	69db      	ldr	r3, [r3, #28]
 800ad82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d003      	beq.n	800ad92 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 f940 	bl	800b010 <HAL_TIM_IC_CaptureCallback>
 800ad90:	e005      	b.n	800ad9e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 f932 	bl	800affc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f943 	bl	800b024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2200      	movs	r2, #0
 800ada2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00c      	beq.n	800adc8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f003 0301 	and.w	r3, r3, #1
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d007      	beq.n	800adc8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	f06f 0201 	mvn.w	r2, #1
 800adc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7f9 ffc6 	bl	8004d54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adce:	2b00      	cmp	r3, #0
 800add0:	d104      	bne.n	800addc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00c      	beq.n	800adf6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800adee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 faa1 	bl	800b338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00c      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ae12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fa99 	bl	800b34c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00c      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ae36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f8fd 	bl	800b038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f003 0320 	and.w	r3, r3, #32
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00c      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f003 0320 	and.w	r3, r3, #32
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d007      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f06f 0220 	mvn.w	r2, #32
 800ae5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f000 fa61 	bl	800b324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae62:	bf00      	nop
 800ae64:	3710      	adds	r7, #16
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}

0800ae6a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ae6a:	b580      	push	{r7, lr}
 800ae6c:	b084      	sub	sp, #16
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
 800ae72:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ae74:	2300      	movs	r3, #0
 800ae76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d101      	bne.n	800ae86 <HAL_TIM_ConfigClockSource+0x1c>
 800ae82:	2302      	movs	r3, #2
 800ae84:	e0b6      	b.n	800aff4 <HAL_TIM_ConfigClockSource+0x18a>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2202      	movs	r2, #2
 800ae92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800aea4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800aea8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aeb0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	68ba      	ldr	r2, [r7, #8]
 800aeb8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aec2:	d03e      	beq.n	800af42 <HAL_TIM_ConfigClockSource+0xd8>
 800aec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aec8:	f200 8087 	bhi.w	800afda <HAL_TIM_ConfigClockSource+0x170>
 800aecc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aed0:	f000 8086 	beq.w	800afe0 <HAL_TIM_ConfigClockSource+0x176>
 800aed4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aed8:	d87f      	bhi.n	800afda <HAL_TIM_ConfigClockSource+0x170>
 800aeda:	2b70      	cmp	r3, #112	@ 0x70
 800aedc:	d01a      	beq.n	800af14 <HAL_TIM_ConfigClockSource+0xaa>
 800aede:	2b70      	cmp	r3, #112	@ 0x70
 800aee0:	d87b      	bhi.n	800afda <HAL_TIM_ConfigClockSource+0x170>
 800aee2:	2b60      	cmp	r3, #96	@ 0x60
 800aee4:	d050      	beq.n	800af88 <HAL_TIM_ConfigClockSource+0x11e>
 800aee6:	2b60      	cmp	r3, #96	@ 0x60
 800aee8:	d877      	bhi.n	800afda <HAL_TIM_ConfigClockSource+0x170>
 800aeea:	2b50      	cmp	r3, #80	@ 0x50
 800aeec:	d03c      	beq.n	800af68 <HAL_TIM_ConfigClockSource+0xfe>
 800aeee:	2b50      	cmp	r3, #80	@ 0x50
 800aef0:	d873      	bhi.n	800afda <HAL_TIM_ConfigClockSource+0x170>
 800aef2:	2b40      	cmp	r3, #64	@ 0x40
 800aef4:	d058      	beq.n	800afa8 <HAL_TIM_ConfigClockSource+0x13e>
 800aef6:	2b40      	cmp	r3, #64	@ 0x40
 800aef8:	d86f      	bhi.n	800afda <HAL_TIM_ConfigClockSource+0x170>
 800aefa:	2b30      	cmp	r3, #48	@ 0x30
 800aefc:	d064      	beq.n	800afc8 <HAL_TIM_ConfigClockSource+0x15e>
 800aefe:	2b30      	cmp	r3, #48	@ 0x30
 800af00:	d86b      	bhi.n	800afda <HAL_TIM_ConfigClockSource+0x170>
 800af02:	2b20      	cmp	r3, #32
 800af04:	d060      	beq.n	800afc8 <HAL_TIM_ConfigClockSource+0x15e>
 800af06:	2b20      	cmp	r3, #32
 800af08:	d867      	bhi.n	800afda <HAL_TIM_ConfigClockSource+0x170>
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d05c      	beq.n	800afc8 <HAL_TIM_ConfigClockSource+0x15e>
 800af0e:	2b10      	cmp	r3, #16
 800af10:	d05a      	beq.n	800afc8 <HAL_TIM_ConfigClockSource+0x15e>
 800af12:	e062      	b.n	800afda <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af1c:	683b      	ldr	r3, [r7, #0]
 800af1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af24:	f000 f97e 	bl	800b224 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800af36:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	68ba      	ldr	r2, [r7, #8]
 800af3e:	609a      	str	r2, [r3, #8]
      break;
 800af40:	e04f      	b.n	800afe2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800af52:	f000 f967 	bl	800b224 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800af64:	609a      	str	r2, [r3, #8]
      break;
 800af66:	e03c      	b.n	800afe2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800af74:	461a      	mov	r2, r3
 800af76:	f000 f8d9 	bl	800b12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	2150      	movs	r1, #80	@ 0x50
 800af80:	4618      	mov	r0, r3
 800af82:	f000 f932 	bl	800b1ea <TIM_ITRx_SetConfig>
      break;
 800af86:	e02c      	b.n	800afe2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800af94:	461a      	mov	r2, r3
 800af96:	f000 f8f8 	bl	800b18a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	2160      	movs	r1, #96	@ 0x60
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 f922 	bl	800b1ea <TIM_ITRx_SetConfig>
      break;
 800afa6:	e01c      	b.n	800afe2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800afb4:	461a      	mov	r2, r3
 800afb6:	f000 f8b9 	bl	800b12c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2140      	movs	r1, #64	@ 0x40
 800afc0:	4618      	mov	r0, r3
 800afc2:	f000 f912 	bl	800b1ea <TIM_ITRx_SetConfig>
      break;
 800afc6:	e00c      	b.n	800afe2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4619      	mov	r1, r3
 800afd2:	4610      	mov	r0, r2
 800afd4:	f000 f909 	bl	800b1ea <TIM_ITRx_SetConfig>
      break;
 800afd8:	e003      	b.n	800afe2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	73fb      	strb	r3, [r7, #15]
      break;
 800afde:	e000      	b.n	800afe2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800afe0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2201      	movs	r2, #1
 800afe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800aff2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3710      	adds	r7, #16
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b004:	bf00      	nop
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b024:	b480      	push	{r7}
 800b026:	b083      	sub	sp, #12
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b02c:	bf00      	nop
 800b02e:	370c      	adds	r7, #12
 800b030:	46bd      	mov	sp, r7
 800b032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b036:	4770      	bx	lr

0800b038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b038:	b480      	push	{r7}
 800b03a:	b083      	sub	sp, #12
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b04c:	b480      	push	{r7}
 800b04e:	b085      	sub	sp, #20
 800b050:	af00      	add	r7, sp, #0
 800b052:	6078      	str	r0, [r7, #4]
 800b054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	4a30      	ldr	r2, [pc, #192]	@ (800b120 <TIM_Base_SetConfig+0xd4>)
 800b060:	4293      	cmp	r3, r2
 800b062:	d003      	beq.n	800b06c <TIM_Base_SetConfig+0x20>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b06a:	d108      	bne.n	800b07e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4313      	orrs	r3, r2
 800b07c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	4a27      	ldr	r2, [pc, #156]	@ (800b120 <TIM_Base_SetConfig+0xd4>)
 800b082:	4293      	cmp	r3, r2
 800b084:	d00b      	beq.n	800b09e <TIM_Base_SetConfig+0x52>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b08c:	d007      	beq.n	800b09e <TIM_Base_SetConfig+0x52>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	4a24      	ldr	r2, [pc, #144]	@ (800b124 <TIM_Base_SetConfig+0xd8>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d003      	beq.n	800b09e <TIM_Base_SetConfig+0x52>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a23      	ldr	r2, [pc, #140]	@ (800b128 <TIM_Base_SetConfig+0xdc>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d108      	bne.n	800b0b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b0a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	68db      	ldr	r3, [r3, #12]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	695b      	ldr	r3, [r3, #20]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	689a      	ldr	r2, [r3, #8]
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	4a12      	ldr	r2, [pc, #72]	@ (800b120 <TIM_Base_SetConfig+0xd4>)
 800b0d8:	4293      	cmp	r3, r2
 800b0da:	d007      	beq.n	800b0ec <TIM_Base_SetConfig+0xa0>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	4a11      	ldr	r2, [pc, #68]	@ (800b124 <TIM_Base_SetConfig+0xd8>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d003      	beq.n	800b0ec <TIM_Base_SetConfig+0xa0>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4a10      	ldr	r2, [pc, #64]	@ (800b128 <TIM_Base_SetConfig+0xdc>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d103      	bne.n	800b0f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	691a      	ldr	r2, [r3, #16]
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2201      	movs	r2, #1
 800b0f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	f003 0301 	and.w	r3, r3, #1
 800b102:	2b01      	cmp	r3, #1
 800b104:	d105      	bne.n	800b112 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	691b      	ldr	r3, [r3, #16]
 800b10a:	f023 0201 	bic.w	r2, r3, #1
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	611a      	str	r2, [r3, #16]
  }
}
 800b112:	bf00      	nop
 800b114:	3714      	adds	r7, #20
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr
 800b11e:	bf00      	nop
 800b120:	40012c00 	.word	0x40012c00
 800b124:	40014400 	.word	0x40014400
 800b128:	40014800 	.word	0x40014800

0800b12c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b12c:	b480      	push	{r7}
 800b12e:	b087      	sub	sp, #28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6a1b      	ldr	r3, [r3, #32]
 800b142:	f023 0201 	bic.w	r2, r3, #1
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	011b      	lsls	r3, r3, #4
 800b15c:	693a      	ldr	r2, [r7, #16]
 800b15e:	4313      	orrs	r3, r2
 800b160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f023 030a 	bic.w	r3, r3, #10
 800b168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b16a:	697a      	ldr	r2, [r7, #20]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	4313      	orrs	r3, r2
 800b170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	621a      	str	r2, [r3, #32]
}
 800b17e:	bf00      	nop
 800b180:	371c      	adds	r7, #28
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b18a:	b480      	push	{r7}
 800b18c:	b087      	sub	sp, #28
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6a1b      	ldr	r3, [r3, #32]
 800b1a0:	f023 0210 	bic.w	r2, r3, #16
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b1b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	031b      	lsls	r3, r3, #12
 800b1ba:	693a      	ldr	r2, [r7, #16]
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b1c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	011b      	lsls	r3, r3, #4
 800b1cc:	697a      	ldr	r2, [r7, #20]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	693a      	ldr	r2, [r7, #16]
 800b1d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	697a      	ldr	r2, [r7, #20]
 800b1dc:	621a      	str	r2, [r3, #32]
}
 800b1de:	bf00      	nop
 800b1e0:	371c      	adds	r7, #28
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b085      	sub	sp, #20
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	689b      	ldr	r3, [r3, #8]
 800b1f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	f043 0307 	orr.w	r3, r3, #7
 800b210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	609a      	str	r2, [r3, #8]
}
 800b218:	bf00      	nop
 800b21a:	3714      	adds	r7, #20
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b224:	b480      	push	{r7}
 800b226:	b087      	sub	sp, #28
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	689b      	ldr	r3, [r3, #8]
 800b236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b23e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	021a      	lsls	r2, r3, #8
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	431a      	orrs	r2, r3
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	4313      	orrs	r3, r2
 800b24c:	697a      	ldr	r2, [r7, #20]
 800b24e:	4313      	orrs	r3, r2
 800b250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	697a      	ldr	r2, [r7, #20]
 800b256:	609a      	str	r2, [r3, #8]
}
 800b258:	bf00      	nop
 800b25a:	371c      	adds	r7, #28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b262:	4770      	bx	lr

0800b264 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b274:	2b01      	cmp	r3, #1
 800b276:	d101      	bne.n	800b27c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b278:	2302      	movs	r3, #2
 800b27a:	e04a      	b.n	800b312 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2201      	movs	r2, #1
 800b280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2202      	movs	r2, #2
 800b288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	4a1f      	ldr	r2, [pc, #124]	@ (800b320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d108      	bne.n	800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b2ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b2be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68fa      	ldr	r2, [r7, #12]
 800b2d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a12      	ldr	r2, [pc, #72]	@ (800b320 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d004      	beq.n	800b2e6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b2e4:	d10c      	bne.n	800b300 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b2ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	68ba      	ldr	r2, [r7, #8]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68ba      	ldr	r2, [r7, #8]
 800b2fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b310:	2300      	movs	r3, #0
}
 800b312:	4618      	mov	r0, r3
 800b314:	3714      	adds	r7, #20
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr
 800b31e:	bf00      	nop
 800b320:	40012c00 	.word	0x40012c00

0800b324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b32c:	bf00      	nop
 800b32e:	370c      	adds	r7, #12
 800b330:	46bd      	mov	sp, r7
 800b332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b336:	4770      	bx	lr

0800b338 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b338:	b480      	push	{r7}
 800b33a:	b083      	sub	sp, #12
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b340:	bf00      	nop
 800b342:	370c      	adds	r7, #12
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b34c:	b480      	push	{r7}
 800b34e:	b083      	sub	sp, #12
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b354:	bf00      	nop
 800b356:	370c      	adds	r7, #12
 800b358:	46bd      	mov	sp, r7
 800b35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35e:	4770      	bx	lr

0800b360 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08a      	sub	sp, #40	@ 0x28
 800b364:	af00      	add	r7, sp, #0
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	4613      	mov	r3, r2
 800b36c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b374:	2b20      	cmp	r3, #32
 800b376:	d167      	bne.n	800b448 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d002      	beq.n	800b384 <HAL_UART_Transmit_DMA+0x24>
 800b37e:	88fb      	ldrh	r3, [r7, #6]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d101      	bne.n	800b388 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b384:	2301      	movs	r3, #1
 800b386:	e060      	b.n	800b44a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	88fa      	ldrh	r2, [r7, #6]
 800b392:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	88fa      	ldrh	r2, [r7, #6]
 800b39a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2221      	movs	r2, #33	@ 0x21
 800b3aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d028      	beq.n	800b408 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3ba:	4a26      	ldr	r2, [pc, #152]	@ (800b454 <HAL_UART_Transmit_DMA+0xf4>)
 800b3bc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3c2:	4a25      	ldr	r2, [pc, #148]	@ (800b458 <HAL_UART_Transmit_DMA+0xf8>)
 800b3c4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3ca:	4a24      	ldr	r2, [pc, #144]	@ (800b45c <HAL_UART_Transmit_DMA+0xfc>)
 800b3cc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	3328      	adds	r3, #40	@ 0x28
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	88fb      	ldrh	r3, [r7, #6]
 800b3ea:	f7f9 ffa0 	bl	800532e <HAL_DMA_Start_IT>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d009      	beq.n	800b408 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2210      	movs	r2, #16
 800b3f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2220      	movs	r2, #32
 800b400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b404:	2301      	movs	r3, #1
 800b406:	e020      	b.n	800b44a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2240      	movs	r2, #64	@ 0x40
 800b40e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3308      	adds	r3, #8
 800b416:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	e853 3f00 	ldrex	r3, [r3]
 800b41e:	613b      	str	r3, [r7, #16]
   return(result);
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b426:	627b      	str	r3, [r7, #36]	@ 0x24
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3308      	adds	r3, #8
 800b42e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b430:	623a      	str	r2, [r7, #32]
 800b432:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b434:	69f9      	ldr	r1, [r7, #28]
 800b436:	6a3a      	ldr	r2, [r7, #32]
 800b438:	e841 2300 	strex	r3, r2, [r1]
 800b43c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b43e:	69bb      	ldr	r3, [r7, #24]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d1e5      	bne.n	800b410 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	e000      	b.n	800b44a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b448:	2302      	movs	r3, #2
  }
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3728      	adds	r7, #40	@ 0x28
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}
 800b452:	bf00      	nop
 800b454:	0800bc73 	.word	0x0800bc73
 800b458:	0800bd0d 	.word	0x0800bd0d
 800b45c:	0800bd29 	.word	0x0800bd29

0800b460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b0ba      	sub	sp, #232	@ 0xe8
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	689b      	ldr	r3, [r3, #8]
 800b482:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b486:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b48a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b48e:	4013      	ands	r3, r2
 800b490:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d11b      	bne.n	800b4d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4a0:	f003 0320 	and.w	r3, r3, #32
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d015      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4ac:	f003 0320 	and.w	r3, r3, #32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d105      	bne.n	800b4c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b4b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d009      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 8300 	beq.w	800baca <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b4ce:	6878      	ldr	r0, [r7, #4]
 800b4d0:	4798      	blx	r3
      }
      return;
 800b4d2:	e2fa      	b.n	800baca <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b4d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	f000 8123 	beq.w	800b724 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b4de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b4e2:	4b8d      	ldr	r3, [pc, #564]	@ (800b718 <HAL_UART_IRQHandler+0x2b8>)
 800b4e4:	4013      	ands	r3, r2
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d106      	bne.n	800b4f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b4ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b4ee:	4b8b      	ldr	r3, [pc, #556]	@ (800b71c <HAL_UART_IRQHandler+0x2bc>)
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	f000 8116 	beq.w	800b724 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d011      	beq.n	800b528 <HAL_UART_IRQHandler+0xc8>
 800b504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00b      	beq.n	800b528 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	2201      	movs	r2, #1
 800b516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51e:	f043 0201 	orr.w	r2, r3, #1
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b52c:	f003 0302 	and.w	r3, r3, #2
 800b530:	2b00      	cmp	r3, #0
 800b532:	d011      	beq.n	800b558 <HAL_UART_IRQHandler+0xf8>
 800b534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b538:	f003 0301 	and.w	r3, r3, #1
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2202      	movs	r2, #2
 800b546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b54e:	f043 0204 	orr.w	r2, r3, #4
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b55c:	f003 0304 	and.w	r3, r3, #4
 800b560:	2b00      	cmp	r3, #0
 800b562:	d011      	beq.n	800b588 <HAL_UART_IRQHandler+0x128>
 800b564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00b      	beq.n	800b588 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	2204      	movs	r2, #4
 800b576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b57e:	f043 0202 	orr.w	r2, r3, #2
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b58c:	f003 0308 	and.w	r3, r3, #8
 800b590:	2b00      	cmp	r3, #0
 800b592:	d017      	beq.n	800b5c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b598:	f003 0320 	and.w	r3, r3, #32
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d105      	bne.n	800b5ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b5a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b5a4:	4b5c      	ldr	r3, [pc, #368]	@ (800b718 <HAL_UART_IRQHandler+0x2b8>)
 800b5a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d00b      	beq.n	800b5c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2208      	movs	r2, #8
 800b5b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ba:	f043 0208 	orr.w	r2, r3, #8
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b5c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b5c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d012      	beq.n	800b5f6 <HAL_UART_IRQHandler+0x196>
 800b5d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b5d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00c      	beq.n	800b5f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b5e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ec:	f043 0220 	orr.w	r2, r3, #32
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 8266 	beq.w	800bace <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b606:	f003 0320 	and.w	r3, r3, #32
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d013      	beq.n	800b636 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b60e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b612:	f003 0320 	and.w	r3, r3, #32
 800b616:	2b00      	cmp	r3, #0
 800b618:	d105      	bne.n	800b626 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b61a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b61e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d007      	beq.n	800b636 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d003      	beq.n	800b636 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b63c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b64a:	2b40      	cmp	r3, #64	@ 0x40
 800b64c:	d005      	beq.n	800b65a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b64e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b652:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b656:	2b00      	cmp	r3, #0
 800b658:	d054      	beq.n	800b704 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 faa3 	bl	800bba6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b66a:	2b40      	cmp	r3, #64	@ 0x40
 800b66c:	d146      	bne.n	800b6fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3308      	adds	r3, #8
 800b674:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b678:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b67c:	e853 3f00 	ldrex	r3, [r3]
 800b680:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b684:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b688:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b68c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	3308      	adds	r3, #8
 800b696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b69a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b69e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b6a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b6aa:	e841 2300 	strex	r3, r2, [r1]
 800b6ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b6b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d1d9      	bne.n	800b66e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d017      	beq.n	800b6f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6ca:	4a15      	ldr	r2, [pc, #84]	@ (800b720 <HAL_UART_IRQHandler+0x2c0>)
 800b6cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7f9 ff04 	bl	80054e2 <HAL_DMA_Abort_IT>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d019      	beq.n	800b714 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b6ee:	4610      	mov	r0, r2
 800b6f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f2:	e00f      	b.n	800b714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 f9ff 	bl	800baf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6fa:	e00b      	b.n	800b714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f9fb 	bl	800baf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b702:	e007      	b.n	800b714 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b704:	6878      	ldr	r0, [r7, #4]
 800b706:	f000 f9f7 	bl	800baf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b712:	e1dc      	b.n	800bace <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b714:	bf00      	nop
    return;
 800b716:	e1da      	b.n	800bace <HAL_UART_IRQHandler+0x66e>
 800b718:	10000001 	.word	0x10000001
 800b71c:	04000120 	.word	0x04000120
 800b720:	0800bda9 	.word	0x0800bda9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b728:	2b01      	cmp	r3, #1
 800b72a:	f040 8170 	bne.w	800ba0e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b732:	f003 0310 	and.w	r3, r3, #16
 800b736:	2b00      	cmp	r3, #0
 800b738:	f000 8169 	beq.w	800ba0e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b740:	f003 0310 	and.w	r3, r3, #16
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 8162 	beq.w	800ba0e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2210      	movs	r2, #16
 800b750:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	689b      	ldr	r3, [r3, #8]
 800b758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b75c:	2b40      	cmp	r3, #64	@ 0x40
 800b75e:	f040 80d8 	bne.w	800b912 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b774:	2b00      	cmp	r3, #0
 800b776:	f000 80af 	beq.w	800b8d8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b780:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b784:	429a      	cmp	r2, r3
 800b786:	f080 80a7 	bcs.w	800b8d8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b790:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f003 0320 	and.w	r3, r3, #32
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	f040 8087 	bne.w	800b8b6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b7b4:	e853 3f00 	ldrex	r3, [r3]
 800b7b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b7bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b7c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b7d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b7d6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7da:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b7de:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b7e2:	e841 2300 	strex	r3, r2, [r1]
 800b7e6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b7ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1da      	bne.n	800b7a8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	3308      	adds	r3, #8
 800b7f8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b7fc:	e853 3f00 	ldrex	r3, [r3]
 800b800:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b802:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b804:	f023 0301 	bic.w	r3, r3, #1
 800b808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3308      	adds	r3, #8
 800b812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b816:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b81a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b81c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b81e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b822:	e841 2300 	strex	r3, r2, [r1]
 800b826:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b828:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d1e1      	bne.n	800b7f2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	3308      	adds	r3, #8
 800b834:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b836:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b838:	e853 3f00 	ldrex	r3, [r3]
 800b83c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b83e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b840:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b844:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	3308      	adds	r3, #8
 800b84e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b852:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b854:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b858:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b860:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e3      	bne.n	800b82e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2220      	movs	r2, #32
 800b86a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b87a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b87c:	e853 3f00 	ldrex	r3, [r3]
 800b880:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b884:	f023 0310 	bic.w	r3, r3, #16
 800b888:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	461a      	mov	r2, r3
 800b892:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b896:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b898:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b89a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b89c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b89e:	e841 2300 	strex	r3, r2, [r1]
 800b8a2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1e4      	bne.n	800b874 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f7f9 fdb7 	bl	8005424 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2202      	movs	r2, #2
 800b8ba:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b8c8:	b29b      	uxth	r3, r3
 800b8ca:	1ad3      	subs	r3, r2, r3
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f000 f91b 	bl	800bb0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b8d6:	e0fc      	b.n	800bad2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b8de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	f040 80f5 	bne.w	800bad2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0320 	and.w	r3, r3, #32
 800b8f6:	2b20      	cmp	r3, #32
 800b8f8:	f040 80eb 	bne.w	800bad2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2202      	movs	r2, #2
 800b900:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b908:	4619      	mov	r1, r3
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f8fe 	bl	800bb0c <HAL_UARTEx_RxEventCallback>
      return;
 800b910:	e0df      	b.n	800bad2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b91e:	b29b      	uxth	r3, r3
 800b920:	1ad3      	subs	r3, r2, r3
 800b922:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 80d1 	beq.w	800bad6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800b934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b938:	2b00      	cmp	r3, #0
 800b93a:	f000 80cc 	beq.w	800bad6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b946:	e853 3f00 	ldrex	r3, [r3]
 800b94a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b94c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b94e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b952:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	461a      	mov	r2, r3
 800b95c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b960:	647b      	str	r3, [r7, #68]	@ 0x44
 800b962:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b964:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b966:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b968:	e841 2300 	strex	r3, r2, [r1]
 800b96c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b96e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1e4      	bne.n	800b93e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	3308      	adds	r3, #8
 800b97a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	623b      	str	r3, [r7, #32]
   return(result);
 800b984:	6a3b      	ldr	r3, [r7, #32]
 800b986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b98a:	f023 0301 	bic.w	r3, r3, #1
 800b98e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	3308      	adds	r3, #8
 800b998:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b99c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b99e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b9a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b9a4:	e841 2300 	strex	r3, r2, [r1]
 800b9a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b9aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1e1      	bne.n	800b974 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2220      	movs	r2, #32
 800b9b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	e853 3f00 	ldrex	r3, [r3]
 800b9d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f023 0310 	bic.w	r3, r3, #16
 800b9d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	461a      	mov	r2, r3
 800b9e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b9e6:	61fb      	str	r3, [r7, #28]
 800b9e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ea:	69b9      	ldr	r1, [r7, #24]
 800b9ec:	69fa      	ldr	r2, [r7, #28]
 800b9ee:	e841 2300 	strex	r3, r2, [r1]
 800b9f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d1e4      	bne.n	800b9c4 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f880 	bl	800bb0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba0c:	e063      	b.n	800bad6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00e      	beq.n	800ba38 <HAL_UART_IRQHandler+0x5d8>
 800ba1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d008      	beq.n	800ba38 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800ba2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f9f6 	bl	800be22 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba36:	e051      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ba38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d014      	beq.n	800ba6e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800ba44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d105      	bne.n	800ba5c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800ba50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ba54:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d008      	beq.n	800ba6e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d03a      	beq.n	800bada <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	4798      	blx	r3
    }
    return;
 800ba6c:	e035      	b.n	800bada <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ba6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d009      	beq.n	800ba8e <HAL_UART_IRQHandler+0x62e>
 800ba7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d003      	beq.n	800ba8e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f9a0 	bl	800bdcc <UART_EndTransmit_IT>
    return;
 800ba8c:	e026      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ba8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d009      	beq.n	800baae <HAL_UART_IRQHandler+0x64e>
 800ba9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ba9e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f9cf 	bl	800be4a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800baac:	e016      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800baae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d010      	beq.n	800badc <HAL_UART_IRQHandler+0x67c>
 800baba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	da0c      	bge.n	800badc <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f9b7 	bl	800be36 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bac8:	e008      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
      return;
 800baca:	bf00      	nop
 800bacc:	e006      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
    return;
 800bace:	bf00      	nop
 800bad0:	e004      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
      return;
 800bad2:	bf00      	nop
 800bad4:	e002      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
      return;
 800bad6:	bf00      	nop
 800bad8:	e000      	b.n	800badc <HAL_UART_IRQHandler+0x67c>
    return;
 800bada:	bf00      	nop
  }
}
 800badc:	37e8      	adds	r7, #232	@ 0xe8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop

0800bae4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800baec:	bf00      	nop
 800baee:	370c      	adds	r7, #12
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b083      	sub	sp, #12
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bb00:	bf00      	nop
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	460b      	mov	r3, r1
 800bb16:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bb18:	bf00      	nop
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b08f      	sub	sp, #60	@ 0x3c
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb32:	6a3b      	ldr	r3, [r7, #32]
 800bb34:	e853 3f00 	ldrex	r3, [r3]
 800bb38:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb3a:	69fb      	ldr	r3, [r7, #28]
 800bb3c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bb40:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb4c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb52:	e841 2300 	strex	r3, r2, [r1]
 800bb56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d1e6      	bne.n	800bb2c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	3308      	adds	r3, #8
 800bb64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	e853 3f00 	ldrex	r3, [r3]
 800bb6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bb74:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb7e:	61ba      	str	r2, [r7, #24]
 800bb80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb82:	6979      	ldr	r1, [r7, #20]
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	e841 2300 	strex	r3, r2, [r1]
 800bb8a:	613b      	str	r3, [r7, #16]
   return(result);
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d1e5      	bne.n	800bb5e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2220      	movs	r2, #32
 800bb96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bb9a:	bf00      	nop
 800bb9c:	373c      	adds	r7, #60	@ 0x3c
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr

0800bba6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bba6:	b480      	push	{r7}
 800bba8:	b095      	sub	sp, #84	@ 0x54
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbb6:	e853 3f00 	ldrex	r3, [r3]
 800bbba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bbbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bbc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bbcc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bbce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bbd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bbd4:	e841 2300 	strex	r3, r2, [r1]
 800bbd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e6      	bne.n	800bbae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	3308      	adds	r3, #8
 800bbe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe8:	6a3b      	ldr	r3, [r7, #32]
 800bbea:	e853 3f00 	ldrex	r3, [r3]
 800bbee:	61fb      	str	r3, [r7, #28]
   return(result);
 800bbf0:	69fb      	ldr	r3, [r7, #28]
 800bbf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bbf6:	f023 0301 	bic.w	r3, r3, #1
 800bbfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3308      	adds	r3, #8
 800bc02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc0c:	e841 2300 	strex	r3, r2, [r1]
 800bc10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d1e3      	bne.n	800bbe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d118      	bne.n	800bc52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	e853 3f00 	ldrex	r3, [r3]
 800bc2c:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	f023 0310 	bic.w	r3, r3, #16
 800bc34:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc3e:	61bb      	str	r3, [r7, #24]
 800bc40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc42:	6979      	ldr	r1, [r7, #20]
 800bc44:	69ba      	ldr	r2, [r7, #24]
 800bc46:	e841 2300 	strex	r3, r2, [r1]
 800bc4a:	613b      	str	r3, [r7, #16]
   return(result);
 800bc4c:	693b      	ldr	r3, [r7, #16]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d1e6      	bne.n	800bc20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	2220      	movs	r2, #32
 800bc56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bc66:	bf00      	nop
 800bc68:	3754      	adds	r7, #84	@ 0x54
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b090      	sub	sp, #64	@ 0x40
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f003 0320 	and.w	r3, r3, #32
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d137      	bne.n	800bcfe <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bc8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc90:	2200      	movs	r2, #0
 800bc92:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bc96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	3308      	adds	r3, #8
 800bc9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca0:	e853 3f00 	ldrex	r3, [r3]
 800bca4:	623b      	str	r3, [r7, #32]
   return(result);
 800bca6:	6a3b      	ldr	r3, [r7, #32]
 800bca8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bcac:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bcae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	3308      	adds	r3, #8
 800bcb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bcb6:	633a      	str	r2, [r7, #48]	@ 0x30
 800bcb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bcbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bcbe:	e841 2300 	strex	r3, r2, [r1]
 800bcc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bcc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1e5      	bne.n	800bc96 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	e853 3f00 	ldrex	r3, [r3]
 800bcd6:	60fb      	str	r3, [r7, #12]
   return(result);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcde:	637b      	str	r3, [r7, #52]	@ 0x34
 800bce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	461a      	mov	r2, r3
 800bce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bce8:	61fb      	str	r3, [r7, #28]
 800bcea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcec:	69b9      	ldr	r1, [r7, #24]
 800bcee:	69fa      	ldr	r2, [r7, #28]
 800bcf0:	e841 2300 	strex	r3, r2, [r1]
 800bcf4:	617b      	str	r3, [r7, #20]
   return(result);
 800bcf6:	697b      	ldr	r3, [r7, #20]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d1e6      	bne.n	800bcca <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bcfc:	e002      	b.n	800bd04 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bcfe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bd00:	f7f7 fe88 	bl	8003a14 <HAL_UART_TxCpltCallback>
}
 800bd04:	bf00      	nop
 800bd06:	3740      	adds	r7, #64	@ 0x40
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}

0800bd0c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b084      	sub	sp, #16
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd18:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bd1a:	68f8      	ldr	r0, [r7, #12]
 800bd1c:	f7ff fee2 	bl	800bae4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bd20:	bf00      	nop
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd34:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd3c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bd44:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	689b      	ldr	r3, [r3, #8]
 800bd4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd50:	2b80      	cmp	r3, #128	@ 0x80
 800bd52:	d109      	bne.n	800bd68 <UART_DMAError+0x40>
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	2b21      	cmp	r3, #33	@ 0x21
 800bd58:	d106      	bne.n	800bd68 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bd5a:	697b      	ldr	r3, [r7, #20]
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bd62:	6978      	ldr	r0, [r7, #20]
 800bd64:	f7ff fede 	bl	800bb24 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd72:	2b40      	cmp	r3, #64	@ 0x40
 800bd74:	d109      	bne.n	800bd8a <UART_DMAError+0x62>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	2b22      	cmp	r3, #34	@ 0x22
 800bd7a:	d106      	bne.n	800bd8a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bd84:	6978      	ldr	r0, [r7, #20]
 800bd86:	f7ff ff0e 	bl	800bba6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd90:	f043 0210 	orr.w	r2, r3, #16
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bd9a:	6978      	ldr	r0, [r7, #20]
 800bd9c:	f7ff feac 	bl	800baf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bda0:	bf00      	nop
 800bda2:	3718      	adds	r7, #24
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b084      	sub	sp, #16
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f7ff fe9a 	bl	800baf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b088      	sub	sp, #32
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	e853 3f00 	ldrex	r3, [r3]
 800bde0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bde8:	61fb      	str	r3, [r7, #28]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	69fb      	ldr	r3, [r7, #28]
 800bdf2:	61bb      	str	r3, [r7, #24]
 800bdf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdf6:	6979      	ldr	r1, [r7, #20]
 800bdf8:	69ba      	ldr	r2, [r7, #24]
 800bdfa:	e841 2300 	strex	r3, r2, [r1]
 800bdfe:	613b      	str	r3, [r7, #16]
   return(result);
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d1e6      	bne.n	800bdd4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2220      	movs	r2, #32
 800be0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2200      	movs	r2, #0
 800be12:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f7f7 fdfd 	bl	8003a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be1a:	bf00      	nop
 800be1c:	3720      	adds	r7, #32
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}

0800be22 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800be2a:	bf00      	nop
 800be2c:	370c      	adds	r7, #12
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr

0800be36 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800be36:	b480      	push	{r7}
 800be38:	b083      	sub	sp, #12
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800be3e:	bf00      	nop
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800be52:	bf00      	nop
 800be54:	370c      	adds	r7, #12
 800be56:	46bd      	mov	sp, r7
 800be58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5c:	4770      	bx	lr

0800be5e <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800be5e:	b480      	push	{r7}
 800be60:	b085      	sub	sp, #20
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be6e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	b29a      	uxth	r2, r3
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800be7e:	2300      	movs	r3, #0
}
 800be80:	4618      	mov	r0, r3
 800be82:	3714      	adds	r7, #20
 800be84:	46bd      	mov	sp, r7
 800be86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8a:	4770      	bx	lr

0800be8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800be8c:	b480      	push	{r7}
 800be8e:	b085      	sub	sp, #20
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800be94:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800be98:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	b29b      	uxth	r3, r3
 800bea6:	43db      	mvns	r3, r3
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	4013      	ands	r3, r2
 800beac:	b29a      	uxth	r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr

0800bec2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bec2:	b480      	push	{r7}
 800bec4:	b085      	sub	sp, #20
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	60f8      	str	r0, [r7, #12]
 800beca:	1d3b      	adds	r3, r7, #4
 800becc:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	2200      	movs	r2, #0
 800bedc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	2200      	movs	r2, #0
 800beec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3714      	adds	r7, #20
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
	...

0800bf00 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b0a7      	sub	sp, #156	@ 0x9c
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	781b      	ldrb	r3, [r3, #0]
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4413      	add	r3, r2
 800bf1a:	881b      	ldrh	r3, [r3, #0]
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bf22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf26:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

  /* initialize Endpoint */
  switch (ep->type)
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	78db      	ldrb	r3, [r3, #3]
 800bf2e:	2b03      	cmp	r3, #3
 800bf30:	d81f      	bhi.n	800bf72 <USB_ActivateEndpoint+0x72>
 800bf32:	a201      	add	r2, pc, #4	@ (adr r2, 800bf38 <USB_ActivateEndpoint+0x38>)
 800bf34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf38:	0800bf49 	.word	0x0800bf49
 800bf3c:	0800bf65 	.word	0x0800bf65
 800bf40:	0800bf7b 	.word	0x0800bf7b
 800bf44:	0800bf57 	.word	0x0800bf57
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bf48:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bf4c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bf50:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bf54:	e012      	b.n	800bf7c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bf56:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bf5a:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800bf5e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bf62:	e00b      	b.n	800bf7c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bf64:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bf68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bf6c:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
      break;
 800bf70:	e004      	b.n	800bf7c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800bf72:	2301      	movs	r3, #1
 800bf74:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
      break;
 800bf78:	e000      	b.n	800bf7c <USB_ActivateEndpoint+0x7c>
      break;
 800bf7a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	781b      	ldrb	r3, [r3, #0]
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	441a      	add	r2, r3
 800bf86:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800bf8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf9a:	b29b      	uxth	r3, r3
 800bf9c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	881b      	ldrh	r3, [r3, #0]
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	b21b      	sxth	r3, r3
 800bfae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bfb6:	b21a      	sxth	r2, r3
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	b21b      	sxth	r3, r3
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	b21b      	sxth	r3, r3
 800bfc2:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
 800bfc6:	687a      	ldr	r2, [r7, #4]
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	441a      	add	r2, r3
 800bfd0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800bfd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfe4:	b29b      	uxth	r3, r3
 800bfe6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	7b1b      	ldrb	r3, [r3, #12]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f040 8180 	bne.w	800c2f2 <USB_ActivateEndpoint+0x3f2>
  {
    if (ep->is_in != 0U)
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	f000 8084 	beq.w	800c104 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	61bb      	str	r3, [r7, #24]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c006:	b29b      	uxth	r3, r3
 800c008:	461a      	mov	r2, r3
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	4413      	add	r3, r2
 800c00e:	61bb      	str	r3, [r7, #24]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	00da      	lsls	r2, r3, #3
 800c016:	69bb      	ldr	r3, [r7, #24]
 800c018:	4413      	add	r3, r2
 800c01a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	88db      	ldrh	r3, [r3, #6]
 800c024:	085b      	lsrs	r3, r3, #1
 800c026:	b29b      	uxth	r3, r3
 800c028:	005b      	lsls	r3, r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4413      	add	r3, r2
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	827b      	strh	r3, [r7, #18]
 800c03e:	8a7b      	ldrh	r3, [r7, #18]
 800c040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c044:	2b00      	cmp	r3, #0
 800c046:	d01b      	beq.n	800c080 <USB_ActivateEndpoint+0x180>
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	881b      	ldrh	r3, [r3, #0]
 800c054:	b29b      	uxth	r3, r3
 800c056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c05a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c05e:	823b      	strh	r3, [r7, #16]
 800c060:	687a      	ldr	r2, [r7, #4]
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	441a      	add	r2, r3
 800c06a:	8a3b      	ldrh	r3, [r7, #16]
 800c06c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c078:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c080:	683b      	ldr	r3, [r7, #0]
 800c082:	78db      	ldrb	r3, [r3, #3]
 800c084:	2b01      	cmp	r3, #1
 800c086:	d020      	beq.n	800c0ca <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c088:	687a      	ldr	r2, [r7, #4]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	781b      	ldrb	r3, [r3, #0]
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	881b      	ldrh	r3, [r3, #0]
 800c094:	b29b      	uxth	r3, r3
 800c096:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c09a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c09e:	81bb      	strh	r3, [r7, #12]
 800c0a0:	89bb      	ldrh	r3, [r7, #12]
 800c0a2:	f083 0320 	eor.w	r3, r3, #32
 800c0a6:	81bb      	strh	r3, [r7, #12]
 800c0a8:	687a      	ldr	r2, [r7, #4]
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	441a      	add	r2, r3
 800c0b2:	89bb      	ldrh	r3, [r7, #12]
 800c0b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	8013      	strh	r3, [r2, #0]
 800c0c8:	e3f9      	b.n	800c8be <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4413      	add	r3, r2
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	b29b      	uxth	r3, r3
 800c0d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c0dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c0e0:	81fb      	strh	r3, [r7, #14]
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	441a      	add	r2, r3
 800c0ec:	89fb      	ldrh	r3, [r7, #14]
 800c0ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c0f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c0f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c0fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	8013      	strh	r3, [r2, #0]
 800c102:	e3dc      	b.n	800c8be <USB_ActivateEndpoint+0x9be>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	633b      	str	r3, [r7, #48]	@ 0x30
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c10e:	b29b      	uxth	r3, r3
 800c110:	461a      	mov	r2, r3
 800c112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c114:	4413      	add	r3, r2
 800c116:	633b      	str	r3, [r7, #48]	@ 0x30
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	00da      	lsls	r2, r3, #3
 800c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c120:	4413      	add	r3, r2
 800c122:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	88db      	ldrh	r3, [r3, #6]
 800c12c:	085b      	lsrs	r3, r3, #1
 800c12e:	b29b      	uxth	r3, r3
 800c130:	005b      	lsls	r3, r3, #1
 800c132:	b29a      	uxth	r2, r3
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c136:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c142:	b29b      	uxth	r3, r3
 800c144:	461a      	mov	r2, r3
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	4413      	add	r3, r2
 800c14a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	00da      	lsls	r2, r3, #3
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	4413      	add	r3, r2
 800c156:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c15a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	b29b      	uxth	r3, r3
 800c162:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c166:	b29a      	uxth	r2, r3
 800c168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16a:	801a      	strh	r2, [r3, #0]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	691b      	ldr	r3, [r3, #16]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d10a      	bne.n	800c18a <USB_ActivateEndpoint+0x28a>
 800c174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c176:	881b      	ldrh	r3, [r3, #0]
 800c178:	b29b      	uxth	r3, r3
 800c17a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c17e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c182:	b29a      	uxth	r2, r3
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	801a      	strh	r2, [r3, #0]
 800c188:	e041      	b.n	800c20e <USB_ActivateEndpoint+0x30e>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c190:	d81c      	bhi.n	800c1cc <USB_ActivateEndpoint+0x2cc>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	085b      	lsrs	r3, r3, #1
 800c198:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	691b      	ldr	r3, [r3, #16]
 800c1a0:	f003 0301 	and.w	r3, r3, #1
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d004      	beq.n	800c1b2 <USB_ActivateEndpoint+0x2b2>
 800c1a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1ac:	3301      	adds	r3, #1
 800c1ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1b4:	881b      	ldrh	r3, [r3, #0]
 800c1b6:	b29a      	uxth	r2, r3
 800c1b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	029b      	lsls	r3, r3, #10
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1c8:	801a      	strh	r2, [r3, #0]
 800c1ca:	e020      	b.n	800c20e <USB_ActivateEndpoint+0x30e>
 800c1cc:	683b      	ldr	r3, [r7, #0]
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	095b      	lsrs	r3, r3, #5
 800c1d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	f003 031f 	and.w	r3, r3, #31
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d104      	bne.n	800c1ec <USB_ActivateEndpoint+0x2ec>
 800c1e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	881b      	ldrh	r3, [r3, #0]
 800c1f0:	b29a      	uxth	r2, r3
 800c1f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	029b      	lsls	r3, r3, #10
 800c1fa:	b29b      	uxth	r3, r3
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c208:	b29a      	uxth	r2, r3
 800c20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	781b      	ldrb	r3, [r3, #0]
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4413      	add	r3, r2
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c21c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c21e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d01b      	beq.n	800c25e <USB_ActivateEndpoint+0x35e>
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	881b      	ldrh	r3, [r3, #0]
 800c232:	b29b      	uxth	r3, r3
 800c234:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c238:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c23c:	843b      	strh	r3, [r7, #32]
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	009b      	lsls	r3, r3, #2
 800c246:	441a      	add	r2, r3
 800c248:	8c3b      	ldrh	r3, [r7, #32]
 800c24a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c24e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c252:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c256:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d124      	bne.n	800c2b0 <USB_ActivateEndpoint+0x3b0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	009b      	lsls	r3, r3, #2
 800c26e:	4413      	add	r3, r2
 800c270:	881b      	ldrh	r3, [r3, #0]
 800c272:	b29b      	uxth	r3, r3
 800c274:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c27c:	83bb      	strh	r3, [r7, #28]
 800c27e:	8bbb      	ldrh	r3, [r7, #28]
 800c280:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c284:	83bb      	strh	r3, [r7, #28]
 800c286:	8bbb      	ldrh	r3, [r7, #28]
 800c288:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c28c:	83bb      	strh	r3, [r7, #28]
 800c28e:	687a      	ldr	r2, [r7, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	441a      	add	r2, r3
 800c298:	8bbb      	ldrh	r3, [r7, #28]
 800c29a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c29e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	8013      	strh	r3, [r2, #0]
 800c2ae:	e306      	b.n	800c8be <USB_ActivateEndpoint+0x9be>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	4413      	add	r3, r2
 800c2ba:	881b      	ldrh	r3, [r3, #0]
 800c2bc:	b29b      	uxth	r3, r3
 800c2be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c2c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2c6:	83fb      	strh	r3, [r7, #30]
 800c2c8:	8bfb      	ldrh	r3, [r7, #30]
 800c2ca:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c2ce:	83fb      	strh	r3, [r7, #30]
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	441a      	add	r2, r3
 800c2da:	8bfb      	ldrh	r3, [r7, #30]
 800c2dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c2e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c2ec:	b29b      	uxth	r3, r3
 800c2ee:	8013      	strh	r3, [r2, #0]
 800c2f0:	e2e5      	b.n	800c8be <USB_ActivateEndpoint+0x9be>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	78db      	ldrb	r3, [r3, #3]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d11e      	bne.n	800c338 <USB_ActivateEndpoint+0x438>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	009b      	lsls	r3, r3, #2
 800c302:	4413      	add	r3, r2
 800c304:	881b      	ldrh	r3, [r3, #0]
 800c306:	b29b      	uxth	r3, r3
 800c308:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c30c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c310:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	781b      	ldrb	r3, [r3, #0]
 800c31a:	009b      	lsls	r3, r3, #2
 800c31c:	441a      	add	r2, r3
 800c31e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800c322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c32a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c332:	b29b      	uxth	r3, r3
 800c334:	8013      	strh	r3, [r2, #0]
 800c336:	e01d      	b.n	800c374 <USB_ActivateEndpoint+0x474>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c338:	687a      	ldr	r2, [r7, #4]
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	881b      	ldrh	r3, [r3, #0]
 800c344:	b29b      	uxth	r3, r3
 800c346:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c34a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c34e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
 800c352:	687a      	ldr	r2, [r7, #4]
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	781b      	ldrb	r3, [r3, #0]
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	441a      	add	r2, r3
 800c35c:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 800c360:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c364:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c368:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c36c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c370:	b29b      	uxth	r3, r3
 800c372:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c37e:	b29b      	uxth	r3, r3
 800c380:	461a      	mov	r2, r3
 800c382:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c384:	4413      	add	r3, r2
 800c386:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	781b      	ldrb	r3, [r3, #0]
 800c38c:	00da      	lsls	r2, r3, #3
 800c38e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800c390:	4413      	add	r3, r2
 800c392:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c396:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	891b      	ldrh	r3, [r3, #8]
 800c39c:	085b      	lsrs	r3, r3, #1
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	005b      	lsls	r3, r3, #1
 800c3a2:	b29a      	uxth	r2, r3
 800c3a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c3a6:	801a      	strh	r2, [r3, #0]
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c3b2:	b29b      	uxth	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3b8:	4413      	add	r3, r2
 800c3ba:	677b      	str	r3, [r7, #116]	@ 0x74
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	781b      	ldrb	r3, [r3, #0]
 800c3c0:	00da      	lsls	r2, r3, #3
 800c3c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c3c4:	4413      	add	r3, r2
 800c3c6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c3ca:	673b      	str	r3, [r7, #112]	@ 0x70
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	895b      	ldrh	r3, [r3, #10]
 800c3d0:	085b      	lsrs	r3, r3, #1
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	005b      	lsls	r3, r3, #1
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c3da:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	785b      	ldrb	r3, [r3, #1]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	f040 81af 	bne.w	800c744 <USB_ActivateEndpoint+0x844>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	881b      	ldrh	r3, [r3, #0]
 800c3f2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 800c3f6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 800c3fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d01d      	beq.n	800c43e <USB_ActivateEndpoint+0x53e>
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	4413      	add	r3, r2
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c414:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c418:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	441a      	add	r2, r3
 800c426:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 800c42a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c42e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c432:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c436:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	781b      	ldrb	r3, [r3, #0]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4413      	add	r3, r2
 800c448:	881b      	ldrh	r3, [r3, #0]
 800c44a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 800c44e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	@ 0x5c
 800c452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c456:	2b00      	cmp	r3, #0
 800c458:	d01d      	beq.n	800c496 <USB_ActivateEndpoint+0x596>
 800c45a:	687a      	ldr	r2, [r7, #4]
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	881b      	ldrh	r3, [r3, #0]
 800c466:	b29b      	uxth	r3, r3
 800c468:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c46c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c470:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	441a      	add	r2, r3
 800c47e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 800c482:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c486:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c48a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c48e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c492:	b29b      	uxth	r3, r3
 800c494:	8013      	strh	r3, [r2, #0]

      /* Set endpoint RX count */
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	785b      	ldrb	r3, [r3, #1]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d16b      	bne.n	800c576 <USB_ActivateEndpoint+0x676>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	461a      	mov	r2, r3
 800c4ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ae:	4413      	add	r3, r2
 800c4b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	781b      	ldrb	r3, [r3, #0]
 800c4b6:	00da      	lsls	r2, r3, #3
 800c4b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c4ba:	4413      	add	r3, r2
 800c4bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c4c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c4c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4c4:	881b      	ldrh	r3, [r3, #0]
 800c4c6:	b29b      	uxth	r3, r3
 800c4c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4cc:	b29a      	uxth	r2, r3
 800c4ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4d0:	801a      	strh	r2, [r3, #0]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	691b      	ldr	r3, [r3, #16]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d10a      	bne.n	800c4f0 <USB_ActivateEndpoint+0x5f0>
 800c4da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4dc:	881b      	ldrh	r3, [r3, #0]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4e8:	b29a      	uxth	r2, r3
 800c4ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c4ec:	801a      	strh	r2, [r3, #0]
 800c4ee:	e05d      	b.n	800c5ac <USB_ActivateEndpoint+0x6ac>
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4f6:	d81c      	bhi.n	800c532 <USB_ActivateEndpoint+0x632>
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	085b      	lsrs	r3, r3, #1
 800c4fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	691b      	ldr	r3, [r3, #16]
 800c506:	f003 0301 	and.w	r3, r3, #1
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d004      	beq.n	800c518 <USB_ActivateEndpoint+0x618>
 800c50e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c512:	3301      	adds	r3, #1
 800c514:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c51a:	881b      	ldrh	r3, [r3, #0]
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c522:	b29b      	uxth	r3, r3
 800c524:	029b      	lsls	r3, r3, #10
 800c526:	b29b      	uxth	r3, r3
 800c528:	4313      	orrs	r3, r2
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c52e:	801a      	strh	r2, [r3, #0]
 800c530:	e03c      	b.n	800c5ac <USB_ActivateEndpoint+0x6ac>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	691b      	ldr	r3, [r3, #16]
 800c536:	095b      	lsrs	r3, r3, #5
 800c538:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	691b      	ldr	r3, [r3, #16]
 800c540:	f003 031f 	and.w	r3, r3, #31
 800c544:	2b00      	cmp	r3, #0
 800c546:	d104      	bne.n	800c552 <USB_ActivateEndpoint+0x652>
 800c548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c54c:	3b01      	subs	r3, #1
 800c54e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c554:	881b      	ldrh	r3, [r3, #0]
 800c556:	b29a      	uxth	r2, r3
 800c558:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	029b      	lsls	r3, r3, #10
 800c560:	b29b      	uxth	r3, r3
 800c562:	4313      	orrs	r3, r2
 800c564:	b29b      	uxth	r3, r3
 800c566:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c56a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c56e:	b29a      	uxth	r2, r3
 800c570:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c572:	801a      	strh	r2, [r3, #0]
 800c574:	e01a      	b.n	800c5ac <USB_ActivateEndpoint+0x6ac>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	785b      	ldrb	r3, [r3, #1]
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	d116      	bne.n	800c5ac <USB_ActivateEndpoint+0x6ac>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	657b      	str	r3, [r7, #84]	@ 0x54
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c588:	b29b      	uxth	r3, r3
 800c58a:	461a      	mov	r2, r3
 800c58c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c58e:	4413      	add	r3, r2
 800c590:	657b      	str	r3, [r7, #84]	@ 0x54
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	00da      	lsls	r2, r3, #3
 800c598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c59a:	4413      	add	r3, r2
 800c59c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	691b      	ldr	r3, [r3, #16]
 800c5a6:	b29a      	uxth	r2, r3
 800c5a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5aa:	801a      	strh	r2, [r3, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	647b      	str	r3, [r7, #68]	@ 0x44
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	785b      	ldrb	r3, [r3, #1]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d16b      	bne.n	800c690 <USB_ActivateEndpoint+0x790>
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c5c2:	b29b      	uxth	r3, r3
 800c5c4:	461a      	mov	r2, r3
 800c5c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5c8:	4413      	add	r3, r2
 800c5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	00da      	lsls	r2, r3, #3
 800c5d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c5da:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5de:	881b      	ldrh	r3, [r3, #0]
 800c5e0:	b29b      	uxth	r3, r3
 800c5e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5ea:	801a      	strh	r2, [r3, #0]
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d10a      	bne.n	800c60a <USB_ActivateEndpoint+0x70a>
 800c5f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f6:	881b      	ldrh	r3, [r3, #0]
 800c5f8:	b29b      	uxth	r3, r3
 800c5fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c602:	b29a      	uxth	r2, r3
 800c604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c606:	801a      	strh	r2, [r3, #0]
 800c608:	e05b      	b.n	800c6c2 <USB_ActivateEndpoint+0x7c2>
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	691b      	ldr	r3, [r3, #16]
 800c60e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c610:	d81c      	bhi.n	800c64c <USB_ActivateEndpoint+0x74c>
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	691b      	ldr	r3, [r3, #16]
 800c616:	085b      	lsrs	r3, r3, #1
 800c618:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	f003 0301 	and.w	r3, r3, #1
 800c624:	2b00      	cmp	r3, #0
 800c626:	d004      	beq.n	800c632 <USB_ActivateEndpoint+0x732>
 800c628:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c62c:	3301      	adds	r3, #1
 800c62e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c634:	881b      	ldrh	r3, [r3, #0]
 800c636:	b29a      	uxth	r2, r3
 800c638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	029b      	lsls	r3, r3, #10
 800c640:	b29b      	uxth	r3, r3
 800c642:	4313      	orrs	r3, r2
 800c644:	b29a      	uxth	r2, r3
 800c646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c648:	801a      	strh	r2, [r3, #0]
 800c64a:	e03a      	b.n	800c6c2 <USB_ActivateEndpoint+0x7c2>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	691b      	ldr	r3, [r3, #16]
 800c650:	095b      	lsrs	r3, r3, #5
 800c652:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	f003 031f 	and.w	r3, r3, #31
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d104      	bne.n	800c66c <USB_ActivateEndpoint+0x76c>
 800c662:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c666:	3b01      	subs	r3, #1
 800c668:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c66c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	b29a      	uxth	r2, r3
 800c672:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c676:	b29b      	uxth	r3, r3
 800c678:	029b      	lsls	r3, r3, #10
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	4313      	orrs	r3, r2
 800c67e:	b29b      	uxth	r3, r3
 800c680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c688:	b29a      	uxth	r2, r3
 800c68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c68c:	801a      	strh	r2, [r3, #0]
 800c68e:	e018      	b.n	800c6c2 <USB_ActivateEndpoint+0x7c2>
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	785b      	ldrb	r3, [r3, #1]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d114      	bne.n	800c6c2 <USB_ActivateEndpoint+0x7c2>
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	461a      	mov	r2, r3
 800c6a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6a4:	4413      	add	r3, r2
 800c6a6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	00da      	lsls	r2, r3, #3
 800c6ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	b29a      	uxth	r2, r3
 800c6be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c6c0:	801a      	strh	r2, [r3, #0]

      /* Set endpoint RX to valid state */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	881b      	ldrh	r3, [r3, #0]
 800c6ce:	b29b      	uxth	r3, r3
 800c6d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c6da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c6dc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c6e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c6e2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c6e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c6e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c6ea:	687a      	ldr	r2, [r7, #4]
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	009b      	lsls	r3, r3, #2
 800c6f2:	441a      	add	r2, r3
 800c6f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c6f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c706:	b29b      	uxth	r3, r3
 800c708:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c70a:	687a      	ldr	r2, [r7, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	009b      	lsls	r3, r3, #2
 800c712:	4413      	add	r3, r2
 800c714:	881b      	ldrh	r3, [r3, #0]
 800c716:	b29b      	uxth	r3, r3
 800c718:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c71c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c720:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	441a      	add	r2, r3
 800c72c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800c72e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c732:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c736:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c73a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c73e:	b29b      	uxth	r3, r3
 800c740:	8013      	strh	r3, [r2, #0]
 800c742:	e0bc      	b.n	800c8be <USB_ActivateEndpoint+0x9be>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	4413      	add	r3, r2
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800c754:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800c758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d01d      	beq.n	800c79c <USB_ActivateEndpoint+0x89c>
 800c760:	687a      	ldr	r2, [r7, #4]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	009b      	lsls	r3, r3, #2
 800c768:	4413      	add	r3, r2
 800c76a:	881b      	ldrh	r3, [r3, #0]
 800c76c:	b29b      	uxth	r3, r3
 800c76e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c772:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c776:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	009b      	lsls	r3, r3, #2
 800c782:	441a      	add	r2, r3
 800c784:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800c788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c78c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c790:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c798:	b29b      	uxth	r3, r3
 800c79a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	881b      	ldrh	r3, [r3, #0]
 800c7a8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
 800c7ac:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800c7b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d01d      	beq.n	800c7f4 <USB_ActivateEndpoint+0x8f4>
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7ce:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	009b      	lsls	r3, r3, #2
 800c7da:	441a      	add	r2, r3
 800c7dc:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800c7e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c7f0:	b29b      	uxth	r3, r3
 800c7f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	78db      	ldrb	r3, [r3, #3]
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d024      	beq.n	800c846 <USB_ActivateEndpoint+0x946>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c7fc:	687a      	ldr	r2, [r7, #4]
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	781b      	ldrb	r3, [r3, #0]
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	4413      	add	r3, r2
 800c806:	881b      	ldrh	r3, [r3, #0]
 800c808:	b29b      	uxth	r3, r3
 800c80a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c80e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c812:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c816:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c81a:	f083 0320 	eor.w	r3, r3, #32
 800c81e:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	441a      	add	r2, r3
 800c82c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c830:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c834:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c83c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c840:	b29b      	uxth	r3, r3
 800c842:	8013      	strh	r3, [r2, #0]
 800c844:	e01d      	b.n	800c882 <USB_ActivateEndpoint+0x982>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	4413      	add	r3, r2
 800c850:	881b      	ldrh	r3, [r3, #0]
 800c852:	b29b      	uxth	r3, r3
 800c854:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c85c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800c860:	687a      	ldr	r2, [r7, #4]
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	781b      	ldrb	r3, [r3, #0]
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	441a      	add	r2, r3
 800c86a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800c86e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c872:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c87a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c87e:	b29b      	uxth	r3, r3
 800c880:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	781b      	ldrb	r3, [r3, #0]
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	4413      	add	r3, r2
 800c88c:	881b      	ldrh	r3, [r3, #0]
 800c88e:	b29b      	uxth	r3, r3
 800c890:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c894:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c898:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	441a      	add	r2, r3
 800c8a6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c8aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c8be:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	379c      	adds	r7, #156	@ 0x9c
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop

0800c8d0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b08d      	sub	sp, #52	@ 0x34
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	7b1b      	ldrb	r3, [r3, #12]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	f040 808e 	bne.w	800ca00 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	785b      	ldrb	r3, [r3, #1]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d044      	beq.n	800c976 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	4413      	add	r3, r2
 800c8f6:	881b      	ldrh	r3, [r3, #0]
 800c8f8:	81bb      	strh	r3, [r7, #12]
 800c8fa:	89bb      	ldrh	r3, [r7, #12]
 800c8fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c900:	2b00      	cmp	r3, #0
 800c902:	d01b      	beq.n	800c93c <USB_DeactivateEndpoint+0x6c>
 800c904:	687a      	ldr	r2, [r7, #4]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	4413      	add	r3, r2
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	b29b      	uxth	r3, r3
 800c912:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c91a:	817b      	strh	r3, [r7, #10]
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	441a      	add	r2, r3
 800c926:	897b      	ldrh	r3, [r7, #10]
 800c928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c92c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c934:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c938:	b29b      	uxth	r3, r3
 800c93a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c94e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c952:	813b      	strh	r3, [r7, #8]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	441a      	add	r2, r3
 800c95e:	893b      	ldrh	r3, [r7, #8]
 800c960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c968:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c970:	b29b      	uxth	r3, r3
 800c972:	8013      	strh	r3, [r2, #0]
 800c974:	e192      	b.n	800cc9c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	4413      	add	r3, r2
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	827b      	strh	r3, [r7, #18]
 800c984:	8a7b      	ldrh	r3, [r7, #18]
 800c986:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d01b      	beq.n	800c9c6 <USB_DeactivateEndpoint+0xf6>
 800c98e:	687a      	ldr	r2, [r7, #4]
 800c990:	683b      	ldr	r3, [r7, #0]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4413      	add	r3, r2
 800c998:	881b      	ldrh	r3, [r3, #0]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c9a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9a4:	823b      	strh	r3, [r7, #16]
 800c9a6:	687a      	ldr	r2, [r7, #4]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	009b      	lsls	r3, r3, #2
 800c9ae:	441a      	add	r2, r3
 800c9b0:	8a3b      	ldrh	r3, [r7, #16]
 800c9b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9c2:	b29b      	uxth	r3, r3
 800c9c4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	4413      	add	r3, r2
 800c9d0:	881b      	ldrh	r3, [r3, #0]
 800c9d2:	b29b      	uxth	r3, r3
 800c9d4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c9d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9dc:	81fb      	strh	r3, [r7, #14]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	441a      	add	r2, r3
 800c9e8:	89fb      	ldrh	r3, [r7, #14]
 800c9ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9fa:	b29b      	uxth	r3, r3
 800c9fc:	8013      	strh	r3, [r2, #0]
 800c9fe:	e14d      	b.n	800cc9c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	785b      	ldrb	r3, [r3, #1]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f040 80a5 	bne.w	800cb54 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ca0a:	687a      	ldr	r2, [r7, #4]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	881b      	ldrh	r3, [r3, #0]
 800ca16:	843b      	strh	r3, [r7, #32]
 800ca18:	8c3b      	ldrh	r3, [r7, #32]
 800ca1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d01b      	beq.n	800ca5a <USB_DeactivateEndpoint+0x18a>
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	781b      	ldrb	r3, [r3, #0]
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	4413      	add	r3, r2
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca38:	83fb      	strh	r3, [r7, #30]
 800ca3a:	687a      	ldr	r2, [r7, #4]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	781b      	ldrb	r3, [r3, #0]
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	441a      	add	r2, r3
 800ca44:	8bfb      	ldrh	r3, [r7, #30]
 800ca46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ca52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	009b      	lsls	r3, r3, #2
 800ca62:	4413      	add	r3, r2
 800ca64:	881b      	ldrh	r3, [r3, #0]
 800ca66:	83bb      	strh	r3, [r7, #28]
 800ca68:	8bbb      	ldrh	r3, [r7, #28]
 800ca6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d01b      	beq.n	800caaa <USB_DeactivateEndpoint+0x1da>
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	009b      	lsls	r3, r3, #2
 800ca7a:	4413      	add	r3, r2
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca88:	837b      	strh	r3, [r7, #26]
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	781b      	ldrb	r3, [r3, #0]
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	441a      	add	r2, r3
 800ca94:	8b7b      	ldrh	r3, [r7, #26]
 800ca96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ca9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ca9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800caa2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800caa6:	b29b      	uxth	r3, r3
 800caa8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cabc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cac0:	833b      	strh	r3, [r7, #24]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	781b      	ldrb	r3, [r3, #0]
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	441a      	add	r2, r3
 800cacc:	8b3b      	ldrh	r3, [r7, #24]
 800cace:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cad2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cada:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cade:	b29b      	uxth	r3, r3
 800cae0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cae2:	687a      	ldr	r2, [r7, #4]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	881b      	ldrh	r3, [r3, #0]
 800caee:	b29b      	uxth	r3, r3
 800caf0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800caf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caf8:	82fb      	strh	r3, [r7, #22]
 800cafa:	687a      	ldr	r2, [r7, #4]
 800cafc:	683b      	ldr	r3, [r7, #0]
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	441a      	add	r2, r3
 800cb04:	8afb      	ldrh	r3, [r7, #22]
 800cb06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cb1a:	687a      	ldr	r2, [r7, #4]
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4413      	add	r3, r2
 800cb24:	881b      	ldrh	r3, [r3, #0]
 800cb26:	b29b      	uxth	r3, r3
 800cb28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb30:	82bb      	strh	r3, [r7, #20]
 800cb32:	687a      	ldr	r2, [r7, #4]
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	009b      	lsls	r3, r3, #2
 800cb3a:	441a      	add	r2, r3
 800cb3c:	8abb      	ldrh	r3, [r7, #20]
 800cb3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cb4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	8013      	strh	r3, [r2, #0]
 800cb52:	e0a3      	b.n	800cc9c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4413      	add	r3, r2
 800cb5e:	881b      	ldrh	r3, [r3, #0]
 800cb60:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800cb62:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800cb64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d01b      	beq.n	800cba4 <USB_DeactivateEndpoint+0x2d4>
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	009b      	lsls	r3, r3, #2
 800cb74:	4413      	add	r3, r2
 800cb76:	881b      	ldrh	r3, [r3, #0]
 800cb78:	b29b      	uxth	r3, r3
 800cb7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cb7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb82:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	009b      	lsls	r3, r3, #2
 800cb8c:	441a      	add	r2, r3
 800cb8e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800cb90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cb94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cb98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cb9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cba4:	687a      	ldr	r2, [r7, #4]
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	781b      	ldrb	r3, [r3, #0]
 800cbaa:	009b      	lsls	r3, r3, #2
 800cbac:	4413      	add	r3, r2
 800cbae:	881b      	ldrh	r3, [r3, #0]
 800cbb0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800cbb2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800cbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d01b      	beq.n	800cbf4 <USB_DeactivateEndpoint+0x324>
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	781b      	ldrb	r3, [r3, #0]
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	4413      	add	r3, r2
 800cbc6:	881b      	ldrh	r3, [r3, #0]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cbce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbd2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	009b      	lsls	r3, r3, #2
 800cbdc:	441a      	add	r2, r3
 800cbde:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cbe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cbe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cbe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cbec:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	4413      	add	r3, r2
 800cbfe:	881b      	ldrh	r3, [r3, #0]
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc0a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800cc0c:	687a      	ldr	r2, [r7, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	009b      	lsls	r3, r3, #2
 800cc14:	441a      	add	r2, r3
 800cc16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800cc18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800cc24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800cc2c:	687a      	ldr	r2, [r7, #4]
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cc3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cc42:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	781b      	ldrb	r3, [r3, #0]
 800cc4a:	009b      	lsls	r3, r3, #2
 800cc4c:	441a      	add	r2, r3
 800cc4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cc50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc58:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	4413      	add	r3, r2
 800cc6e:	881b      	ldrh	r3, [r3, #0]
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cc76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc7a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800cc7c:	687a      	ldr	r2, [r7, #4]
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	009b      	lsls	r3, r3, #2
 800cc84:	441a      	add	r2, r3
 800cc86:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800cc88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cc8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cc90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800cc94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800cc9c:	2300      	movs	r3, #0
}
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3734      	adds	r7, #52	@ 0x34
 800cca2:	46bd      	mov	sp, r7
 800cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca8:	4770      	bx	lr

0800ccaa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b0ac      	sub	sp, #176	@ 0xb0
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	6078      	str	r0, [r7, #4]
 800ccb2:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	785b      	ldrb	r3, [r3, #1]
 800ccb8:	2b01      	cmp	r3, #1
 800ccba:	f040 84ca 	bne.w	800d652 <USB_EPStartXfer+0x9a8>
  {
    /* Multi packet transfer */
    if (ep->xfer_len > ep->maxpacket)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	699a      	ldr	r2, [r3, #24]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	691b      	ldr	r3, [r3, #16]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d904      	bls.n	800ccd4 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	691b      	ldr	r3, [r3, #16]
 800ccce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ccd2:	e003      	b.n	800ccdc <USB_EPStartXfer+0x32>
    }
    else
    {
      len = ep->xfer_len;
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	7b1b      	ldrb	r3, [r3, #12]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d122      	bne.n	800cd2a <USB_EPStartXfer+0x80>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	6959      	ldr	r1, [r3, #20]
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	88da      	ldrh	r2, [r3, #6]
 800ccec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ccf0:	b29b      	uxth	r3, r3
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f000 febd 	bl	800da72 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	613b      	str	r3, [r7, #16]
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	461a      	mov	r2, r3
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	4413      	add	r3, r2
 800cd0a:	613b      	str	r3, [r7, #16]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	00da      	lsls	r2, r3, #3
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	4413      	add	r3, r2
 800cd16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd1a:	60fb      	str	r3, [r7, #12]
 800cd1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	801a      	strh	r2, [r3, #0]
 800cd26:	f000 bc6f 	b.w	800d608 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	78db      	ldrb	r3, [r3, #3]
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	f040 831e 	bne.w	800d370 <USB_EPStartXfer+0x6c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	6a1a      	ldr	r2, [r3, #32]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	691b      	ldr	r3, [r3, #16]
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	f240 82cf 	bls.w	800d2e0 <USB_EPStartXfer+0x636>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	009b      	lsls	r3, r3, #2
 800cd4a:	4413      	add	r3, r2
 800cd4c:	881b      	ldrh	r3, [r3, #0]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cd54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd58:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	441a      	add	r2, r3
 800cd66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800cd6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800cd6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800cd72:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cd76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd7a:	b29b      	uxth	r3, r3
 800cd7c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	6a1a      	ldr	r2, [r3, #32]
 800cd82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cd86:	1ad2      	subs	r2, r2, r3
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	683b      	ldr	r3, [r7, #0]
 800cd90:	781b      	ldrb	r3, [r3, #0]
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	4413      	add	r3, r2
 800cd96:	881b      	ldrh	r3, [r3, #0]
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 814f 	beq.w	800d042 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	633b      	str	r3, [r7, #48]	@ 0x30
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	785b      	ldrb	r3, [r3, #1]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d16b      	bne.n	800ce88 <USB_EPStartXfer+0x1de>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cdba:	b29b      	uxth	r3, r3
 800cdbc:	461a      	mov	r2, r3
 800cdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc0:	4413      	add	r3, r2
 800cdc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	00da      	lsls	r2, r3, #3
 800cdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdcc:	4413      	add	r3, r2
 800cdce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cdd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd6:	881b      	ldrh	r3, [r3, #0]
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde2:	801a      	strh	r2, [r3, #0]
 800cde4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d10a      	bne.n	800ce02 <USB_EPStartXfer+0x158>
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	881b      	ldrh	r3, [r3, #0]
 800cdf0:	b29b      	uxth	r3, r3
 800cdf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdfe:	801a      	strh	r2, [r3, #0]
 800ce00:	e05b      	b.n	800ceba <USB_EPStartXfer+0x210>
 800ce02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce06:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce08:	d81c      	bhi.n	800ce44 <USB_EPStartXfer+0x19a>
 800ce0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce0e:	085b      	lsrs	r3, r3, #1
 800ce10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce18:	f003 0301 	and.w	r3, r3, #1
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d004      	beq.n	800ce2a <USB_EPStartXfer+0x180>
 800ce20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce24:	3301      	adds	r3, #1
 800ce26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2c:	881b      	ldrh	r3, [r3, #0]
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	029b      	lsls	r3, r3, #10
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	4313      	orrs	r3, r2
 800ce3c:	b29a      	uxth	r2, r3
 800ce3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce40:	801a      	strh	r2, [r3, #0]
 800ce42:	e03a      	b.n	800ceba <USB_EPStartXfer+0x210>
 800ce44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce48:	095b      	lsrs	r3, r3, #5
 800ce4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce52:	f003 031f 	and.w	r3, r3, #31
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d104      	bne.n	800ce64 <USB_EPStartXfer+0x1ba>
 800ce5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	029b      	lsls	r3, r3, #10
 800ce72:	b29b      	uxth	r3, r3
 800ce74:	4313      	orrs	r3, r2
 800ce76:	b29b      	uxth	r3, r3
 800ce78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce80:	b29a      	uxth	r2, r3
 800ce82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce84:	801a      	strh	r2, [r3, #0]
 800ce86:	e018      	b.n	800ceba <USB_EPStartXfer+0x210>
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	785b      	ldrb	r3, [r3, #1]
 800ce8c:	2b01      	cmp	r3, #1
 800ce8e:	d114      	bne.n	800ceba <USB_EPStartXfer+0x210>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	461a      	mov	r2, r3
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9c:	4413      	add	r3, r2
 800ce9e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	00da      	lsls	r2, r3, #3
 800cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cea8:	4413      	add	r3, r2
 800ceaa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ceae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ceb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	895b      	ldrh	r3, [r3, #10]
 800cebe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	6959      	ldr	r1, [r3, #20]
 800cec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f000 fdce 	bl	800da72 <USB_WritePMA>
            ep->xfer_buff += len;
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	695a      	ldr	r2, [r3, #20]
 800ceda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cede:	441a      	add	r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	6a1a      	ldr	r2, [r3, #32]
 800cee8:	683b      	ldr	r3, [r7, #0]
 800ceea:	691b      	ldr	r3, [r3, #16]
 800ceec:	429a      	cmp	r2, r3
 800ceee:	d907      	bls.n	800cf00 <USB_EPStartXfer+0x256>
            {
              ep->xfer_len_db -= len;
 800cef0:	683b      	ldr	r3, [r7, #0]
 800cef2:	6a1a      	ldr	r2, [r3, #32]
 800cef4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cef8:	1ad2      	subs	r2, r2, r3
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	621a      	str	r2, [r3, #32]
 800cefe:	e006      	b.n	800cf0e <USB_EPStartXfer+0x264>
            }
            else
            {
              len = ep->xfer_len_db;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	6a1b      	ldr	r3, [r3, #32]
 800cf04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d16b      	bne.n	800cfee <USB_EPStartXfer+0x344>
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	61bb      	str	r3, [r7, #24]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	461a      	mov	r2, r3
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	4413      	add	r3, r2
 800cf28:	61bb      	str	r3, [r7, #24]
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	00da      	lsls	r2, r3, #3
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	4413      	add	r3, r2
 800cf34:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cf38:	617b      	str	r3, [r7, #20]
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	881b      	ldrh	r3, [r3, #0]
 800cf3e:	b29b      	uxth	r3, r3
 800cf40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	697b      	ldr	r3, [r7, #20]
 800cf48:	801a      	strh	r2, [r3, #0]
 800cf4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d10a      	bne.n	800cf68 <USB_EPStartXfer+0x2be>
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	881b      	ldrh	r3, [r3, #0]
 800cf56:	b29b      	uxth	r3, r3
 800cf58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf60:	b29a      	uxth	r2, r3
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	801a      	strh	r2, [r3, #0]
 800cf66:	e05d      	b.n	800d024 <USB_EPStartXfer+0x37a>
 800cf68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf6c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf6e:	d81c      	bhi.n	800cfaa <USB_EPStartXfer+0x300>
 800cf70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf74:	085b      	lsrs	r3, r3, #1
 800cf76:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf7e:	f003 0301 	and.w	r3, r3, #1
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d004      	beq.n	800cf90 <USB_EPStartXfer+0x2e6>
 800cf86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cf8a:	3301      	adds	r3, #1
 800cf8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf90:	697b      	ldr	r3, [r7, #20]
 800cf92:	881b      	ldrh	r3, [r3, #0]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	029b      	lsls	r3, r3, #10
 800cf9e:	b29b      	uxth	r3, r3
 800cfa0:	4313      	orrs	r3, r2
 800cfa2:	b29a      	uxth	r2, r3
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	801a      	strh	r2, [r3, #0]
 800cfa8:	e03c      	b.n	800d024 <USB_EPStartXfer+0x37a>
 800cfaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfae:	095b      	lsrs	r3, r3, #5
 800cfb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cfb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cfb8:	f003 031f 	and.w	r3, r3, #31
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <USB_EPStartXfer+0x320>
 800cfc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfc4:	3b01      	subs	r3, #1
 800cfc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cfca:	697b      	ldr	r3, [r7, #20]
 800cfcc:	881b      	ldrh	r3, [r3, #0]
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	029b      	lsls	r3, r3, #10
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	b29b      	uxth	r3, r3
 800cfde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cfe2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	801a      	strh	r2, [r3, #0]
 800cfec:	e01a      	b.n	800d024 <USB_EPStartXfer+0x37a>
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	785b      	ldrb	r3, [r3, #1]
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d116      	bne.n	800d024 <USB_EPStartXfer+0x37a>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	623b      	str	r3, [r7, #32]
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d000:	b29b      	uxth	r3, r3
 800d002:	461a      	mov	r2, r3
 800d004:	6a3b      	ldr	r3, [r7, #32]
 800d006:	4413      	add	r3, r2
 800d008:	623b      	str	r3, [r7, #32]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	00da      	lsls	r2, r3, #3
 800d010:	6a3b      	ldr	r3, [r7, #32]
 800d012:	4413      	add	r3, r2
 800d014:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d018:	61fb      	str	r3, [r7, #28]
 800d01a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d01e:	b29a      	uxth	r2, r3
 800d020:	69fb      	ldr	r3, [r7, #28]
 800d022:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	891b      	ldrh	r3, [r3, #8]
 800d028:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	6959      	ldr	r1, [r3, #20]
 800d030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d034:	b29b      	uxth	r3, r3
 800d036:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fd19 	bl	800da72 <USB_WritePMA>
 800d040:	e2e2      	b.n	800d608 <USB_EPStartXfer+0x95e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	785b      	ldrb	r3, [r3, #1]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d16b      	bne.n	800d122 <USB_EPStartXfer+0x478>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d054:	b29b      	uxth	r3, r3
 800d056:	461a      	mov	r2, r3
 800d058:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d05a:	4413      	add	r3, r2
 800d05c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	00da      	lsls	r2, r3, #3
 800d064:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d066:	4413      	add	r3, r2
 800d068:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d06c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d06e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d070:	881b      	ldrh	r3, [r3, #0]
 800d072:	b29b      	uxth	r3, r3
 800d074:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d078:	b29a      	uxth	r2, r3
 800d07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d07c:	801a      	strh	r2, [r3, #0]
 800d07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d082:	2b00      	cmp	r3, #0
 800d084:	d10a      	bne.n	800d09c <USB_EPStartXfer+0x3f2>
 800d086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d088:	881b      	ldrh	r3, [r3, #0]
 800d08a:	b29b      	uxth	r3, r3
 800d08c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d094:	b29a      	uxth	r2, r3
 800d096:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d098:	801a      	strh	r2, [r3, #0]
 800d09a:	e05d      	b.n	800d158 <USB_EPStartXfer+0x4ae>
 800d09c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0a0:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0a2:	d81c      	bhi.n	800d0de <USB_EPStartXfer+0x434>
 800d0a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0a8:	085b      	lsrs	r3, r3, #1
 800d0aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0b2:	f003 0301 	and.w	r3, r3, #1
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d004      	beq.n	800d0c4 <USB_EPStartXfer+0x41a>
 800d0ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0be:	3301      	adds	r3, #1
 800d0c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0c6:	881b      	ldrh	r3, [r3, #0]
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	029b      	lsls	r3, r3, #10
 800d0d2:	b29b      	uxth	r3, r3
 800d0d4:	4313      	orrs	r3, r2
 800d0d6:	b29a      	uxth	r2, r3
 800d0d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0da:	801a      	strh	r2, [r3, #0]
 800d0dc:	e03c      	b.n	800d158 <USB_EPStartXfer+0x4ae>
 800d0de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0e2:	095b      	lsrs	r3, r3, #5
 800d0e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d0ec:	f003 031f 	and.w	r3, r3, #31
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d104      	bne.n	800d0fe <USB_EPStartXfer+0x454>
 800d0f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d0fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d100:	881b      	ldrh	r3, [r3, #0]
 800d102:	b29a      	uxth	r2, r3
 800d104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d108:	b29b      	uxth	r3, r3
 800d10a:	029b      	lsls	r3, r3, #10
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	4313      	orrs	r3, r2
 800d110:	b29b      	uxth	r3, r3
 800d112:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d116:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d11e:	801a      	strh	r2, [r3, #0]
 800d120:	e01a      	b.n	800d158 <USB_EPStartXfer+0x4ae>
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	785b      	ldrb	r3, [r3, #1]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d116      	bne.n	800d158 <USB_EPStartXfer+0x4ae>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d134:	b29b      	uxth	r3, r3
 800d136:	461a      	mov	r2, r3
 800d138:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d13a:	4413      	add	r3, r2
 800d13c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d13e:	683b      	ldr	r3, [r7, #0]
 800d140:	781b      	ldrb	r3, [r3, #0]
 800d142:	00da      	lsls	r2, r3, #3
 800d144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d146:	4413      	add	r3, r2
 800d148:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d14c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d14e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d152:	b29a      	uxth	r2, r3
 800d154:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d156:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	891b      	ldrh	r3, [r3, #8]
 800d15c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	6959      	ldr	r1, [r3, #20]
 800d164:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d168:	b29b      	uxth	r3, r3
 800d16a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fc7f 	bl	800da72 <USB_WritePMA>
            ep->xfer_buff += len;
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	695a      	ldr	r2, [r3, #20]
 800d178:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d17c:	441a      	add	r2, r3
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	6a1a      	ldr	r2, [r3, #32]
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	429a      	cmp	r2, r3
 800d18c:	d907      	bls.n	800d19e <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	6a1a      	ldr	r2, [r3, #32]
 800d192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d196:	1ad2      	subs	r2, r2, r3
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	621a      	str	r2, [r3, #32]
 800d19c:	e006      	b.n	800d1ac <USB_EPStartXfer+0x502>
            }
            else
            {
              len = ep->xfer_len_db;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
              ep->xfer_len_db = 0U;
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	785b      	ldrb	r3, [r3, #1]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d16b      	bne.n	800d290 <USB_EPStartXfer+0x5e6>
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1c2:	b29b      	uxth	r3, r3
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c8:	4413      	add	r3, r2
 800d1ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	00da      	lsls	r2, r3, #3
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1da:	637b      	str	r3, [r7, #52]	@ 0x34
 800d1dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1de:	881b      	ldrh	r3, [r3, #0]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1ea:	801a      	strh	r2, [r3, #0]
 800d1ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d10a      	bne.n	800d20a <USB_EPStartXfer+0x560>
 800d1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1f6:	881b      	ldrh	r3, [r3, #0]
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d1fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d202:	b29a      	uxth	r2, r3
 800d204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d206:	801a      	strh	r2, [r3, #0]
 800d208:	e05b      	b.n	800d2c2 <USB_EPStartXfer+0x618>
 800d20a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d20e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d210:	d81c      	bhi.n	800d24c <USB_EPStartXfer+0x5a2>
 800d212:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d216:	085b      	lsrs	r3, r3, #1
 800d218:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d21c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d220:	f003 0301 	and.w	r3, r3, #1
 800d224:	2b00      	cmp	r3, #0
 800d226:	d004      	beq.n	800d232 <USB_EPStartXfer+0x588>
 800d228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d22c:	3301      	adds	r3, #1
 800d22e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d234:	881b      	ldrh	r3, [r3, #0]
 800d236:	b29a      	uxth	r2, r3
 800d238:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	029b      	lsls	r3, r3, #10
 800d240:	b29b      	uxth	r3, r3
 800d242:	4313      	orrs	r3, r2
 800d244:	b29a      	uxth	r2, r3
 800d246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d248:	801a      	strh	r2, [r3, #0]
 800d24a:	e03a      	b.n	800d2c2 <USB_EPStartXfer+0x618>
 800d24c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d250:	095b      	lsrs	r3, r3, #5
 800d252:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d256:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d25a:	f003 031f 	and.w	r3, r3, #31
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d104      	bne.n	800d26c <USB_EPStartXfer+0x5c2>
 800d262:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d266:	3b01      	subs	r3, #1
 800d268:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d26c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d26e:	881b      	ldrh	r3, [r3, #0]
 800d270:	b29a      	uxth	r2, r3
 800d272:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d276:	b29b      	uxth	r3, r3
 800d278:	029b      	lsls	r3, r3, #10
 800d27a:	b29b      	uxth	r3, r3
 800d27c:	4313      	orrs	r3, r2
 800d27e:	b29b      	uxth	r3, r3
 800d280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d288:	b29a      	uxth	r2, r3
 800d28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d28c:	801a      	strh	r2, [r3, #0]
 800d28e:	e018      	b.n	800d2c2 <USB_EPStartXfer+0x618>
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	785b      	ldrb	r3, [r3, #1]
 800d294:	2b01      	cmp	r3, #1
 800d296:	d114      	bne.n	800d2c2 <USB_EPStartXfer+0x618>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2a4:	4413      	add	r3, r2
 800d2a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	781b      	ldrb	r3, [r3, #0]
 800d2ac:	00da      	lsls	r2, r3, #3
 800d2ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d2b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2bc:	b29a      	uxth	r2, r3
 800d2be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2c0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	895b      	ldrh	r3, [r3, #10]
 800d2c6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2ca:	683b      	ldr	r3, [r7, #0]
 800d2cc:	6959      	ldr	r1, [r3, #20]
 800d2ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 fbca 	bl	800da72 <USB_WritePMA>
 800d2de:	e193      	b.n	800d608 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	6a1b      	ldr	r3, [r3, #32]
 800d2e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4413      	add	r3, r2
 800d2f2:	881b      	ldrh	r3, [r3, #0]
 800d2f4:	b29b      	uxth	r3, r3
 800d2f6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d2fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2fe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	441a      	add	r2, r3
 800d30c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d310:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d314:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d318:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d31c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d320:	b29b      	uxth	r3, r3
 800d322:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d32e:	b29b      	uxth	r3, r3
 800d330:	461a      	mov	r2, r3
 800d332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d334:	4413      	add	r3, r2
 800d336:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d338:	683b      	ldr	r3, [r7, #0]
 800d33a:	781b      	ldrb	r3, [r3, #0]
 800d33c:	00da      	lsls	r2, r3, #3
 800d33e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d340:	4413      	add	r3, r2
 800d342:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d346:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d348:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d350:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	891b      	ldrh	r3, [r3, #8]
 800d356:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	6959      	ldr	r1, [r3, #20]
 800d35e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d362:	b29b      	uxth	r3, r3
 800d364:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f000 fb82 	bl	800da72 <USB_WritePMA>
 800d36e:	e14b      	b.n	800d608 <USB_EPStartXfer+0x95e>
        }
      }
      else /* Manage isochronous double buffer IN mode */
      {
        /* Each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	6a1a      	ldr	r2, [r3, #32]
 800d374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d378:	1ad2      	subs	r2, r2, r3
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d37e:	687a      	ldr	r2, [r7, #4]
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	009b      	lsls	r3, r3, #2
 800d386:	4413      	add	r3, r2
 800d388:	881b      	ldrh	r3, [r3, #0]
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d390:	2b00      	cmp	r3, #0
 800d392:	f000 809a 	beq.w	800d4ca <USB_EPStartXfer+0x820>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	673b      	str	r3, [r7, #112]	@ 0x70
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	785b      	ldrb	r3, [r3, #1]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d16b      	bne.n	800d47a <USB_EPStartXfer+0x7d0>
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3ac:	b29b      	uxth	r3, r3
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3b2:	4413      	add	r3, r2
 800d3b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	00da      	lsls	r2, r3, #3
 800d3bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3be:	4413      	add	r3, r2
 800d3c0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3c4:	667b      	str	r3, [r7, #100]	@ 0x64
 800d3c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3c8:	881b      	ldrh	r3, [r3, #0]
 800d3ca:	b29b      	uxth	r3, r3
 800d3cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3d4:	801a      	strh	r2, [r3, #0]
 800d3d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d10a      	bne.n	800d3f4 <USB_EPStartXfer+0x74a>
 800d3de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3ec:	b29a      	uxth	r2, r3
 800d3ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3f0:	801a      	strh	r2, [r3, #0]
 800d3f2:	e05b      	b.n	800d4ac <USB_EPStartXfer+0x802>
 800d3f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d3f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3fa:	d81c      	bhi.n	800d436 <USB_EPStartXfer+0x78c>
 800d3fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d400:	085b      	lsrs	r3, r3, #1
 800d402:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d406:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d004      	beq.n	800d41c <USB_EPStartXfer+0x772>
 800d412:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d416:	3301      	adds	r3, #1
 800d418:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d41c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d41e:	881b      	ldrh	r3, [r3, #0]
 800d420:	b29a      	uxth	r2, r3
 800d422:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d426:	b29b      	uxth	r3, r3
 800d428:	029b      	lsls	r3, r3, #10
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	4313      	orrs	r3, r2
 800d42e:	b29a      	uxth	r2, r3
 800d430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d432:	801a      	strh	r2, [r3, #0]
 800d434:	e03a      	b.n	800d4ac <USB_EPStartXfer+0x802>
 800d436:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d43a:	095b      	lsrs	r3, r3, #5
 800d43c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d444:	f003 031f 	and.w	r3, r3, #31
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d104      	bne.n	800d456 <USB_EPStartXfer+0x7ac>
 800d44c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d450:	3b01      	subs	r3, #1
 800d452:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d458:	881b      	ldrh	r3, [r3, #0]
 800d45a:	b29a      	uxth	r2, r3
 800d45c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d460:	b29b      	uxth	r3, r3
 800d462:	029b      	lsls	r3, r3, #10
 800d464:	b29b      	uxth	r3, r3
 800d466:	4313      	orrs	r3, r2
 800d468:	b29b      	uxth	r3, r3
 800d46a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d46e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d472:	b29a      	uxth	r2, r3
 800d474:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d476:	801a      	strh	r2, [r3, #0]
 800d478:	e018      	b.n	800d4ac <USB_EPStartXfer+0x802>
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	785b      	ldrb	r3, [r3, #1]
 800d47e:	2b01      	cmp	r3, #1
 800d480:	d114      	bne.n	800d4ac <USB_EPStartXfer+0x802>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d488:	b29b      	uxth	r3, r3
 800d48a:	461a      	mov	r2, r3
 800d48c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d48e:	4413      	add	r3, r2
 800d490:	673b      	str	r3, [r7, #112]	@ 0x70
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	00da      	lsls	r2, r3, #3
 800d498:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d49a:	4413      	add	r3, r2
 800d49c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d4a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d4a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4a6:	b29a      	uxth	r2, r3
 800d4a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d4aa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	895b      	ldrh	r3, [r3, #10]
 800d4b0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	6959      	ldr	r1, [r3, #20]
 800d4b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fad5 	bl	800da72 <USB_WritePMA>
 800d4c8:	e09e      	b.n	800d608 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4ca:	683b      	ldr	r3, [r7, #0]
 800d4cc:	785b      	ldrb	r3, [r3, #1]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d16b      	bne.n	800d5aa <USB_EPStartXfer+0x900>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4e2:	4413      	add	r3, r2
 800d4e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	00da      	lsls	r2, r3, #3
 800d4ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d4ee:	4413      	add	r3, r2
 800d4f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d4f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d4f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	b29b      	uxth	r3, r3
 800d4fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d500:	b29a      	uxth	r2, r3
 800d502:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d504:	801a      	strh	r2, [r3, #0]
 800d506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d10a      	bne.n	800d524 <USB_EPStartXfer+0x87a>
 800d50e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	b29b      	uxth	r3, r3
 800d514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d51c:	b29a      	uxth	r2, r3
 800d51e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d520:	801a      	strh	r2, [r3, #0]
 800d522:	e063      	b.n	800d5ec <USB_EPStartXfer+0x942>
 800d524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d528:	2b3e      	cmp	r3, #62	@ 0x3e
 800d52a:	d81c      	bhi.n	800d566 <USB_EPStartXfer+0x8bc>
 800d52c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d530:	085b      	lsrs	r3, r3, #1
 800d532:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d004      	beq.n	800d54c <USB_EPStartXfer+0x8a2>
 800d542:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d546:	3301      	adds	r3, #1
 800d548:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d54c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d54e:	881b      	ldrh	r3, [r3, #0]
 800d550:	b29a      	uxth	r2, r3
 800d552:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d556:	b29b      	uxth	r3, r3
 800d558:	029b      	lsls	r3, r3, #10
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	4313      	orrs	r3, r2
 800d55e:	b29a      	uxth	r2, r3
 800d560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d562:	801a      	strh	r2, [r3, #0]
 800d564:	e042      	b.n	800d5ec <USB_EPStartXfer+0x942>
 800d566:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d56a:	095b      	lsrs	r3, r3, #5
 800d56c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d574:	f003 031f 	and.w	r3, r3, #31
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d104      	bne.n	800d586 <USB_EPStartXfer+0x8dc>
 800d57c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d580:	3b01      	subs	r3, #1
 800d582:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800d586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800d590:	b29b      	uxth	r3, r3
 800d592:	029b      	lsls	r3, r3, #10
 800d594:	b29b      	uxth	r3, r3
 800d596:	4313      	orrs	r3, r2
 800d598:	b29b      	uxth	r3, r3
 800d59a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d59e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5a2:	b29a      	uxth	r2, r3
 800d5a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5a6:	801a      	strh	r2, [r3, #0]
 800d5a8:	e020      	b.n	800d5ec <USB_EPStartXfer+0x942>
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	785b      	ldrb	r3, [r3, #1]
 800d5ae:	2b01      	cmp	r3, #1
 800d5b0:	d11c      	bne.n	800d5ec <USB_EPStartXfer+0x942>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d5be:	b29b      	uxth	r3, r3
 800d5c0:	461a      	mov	r2, r3
 800d5c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	781b      	ldrb	r3, [r3, #0]
 800d5d0:	00da      	lsls	r2, r3, #3
 800d5d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d5d6:	4413      	add	r3, r2
 800d5d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d5dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d5e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5e4:	b29a      	uxth	r2, r3
 800d5e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d5ea:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	891b      	ldrh	r3, [r3, #8]
 800d5f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	6959      	ldr	r1, [r3, #20]
 800d5f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d5fc:	b29b      	uxth	r3, r3
 800d5fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa35 	bl	800da72 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	781b      	ldrb	r3, [r3, #0]
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	4413      	add	r3, r2
 800d612:	881b      	ldrh	r3, [r3, #0]
 800d614:	b29b      	uxth	r3, r3
 800d616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d61a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d61e:	817b      	strh	r3, [r7, #10]
 800d620:	897b      	ldrh	r3, [r7, #10]
 800d622:	f083 0310 	eor.w	r3, r3, #16
 800d626:	817b      	strh	r3, [r7, #10]
 800d628:	897b      	ldrh	r3, [r7, #10]
 800d62a:	f083 0320 	eor.w	r3, r3, #32
 800d62e:	817b      	strh	r3, [r7, #10]
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	781b      	ldrb	r3, [r3, #0]
 800d636:	009b      	lsls	r3, r3, #2
 800d638:	441a      	add	r2, r3
 800d63a:	897b      	ldrh	r3, [r7, #10]
 800d63c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d640:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d64c:	b29b      	uxth	r3, r3
 800d64e:	8013      	strh	r3, [r2, #0]
 800d650:	e0d5      	b.n	800d7fe <USB_EPStartXfer+0xb54>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	7b1b      	ldrb	r3, [r3, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d156      	bne.n	800d708 <USB_EPStartXfer+0xa5e>
    {
      if ((ep->xfer_len == 0U) && (ep->type == EP_TYPE_CTRL))
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d122      	bne.n	800d6a8 <USB_EPStartXfer+0x9fe>
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	78db      	ldrb	r3, [r3, #3]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d11e      	bne.n	800d6a8 <USB_EPStartXfer+0x9fe>
      {
        /* This is a status out stage set the OUT_STATUS */
        PCD_SET_OUT_STATUS(USBx, ep->num);
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	781b      	ldrb	r3, [r3, #0]
 800d670:	009b      	lsls	r3, r3, #2
 800d672:	4413      	add	r3, r2
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	b29b      	uxth	r3, r3
 800d678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d67c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d680:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800d684:	687a      	ldr	r2, [r7, #4]
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	009b      	lsls	r3, r3, #2
 800d68c:	441a      	add	r2, r3
 800d68e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800d692:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d696:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d69a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d69e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	8013      	strh	r3, [r2, #0]
 800d6a6:	e01d      	b.n	800d6e4 <USB_EPStartXfer+0xa3a>
      }
      else
      {
        PCD_CLEAR_OUT_STATUS(USBx, ep->num);
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	009b      	lsls	r3, r3, #2
 800d6b0:	4413      	add	r3, r2
 800d6b2:	881b      	ldrh	r3, [r3, #0]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d6ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6be:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	441a      	add	r2, r3
 800d6cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	@ 0x8c
 800d6d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6d8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	8013      	strh	r3, [r2, #0]
      }

      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	699a      	ldr	r2, [r3, #24]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	691b      	ldr	r3, [r3, #16]
 800d6ec:	429a      	cmp	r2, r3
 800d6ee:	d907      	bls.n	800d700 <USB_EPStartXfer+0xa56>
      {
        ep->xfer_len -= ep->maxpacket;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	699a      	ldr	r2, [r3, #24]
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	691b      	ldr	r3, [r3, #16]
 800d6f8:	1ad2      	subs	r2, r2, r3
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	619a      	str	r2, [r3, #24]
 800d6fe:	e054      	b.n	800d7aa <USB_EPStartXfer+0xb00>
      }
      else
      {
        ep->xfer_len = 0U;
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	2200      	movs	r2, #0
 800d704:	619a      	str	r2, [r3, #24]
 800d706:	e050      	b.n	800d7aa <USB_EPStartXfer+0xb00>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	78db      	ldrb	r3, [r3, #3]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d142      	bne.n	800d796 <USB_EPStartXfer+0xaec>
      {
        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	69db      	ldr	r3, [r3, #28]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d048      	beq.n	800d7aa <USB_EPStartXfer+0xb00>
        {
          /* Update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	4413      	add	r3, r2
 800d722:	881b      	ldrh	r3, [r3, #0]
 800d724:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92

          /* Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d728:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d72c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d730:	2b00      	cmp	r3, #0
 800d732:	d005      	beq.n	800d740 <USB_EPStartXfer+0xa96>
 800d734:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10b      	bne.n	800d758 <USB_EPStartXfer+0xaae>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d740:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d12e      	bne.n	800d7aa <USB_EPStartXfer+0xb00>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d74c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800d750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d754:	2b00      	cmp	r3, #0
 800d756:	d128      	bne.n	800d7aa <USB_EPStartXfer+0xb00>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	781b      	ldrb	r3, [r3, #0]
 800d75e:	009b      	lsls	r3, r3, #2
 800d760:	4413      	add	r3, r2
 800d762:	881b      	ldrh	r3, [r3, #0]
 800d764:	b29b      	uxth	r3, r3
 800d766:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d76a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d76e:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 800d772:	687a      	ldr	r2, [r7, #4]
 800d774:	683b      	ldr	r3, [r7, #0]
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	441a      	add	r2, r3
 800d77c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	@ 0x90
 800d780:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d784:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d788:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d78c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d790:	b29b      	uxth	r3, r3
 800d792:	8013      	strh	r3, [r2, #0]
 800d794:	e009      	b.n	800d7aa <USB_EPStartXfer+0xb00>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	78db      	ldrb	r3, [r3, #3]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d103      	bne.n	800d7a6 <USB_EPStartXfer+0xafc>
      {
        /* Only single packet transfer supported in FS */
        ep->xfer_len = 0U;
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	619a      	str	r2, [r3, #24]
 800d7a4:	e001      	b.n	800d7aa <USB_EPStartXfer+0xb00>
      }
      else
      {
        return HAL_ERROR;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	e02a      	b.n	800d800 <USB_EPStartXfer+0xb56>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	781b      	ldrb	r3, [r3, #0]
 800d7b0:	009b      	lsls	r3, r3, #2
 800d7b2:	4413      	add	r3, r2
 800d7b4:	881b      	ldrh	r3, [r3, #0]
 800d7b6:	b29b      	uxth	r3, r3
 800d7b8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d7bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7c0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d7c4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d7c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d7cc:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d7d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d7d4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d7d8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	441a      	add	r2, r3
 800d7e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800d7ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d7fe:	2300      	movs	r3, #0
}
 800d800:	4618      	mov	r0, r3
 800d802:	37b0      	adds	r7, #176	@ 0xb0
 800d804:	46bd      	mov	sp, r7
 800d806:	bd80      	pop	{r7, pc}

0800d808 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d808:	b480      	push	{r7}
 800d80a:	b085      	sub	sp, #20
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	785b      	ldrb	r3, [r3, #1]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d020      	beq.n	800d85c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d81a:	687a      	ldr	r2, [r7, #4]
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	4413      	add	r3, r2
 800d824:	881b      	ldrh	r3, [r3, #0]
 800d826:	b29b      	uxth	r3, r3
 800d828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d82c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d830:	81bb      	strh	r3, [r7, #12]
 800d832:	89bb      	ldrh	r3, [r7, #12]
 800d834:	f083 0310 	eor.w	r3, r3, #16
 800d838:	81bb      	strh	r3, [r7, #12]
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	009b      	lsls	r3, r3, #2
 800d842:	441a      	add	r2, r3
 800d844:	89bb      	ldrh	r3, [r7, #12]
 800d846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d84a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d84e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d856:	b29b      	uxth	r3, r3
 800d858:	8013      	strh	r3, [r2, #0]
 800d85a:	e01f      	b.n	800d89c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	781b      	ldrb	r3, [r3, #0]
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	881b      	ldrh	r3, [r3, #0]
 800d868:	b29b      	uxth	r3, r3
 800d86a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d86e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d872:	81fb      	strh	r3, [r7, #14]
 800d874:	89fb      	ldrh	r3, [r7, #14]
 800d876:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d87a:	81fb      	strh	r3, [r7, #14]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	009b      	lsls	r3, r3, #2
 800d884:	441a      	add	r2, r3
 800d886:	89fb      	ldrh	r3, [r7, #14]
 800d888:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d88c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d890:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d894:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d898:	b29b      	uxth	r3, r3
 800d89a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d89c:	2300      	movs	r3, #0
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	3714      	adds	r7, #20
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr

0800d8aa <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d8aa:	b480      	push	{r7}
 800d8ac:	b087      	sub	sp, #28
 800d8ae:	af00      	add	r7, sp, #0
 800d8b0:	6078      	str	r0, [r7, #4]
 800d8b2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	785b      	ldrb	r3, [r3, #1]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d04c      	beq.n	800d956 <USB_EPClearStall+0xac>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d8bc:	687a      	ldr	r2, [r7, #4]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	781b      	ldrb	r3, [r3, #0]
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	4413      	add	r3, r2
 800d8c6:	881b      	ldrh	r3, [r3, #0]
 800d8c8:	823b      	strh	r3, [r7, #16]
 800d8ca:	8a3b      	ldrh	r3, [r7, #16]
 800d8cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d01b      	beq.n	800d90c <USB_EPClearStall+0x62>
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8ea:	81fb      	strh	r3, [r7, #14]
 800d8ec:	687a      	ldr	r2, [r7, #4]
 800d8ee:	683b      	ldr	r3, [r7, #0]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	441a      	add	r2, r3
 800d8f6:	89fb      	ldrh	r3, [r7, #14]
 800d8f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d904:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d908:	b29b      	uxth	r3, r3
 800d90a:	8013      	strh	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	78db      	ldrb	r3, [r3, #3]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d06c      	beq.n	800d9ee <USB_EPClearStall+0x144>
    {
      /* Configure NAK status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4413      	add	r3, r2
 800d91e:	881b      	ldrh	r3, [r3, #0]
 800d920:	b29b      	uxth	r3, r3
 800d922:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d92a:	81bb      	strh	r3, [r7, #12]
 800d92c:	89bb      	ldrh	r3, [r7, #12]
 800d92e:	f083 0320 	eor.w	r3, r3, #32
 800d932:	81bb      	strh	r3, [r7, #12]
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	441a      	add	r2, r3
 800d93e:	89bb      	ldrh	r3, [r7, #12]
 800d940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d94c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d950:	b29b      	uxth	r3, r3
 800d952:	8013      	strh	r3, [r2, #0]
 800d954:	e04b      	b.n	800d9ee <USB_EPClearStall+0x144>
    }
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	881b      	ldrh	r3, [r3, #0]
 800d962:	82fb      	strh	r3, [r7, #22]
 800d964:	8afb      	ldrh	r3, [r7, #22]
 800d966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d01b      	beq.n	800d9a6 <USB_EPClearStall+0xfc>
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	4413      	add	r3, r2
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d984:	82bb      	strh	r3, [r7, #20]
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	009b      	lsls	r3, r3, #2
 800d98e:	441a      	add	r2, r3
 800d990:	8abb      	ldrh	r3, [r7, #20]
 800d992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d99a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d99e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9a2:	b29b      	uxth	r3, r3
 800d9a4:	8013      	strh	r3, [r2, #0]

    /* Configure VALID status for the Endpoint */
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	009b      	lsls	r3, r3, #2
 800d9ae:	4413      	add	r3, r2
 800d9b0:	881b      	ldrh	r3, [r3, #0]
 800d9b2:	b29b      	uxth	r3, r3
 800d9b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d9b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9bc:	827b      	strh	r3, [r7, #18]
 800d9be:	8a7b      	ldrh	r3, [r7, #18]
 800d9c0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d9c4:	827b      	strh	r3, [r7, #18]
 800d9c6:	8a7b      	ldrh	r3, [r7, #18]
 800d9c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d9cc:	827b      	strh	r3, [r7, #18]
 800d9ce:	687a      	ldr	r2, [r7, #4]
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	441a      	add	r2, r3
 800d9d8:	8a7b      	ldrh	r3, [r7, #18]
 800d9da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d9ee:	2300      	movs	r3, #0
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	371c      	adds	r7, #28
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fa:	4770      	bx	lr

0800d9fc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b083      	sub	sp, #12
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800da08:	78fb      	ldrb	r3, [r7, #3]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d103      	bne.n	800da16 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2280      	movs	r2, #128	@ 0x80
 800da12:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800da16:	2300      	movs	r3, #0
}
 800da18:	4618      	mov	r0, r3
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800da24:	b480      	push	{r7}
 800da26:	b083      	sub	sp, #12
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800da32:	b29b      	uxth	r3, r3
 800da34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da3c:	b29a      	uxth	r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	370c      	adds	r7, #12
 800da4a:	46bd      	mov	sp, r7
 800da4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da50:	4770      	bx	lr

0800da52 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800da52:	b480      	push	{r7}
 800da54:	b085      	sub	sp, #20
 800da56:	af00      	add	r7, sp, #0
 800da58:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800da60:	b29b      	uxth	r3, r3
 800da62:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800da64:	68fb      	ldr	r3, [r7, #12]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800da72:	b480      	push	{r7}
 800da74:	b08b      	sub	sp, #44	@ 0x2c
 800da76:	af00      	add	r7, sp, #0
 800da78:	60f8      	str	r0, [r7, #12]
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	4611      	mov	r1, r2
 800da7e:	461a      	mov	r2, r3
 800da80:	460b      	mov	r3, r1
 800da82:	80fb      	strh	r3, [r7, #6]
 800da84:	4613      	mov	r3, r2
 800da86:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800da88:	88bb      	ldrh	r3, [r7, #4]
 800da8a:	3301      	adds	r3, #1
 800da8c:	085b      	lsrs	r3, r3, #1
 800da8e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800da98:	88fa      	ldrh	r2, [r7, #6]
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	4413      	add	r3, r2
 800da9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800daa2:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800daa4:	69bb      	ldr	r3, [r7, #24]
 800daa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800daa8:	e01b      	b.n	800dae2 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800daaa:	69fb      	ldr	r3, [r7, #28]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	3301      	adds	r3, #1
 800dab4:	781b      	ldrb	r3, [r3, #0]
 800dab6:	021b      	lsls	r3, r3, #8
 800dab8:	b21a      	sxth	r2, r3
 800daba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dabe:	4313      	orrs	r3, r2
 800dac0:	b21b      	sxth	r3, r3
 800dac2:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800dac4:	6a3b      	ldr	r3, [r7, #32]
 800dac6:	8a7a      	ldrh	r2, [r7, #18]
 800dac8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800daca:	6a3b      	ldr	r3, [r7, #32]
 800dacc:	3302      	adds	r3, #2
 800dace:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800dad0:	69fb      	ldr	r3, [r7, #28]
 800dad2:	3301      	adds	r3, #1
 800dad4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800dad6:	69fb      	ldr	r3, [r7, #28]
 800dad8:	3301      	adds	r3, #1
 800dada:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dade:	3b01      	subs	r3, #1
 800dae0:	627b      	str	r3, [r7, #36]	@ 0x24
 800dae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d1e0      	bne.n	800daaa <USB_WritePMA+0x38>
  }
}
 800dae8:	bf00      	nop
 800daea:	bf00      	nop
 800daec:	372c      	adds	r7, #44	@ 0x2c
 800daee:	46bd      	mov	sp, r7
 800daf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf4:	4770      	bx	lr

0800daf6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800daf6:	b480      	push	{r7}
 800daf8:	b08b      	sub	sp, #44	@ 0x2c
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	60f8      	str	r0, [r7, #12]
 800dafe:	60b9      	str	r1, [r7, #8]
 800db00:	4611      	mov	r1, r2
 800db02:	461a      	mov	r2, r3
 800db04:	460b      	mov	r3, r1
 800db06:	80fb      	strh	r3, [r7, #6]
 800db08:	4613      	mov	r3, r2
 800db0a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800db0c:	88bb      	ldrh	r3, [r7, #4]
 800db0e:	085b      	lsrs	r3, r3, #1
 800db10:	b29b      	uxth	r3, r3
 800db12:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800db1c:	88fa      	ldrh	r2, [r7, #6]
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	4413      	add	r3, r2
 800db22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db26:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800db2c:	e018      	b.n	800db60 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800db2e:	6a3b      	ldr	r3, [r7, #32]
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	b29b      	uxth	r3, r3
 800db34:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800db36:	6a3b      	ldr	r3, [r7, #32]
 800db38:	3302      	adds	r3, #2
 800db3a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	69fb      	ldr	r3, [r7, #28]
 800db42:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800db44:	69fb      	ldr	r3, [r7, #28]
 800db46:	3301      	adds	r3, #1
 800db48:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	0a1b      	lsrs	r3, r3, #8
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800db54:	69fb      	ldr	r3, [r7, #28]
 800db56:	3301      	adds	r3, #1
 800db58:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800db5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5c:	3b01      	subs	r3, #1
 800db5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db62:	2b00      	cmp	r3, #0
 800db64:	d1e3      	bne.n	800db2e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800db66:	88bb      	ldrh	r3, [r7, #4]
 800db68:	f003 0301 	and.w	r3, r3, #1
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d007      	beq.n	800db82 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800db72:	6a3b      	ldr	r3, [r7, #32]
 800db74:	881b      	ldrh	r3, [r3, #0]
 800db76:	b29b      	uxth	r3, r3
 800db78:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	b2da      	uxtb	r2, r3
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	701a      	strb	r2, [r3, #0]
  }
}
 800db82:	bf00      	nop
 800db84:	372c      	adds	r7, #44	@ 0x2c
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr
	...

0800db90 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800db90:	b580      	push	{r7, lr}
 800db92:	b084      	sub	sp, #16
 800db94:	af00      	add	r7, sp, #0
 800db96:	6078      	str	r0, [r7, #4]
 800db98:	460b      	mov	r3, r1
 800db9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800db9c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800dba0:	f007 fc5c 	bl	801545c <USBD_static_malloc>
 800dba4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d109      	bne.n	800dbc0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	32b0      	adds	r2, #176	@ 0xb0
 800dbb6:	2100      	movs	r1, #0
 800dbb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dbbc:	2302      	movs	r3, #2
 800dbbe:	e0d4      	b.n	800dd6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dbc0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800dbc4:	2100      	movs	r1, #0
 800dbc6:	68f8      	ldr	r0, [r7, #12]
 800dbc8:	f008 f938 	bl	8015e3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	32b0      	adds	r2, #176	@ 0xb0
 800dbd6:	68f9      	ldr	r1, [r7, #12]
 800dbd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	32b0      	adds	r2, #176	@ 0xb0
 800dbe6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	7c1b      	ldrb	r3, [r3, #16]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d138      	bne.n	800dc6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dbf8:	4b5e      	ldr	r3, [pc, #376]	@ (800dd74 <USBD_CDC_Init+0x1e4>)
 800dbfa:	7819      	ldrb	r1, [r3, #0]
 800dbfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc00:	2202      	movs	r2, #2
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f007 fad1 	bl	80151aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dc08:	4b5a      	ldr	r3, [pc, #360]	@ (800dd74 <USBD_CDC_Init+0x1e4>)
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	f003 020f 	and.w	r2, r3, #15
 800dc10:	6879      	ldr	r1, [r7, #4]
 800dc12:	4613      	mov	r3, r2
 800dc14:	009b      	lsls	r3, r3, #2
 800dc16:	4413      	add	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	440b      	add	r3, r1
 800dc1c:	3324      	adds	r3, #36	@ 0x24
 800dc1e:	2201      	movs	r2, #1
 800dc20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dc22:	4b55      	ldr	r3, [pc, #340]	@ (800dd78 <USBD_CDC_Init+0x1e8>)
 800dc24:	7819      	ldrb	r1, [r3, #0]
 800dc26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dc2a:	2202      	movs	r2, #2
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f007 fabc 	bl	80151aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dc32:	4b51      	ldr	r3, [pc, #324]	@ (800dd78 <USBD_CDC_Init+0x1e8>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	f003 020f 	and.w	r2, r3, #15
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	009b      	lsls	r3, r3, #2
 800dc40:	4413      	add	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	440b      	add	r3, r1
 800dc46:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dc4a:	2201      	movs	r2, #1
 800dc4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800dc4e:	4b4b      	ldr	r3, [pc, #300]	@ (800dd7c <USBD_CDC_Init+0x1ec>)
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	f003 020f 	and.w	r2, r3, #15
 800dc56:	6879      	ldr	r1, [r7, #4]
 800dc58:	4613      	mov	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	009b      	lsls	r3, r3, #2
 800dc60:	440b      	add	r3, r1
 800dc62:	3326      	adds	r3, #38	@ 0x26
 800dc64:	2210      	movs	r2, #16
 800dc66:	801a      	strh	r2, [r3, #0]
 800dc68:	e035      	b.n	800dcd6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800dc6a:	4b42      	ldr	r3, [pc, #264]	@ (800dd74 <USBD_CDC_Init+0x1e4>)
 800dc6c:	7819      	ldrb	r1, [r3, #0]
 800dc6e:	2340      	movs	r3, #64	@ 0x40
 800dc70:	2202      	movs	r2, #2
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f007 fa99 	bl	80151aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800dc78:	4b3e      	ldr	r3, [pc, #248]	@ (800dd74 <USBD_CDC_Init+0x1e4>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f003 020f 	and.w	r2, r3, #15
 800dc80:	6879      	ldr	r1, [r7, #4]
 800dc82:	4613      	mov	r3, r2
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4413      	add	r3, r2
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	440b      	add	r3, r1
 800dc8c:	3324      	adds	r3, #36	@ 0x24
 800dc8e:	2201      	movs	r2, #1
 800dc90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dc92:	4b39      	ldr	r3, [pc, #228]	@ (800dd78 <USBD_CDC_Init+0x1e8>)
 800dc94:	7819      	ldrb	r1, [r3, #0]
 800dc96:	2340      	movs	r3, #64	@ 0x40
 800dc98:	2202      	movs	r2, #2
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f007 fa85 	bl	80151aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800dca0:	4b35      	ldr	r3, [pc, #212]	@ (800dd78 <USBD_CDC_Init+0x1e8>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 020f 	and.w	r2, r3, #15
 800dca8:	6879      	ldr	r1, [r7, #4]
 800dcaa:	4613      	mov	r3, r2
 800dcac:	009b      	lsls	r3, r3, #2
 800dcae:	4413      	add	r3, r2
 800dcb0:	009b      	lsls	r3, r3, #2
 800dcb2:	440b      	add	r3, r1
 800dcb4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dcb8:	2201      	movs	r2, #1
 800dcba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800dcbc:	4b2f      	ldr	r3, [pc, #188]	@ (800dd7c <USBD_CDC_Init+0x1ec>)
 800dcbe:	781b      	ldrb	r3, [r3, #0]
 800dcc0:	f003 020f 	and.w	r2, r3, #15
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	009b      	lsls	r3, r3, #2
 800dcca:	4413      	add	r3, r2
 800dccc:	009b      	lsls	r3, r3, #2
 800dcce:	440b      	add	r3, r1
 800dcd0:	3326      	adds	r3, #38	@ 0x26
 800dcd2:	2210      	movs	r2, #16
 800dcd4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dcd6:	4b29      	ldr	r3, [pc, #164]	@ (800dd7c <USBD_CDC_Init+0x1ec>)
 800dcd8:	7819      	ldrb	r1, [r3, #0]
 800dcda:	2308      	movs	r3, #8
 800dcdc:	2203      	movs	r2, #3
 800dcde:	6878      	ldr	r0, [r7, #4]
 800dce0:	f007 fa63 	bl	80151aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dce4:	4b25      	ldr	r3, [pc, #148]	@ (800dd7c <USBD_CDC_Init+0x1ec>)
 800dce6:	781b      	ldrb	r3, [r3, #0]
 800dce8:	f003 020f 	and.w	r2, r3, #15
 800dcec:	6879      	ldr	r1, [r7, #4]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	440b      	add	r3, r1
 800dcf8:	3324      	adds	r3, #36	@ 0x24
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	2200      	movs	r2, #0
 800dd02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	33b0      	adds	r3, #176	@ 0xb0
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	2200      	movs	r2, #0
 800dd26:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800dd34:	2302      	movs	r3, #2
 800dd36:	e018      	b.n	800dd6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	7c1b      	ldrb	r3, [r3, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d10a      	bne.n	800dd56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd40:	4b0d      	ldr	r3, [pc, #52]	@ (800dd78 <USBD_CDC_Init+0x1e8>)
 800dd42:	7819      	ldrb	r1, [r3, #0]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f007 fb1a 	bl	8015388 <USBD_LL_PrepareReceive>
 800dd54:	e008      	b.n	800dd68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dd56:	4b08      	ldr	r3, [pc, #32]	@ (800dd78 <USBD_CDC_Init+0x1e8>)
 800dd58:	7819      	ldrb	r1, [r3, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800dd60:	2340      	movs	r3, #64	@ 0x40
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f007 fb10 	bl	8015388 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	200000a3 	.word	0x200000a3
 800dd78:	200000a4 	.word	0x200000a4
 800dd7c:	200000a5 	.word	0x200000a5

0800dd80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800dd8c:	4b3a      	ldr	r3, [pc, #232]	@ (800de78 <USBD_CDC_DeInit+0xf8>)
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f007 fa2f 	bl	80151f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dd98:	4b37      	ldr	r3, [pc, #220]	@ (800de78 <USBD_CDC_DeInit+0xf8>)
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	f003 020f 	and.w	r2, r3, #15
 800dda0:	6879      	ldr	r1, [r7, #4]
 800dda2:	4613      	mov	r3, r2
 800dda4:	009b      	lsls	r3, r3, #2
 800dda6:	4413      	add	r3, r2
 800dda8:	009b      	lsls	r3, r3, #2
 800ddaa:	440b      	add	r3, r1
 800ddac:	3324      	adds	r3, #36	@ 0x24
 800ddae:	2200      	movs	r2, #0
 800ddb0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ddb2:	4b32      	ldr	r3, [pc, #200]	@ (800de7c <USBD_CDC_DeInit+0xfc>)
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f007 fa1c 	bl	80151f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ddbe:	4b2f      	ldr	r3, [pc, #188]	@ (800de7c <USBD_CDC_DeInit+0xfc>)
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	f003 020f 	and.w	r2, r3, #15
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	4613      	mov	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	440b      	add	r3, r1
 800ddd2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ddda:	4b29      	ldr	r3, [pc, #164]	@ (800de80 <USBD_CDC_DeInit+0x100>)
 800dddc:	781b      	ldrb	r3, [r3, #0]
 800ddde:	4619      	mov	r1, r3
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f007 fa08 	bl	80151f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dde6:	4b26      	ldr	r3, [pc, #152]	@ (800de80 <USBD_CDC_DeInit+0x100>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	f003 020f 	and.w	r2, r3, #15
 800ddee:	6879      	ldr	r1, [r7, #4]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	440b      	add	r3, r1
 800ddfa:	3324      	adds	r3, #36	@ 0x24
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800de00:	4b1f      	ldr	r3, [pc, #124]	@ (800de80 <USBD_CDC_DeInit+0x100>)
 800de02:	781b      	ldrb	r3, [r3, #0]
 800de04:	f003 020f 	and.w	r2, r3, #15
 800de08:	6879      	ldr	r1, [r7, #4]
 800de0a:	4613      	mov	r3, r2
 800de0c:	009b      	lsls	r3, r3, #2
 800de0e:	4413      	add	r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	440b      	add	r3, r1
 800de14:	3326      	adds	r3, #38	@ 0x26
 800de16:	2200      	movs	r2, #0
 800de18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	32b0      	adds	r2, #176	@ 0xb0
 800de24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d01f      	beq.n	800de6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	33b0      	adds	r3, #176	@ 0xb0
 800de36:	009b      	lsls	r3, r3, #2
 800de38:	4413      	add	r3, r2
 800de3a:	685b      	ldr	r3, [r3, #4]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	32b0      	adds	r2, #176	@ 0xb0
 800de4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de4e:	4618      	mov	r0, r3
 800de50:	f007 fb12 	bl	8015478 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	32b0      	adds	r2, #176	@ 0xb0
 800de5e:	2100      	movs	r1, #0
 800de60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2200      	movs	r2, #0
 800de68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	4618      	mov	r0, r3
 800de70:	3708      	adds	r7, #8
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
 800de76:	bf00      	nop
 800de78:	200000a3 	.word	0x200000a3
 800de7c:	200000a4 	.word	0x200000a4
 800de80:	200000a5 	.word	0x200000a5

0800de84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b086      	sub	sp, #24
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
 800de8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	32b0      	adds	r2, #176	@ 0xb0
 800de98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800de9e:	2300      	movs	r3, #0
 800dea0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800dea2:	2300      	movs	r3, #0
 800dea4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800dea6:	2300      	movs	r3, #0
 800dea8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800deaa:	693b      	ldr	r3, [r7, #16]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d101      	bne.n	800deb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800deb0:	2303      	movs	r3, #3
 800deb2:	e0bf      	b.n	800e034 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	781b      	ldrb	r3, [r3, #0]
 800deb8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800debc:	2b00      	cmp	r3, #0
 800debe:	d050      	beq.n	800df62 <USBD_CDC_Setup+0xde>
 800dec0:	2b20      	cmp	r3, #32
 800dec2:	f040 80af 	bne.w	800e024 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	88db      	ldrh	r3, [r3, #6]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d03a      	beq.n	800df44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	781b      	ldrb	r3, [r3, #0]
 800ded2:	b25b      	sxtb	r3, r3
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	da1b      	bge.n	800df10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800dede:	687a      	ldr	r2, [r7, #4]
 800dee0:	33b0      	adds	r3, #176	@ 0xb0
 800dee2:	009b      	lsls	r3, r3, #2
 800dee4:	4413      	add	r3, r2
 800dee6:	685b      	ldr	r3, [r3, #4]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800deee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800def0:	683a      	ldr	r2, [r7, #0]
 800def2:	88d2      	ldrh	r2, [r2, #6]
 800def4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	88db      	ldrh	r3, [r3, #6]
 800defa:	2b07      	cmp	r3, #7
 800defc:	bf28      	it	cs
 800defe:	2307      	movcs	r3, #7
 800df00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800df02:	693b      	ldr	r3, [r7, #16]
 800df04:	89fa      	ldrh	r2, [r7, #14]
 800df06:	4619      	mov	r1, r3
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f001 fd2b 	bl	800f964 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800df0e:	e090      	b.n	800e032 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	785a      	ldrb	r2, [r3, #1]
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	88db      	ldrh	r3, [r3, #6]
 800df1e:	2b3f      	cmp	r3, #63	@ 0x3f
 800df20:	d803      	bhi.n	800df2a <USBD_CDC_Setup+0xa6>
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	88db      	ldrh	r3, [r3, #6]
 800df26:	b2da      	uxtb	r2, r3
 800df28:	e000      	b.n	800df2c <USBD_CDC_Setup+0xa8>
 800df2a:	2240      	movs	r2, #64	@ 0x40
 800df2c:	693b      	ldr	r3, [r7, #16]
 800df2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800df32:	6939      	ldr	r1, [r7, #16]
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800df3a:	461a      	mov	r2, r3
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f001 fd3d 	bl	800f9bc <USBD_CtlPrepareRx>
      break;
 800df42:	e076      	b.n	800e032 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	33b0      	adds	r3, #176	@ 0xb0
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	689b      	ldr	r3, [r3, #8]
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	7850      	ldrb	r0, [r2, #1]
 800df5a:	2200      	movs	r2, #0
 800df5c:	6839      	ldr	r1, [r7, #0]
 800df5e:	4798      	blx	r3
      break;
 800df60:	e067      	b.n	800e032 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df62:	683b      	ldr	r3, [r7, #0]
 800df64:	785b      	ldrb	r3, [r3, #1]
 800df66:	2b0b      	cmp	r3, #11
 800df68:	d851      	bhi.n	800e00e <USBD_CDC_Setup+0x18a>
 800df6a:	a201      	add	r2, pc, #4	@ (adr r2, 800df70 <USBD_CDC_Setup+0xec>)
 800df6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df70:	0800dfa1 	.word	0x0800dfa1
 800df74:	0800e01d 	.word	0x0800e01d
 800df78:	0800e00f 	.word	0x0800e00f
 800df7c:	0800e00f 	.word	0x0800e00f
 800df80:	0800e00f 	.word	0x0800e00f
 800df84:	0800e00f 	.word	0x0800e00f
 800df88:	0800e00f 	.word	0x0800e00f
 800df8c:	0800e00f 	.word	0x0800e00f
 800df90:	0800e00f 	.word	0x0800e00f
 800df94:	0800e00f 	.word	0x0800e00f
 800df98:	0800dfcb 	.word	0x0800dfcb
 800df9c:	0800dff5 	.word	0x0800dff5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b03      	cmp	r3, #3
 800dfaa:	d107      	bne.n	800dfbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800dfac:	f107 030a 	add.w	r3, r7, #10
 800dfb0:	2202      	movs	r2, #2
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f001 fcd5 	bl	800f964 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dfba:	e032      	b.n	800e022 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	6878      	ldr	r0, [r7, #4]
 800dfc0:	f001 fc53 	bl	800f86a <USBD_CtlError>
            ret = USBD_FAIL;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	75fb      	strb	r3, [r7, #23]
          break;
 800dfc8:	e02b      	b.n	800e022 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	2b03      	cmp	r3, #3
 800dfd4:	d107      	bne.n	800dfe6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800dfd6:	f107 030d 	add.w	r3, r7, #13
 800dfda:	2201      	movs	r2, #1
 800dfdc:	4619      	mov	r1, r3
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f001 fcc0 	bl	800f964 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dfe4:	e01d      	b.n	800e022 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800dfe6:	6839      	ldr	r1, [r7, #0]
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f001 fc3e 	bl	800f86a <USBD_CtlError>
            ret = USBD_FAIL;
 800dfee:	2303      	movs	r3, #3
 800dff0:	75fb      	strb	r3, [r7, #23]
          break;
 800dff2:	e016      	b.n	800e022 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d00f      	beq.n	800e020 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f001 fc31 	bl	800f86a <USBD_CtlError>
            ret = USBD_FAIL;
 800e008:	2303      	movs	r3, #3
 800e00a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e00c:	e008      	b.n	800e020 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e00e:	6839      	ldr	r1, [r7, #0]
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f001 fc2a 	bl	800f86a <USBD_CtlError>
          ret = USBD_FAIL;
 800e016:	2303      	movs	r3, #3
 800e018:	75fb      	strb	r3, [r7, #23]
          break;
 800e01a:	e002      	b.n	800e022 <USBD_CDC_Setup+0x19e>
          break;
 800e01c:	bf00      	nop
 800e01e:	e008      	b.n	800e032 <USBD_CDC_Setup+0x1ae>
          break;
 800e020:	bf00      	nop
      }
      break;
 800e022:	e006      	b.n	800e032 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e024:	6839      	ldr	r1, [r7, #0]
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f001 fc1f 	bl	800f86a <USBD_CtlError>
      ret = USBD_FAIL;
 800e02c:	2303      	movs	r3, #3
 800e02e:	75fb      	strb	r3, [r7, #23]
      break;
 800e030:	bf00      	nop
  }

  return (uint8_t)ret;
 800e032:	7dfb      	ldrb	r3, [r7, #23]
}
 800e034:	4618      	mov	r0, r3
 800e036:	3718      	adds	r7, #24
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}

0800e03c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	460b      	mov	r3, r1
 800e046:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e04e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	32b0      	adds	r2, #176	@ 0xb0
 800e05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d101      	bne.n	800e066 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e062:	2303      	movs	r3, #3
 800e064:	e065      	b.n	800e132 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	32b0      	adds	r2, #176	@ 0xb0
 800e070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e074:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e076:	78fb      	ldrb	r3, [r7, #3]
 800e078:	f003 020f 	and.w	r2, r3, #15
 800e07c:	6879      	ldr	r1, [r7, #4]
 800e07e:	4613      	mov	r3, r2
 800e080:	009b      	lsls	r3, r3, #2
 800e082:	4413      	add	r3, r2
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	440b      	add	r3, r1
 800e088:	3318      	adds	r3, #24
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d02f      	beq.n	800e0f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e090:	78fb      	ldrb	r3, [r7, #3]
 800e092:	f003 020f 	and.w	r2, r3, #15
 800e096:	6879      	ldr	r1, [r7, #4]
 800e098:	4613      	mov	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	440b      	add	r3, r1
 800e0a2:	3318      	adds	r3, #24
 800e0a4:	681a      	ldr	r2, [r3, #0]
 800e0a6:	78fb      	ldrb	r3, [r7, #3]
 800e0a8:	f003 010f 	and.w	r1, r3, #15
 800e0ac:	68f8      	ldr	r0, [r7, #12]
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	440b      	add	r3, r1
 800e0b4:	00db      	lsls	r3, r3, #3
 800e0b6:	4403      	add	r3, r0
 800e0b8:	3320      	adds	r3, #32
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e0c0:	fb01 f303 	mul.w	r3, r1, r3
 800e0c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d112      	bne.n	800e0f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e0ca:	78fb      	ldrb	r3, [r7, #3]
 800e0cc:	f003 020f 	and.w	r2, r3, #15
 800e0d0:	6879      	ldr	r1, [r7, #4]
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	009b      	lsls	r3, r3, #2
 800e0d6:	4413      	add	r3, r2
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	440b      	add	r3, r1
 800e0dc:	3318      	adds	r3, #24
 800e0de:	2200      	movs	r2, #0
 800e0e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e0e2:	78f9      	ldrb	r1, [r7, #3]
 800e0e4:	2300      	movs	r3, #0
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f007 f92c 	bl	8015346 <USBD_LL_Transmit>
 800e0ee:	e01f      	b.n	800e130 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e0fe:	687a      	ldr	r2, [r7, #4]
 800e100:	33b0      	adds	r3, #176	@ 0xb0
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	691b      	ldr	r3, [r3, #16]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d010      	beq.n	800e130 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	33b0      	adds	r3, #176	@ 0xb0
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	685b      	ldr	r3, [r3, #4]
 800e11e:	691b      	ldr	r3, [r3, #16]
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e12c:	78fa      	ldrb	r2, [r7, #3]
 800e12e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3710      	adds	r7, #16
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b084      	sub	sp, #16
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
 800e142:	460b      	mov	r3, r1
 800e144:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	32b0      	adds	r2, #176	@ 0xb0
 800e150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e154:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	32b0      	adds	r2, #176	@ 0xb0
 800e160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d101      	bne.n	800e16c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e168:	2303      	movs	r3, #3
 800e16a:	e01a      	b.n	800e1a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e16c:	78fb      	ldrb	r3, [r7, #3]
 800e16e:	4619      	mov	r1, r3
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f007 f92a 	bl	80153ca <USBD_LL_GetRxDataSize>
 800e176:	4602      	mov	r2, r0
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	33b0      	adds	r3, #176	@ 0xb0
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	685b      	ldr	r3, [r3, #4]
 800e18e:	68db      	ldr	r3, [r3, #12]
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e19c:	4611      	mov	r1, r2
 800e19e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b084      	sub	sp, #16
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	32b0      	adds	r2, #176	@ 0xb0
 800e1bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d101      	bne.n	800e1cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e1c8:	2303      	movs	r3, #3
 800e1ca:	e024      	b.n	800e216 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	33b0      	adds	r3, #176	@ 0xb0
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	4413      	add	r3, r2
 800e1da:	685b      	ldr	r3, [r3, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d019      	beq.n	800e214 <USBD_CDC_EP0_RxReady+0x6a>
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e1e6:	2bff      	cmp	r3, #255	@ 0xff
 800e1e8:	d014      	beq.n	800e214 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	33b0      	adds	r3, #176	@ 0xb0
 800e1f4:	009b      	lsls	r3, r3, #2
 800e1f6:	4413      	add	r3, r2
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	68fa      	ldr	r2, [r7, #12]
 800e1fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800e202:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e20a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	22ff      	movs	r2, #255	@ 0xff
 800e210:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800e214:	2300      	movs	r3, #0
}
 800e216:	4618      	mov	r0, r3
 800e218:	3710      	adds	r7, #16
 800e21a:	46bd      	mov	sp, r7
 800e21c:	bd80      	pop	{r7, pc}
	...

0800e220 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e228:	2182      	movs	r1, #130	@ 0x82
 800e22a:	4818      	ldr	r0, [pc, #96]	@ (800e28c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e22c:	f000 fcbd 	bl	800ebaa <USBD_GetEpDesc>
 800e230:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e232:	2101      	movs	r1, #1
 800e234:	4815      	ldr	r0, [pc, #84]	@ (800e28c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e236:	f000 fcb8 	bl	800ebaa <USBD_GetEpDesc>
 800e23a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e23c:	2181      	movs	r1, #129	@ 0x81
 800e23e:	4813      	ldr	r0, [pc, #76]	@ (800e28c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e240:	f000 fcb3 	bl	800ebaa <USBD_GetEpDesc>
 800e244:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d002      	beq.n	800e252 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	2210      	movs	r2, #16
 800e250:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e252:	693b      	ldr	r3, [r7, #16]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d006      	beq.n	800e266 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e260:	711a      	strb	r2, [r3, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d006      	beq.n	800e27a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2200      	movs	r2, #0
 800e270:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e274:	711a      	strb	r2, [r3, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2243      	movs	r2, #67	@ 0x43
 800e27e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e280:	4b02      	ldr	r3, [pc, #8]	@ (800e28c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e282:	4618      	mov	r0, r3
 800e284:	3718      	adds	r7, #24
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20000060 	.word	0x20000060

0800e290 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e298:	2182      	movs	r1, #130	@ 0x82
 800e29a:	4818      	ldr	r0, [pc, #96]	@ (800e2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e29c:	f000 fc85 	bl	800ebaa <USBD_GetEpDesc>
 800e2a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e2a2:	2101      	movs	r1, #1
 800e2a4:	4815      	ldr	r0, [pc, #84]	@ (800e2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e2a6:	f000 fc80 	bl	800ebaa <USBD_GetEpDesc>
 800e2aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e2ac:	2181      	movs	r1, #129	@ 0x81
 800e2ae:	4813      	ldr	r0, [pc, #76]	@ (800e2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e2b0:	f000 fc7b 	bl	800ebaa <USBD_GetEpDesc>
 800e2b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d002      	beq.n	800e2c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	2210      	movs	r2, #16
 800e2c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e2c2:	693b      	ldr	r3, [r7, #16]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d006      	beq.n	800e2d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e2c8:	693b      	ldr	r3, [r7, #16]
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	711a      	strb	r2, [r3, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f042 0202 	orr.w	r2, r2, #2
 800e2d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d006      	beq.n	800e2ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	2200      	movs	r2, #0
 800e2e0:	711a      	strb	r2, [r3, #4]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f042 0202 	orr.w	r2, r2, #2
 800e2e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2243      	movs	r2, #67	@ 0x43
 800e2ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e2f0:	4b02      	ldr	r3, [pc, #8]	@ (800e2fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3718      	adds	r7, #24
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	bd80      	pop	{r7, pc}
 800e2fa:	bf00      	nop
 800e2fc:	20000060 	.word	0x20000060

0800e300 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e308:	2182      	movs	r1, #130	@ 0x82
 800e30a:	4818      	ldr	r0, [pc, #96]	@ (800e36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e30c:	f000 fc4d 	bl	800ebaa <USBD_GetEpDesc>
 800e310:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e312:	2101      	movs	r1, #1
 800e314:	4815      	ldr	r0, [pc, #84]	@ (800e36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e316:	f000 fc48 	bl	800ebaa <USBD_GetEpDesc>
 800e31a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e31c:	2181      	movs	r1, #129	@ 0x81
 800e31e:	4813      	ldr	r0, [pc, #76]	@ (800e36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e320:	f000 fc43 	bl	800ebaa <USBD_GetEpDesc>
 800e324:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d002      	beq.n	800e332 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	2210      	movs	r2, #16
 800e330:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e332:	693b      	ldr	r3, [r7, #16]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d006      	beq.n	800e346 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	2200      	movs	r2, #0
 800e33c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e340:	711a      	strb	r2, [r3, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d006      	beq.n	800e35a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2200      	movs	r2, #0
 800e350:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e354:	711a      	strb	r2, [r3, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2243      	movs	r2, #67	@ 0x43
 800e35e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e360:	4b02      	ldr	r3, [pc, #8]	@ (800e36c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e362:	4618      	mov	r0, r3
 800e364:	3718      	adds	r7, #24
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
 800e36a:	bf00      	nop
 800e36c:	20000060 	.word	0x20000060

0800e370 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	220a      	movs	r2, #10
 800e37c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e37e:	4b03      	ldr	r3, [pc, #12]	@ (800e38c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e380:	4618      	mov	r0, r3
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr
 800e38c:	2000001c 	.word	0x2000001c

0800e390 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e390:	b480      	push	{r7}
 800e392:	b083      	sub	sp, #12
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e39a:	683b      	ldr	r3, [r7, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d101      	bne.n	800e3a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e3a0:	2303      	movs	r3, #3
 800e3a2:	e009      	b.n	800e3b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	33b0      	adds	r3, #176	@ 0xb0
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e3b6:	2300      	movs	r3, #0
}
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	370c      	adds	r7, #12
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c2:	4770      	bx	lr

0800e3c4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e3c4:	b480      	push	{r7}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	32b0      	adds	r2, #176	@ 0xb0
 800e3da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3de:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e3e0:	697b      	ldr	r3, [r7, #20]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d101      	bne.n	800e3ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	e008      	b.n	800e3fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	68ba      	ldr	r2, [r7, #8]
 800e3ee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800e3fa:	2300      	movs	r3, #0
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	371c      	adds	r7, #28
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	32b0      	adds	r2, #176	@ 0xb0
 800e41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e420:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d101      	bne.n	800e42c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e428:	2303      	movs	r3, #3
 800e42a:	e004      	b.n	800e436 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	683a      	ldr	r2, [r7, #0]
 800e430:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800e434:	2300      	movs	r3, #0
}
 800e436:	4618      	mov	r0, r3
 800e438:	3714      	adds	r7, #20
 800e43a:	46bd      	mov	sp, r7
 800e43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e440:	4770      	bx	lr
	...

0800e444 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	32b0      	adds	r2, #176	@ 0xb0
 800e456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e45a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e45c:	2301      	movs	r3, #1
 800e45e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e466:	2303      	movs	r3, #3
 800e468:	e025      	b.n	800e4b6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e46a:	68bb      	ldr	r3, [r7, #8]
 800e46c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e470:	2b00      	cmp	r3, #0
 800e472:	d11f      	bne.n	800e4b4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	2201      	movs	r2, #1
 800e478:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e47c:	4b10      	ldr	r3, [pc, #64]	@ (800e4c0 <USBD_CDC_TransmitPacket+0x7c>)
 800e47e:	781b      	ldrb	r3, [r3, #0]
 800e480:	f003 020f 	and.w	r2, r3, #15
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	4613      	mov	r3, r2
 800e48e:	009b      	lsls	r3, r3, #2
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4403      	add	r3, r0
 800e496:	3318      	adds	r3, #24
 800e498:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e49a:	4b09      	ldr	r3, [pc, #36]	@ (800e4c0 <USBD_CDC_TransmitPacket+0x7c>)
 800e49c:	7819      	ldrb	r1, [r3, #0]
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f006 ff4b 	bl	8015346 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3710      	adds	r7, #16
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}
 800e4be:	bf00      	nop
 800e4c0:	200000a3 	.word	0x200000a3

0800e4c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b084      	sub	sp, #16
 800e4c8:	af00      	add	r7, sp, #0
 800e4ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	32b0      	adds	r2, #176	@ 0xb0
 800e4d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4da:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	32b0      	adds	r2, #176	@ 0xb0
 800e4e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d101      	bne.n	800e4f2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e4ee:	2303      	movs	r3, #3
 800e4f0:	e018      	b.n	800e524 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	7c1b      	ldrb	r3, [r3, #16]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10a      	bne.n	800e510 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e4fa:	4b0c      	ldr	r3, [pc, #48]	@ (800e52c <USBD_CDC_ReceivePacket+0x68>)
 800e4fc:	7819      	ldrb	r1, [r3, #0]
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e504:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f006 ff3d 	bl	8015388 <USBD_LL_PrepareReceive>
 800e50e:	e008      	b.n	800e522 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e510:	4b06      	ldr	r3, [pc, #24]	@ (800e52c <USBD_CDC_ReceivePacket+0x68>)
 800e512:	7819      	ldrb	r1, [r3, #0]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e51a:	2340      	movs	r3, #64	@ 0x40
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f006 ff33 	bl	8015388 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e522:	2300      	movs	r3, #0
}
 800e524:	4618      	mov	r0, r3
 800e526:	3710      	adds	r7, #16
 800e528:	46bd      	mov	sp, r7
 800e52a:	bd80      	pop	{r7, pc}
 800e52c:	200000a4 	.word	0x200000a4

0800e530 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b086      	sub	sp, #24
 800e534:	af00      	add	r7, sp, #0
 800e536:	60f8      	str	r0, [r7, #12]
 800e538:	60b9      	str	r1, [r7, #8]
 800e53a:	4613      	mov	r3, r2
 800e53c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d101      	bne.n	800e548 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e544:	2303      	movs	r3, #3
 800e546:	e01f      	b.n	800e588 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	2200      	movs	r2, #0
 800e554:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2200      	movs	r2, #0
 800e55c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d003      	beq.n	800e56e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	68ba      	ldr	r2, [r7, #8]
 800e56a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	2201      	movs	r2, #1
 800e572:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	79fa      	ldrb	r2, [r7, #7]
 800e57a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e57c:	68f8      	ldr	r0, [r7, #12]
 800e57e:	f006 fd97 	bl	80150b0 <USBD_LL_Init>
 800e582:	4603      	mov	r3, r0
 800e584:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e586:	7dfb      	ldrb	r3, [r7, #23]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3718      	adds	r7, #24
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b084      	sub	sp, #16
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e59a:	2300      	movs	r3, #0
 800e59c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d101      	bne.n	800e5a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e5a4:	2303      	movs	r3, #3
 800e5a6:	e025      	b.n	800e5f4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	683a      	ldr	r2, [r7, #0]
 800e5ac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	32ae      	adds	r2, #174	@ 0xae
 800e5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00f      	beq.n	800e5e4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	32ae      	adds	r2, #174	@ 0xae
 800e5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5d4:	f107 020e 	add.w	r2, r7, #14
 800e5d8:	4610      	mov	r0, r2
 800e5da:	4798      	blx	r3
 800e5dc:	4602      	mov	r2, r0
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800e5f2:	2300      	movs	r3, #0
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	3710      	adds	r7, #16
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	bd80      	pop	{r7, pc}

0800e5fc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e5fc:	b580      	push	{r7, lr}
 800e5fe:	b082      	sub	sp, #8
 800e600:	af00      	add	r7, sp, #0
 800e602:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f006 fdb5 	bl	8015174 <USBD_LL_Start>
 800e60a:	4603      	mov	r3, r0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3708      	adds	r7, #8
 800e610:	46bd      	mov	sp, r7
 800e612:	bd80      	pop	{r7, pc}

0800e614 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e614:	b480      	push	{r7}
 800e616:	b083      	sub	sp, #12
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e61c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e61e:	4618      	mov	r0, r3
 800e620:	370c      	adds	r7, #12
 800e622:	46bd      	mov	sp, r7
 800e624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e628:	4770      	bx	lr

0800e62a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b084      	sub	sp, #16
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
 800e632:	460b      	mov	r3, r1
 800e634:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e640:	2b00      	cmp	r3, #0
 800e642:	d009      	beq.n	800e658 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	78fa      	ldrb	r2, [r7, #3]
 800e64e:	4611      	mov	r1, r2
 800e650:	6878      	ldr	r0, [r7, #4]
 800e652:	4798      	blx	r3
 800e654:	4603      	mov	r3, r0
 800e656:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e658:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65a:	4618      	mov	r0, r3
 800e65c:	3710      	adds	r7, #16
 800e65e:	46bd      	mov	sp, r7
 800e660:	bd80      	pop	{r7, pc}

0800e662 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e662:	b580      	push	{r7, lr}
 800e664:	b084      	sub	sp, #16
 800e666:	af00      	add	r7, sp, #0
 800e668:	6078      	str	r0, [r7, #4]
 800e66a:	460b      	mov	r3, r1
 800e66c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e66e:	2300      	movs	r3, #0
 800e670:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e678:	685b      	ldr	r3, [r3, #4]
 800e67a:	78fa      	ldrb	r2, [r7, #3]
 800e67c:	4611      	mov	r1, r2
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	4798      	blx	r3
 800e682:	4603      	mov	r3, r0
 800e684:	2b00      	cmp	r3, #0
 800e686:	d001      	beq.n	800e68c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e688:	2303      	movs	r3, #3
 800e68a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e68e:	4618      	mov	r0, r3
 800e690:	3710      	adds	r7, #16
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}

0800e696 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e696:	b580      	push	{r7, lr}
 800e698:	b084      	sub	sp, #16
 800e69a:	af00      	add	r7, sp, #0
 800e69c:	6078      	str	r0, [r7, #4]
 800e69e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e6a6:	6839      	ldr	r1, [r7, #0]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f001 f8a4 	bl	800f7f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800e6bc:	461a      	mov	r2, r3
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e6ca:	f003 031f 	and.w	r3, r3, #31
 800e6ce:	2b02      	cmp	r3, #2
 800e6d0:	d01a      	beq.n	800e708 <USBD_LL_SetupStage+0x72>
 800e6d2:	2b02      	cmp	r3, #2
 800e6d4:	d822      	bhi.n	800e71c <USBD_LL_SetupStage+0x86>
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d002      	beq.n	800e6e0 <USBD_LL_SetupStage+0x4a>
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d00a      	beq.n	800e6f4 <USBD_LL_SetupStage+0x5e>
 800e6de:	e01d      	b.n	800e71c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fad1 	bl	800ec90 <USBD_StdDevReq>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e6f2:	e020      	b.n	800e736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 fb39 	bl	800ed74 <USBD_StdItfReq>
 800e702:	4603      	mov	r3, r0
 800e704:	73fb      	strb	r3, [r7, #15]
      break;
 800e706:	e016      	b.n	800e736 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800e70e:	4619      	mov	r1, r3
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f000 fb9b 	bl	800ee4c <USBD_StdEPReq>
 800e716:	4603      	mov	r3, r0
 800e718:	73fb      	strb	r3, [r7, #15]
      break;
 800e71a:	e00c      	b.n	800e736 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e722:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e726:	b2db      	uxtb	r3, r3
 800e728:	4619      	mov	r1, r3
 800e72a:	6878      	ldr	r0, [r7, #4]
 800e72c:	f006 fd82 	bl	8015234 <USBD_LL_StallEP>
 800e730:	4603      	mov	r3, r0
 800e732:	73fb      	strb	r3, [r7, #15]
      break;
 800e734:	bf00      	nop
  }

  return ret;
 800e736:	7bfb      	ldrb	r3, [r7, #15]
}
 800e738:	4618      	mov	r0, r3
 800e73a:	3710      	adds	r7, #16
 800e73c:	46bd      	mov	sp, r7
 800e73e:	bd80      	pop	{r7, pc}

0800e740 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	460b      	mov	r3, r1
 800e74a:	607a      	str	r2, [r7, #4]
 800e74c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e74e:	2300      	movs	r3, #0
 800e750:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e752:	7afb      	ldrb	r3, [r7, #11]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d16e      	bne.n	800e836 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e75e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e766:	2b03      	cmp	r3, #3
 800e768:	f040 8098 	bne.w	800e89c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	689a      	ldr	r2, [r3, #8]
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	429a      	cmp	r2, r3
 800e776:	d913      	bls.n	800e7a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	689a      	ldr	r2, [r3, #8]
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	1ad2      	subs	r2, r2, r3
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	68da      	ldr	r2, [r3, #12]
 800e78a:	693b      	ldr	r3, [r7, #16]
 800e78c:	689b      	ldr	r3, [r3, #8]
 800e78e:	4293      	cmp	r3, r2
 800e790:	bf28      	it	cs
 800e792:	4613      	movcs	r3, r2
 800e794:	461a      	mov	r2, r3
 800e796:	6879      	ldr	r1, [r7, #4]
 800e798:	68f8      	ldr	r0, [r7, #12]
 800e79a:	f001 f92c 	bl	800f9f6 <USBD_CtlContinueRx>
 800e79e:	e07d      	b.n	800e89c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800e7a6:	f003 031f 	and.w	r3, r3, #31
 800e7aa:	2b02      	cmp	r3, #2
 800e7ac:	d014      	beq.n	800e7d8 <USBD_LL_DataOutStage+0x98>
 800e7ae:	2b02      	cmp	r3, #2
 800e7b0:	d81d      	bhi.n	800e7ee <USBD_LL_DataOutStage+0xae>
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d002      	beq.n	800e7bc <USBD_LL_DataOutStage+0x7c>
 800e7b6:	2b01      	cmp	r3, #1
 800e7b8:	d003      	beq.n	800e7c2 <USBD_LL_DataOutStage+0x82>
 800e7ba:	e018      	b.n	800e7ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e7bc:	2300      	movs	r3, #0
 800e7be:	75bb      	strb	r3, [r7, #22]
            break;
 800e7c0:	e018      	b.n	800e7f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	68f8      	ldr	r0, [r7, #12]
 800e7ce:	f000 f9d2 	bl	800eb76 <USBD_CoreFindIF>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	75bb      	strb	r3, [r7, #22]
            break;
 800e7d6:	e00d      	b.n	800e7f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f000 f9d4 	bl	800eb90 <USBD_CoreFindEP>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	75bb      	strb	r3, [r7, #22]
            break;
 800e7ec:	e002      	b.n	800e7f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	75bb      	strb	r3, [r7, #22]
            break;
 800e7f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e7f4:	7dbb      	ldrb	r3, [r7, #22]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d119      	bne.n	800e82e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e800:	b2db      	uxtb	r3, r3
 800e802:	2b03      	cmp	r3, #3
 800e804:	d113      	bne.n	800e82e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e806:	7dba      	ldrb	r2, [r7, #22]
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	32ae      	adds	r2, #174	@ 0xae
 800e80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e810:	691b      	ldr	r3, [r3, #16]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00b      	beq.n	800e82e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e816:	7dba      	ldrb	r2, [r7, #22]
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e81e:	7dba      	ldrb	r2, [r7, #22]
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	32ae      	adds	r2, #174	@ 0xae
 800e824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e828:	691b      	ldr	r3, [r3, #16]
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e82e:	68f8      	ldr	r0, [r7, #12]
 800e830:	f001 f8f2 	bl	800fa18 <USBD_CtlSendStatus>
 800e834:	e032      	b.n	800e89c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e836:	7afb      	ldrb	r3, [r7, #11]
 800e838:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e83c:	b2db      	uxtb	r3, r3
 800e83e:	4619      	mov	r1, r3
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f000 f9a5 	bl	800eb90 <USBD_CoreFindEP>
 800e846:	4603      	mov	r3, r0
 800e848:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e84a:	7dbb      	ldrb	r3, [r7, #22]
 800e84c:	2bff      	cmp	r3, #255	@ 0xff
 800e84e:	d025      	beq.n	800e89c <USBD_LL_DataOutStage+0x15c>
 800e850:	7dbb      	ldrb	r3, [r7, #22]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d122      	bne.n	800e89c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e85c:	b2db      	uxtb	r3, r3
 800e85e:	2b03      	cmp	r3, #3
 800e860:	d117      	bne.n	800e892 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e862:	7dba      	ldrb	r2, [r7, #22]
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	32ae      	adds	r2, #174	@ 0xae
 800e868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e86c:	699b      	ldr	r3, [r3, #24]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00f      	beq.n	800e892 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800e872:	7dba      	ldrb	r2, [r7, #22]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800e87a:	7dba      	ldrb	r2, [r7, #22]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	32ae      	adds	r2, #174	@ 0xae
 800e880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e884:	699b      	ldr	r3, [r3, #24]
 800e886:	7afa      	ldrb	r2, [r7, #11]
 800e888:	4611      	mov	r1, r2
 800e88a:	68f8      	ldr	r0, [r7, #12]
 800e88c:	4798      	blx	r3
 800e88e:	4603      	mov	r3, r0
 800e890:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d001      	beq.n	800e89c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	e000      	b.n	800e89e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800e89c:	2300      	movs	r3, #0
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3718      	adds	r7, #24
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b086      	sub	sp, #24
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	60f8      	str	r0, [r7, #12]
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	607a      	str	r2, [r7, #4]
 800e8b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800e8b4:	7afb      	ldrb	r3, [r7, #11]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d16f      	bne.n	800e99a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	3314      	adds	r3, #20
 800e8be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800e8c6:	2b02      	cmp	r3, #2
 800e8c8:	d15a      	bne.n	800e980 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8ca:	693b      	ldr	r3, [r7, #16]
 800e8cc:	689a      	ldr	r2, [r3, #8]
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d914      	bls.n	800e900 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	689a      	ldr	r2, [r3, #8]
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	1ad2      	subs	r2, r2, r3
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	689b      	ldr	r3, [r3, #8]
 800e8e8:	461a      	mov	r2, r3
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f001 f854 	bl	800f99a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f006 fd45 	bl	8015388 <USBD_LL_PrepareReceive>
 800e8fe:	e03f      	b.n	800e980 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	68da      	ldr	r2, [r3, #12]
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d11c      	bne.n	800e946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e914:	429a      	cmp	r2, r3
 800e916:	d316      	bcc.n	800e946 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	685a      	ldr	r2, [r3, #4]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e922:	429a      	cmp	r2, r3
 800e924:	d20f      	bcs.n	800e946 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e926:	2200      	movs	r2, #0
 800e928:	2100      	movs	r1, #0
 800e92a:	68f8      	ldr	r0, [r7, #12]
 800e92c:	f001 f835 	bl	800f99a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2200      	movs	r2, #0
 800e934:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e938:	2300      	movs	r3, #0
 800e93a:	2200      	movs	r2, #0
 800e93c:	2100      	movs	r1, #0
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f006 fd22 	bl	8015388 <USBD_LL_PrepareReceive>
 800e944:	e01c      	b.n	800e980 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e94c:	b2db      	uxtb	r3, r3
 800e94e:	2b03      	cmp	r3, #3
 800e950:	d10f      	bne.n	800e972 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e958:	68db      	ldr	r3, [r3, #12]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d009      	beq.n	800e972 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	2200      	movs	r2, #0
 800e962:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	68f8      	ldr	r0, [r7, #12]
 800e970:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e972:	2180      	movs	r1, #128	@ 0x80
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f006 fc5d 	bl	8015234 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e97a:	68f8      	ldr	r0, [r7, #12]
 800e97c:	f001 f85f 	bl	800fa3e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800e986:	2b00      	cmp	r3, #0
 800e988:	d03a      	beq.n	800ea00 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f7ff fe42 	bl	800e614 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800e998:	e032      	b.n	800ea00 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800e99a:	7afb      	ldrb	r3, [r7, #11]
 800e99c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	4619      	mov	r1, r3
 800e9a4:	68f8      	ldr	r0, [r7, #12]
 800e9a6:	f000 f8f3 	bl	800eb90 <USBD_CoreFindEP>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e9ae:	7dfb      	ldrb	r3, [r7, #23]
 800e9b0:	2bff      	cmp	r3, #255	@ 0xff
 800e9b2:	d025      	beq.n	800ea00 <USBD_LL_DataInStage+0x15a>
 800e9b4:	7dfb      	ldrb	r3, [r7, #23]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d122      	bne.n	800ea00 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	2b03      	cmp	r3, #3
 800e9c4:	d11c      	bne.n	800ea00 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800e9c6:	7dfa      	ldrb	r2, [r7, #23]
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	32ae      	adds	r2, #174	@ 0xae
 800e9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d014      	beq.n	800ea00 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800e9d6:	7dfa      	ldrb	r2, [r7, #23]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800e9de:	7dfa      	ldrb	r2, [r7, #23]
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	32ae      	adds	r2, #174	@ 0xae
 800e9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9e8:	695b      	ldr	r3, [r3, #20]
 800e9ea:	7afa      	ldrb	r2, [r7, #11]
 800e9ec:	4611      	mov	r1, r2
 800e9ee:	68f8      	ldr	r0, [r7, #12]
 800e9f0:	4798      	blx	r3
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800e9f6:	7dbb      	ldrb	r3, [r7, #22]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d001      	beq.n	800ea00 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800e9fc:	7dbb      	ldrb	r3, [r7, #22]
 800e9fe:	e000      	b.n	800ea02 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ea00:	2300      	movs	r3, #0
}
 800ea02:	4618      	mov	r0, r3
 800ea04:	3718      	adds	r7, #24
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bd80      	pop	{r7, pc}

0800ea0a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ea0a:	b580      	push	{r7, lr}
 800ea0c:	b084      	sub	sp, #16
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea12:	2300      	movs	r3, #0
 800ea14:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2201      	movs	r2, #1
 800ea1a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2200      	movs	r2, #0
 800ea22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2200      	movs	r2, #0
 800ea2a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2200      	movs	r2, #0
 800ea38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d014      	beq.n	800ea70 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea4c:	685b      	ldr	r3, [r3, #4]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00e      	beq.n	800ea70 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	6852      	ldr	r2, [r2, #4]
 800ea5e:	b2d2      	uxtb	r2, r2
 800ea60:	4611      	mov	r1, r2
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	4798      	blx	r3
 800ea66:	4603      	mov	r3, r0
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d001      	beq.n	800ea70 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ea6c:	2303      	movs	r3, #3
 800ea6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea70:	2340      	movs	r3, #64	@ 0x40
 800ea72:	2200      	movs	r2, #0
 800ea74:	2100      	movs	r1, #0
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f006 fb97 	bl	80151aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2240      	movs	r2, #64	@ 0x40
 800ea88:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea8c:	2340      	movs	r3, #64	@ 0x40
 800ea8e:	2200      	movs	r2, #0
 800ea90:	2180      	movs	r1, #128	@ 0x80
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f006 fb89 	bl	80151aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2240      	movs	r2, #64	@ 0x40
 800eaa2:	621a      	str	r2, [r3, #32]

  return ret;
 800eaa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa6:	4618      	mov	r0, r3
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eaae:	b480      	push	{r7}
 800eab0:	b083      	sub	sp, #12
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
 800eab6:	460b      	mov	r3, r1
 800eab8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	78fa      	ldrb	r2, [r7, #3]
 800eabe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eac0:	2300      	movs	r3, #0
}
 800eac2:	4618      	mov	r0, r3
 800eac4:	370c      	adds	r7, #12
 800eac6:	46bd      	mov	sp, r7
 800eac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eacc:	4770      	bx	lr

0800eace <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800eace:	b480      	push	{r7}
 800ead0:	b083      	sub	sp, #12
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	2b04      	cmp	r3, #4
 800eae0:	d006      	beq.n	800eaf0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eae8:	b2da      	uxtb	r2, r3
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2204      	movs	r2, #4
 800eaf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800eaf8:	2300      	movs	r3, #0
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr

0800eb06 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eb06:	b480      	push	{r7}
 800eb08:	b083      	sub	sp, #12
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb14:	b2db      	uxtb	r3, r3
 800eb16:	2b04      	cmp	r3, #4
 800eb18:	d106      	bne.n	800eb28 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800eb20:	b2da      	uxtb	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800eb28:	2300      	movs	r3, #0
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	370c      	adds	r7, #12
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb34:	4770      	bx	lr

0800eb36 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eb36:	b580      	push	{r7, lr}
 800eb38:	b082      	sub	sp, #8
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b03      	cmp	r3, #3
 800eb48:	d110      	bne.n	800eb6c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d00b      	beq.n	800eb6c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb5a:	69db      	ldr	r3, [r3, #28]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d005      	beq.n	800eb6c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800eb6c:	2300      	movs	r3, #0
}
 800eb6e:	4618      	mov	r0, r3
 800eb70:	3708      	adds	r7, #8
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eb76:	b480      	push	{r7}
 800eb78:	b083      	sub	sp, #12
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
 800eb7e:	460b      	mov	r3, r1
 800eb80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eb82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	370c      	adds	r7, #12
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8e:	4770      	bx	lr

0800eb90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800eb9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	370c      	adds	r7, #12
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr

0800ebaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ebaa:	b580      	push	{r7, lr}
 800ebac:	b086      	sub	sp, #24
 800ebae:	af00      	add	r7, sp, #0
 800ebb0:	6078      	str	r0, [r7, #4]
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	885b      	ldrh	r3, [r3, #2]
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	68fa      	ldr	r2, [r7, #12]
 800ebca:	7812      	ldrb	r2, [r2, #0]
 800ebcc:	4293      	cmp	r3, r2
 800ebce:	d91f      	bls.n	800ec10 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	781b      	ldrb	r3, [r3, #0]
 800ebd4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ebd6:	e013      	b.n	800ec00 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ebd8:	f107 030a 	add.w	r3, r7, #10
 800ebdc:	4619      	mov	r1, r3
 800ebde:	6978      	ldr	r0, [r7, #20]
 800ebe0:	f000 f81b 	bl	800ec1a <USBD_GetNextDesc>
 800ebe4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	785b      	ldrb	r3, [r3, #1]
 800ebea:	2b05      	cmp	r3, #5
 800ebec:	d108      	bne.n	800ec00 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ebf2:	693b      	ldr	r3, [r7, #16]
 800ebf4:	789b      	ldrb	r3, [r3, #2]
 800ebf6:	78fa      	ldrb	r2, [r7, #3]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d008      	beq.n	800ec0e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	885b      	ldrh	r3, [r3, #2]
 800ec04:	b29a      	uxth	r2, r3
 800ec06:	897b      	ldrh	r3, [r7, #10]
 800ec08:	429a      	cmp	r2, r3
 800ec0a:	d8e5      	bhi.n	800ebd8 <USBD_GetEpDesc+0x2e>
 800ec0c:	e000      	b.n	800ec10 <USBD_GetEpDesc+0x66>
          break;
 800ec0e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ec10:	693b      	ldr	r3, [r7, #16]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3718      	adds	r7, #24
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}

0800ec1a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ec1a:	b480      	push	{r7}
 800ec1c:	b085      	sub	sp, #20
 800ec1e:	af00      	add	r7, sp, #0
 800ec20:	6078      	str	r0, [r7, #4]
 800ec22:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	881b      	ldrh	r3, [r3, #0]
 800ec2c:	68fa      	ldr	r2, [r7, #12]
 800ec2e:	7812      	ldrb	r2, [r2, #0]
 800ec30:	4413      	add	r3, r2
 800ec32:	b29a      	uxth	r2, r3
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	781b      	ldrb	r3, [r3, #0]
 800ec3c:	461a      	mov	r2, r3
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	4413      	add	r3, r2
 800ec42:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ec44:	68fb      	ldr	r3, [r7, #12]
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3714      	adds	r7, #20
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec50:	4770      	bx	lr

0800ec52 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ec52:	b480      	push	{r7}
 800ec54:	b087      	sub	sp, #28
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	3301      	adds	r3, #1
 800ec68:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	781b      	ldrb	r3, [r3, #0]
 800ec6e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ec70:	8a3b      	ldrh	r3, [r7, #16]
 800ec72:	021b      	lsls	r3, r3, #8
 800ec74:	b21a      	sxth	r2, r3
 800ec76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	b21b      	sxth	r3, r3
 800ec7e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec80:	89fb      	ldrh	r3, [r7, #14]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	371c      	adds	r7, #28
 800ec86:	46bd      	mov	sp, r7
 800ec88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8c:	4770      	bx	lr
	...

0800ec90 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
 800ec98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800eca6:	2b40      	cmp	r3, #64	@ 0x40
 800eca8:	d005      	beq.n	800ecb6 <USBD_StdDevReq+0x26>
 800ecaa:	2b40      	cmp	r3, #64	@ 0x40
 800ecac:	d857      	bhi.n	800ed5e <USBD_StdDevReq+0xce>
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d00f      	beq.n	800ecd2 <USBD_StdDevReq+0x42>
 800ecb2:	2b20      	cmp	r3, #32
 800ecb4:	d153      	bne.n	800ed5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	32ae      	adds	r2, #174	@ 0xae
 800ecc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecc4:	689b      	ldr	r3, [r3, #8]
 800ecc6:	6839      	ldr	r1, [r7, #0]
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	4798      	blx	r3
 800eccc:	4603      	mov	r3, r0
 800ecce:	73fb      	strb	r3, [r7, #15]
      break;
 800ecd0:	e04a      	b.n	800ed68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ecd2:	683b      	ldr	r3, [r7, #0]
 800ecd4:	785b      	ldrb	r3, [r3, #1]
 800ecd6:	2b09      	cmp	r3, #9
 800ecd8:	d83b      	bhi.n	800ed52 <USBD_StdDevReq+0xc2>
 800ecda:	a201      	add	r2, pc, #4	@ (adr r2, 800ece0 <USBD_StdDevReq+0x50>)
 800ecdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece0:	0800ed35 	.word	0x0800ed35
 800ece4:	0800ed49 	.word	0x0800ed49
 800ece8:	0800ed53 	.word	0x0800ed53
 800ecec:	0800ed3f 	.word	0x0800ed3f
 800ecf0:	0800ed53 	.word	0x0800ed53
 800ecf4:	0800ed13 	.word	0x0800ed13
 800ecf8:	0800ed09 	.word	0x0800ed09
 800ecfc:	0800ed53 	.word	0x0800ed53
 800ed00:	0800ed2b 	.word	0x0800ed2b
 800ed04:	0800ed1d 	.word	0x0800ed1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 fa3c 	bl	800f188 <USBD_GetDescriptor>
          break;
 800ed10:	e024      	b.n	800ed5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ed12:	6839      	ldr	r1, [r7, #0]
 800ed14:	6878      	ldr	r0, [r7, #4]
 800ed16:	f000 fbcb 	bl	800f4b0 <USBD_SetAddress>
          break;
 800ed1a:	e01f      	b.n	800ed5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ed1c:	6839      	ldr	r1, [r7, #0]
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f000 fc0a 	bl	800f538 <USBD_SetConfig>
 800ed24:	4603      	mov	r3, r0
 800ed26:	73fb      	strb	r3, [r7, #15]
          break;
 800ed28:	e018      	b.n	800ed5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ed2a:	6839      	ldr	r1, [r7, #0]
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	f000 fcad 	bl	800f68c <USBD_GetConfig>
          break;
 800ed32:	e013      	b.n	800ed5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ed34:	6839      	ldr	r1, [r7, #0]
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 fcde 	bl	800f6f8 <USBD_GetStatus>
          break;
 800ed3c:	e00e      	b.n	800ed5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ed3e:	6839      	ldr	r1, [r7, #0]
 800ed40:	6878      	ldr	r0, [r7, #4]
 800ed42:	f000 fd0d 	bl	800f760 <USBD_SetFeature>
          break;
 800ed46:	e009      	b.n	800ed5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ed48:	6839      	ldr	r1, [r7, #0]
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 fd31 	bl	800f7b2 <USBD_ClrFeature>
          break;
 800ed50:	e004      	b.n	800ed5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ed52:	6839      	ldr	r1, [r7, #0]
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 fd88 	bl	800f86a <USBD_CtlError>
          break;
 800ed5a:	bf00      	nop
      }
      break;
 800ed5c:	e004      	b.n	800ed68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 fd82 	bl	800f86a <USBD_CtlError>
      break;
 800ed66:	bf00      	nop
  }

  return ret;
 800ed68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3710      	adds	r7, #16
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	bd80      	pop	{r7, pc}
 800ed72:	bf00      	nop

0800ed74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b084      	sub	sp, #16
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	6078      	str	r0, [r7, #4]
 800ed7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ed8a:	2b40      	cmp	r3, #64	@ 0x40
 800ed8c:	d005      	beq.n	800ed9a <USBD_StdItfReq+0x26>
 800ed8e:	2b40      	cmp	r3, #64	@ 0x40
 800ed90:	d852      	bhi.n	800ee38 <USBD_StdItfReq+0xc4>
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d001      	beq.n	800ed9a <USBD_StdItfReq+0x26>
 800ed96:	2b20      	cmp	r3, #32
 800ed98:	d14e      	bne.n	800ee38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eda0:	b2db      	uxtb	r3, r3
 800eda2:	3b01      	subs	r3, #1
 800eda4:	2b02      	cmp	r3, #2
 800eda6:	d840      	bhi.n	800ee2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	889b      	ldrh	r3, [r3, #4]
 800edac:	b2db      	uxtb	r3, r3
 800edae:	2b01      	cmp	r3, #1
 800edb0:	d836      	bhi.n	800ee20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	889b      	ldrh	r3, [r3, #4]
 800edb6:	b2db      	uxtb	r3, r3
 800edb8:	4619      	mov	r1, r3
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fedb 	bl	800eb76 <USBD_CoreFindIF>
 800edc0:	4603      	mov	r3, r0
 800edc2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800edc4:	7bbb      	ldrb	r3, [r7, #14]
 800edc6:	2bff      	cmp	r3, #255	@ 0xff
 800edc8:	d01d      	beq.n	800ee06 <USBD_StdItfReq+0x92>
 800edca:	7bbb      	ldrb	r3, [r7, #14]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d11a      	bne.n	800ee06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800edd0:	7bba      	ldrb	r2, [r7, #14]
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	32ae      	adds	r2, #174	@ 0xae
 800edd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edda:	689b      	ldr	r3, [r3, #8]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d00f      	beq.n	800ee00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ede0:	7bba      	ldrb	r2, [r7, #14]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ede8:	7bba      	ldrb	r2, [r7, #14]
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	32ae      	adds	r2, #174	@ 0xae
 800edee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edf2:	689b      	ldr	r3, [r3, #8]
 800edf4:	6839      	ldr	r1, [r7, #0]
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	4798      	blx	r3
 800edfa:	4603      	mov	r3, r0
 800edfc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800edfe:	e004      	b.n	800ee0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ee00:	2303      	movs	r3, #3
 800ee02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ee04:	e001      	b.n	800ee0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ee06:	2303      	movs	r3, #3
 800ee08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ee0a:	683b      	ldr	r3, [r7, #0]
 800ee0c:	88db      	ldrh	r3, [r3, #6]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d110      	bne.n	800ee34 <USBD_StdItfReq+0xc0>
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10d      	bne.n	800ee34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	f000 fdfd 	bl	800fa18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ee1e:	e009      	b.n	800ee34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ee20:	6839      	ldr	r1, [r7, #0]
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f000 fd21 	bl	800f86a <USBD_CtlError>
          break;
 800ee28:	e004      	b.n	800ee34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ee2a:	6839      	ldr	r1, [r7, #0]
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 fd1c 	bl	800f86a <USBD_CtlError>
          break;
 800ee32:	e000      	b.n	800ee36 <USBD_StdItfReq+0xc2>
          break;
 800ee34:	bf00      	nop
      }
      break;
 800ee36:	e004      	b.n	800ee42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ee38:	6839      	ldr	r1, [r7, #0]
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 fd15 	bl	800f86a <USBD_CtlError>
      break;
 800ee40:	bf00      	nop
  }

  return ret;
 800ee42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ee56:	2300      	movs	r3, #0
 800ee58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ee5a:	683b      	ldr	r3, [r7, #0]
 800ee5c:	889b      	ldrh	r3, [r3, #4]
 800ee5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ee60:	683b      	ldr	r3, [r7, #0]
 800ee62:	781b      	ldrb	r3, [r3, #0]
 800ee64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ee68:	2b40      	cmp	r3, #64	@ 0x40
 800ee6a:	d007      	beq.n	800ee7c <USBD_StdEPReq+0x30>
 800ee6c:	2b40      	cmp	r3, #64	@ 0x40
 800ee6e:	f200 817f 	bhi.w	800f170 <USBD_StdEPReq+0x324>
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d02a      	beq.n	800eecc <USBD_StdEPReq+0x80>
 800ee76:	2b20      	cmp	r3, #32
 800ee78:	f040 817a 	bne.w	800f170 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ee7c:	7bbb      	ldrb	r3, [r7, #14]
 800ee7e:	4619      	mov	r1, r3
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f7ff fe85 	bl	800eb90 <USBD_CoreFindEP>
 800ee86:	4603      	mov	r3, r0
 800ee88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ee8a:	7b7b      	ldrb	r3, [r7, #13]
 800ee8c:	2bff      	cmp	r3, #255	@ 0xff
 800ee8e:	f000 8174 	beq.w	800f17a <USBD_StdEPReq+0x32e>
 800ee92:	7b7b      	ldrb	r3, [r7, #13]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	f040 8170 	bne.w	800f17a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ee9a:	7b7a      	ldrb	r2, [r7, #13]
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800eea2:	7b7a      	ldrb	r2, [r7, #13]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	32ae      	adds	r2, #174	@ 0xae
 800eea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eeac:	689b      	ldr	r3, [r3, #8]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	f000 8163 	beq.w	800f17a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800eeb4:	7b7a      	ldrb	r2, [r7, #13]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	32ae      	adds	r2, #174	@ 0xae
 800eeba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eebe:	689b      	ldr	r3, [r3, #8]
 800eec0:	6839      	ldr	r1, [r7, #0]
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	4798      	blx	r3
 800eec6:	4603      	mov	r3, r0
 800eec8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800eeca:	e156      	b.n	800f17a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	785b      	ldrb	r3, [r3, #1]
 800eed0:	2b03      	cmp	r3, #3
 800eed2:	d008      	beq.n	800eee6 <USBD_StdEPReq+0x9a>
 800eed4:	2b03      	cmp	r3, #3
 800eed6:	f300 8145 	bgt.w	800f164 <USBD_StdEPReq+0x318>
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	f000 809b 	beq.w	800f016 <USBD_StdEPReq+0x1ca>
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d03c      	beq.n	800ef5e <USBD_StdEPReq+0x112>
 800eee4:	e13e      	b.n	800f164 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800eeec:	b2db      	uxtb	r3, r3
 800eeee:	2b02      	cmp	r3, #2
 800eef0:	d002      	beq.n	800eef8 <USBD_StdEPReq+0xac>
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	d016      	beq.n	800ef24 <USBD_StdEPReq+0xd8>
 800eef6:	e02c      	b.n	800ef52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00d      	beq.n	800ef1a <USBD_StdEPReq+0xce>
 800eefe:	7bbb      	ldrb	r3, [r7, #14]
 800ef00:	2b80      	cmp	r3, #128	@ 0x80
 800ef02:	d00a      	beq.n	800ef1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef04:	7bbb      	ldrb	r3, [r7, #14]
 800ef06:	4619      	mov	r1, r3
 800ef08:	6878      	ldr	r0, [r7, #4]
 800ef0a:	f006 f993 	bl	8015234 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef0e:	2180      	movs	r1, #128	@ 0x80
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f006 f98f 	bl	8015234 <USBD_LL_StallEP>
 800ef16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef18:	e020      	b.n	800ef5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	6878      	ldr	r0, [r7, #4]
 800ef1e:	f000 fca4 	bl	800f86a <USBD_CtlError>
              break;
 800ef22:	e01b      	b.n	800ef5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	885b      	ldrh	r3, [r3, #2]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10e      	bne.n	800ef4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ef2c:	7bbb      	ldrb	r3, [r7, #14]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d00b      	beq.n	800ef4a <USBD_StdEPReq+0xfe>
 800ef32:	7bbb      	ldrb	r3, [r7, #14]
 800ef34:	2b80      	cmp	r3, #128	@ 0x80
 800ef36:	d008      	beq.n	800ef4a <USBD_StdEPReq+0xfe>
 800ef38:	683b      	ldr	r3, [r7, #0]
 800ef3a:	88db      	ldrh	r3, [r3, #6]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d104      	bne.n	800ef4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef40:	7bbb      	ldrb	r3, [r7, #14]
 800ef42:	4619      	mov	r1, r3
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f006 f975 	bl	8015234 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f000 fd64 	bl	800fa18 <USBD_CtlSendStatus>

              break;
 800ef50:	e004      	b.n	800ef5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ef52:	6839      	ldr	r1, [r7, #0]
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f000 fc88 	bl	800f86a <USBD_CtlError>
              break;
 800ef5a:	bf00      	nop
          }
          break;
 800ef5c:	e107      	b.n	800f16e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ef64:	b2db      	uxtb	r3, r3
 800ef66:	2b02      	cmp	r3, #2
 800ef68:	d002      	beq.n	800ef70 <USBD_StdEPReq+0x124>
 800ef6a:	2b03      	cmp	r3, #3
 800ef6c:	d016      	beq.n	800ef9c <USBD_StdEPReq+0x150>
 800ef6e:	e04b      	b.n	800f008 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ef70:	7bbb      	ldrb	r3, [r7, #14]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d00d      	beq.n	800ef92 <USBD_StdEPReq+0x146>
 800ef76:	7bbb      	ldrb	r3, [r7, #14]
 800ef78:	2b80      	cmp	r3, #128	@ 0x80
 800ef7a:	d00a      	beq.n	800ef92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ef7c:	7bbb      	ldrb	r3, [r7, #14]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f006 f957 	bl	8015234 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef86:	2180      	movs	r1, #128	@ 0x80
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f006 f953 	bl	8015234 <USBD_LL_StallEP>
 800ef8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ef90:	e040      	b.n	800f014 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ef92:	6839      	ldr	r1, [r7, #0]
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f000 fc68 	bl	800f86a <USBD_CtlError>
              break;
 800ef9a:	e03b      	b.n	800f014 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	885b      	ldrh	r3, [r3, #2]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d136      	bne.n	800f012 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800efa4:	7bbb      	ldrb	r3, [r7, #14]
 800efa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d004      	beq.n	800efb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800efae:	7bbb      	ldrb	r3, [r7, #14]
 800efb0:	4619      	mov	r1, r3
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f006 f95d 	bl	8015272 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	f000 fd2d 	bl	800fa18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800efbe:	7bbb      	ldrb	r3, [r7, #14]
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff fde4 	bl	800eb90 <USBD_CoreFindEP>
 800efc8:	4603      	mov	r3, r0
 800efca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800efcc:	7b7b      	ldrb	r3, [r7, #13]
 800efce:	2bff      	cmp	r3, #255	@ 0xff
 800efd0:	d01f      	beq.n	800f012 <USBD_StdEPReq+0x1c6>
 800efd2:	7b7b      	ldrb	r3, [r7, #13]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d11c      	bne.n	800f012 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800efd8:	7b7a      	ldrb	r2, [r7, #13]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800efe0:	7b7a      	ldrb	r2, [r7, #13]
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	32ae      	adds	r2, #174	@ 0xae
 800efe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efea:	689b      	ldr	r3, [r3, #8]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d010      	beq.n	800f012 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800eff0:	7b7a      	ldrb	r2, [r7, #13]
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	32ae      	adds	r2, #174	@ 0xae
 800eff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	6839      	ldr	r1, [r7, #0]
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	4798      	blx	r3
 800f002:	4603      	mov	r3, r0
 800f004:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f006:	e004      	b.n	800f012 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f008:	6839      	ldr	r1, [r7, #0]
 800f00a:	6878      	ldr	r0, [r7, #4]
 800f00c:	f000 fc2d 	bl	800f86a <USBD_CtlError>
              break;
 800f010:	e000      	b.n	800f014 <USBD_StdEPReq+0x1c8>
              break;
 800f012:	bf00      	nop
          }
          break;
 800f014:	e0ab      	b.n	800f16e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f01c:	b2db      	uxtb	r3, r3
 800f01e:	2b02      	cmp	r3, #2
 800f020:	d002      	beq.n	800f028 <USBD_StdEPReq+0x1dc>
 800f022:	2b03      	cmp	r3, #3
 800f024:	d032      	beq.n	800f08c <USBD_StdEPReq+0x240>
 800f026:	e097      	b.n	800f158 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f028:	7bbb      	ldrb	r3, [r7, #14]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d007      	beq.n	800f03e <USBD_StdEPReq+0x1f2>
 800f02e:	7bbb      	ldrb	r3, [r7, #14]
 800f030:	2b80      	cmp	r3, #128	@ 0x80
 800f032:	d004      	beq.n	800f03e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f034:	6839      	ldr	r1, [r7, #0]
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 fc17 	bl	800f86a <USBD_CtlError>
                break;
 800f03c:	e091      	b.n	800f162 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f03e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f042:	2b00      	cmp	r3, #0
 800f044:	da0b      	bge.n	800f05e <USBD_StdEPReq+0x212>
 800f046:	7bbb      	ldrb	r3, [r7, #14]
 800f048:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f04c:	4613      	mov	r3, r2
 800f04e:	009b      	lsls	r3, r3, #2
 800f050:	4413      	add	r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	3310      	adds	r3, #16
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	4413      	add	r3, r2
 800f05a:	3304      	adds	r3, #4
 800f05c:	e00b      	b.n	800f076 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f05e:	7bbb      	ldrb	r3, [r7, #14]
 800f060:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f064:	4613      	mov	r3, r2
 800f066:	009b      	lsls	r3, r3, #2
 800f068:	4413      	add	r3, r2
 800f06a:	009b      	lsls	r3, r3, #2
 800f06c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f070:	687a      	ldr	r2, [r7, #4]
 800f072:	4413      	add	r3, r2
 800f074:	3304      	adds	r3, #4
 800f076:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	2200      	movs	r2, #0
 800f07c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f07e:	68bb      	ldr	r3, [r7, #8]
 800f080:	2202      	movs	r2, #2
 800f082:	4619      	mov	r1, r3
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 fc6d 	bl	800f964 <USBD_CtlSendData>
              break;
 800f08a:	e06a      	b.n	800f162 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f08c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f090:	2b00      	cmp	r3, #0
 800f092:	da11      	bge.n	800f0b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f094:	7bbb      	ldrb	r3, [r7, #14]
 800f096:	f003 020f 	and.w	r2, r3, #15
 800f09a:	6879      	ldr	r1, [r7, #4]
 800f09c:	4613      	mov	r3, r2
 800f09e:	009b      	lsls	r3, r3, #2
 800f0a0:	4413      	add	r3, r2
 800f0a2:	009b      	lsls	r3, r3, #2
 800f0a4:	440b      	add	r3, r1
 800f0a6:	3324      	adds	r3, #36	@ 0x24
 800f0a8:	881b      	ldrh	r3, [r3, #0]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d117      	bne.n	800f0de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f0ae:	6839      	ldr	r1, [r7, #0]
 800f0b0:	6878      	ldr	r0, [r7, #4]
 800f0b2:	f000 fbda 	bl	800f86a <USBD_CtlError>
                  break;
 800f0b6:	e054      	b.n	800f162 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f0b8:	7bbb      	ldrb	r3, [r7, #14]
 800f0ba:	f003 020f 	and.w	r2, r3, #15
 800f0be:	6879      	ldr	r1, [r7, #4]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	009b      	lsls	r3, r3, #2
 800f0c4:	4413      	add	r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	440b      	add	r3, r1
 800f0ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f0ce:	881b      	ldrh	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d104      	bne.n	800f0de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f0d4:	6839      	ldr	r1, [r7, #0]
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f000 fbc7 	bl	800f86a <USBD_CtlError>
                  break;
 800f0dc:	e041      	b.n	800f162 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f0de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	da0b      	bge.n	800f0fe <USBD_StdEPReq+0x2b2>
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f0ec:	4613      	mov	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4413      	add	r3, r2
 800f0f2:	009b      	lsls	r3, r3, #2
 800f0f4:	3310      	adds	r3, #16
 800f0f6:	687a      	ldr	r2, [r7, #4]
 800f0f8:	4413      	add	r3, r2
 800f0fa:	3304      	adds	r3, #4
 800f0fc:	e00b      	b.n	800f116 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f0fe:	7bbb      	ldrb	r3, [r7, #14]
 800f100:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f104:	4613      	mov	r3, r2
 800f106:	009b      	lsls	r3, r3, #2
 800f108:	4413      	add	r3, r2
 800f10a:	009b      	lsls	r3, r3, #2
 800f10c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	4413      	add	r3, r2
 800f114:	3304      	adds	r3, #4
 800f116:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f118:	7bbb      	ldrb	r3, [r7, #14]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d002      	beq.n	800f124 <USBD_StdEPReq+0x2d8>
 800f11e:	7bbb      	ldrb	r3, [r7, #14]
 800f120:	2b80      	cmp	r3, #128	@ 0x80
 800f122:	d103      	bne.n	800f12c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	2200      	movs	r2, #0
 800f128:	601a      	str	r2, [r3, #0]
 800f12a:	e00e      	b.n	800f14a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f12c:	7bbb      	ldrb	r3, [r7, #14]
 800f12e:	4619      	mov	r1, r3
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	f006 f8bd 	bl	80152b0 <USBD_LL_IsStallEP>
 800f136:	4603      	mov	r3, r0
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d003      	beq.n	800f144 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	2201      	movs	r2, #1
 800f140:	601a      	str	r2, [r3, #0]
 800f142:	e002      	b.n	800f14a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	2200      	movs	r2, #0
 800f148:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	2202      	movs	r2, #2
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fc07 	bl	800f964 <USBD_CtlSendData>
              break;
 800f156:	e004      	b.n	800f162 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 fb85 	bl	800f86a <USBD_CtlError>
              break;
 800f160:	bf00      	nop
          }
          break;
 800f162:	e004      	b.n	800f16e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f164:	6839      	ldr	r1, [r7, #0]
 800f166:	6878      	ldr	r0, [r7, #4]
 800f168:	f000 fb7f 	bl	800f86a <USBD_CtlError>
          break;
 800f16c:	bf00      	nop
      }
      break;
 800f16e:	e005      	b.n	800f17c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f170:	6839      	ldr	r1, [r7, #0]
 800f172:	6878      	ldr	r0, [r7, #4]
 800f174:	f000 fb79 	bl	800f86a <USBD_CtlError>
      break;
 800f178:	e000      	b.n	800f17c <USBD_StdEPReq+0x330>
      break;
 800f17a:	bf00      	nop
  }

  return ret;
 800f17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f17e:	4618      	mov	r0, r3
 800f180:	3710      	adds	r7, #16
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
	...

0800f188 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f192:	2300      	movs	r3, #0
 800f194:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f196:	2300      	movs	r3, #0
 800f198:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f19a:	2300      	movs	r3, #0
 800f19c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	885b      	ldrh	r3, [r3, #2]
 800f1a2:	0a1b      	lsrs	r3, r3, #8
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	3b01      	subs	r3, #1
 800f1a8:	2b0e      	cmp	r3, #14
 800f1aa:	f200 8152 	bhi.w	800f452 <USBD_GetDescriptor+0x2ca>
 800f1ae:	a201      	add	r2, pc, #4	@ (adr r2, 800f1b4 <USBD_GetDescriptor+0x2c>)
 800f1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1b4:	0800f225 	.word	0x0800f225
 800f1b8:	0800f23d 	.word	0x0800f23d
 800f1bc:	0800f27d 	.word	0x0800f27d
 800f1c0:	0800f453 	.word	0x0800f453
 800f1c4:	0800f453 	.word	0x0800f453
 800f1c8:	0800f3f3 	.word	0x0800f3f3
 800f1cc:	0800f41f 	.word	0x0800f41f
 800f1d0:	0800f453 	.word	0x0800f453
 800f1d4:	0800f453 	.word	0x0800f453
 800f1d8:	0800f453 	.word	0x0800f453
 800f1dc:	0800f453 	.word	0x0800f453
 800f1e0:	0800f453 	.word	0x0800f453
 800f1e4:	0800f453 	.word	0x0800f453
 800f1e8:	0800f453 	.word	0x0800f453
 800f1ec:	0800f1f1 	.word	0x0800f1f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f1f6:	69db      	ldr	r3, [r3, #28]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00b      	beq.n	800f214 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f202:	69db      	ldr	r3, [r3, #28]
 800f204:	687a      	ldr	r2, [r7, #4]
 800f206:	7c12      	ldrb	r2, [r2, #16]
 800f208:	f107 0108 	add.w	r1, r7, #8
 800f20c:	4610      	mov	r0, r2
 800f20e:	4798      	blx	r3
 800f210:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f212:	e126      	b.n	800f462 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f214:	6839      	ldr	r1, [r7, #0]
 800f216:	6878      	ldr	r0, [r7, #4]
 800f218:	f000 fb27 	bl	800f86a <USBD_CtlError>
        err++;
 800f21c:	7afb      	ldrb	r3, [r7, #11]
 800f21e:	3301      	adds	r3, #1
 800f220:	72fb      	strb	r3, [r7, #11]
      break;
 800f222:	e11e      	b.n	800f462 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	7c12      	ldrb	r2, [r2, #16]
 800f230:	f107 0108 	add.w	r1, r7, #8
 800f234:	4610      	mov	r0, r2
 800f236:	4798      	blx	r3
 800f238:	60f8      	str	r0, [r7, #12]
      break;
 800f23a:	e112      	b.n	800f462 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	7c1b      	ldrb	r3, [r3, #16]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d10d      	bne.n	800f260 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f24a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f24c:	f107 0208 	add.w	r2, r7, #8
 800f250:	4610      	mov	r0, r2
 800f252:	4798      	blx	r3
 800f254:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	3301      	adds	r3, #1
 800f25a:	2202      	movs	r2, #2
 800f25c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f25e:	e100      	b.n	800f462 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f268:	f107 0208 	add.w	r2, r7, #8
 800f26c:	4610      	mov	r0, r2
 800f26e:	4798      	blx	r3
 800f270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	3301      	adds	r3, #1
 800f276:	2202      	movs	r2, #2
 800f278:	701a      	strb	r2, [r3, #0]
      break;
 800f27a:	e0f2      	b.n	800f462 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	885b      	ldrh	r3, [r3, #2]
 800f280:	b2db      	uxtb	r3, r3
 800f282:	2b05      	cmp	r3, #5
 800f284:	f200 80ac 	bhi.w	800f3e0 <USBD_GetDescriptor+0x258>
 800f288:	a201      	add	r2, pc, #4	@ (adr r2, 800f290 <USBD_GetDescriptor+0x108>)
 800f28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f28e:	bf00      	nop
 800f290:	0800f2a9 	.word	0x0800f2a9
 800f294:	0800f2dd 	.word	0x0800f2dd
 800f298:	0800f311 	.word	0x0800f311
 800f29c:	0800f345 	.word	0x0800f345
 800f2a0:	0800f379 	.word	0x0800f379
 800f2a4:	0800f3ad 	.word	0x0800f3ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2ae:	685b      	ldr	r3, [r3, #4]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d00b      	beq.n	800f2cc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	687a      	ldr	r2, [r7, #4]
 800f2be:	7c12      	ldrb	r2, [r2, #16]
 800f2c0:	f107 0108 	add.w	r1, r7, #8
 800f2c4:	4610      	mov	r0, r2
 800f2c6:	4798      	blx	r3
 800f2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2ca:	e091      	b.n	800f3f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f2cc:	6839      	ldr	r1, [r7, #0]
 800f2ce:	6878      	ldr	r0, [r7, #4]
 800f2d0:	f000 facb 	bl	800f86a <USBD_CtlError>
            err++;
 800f2d4:	7afb      	ldrb	r3, [r7, #11]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f2da:	e089      	b.n	800f3f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d00b      	beq.n	800f300 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f2ee:	689b      	ldr	r3, [r3, #8]
 800f2f0:	687a      	ldr	r2, [r7, #4]
 800f2f2:	7c12      	ldrb	r2, [r2, #16]
 800f2f4:	f107 0108 	add.w	r1, r7, #8
 800f2f8:	4610      	mov	r0, r2
 800f2fa:	4798      	blx	r3
 800f2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f2fe:	e077      	b.n	800f3f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f300:	6839      	ldr	r1, [r7, #0]
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	f000 fab1 	bl	800f86a <USBD_CtlError>
            err++;
 800f308:	7afb      	ldrb	r3, [r7, #11]
 800f30a:	3301      	adds	r3, #1
 800f30c:	72fb      	strb	r3, [r7, #11]
          break;
 800f30e:	e06f      	b.n	800f3f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f316:	68db      	ldr	r3, [r3, #12]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d00b      	beq.n	800f334 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	687a      	ldr	r2, [r7, #4]
 800f326:	7c12      	ldrb	r2, [r2, #16]
 800f328:	f107 0108 	add.w	r1, r7, #8
 800f32c:	4610      	mov	r0, r2
 800f32e:	4798      	blx	r3
 800f330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f332:	e05d      	b.n	800f3f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f334:	6839      	ldr	r1, [r7, #0]
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	f000 fa97 	bl	800f86a <USBD_CtlError>
            err++;
 800f33c:	7afb      	ldrb	r3, [r7, #11]
 800f33e:	3301      	adds	r3, #1
 800f340:	72fb      	strb	r3, [r7, #11]
          break;
 800f342:	e055      	b.n	800f3f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f34a:	691b      	ldr	r3, [r3, #16]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00b      	beq.n	800f368 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f356:	691b      	ldr	r3, [r3, #16]
 800f358:	687a      	ldr	r2, [r7, #4]
 800f35a:	7c12      	ldrb	r2, [r2, #16]
 800f35c:	f107 0108 	add.w	r1, r7, #8
 800f360:	4610      	mov	r0, r2
 800f362:	4798      	blx	r3
 800f364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f366:	e043      	b.n	800f3f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f368:	6839      	ldr	r1, [r7, #0]
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f000 fa7d 	bl	800f86a <USBD_CtlError>
            err++;
 800f370:	7afb      	ldrb	r3, [r7, #11]
 800f372:	3301      	adds	r3, #1
 800f374:	72fb      	strb	r3, [r7, #11]
          break;
 800f376:	e03b      	b.n	800f3f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f37e:	695b      	ldr	r3, [r3, #20]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d00b      	beq.n	800f39c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f38a:	695b      	ldr	r3, [r3, #20]
 800f38c:	687a      	ldr	r2, [r7, #4]
 800f38e:	7c12      	ldrb	r2, [r2, #16]
 800f390:	f107 0108 	add.w	r1, r7, #8
 800f394:	4610      	mov	r0, r2
 800f396:	4798      	blx	r3
 800f398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f39a:	e029      	b.n	800f3f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f39c:	6839      	ldr	r1, [r7, #0]
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 fa63 	bl	800f86a <USBD_CtlError>
            err++;
 800f3a4:	7afb      	ldrb	r3, [r7, #11]
 800f3a6:	3301      	adds	r3, #1
 800f3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800f3aa:	e021      	b.n	800f3f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3b2:	699b      	ldr	r3, [r3, #24]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00b      	beq.n	800f3d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800f3be:	699b      	ldr	r3, [r3, #24]
 800f3c0:	687a      	ldr	r2, [r7, #4]
 800f3c2:	7c12      	ldrb	r2, [r2, #16]
 800f3c4:	f107 0108 	add.w	r1, r7, #8
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	4798      	blx	r3
 800f3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f3ce:	e00f      	b.n	800f3f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f3d0:	6839      	ldr	r1, [r7, #0]
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fa49 	bl	800f86a <USBD_CtlError>
            err++;
 800f3d8:	7afb      	ldrb	r3, [r7, #11]
 800f3da:	3301      	adds	r3, #1
 800f3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800f3de:	e007      	b.n	800f3f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f3e0:	6839      	ldr	r1, [r7, #0]
 800f3e2:	6878      	ldr	r0, [r7, #4]
 800f3e4:	f000 fa41 	bl	800f86a <USBD_CtlError>
          err++;
 800f3e8:	7afb      	ldrb	r3, [r7, #11]
 800f3ea:	3301      	adds	r3, #1
 800f3ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f3ee:	bf00      	nop
      }
      break;
 800f3f0:	e037      	b.n	800f462 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	7c1b      	ldrb	r3, [r3, #16]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d109      	bne.n	800f40e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f402:	f107 0208 	add.w	r2, r7, #8
 800f406:	4610      	mov	r0, r2
 800f408:	4798      	blx	r3
 800f40a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f40c:	e029      	b.n	800f462 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f40e:	6839      	ldr	r1, [r7, #0]
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	f000 fa2a 	bl	800f86a <USBD_CtlError>
        err++;
 800f416:	7afb      	ldrb	r3, [r7, #11]
 800f418:	3301      	adds	r3, #1
 800f41a:	72fb      	strb	r3, [r7, #11]
      break;
 800f41c:	e021      	b.n	800f462 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	7c1b      	ldrb	r3, [r3, #16]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d10d      	bne.n	800f442 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f42e:	f107 0208 	add.w	r2, r7, #8
 800f432:	4610      	mov	r0, r2
 800f434:	4798      	blx	r3
 800f436:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	3301      	adds	r3, #1
 800f43c:	2207      	movs	r2, #7
 800f43e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f440:	e00f      	b.n	800f462 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f442:	6839      	ldr	r1, [r7, #0]
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f000 fa10 	bl	800f86a <USBD_CtlError>
        err++;
 800f44a:	7afb      	ldrb	r3, [r7, #11]
 800f44c:	3301      	adds	r3, #1
 800f44e:	72fb      	strb	r3, [r7, #11]
      break;
 800f450:	e007      	b.n	800f462 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 fa08 	bl	800f86a <USBD_CtlError>
      err++;
 800f45a:	7afb      	ldrb	r3, [r7, #11]
 800f45c:	3301      	adds	r3, #1
 800f45e:	72fb      	strb	r3, [r7, #11]
      break;
 800f460:	bf00      	nop
  }

  if (err != 0U)
 800f462:	7afb      	ldrb	r3, [r7, #11]
 800f464:	2b00      	cmp	r3, #0
 800f466:	d11e      	bne.n	800f4a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	88db      	ldrh	r3, [r3, #6]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d016      	beq.n	800f49e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f470:	893b      	ldrh	r3, [r7, #8]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d00e      	beq.n	800f494 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	88da      	ldrh	r2, [r3, #6]
 800f47a:	893b      	ldrh	r3, [r7, #8]
 800f47c:	4293      	cmp	r3, r2
 800f47e:	bf28      	it	cs
 800f480:	4613      	movcs	r3, r2
 800f482:	b29b      	uxth	r3, r3
 800f484:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f486:	893b      	ldrh	r3, [r7, #8]
 800f488:	461a      	mov	r2, r3
 800f48a:	68f9      	ldr	r1, [r7, #12]
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f000 fa69 	bl	800f964 <USBD_CtlSendData>
 800f492:	e009      	b.n	800f4a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f494:	6839      	ldr	r1, [r7, #0]
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f000 f9e7 	bl	800f86a <USBD_CtlError>
 800f49c:	e004      	b.n	800f4a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f000 faba 	bl	800fa18 <USBD_CtlSendStatus>
 800f4a4:	e000      	b.n	800f4a8 <USBD_GetDescriptor+0x320>
    return;
 800f4a6:	bf00      	nop
  }
}
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop

0800f4b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4b0:	b580      	push	{r7, lr}
 800f4b2:	b084      	sub	sp, #16
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	889b      	ldrh	r3, [r3, #4]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d131      	bne.n	800f526 <USBD_SetAddress+0x76>
 800f4c2:	683b      	ldr	r3, [r7, #0]
 800f4c4:	88db      	ldrh	r3, [r3, #6]
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d12d      	bne.n	800f526 <USBD_SetAddress+0x76>
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	885b      	ldrh	r3, [r3, #2]
 800f4ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800f4d0:	d829      	bhi.n	800f526 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	885b      	ldrh	r3, [r3, #2]
 800f4d6:	b2db      	uxtb	r3, r3
 800f4d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f4dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f4e4:	b2db      	uxtb	r3, r3
 800f4e6:	2b03      	cmp	r3, #3
 800f4e8:	d104      	bne.n	800f4f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f4ea:	6839      	ldr	r1, [r7, #0]
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 f9bc 	bl	800f86a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f4f2:	e01d      	b.n	800f530 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	7bfa      	ldrb	r2, [r7, #15]
 800f4f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f4fc:	7bfb      	ldrb	r3, [r7, #15]
 800f4fe:	4619      	mov	r1, r3
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f005 ff01 	bl	8015308 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f506:	6878      	ldr	r0, [r7, #4]
 800f508:	f000 fa86 	bl	800fa18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f50c:	7bfb      	ldrb	r3, [r7, #15]
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d004      	beq.n	800f51c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2202      	movs	r2, #2
 800f516:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f51a:	e009      	b.n	800f530 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	2201      	movs	r2, #1
 800f520:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f524:	e004      	b.n	800f530 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 f99e 	bl	800f86a <USBD_CtlError>
  }
}
 800f52e:	bf00      	nop
 800f530:	bf00      	nop
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b084      	sub	sp, #16
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f542:	2300      	movs	r3, #0
 800f544:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	885b      	ldrh	r3, [r3, #2]
 800f54a:	b2da      	uxtb	r2, r3
 800f54c:	4b4e      	ldr	r3, [pc, #312]	@ (800f688 <USBD_SetConfig+0x150>)
 800f54e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f550:	4b4d      	ldr	r3, [pc, #308]	@ (800f688 <USBD_SetConfig+0x150>)
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	2b01      	cmp	r3, #1
 800f556:	d905      	bls.n	800f564 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 f985 	bl	800f86a <USBD_CtlError>
    return USBD_FAIL;
 800f560:	2303      	movs	r3, #3
 800f562:	e08c      	b.n	800f67e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f56a:	b2db      	uxtb	r3, r3
 800f56c:	2b02      	cmp	r3, #2
 800f56e:	d002      	beq.n	800f576 <USBD_SetConfig+0x3e>
 800f570:	2b03      	cmp	r3, #3
 800f572:	d029      	beq.n	800f5c8 <USBD_SetConfig+0x90>
 800f574:	e075      	b.n	800f662 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f576:	4b44      	ldr	r3, [pc, #272]	@ (800f688 <USBD_SetConfig+0x150>)
 800f578:	781b      	ldrb	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d020      	beq.n	800f5c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f57e:	4b42      	ldr	r3, [pc, #264]	@ (800f688 <USBD_SetConfig+0x150>)
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	461a      	mov	r2, r3
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f588:	4b3f      	ldr	r3, [pc, #252]	@ (800f688 <USBD_SetConfig+0x150>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	4619      	mov	r1, r3
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f7ff f84b 	bl	800e62a <USBD_SetClassConfig>
 800f594:	4603      	mov	r3, r0
 800f596:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f598:	7bfb      	ldrb	r3, [r7, #15]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d008      	beq.n	800f5b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f59e:	6839      	ldr	r1, [r7, #0]
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f000 f962 	bl	800f86a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	2202      	movs	r2, #2
 800f5aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f5ae:	e065      	b.n	800f67c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f5b0:	6878      	ldr	r0, [r7, #4]
 800f5b2:	f000 fa31 	bl	800fa18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2203      	movs	r2, #3
 800f5ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f5be:	e05d      	b.n	800f67c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f5c0:	6878      	ldr	r0, [r7, #4]
 800f5c2:	f000 fa29 	bl	800fa18 <USBD_CtlSendStatus>
      break;
 800f5c6:	e059      	b.n	800f67c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f5c8:	4b2f      	ldr	r3, [pc, #188]	@ (800f688 <USBD_SetConfig+0x150>)
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d112      	bne.n	800f5f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	2202      	movs	r2, #2
 800f5d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800f5d8:	4b2b      	ldr	r3, [pc, #172]	@ (800f688 <USBD_SetConfig+0x150>)
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	461a      	mov	r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f5e2:	4b29      	ldr	r3, [pc, #164]	@ (800f688 <USBD_SetConfig+0x150>)
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7ff f83a 	bl	800e662 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f5ee:	6878      	ldr	r0, [r7, #4]
 800f5f0:	f000 fa12 	bl	800fa18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f5f4:	e042      	b.n	800f67c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f5f6:	4b24      	ldr	r3, [pc, #144]	@ (800f688 <USBD_SetConfig+0x150>)
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	461a      	mov	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	429a      	cmp	r2, r3
 800f602:	d02a      	beq.n	800f65a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	b2db      	uxtb	r3, r3
 800f60a:	4619      	mov	r1, r3
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f7ff f828 	bl	800e662 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f612:	4b1d      	ldr	r3, [pc, #116]	@ (800f688 <USBD_SetConfig+0x150>)
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	461a      	mov	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f61c:	4b1a      	ldr	r3, [pc, #104]	@ (800f688 <USBD_SetConfig+0x150>)
 800f61e:	781b      	ldrb	r3, [r3, #0]
 800f620:	4619      	mov	r1, r3
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f7ff f801 	bl	800e62a <USBD_SetClassConfig>
 800f628:	4603      	mov	r3, r0
 800f62a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f62c:	7bfb      	ldrb	r3, [r7, #15]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00f      	beq.n	800f652 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 f918 	bl	800f86a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	b2db      	uxtb	r3, r3
 800f640:	4619      	mov	r1, r3
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f7ff f80d 	bl	800e662 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2202      	movs	r2, #2
 800f64c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800f650:	e014      	b.n	800f67c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f000 f9e0 	bl	800fa18 <USBD_CtlSendStatus>
      break;
 800f658:	e010      	b.n	800f67c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 f9dc 	bl	800fa18 <USBD_CtlSendStatus>
      break;
 800f660:	e00c      	b.n	800f67c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f662:	6839      	ldr	r1, [r7, #0]
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 f900 	bl	800f86a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f66a:	4b07      	ldr	r3, [pc, #28]	@ (800f688 <USBD_SetConfig+0x150>)
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	4619      	mov	r1, r3
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f7fe fff6 	bl	800e662 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f676:	2303      	movs	r3, #3
 800f678:	73fb      	strb	r3, [r7, #15]
      break;
 800f67a:	bf00      	nop
  }

  return ret;
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3710      	adds	r7, #16
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	20001944 	.word	0x20001944

0800f68c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	88db      	ldrh	r3, [r3, #6]
 800f69a:	2b01      	cmp	r3, #1
 800f69c:	d004      	beq.n	800f6a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f69e:	6839      	ldr	r1, [r7, #0]
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 f8e2 	bl	800f86a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f6a6:	e023      	b.n	800f6f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6ae:	b2db      	uxtb	r3, r3
 800f6b0:	2b02      	cmp	r3, #2
 800f6b2:	dc02      	bgt.n	800f6ba <USBD_GetConfig+0x2e>
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	dc03      	bgt.n	800f6c0 <USBD_GetConfig+0x34>
 800f6b8:	e015      	b.n	800f6e6 <USBD_GetConfig+0x5a>
 800f6ba:	2b03      	cmp	r3, #3
 800f6bc:	d00b      	beq.n	800f6d6 <USBD_GetConfig+0x4a>
 800f6be:	e012      	b.n	800f6e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	2201      	movs	r2, #1
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 f948 	bl	800f964 <USBD_CtlSendData>
        break;
 800f6d4:	e00c      	b.n	800f6f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	3304      	adds	r3, #4
 800f6da:	2201      	movs	r2, #1
 800f6dc:	4619      	mov	r1, r3
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f000 f940 	bl	800f964 <USBD_CtlSendData>
        break;
 800f6e4:	e004      	b.n	800f6f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f6e6:	6839      	ldr	r1, [r7, #0]
 800f6e8:	6878      	ldr	r0, [r7, #4]
 800f6ea:	f000 f8be 	bl	800f86a <USBD_CtlError>
        break;
 800f6ee:	bf00      	nop
}
 800f6f0:	bf00      	nop
 800f6f2:	3708      	adds	r7, #8
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	3b01      	subs	r3, #1
 800f70c:	2b02      	cmp	r3, #2
 800f70e:	d81e      	bhi.n	800f74e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	88db      	ldrh	r3, [r3, #6]
 800f714:	2b02      	cmp	r3, #2
 800f716:	d004      	beq.n	800f722 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	f000 f8a5 	bl	800f86a <USBD_CtlError>
        break;
 800f720:	e01a      	b.n	800f758 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2201      	movs	r2, #1
 800f726:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d005      	beq.n	800f73e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	68db      	ldr	r3, [r3, #12]
 800f736:	f043 0202 	orr.w	r2, r3, #2
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	330c      	adds	r3, #12
 800f742:	2202      	movs	r2, #2
 800f744:	4619      	mov	r1, r3
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 f90c 	bl	800f964 <USBD_CtlSendData>
      break;
 800f74c:	e004      	b.n	800f758 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 f88a 	bl	800f86a <USBD_CtlError>
      break;
 800f756:	bf00      	nop
  }
}
 800f758:	bf00      	nop
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}

0800f760 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b082      	sub	sp, #8
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
 800f768:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f76a:	683b      	ldr	r3, [r7, #0]
 800f76c:	885b      	ldrh	r3, [r3, #2]
 800f76e:	2b01      	cmp	r3, #1
 800f770:	d107      	bne.n	800f782 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	2201      	movs	r2, #1
 800f776:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f000 f94c 	bl	800fa18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f780:	e013      	b.n	800f7aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	885b      	ldrh	r3, [r3, #2]
 800f786:	2b02      	cmp	r3, #2
 800f788:	d10b      	bne.n	800f7a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	889b      	ldrh	r3, [r3, #4]
 800f78e:	0a1b      	lsrs	r3, r3, #8
 800f790:	b29b      	uxth	r3, r3
 800f792:	b2da      	uxtb	r2, r3
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 f93c 	bl	800fa18 <USBD_CtlSendStatus>
}
 800f7a0:	e003      	b.n	800f7aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f7a2:	6839      	ldr	r1, [r7, #0]
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f000 f860 	bl	800f86a <USBD_CtlError>
}
 800f7aa:	bf00      	nop
 800f7ac:	3708      	adds	r7, #8
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}

0800f7b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7b2:	b580      	push	{r7, lr}
 800f7b4:	b082      	sub	sp, #8
 800f7b6:	af00      	add	r7, sp, #0
 800f7b8:	6078      	str	r0, [r7, #4]
 800f7ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	3b01      	subs	r3, #1
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d80b      	bhi.n	800f7e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f7ca:	683b      	ldr	r3, [r7, #0]
 800f7cc:	885b      	ldrh	r3, [r3, #2]
 800f7ce:	2b01      	cmp	r3, #1
 800f7d0:	d10c      	bne.n	800f7ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f000 f91c 	bl	800fa18 <USBD_CtlSendStatus>
      }
      break;
 800f7e0:	e004      	b.n	800f7ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f7e2:	6839      	ldr	r1, [r7, #0]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 f840 	bl	800f86a <USBD_CtlError>
      break;
 800f7ea:	e000      	b.n	800f7ee <USBD_ClrFeature+0x3c>
      break;
 800f7ec:	bf00      	nop
  }
}
 800f7ee:	bf00      	nop
 800f7f0:	3708      	adds	r7, #8
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}

0800f7f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b084      	sub	sp, #16
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
 800f7fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	781a      	ldrb	r2, [r3, #0]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	3301      	adds	r3, #1
 800f810:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	781a      	ldrb	r2, [r3, #0]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	3301      	adds	r3, #1
 800f81e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f7ff fa16 	bl	800ec52 <SWAPBYTE>
 800f826:	4603      	mov	r3, r0
 800f828:	461a      	mov	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	3301      	adds	r3, #1
 800f832:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	3301      	adds	r3, #1
 800f838:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f83a:	68f8      	ldr	r0, [r7, #12]
 800f83c:	f7ff fa09 	bl	800ec52 <SWAPBYTE>
 800f840:	4603      	mov	r3, r0
 800f842:	461a      	mov	r2, r3
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	3301      	adds	r3, #1
 800f84c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	3301      	adds	r3, #1
 800f852:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f854:	68f8      	ldr	r0, [r7, #12]
 800f856:	f7ff f9fc 	bl	800ec52 <SWAPBYTE>
 800f85a:	4603      	mov	r3, r0
 800f85c:	461a      	mov	r2, r3
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	80da      	strh	r2, [r3, #6]
}
 800f862:	bf00      	nop
 800f864:	3710      	adds	r7, #16
 800f866:	46bd      	mov	sp, r7
 800f868:	bd80      	pop	{r7, pc}

0800f86a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f86a:	b580      	push	{r7, lr}
 800f86c:	b082      	sub	sp, #8
 800f86e:	af00      	add	r7, sp, #0
 800f870:	6078      	str	r0, [r7, #4]
 800f872:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f874:	2180      	movs	r1, #128	@ 0x80
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f005 fcdc 	bl	8015234 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f87c:	2100      	movs	r1, #0
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f005 fcd8 	bl	8015234 <USBD_LL_StallEP>
}
 800f884:	bf00      	nop
 800f886:	3708      	adds	r7, #8
 800f888:	46bd      	mov	sp, r7
 800f88a:	bd80      	pop	{r7, pc}

0800f88c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b086      	sub	sp, #24
 800f890:	af00      	add	r7, sp, #0
 800f892:	60f8      	str	r0, [r7, #12]
 800f894:	60b9      	str	r1, [r7, #8]
 800f896:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f898:	2300      	movs	r3, #0
 800f89a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d042      	beq.n	800f928 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800f8a6:	6938      	ldr	r0, [r7, #16]
 800f8a8:	f000 f842 	bl	800f930 <USBD_GetLen>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	3301      	adds	r3, #1
 800f8b0:	005b      	lsls	r3, r3, #1
 800f8b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8b6:	d808      	bhi.n	800f8ca <USBD_GetString+0x3e>
 800f8b8:	6938      	ldr	r0, [r7, #16]
 800f8ba:	f000 f839 	bl	800f930 <USBD_GetLen>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	b29b      	uxth	r3, r3
 800f8c4:	005b      	lsls	r3, r3, #1
 800f8c6:	b29a      	uxth	r2, r3
 800f8c8:	e001      	b.n	800f8ce <USBD_GetString+0x42>
 800f8ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f8d2:	7dfb      	ldrb	r3, [r7, #23]
 800f8d4:	68ba      	ldr	r2, [r7, #8]
 800f8d6:	4413      	add	r3, r2
 800f8d8:	687a      	ldr	r2, [r7, #4]
 800f8da:	7812      	ldrb	r2, [r2, #0]
 800f8dc:	701a      	strb	r2, [r3, #0]
  idx++;
 800f8de:	7dfb      	ldrb	r3, [r7, #23]
 800f8e0:	3301      	adds	r3, #1
 800f8e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f8e4:	7dfb      	ldrb	r3, [r7, #23]
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	2203      	movs	r2, #3
 800f8ec:	701a      	strb	r2, [r3, #0]
  idx++;
 800f8ee:	7dfb      	ldrb	r3, [r7, #23]
 800f8f0:	3301      	adds	r3, #1
 800f8f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f8f4:	e013      	b.n	800f91e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800f8f6:	7dfb      	ldrb	r3, [r7, #23]
 800f8f8:	68ba      	ldr	r2, [r7, #8]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	693a      	ldr	r2, [r7, #16]
 800f8fe:	7812      	ldrb	r2, [r2, #0]
 800f900:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	3301      	adds	r3, #1
 800f906:	613b      	str	r3, [r7, #16]
    idx++;
 800f908:	7dfb      	ldrb	r3, [r7, #23]
 800f90a:	3301      	adds	r3, #1
 800f90c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f90e:	7dfb      	ldrb	r3, [r7, #23]
 800f910:	68ba      	ldr	r2, [r7, #8]
 800f912:	4413      	add	r3, r2
 800f914:	2200      	movs	r2, #0
 800f916:	701a      	strb	r2, [r3, #0]
    idx++;
 800f918:	7dfb      	ldrb	r3, [r7, #23]
 800f91a:	3301      	adds	r3, #1
 800f91c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	781b      	ldrb	r3, [r3, #0]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d1e7      	bne.n	800f8f6 <USBD_GetString+0x6a>
 800f926:	e000      	b.n	800f92a <USBD_GetString+0x9e>
    return;
 800f928:	bf00      	nop
  }
}
 800f92a:	3718      	adds	r7, #24
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}

0800f930 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f930:	b480      	push	{r7}
 800f932:	b085      	sub	sp, #20
 800f934:	af00      	add	r7, sp, #0
 800f936:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f938:	2300      	movs	r3, #0
 800f93a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f940:	e005      	b.n	800f94e <USBD_GetLen+0x1e>
  {
    len++;
 800f942:	7bfb      	ldrb	r3, [r7, #15]
 800f944:	3301      	adds	r3, #1
 800f946:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	3301      	adds	r3, #1
 800f94c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1f5      	bne.n	800f942 <USBD_GetLen+0x12>
  }

  return len;
 800f956:	7bfb      	ldrb	r3, [r7, #15]
}
 800f958:	4618      	mov	r0, r3
 800f95a:	3714      	adds	r7, #20
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f964:	b580      	push	{r7, lr}
 800f966:	b084      	sub	sp, #16
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2202      	movs	r2, #2
 800f974:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	68ba      	ldr	r2, [r7, #8]
 800f988:	2100      	movs	r1, #0
 800f98a:	68f8      	ldr	r0, [r7, #12]
 800f98c:	f005 fcdb 	bl	8015346 <USBD_LL_Transmit>

  return USBD_OK;
 800f990:	2300      	movs	r3, #0
}
 800f992:	4618      	mov	r0, r3
 800f994:	3710      	adds	r7, #16
 800f996:	46bd      	mov	sp, r7
 800f998:	bd80      	pop	{r7, pc}

0800f99a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f99a:	b580      	push	{r7, lr}
 800f99c:	b084      	sub	sp, #16
 800f99e:	af00      	add	r7, sp, #0
 800f9a0:	60f8      	str	r0, [r7, #12]
 800f9a2:	60b9      	str	r1, [r7, #8]
 800f9a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68ba      	ldr	r2, [r7, #8]
 800f9aa:	2100      	movs	r1, #0
 800f9ac:	68f8      	ldr	r0, [r7, #12]
 800f9ae:	f005 fcca 	bl	8015346 <USBD_LL_Transmit>

  return USBD_OK;
 800f9b2:	2300      	movs	r3, #0
}
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	3710      	adds	r7, #16
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b084      	sub	sp, #16
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	60f8      	str	r0, [r7, #12]
 800f9c4:	60b9      	str	r1, [r7, #8]
 800f9c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2203      	movs	r2, #3
 800f9cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	68ba      	ldr	r2, [r7, #8]
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	68f8      	ldr	r0, [r7, #12]
 800f9e8:	f005 fcce 	bl	8015388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f9ec:	2300      	movs	r3, #0
}
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	3710      	adds	r7, #16
 800f9f2:	46bd      	mov	sp, r7
 800f9f4:	bd80      	pop	{r7, pc}

0800f9f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f9f6:	b580      	push	{r7, lr}
 800f9f8:	b084      	sub	sp, #16
 800f9fa:	af00      	add	r7, sp, #0
 800f9fc:	60f8      	str	r0, [r7, #12]
 800f9fe:	60b9      	str	r1, [r7, #8]
 800fa00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	68ba      	ldr	r2, [r7, #8]
 800fa06:	2100      	movs	r1, #0
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f005 fcbd 	bl	8015388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa0e:	2300      	movs	r3, #0
}
 800fa10:	4618      	mov	r0, r3
 800fa12:	3710      	adds	r7, #16
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2204      	movs	r2, #4
 800fa24:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fa28:	2300      	movs	r3, #0
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	6878      	ldr	r0, [r7, #4]
 800fa30:	f005 fc89 	bl	8015346 <USBD_LL_Transmit>

  return USBD_OK;
 800fa34:	2300      	movs	r3, #0
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3708      	adds	r7, #8
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b082      	sub	sp, #8
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	2205      	movs	r2, #5
 800fa4a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fa4e:	2300      	movs	r3, #0
 800fa50:	2200      	movs	r2, #0
 800fa52:	2100      	movs	r1, #0
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f005 fc97 	bl	8015388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3708      	adds	r7, #8
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b088      	sub	sp, #32
 800fa68:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fa6e:	f107 0308 	add.w	r3, r7, #8
 800fa72:	2218      	movs	r2, #24
 800fa74:	2100      	movs	r1, #0
 800fa76:	4618      	mov	r0, r3
 800fa78:	f001 fa21 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 800fa7c:	233f      	movs	r3, #63	@ 0x3f
 800fa7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800fa80:	2381      	movs	r3, #129	@ 0x81
 800fa82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fa84:	1dfb      	adds	r3, r7, #7
 800fa86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fa88:	2301      	movs	r3, #1
 800fa8a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa8c:	f107 0308 	add.w	r3, r7, #8
 800fa90:	2100      	movs	r1, #0
 800fa92:	4618      	mov	r0, r3
 800fa94:	f001 fc9c 	bl	80113d0 <hci_send_req>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	da01      	bge.n	800faa2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fa9e:	23ff      	movs	r3, #255	@ 0xff
 800faa0:	e000      	b.n	800faa4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800faa2:	79fb      	ldrb	r3, [r7, #7]
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3720      	adds	r7, #32
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}

0800faac <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800faac:	b5b0      	push	{r4, r5, r7, lr}
 800faae:	b0ce      	sub	sp, #312	@ 0x138
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	4605      	mov	r5, r0
 800fab4:	460c      	mov	r4, r1
 800fab6:	4610      	mov	r0, r2
 800fab8:	4619      	mov	r1, r3
 800faba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fabe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800fac2:	462a      	mov	r2, r5
 800fac4:	701a      	strb	r2, [r3, #0]
 800fac6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800faca:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800face:	4622      	mov	r2, r4
 800fad0:	801a      	strh	r2, [r3, #0]
 800fad2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fad6:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800fada:	4602      	mov	r2, r0
 800fadc:	801a      	strh	r2, [r3, #0]
 800fade:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fae2:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800fae6:	460a      	mov	r2, r1
 800fae8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800faea:	f107 0310 	add.w	r3, r7, #16
 800faee:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800faf2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800faf6:	3308      	adds	r3, #8
 800faf8:	f107 0210 	add.w	r2, r7, #16
 800fafc:	4413      	add	r3, r2
 800fafe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800fb02:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800fb06:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800fb0a:	4413      	add	r3, r2
 800fb0c:	3309      	adds	r3, #9
 800fb0e:	f107 0210 	add.w	r2, r7, #16
 800fb12:	4413      	add	r3, r2
 800fb14:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fb18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fb1c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fb20:	2200      	movs	r2, #0
 800fb22:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fb24:	2300      	movs	r3, #0
 800fb26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800fb2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb2e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fb32:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800fb36:	7812      	ldrb	r2, [r2, #0]
 800fb38:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fb3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb3e:	3301      	adds	r3, #1
 800fb40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800fb44:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb48:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fb4c:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800fb50:	8812      	ldrh	r2, [r2, #0]
 800fb52:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800fb56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb5a:	3302      	adds	r3, #2
 800fb5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800fb60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb64:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fb68:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800fb6c:	8812      	ldrh	r2, [r2, #0]
 800fb6e:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800fb72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb76:	3302      	adds	r3, #2
 800fb78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800fb7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb80:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800fb84:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800fb88:	7812      	ldrb	r2, [r2, #0]
 800fb8a:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fb8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb90:	3301      	adds	r3, #1
 800fb92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800fb96:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fb9a:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800fb9e:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800fba0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fba4:	3301      	adds	r3, #1
 800fba6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800fbaa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fbae:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800fbb2:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800fbb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbb8:	3301      	adds	r3, #1
 800fbba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800fbbe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800fbc2:	3308      	adds	r3, #8
 800fbc4:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800fbc8:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f001 f966 	bl	8010e9e <Osal_MemCpy>
    index_input += Local_Name_Length;
 800fbd2:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800fbd6:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800fbda:	4413      	add	r3, r2
 800fbdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800fbe0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fbe4:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800fbe8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800fbea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbee:	3301      	adds	r3, #1
 800fbf0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800fbf4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800fbfe:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800fc02:	4618      	mov	r0, r3
 800fc04:	f001 f94b 	bl	8010e9e <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800fc08:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800fc0c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800fc10:	4413      	add	r3, r2
 800fc12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800fc16:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc1a:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800fc1e:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800fc20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc24:	3302      	adds	r3, #2
 800fc26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800fc2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fc2e:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800fc32:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800fc34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc38:	3302      	adds	r3, #2
 800fc3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc42:	2218      	movs	r2, #24
 800fc44:	2100      	movs	r1, #0
 800fc46:	4618      	mov	r0, r3
 800fc48:	f001 f939 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 800fc4c:	233f      	movs	r3, #63	@ 0x3f
 800fc4e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800fc52:	2383      	movs	r3, #131	@ 0x83
 800fc54:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fc58:	f107 0310 	add.w	r3, r7, #16
 800fc5c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fc60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc64:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fc68:	f107 030f 	add.w	r3, r7, #15
 800fc6c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fc70:	2301      	movs	r3, #1
 800fc72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc7a:	2100      	movs	r1, #0
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f001 fba7 	bl	80113d0 <hci_send_req>
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	da01      	bge.n	800fc8c <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800fc88:	23ff      	movs	r3, #255	@ 0xff
 800fc8a:	e004      	b.n	800fc96 <aci_gap_set_discoverable+0x1ea>
  return status;
 800fc8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800fc90:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fc94:	781b      	ldrb	r3, [r3, #0]
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bdb0      	pop	{r4, r5, r7, pc}

0800fca0 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b0cc      	sub	sp, #304	@ 0x130
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	4602      	mov	r2, r0
 800fca8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fcb0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800fcb2:	f107 0310 	add.w	r3, r7, #16
 800fcb6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fcba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fcbe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800fccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fcd0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fcd4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fcd8:	7812      	ldrb	r2, [r2, #0]
 800fcda:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fcdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fce0:	3301      	adds	r3, #1
 800fce2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fce6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fcea:	2218      	movs	r2, #24
 800fcec:	2100      	movs	r1, #0
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f001 f8e5 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 800fcf4:	233f      	movs	r3, #63	@ 0x3f
 800fcf6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800fcfa:	2385      	movs	r3, #133	@ 0x85
 800fcfc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fd00:	f107 0310 	add.w	r3, r7, #16
 800fd04:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fd08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fd0c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fd10:	f107 030f 	add.w	r3, r7, #15
 800fd14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fd18:	2301      	movs	r3, #1
 800fd1a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fd1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fd22:	2100      	movs	r1, #0
 800fd24:	4618      	mov	r0, r3
 800fd26:	f001 fb53 	bl	80113d0 <hci_send_req>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	da01      	bge.n	800fd34 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800fd30:	23ff      	movs	r3, #255	@ 0xff
 800fd32:	e004      	b.n	800fd3e <aci_gap_set_io_capability+0x9e>
  return status;
 800fd34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fd3c:	781b      	ldrb	r3, [r3, #0]
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800fd48:	b5b0      	push	{r4, r5, r7, lr}
 800fd4a:	b0cc      	sub	sp, #304	@ 0x130
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	4605      	mov	r5, r0
 800fd50:	460c      	mov	r4, r1
 800fd52:	4610      	mov	r0, r2
 800fd54:	4619      	mov	r1, r3
 800fd56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd5a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fd5e:	462a      	mov	r2, r5
 800fd60:	701a      	strb	r2, [r3, #0]
 800fd62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd66:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fd6a:	4622      	mov	r2, r4
 800fd6c:	701a      	strb	r2, [r3, #0]
 800fd6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd72:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fd76:	4602      	mov	r2, r0
 800fd78:	701a      	strb	r2, [r3, #0]
 800fd7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800fd82:	460a      	mov	r2, r1
 800fd84:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800fd86:	f107 0310 	add.w	r3, r7, #16
 800fd8a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fd8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fd92:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fd96:	2200      	movs	r2, #0
 800fd98:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800fda0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fda4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fda8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fdac:	7812      	ldrb	r2, [r2, #0]
 800fdae:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fdb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800fdba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fdbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fdc2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fdc6:	7812      	ldrb	r2, [r2, #0]
 800fdc8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fdca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fdce:	3301      	adds	r3, #1
 800fdd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800fdd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fdd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fddc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fde0:	7812      	ldrb	r2, [r2, #0]
 800fde2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fde4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fde8:	3301      	adds	r3, #1
 800fdea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800fdee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fdf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fdf6:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800fdfa:	7812      	ldrb	r2, [r2, #0]
 800fdfc:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800fdfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe02:	3301      	adds	r3, #1
 800fe04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800fe08:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe0c:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800fe10:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800fe12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe16:	3301      	adds	r3, #1
 800fe18:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800fe1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe20:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800fe24:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800fe26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800fe30:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe34:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800fe38:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800fe3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe3e:	3301      	adds	r3, #1
 800fe40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800fe44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe48:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800fe4c:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800fe50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe54:	3304      	adds	r3, #4
 800fe56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800fe5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fe5e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800fe62:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800fe64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe68:	3301      	adds	r3, #1
 800fe6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fe6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fe72:	2218      	movs	r2, #24
 800fe74:	2100      	movs	r1, #0
 800fe76:	4618      	mov	r0, r3
 800fe78:	f001 f821 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 800fe7c:	233f      	movs	r3, #63	@ 0x3f
 800fe7e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800fe82:	2386      	movs	r3, #134	@ 0x86
 800fe84:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fe88:	f107 0310 	add.w	r3, r7, #16
 800fe8c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fe90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fe94:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fe98:	f107 030f 	add.w	r3, r7, #15
 800fe9c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fea0:	2301      	movs	r3, #1
 800fea2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fea6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800feaa:	2100      	movs	r1, #0
 800feac:	4618      	mov	r0, r3
 800feae:	f001 fa8f 	bl	80113d0 <hci_send_req>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	da01      	bge.n	800febc <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800feb8:	23ff      	movs	r3, #255	@ 0xff
 800feba:	e004      	b.n	800fec6 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800febc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fec0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fec4:	781b      	ldrb	r3, [r3, #0]
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fecc:	46bd      	mov	sp, r7
 800fece:	bdb0      	pop	{r4, r5, r7, pc}

0800fed0 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b0cc      	sub	sp, #304	@ 0x130
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	4602      	mov	r2, r0
 800fed8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fedc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800fee0:	6019      	str	r1, [r3, #0]
 800fee2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fee6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800feea:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800feec:	f107 0310 	add.w	r3, r7, #16
 800fef0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fef4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fef8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fefc:	2200      	movs	r2, #0
 800fefe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ff00:	2300      	movs	r3, #0
 800ff02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ff06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ff0e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ff12:	8812      	ldrh	r2, [r2, #0]
 800ff14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ff16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff1a:	3302      	adds	r3, #2
 800ff1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800ff20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ff24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ff28:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ff2c:	6812      	ldr	r2, [r2, #0]
 800ff2e:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800ff32:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff36:	3304      	adds	r3, #4
 800ff38:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ff3c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff40:	2218      	movs	r2, #24
 800ff42:	2100      	movs	r1, #0
 800ff44:	4618      	mov	r0, r3
 800ff46:	f000 ffba 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 800ff4a:	233f      	movs	r3, #63	@ 0x3f
 800ff4c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800ff50:	2388      	movs	r3, #136	@ 0x88
 800ff52:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ff56:	f107 0310 	add.w	r3, r7, #16
 800ff5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ff5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ff62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ff66:	f107 030f 	add.w	r3, r7, #15
 800ff6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ff6e:	2301      	movs	r3, #1
 800ff70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ff74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ff78:	2100      	movs	r1, #0
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f001 fa28 	bl	80113d0 <hci_send_req>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	da01      	bge.n	800ff8a <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800ff86:	23ff      	movs	r3, #255	@ 0xff
 800ff88:	e004      	b.n	800ff94 <aci_gap_pass_key_resp+0xc4>
  return status;
 800ff8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ff8e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ff92:	781b      	ldrb	r3, [r3, #0]
}
 800ff94:	4618      	mov	r0, r3
 800ff96:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}

0800ff9e <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800ff9e:	b590      	push	{r4, r7, lr}
 800ffa0:	b0cd      	sub	sp, #308	@ 0x134
 800ffa2:	af00      	add	r7, sp, #0
 800ffa4:	4604      	mov	r4, r0
 800ffa6:	4608      	mov	r0, r1
 800ffa8:	4611      	mov	r1, r2
 800ffaa:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ffae:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ffb2:	6013      	str	r3, [r2, #0]
 800ffb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ffb8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ffbc:	4622      	mov	r2, r4
 800ffbe:	701a      	strb	r2, [r3, #0]
 800ffc0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ffc4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ffc8:	4602      	mov	r2, r0
 800ffca:	701a      	strb	r2, [r3, #0]
 800ffcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ffd0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ffd4:	460a      	mov	r2, r1
 800ffd6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ffd8:	f107 0310 	add.w	r3, r7, #16
 800ffdc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ffe0:	f107 0308 	add.w	r3, r7, #8
 800ffe4:	2207      	movs	r2, #7
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f000 ff68 	bl	8010ebe <Osal_MemSet>
  int index_input = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800fff4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fff8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fffc:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010000:	7812      	ldrb	r2, [r2, #0]
 8010002:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010004:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010008:	3301      	adds	r3, #1
 801000a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 801000e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010012:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010016:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801001a:	7812      	ldrb	r2, [r2, #0]
 801001c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 801001e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010022:	3301      	adds	r3, #1
 8010024:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 8010028:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801002c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010030:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010034:	7812      	ldrb	r2, [r2, #0]
 8010036:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010038:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801003c:	3301      	adds	r3, #1
 801003e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010042:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010046:	2218      	movs	r2, #24
 8010048:	2100      	movs	r1, #0
 801004a:	4618      	mov	r0, r3
 801004c:	f000 ff37 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 8010050:	233f      	movs	r3, #63	@ 0x3f
 8010052:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 8010056:	238a      	movs	r3, #138	@ 0x8a
 8010058:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801005c:	f107 0310 	add.w	r3, r7, #16
 8010060:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010064:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010068:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801006c:	f107 0308 	add.w	r3, r7, #8
 8010070:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8010074:	2307      	movs	r3, #7
 8010076:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801007a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801007e:	2100      	movs	r1, #0
 8010080:	4618      	mov	r0, r3
 8010082:	f001 f9a5 	bl	80113d0 <hci_send_req>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	da01      	bge.n	8010090 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 801008c:	23ff      	movs	r3, #255	@ 0xff
 801008e:	e02e      	b.n	80100ee <aci_gap_init+0x150>
  if ( resp.Status )
 8010090:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010094:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	2b00      	cmp	r3, #0
 801009c:	d005      	beq.n	80100aa <aci_gap_init+0x10c>
    return resp.Status;
 801009e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80100a2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80100a6:	781b      	ldrb	r3, [r3, #0]
 80100a8:	e021      	b.n	80100ee <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 80100aa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80100ae:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80100b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80100bc:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80100c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80100c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80100cc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80100d0:	b29a      	uxth	r2, r3
 80100d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80100d6:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80100d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80100dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80100e0:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80100ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80100ec:	2300      	movs	r3, #0
}
 80100ee:	4618      	mov	r0, r3
 80100f0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd90      	pop	{r4, r7, pc}

080100f8 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 80100f8:	b580      	push	{r7, lr}
 80100fa:	b0cc      	sub	sp, #304	@ 0x130
 80100fc:	af00      	add	r7, sp, #0
 80100fe:	4602      	mov	r2, r0
 8010100:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010104:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010108:	6019      	str	r1, [r3, #0]
 801010a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801010e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010112:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8010114:	f107 0310 	add.w	r3, r7, #16
 8010118:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801011c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010120:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010124:	2200      	movs	r2, #0
 8010126:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010128:	2300      	movs	r3, #0
 801012a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 801012e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010132:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010136:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 801013a:	7812      	ldrb	r2, [r2, #0]
 801013c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801013e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010142:	3301      	adds	r3, #1
 8010144:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8010148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801014c:	1c58      	adds	r0, r3, #1
 801014e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010152:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010156:	781a      	ldrb	r2, [r3, #0]
 8010158:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801015c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010160:	6819      	ldr	r1, [r3, #0]
 8010162:	f000 fe9c 	bl	8010e9e <Osal_MemCpy>
  index_input += AdvDataLen;
 8010166:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801016a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801016e:	781b      	ldrb	r3, [r3, #0]
 8010170:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010174:	4413      	add	r3, r2
 8010176:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801017a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801017e:	2218      	movs	r2, #24
 8010180:	2100      	movs	r1, #0
 8010182:	4618      	mov	r0, r3
 8010184:	f000 fe9b 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 8010188:	233f      	movs	r3, #63	@ 0x3f
 801018a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 801018e:	238e      	movs	r3, #142	@ 0x8e
 8010190:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010194:	f107 0310 	add.w	r3, r7, #16
 8010198:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801019c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80101a0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80101a4:	f107 030f 	add.w	r3, r7, #15
 80101a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80101ac:	2301      	movs	r3, #1
 80101ae:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80101b2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80101b6:	2100      	movs	r1, #0
 80101b8:	4618      	mov	r0, r3
 80101ba:	f001 f909 	bl	80113d0 <hci_send_req>
 80101be:	4603      	mov	r3, r0
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	da01      	bge.n	80101c8 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 80101c4:	23ff      	movs	r3, #255	@ 0xff
 80101c6:	e004      	b.n	80101d2 <aci_gap_update_adv_data+0xda>
  return status;
 80101c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80101cc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80101d0:	781b      	ldrb	r3, [r3, #0]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b088      	sub	sp, #32
 80101e0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80101e2:	2300      	movs	r3, #0
 80101e4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80101e6:	f107 0308 	add.w	r3, r7, #8
 80101ea:	2218      	movs	r2, #24
 80101ec:	2100      	movs	r1, #0
 80101ee:	4618      	mov	r0, r3
 80101f0:	f000 fe65 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 80101f4:	233f      	movs	r3, #63	@ 0x3f
 80101f6:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 80101f8:	2392      	movs	r3, #146	@ 0x92
 80101fa:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80101fc:	1dfb      	adds	r3, r7, #7
 80101fe:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010200:	2301      	movs	r3, #1
 8010202:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010204:	f107 0308 	add.w	r3, r7, #8
 8010208:	2100      	movs	r1, #0
 801020a:	4618      	mov	r0, r3
 801020c:	f001 f8e0 	bl	80113d0 <hci_send_req>
 8010210:	4603      	mov	r3, r0
 8010212:	2b00      	cmp	r3, #0
 8010214:	da01      	bge.n	801021a <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010216:	23ff      	movs	r3, #255	@ 0xff
 8010218:	e000      	b.n	801021c <aci_gap_configure_filter_accept_list+0x40>
  return status;
 801021a:	79fb      	ldrb	r3, [r7, #7]
}
 801021c:	4618      	mov	r0, r3
 801021e:	3720      	adds	r7, #32
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b0cc      	sub	sp, #304	@ 0x130
 8010228:	af00      	add	r7, sp, #0
 801022a:	4602      	mov	r2, r0
 801022c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010230:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010234:	801a      	strh	r2, [r3, #0]
 8010236:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801023a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801023e:	460a      	mov	r2, r1
 8010240:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8010242:	f107 0310 	add.w	r3, r7, #16
 8010246:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801024a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801024e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010252:	2200      	movs	r2, #0
 8010254:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010256:	2300      	movs	r3, #0
 8010258:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801025c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010260:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010264:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010268:	8812      	ldrh	r2, [r2, #0]
 801026a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801026c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010270:	3302      	adds	r3, #2
 8010272:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8010276:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801027a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801027e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010282:	7812      	ldrb	r2, [r2, #0]
 8010284:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010286:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801028a:	3301      	adds	r3, #1
 801028c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010290:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010294:	2218      	movs	r2, #24
 8010296:	2100      	movs	r1, #0
 8010298:	4618      	mov	r0, r3
 801029a:	f000 fe10 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 801029e:	233f      	movs	r3, #63	@ 0x3f
 80102a0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 80102a4:	23a5      	movs	r3, #165	@ 0xa5
 80102a6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80102aa:	f107 0310 	add.w	r3, r7, #16
 80102ae:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80102b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80102b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80102ba:	f107 030f 	add.w	r3, r7, #15
 80102be:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80102c2:	2301      	movs	r3, #1
 80102c4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80102c8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80102cc:	2100      	movs	r1, #0
 80102ce:	4618      	mov	r0, r3
 80102d0:	f001 f87e 	bl	80113d0 <hci_send_req>
 80102d4:	4603      	mov	r3, r0
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	da01      	bge.n	80102de <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 80102da:	23ff      	movs	r3, #255	@ 0xff
 80102dc:	e004      	b.n	80102e8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 80102de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80102e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80102e6:	781b      	ldrb	r3, [r3, #0]
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80102ee:	46bd      	mov	sp, r7
 80102f0:	bd80      	pop	{r7, pc}

080102f2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80102f2:	b580      	push	{r7, lr}
 80102f4:	b088      	sub	sp, #32
 80102f6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80102f8:	2300      	movs	r3, #0
 80102fa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80102fc:	f107 0308 	add.w	r3, r7, #8
 8010300:	2218      	movs	r2, #24
 8010302:	2100      	movs	r1, #0
 8010304:	4618      	mov	r0, r3
 8010306:	f000 fdda 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 801030a:	233f      	movs	r3, #63	@ 0x3f
 801030c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 801030e:	f240 1301 	movw	r3, #257	@ 0x101
 8010312:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010314:	1dfb      	adds	r3, r7, #7
 8010316:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010318:	2301      	movs	r3, #1
 801031a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801031c:	f107 0308 	add.w	r3, r7, #8
 8010320:	2100      	movs	r1, #0
 8010322:	4618      	mov	r0, r3
 8010324:	f001 f854 	bl	80113d0 <hci_send_req>
 8010328:	4603      	mov	r3, r0
 801032a:	2b00      	cmp	r3, #0
 801032c:	da01      	bge.n	8010332 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 801032e:	23ff      	movs	r3, #255	@ 0xff
 8010330:	e000      	b.n	8010334 <aci_gatt_init+0x42>
  return status;
 8010332:	79fb      	ldrb	r3, [r7, #7]
}
 8010334:	4618      	mov	r0, r3
 8010336:	3720      	adds	r7, #32
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 801033c:	b590      	push	{r4, r7, lr}
 801033e:	b0cf      	sub	sp, #316	@ 0x13c
 8010340:	af00      	add	r7, sp, #0
 8010342:	4604      	mov	r4, r0
 8010344:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010348:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 801034c:	6001      	str	r1, [r0, #0]
 801034e:	4610      	mov	r0, r2
 8010350:	4619      	mov	r1, r3
 8010352:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010356:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801035a:	4622      	mov	r2, r4
 801035c:	701a      	strb	r2, [r3, #0]
 801035e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010362:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010366:	4602      	mov	r2, r0
 8010368:	701a      	strb	r2, [r3, #0]
 801036a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801036e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010372:	460a      	mov	r2, r1
 8010374:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8010376:	f107 0310 	add.w	r3, r7, #16
 801037a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 801037e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010382:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010386:	781b      	ldrb	r3, [r3, #0]
 8010388:	2b01      	cmp	r3, #1
 801038a:	d00a      	beq.n	80103a2 <aci_gatt_add_service+0x66>
 801038c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010390:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	2b02      	cmp	r3, #2
 8010398:	d101      	bne.n	801039e <aci_gatt_add_service+0x62>
 801039a:	2311      	movs	r3, #17
 801039c:	e002      	b.n	80103a4 <aci_gatt_add_service+0x68>
 801039e:	2301      	movs	r3, #1
 80103a0:	e000      	b.n	80103a4 <aci_gatt_add_service+0x68>
 80103a2:	2303      	movs	r3, #3
 80103a4:	f107 0210 	add.w	r2, r7, #16
 80103a8:	4413      	add	r3, r2
 80103aa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80103ae:	f107 030c 	add.w	r3, r7, #12
 80103b2:	2203      	movs	r2, #3
 80103b4:	2100      	movs	r1, #0
 80103b6:	4618      	mov	r0, r3
 80103b8:	f000 fd81 	bl	8010ebe <Osal_MemSet>
  int index_input = 0;
 80103bc:	2300      	movs	r3, #0
 80103be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 80103c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80103c6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80103ca:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80103ce:	7812      	ldrb	r2, [r2, #0]
 80103d0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80103d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80103d6:	3301      	adds	r3, #1
 80103d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 80103dc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80103e0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2b01      	cmp	r3, #1
 80103e8:	d002      	beq.n	80103f0 <aci_gatt_add_service+0xb4>
 80103ea:	2b02      	cmp	r3, #2
 80103ec:	d004      	beq.n	80103f8 <aci_gatt_add_service+0xbc>
 80103ee:	e007      	b.n	8010400 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 80103f0:	2302      	movs	r3, #2
 80103f2:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80103f6:	e005      	b.n	8010404 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 80103f8:	2310      	movs	r3, #16
 80103fa:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 80103fe:	e001      	b.n	8010404 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8010400:	2397      	movs	r3, #151	@ 0x97
 8010402:	e06c      	b.n	80104de <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8010404:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010408:	1c58      	adds	r0, r3, #1
 801040a:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 801040e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010412:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010416:	6819      	ldr	r1, [r3, #0]
 8010418:	f000 fd41 	bl	8010e9e <Osal_MemCpy>
    index_input += size;
 801041c:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8010420:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010424:	4413      	add	r3, r2
 8010426:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 801042a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801042e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010432:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010436:	7812      	ldrb	r2, [r2, #0]
 8010438:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 801043a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801043e:	3301      	adds	r3, #1
 8010440:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010444:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010448:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801044c:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010450:	7812      	ldrb	r2, [r2, #0]
 8010452:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010454:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010458:	3301      	adds	r3, #1
 801045a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801045e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010462:	2218      	movs	r2, #24
 8010464:	2100      	movs	r1, #0
 8010466:	4618      	mov	r0, r3
 8010468:	f000 fd29 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 801046c:	233f      	movs	r3, #63	@ 0x3f
 801046e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8010472:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8010476:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801047a:	f107 0310 	add.w	r3, r7, #16
 801047e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010482:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010486:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 801048a:	f107 030c 	add.w	r3, r7, #12
 801048e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8010492:	2303      	movs	r3, #3
 8010494:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010498:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801049c:	2100      	movs	r1, #0
 801049e:	4618      	mov	r0, r3
 80104a0:	f000 ff96 	bl	80113d0 <hci_send_req>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	da01      	bge.n	80104ae <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 80104aa:	23ff      	movs	r3, #255	@ 0xff
 80104ac:	e017      	b.n	80104de <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 80104ae:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80104b2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80104b6:	781b      	ldrb	r3, [r3, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d005      	beq.n	80104c8 <aci_gatt_add_service+0x18c>
    return resp.Status;
 80104bc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80104c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80104c4:	781b      	ldrb	r3, [r3, #0]
 80104c6:	e00a      	b.n	80104de <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 80104c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80104cc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80104d0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80104d4:	b29a      	uxth	r2, r3
 80104d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80104da:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd90      	pop	{r4, r7, pc}

080104e8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 80104e8:	b590      	push	{r4, r7, lr}
 80104ea:	b0d1      	sub	sp, #324	@ 0x144
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	4604      	mov	r4, r0
 80104f0:	4608      	mov	r0, r1
 80104f2:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 80104f6:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 80104fa:	600a      	str	r2, [r1, #0]
 80104fc:	4619      	mov	r1, r3
 80104fe:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010502:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010506:	4622      	mov	r2, r4
 8010508:	801a      	strh	r2, [r3, #0]
 801050a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801050e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010512:	4602      	mov	r2, r0
 8010514:	701a      	strb	r2, [r3, #0]
 8010516:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801051a:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 801051e:	460a      	mov	r2, r1
 8010520:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010522:	f107 0318 	add.w	r3, r7, #24
 8010526:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 801052a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801052e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	2b01      	cmp	r3, #1
 8010536:	d00a      	beq.n	801054e <aci_gatt_add_char+0x66>
 8010538:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 801053c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	2b02      	cmp	r3, #2
 8010544:	d101      	bne.n	801054a <aci_gatt_add_char+0x62>
 8010546:	2313      	movs	r3, #19
 8010548:	e002      	b.n	8010550 <aci_gatt_add_char+0x68>
 801054a:	2303      	movs	r3, #3
 801054c:	e000      	b.n	8010550 <aci_gatt_add_char+0x68>
 801054e:	2305      	movs	r3, #5
 8010550:	f107 0218 	add.w	r2, r7, #24
 8010554:	4413      	add	r3, r2
 8010556:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801055a:	f107 0314 	add.w	r3, r7, #20
 801055e:	2203      	movs	r2, #3
 8010560:	2100      	movs	r1, #0
 8010562:	4618      	mov	r0, r3
 8010564:	f000 fcab 	bl	8010ebe <Osal_MemSet>
  int index_input = 0;
 8010568:	2300      	movs	r3, #0
 801056a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 801056e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010572:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010576:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 801057a:	8812      	ldrh	r2, [r2, #0]
 801057c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801057e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010582:	3302      	adds	r3, #2
 8010584:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8010588:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801058c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010590:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010594:	7812      	ldrb	r2, [r2, #0]
 8010596:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010598:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801059c:	3301      	adds	r3, #1
 801059e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 80105a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80105a6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	2b01      	cmp	r3, #1
 80105ae:	d002      	beq.n	80105b6 <aci_gatt_add_char+0xce>
 80105b0:	2b02      	cmp	r3, #2
 80105b2:	d004      	beq.n	80105be <aci_gatt_add_char+0xd6>
 80105b4:	e007      	b.n	80105c6 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 80105b6:	2302      	movs	r3, #2
 80105b8:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80105bc:	e005      	b.n	80105ca <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 80105be:	2310      	movs	r3, #16
 80105c0:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 80105c4:	e001      	b.n	80105ca <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 80105c6:	2397      	movs	r3, #151	@ 0x97
 80105c8:	e091      	b.n	80106ee <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 80105ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80105ce:	1cd8      	adds	r0, r3, #3
 80105d0:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 80105d4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80105d8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80105dc:	6819      	ldr	r1, [r3, #0]
 80105de:	f000 fc5e 	bl	8010e9e <Osal_MemCpy>
    index_input += size;
 80105e2:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 80105e6:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 80105ea:	4413      	add	r3, r2
 80105ec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 80105f0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80105f4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 80105f8:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 80105fc:	8812      	ldrh	r2, [r2, #0]
 80105fe:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010600:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010604:	3302      	adds	r3, #2
 8010606:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 801060a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801060e:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8010612:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010614:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010618:	3301      	adds	r3, #1
 801061a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 801061e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010622:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010626:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010628:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801062c:	3301      	adds	r3, #1
 801062e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010632:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010636:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 801063a:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 801063c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010640:	3301      	adds	r3, #1
 8010642:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010646:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801064a:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 801064e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010650:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010654:	3301      	adds	r3, #1
 8010656:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 801065a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801065e:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8010662:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010664:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010668:	3301      	adds	r3, #1
 801066a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801066e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010672:	2218      	movs	r2, #24
 8010674:	2100      	movs	r1, #0
 8010676:	4618      	mov	r0, r3
 8010678:	f000 fc21 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 801067c:	233f      	movs	r3, #63	@ 0x3f
 801067e:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8010682:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8010686:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 801068a:	f107 0318 	add.w	r3, r7, #24
 801068e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8010692:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010696:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 801069a:	f107 0314 	add.w	r3, r7, #20
 801069e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 80106a2:	2303      	movs	r3, #3
 80106a4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 80106a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80106ac:	2100      	movs	r1, #0
 80106ae:	4618      	mov	r0, r3
 80106b0:	f000 fe8e 	bl	80113d0 <hci_send_req>
 80106b4:	4603      	mov	r3, r0
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	da01      	bge.n	80106be <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 80106ba:	23ff      	movs	r3, #255	@ 0xff
 80106bc:	e017      	b.n	80106ee <aci_gatt_add_char+0x206>
  if ( resp.Status )
 80106be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80106c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d005      	beq.n	80106d8 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 80106cc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80106d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	e00a      	b.n	80106ee <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 80106d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80106dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80106e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80106ea:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80106ec:	2300      	movs	r3, #0
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd90      	pop	{r4, r7, pc}

080106f8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 80106f8:	b5b0      	push	{r4, r5, r7, lr}
 80106fa:	b0cc      	sub	sp, #304	@ 0x130
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	4605      	mov	r5, r0
 8010700:	460c      	mov	r4, r1
 8010702:	4610      	mov	r0, r2
 8010704:	4619      	mov	r1, r3
 8010706:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801070a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801070e:	462a      	mov	r2, r5
 8010710:	801a      	strh	r2, [r3, #0]
 8010712:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010716:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801071a:	4622      	mov	r2, r4
 801071c:	801a      	strh	r2, [r3, #0]
 801071e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010722:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8010726:	4602      	mov	r2, r0
 8010728:	701a      	strb	r2, [r3, #0]
 801072a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801072e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010732:	460a      	mov	r2, r1
 8010734:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010736:	f107 0310 	add.w	r3, r7, #16
 801073a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801073e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010742:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010746:	2200      	movs	r2, #0
 8010748:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801074a:	2300      	movs	r3, #0
 801074c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8010750:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010754:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010758:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801075c:	8812      	ldrh	r2, [r2, #0]
 801075e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010760:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010764:	3302      	adds	r3, #2
 8010766:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 801076a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801076e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010772:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010776:	8812      	ldrh	r2, [r2, #0]
 8010778:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801077a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801077e:	3302      	adds	r3, #2
 8010780:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 8010784:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010788:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801078c:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8010790:	7812      	ldrb	r2, [r2, #0]
 8010792:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8010794:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010798:	3301      	adds	r3, #1
 801079a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 801079e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80107a2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80107a6:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 80107aa:	7812      	ldrb	r2, [r2, #0]
 80107ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80107ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107b2:	3301      	adds	r3, #1
 80107b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80107b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80107bc:	1d98      	adds	r0, r3, #6
 80107be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107c2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80107c6:	781b      	ldrb	r3, [r3, #0]
 80107c8:	461a      	mov	r2, r3
 80107ca:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80107ce:	f000 fb66 	bl	8010e9e <Osal_MemCpy>
  index_input += Char_Value_Length;
 80107d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80107d6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80107e0:	4413      	add	r3, r2
 80107e2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80107e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107ea:	2218      	movs	r2, #24
 80107ec:	2100      	movs	r1, #0
 80107ee:	4618      	mov	r0, r3
 80107f0:	f000 fb65 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 80107f4:	233f      	movs	r3, #63	@ 0x3f
 80107f6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 80107fa:	f44f 7383 	mov.w	r3, #262	@ 0x106
 80107fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010802:	f107 0310 	add.w	r3, r7, #16
 8010806:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801080a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801080e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010812:	f107 030f 	add.w	r3, r7, #15
 8010816:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801081a:	2301      	movs	r3, #1
 801081c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010820:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010824:	2100      	movs	r1, #0
 8010826:	4618      	mov	r0, r3
 8010828:	f000 fdd2 	bl	80113d0 <hci_send_req>
 801082c:	4603      	mov	r3, r0
 801082e:	2b00      	cmp	r3, #0
 8010830:	da01      	bge.n	8010836 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8010832:	23ff      	movs	r3, #255	@ 0xff
 8010834:	e004      	b.n	8010840 <aci_gatt_update_char_value+0x148>
  return status;
 8010836:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801083a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801083e:	781b      	ldrb	r3, [r3, #0]
}
 8010840:	4618      	mov	r0, r3
 8010842:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010846:	46bd      	mov	sp, r7
 8010848:	bdb0      	pop	{r4, r5, r7, pc}

0801084a <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 801084a:	b580      	push	{r7, lr}
 801084c:	b0cc      	sub	sp, #304	@ 0x130
 801084e:	af00      	add	r7, sp, #0
 8010850:	4602      	mov	r2, r0
 8010852:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010856:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801085a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 801085c:	f107 0310 	add.w	r3, r7, #16
 8010860:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010868:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801086c:	2200      	movs	r2, #0
 801086e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010870:	2300      	movs	r3, #0
 8010872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801087a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801087e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010882:	8812      	ldrh	r2, [r2, #0]
 8010884:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801088a:	3302      	adds	r3, #2
 801088c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010890:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010894:	2218      	movs	r2, #24
 8010896:	2100      	movs	r1, #0
 8010898:	4618      	mov	r0, r3
 801089a:	f000 fb10 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 801089e:	233f      	movs	r3, #63	@ 0x3f
 80108a0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 80108a4:	f240 1325 	movw	r3, #293	@ 0x125
 80108a8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80108ac:	f107 0310 	add.w	r3, r7, #16
 80108b0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80108b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108b8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80108bc:	f107 030f 	add.w	r3, r7, #15
 80108c0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80108c4:	2301      	movs	r3, #1
 80108c6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80108ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80108ce:	2100      	movs	r1, #0
 80108d0:	4618      	mov	r0, r3
 80108d2:	f000 fd7d 	bl	80113d0 <hci_send_req>
 80108d6:	4603      	mov	r3, r0
 80108d8:	2b00      	cmp	r3, #0
 80108da:	da01      	bge.n	80108e0 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 80108dc:	23ff      	movs	r3, #255	@ 0xff
 80108de:	e004      	b.n	80108ea <aci_gatt_confirm_indication+0xa0>
  return status;
 80108e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80108e4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80108e8:	781b      	ldrb	r3, [r3, #0]
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b0cc      	sub	sp, #304	@ 0x130
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	4602      	mov	r2, r0
 80108fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010900:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010904:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 8010906:	f107 0310 	add.w	r3, r7, #16
 801090a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801090e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010912:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010916:	2200      	movs	r2, #0
 8010918:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801091a:	2300      	movs	r3, #0
 801091c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010920:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010924:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010928:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801092c:	8812      	ldrh	r2, [r2, #0]
 801092e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010930:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010934:	3302      	adds	r3, #2
 8010936:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801093a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801093e:	2218      	movs	r2, #24
 8010940:	2100      	movs	r1, #0
 8010942:	4618      	mov	r0, r3
 8010944:	f000 fabb 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 8010948:	233f      	movs	r3, #63	@ 0x3f
 801094a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 801094e:	f240 1327 	movw	r3, #295	@ 0x127
 8010952:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010956:	f107 0310 	add.w	r3, r7, #16
 801095a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801095e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010962:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010966:	f107 030f 	add.w	r3, r7, #15
 801096a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801096e:	2301      	movs	r3, #1
 8010970:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010974:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010978:	2100      	movs	r1, #0
 801097a:	4618      	mov	r0, r3
 801097c:	f000 fd28 	bl	80113d0 <hci_send_req>
 8010980:	4603      	mov	r3, r0
 8010982:	2b00      	cmp	r3, #0
 8010984:	da01      	bge.n	801098a <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 8010986:	23ff      	movs	r3, #255	@ 0xff
 8010988:	e004      	b.n	8010994 <aci_gatt_allow_read+0xa0>
  return status;
 801098a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801098e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010992:	781b      	ldrb	r3, [r3, #0]
}
 8010994:	4618      	mov	r0, r3
 8010996:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}

0801099e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 801099e:	b580      	push	{r7, lr}
 80109a0:	b0cc      	sub	sp, #304	@ 0x130
 80109a2:	af00      	add	r7, sp, #0
 80109a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80109ac:	601a      	str	r2, [r3, #0]
 80109ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109b2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80109b6:	4602      	mov	r2, r0
 80109b8:	701a      	strb	r2, [r3, #0]
 80109ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80109c2:	460a      	mov	r2, r1
 80109c4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80109c6:	f107 0310 	add.w	r3, r7, #16
 80109ca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80109ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109d2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80109d6:	2200      	movs	r2, #0
 80109d8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80109da:	2300      	movs	r3, #0
 80109dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 80109e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80109e8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80109ec:	7812      	ldrb	r2, [r2, #0]
 80109ee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80109f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109f4:	3301      	adds	r3, #1
 80109f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 80109fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010a02:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010a06:	7812      	ldrb	r2, [r2, #0]
 8010a08:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010a0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a0e:	3301      	adds	r3, #1
 8010a10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8010a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010a18:	1c98      	adds	r0, r3, #2
 8010a1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a1e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010a22:	781a      	ldrb	r2, [r3, #0]
 8010a24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010a2c:	6819      	ldr	r1, [r3, #0]
 8010a2e:	f000 fa36 	bl	8010e9e <Osal_MemCpy>
  index_input += Length;
 8010a32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a36:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010a3a:	781b      	ldrb	r3, [r3, #0]
 8010a3c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010a40:	4413      	add	r3, r2
 8010a42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a4a:	2218      	movs	r2, #24
 8010a4c:	2100      	movs	r1, #0
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f000 fa35 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 8010a54:	233f      	movs	r3, #63	@ 0x3f
 8010a56:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 8010a5a:	230c      	movs	r3, #12
 8010a5c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010a60:	f107 0310 	add.w	r3, r7, #16
 8010a64:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a6c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010a70:	f107 030f 	add.w	r3, r7, #15
 8010a74:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010a78:	2301      	movs	r3, #1
 8010a7a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a82:	2100      	movs	r1, #0
 8010a84:	4618      	mov	r0, r3
 8010a86:	f000 fca3 	bl	80113d0 <hci_send_req>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	da01      	bge.n	8010a94 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8010a90:	23ff      	movs	r3, #255	@ 0xff
 8010a92:	e004      	b.n	8010a9e <aci_hal_write_config_data+0x100>
  return status;
 8010a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a98:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010a9c:	781b      	ldrb	r3, [r3, #0]
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd80      	pop	{r7, pc}

08010aa8 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b0cc      	sub	sp, #304	@ 0x130
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	4602      	mov	r2, r0
 8010ab0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ab4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010ab8:	701a      	strb	r2, [r3, #0]
 8010aba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010abe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010ac2:	460a      	mov	r2, r1
 8010ac4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8010ac6:	f107 0310 	add.w	r3, r7, #16
 8010aca:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010ace:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ad2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010ada:	2300      	movs	r3, #0
 8010adc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8010ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ae4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010ae8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010aec:	7812      	ldrb	r2, [r2, #0]
 8010aee:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010af4:	3301      	adds	r3, #1
 8010af6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8010afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010afe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b02:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010b06:	7812      	ldrb	r2, [r2, #0]
 8010b08:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b0e:	3301      	adds	r3, #1
 8010b10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b18:	2218      	movs	r2, #24
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f000 f9ce 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 8010b22:	233f      	movs	r3, #63	@ 0x3f
 8010b24:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 8010b28:	230f      	movs	r3, #15
 8010b2a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010b2e:	f107 0310 	add.w	r3, r7, #16
 8010b32:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010b36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b3a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010b3e:	f107 030f 	add.w	r3, r7, #15
 8010b42:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010b46:	2301      	movs	r3, #1
 8010b48:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010b4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b50:	2100      	movs	r1, #0
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 fc3c 	bl	80113d0 <hci_send_req>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	da01      	bge.n	8010b62 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8010b5e:	23ff      	movs	r3, #255	@ 0xff
 8010b60:	e004      	b.n	8010b6c <aci_hal_set_tx_power_level+0xc4>
  return status;
 8010b62:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b66:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010b6a:	781b      	ldrb	r3, [r3, #0]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}

08010b76 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 8010b76:	b580      	push	{r7, lr}
 8010b78:	b0cc      	sub	sp, #304	@ 0x130
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	4602      	mov	r2, r0
 8010b7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b82:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010b86:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8010b88:	f107 0310 	add.w	r3, r7, #16
 8010b8c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010b90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b94:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010b98:	2200      	movs	r2, #0
 8010b9a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8010ba2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ba6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010baa:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010bae:	8812      	ldrh	r2, [r2, #0]
 8010bb0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010bb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010bb6:	3302      	adds	r3, #2
 8010bb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010bbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010bc0:	2218      	movs	r2, #24
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	f000 f97a 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 8010bca:	233f      	movs	r3, #63	@ 0x3f
 8010bcc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8010bd0:	2318      	movs	r3, #24
 8010bd2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010bd6:	f107 0310 	add.w	r3, r7, #16
 8010bda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010be2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010be6:	f107 030f 	add.w	r3, r7, #15
 8010bea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010bee:	2301      	movs	r3, #1
 8010bf0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010bf4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f000 fbe8 	bl	80113d0 <hci_send_req>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	da01      	bge.n	8010c0a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 8010c06:	23ff      	movs	r3, #255	@ 0xff
 8010c08:	e004      	b.n	8010c14 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8010c0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010c12:	781b      	ldrb	r3, [r3, #0]
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8010c1e:	b580      	push	{r7, lr}
 8010c20:	b088      	sub	sp, #32
 8010c22:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010c24:	2300      	movs	r3, #0
 8010c26:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010c28:	f107 0308 	add.w	r3, r7, #8
 8010c2c:	2218      	movs	r2, #24
 8010c2e:	2100      	movs	r1, #0
 8010c30:	4618      	mov	r0, r3
 8010c32:	f000 f944 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x03;
 8010c36:	2303      	movs	r3, #3
 8010c38:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8010c3a:	2303      	movs	r3, #3
 8010c3c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010c3e:	1dfb      	adds	r3, r7, #7
 8010c40:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010c42:	2301      	movs	r3, #1
 8010c44:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010c46:	f107 0308 	add.w	r3, r7, #8
 8010c4a:	2100      	movs	r1, #0
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f000 fbbf 	bl	80113d0 <hci_send_req>
 8010c52:	4603      	mov	r3, r0
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	da01      	bge.n	8010c5c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010c58:	23ff      	movs	r3, #255	@ 0xff
 8010c5a:	e000      	b.n	8010c5e <hci_reset+0x40>
  return status;
 8010c5c:	79fb      	ldrb	r3, [r7, #7]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3720      	adds	r7, #32
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 8010c66:	b590      	push	{r4, r7, lr}
 8010c68:	b0cd      	sub	sp, #308	@ 0x134
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	4604      	mov	r4, r0
 8010c6e:	4608      	mov	r0, r1
 8010c70:	4611      	mov	r1, r2
 8010c72:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c76:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010c7a:	4622      	mov	r2, r4
 8010c7c:	701a      	strb	r2, [r3, #0]
 8010c7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c82:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010c86:	4602      	mov	r2, r0
 8010c88:	701a      	strb	r2, [r3, #0]
 8010c8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010c8e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8010c92:	460a      	mov	r2, r1
 8010c94:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8010c96:	f107 0310 	add.w	r3, r7, #16
 8010c9a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010c9e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ca2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010caa:	2300      	movs	r3, #0
 8010cac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8010cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cb4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010cb8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010cbc:	7812      	ldrb	r2, [r2, #0]
 8010cbe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010cc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8010cca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010cd2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010cd6:	7812      	ldrb	r2, [r2, #0]
 8010cd8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010cde:	3301      	adds	r3, #1
 8010ce0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 8010ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ce8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010cec:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010cf0:	7812      	ldrb	r2, [r2, #0]
 8010cf2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010cf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010cfe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d02:	2218      	movs	r2, #24
 8010d04:	2100      	movs	r1, #0
 8010d06:	4618      	mov	r0, r3
 8010d08:	f000 f8d9 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x08;
 8010d0c:	2308      	movs	r3, #8
 8010d0e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 8010d12:	2331      	movs	r3, #49	@ 0x31
 8010d14:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010d18:	f107 0310 	add.w	r3, r7, #16
 8010d1c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010d20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d24:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010d28:	f107 030f 	add.w	r3, r7, #15
 8010d2c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010d30:	2301      	movs	r3, #1
 8010d32:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010d36:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d3a:	2100      	movs	r1, #0
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f000 fb47 	bl	80113d0 <hci_send_req>
 8010d42:	4603      	mov	r3, r0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	da01      	bge.n	8010d4c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 8010d48:	23ff      	movs	r3, #255	@ 0xff
 8010d4a:	e004      	b.n	8010d56 <hci_le_set_default_phy+0xf0>
  return status;
 8010d4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d50:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010d54:	781b      	ldrb	r3, [r3, #0]
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8010d5c:	46bd      	mov	sp, r7
 8010d5e:	bd90      	pop	{r4, r7, pc}

08010d60 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 8010d60:	b5b0      	push	{r4, r5, r7, lr}
 8010d62:	b0cc      	sub	sp, #304	@ 0x130
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	4605      	mov	r5, r0
 8010d68:	460c      	mov	r4, r1
 8010d6a:	4610      	mov	r0, r2
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d72:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010d76:	462a      	mov	r2, r5
 8010d78:	801a      	strh	r2, [r3, #0]
 8010d7a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d7e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d82:	4622      	mov	r2, r4
 8010d84:	801a      	strh	r2, [r3, #0]
 8010d86:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d8a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010d8e:	4602      	mov	r2, r0
 8010d90:	801a      	strh	r2, [r3, #0]
 8010d92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010d96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010d9a:	460a      	mov	r2, r1
 8010d9c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8010d9e:	f107 0310 	add.w	r3, r7, #16
 8010da2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010da6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010daa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010dae:	2200      	movs	r2, #0
 8010db0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010db2:	2300      	movs	r3, #0
 8010db4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010db8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010dbc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010dc0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010dc4:	8812      	ldrh	r2, [r2, #0]
 8010dc6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010dcc:	3302      	adds	r3, #2
 8010dce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8010dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010dd6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010dda:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010dde:	8812      	ldrh	r2, [r2, #0]
 8010de0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8010de2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010de6:	3302      	adds	r3, #2
 8010de8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8010dec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010df0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010df4:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8010df8:	8812      	ldrh	r2, [r2, #0]
 8010dfa:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8010dfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e00:	3302      	adds	r3, #2
 8010e02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 8010e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010e0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010e0e:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 8010e12:	8812      	ldrh	r2, [r2, #0]
 8010e14:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8010e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e1a:	3302      	adds	r3, #2
 8010e1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8010e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010e24:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 8010e28:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8010e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e2e:	3302      	adds	r3, #2
 8010e30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010e34:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010e38:	2218      	movs	r2, #24
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f000 f83e 	bl	8010ebe <Osal_MemSet>
  rq.ogf = 0x3f;
 8010e42:	233f      	movs	r3, #63	@ 0x3f
 8010e44:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 8010e48:	f240 1381 	movw	r3, #385	@ 0x181
 8010e4c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 8010e50:	230f      	movs	r3, #15
 8010e52:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 8010e56:	f107 0310 	add.w	r3, r7, #16
 8010e5a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010e66:	f107 030f 	add.w	r3, r7, #15
 8010e6a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010e6e:	2301      	movs	r3, #1
 8010e70:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010e74:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010e78:	2100      	movs	r1, #0
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f000 faa8 	bl	80113d0 <hci_send_req>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	da01      	bge.n	8010e8a <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8010e86:	23ff      	movs	r3, #255	@ 0xff
 8010e88:	e004      	b.n	8010e94 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8010e8a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010e8e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010e92:	781b      	ldrb	r3, [r3, #0]
}
 8010e94:	4618      	mov	r0, r3
 8010e96:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bdb0      	pop	{r4, r5, r7, pc}

08010e9e <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8010e9e:	b580      	push	{r7, lr}
 8010ea0:	b084      	sub	sp, #16
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	60f8      	str	r0, [r7, #12]
 8010ea6:	60b9      	str	r1, [r7, #8]
 8010ea8:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	68b9      	ldr	r1, [r7, #8]
 8010eae:	68f8      	ldr	r0, [r7, #12]
 8010eb0:	f005 f855 	bl	8015f5e <memcpy>
 8010eb4:	4603      	mov	r3, r0
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}

08010ebe <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8010ebe:	b580      	push	{r7, lr}
 8010ec0:	b084      	sub	sp, #16
 8010ec2:	af00      	add	r7, sp, #0
 8010ec4:	60f8      	str	r0, [r7, #12]
 8010ec6:	60b9      	str	r1, [r7, #8]
 8010ec8:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8010eca:	687a      	ldr	r2, [r7, #4]
 8010ecc:	68b9      	ldr	r1, [r7, #8]
 8010ece:	68f8      	ldr	r0, [r7, #12]
 8010ed0:	f004 ffb4 	bl	8015e3c <memset>
 8010ed4:	4603      	mov	r3, r0
}
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	3710      	adds	r7, #16
 8010eda:	46bd      	mov	sp, r7
 8010edc:	bd80      	pop	{r7, pc}

08010ede <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8010ede:	b480      	push	{r7}
 8010ee0:	af00      	add	r7, sp, #0
  return;
 8010ee2:	bf00      	nop
}
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8010eec:	b480      	push	{r7}
 8010eee:	af00      	add	r7, sp, #0
  return;
 8010ef0:	bf00      	nop
}
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr

08010efa <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8010efa:	b480      	push	{r7}
 8010efc:	af00      	add	r7, sp, #0
  return;
 8010efe:	bf00      	nop
}
 8010f00:	46bd      	mov	sp, r7
 8010f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f06:	4770      	bx	lr

08010f08 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8010f08:	b480      	push	{r7}
 8010f0a:	af00      	add	r7, sp, #0
  return;
 8010f0c:	bf00      	nop
}
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f14:	4770      	bx	lr

08010f16 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 8010f16:	b480      	push	{r7}
 8010f18:	af00      	add	r7, sp, #0
  return;
 8010f1a:	bf00      	nop
}
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 8010f24:	b480      	push	{r7}
 8010f26:	af00      	add	r7, sp, #0
  return;
 8010f28:	bf00      	nop
}
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr

08010f32 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8010f32:	b480      	push	{r7}
 8010f34:	af00      	add	r7, sp, #0
  return;
 8010f36:	bf00      	nop
}
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr

08010f40 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8010f40:	b480      	push	{r7}
 8010f42:	af00      	add	r7, sp, #0
  return;
 8010f44:	bf00      	nop
}
 8010f46:	46bd      	mov	sp, r7
 8010f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4c:	4770      	bx	lr

08010f4e <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8010f4e:	b480      	push	{r7}
 8010f50:	af00      	add	r7, sp, #0
  return;
 8010f52:	bf00      	nop
}
 8010f54:	46bd      	mov	sp, r7
 8010f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5a:	4770      	bx	lr

08010f5c <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	af00      	add	r7, sp, #0
  return;
 8010f60:	bf00      	nop
}
 8010f62:	46bd      	mov	sp, r7
 8010f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f68:	4770      	bx	lr

08010f6a <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8010f6a:	b480      	push	{r7}
 8010f6c:	af00      	add	r7, sp, #0
  return;
 8010f6e:	bf00      	nop
}
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8010f78:	b480      	push	{r7}
 8010f7a:	af00      	add	r7, sp, #0
  return;
 8010f7c:	bf00      	nop
}
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8010f86:	b480      	push	{r7}
 8010f88:	af00      	add	r7, sp, #0
  return;
 8010f8a:	bf00      	nop
}
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f92:	4770      	bx	lr

08010f94 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8010f94:	b480      	push	{r7}
 8010f96:	af00      	add	r7, sp, #0
  return;
 8010f98:	bf00      	nop
}
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa0:	4770      	bx	lr

08010fa2 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8010fa2:	b480      	push	{r7}
 8010fa4:	af00      	add	r7, sp, #0
  return;
 8010fa6:	bf00      	nop
}
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr

08010fb0 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	af00      	add	r7, sp, #0
  return;
 8010fb4:	bf00      	nop
}
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr

08010fbe <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8010fbe:	b480      	push	{r7}
 8010fc0:	af00      	add	r7, sp, #0
  return;
 8010fc2:	bf00      	nop
}
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr

08010fcc <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8010fd0:	4b04      	ldr	r3, [pc, #16]	@ (8010fe4 <SVCCTL_Init+0x18>)
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8010fd6:	4b04      	ldr	r3, [pc, #16]	@ (8010fe8 <SVCCTL_Init+0x1c>)
 8010fd8:	2200      	movs	r2, #0
 8010fda:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8010fdc:	f000 f806 	bl	8010fec <SVCCTL_SvcInit>

  return;
 8010fe0:	bf00      	nop
}
 8010fe2:	bd80      	pop	{r7, pc}
 8010fe4:	20000194 	.word	0x20000194
 8010fe8:	200001b4 	.word	0x200001b4

08010fec <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	af00      	add	r7, sp, #0
  BAS_Init();
 8010ff0:	f7ff ff75 	bl	8010ede <BAS_Init>

  BLS_Init();
 8010ff4:	f7ff ff7a 	bl	8010eec <BLS_Init>

  CRS_STM_Init();
 8010ff8:	f7ff ff7f 	bl	8010efa <CRS_STM_Init>

  DIS_Init();
 8010ffc:	f7ff ff84 	bl	8010f08 <DIS_Init>

  EDS_STM_Init();
 8011000:	f7ff ff89 	bl	8010f16 <EDS_STM_Init>

  HIDS_Init();
 8011004:	f7ff ff8e 	bl	8010f24 <HIDS_Init>

  HRS_Init();
 8011008:	f7ff ff93 	bl	8010f32 <HRS_Init>

  HTS_Init();
 801100c:	f7ff ff98 	bl	8010f40 <HTS_Init>

  IAS_Init();
 8011010:	f7ff ff9d 	bl	8010f4e <IAS_Init>

  LLS_Init();
 8011014:	f7ff ffa2 	bl	8010f5c <LLS_Init>

  TPS_Init();
 8011018:	f7ff ffa7 	bl	8010f6a <TPS_Init>

  MOTENV_STM_Init();
 801101c:	f7ff ffac 	bl	8010f78 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8011020:	f7ff ffb1 	bl	8010f86 <P2PS_STM_Init>

  ZDD_STM_Init();
 8011024:	f7ff ffb6 	bl	8010f94 <ZDD_STM_Init>

  OTAS_STM_Init();
 8011028:	f7ff ffbb 	bl	8010fa2 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 801102c:	f7ff ffc7 	bl	8010fbe <BVOPUS_STM_Init>

  MESH_Init();
 8011030:	f7ff ffbe 	bl	8010fb0 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8011034:	f002 ff16 	bl	8013e64 <SVCCTL_InitCustomSvc>
  
  return;
 8011038:	bf00      	nop
}
 801103a:	bd80      	pop	{r7, pc}

0801103c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 801103c:	b480      	push	{r7}
 801103e:	b083      	sub	sp, #12
 8011040:	af00      	add	r7, sp, #0
 8011042:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8011044:	4b09      	ldr	r3, [pc, #36]	@ (801106c <SVCCTL_RegisterSvcHandler+0x30>)
 8011046:	7f1b      	ldrb	r3, [r3, #28]
 8011048:	4619      	mov	r1, r3
 801104a:	4a08      	ldr	r2, [pc, #32]	@ (801106c <SVCCTL_RegisterSvcHandler+0x30>)
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8011052:	4b06      	ldr	r3, [pc, #24]	@ (801106c <SVCCTL_RegisterSvcHandler+0x30>)
 8011054:	7f1b      	ldrb	r3, [r3, #28]
 8011056:	3301      	adds	r3, #1
 8011058:	b2da      	uxtb	r2, r3
 801105a:	4b04      	ldr	r3, [pc, #16]	@ (801106c <SVCCTL_RegisterSvcHandler+0x30>)
 801105c:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 801105e:	bf00      	nop
}
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr
 801106a:	bf00      	nop
 801106c:	20000194 	.word	0x20000194

08011070 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	3301      	adds	r3, #1
 801107c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 801107e:	2300      	movs	r3, #0
 8011080:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	2bff      	cmp	r3, #255	@ 0xff
 8011088:	d125      	bne.n	80110d6 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 801108a:	693b      	ldr	r3, [r7, #16]
 801108c:	3302      	adds	r3, #2
 801108e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	881b      	ldrh	r3, [r3, #0]
 8011094:	b29b      	uxth	r3, r3
 8011096:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801109a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801109e:	d118      	bne.n	80110d2 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80110a0:	2300      	movs	r3, #0
 80110a2:	757b      	strb	r3, [r7, #21]
 80110a4:	e00d      	b.n	80110c2 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 80110a6:	7d7b      	ldrb	r3, [r7, #21]
 80110a8:	4a1a      	ldr	r2, [pc, #104]	@ (8011114 <SVCCTL_UserEvtRx+0xa4>)
 80110aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110ae:	6878      	ldr	r0, [r7, #4]
 80110b0:	4798      	blx	r3
 80110b2:	4603      	mov	r3, r0
 80110b4:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 80110b6:	7dfb      	ldrb	r3, [r7, #23]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d108      	bne.n	80110ce <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 80110bc:	7d7b      	ldrb	r3, [r7, #21]
 80110be:	3301      	adds	r3, #1
 80110c0:	757b      	strb	r3, [r7, #21]
 80110c2:	4b14      	ldr	r3, [pc, #80]	@ (8011114 <SVCCTL_UserEvtRx+0xa4>)
 80110c4:	7f1b      	ldrb	r3, [r3, #28]
 80110c6:	7d7a      	ldrb	r2, [r7, #21]
 80110c8:	429a      	cmp	r2, r3
 80110ca:	d3ec      	bcc.n	80110a6 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 80110cc:	e002      	b.n	80110d4 <SVCCTL_UserEvtRx+0x64>
              break;
 80110ce:	bf00      	nop
          break;
 80110d0:	e000      	b.n	80110d4 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 80110d2:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 80110d4:	e000      	b.n	80110d8 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 80110d6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 80110d8:	7dfb      	ldrb	r3, [r7, #23]
 80110da:	2b02      	cmp	r3, #2
 80110dc:	d00f      	beq.n	80110fe <SVCCTL_UserEvtRx+0x8e>
 80110de:	2b02      	cmp	r3, #2
 80110e0:	dc10      	bgt.n	8011104 <SVCCTL_UserEvtRx+0x94>
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d002      	beq.n	80110ec <SVCCTL_UserEvtRx+0x7c>
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d006      	beq.n	80110f8 <SVCCTL_UserEvtRx+0x88>
 80110ea:	e00b      	b.n	8011104 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 80110ec:	6878      	ldr	r0, [r7, #4]
 80110ee:	f001 fc93 	bl	8012a18 <SVCCTL_App_Notification>
 80110f2:	4603      	mov	r3, r0
 80110f4:	75bb      	strb	r3, [r7, #22]
      break;
 80110f6:	e008      	b.n	801110a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 80110f8:	2301      	movs	r3, #1
 80110fa:	75bb      	strb	r3, [r7, #22]
      break;
 80110fc:	e005      	b.n	801110a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 80110fe:	2300      	movs	r3, #0
 8011100:	75bb      	strb	r3, [r7, #22]
      break;
 8011102:	e002      	b.n	801110a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8011104:	2301      	movs	r3, #1
 8011106:	75bb      	strb	r3, [r7, #22]
      break;
 8011108:	bf00      	nop
  }

  return (return_status);
 801110a:	7dbb      	ldrb	r3, [r7, #22]
}
 801110c:	4618      	mov	r0, r3
 801110e:	3718      	adds	r7, #24
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	20000194 	.word	0x20000194

08011118 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8011118:	b580      	push	{r7, lr}
 801111a:	b088      	sub	sp, #32
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011120:	f107 030c 	add.w	r3, r7, #12
 8011124:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 801112c:	69fb      	ldr	r3, [r7, #28]
 801112e:	212e      	movs	r1, #46	@ 0x2e
 8011130:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 8011134:	f000 fae8 	bl	8011708 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	330b      	adds	r3, #11
 801113c:	78db      	ldrb	r3, [r3, #3]
}
 801113e:	4618      	mov	r0, r3
 8011140:	3720      	adds	r7, #32
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b088      	sub	sp, #32
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801114e:	f107 030c 	add.w	r3, r7, #12
 8011152:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	210f      	movs	r1, #15
 801115e:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 8011162:	f000 fad1 	bl	8011708 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011166:	69fb      	ldr	r3, [r7, #28]
 8011168:	330b      	adds	r3, #11
 801116a:	78db      	ldrb	r3, [r3, #3]
}
 801116c:	4618      	mov	r0, r3
 801116e:	3720      	adds	r7, #32
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 801117c:	f107 030c 	add.w	r3, r7, #12
 8011180:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8011182:	69fb      	ldr	r3, [r7, #28]
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	2110      	movs	r1, #16
 8011188:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 801118c:	f000 fabc 	bl	8011708 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011190:	69fb      	ldr	r3, [r7, #28]
 8011192:	330b      	adds	r3, #11
 8011194:	78db      	ldrb	r3, [r3, #3]
}
 8011196:	4618      	mov	r0, r3
 8011198:	3720      	adds	r7, #32
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}
	...

080111a0 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 80111a0:	b480      	push	{r7}
 80111a2:	b08b      	sub	sp, #44	@ 0x2c
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 80111ac:	2300      	movs	r3, #0
 80111ae:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 80111b0:	2300      	movs	r3, #0
 80111b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 80111b4:	2300      	movs	r3, #0
 80111b6:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 80111b8:	2300      	movs	r3, #0
 80111ba:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 80111bc:	2300      	movs	r3, #0
 80111be:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 80111c0:	2300      	movs	r3, #0
 80111c2:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 80111c4:	2300      	movs	r3, #0
 80111c6:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 80111c8:	4b4a      	ldr	r3, [pc, #296]	@ (80112f4 <SHCI_GetWirelessFwInfo+0x154>)
 80111ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80111cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80111d0:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 80111d2:	693b      	ldr	r3, [r7, #16]
 80111d4:	009b      	lsls	r3, r3, #2
 80111d6:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80111da:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	4a44      	ldr	r2, [pc, #272]	@ (80112f8 <SHCI_GetWirelessFwInfo+0x158>)
 80111e8:	4293      	cmp	r3, r2
 80111ea:	d10f      	bne.n	801120c <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	695b      	ldr	r3, [r3, #20]
 80111f0:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	699b      	ldr	r3, [r3, #24]
 80111f6:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	69db      	ldr	r3, [r3, #28]
 80111fc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80111fe:	68bb      	ldr	r3, [r7, #8]
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8011204:	68bb      	ldr	r3, [r7, #8]
 8011206:	691b      	ldr	r3, [r3, #16]
 8011208:	617b      	str	r3, [r7, #20]
 801120a:	e01a      	b.n	8011242 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 801120c:	693b      	ldr	r3, [r7, #16]
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011214:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011218:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	695b      	ldr	r3, [r3, #20]
 8011228:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	699b      	ldr	r3, [r3, #24]
 8011230:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	689b      	ldr	r3, [r3, #8]
 8011240:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011244:	0e1b      	lsrs	r3, r3, #24
 8011246:	b2da      	uxtb	r2, r3
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801124e:	0c1b      	lsrs	r3, r3, #16
 8011250:	b2da      	uxtb	r2, r3
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011258:	0a1b      	lsrs	r3, r3, #8
 801125a:	b2da      	uxtb	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8011260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011262:	091b      	lsrs	r3, r3, #4
 8011264:	b2db      	uxtb	r3, r3
 8011266:	f003 030f 	and.w	r3, r3, #15
 801126a:	b2da      	uxtb	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8011270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011272:	b2db      	uxtb	r3, r3
 8011274:	f003 030f 	and.w	r3, r3, #15
 8011278:	b2da      	uxtb	r2, r3
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	0e1b      	lsrs	r3, r3, #24
 8011282:	b2da      	uxtb	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011288:	6a3b      	ldr	r3, [r7, #32]
 801128a:	0c1b      	lsrs	r3, r3, #16
 801128c:	b2da      	uxtb	r2, r3
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8011292:	6a3b      	ldr	r3, [r7, #32]
 8011294:	0a1b      	lsrs	r3, r3, #8
 8011296:	b2da      	uxtb	r2, r3
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 80112a4:	69fb      	ldr	r3, [r7, #28]
 80112a6:	b2da      	uxtb	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	0e1b      	lsrs	r3, r3, #24
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80112b6:	69bb      	ldr	r3, [r7, #24]
 80112b8:	0c1b      	lsrs	r3, r3, #16
 80112ba:	b2da      	uxtb	r2, r3
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80112c0:	69bb      	ldr	r3, [r7, #24]
 80112c2:	0a1b      	lsrs	r3, r3, #8
 80112c4:	b2da      	uxtb	r2, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	0e1b      	lsrs	r3, r3, #24
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	0c1b      	lsrs	r3, r3, #16
 80112d8:	b2da      	uxtb	r2, r3
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	b2da      	uxtb	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80112e6:	2300      	movs	r3, #0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	372c      	adds	r7, #44	@ 0x2c
 80112ec:	46bd      	mov	sp, r7
 80112ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f2:	4770      	bx	lr
 80112f4:	58004000 	.word	0x58004000
 80112f8:	a94656b9 	.word	0xa94656b9

080112fc <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b082      	sub	sp, #8
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	685b      	ldr	r3, [r3, #4]
 801130a:	4a08      	ldr	r2, [pc, #32]	@ (801132c <hci_init+0x30>)
 801130c:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 801130e:	4a08      	ldr	r2, [pc, #32]	@ (8011330 <hci_init+0x34>)
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011314:	4806      	ldr	r0, [pc, #24]	@ (8011330 <hci_init+0x34>)
 8011316:	f000 f979 	bl	801160c <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801131a:	683b      	ldr	r3, [r7, #0]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4618      	mov	r0, r3
 8011320:	f000 f8da 	bl	80114d8 <TlInit>

  return;
 8011324:	bf00      	nop
}
 8011326:	3708      	adds	r7, #8
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	20001970 	.word	0x20001970
 8011330:	20001948 	.word	0x20001948

08011334 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b084      	sub	sp, #16
 8011338:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801133a:	4822      	ldr	r0, [pc, #136]	@ (80113c4 <hci_user_evt_proc+0x90>)
 801133c:	f000 fdfa 	bl	8011f34 <LST_is_empty>
 8011340:	4603      	mov	r3, r0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d12b      	bne.n	801139e <hci_user_evt_proc+0x6a>
 8011346:	4b20      	ldr	r3, [pc, #128]	@ (80113c8 <hci_user_evt_proc+0x94>)
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d027      	beq.n	801139e <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801134e:	f107 030c 	add.w	r3, r7, #12
 8011352:	4619      	mov	r1, r3
 8011354:	481b      	ldr	r0, [pc, #108]	@ (80113c4 <hci_user_evt_proc+0x90>)
 8011356:	f000 fe7c 	bl	8012052 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 801135a:	4b1c      	ldr	r3, [pc, #112]	@ (80113cc <hci_user_evt_proc+0x98>)
 801135c:	69db      	ldr	r3, [r3, #28]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d00c      	beq.n	801137c <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011366:	2301      	movs	r3, #1
 8011368:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 801136a:	4b18      	ldr	r3, [pc, #96]	@ (80113cc <hci_user_evt_proc+0x98>)
 801136c:	69db      	ldr	r3, [r3, #28]
 801136e:	1d3a      	adds	r2, r7, #4
 8011370:	4610      	mov	r0, r2
 8011372:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8011374:	793a      	ldrb	r2, [r7, #4]
 8011376:	4b14      	ldr	r3, [pc, #80]	@ (80113c8 <hci_user_evt_proc+0x94>)
 8011378:	701a      	strb	r2, [r3, #0]
 801137a:	e002      	b.n	8011382 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 801137c:	4b12      	ldr	r3, [pc, #72]	@ (80113c8 <hci_user_evt_proc+0x94>)
 801137e:	2201      	movs	r2, #1
 8011380:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8011382:	4b11      	ldr	r3, [pc, #68]	@ (80113c8 <hci_user_evt_proc+0x94>)
 8011384:	781b      	ldrb	r3, [r3, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d004      	beq.n	8011394 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	4618      	mov	r0, r3
 801138e:	f000 fc0d 	bl	8011bac <TL_MM_EvtDone>
 8011392:	e004      	b.n	801139e <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	4619      	mov	r1, r3
 8011398:	480a      	ldr	r0, [pc, #40]	@ (80113c4 <hci_user_evt_proc+0x90>)
 801139a:	f000 fded 	bl	8011f78 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801139e:	4809      	ldr	r0, [pc, #36]	@ (80113c4 <hci_user_evt_proc+0x90>)
 80113a0:	f000 fdc8 	bl	8011f34 <LST_is_empty>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d107      	bne.n	80113ba <hci_user_evt_proc+0x86>
 80113aa:	4b07      	ldr	r3, [pc, #28]	@ (80113c8 <hci_user_evt_proc+0x94>)
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d003      	beq.n	80113ba <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 80113b2:	4804      	ldr	r0, [pc, #16]	@ (80113c4 <hci_user_evt_proc+0x90>)
 80113b4:	f002 fb2c 	bl	8013a10 <hci_notify_asynch_evt>
  }


  return;
 80113b8:	bf00      	nop
 80113ba:	bf00      	nop
}
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	200001bc 	.word	0x200001bc
 80113c8:	200001c8 	.word	0x200001c8
 80113cc:	20001948 	.word	0x20001948

080113d0 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b088      	sub	sp, #32
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	6078      	str	r0, [r7, #4]
 80113d8:	460b      	mov	r3, r1
 80113da:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80113dc:	2000      	movs	r0, #0
 80113de:	f000 f8d1 	bl	8011584 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80113e2:	2300      	movs	r3, #0
 80113e4:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	885b      	ldrh	r3, [r3, #2]
 80113ea:	b21b      	sxth	r3, r3
 80113ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80113f0:	b21a      	sxth	r2, r3
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	881b      	ldrh	r3, [r3, #0]
 80113f6:	029b      	lsls	r3, r3, #10
 80113f8:	b21b      	sxth	r3, r3
 80113fa:	4313      	orrs	r3, r2
 80113fc:	b21b      	sxth	r3, r3
 80113fe:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8011400:	4b33      	ldr	r3, [pc, #204]	@ (80114d0 <hci_send_req+0x100>)
 8011402:	2201      	movs	r2, #1
 8011404:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	68db      	ldr	r3, [r3, #12]
 801140a:	b2d9      	uxtb	r1, r3
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	689a      	ldr	r2, [r3, #8]
 8011410:	8bbb      	ldrh	r3, [r7, #28]
 8011412:	4618      	mov	r0, r3
 8011414:	f000 f890 	bl	8011538 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011418:	e04e      	b.n	80114b8 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801141a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 801141e:	f002 fb0e 	bl	8013a3e <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011422:	e043      	b.n	80114ac <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011424:	f107 030c 	add.w	r3, r7, #12
 8011428:	4619      	mov	r1, r3
 801142a:	482a      	ldr	r0, [pc, #168]	@ (80114d4 <hci_send_req+0x104>)
 801142c:	f000 fe11 	bl	8012052 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	7a5b      	ldrb	r3, [r3, #9]
 8011434:	2b0f      	cmp	r3, #15
 8011436:	d114      	bne.n	8011462 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	330b      	adds	r3, #11
 801143c:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	885b      	ldrh	r3, [r3, #2]
 8011442:	b29b      	uxth	r3, r3
 8011444:	8bba      	ldrh	r2, [r7, #28]
 8011446:	429a      	cmp	r2, r3
 8011448:	d104      	bne.n	8011454 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	691b      	ldr	r3, [r3, #16]
 801144e:	693a      	ldr	r2, [r7, #16]
 8011450:	7812      	ldrb	r2, [r2, #0]
 8011452:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	785b      	ldrb	r3, [r3, #1]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d027      	beq.n	80114ac <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801145c:	2301      	movs	r3, #1
 801145e:	77fb      	strb	r3, [r7, #31]
 8011460:	e024      	b.n	80114ac <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	330b      	adds	r3, #11
 8011466:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8011468:	69bb      	ldr	r3, [r7, #24]
 801146a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801146e:	b29b      	uxth	r3, r3
 8011470:	8bba      	ldrh	r2, [r7, #28]
 8011472:	429a      	cmp	r2, r3
 8011474:	d114      	bne.n	80114a0 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	7a9b      	ldrb	r3, [r3, #10]
 801147a:	3b03      	subs	r3, #3
 801147c:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	695a      	ldr	r2, [r3, #20]
 8011482:	7dfb      	ldrb	r3, [r7, #23]
 8011484:	429a      	cmp	r2, r3
 8011486:	bfa8      	it	ge
 8011488:	461a      	movge	r2, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6918      	ldr	r0, [r3, #16]
 8011492:	69bb      	ldr	r3, [r7, #24]
 8011494:	1cd9      	adds	r1, r3, #3
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	695b      	ldr	r3, [r3, #20]
 801149a:	461a      	mov	r2, r3
 801149c:	f004 fd5f 	bl	8015f5e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 80114a0:	69bb      	ldr	r3, [r7, #24]
 80114a2:	781b      	ldrb	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d001      	beq.n	80114ac <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80114a8:	2301      	movs	r3, #1
 80114aa:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80114ac:	4809      	ldr	r0, [pc, #36]	@ (80114d4 <hci_send_req+0x104>)
 80114ae:	f000 fd41 	bl	8011f34 <LST_is_empty>
 80114b2:	4603      	mov	r3, r0
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d0b5      	beq.n	8011424 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 80114b8:	7ffb      	ldrb	r3, [r7, #31]
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	d0ad      	beq.n	801141a <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 80114be:	2001      	movs	r0, #1
 80114c0:	f000 f860 	bl	8011584 <NotifyCmdStatus>

  return 0;
 80114c4:	2300      	movs	r3, #0
}
 80114c6:	4618      	mov	r0, r3
 80114c8:	3720      	adds	r7, #32
 80114ca:	46bd      	mov	sp, r7
 80114cc:	bd80      	pop	{r7, pc}
 80114ce:	bf00      	nop
 80114d0:	20001974 	.word	0x20001974
 80114d4:	20001968 	.word	0x20001968

080114d8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80114e0:	480f      	ldr	r0, [pc, #60]	@ (8011520 <TlInit+0x48>)
 80114e2:	f000 fd17 	bl	8011f14 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80114e6:	4a0f      	ldr	r2, [pc, #60]	@ (8011524 <TlInit+0x4c>)
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80114ec:	480e      	ldr	r0, [pc, #56]	@ (8011528 <TlInit+0x50>)
 80114ee:	f000 fd11 	bl	8011f14 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80114f2:	4b0e      	ldr	r3, [pc, #56]	@ (801152c <TlInit+0x54>)
 80114f4:	2201      	movs	r2, #1
 80114f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80114f8:	4b0d      	ldr	r3, [pc, #52]	@ (8011530 <TlInit+0x58>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d00a      	beq.n	8011516 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011504:	4b0b      	ldr	r3, [pc, #44]	@ (8011534 <TlInit+0x5c>)
 8011506:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011508:	4b09      	ldr	r3, [pc, #36]	@ (8011530 <TlInit+0x58>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	f107 0208 	add.w	r2, r7, #8
 8011510:	4610      	mov	r0, r2
 8011512:	4798      	blx	r3
  }

  return;
 8011514:	bf00      	nop
 8011516:	bf00      	nop
}
 8011518:	3718      	adds	r7, #24
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	20001968 	.word	0x20001968
 8011524:	200001c4 	.word	0x200001c4
 8011528:	200001bc 	.word	0x200001bc
 801152c:	200001c8 	.word	0x200001c8
 8011530:	20001948 	.word	0x20001948
 8011534:	080115c5 	.word	0x080115c5

08011538 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b082      	sub	sp, #8
 801153c:	af00      	add	r7, sp, #0
 801153e:	4603      	mov	r3, r0
 8011540:	603a      	str	r2, [r7, #0]
 8011542:	80fb      	strh	r3, [r7, #6]
 8011544:	460b      	mov	r3, r1
 8011546:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011548:	4b0c      	ldr	r3, [pc, #48]	@ (801157c <SendCmd+0x44>)
 801154a:	681b      	ldr	r3, [r3, #0]
 801154c:	88fa      	ldrh	r2, [r7, #6]
 801154e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8011552:	4b0a      	ldr	r3, [pc, #40]	@ (801157c <SendCmd+0x44>)
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	797a      	ldrb	r2, [r7, #5]
 8011558:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 801155a:	4b08      	ldr	r3, [pc, #32]	@ (801157c <SendCmd+0x44>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	330c      	adds	r3, #12
 8011560:	797a      	ldrb	r2, [r7, #5]
 8011562:	6839      	ldr	r1, [r7, #0]
 8011564:	4618      	mov	r0, r3
 8011566:	f004 fcfa 	bl	8015f5e <memcpy>

  hciContext.io.Send(0,0);
 801156a:	4b05      	ldr	r3, [pc, #20]	@ (8011580 <SendCmd+0x48>)
 801156c:	691b      	ldr	r3, [r3, #16]
 801156e:	2100      	movs	r1, #0
 8011570:	2000      	movs	r0, #0
 8011572:	4798      	blx	r3

  return;
 8011574:	bf00      	nop
}
 8011576:	3708      	adds	r7, #8
 8011578:	46bd      	mov	sp, r7
 801157a:	bd80      	pop	{r7, pc}
 801157c:	200001c4 	.word	0x200001c4
 8011580:	20001948 	.word	0x20001948

08011584 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	4603      	mov	r3, r0
 801158c:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801158e:	79fb      	ldrb	r3, [r7, #7]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d108      	bne.n	80115a6 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8011594:	4b0a      	ldr	r3, [pc, #40]	@ (80115c0 <NotifyCmdStatus+0x3c>)
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d00d      	beq.n	80115b8 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 801159c:	4b08      	ldr	r3, [pc, #32]	@ (80115c0 <NotifyCmdStatus+0x3c>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2000      	movs	r0, #0
 80115a2:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 80115a4:	e008      	b.n	80115b8 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 80115a6:	4b06      	ldr	r3, [pc, #24]	@ (80115c0 <NotifyCmdStatus+0x3c>)
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d004      	beq.n	80115b8 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 80115ae:	4b04      	ldr	r3, [pc, #16]	@ (80115c0 <NotifyCmdStatus+0x3c>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2001      	movs	r0, #1
 80115b4:	4798      	blx	r3
  return;
 80115b6:	bf00      	nop
 80115b8:	bf00      	nop
}
 80115ba:	3708      	adds	r7, #8
 80115bc:	46bd      	mov	sp, r7
 80115be:	bd80      	pop	{r7, pc}
 80115c0:	20001970 	.word	0x20001970

080115c4 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b082      	sub	sp, #8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	7a5b      	ldrb	r3, [r3, #9]
 80115d0:	2b0f      	cmp	r3, #15
 80115d2:	d003      	beq.n	80115dc <TlEvtReceived+0x18>
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	7a5b      	ldrb	r3, [r3, #9]
 80115d8:	2b0e      	cmp	r3, #14
 80115da:	d107      	bne.n	80115ec <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80115dc:	6879      	ldr	r1, [r7, #4]
 80115de:	4809      	ldr	r0, [pc, #36]	@ (8011604 <TlEvtReceived+0x40>)
 80115e0:	f000 fcf0 	bl	8011fc4 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80115e4:	2000      	movs	r0, #0
 80115e6:	f002 fa1f 	bl	8013a28 <hci_cmd_resp_release>
 80115ea:	e006      	b.n	80115fa <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80115ec:	6879      	ldr	r1, [r7, #4]
 80115ee:	4806      	ldr	r0, [pc, #24]	@ (8011608 <TlEvtReceived+0x44>)
 80115f0:	f000 fce8 	bl	8011fc4 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80115f4:	4804      	ldr	r0, [pc, #16]	@ (8011608 <TlEvtReceived+0x44>)
 80115f6:	f002 fa0b 	bl	8013a10 <hci_notify_asynch_evt>
  }

  return;
 80115fa:	bf00      	nop
}
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	20001968 	.word	0x20001968
 8011608:	200001bc 	.word	0x200001bc

0801160c <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4a05      	ldr	r2, [pc, #20]	@ (801162c <hci_register_io_bus+0x20>)
 8011618:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	4a04      	ldr	r2, [pc, #16]	@ (8011630 <hci_register_io_bus+0x24>)
 801161e:	611a      	str	r2, [r3, #16]

  return;
 8011620:	bf00      	nop
}
 8011622:	370c      	adds	r7, #12
 8011624:	46bd      	mov	sp, r7
 8011626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801162a:	4770      	bx	lr
 801162c:	08011925 	.word	0x08011925
 8011630:	0801198d 	.word	0x0801198d

08011634 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	4a08      	ldr	r2, [pc, #32]	@ (8011664 <shci_init+0x30>)
 8011644:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011646:	4a08      	ldr	r2, [pc, #32]	@ (8011668 <shci_init+0x34>)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 801164c:	4806      	ldr	r0, [pc, #24]	@ (8011668 <shci_init+0x34>)
 801164e:	f000 f915 	bl	801187c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	4618      	mov	r0, r3
 8011658:	f000 f898 	bl	801178c <TlInit>

  return;
 801165c:	bf00      	nop
}
 801165e:	3708      	adds	r7, #8
 8011660:	46bd      	mov	sp, r7
 8011662:	bd80      	pop	{r7, pc}
 8011664:	20001998 	.word	0x20001998
 8011668:	20001978 	.word	0x20001978

0801166c <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011672:	4822      	ldr	r0, [pc, #136]	@ (80116fc <shci_user_evt_proc+0x90>)
 8011674:	f000 fc5e 	bl	8011f34 <LST_is_empty>
 8011678:	4603      	mov	r3, r0
 801167a:	2b00      	cmp	r3, #0
 801167c:	d12b      	bne.n	80116d6 <shci_user_evt_proc+0x6a>
 801167e:	4b20      	ldr	r3, [pc, #128]	@ (8011700 <shci_user_evt_proc+0x94>)
 8011680:	781b      	ldrb	r3, [r3, #0]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d027      	beq.n	80116d6 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011686:	f107 030c 	add.w	r3, r7, #12
 801168a:	4619      	mov	r1, r3
 801168c:	481b      	ldr	r0, [pc, #108]	@ (80116fc <shci_user_evt_proc+0x90>)
 801168e:	f000 fce0 	bl	8012052 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8011692:	4b1c      	ldr	r3, [pc, #112]	@ (8011704 <shci_user_evt_proc+0x98>)
 8011694:	69db      	ldr	r3, [r3, #28]
 8011696:	2b00      	cmp	r3, #0
 8011698:	d00c      	beq.n	80116b4 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801169a:	68fb      	ldr	r3, [r7, #12]
 801169c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801169e:	2301      	movs	r3, #1
 80116a0:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80116a2:	4b18      	ldr	r3, [pc, #96]	@ (8011704 <shci_user_evt_proc+0x98>)
 80116a4:	69db      	ldr	r3, [r3, #28]
 80116a6:	1d3a      	adds	r2, r7, #4
 80116a8:	4610      	mov	r0, r2
 80116aa:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80116ac:	793a      	ldrb	r2, [r7, #4]
 80116ae:	4b14      	ldr	r3, [pc, #80]	@ (8011700 <shci_user_evt_proc+0x94>)
 80116b0:	701a      	strb	r2, [r3, #0]
 80116b2:	e002      	b.n	80116ba <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80116b4:	4b12      	ldr	r3, [pc, #72]	@ (8011700 <shci_user_evt_proc+0x94>)
 80116b6:	2201      	movs	r2, #1
 80116b8:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80116ba:	4b11      	ldr	r3, [pc, #68]	@ (8011700 <shci_user_evt_proc+0x94>)
 80116bc:	781b      	ldrb	r3, [r3, #0]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d004      	beq.n	80116cc <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	4618      	mov	r0, r3
 80116c6:	f000 fa71 	bl	8011bac <TL_MM_EvtDone>
 80116ca:	e004      	b.n	80116d6 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	4619      	mov	r1, r3
 80116d0:	480a      	ldr	r0, [pc, #40]	@ (80116fc <shci_user_evt_proc+0x90>)
 80116d2:	f000 fc51 	bl	8011f78 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80116d6:	4809      	ldr	r0, [pc, #36]	@ (80116fc <shci_user_evt_proc+0x90>)
 80116d8:	f000 fc2c 	bl	8011f34 <LST_is_empty>
 80116dc:	4603      	mov	r3, r0
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d107      	bne.n	80116f2 <shci_user_evt_proc+0x86>
 80116e2:	4b07      	ldr	r3, [pc, #28]	@ (8011700 <shci_user_evt_proc+0x94>)
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d003      	beq.n	80116f2 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80116ea:	4804      	ldr	r0, [pc, #16]	@ (80116fc <shci_user_evt_proc+0x90>)
 80116ec:	f7f1 fa95 	bl	8002c1a <shci_notify_asynch_evt>
  }


  return;
 80116f0:	bf00      	nop
 80116f2:	bf00      	nop
}
 80116f4:	3710      	adds	r7, #16
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	200001cc 	.word	0x200001cc
 8011700:	200001dc 	.word	0x200001dc
 8011704:	20001978 	.word	0x20001978

08011708 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b084      	sub	sp, #16
 801170c:	af00      	add	r7, sp, #0
 801170e:	60ba      	str	r2, [r7, #8]
 8011710:	607b      	str	r3, [r7, #4]
 8011712:	4603      	mov	r3, r0
 8011714:	81fb      	strh	r3, [r7, #14]
 8011716:	460b      	mov	r3, r1
 8011718:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801171a:	2000      	movs	r0, #0
 801171c:	f000 f868 	bl	80117f0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011720:	4b17      	ldr	r3, [pc, #92]	@ (8011780 <shci_send+0x78>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	89fa      	ldrh	r2, [r7, #14]
 8011726:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801172a:	4b15      	ldr	r3, [pc, #84]	@ (8011780 <shci_send+0x78>)
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	7b7a      	ldrb	r2, [r7, #13]
 8011730:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011732:	4b13      	ldr	r3, [pc, #76]	@ (8011780 <shci_send+0x78>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	330c      	adds	r3, #12
 8011738:	7b7a      	ldrb	r2, [r7, #13]
 801173a:	68b9      	ldr	r1, [r7, #8]
 801173c:	4618      	mov	r0, r3
 801173e:	f004 fc0e 	bl	8015f5e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8011742:	4b10      	ldr	r3, [pc, #64]	@ (8011784 <shci_send+0x7c>)
 8011744:	2201      	movs	r2, #1
 8011746:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011748:	4b0f      	ldr	r3, [pc, #60]	@ (8011788 <shci_send+0x80>)
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	2100      	movs	r1, #0
 801174e:	2000      	movs	r0, #0
 8011750:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011752:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011756:	f7f1 fa77 	bl	8002c48 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f103 0008 	add.w	r0, r3, #8
 8011760:	4b07      	ldr	r3, [pc, #28]	@ (8011780 <shci_send+0x78>)
 8011762:	6819      	ldr	r1, [r3, #0]
 8011764:	4b06      	ldr	r3, [pc, #24]	@ (8011780 <shci_send+0x78>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	789b      	ldrb	r3, [r3, #2]
 801176a:	3303      	adds	r3, #3
 801176c:	461a      	mov	r2, r3
 801176e:	f004 fbf6 	bl	8015f5e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011772:	2001      	movs	r0, #1
 8011774:	f000 f83c 	bl	80117f0 <Cmd_SetStatus>

  return;
 8011778:	bf00      	nop
}
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}
 8011780:	200001d8 	.word	0x200001d8
 8011784:	2000199c 	.word	0x2000199c
 8011788:	20001978 	.word	0x20001978

0801178c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b086      	sub	sp, #24
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8011794:	4a10      	ldr	r2, [pc, #64]	@ (80117d8 <TlInit+0x4c>)
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801179a:	4810      	ldr	r0, [pc, #64]	@ (80117dc <TlInit+0x50>)
 801179c:	f000 fbba 	bl	8011f14 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80117a0:	2001      	movs	r0, #1
 80117a2:	f000 f825 	bl	80117f0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80117a6:	4b0e      	ldr	r3, [pc, #56]	@ (80117e0 <TlInit+0x54>)
 80117a8:	2201      	movs	r2, #1
 80117aa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80117ac:	4b0d      	ldr	r3, [pc, #52]	@ (80117e4 <TlInit+0x58>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d00c      	beq.n	80117ce <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80117b8:	4b0b      	ldr	r3, [pc, #44]	@ (80117e8 <TlInit+0x5c>)
 80117ba:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80117bc:	4b0b      	ldr	r3, [pc, #44]	@ (80117ec <TlInit+0x60>)
 80117be:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80117c0:	4b08      	ldr	r3, [pc, #32]	@ (80117e4 <TlInit+0x58>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	f107 020c 	add.w	r2, r7, #12
 80117c8:	4610      	mov	r0, r2
 80117ca:	4798      	blx	r3
  }

  return;
 80117cc:	bf00      	nop
 80117ce:	bf00      	nop
}
 80117d0:	3718      	adds	r7, #24
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	200001d8 	.word	0x200001d8
 80117dc:	200001cc 	.word	0x200001cc
 80117e0:	200001dc 	.word	0x200001dc
 80117e4:	20001978 	.word	0x20001978
 80117e8:	08011841 	.word	0x08011841
 80117ec:	08011859 	.word	0x08011859

080117f0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80117fa:	79fb      	ldrb	r3, [r7, #7]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d10b      	bne.n	8011818 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8011800:	4b0d      	ldr	r3, [pc, #52]	@ (8011838 <Cmd_SetStatus+0x48>)
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	2b00      	cmp	r3, #0
 8011806:	d003      	beq.n	8011810 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8011808:	4b0b      	ldr	r3, [pc, #44]	@ (8011838 <Cmd_SetStatus+0x48>)
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2000      	movs	r0, #0
 801180e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8011810:	4b0a      	ldr	r3, [pc, #40]	@ (801183c <Cmd_SetStatus+0x4c>)
 8011812:	2200      	movs	r2, #0
 8011814:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8011816:	e00b      	b.n	8011830 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8011818:	4b08      	ldr	r3, [pc, #32]	@ (801183c <Cmd_SetStatus+0x4c>)
 801181a:	2201      	movs	r2, #1
 801181c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801181e:	4b06      	ldr	r3, [pc, #24]	@ (8011838 <Cmd_SetStatus+0x48>)
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d004      	beq.n	8011830 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8011826:	4b04      	ldr	r3, [pc, #16]	@ (8011838 <Cmd_SetStatus+0x48>)
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	2001      	movs	r0, #1
 801182c:	4798      	blx	r3
  return;
 801182e:	bf00      	nop
 8011830:	bf00      	nop
}
 8011832:	3708      	adds	r7, #8
 8011834:	46bd      	mov	sp, r7
 8011836:	bd80      	pop	{r7, pc}
 8011838:	20001998 	.word	0x20001998
 801183c:	200001d4 	.word	0x200001d4

08011840 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8011848:	2000      	movs	r0, #0
 801184a:	f7f1 f9f2 	bl	8002c32 <shci_cmd_resp_release>

  return;
 801184e:	bf00      	nop
}
 8011850:	3708      	adds	r7, #8
 8011852:	46bd      	mov	sp, r7
 8011854:	bd80      	pop	{r7, pc}
	...

08011858 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8011860:	6879      	ldr	r1, [r7, #4]
 8011862:	4805      	ldr	r0, [pc, #20]	@ (8011878 <TlUserEvtReceived+0x20>)
 8011864:	f000 fbae 	bl	8011fc4 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011868:	4803      	ldr	r0, [pc, #12]	@ (8011878 <TlUserEvtReceived+0x20>)
 801186a:	f7f1 f9d6 	bl	8002c1a <shci_notify_asynch_evt>

  return;
 801186e:	bf00      	nop
}
 8011870:	3708      	adds	r7, #8
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	200001cc 	.word	0x200001cc

0801187c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	4a05      	ldr	r2, [pc, #20]	@ (801189c <shci_register_io_bus+0x20>)
 8011888:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	4a04      	ldr	r2, [pc, #16]	@ (80118a0 <shci_register_io_bus+0x24>)
 801188e:	611a      	str	r2, [r3, #16]

  return;
 8011890:	bf00      	nop
}
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	08011a39 	.word	0x08011a39
 80118a0:	08011a8d 	.word	0x08011a8d

080118a4 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80118a8:	f002 fff0 	bl	801488c <HW_IPCC_Enable>

  return;
 80118ac:	bf00      	nop
}
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <TL_Init>:


void TL_Init( void )
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80118b4:	4b10      	ldr	r3, [pc, #64]	@ (80118f8 <TL_Init+0x48>)
 80118b6:	4a11      	ldr	r2, [pc, #68]	@ (80118fc <TL_Init+0x4c>)
 80118b8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80118ba:	4b0f      	ldr	r3, [pc, #60]	@ (80118f8 <TL_Init+0x48>)
 80118bc:	4a10      	ldr	r2, [pc, #64]	@ (8011900 <TL_Init+0x50>)
 80118be:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80118c0:	4b0d      	ldr	r3, [pc, #52]	@ (80118f8 <TL_Init+0x48>)
 80118c2:	4a10      	ldr	r2, [pc, #64]	@ (8011904 <TL_Init+0x54>)
 80118c4:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80118c6:	4b0c      	ldr	r3, [pc, #48]	@ (80118f8 <TL_Init+0x48>)
 80118c8:	4a0f      	ldr	r2, [pc, #60]	@ (8011908 <TL_Init+0x58>)
 80118ca:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80118cc:	4b0a      	ldr	r3, [pc, #40]	@ (80118f8 <TL_Init+0x48>)
 80118ce:	4a0f      	ldr	r2, [pc, #60]	@ (801190c <TL_Init+0x5c>)
 80118d0:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80118d2:	4b09      	ldr	r3, [pc, #36]	@ (80118f8 <TL_Init+0x48>)
 80118d4:	4a0e      	ldr	r2, [pc, #56]	@ (8011910 <TL_Init+0x60>)
 80118d6:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80118d8:	4b07      	ldr	r3, [pc, #28]	@ (80118f8 <TL_Init+0x48>)
 80118da:	4a0e      	ldr	r2, [pc, #56]	@ (8011914 <TL_Init+0x64>)
 80118dc:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80118de:	4b06      	ldr	r3, [pc, #24]	@ (80118f8 <TL_Init+0x48>)
 80118e0:	4a0d      	ldr	r2, [pc, #52]	@ (8011918 <TL_Init+0x68>)
 80118e2:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80118e4:	4b04      	ldr	r3, [pc, #16]	@ (80118f8 <TL_Init+0x48>)
 80118e6:	4a0d      	ldr	r2, [pc, #52]	@ (801191c <TL_Init+0x6c>)
 80118e8:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80118ea:	4b03      	ldr	r3, [pc, #12]	@ (80118f8 <TL_Init+0x48>)
 80118ec:	4a0c      	ldr	r2, [pc, #48]	@ (8011920 <TL_Init+0x70>)
 80118ee:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80118f0:	f002 ffe0 	bl	80148b4 <HW_IPCC_Init>

  return;
 80118f4:	bf00      	nop
}
 80118f6:	bd80      	pop	{r7, pc}
 80118f8:	20030000 	.word	0x20030000
 80118fc:	20030028 	.word	0x20030028
 8011900:	20030048 	.word	0x20030048
 8011904:	20030058 	.word	0x20030058
 8011908:	20030068 	.word	0x20030068
 801190c:	20030070 	.word	0x20030070
 8011910:	20030078 	.word	0x20030078
 8011914:	20030080 	.word	0x20030080
 8011918:	2003009c 	.word	0x2003009c
 801191c:	200300a0 	.word	0x200300a0
 8011920:	200300ac 	.word	0x200300ac

08011924 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8011930:	4811      	ldr	r0, [pc, #68]	@ (8011978 <TL_BLE_Init+0x54>)
 8011932:	f000 faef 	bl	8011f14 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8011936:	4b11      	ldr	r3, [pc, #68]	@ (801197c <TL_BLE_Init+0x58>)
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	689a      	ldr	r2, [r3, #8]
 8011940:	68bb      	ldr	r3, [r7, #8]
 8011942:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	68da      	ldr	r2, [r3, #12]
 8011948:	68bb      	ldr	r3, [r7, #8]
 801194a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	4a0c      	ldr	r2, [pc, #48]	@ (8011980 <TL_BLE_Init+0x5c>)
 8011950:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	4a08      	ldr	r2, [pc, #32]	@ (8011978 <TL_BLE_Init+0x54>)
 8011956:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8011958:	f002 ffc2 	bl	80148e0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	4a08      	ldr	r2, [pc, #32]	@ (8011984 <TL_BLE_Init+0x60>)
 8011962:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	685b      	ldr	r3, [r3, #4]
 8011968:	4a07      	ldr	r2, [pc, #28]	@ (8011988 <TL_BLE_Init+0x64>)
 801196a:	6013      	str	r3, [r2, #0]

  return 0;
 801196c:	2300      	movs	r3, #0
}
 801196e:	4618      	mov	r0, r3
 8011970:	3710      	adds	r7, #16
 8011972:	46bd      	mov	sp, r7
 8011974:	bd80      	pop	{r7, pc}
 8011976:	bf00      	nop
 8011978:	200300c8 	.word	0x200300c8
 801197c:	20030000 	.word	0x20030000
 8011980:	20031f48 	.word	0x20031f48
 8011984:	200019a8 	.word	0x200019a8
 8011988:	200019ac 	.word	0x200019ac

0801198c <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	460b      	mov	r3, r1
 8011996:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8011998:	4b09      	ldr	r3, [pc, #36]	@ (80119c0 <TL_BLE_SendCmd+0x34>)
 801199a:	685b      	ldr	r3, [r3, #4]
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	2201      	movs	r2, #1
 80119a0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80119a2:	4b07      	ldr	r3, [pc, #28]	@ (80119c0 <TL_BLE_SendCmd+0x34>)
 80119a4:	685b      	ldr	r3, [r3, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4619      	mov	r1, r3
 80119aa:	2001      	movs	r0, #1
 80119ac:	f000 f96c 	bl	8011c88 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80119b0:	f002 ffa0 	bl	80148f4 <HW_IPCC_BLE_SendCmd>

  return 0;
 80119b4:	2300      	movs	r3, #0
}
 80119b6:	4618      	mov	r0, r3
 80119b8:	3708      	adds	r7, #8
 80119ba:	46bd      	mov	sp, r7
 80119bc:	bd80      	pop	{r7, pc}
 80119be:	bf00      	nop
 80119c0:	20030000 	.word	0x20030000

080119c4 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b082      	sub	sp, #8
 80119c8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80119ca:	e01c      	b.n	8011a06 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80119cc:	1d3b      	adds	r3, r7, #4
 80119ce:	4619      	mov	r1, r3
 80119d0:	4812      	ldr	r0, [pc, #72]	@ (8011a1c <HW_IPCC_BLE_RxEvtNot+0x58>)
 80119d2:	f000 fb3e 	bl	8012052 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	7a5b      	ldrb	r3, [r3, #9]
 80119da:	2b0f      	cmp	r3, #15
 80119dc:	d003      	beq.n	80119e6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	7a5b      	ldrb	r3, [r3, #9]
 80119e2:	2b0e      	cmp	r3, #14
 80119e4:	d105      	bne.n	80119f2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	4619      	mov	r1, r3
 80119ea:	2002      	movs	r0, #2
 80119ec:	f000 f94c 	bl	8011c88 <OutputDbgTrace>
 80119f0:	e004      	b.n	80119fc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	4619      	mov	r1, r3
 80119f6:	2003      	movs	r0, #3
 80119f8:	f000 f946 	bl	8011c88 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80119fc:	4b08      	ldr	r3, [pc, #32]	@ (8011a20 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	687a      	ldr	r2, [r7, #4]
 8011a02:	4610      	mov	r0, r2
 8011a04:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8011a06:	4805      	ldr	r0, [pc, #20]	@ (8011a1c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8011a08:	f000 fa94 	bl	8011f34 <LST_is_empty>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d0dc      	beq.n	80119cc <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8011a12:	bf00      	nop
}
 8011a14:	3708      	adds	r7, #8
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	200300c8 	.word	0x200300c8
 8011a20:	200019a8 	.word	0x200019a8

08011a24 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8011a28:	4b02      	ldr	r3, [pc, #8]	@ (8011a34 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	4798      	blx	r3

  return;
 8011a2e:	bf00      	nop
}
 8011a30:	bd80      	pop	{r7, pc}
 8011a32:	bf00      	nop
 8011a34:	200019ac 	.word	0x200019ac

08011a38 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b084      	sub	sp, #16
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8011a44:	480d      	ldr	r0, [pc, #52]	@ (8011a7c <TL_SYS_Init+0x44>)
 8011a46:	f000 fa65 	bl	8011f14 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8011a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8011a80 <TL_SYS_Init+0x48>)
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	689a      	ldr	r2, [r3, #8]
 8011a54:	68bb      	ldr	r3, [r7, #8]
 8011a56:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	4a08      	ldr	r2, [pc, #32]	@ (8011a7c <TL_SYS_Init+0x44>)
 8011a5c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8011a5e:	f002 ff6b 	bl	8014938 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4a07      	ldr	r2, [pc, #28]	@ (8011a84 <TL_SYS_Init+0x4c>)
 8011a68:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	685b      	ldr	r3, [r3, #4]
 8011a6e:	4a06      	ldr	r2, [pc, #24]	@ (8011a88 <TL_SYS_Init+0x50>)
 8011a70:	6013      	str	r3, [r2, #0]

  return 0;
 8011a72:	2300      	movs	r3, #0
}
 8011a74:	4618      	mov	r0, r3
 8011a76:	3710      	adds	r7, #16
 8011a78:	46bd      	mov	sp, r7
 8011a7a:	bd80      	pop	{r7, pc}
 8011a7c:	200300d0 	.word	0x200300d0
 8011a80:	20030000 	.word	0x20030000
 8011a84:	200019b0 	.word	0x200019b0
 8011a88:	200019b4 	.word	0x200019b4

08011a8c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
 8011a94:	460b      	mov	r3, r1
 8011a96:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8011a98:	4b09      	ldr	r3, [pc, #36]	@ (8011ac0 <TL_SYS_SendCmd+0x34>)
 8011a9a:	68db      	ldr	r3, [r3, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2210      	movs	r2, #16
 8011aa0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8011aa2:	4b07      	ldr	r3, [pc, #28]	@ (8011ac0 <TL_SYS_SendCmd+0x34>)
 8011aa4:	68db      	ldr	r3, [r3, #12]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	4619      	mov	r1, r3
 8011aaa:	2004      	movs	r0, #4
 8011aac:	f000 f8ec 	bl	8011c88 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8011ab0:	f002 ff4c 	bl	801494c <HW_IPCC_SYS_SendCmd>

  return 0;
 8011ab4:	2300      	movs	r3, #0
}
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
 8011abe:	bf00      	nop
 8011ac0:	20030000 	.word	0x20030000

08011ac4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011ac8:	4b07      	ldr	r3, [pc, #28]	@ (8011ae8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011aca:	68db      	ldr	r3, [r3, #12]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	4619      	mov	r1, r3
 8011ad0:	2005      	movs	r0, #5
 8011ad2:	f000 f8d9 	bl	8011c88 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8011ad6:	4b05      	ldr	r3, [pc, #20]	@ (8011aec <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
 8011ada:	4a03      	ldr	r2, [pc, #12]	@ (8011ae8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8011adc:	68d2      	ldr	r2, [r2, #12]
 8011ade:	6812      	ldr	r2, [r2, #0]
 8011ae0:	4610      	mov	r0, r2
 8011ae2:	4798      	blx	r3

  return;
 8011ae4:	bf00      	nop
}
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	20030000 	.word	0x20030000
 8011aec:	200019b0 	.word	0x200019b0

08011af0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b082      	sub	sp, #8
 8011af4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011af6:	e00e      	b.n	8011b16 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8011af8:	1d3b      	adds	r3, r7, #4
 8011afa:	4619      	mov	r1, r3
 8011afc:	480b      	ldr	r0, [pc, #44]	@ (8011b2c <HW_IPCC_SYS_EvtNot+0x3c>)
 8011afe:	f000 faa8 	bl	8012052 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	4619      	mov	r1, r3
 8011b06:	2006      	movs	r0, #6
 8011b08:	f000 f8be 	bl	8011c88 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8011b0c:	4b08      	ldr	r3, [pc, #32]	@ (8011b30 <HW_IPCC_SYS_EvtNot+0x40>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	4610      	mov	r0, r2
 8011b14:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8011b16:	4805      	ldr	r0, [pc, #20]	@ (8011b2c <HW_IPCC_SYS_EvtNot+0x3c>)
 8011b18:	f000 fa0c 	bl	8011f34 <LST_is_empty>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d0ea      	beq.n	8011af8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8011b22:	bf00      	nop
}
 8011b24:	3708      	adds	r7, #8
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}
 8011b2a:	bf00      	nop
 8011b2c:	200300d0 	.word	0x200300d0
 8011b30:	200019b4 	.word	0x200019b4

08011b34 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8011b3c:	4817      	ldr	r0, [pc, #92]	@ (8011b9c <TL_MM_Init+0x68>)
 8011b3e:	f000 f9e9 	bl	8011f14 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8011b42:	4817      	ldr	r0, [pc, #92]	@ (8011ba0 <TL_MM_Init+0x6c>)
 8011b44:	f000 f9e6 	bl	8011f14 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8011b48:	4b16      	ldr	r3, [pc, #88]	@ (8011ba4 <TL_MM_Init+0x70>)
 8011b4a:	691b      	ldr	r3, [r3, #16]
 8011b4c:	4a16      	ldr	r2, [pc, #88]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b4e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8011b50:	4b15      	ldr	r3, [pc, #84]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	6892      	ldr	r2, [r2, #8]
 8011b58:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8011b5a:	4b13      	ldr	r3, [pc, #76]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	687a      	ldr	r2, [r7, #4]
 8011b60:	68d2      	ldr	r2, [r2, #12]
 8011b62:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8011b64:	4b10      	ldr	r3, [pc, #64]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b66:	681b      	ldr	r3, [r3, #0]
 8011b68:	4a0c      	ldr	r2, [pc, #48]	@ (8011b9c <TL_MM_Init+0x68>)
 8011b6a:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8011b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	687a      	ldr	r2, [r7, #4]
 8011b72:	6812      	ldr	r2, [r2, #0]
 8011b74:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8011b76:	4b0c      	ldr	r3, [pc, #48]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	6852      	ldr	r2, [r2, #4]
 8011b7e:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8011b80:	4b09      	ldr	r3, [pc, #36]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	6912      	ldr	r2, [r2, #16]
 8011b88:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8011b8a:	4b07      	ldr	r3, [pc, #28]	@ (8011ba8 <TL_MM_Init+0x74>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	687a      	ldr	r2, [r7, #4]
 8011b90:	6952      	ldr	r2, [r2, #20]
 8011b92:	619a      	str	r2, [r3, #24]

  return;
 8011b94:	bf00      	nop
}
 8011b96:	3708      	adds	r7, #8
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	bd80      	pop	{r7, pc}
 8011b9c:	200300b8 	.word	0x200300b8
 8011ba0:	200019a0 	.word	0x200019a0
 8011ba4:	20030000 	.word	0x20030000
 8011ba8:	200019b8 	.word	0x200019b8

08011bac <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b082      	sub	sp, #8
 8011bb0:	af00      	add	r7, sp, #0
 8011bb2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8011bb4:	6879      	ldr	r1, [r7, #4]
 8011bb6:	4807      	ldr	r0, [pc, #28]	@ (8011bd4 <TL_MM_EvtDone+0x28>)
 8011bb8:	f000 fa04 	bl	8011fc4 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8011bbc:	6879      	ldr	r1, [r7, #4]
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	f000 f862 	bl	8011c88 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8011bc4:	4804      	ldr	r0, [pc, #16]	@ (8011bd8 <TL_MM_EvtDone+0x2c>)
 8011bc6:	f002 fee7 	bl	8014998 <HW_IPCC_MM_SendFreeBuf>

  return;
 8011bca:	bf00      	nop
}
 8011bcc:	3708      	adds	r7, #8
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}
 8011bd2:	bf00      	nop
 8011bd4:	200019a0 	.word	0x200019a0
 8011bd8:	08011bdd 	.word	0x08011bdd

08011bdc <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011be2:	e00c      	b.n	8011bfe <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8011be4:	1d3b      	adds	r3, r7, #4
 8011be6:	4619      	mov	r1, r3
 8011be8:	480a      	ldr	r0, [pc, #40]	@ (8011c14 <SendFreeBuf+0x38>)
 8011bea:	f000 fa32 	bl	8012052 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8011bee:	4b0a      	ldr	r3, [pc, #40]	@ (8011c18 <SendFreeBuf+0x3c>)
 8011bf0:	691b      	ldr	r3, [r3, #16]
 8011bf2:	691b      	ldr	r3, [r3, #16]
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	4611      	mov	r1, r2
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	f000 f9e3 	bl	8011fc4 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8011bfe:	4805      	ldr	r0, [pc, #20]	@ (8011c14 <SendFreeBuf+0x38>)
 8011c00:	f000 f998 	bl	8011f34 <LST_is_empty>
 8011c04:	4603      	mov	r3, r0
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d0ec      	beq.n	8011be4 <SendFreeBuf+0x8>
  }

  return;
 8011c0a:	bf00      	nop
}
 8011c0c:	3708      	adds	r7, #8
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	bd80      	pop	{r7, pc}
 8011c12:	bf00      	nop
 8011c14:	200019a0 	.word	0x200019a0
 8011c18:	20030000 	.word	0x20030000

08011c1c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8011c1c:	b580      	push	{r7, lr}
 8011c1e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8011c20:	4805      	ldr	r0, [pc, #20]	@ (8011c38 <TL_TRACES_Init+0x1c>)
 8011c22:	f000 f977 	bl	8011f14 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8011c26:	4b05      	ldr	r3, [pc, #20]	@ (8011c3c <TL_TRACES_Init+0x20>)
 8011c28:	695b      	ldr	r3, [r3, #20]
 8011c2a:	4a03      	ldr	r2, [pc, #12]	@ (8011c38 <TL_TRACES_Init+0x1c>)
 8011c2c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8011c2e:	f002 fee9 	bl	8014a04 <HW_IPCC_TRACES_Init>

  return;
 8011c32:	bf00      	nop
}
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	bf00      	nop
 8011c38:	200300c0 	.word	0x200300c0
 8011c3c:	20030000 	.word	0x20030000

08011c40 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b082      	sub	sp, #8
 8011c44:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011c46:	e008      	b.n	8011c5a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8011c48:	1d3b      	adds	r3, r7, #4
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	4808      	ldr	r0, [pc, #32]	@ (8011c70 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011c4e:	f000 fa00 	bl	8012052 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	4618      	mov	r0, r3
 8011c56:	f000 f80d 	bl	8011c74 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8011c5a:	4805      	ldr	r0, [pc, #20]	@ (8011c70 <HW_IPCC_TRACES_EvtNot+0x30>)
 8011c5c:	f000 f96a 	bl	8011f34 <LST_is_empty>
 8011c60:	4603      	mov	r3, r0
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d0f0      	beq.n	8011c48 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8011c66:	bf00      	nop
}
 8011c68:	3708      	adds	r7, #8
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}
 8011c6e:	bf00      	nop
 8011c70:	200300c0 	.word	0x200300c0

08011c74 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8011c74:	b480      	push	{r7}
 8011c76:	b083      	sub	sp, #12
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8011c7c:	bf00      	nop
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8011c88:	b480      	push	{r7}
 8011c8a:	b087      	sub	sp, #28
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	4603      	mov	r3, r0
 8011c90:	6039      	str	r1, [r7, #0]
 8011c92:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8011c94:	79fb      	ldrb	r3, [r7, #7]
 8011c96:	2b06      	cmp	r3, #6
 8011c98:	d845      	bhi.n	8011d26 <OutputDbgTrace+0x9e>
 8011c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8011ca0 <OutputDbgTrace+0x18>)
 8011c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ca0:	08011cbd 	.word	0x08011cbd
 8011ca4:	08011ce1 	.word	0x08011ce1
 8011ca8:	08011ce7 	.word	0x08011ce7
 8011cac:	08011cfb 	.word	0x08011cfb
 8011cb0:	08011d07 	.word	0x08011d07
 8011cb4:	08011d0d 	.word	0x08011d0d
 8011cb8:	08011d1b 	.word	0x08011d1b
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011cbc:	683b      	ldr	r3, [r7, #0]
 8011cbe:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	7a5b      	ldrb	r3, [r3, #9]
 8011cc4:	2bff      	cmp	r3, #255	@ 0xff
 8011cc6:	d005      	beq.n	8011cd4 <OutputDbgTrace+0x4c>
 8011cc8:	2bff      	cmp	r3, #255	@ 0xff
 8011cca:	dc05      	bgt.n	8011cd8 <OutputDbgTrace+0x50>
 8011ccc:	2b0e      	cmp	r3, #14
 8011cce:	d005      	beq.n	8011cdc <OutputDbgTrace+0x54>
 8011cd0:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8011cd2:	e001      	b.n	8011cd8 <OutputDbgTrace+0x50>
          break;
 8011cd4:	bf00      	nop
 8011cd6:	e027      	b.n	8011d28 <OutputDbgTrace+0xa0>
          break;
 8011cd8:	bf00      	nop
 8011cda:	e025      	b.n	8011d28 <OutputDbgTrace+0xa0>
          break;
 8011cdc:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8011cde:	e023      	b.n	8011d28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011ce4:	e020      	b.n	8011d28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8011cea:	697b      	ldr	r3, [r7, #20]
 8011cec:	7a5b      	ldrb	r3, [r3, #9]
 8011cee:	2b0e      	cmp	r3, #14
 8011cf0:	d001      	beq.n	8011cf6 <OutputDbgTrace+0x6e>
 8011cf2:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8011cf4:	e000      	b.n	8011cf8 <OutputDbgTrace+0x70>
          break;
 8011cf6:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011cf8:	e016      	b.n	8011d28 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	7a5b      	ldrb	r3, [r3, #9]
 8011d02:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011d04:	e010      	b.n	8011d28 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8011d0a:	e00d      	b.n	8011d28 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	785b      	ldrb	r3, [r3, #1]
 8011d14:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 8011d16:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011d18:	e006      	b.n	8011d28 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	7a5b      	ldrb	r3, [r3, #9]
 8011d22:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8011d24:	e000      	b.n	8011d28 <OutputDbgTrace+0xa0>

    default:
      break;
 8011d26:	bf00      	nop
  }

  return;
 8011d28:	bf00      	nop
}
 8011d2a:	371c      	adds	r7, #28
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d32:	4770      	bx	lr

08011d34 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8011d40:	215c      	movs	r1, #92	@ 0x5c
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f004 f882 	bl	8015e4c <strrchr>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d007      	beq.n	8011d5e <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8011d4e:	215c      	movs	r1, #92	@ 0x5c
 8011d50:	6878      	ldr	r0, [r7, #4]
 8011d52:	f004 f87b 	bl	8015e4c <strrchr>
 8011d56:	4603      	mov	r3, r0
 8011d58:	3301      	adds	r3, #1
 8011d5a:	60fb      	str	r3, [r7, #12]
 8011d5c:	e00d      	b.n	8011d7a <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 8011d5e:	212f      	movs	r1, #47	@ 0x2f
 8011d60:	6878      	ldr	r0, [r7, #4]
 8011d62:	f004 f873 	bl	8015e4c <strrchr>
 8011d66:	4603      	mov	r3, r0
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d006      	beq.n	8011d7a <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 8011d6c:	212f      	movs	r1, #47	@ 0x2f
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f004 f86c 	bl	8015e4c <strrchr>
 8011d74:	4603      	mov	r3, r0
 8011d76:	3301      	adds	r3, #1
 8011d78:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011d7a:	68fb      	ldr	r3, [r7, #12]
}
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	3710      	adds	r7, #16
 8011d80:	46bd      	mov	sp, r7
 8011d82:	bd80      	pop	{r7, pc}

08011d84 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8011d8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8011d90:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8011d92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d94:	b672      	cpsid	i
}
 8011d96:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8011d98:	1cbb      	adds	r3, r7, #2
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	4812      	ldr	r0, [pc, #72]	@ (8011de8 <DbgTrace_TxCpltCallback+0x64>)
 8011d9e:	f000 fb9d 	bl	80124dc <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8011da2:	1cbb      	adds	r3, r7, #2
 8011da4:	4619      	mov	r1, r3
 8011da6:	4810      	ldr	r0, [pc, #64]	@ (8011de8 <DbgTrace_TxCpltCallback+0x64>)
 8011da8:	f000 fc87 	bl	80126ba <CircularQueue_Sense>
 8011dac:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8011dae:	693b      	ldr	r3, [r7, #16]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00c      	beq.n	8011dce <DbgTrace_TxCpltCallback+0x4a>
 8011db4:	697b      	ldr	r3, [r7, #20]
 8011db6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011db8:	68bb      	ldr	r3, [r7, #8]
 8011dba:	f383 8810 	msr	PRIMASK, r3
}
 8011dbe:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8011dc0:	887b      	ldrh	r3, [r7, #2]
 8011dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8011dec <DbgTrace_TxCpltCallback+0x68>)
 8011dc4:	4619      	mov	r1, r3
 8011dc6:	6938      	ldr	r0, [r7, #16]
 8011dc8:	f7f0 fa24 	bl	8002214 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8011dcc:	e008      	b.n	8011de0 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8011dce:	4b08      	ldr	r3, [pc, #32]	@ (8011df0 <DbgTrace_TxCpltCallback+0x6c>)
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	701a      	strb	r2, [r3, #0]
 8011dd4:	697b      	ldr	r3, [r7, #20]
 8011dd6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f383 8810 	msr	PRIMASK, r3
}
 8011dde:	bf00      	nop
}
 8011de0:	bf00      	nop
 8011de2:	3718      	adds	r7, #24
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}
 8011de8:	200019bc 	.word	0x200019bc
 8011dec:	08011d85 	.word	0x08011d85
 8011df0:	200000a6 	.word	0x200000a6

08011df4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b084      	sub	sp, #16
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	60f8      	str	r0, [r7, #12]
 8011dfc:	60b9      	str	r1, [r7, #8]
 8011dfe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8011e00:	687a      	ldr	r2, [r7, #4]
 8011e02:	68b9      	ldr	r1, [r7, #8]
 8011e04:	68f8      	ldr	r0, [r7, #12]
 8011e06:	f000 f805 	bl	8011e14 <DbgTraceWrite>
 8011e0a:	4603      	mov	r3, r0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3710      	adds	r7, #16
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b08a      	sub	sp, #40	@ 0x28
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8011e20:	2300      	movs	r3, #0
 8011e22:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e24:	f3ef 8310 	mrs	r3, PRIMASK
 8011e28:	61bb      	str	r3, [r7, #24]
  return(result);
 8011e2a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8011e2c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e34:	d102      	bne.n	8011e3c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8011e36:	2300      	movs	r3, #0
 8011e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e3a:	e037      	b.n	8011eac <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	2b01      	cmp	r3, #1
 8011e40:	d006      	beq.n	8011e50 <DbgTraceWrite+0x3c>
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2b02      	cmp	r3, #2
 8011e46:	d003      	beq.n	8011e50 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8011e48:	f04f 33ff 	mov.w	r3, #4294967295
 8011e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011e4e:	e02d      	b.n	8011eac <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d02a      	beq.n	8011eac <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8011e5a:	b672      	cpsid	i
}
 8011e5c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	b29a      	uxth	r2, r3
 8011e62:	2301      	movs	r3, #1
 8011e64:	68b9      	ldr	r1, [r7, #8]
 8011e66:	4814      	ldr	r0, [pc, #80]	@ (8011eb8 <DbgTraceWrite+0xa4>)
 8011e68:	f000 f912 	bl	8012090 <CircularQueue_Add>
 8011e6c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8011e6e:	69fb      	ldr	r3, [r7, #28]
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d015      	beq.n	8011ea0 <DbgTraceWrite+0x8c>
 8011e74:	4b11      	ldr	r3, [pc, #68]	@ (8011ebc <DbgTraceWrite+0xa8>)
 8011e76:	781b      	ldrb	r3, [r3, #0]
 8011e78:	b2db      	uxtb	r3, r3
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d010      	beq.n	8011ea0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8011e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8011ebc <DbgTraceWrite+0xa8>)
 8011e80:	2200      	movs	r2, #0
 8011e82:	701a      	strb	r2, [r3, #0]
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	f383 8810 	msr	PRIMASK, r3
}
 8011e8e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	4a0a      	ldr	r2, [pc, #40]	@ (8011ec0 <DbgTraceWrite+0xac>)
 8011e96:	4619      	mov	r1, r3
 8011e98:	69f8      	ldr	r0, [r7, #28]
 8011e9a:	f7f0 f9bb 	bl	8002214 <DbgOutputTraces>
 8011e9e:	e005      	b.n	8011eac <DbgTraceWrite+0x98>
 8011ea0:	6a3b      	ldr	r3, [r7, #32]
 8011ea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ea4:	693b      	ldr	r3, [r7, #16]
 8011ea6:	f383 8810 	msr	PRIMASK, r3
}
 8011eaa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8011eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3728      	adds	r7, #40	@ 0x28
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	200019bc 	.word	0x200019bc
 8011ebc:	200000a6 	.word	0x200000a6
 8011ec0:	08011d85 	.word	0x08011d85

08011ec4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8011ec4:	b480      	push	{r7}
 8011ec6:	b085      	sub	sp, #20
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	4603      	mov	r3, r0
 8011ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8011ece:	4b0f      	ldr	r3, [pc, #60]	@ (8011f0c <OTP_Read+0x48>)
 8011ed0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011ed2:	e002      	b.n	8011eda <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	3b08      	subs	r3, #8
 8011ed8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	3307      	adds	r3, #7
 8011ede:	781b      	ldrb	r3, [r3, #0]
 8011ee0:	79fa      	ldrb	r2, [r7, #7]
 8011ee2:	429a      	cmp	r2, r3
 8011ee4:	d003      	beq.n	8011eee <OTP_Read+0x2a>
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	4a09      	ldr	r2, [pc, #36]	@ (8011f10 <OTP_Read+0x4c>)
 8011eea:	4293      	cmp	r3, r2
 8011eec:	d1f2      	bne.n	8011ed4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	3307      	adds	r3, #7
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	79fa      	ldrb	r2, [r7, #7]
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d001      	beq.n	8011efe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8011efa:	2300      	movs	r3, #0
 8011efc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8011efe:	68fb      	ldr	r3, [r7, #12]
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	3714      	adds	r7, #20
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr
 8011f0c:	1fff73f8 	.word	0x1fff73f8
 8011f10:	1fff7000 	.word	0x1fff7000

08011f14 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	687a      	ldr	r2, [r7, #4]
 8011f20:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	687a      	ldr	r2, [r7, #4]
 8011f26:	605a      	str	r2, [r3, #4]
}
 8011f28:	bf00      	nop
 8011f2a:	370c      	adds	r7, #12
 8011f2c:	46bd      	mov	sp, r7
 8011f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f32:	4770      	bx	lr

08011f34 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8011f34:	b480      	push	{r7}
 8011f36:	b087      	sub	sp, #28
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8011f40:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f42:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011f44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f46:	b672      	cpsid	i
}
 8011f48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	687a      	ldr	r2, [r7, #4]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d102      	bne.n	8011f5a <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8011f54:	2301      	movs	r3, #1
 8011f56:	75fb      	strb	r3, [r7, #23]
 8011f58:	e001      	b.n	8011f5e <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	75fb      	strb	r3, [r7, #23]
 8011f5e:	693b      	ldr	r3, [r7, #16]
 8011f60:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f62:	68bb      	ldr	r3, [r7, #8]
 8011f64:	f383 8810 	msr	PRIMASK, r3
}
 8011f68:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8011f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	371c      	adds	r7, #28
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr

08011f78 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8011f78:	b480      	push	{r7}
 8011f7a:	b087      	sub	sp, #28
 8011f7c:	af00      	add	r7, sp, #0
 8011f7e:	6078      	str	r0, [r7, #4]
 8011f80:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f82:	f3ef 8310 	mrs	r3, PRIMASK
 8011f86:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f88:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011f8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f8c:	b672      	cpsid	i
}
 8011f8e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	681a      	ldr	r2, [r3, #0]
 8011f94:	683b      	ldr	r3, [r7, #0]
 8011f96:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8011f98:	683b      	ldr	r3, [r7, #0]
 8011f9a:	687a      	ldr	r2, [r7, #4]
 8011f9c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	683a      	ldr	r2, [r7, #0]
 8011fa2:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	683a      	ldr	r2, [r7, #0]
 8011faa:	605a      	str	r2, [r3, #4]
 8011fac:	697b      	ldr	r3, [r7, #20]
 8011fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	f383 8810 	msr	PRIMASK, r3
}
 8011fb6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8011fb8:	bf00      	nop
 8011fba:	371c      	adds	r7, #28
 8011fbc:	46bd      	mov	sp, r7
 8011fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc2:	4770      	bx	lr

08011fc4 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8011fc4:	b480      	push	{r7}
 8011fc6:	b087      	sub	sp, #28
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fce:	f3ef 8310 	mrs	r3, PRIMASK
 8011fd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8011fd4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8011fd6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fd8:	b672      	cpsid	i
}
 8011fda:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	687a      	ldr	r2, [r7, #4]
 8011fe0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	685a      	ldr	r2, [r3, #4]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	683a      	ldr	r2, [r7, #0]
 8011fee:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8011ff0:	683b      	ldr	r3, [r7, #0]
 8011ff2:	685b      	ldr	r3, [r3, #4]
 8011ff4:	683a      	ldr	r2, [r7, #0]
 8011ff6:	601a      	str	r2, [r3, #0]
 8011ff8:	697b      	ldr	r3, [r7, #20]
 8011ffa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ffc:	693b      	ldr	r3, [r7, #16]
 8011ffe:	f383 8810 	msr	PRIMASK, r3
}
 8012002:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012004:	bf00      	nop
 8012006:	371c      	adds	r7, #28
 8012008:	46bd      	mov	sp, r7
 801200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200e:	4770      	bx	lr

08012010 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8012010:	b480      	push	{r7}
 8012012:	b087      	sub	sp, #28
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012018:	f3ef 8310 	mrs	r3, PRIMASK
 801201c:	60fb      	str	r3, [r7, #12]
  return(result);
 801201e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012020:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012022:	b672      	cpsid	i
}
 8012024:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	685b      	ldr	r3, [r3, #4]
 801202a:	687a      	ldr	r2, [r7, #4]
 801202c:	6812      	ldr	r2, [r2, #0]
 801202e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	6852      	ldr	r2, [r2, #4]
 8012038:	605a      	str	r2, [r3, #4]
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	f383 8810 	msr	PRIMASK, r3
}
 8012044:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012046:	bf00      	nop
 8012048:	371c      	adds	r7, #28
 801204a:	46bd      	mov	sp, r7
 801204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012050:	4770      	bx	lr

08012052 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b086      	sub	sp, #24
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
 801205a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801205c:	f3ef 8310 	mrs	r3, PRIMASK
 8012060:	60fb      	str	r3, [r7, #12]
  return(result);
 8012062:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012064:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012066:	b672      	cpsid	i
}
 8012068:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	4618      	mov	r0, r3
 8012078:	f7ff ffca 	bl	8012010 <LST_remove_node>
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	f383 8810 	msr	PRIMASK, r3
}
 8012086:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012088:	bf00      	nop
 801208a:	3718      	adds	r7, #24
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b08e      	sub	sp, #56	@ 0x38
 8012094:	af00      	add	r7, sp, #0
 8012096:	60f8      	str	r0, [r7, #12]
 8012098:	60b9      	str	r1, [r7, #8]
 801209a:	603b      	str	r3, [r7, #0]
 801209c:	4613      	mov	r3, r2
 801209e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 80120a0:	2300      	movs	r3, #0
 80120a2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 80120a4:	2300      	movs	r3, #0
 80120a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 80120a8:	2300      	movs	r3, #0
 80120aa:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 80120ac:	2300      	movs	r3, #0
 80120ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80120b0:	2300      	movs	r3, #0
 80120b2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 80120b4:	2300      	movs	r3, #0
 80120b6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 80120b8:	2300      	movs	r3, #0
 80120ba:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	891b      	ldrh	r3, [r3, #8]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d101      	bne.n	80120c8 <CircularQueue_Add+0x38>
 80120c4:	2302      	movs	r3, #2
 80120c6:	e000      	b.n	80120ca <CircularQueue_Add+0x3a>
 80120c8:	2300      	movs	r3, #0
 80120ca:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	695b      	ldr	r3, [r3, #20]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d029      	beq.n	8012128 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	891b      	ldrh	r3, [r3, #8]
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d122      	bne.n	8012122 <CircularQueue_Add+0x92>
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	681a      	ldr	r2, [r3, #0]
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	4413      	add	r3, r2
 80120e6:	781b      	ldrb	r3, [r3, #0]
 80120e8:	4618      	mov	r0, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681a      	ldr	r2, [r3, #0]
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	691b      	ldr	r3, [r3, #16]
 80120f2:	1c59      	adds	r1, r3, #1
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	4299      	cmp	r1, r3
 80120fa:	d306      	bcc.n	801210a <CircularQueue_Add+0x7a>
 80120fc:	68fb      	ldr	r3, [r7, #12]
 80120fe:	6919      	ldr	r1, [r3, #16]
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	685b      	ldr	r3, [r3, #4]
 8012104:	1acb      	subs	r3, r1, r3
 8012106:	3301      	adds	r3, #1
 8012108:	e002      	b.n	8012110 <CircularQueue_Add+0x80>
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	691b      	ldr	r3, [r3, #16]
 801210e:	3301      	adds	r3, #1
 8012110:	4413      	add	r3, r2
 8012112:	781b      	ldrb	r3, [r3, #0]
 8012114:	021b      	lsls	r3, r3, #8
 8012116:	b29b      	uxth	r3, r3
 8012118:	4403      	add	r3, r0
 801211a:	b29b      	uxth	r3, r3
 801211c:	3302      	adds	r3, #2
 801211e:	b29b      	uxth	r3, r3
 8012120:	e001      	b.n	8012126 <CircularQueue_Add+0x96>
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	891b      	ldrh	r3, [r3, #8]
 8012126:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	891b      	ldrh	r3, [r3, #8]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d002      	beq.n	8012136 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	891b      	ldrh	r3, [r3, #8]
 8012134:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	691a      	ldr	r2, [r3, #16]
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	68db      	ldr	r3, [r3, #12]
 801213e:	429a      	cmp	r2, r3
 8012140:	d307      	bcc.n	8012152 <CircularQueue_Add+0xc2>
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	685a      	ldr	r2, [r3, #4]
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	6919      	ldr	r1, [r3, #16]
 801214a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801214c:	440b      	add	r3, r1
 801214e:	1ad3      	subs	r3, r2, r3
 8012150:	e000      	b.n	8012154 <CircularQueue_Add+0xc4>
 8012152:	2300      	movs	r3, #0
 8012154:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012156:	88fa      	ldrh	r2, [r7, #6]
 8012158:	7ffb      	ldrb	r3, [r7, #31]
 801215a:	4413      	add	r3, r2
 801215c:	461a      	mov	r2, r3
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	fb02 f303 	mul.w	r3, r2, r3
 8012164:	69ba      	ldr	r2, [r7, #24]
 8012166:	429a      	cmp	r2, r3
 8012168:	d80b      	bhi.n	8012182 <CircularQueue_Add+0xf2>
 801216a:	88fa      	ldrh	r2, [r7, #6]
 801216c:	7ffb      	ldrb	r3, [r7, #31]
 801216e:	4413      	add	r3, r2
 8012170:	461a      	mov	r2, r3
 8012172:	69bb      	ldr	r3, [r7, #24]
 8012174:	fbb3 f1f2 	udiv	r1, r3, r2
 8012178:	fb01 f202 	mul.w	r2, r1, r2
 801217c:	1a9b      	subs	r3, r3, r2
 801217e:	b2db      	uxtb	r3, r3
 8012180:	e000      	b.n	8012184 <CircularQueue_Add+0xf4>
 8012182:	2300      	movs	r3, #0
 8012184:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012186:	7dfa      	ldrb	r2, [r7, #23]
 8012188:	7ffb      	ldrb	r3, [r7, #31]
 801218a:	429a      	cmp	r2, r3
 801218c:	bf8c      	ite	hi
 801218e:	2301      	movhi	r3, #1
 8012190:	2300      	movls	r3, #0
 8012192:	b2db      	uxtb	r3, r3
 8012194:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012196:	7fbb      	ldrb	r3, [r7, #30]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d008      	beq.n	80121ae <CircularQueue_Add+0x11e>
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	7f1b      	ldrb	r3, [r3, #28]
 80121a0:	f003 0301 	and.w	r3, r3, #1
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d002      	beq.n	80121ae <CircularQueue_Add+0x11e>
 80121a8:	7dfb      	ldrb	r3, [r7, #23]
 80121aa:	b29b      	uxth	r3, r3
 80121ac:	e000      	b.n	80121b0 <CircularQueue_Add+0x120>
 80121ae:	8bbb      	ldrh	r3, [r7, #28]
 80121b0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 80121b2:	7fbb      	ldrb	r3, [r7, #30]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d008      	beq.n	80121ca <CircularQueue_Add+0x13a>
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	7f1b      	ldrb	r3, [r3, #28]
 80121bc:	f003 0302 	and.w	r3, r3, #2
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d002      	beq.n	80121ca <CircularQueue_Add+0x13a>
 80121c4:	7ffb      	ldrb	r3, [r7, #31]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	e000      	b.n	80121cc <CircularQueue_Add+0x13c>
 80121ca:	8bbb      	ldrh	r3, [r7, #28]
 80121cc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 80121ce:	88fb      	ldrh	r3, [r7, #6]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	f000 817e 	beq.w	80124d2 <CircularQueue_Add+0x442>
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	695a      	ldr	r2, [r3, #20]
 80121da:	88f9      	ldrh	r1, [r7, #6]
 80121dc:	7ffb      	ldrb	r3, [r7, #31]
 80121de:	440b      	add	r3, r1
 80121e0:	4619      	mov	r1, r3
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	fb01 f303 	mul.w	r3, r1, r3
 80121e8:	441a      	add	r2, r3
 80121ea:	8bbb      	ldrh	r3, [r7, #28]
 80121ec:	441a      	add	r2, r3
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	685b      	ldr	r3, [r3, #4]
 80121f2:	429a      	cmp	r2, r3
 80121f4:	f200 816d 	bhi.w	80124d2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80121f8:	2300      	movs	r3, #0
 80121fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80121fc:	e14a      	b.n	8012494 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	691a      	ldr	r2, [r3, #16]
 8012202:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012204:	441a      	add	r2, r3
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	685b      	ldr	r3, [r3, #4]
 801220a:	429a      	cmp	r2, r3
 801220c:	d307      	bcc.n	801221e <CircularQueue_Add+0x18e>
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	691a      	ldr	r2, [r3, #16]
 8012212:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012214:	441a      	add	r2, r3
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	685b      	ldr	r3, [r3, #4]
 801221a:	1ad3      	subs	r3, r2, r3
 801221c:	e003      	b.n	8012226 <CircularQueue_Add+0x196>
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	691a      	ldr	r2, [r3, #16]
 8012222:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012224:	4413      	add	r3, r2
 8012226:	68fa      	ldr	r2, [r7, #12]
 8012228:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	691b      	ldr	r3, [r3, #16]
 801222e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	891b      	ldrh	r3, [r3, #8]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d130      	bne.n	801229a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	681a      	ldr	r2, [r3, #0]
 801223c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801223e:	1c59      	adds	r1, r3, #1
 8012240:	6339      	str	r1, [r7, #48]	@ 0x30
 8012242:	4413      	add	r3, r2
 8012244:	88fa      	ldrh	r2, [r7, #6]
 8012246:	b2d2      	uxtb	r2, r2
 8012248:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	685b      	ldr	r3, [r3, #4]
 801224e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012250:	429a      	cmp	r2, r3
 8012252:	d304      	bcc.n	801225e <CircularQueue_Add+0x1ce>
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	685b      	ldr	r3, [r3, #4]
 8012258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801225a:	1ad3      	subs	r3, r2, r3
 801225c:	e000      	b.n	8012260 <CircularQueue_Add+0x1d0>
 801225e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012260:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012262:	88fb      	ldrh	r3, [r7, #6]
 8012264:	0a1b      	lsrs	r3, r3, #8
 8012266:	b298      	uxth	r0, r3
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	681a      	ldr	r2, [r3, #0]
 801226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801226e:	1c59      	adds	r1, r3, #1
 8012270:	6339      	str	r1, [r7, #48]	@ 0x30
 8012272:	4413      	add	r3, r2
 8012274:	b2c2      	uxtb	r2, r0
 8012276:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801227e:	429a      	cmp	r2, r3
 8012280:	d304      	bcc.n	801228c <CircularQueue_Add+0x1fc>
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	685b      	ldr	r3, [r3, #4]
 8012286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012288:	1ad3      	subs	r3, r2, r3
 801228a:	e000      	b.n	801228e <CircularQueue_Add+0x1fe>
 801228c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801228e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	695b      	ldr	r3, [r3, #20]
 8012294:	1c9a      	adds	r2, r3, #2
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 801229a:	88fa      	ldrh	r2, [r7, #6]
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	6859      	ldr	r1, [r3, #4]
 80122a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122a2:	1acb      	subs	r3, r1, r3
 80122a4:	4293      	cmp	r3, r2
 80122a6:	bf28      	it	cs
 80122a8:	4613      	movcs	r3, r2
 80122aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 80122ac:	88fb      	ldrh	r3, [r7, #6]
 80122ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122b0:	429a      	cmp	r2, r3
 80122b2:	d007      	beq.n	80122c4 <CircularQueue_Add+0x234>
 80122b4:	88fb      	ldrh	r3, [r7, #6]
 80122b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d225      	bcs.n	8012308 <CircularQueue_Add+0x278>
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	7f1b      	ldrb	r3, [r3, #28]
 80122c0:	2b00      	cmp	r3, #0
 80122c2:	d121      	bne.n	8012308 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80122ca:	18d0      	adds	r0, r2, r3
 80122cc:	88fb      	ldrh	r3, [r7, #6]
 80122ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80122d0:	fb02 f303 	mul.w	r3, r2, r3
 80122d4:	68ba      	ldr	r2, [r7, #8]
 80122d6:	4413      	add	r3, r2
 80122d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122da:	4619      	mov	r1, r3
 80122dc:	f003 fe3f 	bl	8015f5e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	695a      	ldr	r2, [r3, #20]
 80122e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122e6:	441a      	add	r2, r3
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80122ec:	2300      	movs	r3, #0
 80122ee:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80122f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80122f4:	88fa      	ldrh	r2, [r7, #6]
 80122f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f8:	1ad3      	subs	r3, r2, r3
 80122fa:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80122fc:	7ffb      	ldrb	r3, [r7, #31]
 80122fe:	b29a      	uxth	r2, r3
 8012300:	88fb      	ldrh	r3, [r7, #6]
 8012302:	4413      	add	r3, r2
 8012304:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012306:	e0a4      	b.n	8012452 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801230a:	2b00      	cmp	r3, #0
 801230c:	f000 80a1 	beq.w	8012452 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	7f1b      	ldrb	r3, [r3, #28]
 8012314:	f003 0301 	and.w	r3, r3, #1
 8012318:	2b00      	cmp	r3, #0
 801231a:	d03a      	beq.n	8012392 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	891b      	ldrh	r3, [r3, #8]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d10d      	bne.n	8012340 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	681a      	ldr	r2, [r3, #0]
 8012328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801232a:	3b02      	subs	r3, #2
 801232c:	4413      	add	r3, r2
 801232e:	22ff      	movs	r2, #255	@ 0xff
 8012330:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	681a      	ldr	r2, [r3, #0]
 8012336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012338:	3b01      	subs	r3, #1
 801233a:	4413      	add	r3, r2
 801233c:	22ff      	movs	r2, #255	@ 0xff
 801233e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	695a      	ldr	r2, [r3, #20]
 8012344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012346:	441a      	add	r2, r3
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 801234c:	2300      	movs	r3, #0
 801234e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012350:	88fb      	ldrh	r3, [r7, #6]
 8012352:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012354:	2300      	movs	r3, #0
 8012356:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	891b      	ldrh	r3, [r3, #8]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d16f      	bne.n	8012440 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012366:	1c59      	adds	r1, r3, #1
 8012368:	6339      	str	r1, [r7, #48]	@ 0x30
 801236a:	4413      	add	r3, r2
 801236c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801236e:	b2d2      	uxtb	r2, r2
 8012370:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012374:	0a18      	lsrs	r0, r3, #8
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	681a      	ldr	r2, [r3, #0]
 801237a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801237c:	1c59      	adds	r1, r3, #1
 801237e:	6339      	str	r1, [r7, #48]	@ 0x30
 8012380:	4413      	add	r3, r2
 8012382:	b2c2      	uxtb	r2, r0
 8012384:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	695b      	ldr	r3, [r3, #20]
 801238a:	1c9a      	adds	r2, r3, #2
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	615a      	str	r2, [r3, #20]
 8012390:	e056      	b.n	8012440 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	7f1b      	ldrb	r3, [r3, #28]
 8012396:	f003 0302 	and.w	r3, r3, #2
 801239a:	2b00      	cmp	r3, #0
 801239c:	d050      	beq.n	8012440 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	891b      	ldrh	r3, [r3, #8]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d14a      	bne.n	801243c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ac:	3b02      	subs	r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123b2:	b2d2      	uxtb	r2, r2
 80123b4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80123b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123b8:	0a19      	lsrs	r1, r3, #8
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	681a      	ldr	r2, [r3, #0]
 80123be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c0:	3b01      	subs	r3, #1
 80123c2:	4413      	add	r3, r2
 80123c4:	b2ca      	uxtb	r2, r1
 80123c6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	681a      	ldr	r2, [r3, #0]
 80123cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ce:	18d0      	adds	r0, r2, r3
 80123d0:	88fb      	ldrh	r3, [r7, #6]
 80123d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80123d4:	fb02 f303 	mul.w	r3, r2, r3
 80123d8:	68ba      	ldr	r2, [r7, #8]
 80123da:	4413      	add	r3, r2
 80123dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80123de:	4619      	mov	r1, r3
 80123e0:	f003 fdbd 	bl	8015f5e <memcpy>
             q->byteCount += NbBytesToCopy; 
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	695a      	ldr	r2, [r3, #20]
 80123e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ea:	441a      	add	r2, r3
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80123f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80123f4:	88fa      	ldrh	r2, [r7, #6]
 80123f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123f8:	1ad3      	subs	r3, r2, r3
 80123fa:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	699b      	ldr	r3, [r3, #24]
 8012400:	1c5a      	adds	r2, r3, #1
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8012406:	2300      	movs	r3, #0
 8012408:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	681a      	ldr	r2, [r3, #0]
 801240e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012410:	1c59      	adds	r1, r3, #1
 8012412:	6339      	str	r1, [r7, #48]	@ 0x30
 8012414:	4413      	add	r3, r2
 8012416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012418:	b2d2      	uxtb	r2, r2
 801241a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801241c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801241e:	0a18      	lsrs	r0, r3, #8
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	681a      	ldr	r2, [r3, #0]
 8012424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012426:	1c59      	adds	r1, r3, #1
 8012428:	6339      	str	r1, [r7, #48]	@ 0x30
 801242a:	4413      	add	r3, r2
 801242c:	b2c2      	uxtb	r2, r0
 801242e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	695b      	ldr	r3, [r3, #20]
 8012434:	1c9a      	adds	r2, r3, #2
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	615a      	str	r2, [r3, #20]
 801243a:	e001      	b.n	8012440 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801243c:	2300      	movs	r3, #0
 801243e:	e049      	b.n	80124d4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8012440:	7ffb      	ldrb	r3, [r7, #31]
 8012442:	b29a      	uxth	r2, r3
 8012444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012446:	b29b      	uxth	r3, r3
 8012448:	4413      	add	r3, r2
 801244a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2200      	movs	r2, #0
 8012450:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8012452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012454:	2b00      	cmp	r3, #0
 8012456:	d015      	beq.n	8012484 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	681a      	ldr	r2, [r3, #0]
 801245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801245e:	18d0      	adds	r0, r2, r3
 8012460:	88fb      	ldrh	r3, [r7, #6]
 8012462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012464:	fb03 f202 	mul.w	r2, r3, r2
 8012468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801246a:	4413      	add	r3, r2
 801246c:	68ba      	ldr	r2, [r7, #8]
 801246e:	4413      	add	r3, r2
 8012470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012472:	4619      	mov	r1, r3
 8012474:	f003 fd73 	bl	8015f5e <memcpy>
        q->byteCount += NbBytesToCopy;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	695a      	ldr	r2, [r3, #20]
 801247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801247e:	441a      	add	r2, r3
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	699b      	ldr	r3, [r3, #24]
 8012488:	1c5a      	adds	r2, r3, #1
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801248e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012490:	3301      	adds	r3, #1
 8012492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012494:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	429a      	cmp	r2, r3
 801249a:	f4ff aeb0 	bcc.w	80121fe <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	681a      	ldr	r2, [r3, #0]
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	6919      	ldr	r1, [r3, #16]
 80124a6:	7ffb      	ldrb	r3, [r7, #31]
 80124a8:	4419      	add	r1, r3
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	685b      	ldr	r3, [r3, #4]
 80124ae:	4299      	cmp	r1, r3
 80124b0:	d307      	bcc.n	80124c2 <CircularQueue_Add+0x432>
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	6919      	ldr	r1, [r3, #16]
 80124b6:	7ffb      	ldrb	r3, [r7, #31]
 80124b8:	4419      	add	r1, r3
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	685b      	ldr	r3, [r3, #4]
 80124be:	1acb      	subs	r3, r1, r3
 80124c0:	e003      	b.n	80124ca <CircularQueue_Add+0x43a>
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	6919      	ldr	r1, [r3, #16]
 80124c6:	7ffb      	ldrb	r3, [r7, #31]
 80124c8:	440b      	add	r3, r1
 80124ca:	4413      	add	r3, r2
 80124cc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80124ce:	6a3b      	ldr	r3, [r7, #32]
 80124d0:	e000      	b.n	80124d4 <CircularQueue_Add+0x444>
    return NULL;
 80124d2:	2300      	movs	r3, #0
}
 80124d4:	4618      	mov	r0, r3
 80124d6:	3738      	adds	r7, #56	@ 0x38
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80124dc:	b480      	push	{r7}
 80124de:	b085      	sub	sp, #20
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
 80124e4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80124e6:	2300      	movs	r3, #0
 80124e8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80124ea:	2300      	movs	r3, #0
 80124ec:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	891b      	ldrh	r3, [r3, #8]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d101      	bne.n	80124fa <CircularQueue_Remove+0x1e>
 80124f6:	2302      	movs	r3, #2
 80124f8:	e000      	b.n	80124fc <CircularQueue_Remove+0x20>
 80124fa:	2300      	movs	r3, #0
 80124fc:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80124fe:	2300      	movs	r3, #0
 8012500:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	695b      	ldr	r3, [r3, #20]
 8012506:	2b00      	cmp	r3, #0
 8012508:	f000 80ca 	beq.w	80126a0 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	891b      	ldrh	r3, [r3, #8]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d120      	bne.n	8012556 <CircularQueue_Remove+0x7a>
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	681a      	ldr	r2, [r3, #0]
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	68db      	ldr	r3, [r3, #12]
 801251c:	4413      	add	r3, r2
 801251e:	781b      	ldrb	r3, [r3, #0]
 8012520:	4618      	mov	r0, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	681a      	ldr	r2, [r3, #0]
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	68db      	ldr	r3, [r3, #12]
 801252a:	1c59      	adds	r1, r3, #1
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	4299      	cmp	r1, r3
 8012532:	d306      	bcc.n	8012542 <CircularQueue_Remove+0x66>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	68d9      	ldr	r1, [r3, #12]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	1acb      	subs	r3, r1, r3
 801253e:	3301      	adds	r3, #1
 8012540:	e002      	b.n	8012548 <CircularQueue_Remove+0x6c>
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	68db      	ldr	r3, [r3, #12]
 8012546:	3301      	adds	r3, #1
 8012548:	4413      	add	r3, r2
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	021b      	lsls	r3, r3, #8
 801254e:	b29b      	uxth	r3, r3
 8012550:	4403      	add	r3, r0
 8012552:	b29b      	uxth	r3, r3
 8012554:	e001      	b.n	801255a <CircularQueue_Remove+0x7e>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	891b      	ldrh	r3, [r3, #8]
 801255a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	7f1b      	ldrb	r3, [r3, #28]
 8012560:	f003 0301 	and.w	r3, r3, #1
 8012564:	2b00      	cmp	r3, #0
 8012566:	d056      	beq.n	8012616 <CircularQueue_Remove+0x13a>
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	7f1b      	ldrb	r3, [r3, #28]
 801256c:	f003 0302 	and.w	r3, r3, #2
 8012570:	2b00      	cmp	r3, #0
 8012572:	d150      	bne.n	8012616 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012574:	897b      	ldrh	r3, [r7, #10]
 8012576:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801257a:	4293      	cmp	r3, r2
 801257c:	d103      	bne.n	8012586 <CircularQueue_Remove+0xaa>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	891b      	ldrh	r3, [r3, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d012      	beq.n	80125ac <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	68da      	ldr	r2, [r3, #12]
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801258e:	429a      	cmp	r2, r3
 8012590:	d941      	bls.n	8012616 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	891b      	ldrh	r3, [r3, #8]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d03d      	beq.n	8012616 <CircularQueue_Remove+0x13a>
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	685a      	ldr	r2, [r3, #4]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	68db      	ldr	r3, [r3, #12]
 80125a2:	1ad3      	subs	r3, r2, r3
 80125a4:	687a      	ldr	r2, [r7, #4]
 80125a6:	8912      	ldrh	r2, [r2, #8]
 80125a8:	4293      	cmp	r3, r2
 80125aa:	d234      	bcs.n	8012616 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	695a      	ldr	r2, [r3, #20]
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	68d9      	ldr	r1, [r3, #12]
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	1acb      	subs	r3, r1, r3
 80125ba:	441a      	add	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2200      	movs	r2, #0
 80125c4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	891b      	ldrh	r3, [r3, #8]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d120      	bne.n	8012610 <CircularQueue_Remove+0x134>
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	681a      	ldr	r2, [r3, #0]
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	68db      	ldr	r3, [r3, #12]
 80125d6:	4413      	add	r3, r2
 80125d8:	781b      	ldrb	r3, [r3, #0]
 80125da:	4618      	mov	r0, r3
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	68db      	ldr	r3, [r3, #12]
 80125e4:	1c59      	adds	r1, r3, #1
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	685b      	ldr	r3, [r3, #4]
 80125ea:	4299      	cmp	r1, r3
 80125ec:	d306      	bcc.n	80125fc <CircularQueue_Remove+0x120>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	68d9      	ldr	r1, [r3, #12]
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	685b      	ldr	r3, [r3, #4]
 80125f6:	1acb      	subs	r3, r1, r3
 80125f8:	3301      	adds	r3, #1
 80125fa:	e002      	b.n	8012602 <CircularQueue_Remove+0x126>
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	68db      	ldr	r3, [r3, #12]
 8012600:	3301      	adds	r3, #1
 8012602:	4413      	add	r3, r2
 8012604:	781b      	ldrb	r3, [r3, #0]
 8012606:	021b      	lsls	r3, r3, #8
 8012608:	b29b      	uxth	r3, r3
 801260a:	4403      	add	r3, r0
 801260c:	b29b      	uxth	r3, r3
 801260e:	e001      	b.n	8012614 <CircularQueue_Remove+0x138>
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	891b      	ldrh	r3, [r3, #8]
 8012614:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681a      	ldr	r2, [r3, #0]
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	68d9      	ldr	r1, [r3, #12]
 801261e:	7a7b      	ldrb	r3, [r7, #9]
 8012620:	4419      	add	r1, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	685b      	ldr	r3, [r3, #4]
 8012626:	4299      	cmp	r1, r3
 8012628:	d307      	bcc.n	801263a <CircularQueue_Remove+0x15e>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	68d9      	ldr	r1, [r3, #12]
 801262e:	7a7b      	ldrb	r3, [r7, #9]
 8012630:	4419      	add	r1, r3
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	685b      	ldr	r3, [r3, #4]
 8012636:	1acb      	subs	r3, r1, r3
 8012638:	e003      	b.n	8012642 <CircularQueue_Remove+0x166>
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	68d9      	ldr	r1, [r3, #12]
 801263e:	7a7b      	ldrb	r3, [r7, #9]
 8012640:	440b      	add	r3, r1
 8012642:	4413      	add	r3, r2
 8012644:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	695b      	ldr	r3, [r3, #20]
 801264a:	8979      	ldrh	r1, [r7, #10]
 801264c:	7a7a      	ldrb	r2, [r7, #9]
 801264e:	440a      	add	r2, r1
 8012650:	1a9a      	subs	r2, r3, r2
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	695b      	ldr	r3, [r3, #20]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d01b      	beq.n	8012696 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	68da      	ldr	r2, [r3, #12]
 8012662:	897b      	ldrh	r3, [r7, #10]
 8012664:	441a      	add	r2, r3
 8012666:	7a7b      	ldrb	r3, [r7, #9]
 8012668:	441a      	add	r2, r3
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	685b      	ldr	r3, [r3, #4]
 801266e:	429a      	cmp	r2, r3
 8012670:	d309      	bcc.n	8012686 <CircularQueue_Remove+0x1aa>
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	68da      	ldr	r2, [r3, #12]
 8012676:	897b      	ldrh	r3, [r7, #10]
 8012678:	441a      	add	r2, r3
 801267a:	7a7b      	ldrb	r3, [r7, #9]
 801267c:	441a      	add	r2, r3
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	685b      	ldr	r3, [r3, #4]
 8012682:	1ad3      	subs	r3, r2, r3
 8012684:	e005      	b.n	8012692 <CircularQueue_Remove+0x1b6>
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	68da      	ldr	r2, [r3, #12]
 801268a:	897b      	ldrh	r3, [r7, #10]
 801268c:	441a      	add	r2, r3
 801268e:	7a7b      	ldrb	r3, [r7, #9]
 8012690:	4413      	add	r3, r2
 8012692:	687a      	ldr	r2, [r7, #4]
 8012694:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	699b      	ldr	r3, [r3, #24]
 801269a:	1e5a      	subs	r2, r3, #1
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 80126a0:	683b      	ldr	r3, [r7, #0]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d002      	beq.n	80126ac <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 80126a6:	683b      	ldr	r3, [r7, #0]
 80126a8:	897a      	ldrh	r2, [r7, #10]
 80126aa:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 80126ac:	68fb      	ldr	r3, [r7, #12]
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	3714      	adds	r7, #20
 80126b2:	46bd      	mov	sp, r7
 80126b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b8:	4770      	bx	lr

080126ba <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80126ba:	b480      	push	{r7}
 80126bc:	b087      	sub	sp, #28
 80126be:	af00      	add	r7, sp, #0
 80126c0:	6078      	str	r0, [r7, #4]
 80126c2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80126c4:	2300      	movs	r3, #0
 80126c6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80126c8:	2300      	movs	r3, #0
 80126ca:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	891b      	ldrh	r3, [r3, #8]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d101      	bne.n	80126d8 <CircularQueue_Sense+0x1e>
 80126d4:	2302      	movs	r3, #2
 80126d6:	e000      	b.n	80126da <CircularQueue_Sense+0x20>
 80126d8:	2300      	movs	r3, #0
 80126da:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80126dc:	2300      	movs	r3, #0
 80126de:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80126e0:	2300      	movs	r3, #0
 80126e2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	695b      	ldr	r3, [r3, #20]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f000 808e 	beq.w	801280a <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	68db      	ldr	r3, [r3, #12]
 80126f2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	891b      	ldrh	r3, [r3, #8]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d120      	bne.n	801273e <CircularQueue_Sense+0x84>
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	68db      	ldr	r3, [r3, #12]
 8012704:	4413      	add	r3, r2
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	4618      	mov	r0, r3
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681a      	ldr	r2, [r3, #0]
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	68db      	ldr	r3, [r3, #12]
 8012712:	1c59      	adds	r1, r3, #1
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	4299      	cmp	r1, r3
 801271a:	d306      	bcc.n	801272a <CircularQueue_Sense+0x70>
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	68d9      	ldr	r1, [r3, #12]
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	685b      	ldr	r3, [r3, #4]
 8012724:	1acb      	subs	r3, r1, r3
 8012726:	3301      	adds	r3, #1
 8012728:	e002      	b.n	8012730 <CircularQueue_Sense+0x76>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	3301      	adds	r3, #1
 8012730:	4413      	add	r3, r2
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	021b      	lsls	r3, r3, #8
 8012736:	b29b      	uxth	r3, r3
 8012738:	4403      	add	r3, r0
 801273a:	b29b      	uxth	r3, r3
 801273c:	e001      	b.n	8012742 <CircularQueue_Sense+0x88>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	891b      	ldrh	r3, [r3, #8]
 8012742:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012744:	687b      	ldr	r3, [r7, #4]
 8012746:	7f1b      	ldrb	r3, [r3, #28]
 8012748:	f003 0301 	and.w	r3, r3, #1
 801274c:	2b00      	cmp	r3, #0
 801274e:	d047      	beq.n	80127e0 <CircularQueue_Sense+0x126>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	7f1b      	ldrb	r3, [r3, #28]
 8012754:	f003 0302 	and.w	r3, r3, #2
 8012758:	2b00      	cmp	r3, #0
 801275a:	d141      	bne.n	80127e0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801275c:	8a7b      	ldrh	r3, [r7, #18]
 801275e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012762:	4293      	cmp	r3, r2
 8012764:	d103      	bne.n	801276e <CircularQueue_Sense+0xb4>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	891b      	ldrh	r3, [r3, #8]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d012      	beq.n	8012794 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	68da      	ldr	r2, [r3, #12]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012776:	429a      	cmp	r2, r3
 8012778:	d932      	bls.n	80127e0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	891b      	ldrh	r3, [r3, #8]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d02e      	beq.n	80127e0 <CircularQueue_Sense+0x126>
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	685a      	ldr	r2, [r3, #4]
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	68db      	ldr	r3, [r3, #12]
 801278a:	1ad3      	subs	r3, r2, r3
 801278c:	687a      	ldr	r2, [r7, #4]
 801278e:	8912      	ldrh	r2, [r2, #8]
 8012790:	4293      	cmp	r3, r2
 8012792:	d225      	bcs.n	80127e0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8012794:	2300      	movs	r3, #0
 8012796:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	891b      	ldrh	r3, [r3, #8]
 801279c:	2b00      	cmp	r3, #0
 801279e:	d11c      	bne.n	80127da <CircularQueue_Sense+0x120>
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	4413      	add	r3, r2
 80127a8:	781b      	ldrb	r3, [r3, #0]
 80127aa:	4618      	mov	r0, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	681a      	ldr	r2, [r3, #0]
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	1c59      	adds	r1, r3, #1
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	685b      	ldr	r3, [r3, #4]
 80127b8:	4299      	cmp	r1, r3
 80127ba:	d305      	bcc.n	80127c8 <CircularQueue_Sense+0x10e>
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	685b      	ldr	r3, [r3, #4]
 80127c0:	68f9      	ldr	r1, [r7, #12]
 80127c2:	1acb      	subs	r3, r1, r3
 80127c4:	3301      	adds	r3, #1
 80127c6:	e001      	b.n	80127cc <CircularQueue_Sense+0x112>
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	3301      	adds	r3, #1
 80127cc:	4413      	add	r3, r2
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	021b      	lsls	r3, r3, #8
 80127d2:	b29b      	uxth	r3, r3
 80127d4:	4403      	add	r3, r0
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	e001      	b.n	80127de <CircularQueue_Sense+0x124>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	891b      	ldrh	r3, [r3, #8]
 80127de:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	7af9      	ldrb	r1, [r7, #11]
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	4419      	add	r1, r3
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	685b      	ldr	r3, [r3, #4]
 80127ee:	4299      	cmp	r1, r3
 80127f0:	d306      	bcc.n	8012800 <CircularQueue_Sense+0x146>
 80127f2:	7af9      	ldrb	r1, [r7, #11]
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	4419      	add	r1, r3
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	685b      	ldr	r3, [r3, #4]
 80127fc:	1acb      	subs	r3, r1, r3
 80127fe:	e002      	b.n	8012806 <CircularQueue_Sense+0x14c>
 8012800:	7af9      	ldrb	r1, [r7, #11]
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	440b      	add	r3, r1
 8012806:	4413      	add	r3, r2
 8012808:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d002      	beq.n	8012816 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8012810:	683b      	ldr	r3, [r7, #0]
 8012812:	8a7a      	ldrh	r2, [r7, #18]
 8012814:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8012816:	697b      	ldr	r3, [r7, #20]
}
 8012818:	4618      	mov	r0, r3
 801281a:	371c      	adds	r7, #28
 801281c:	46bd      	mov	sp, r7
 801281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012822:	4770      	bx	lr

08012824 <__NVIC_SystemReset>:
{
 8012824:	b480      	push	{r7}
 8012826:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8012828:	f3bf 8f4f 	dsb	sy
}
 801282c:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801282e:	4b06      	ldr	r3, [pc, #24]	@ (8012848 <__NVIC_SystemReset+0x24>)
 8012830:	68db      	ldr	r3, [r3, #12]
 8012832:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012836:	4904      	ldr	r1, [pc, #16]	@ (8012848 <__NVIC_SystemReset+0x24>)
 8012838:	4b04      	ldr	r3, [pc, #16]	@ (801284c <__NVIC_SystemReset+0x28>)
 801283a:	4313      	orrs	r3, r2
 801283c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801283e:	f3bf 8f4f 	dsb	sy
}
 8012842:	bf00      	nop
    __NOP();
 8012844:	bf00      	nop
 8012846:	e7fd      	b.n	8012844 <__NVIC_SystemReset+0x20>
 8012848:	e000ed00 	.word	0xe000ed00
 801284c:	05fa0004 	.word	0x05fa0004

08012850 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8012850:	b480      	push	{r7}
 8012852:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8012854:	4b03      	ldr	r3, [pc, #12]	@ (8012864 <LL_FLASH_GetUDN+0x14>)
 8012856:	681b      	ldr	r3, [r3, #0]
}
 8012858:	4618      	mov	r0, r3
 801285a:	46bd      	mov	sp, r7
 801285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012860:	4770      	bx	lr
 8012862:	bf00      	nop
 8012864:	1fff7580 	.word	0x1fff7580

08012868 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8012868:	b480      	push	{r7}
 801286a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 801286c:	4b03      	ldr	r3, [pc, #12]	@ (801287c <LL_FLASH_GetDeviceID+0x14>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	b2db      	uxtb	r3, r3
}
 8012872:	4618      	mov	r0, r3
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr
 801287c:	1fff7584 	.word	0x1fff7584

08012880 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8012880:	b480      	push	{r7}
 8012882:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8012884:	4b03      	ldr	r3, [pc, #12]	@ (8012894 <LL_FLASH_GetSTCompanyID+0x14>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	0a1b      	lsrs	r3, r3, #8
}
 801288a:	4618      	mov	r0, r3
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	1fff7584 	.word	0x1fff7584

08012898 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8012898:	b5b0      	push	{r4, r5, r7, lr}
 801289a:	b090      	sub	sp, #64	@ 0x40
 801289c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801289e:	2392      	movs	r3, #146	@ 0x92
 80128a0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ALL_TASK, UTIL_SEQ_RFU, ALL_SENs_Task);
 80128a4:	4a4d      	ldr	r2, [pc, #308]	@ (80129dc <APP_BLE_Init+0x144>)
 80128a6:	2100      	movs	r1, #0
 80128a8:	2020      	movs	r0, #32
 80128aa:	f002 ff5f 	bl	801576c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ACC_TASK, UTIL_SEQ_RFU, ACCEL_Task);
 80128ae:	4a4c      	ldr	r2, [pc, #304]	@ (80129e0 <APP_BLE_Init+0x148>)
 80128b0:	2100      	movs	r1, #0
 80128b2:	2008      	movs	r0, #8
 80128b4:	f002 ff5a 	bl	801576c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80128b8:	4b4a      	ldr	r3, [pc, #296]	@ (80129e4 <APP_BLE_Init+0x14c>)
 80128ba:	1d3c      	adds	r4, r7, #4
 80128bc:	461d      	mov	r5, r3
 80128be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80128c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80128ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80128ce:	c403      	stmia	r4!, {r0, r1}
 80128d0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80128d2:	f000 fbfb 	bl	80130cc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80128d6:	2101      	movs	r1, #1
 80128d8:	2002      	movs	r0, #2
 80128da:	f002 fe1b 	bl	8015514 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80128de:	4a42      	ldr	r2, [pc, #264]	@ (80129e8 <APP_BLE_Init+0x150>)
 80128e0:	2100      	movs	r1, #0
 80128e2:	2004      	movs	r0, #4
 80128e4:	f002 ff42 	bl	801576c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80128e8:	1d3b      	adds	r3, r7, #4
 80128ea:	4618      	mov	r0, r3
 80128ec:	f7fe fc14 	bl	8011118 <SHCI_C2_BLE_Init>
 80128f0:	4603      	mov	r3, r0
 80128f2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 80128f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d012      	beq.n	8012924 <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80128fe:	483b      	ldr	r0, [pc, #236]	@ (80129ec <APP_BLE_Init+0x154>)
 8012900:	f7ff fa18 	bl	8011d34 <DbgTraceGetFileName>
 8012904:	4601      	mov	r1, r0
 8012906:	f240 1375 	movw	r3, #373	@ 0x175
 801290a:	4a39      	ldr	r2, [pc, #228]	@ (80129f0 <APP_BLE_Init+0x158>)
 801290c:	4839      	ldr	r0, [pc, #228]	@ (80129f4 <APP_BLE_Init+0x15c>)
 801290e:	f003 f90d 	bl	8015b2c <iprintf>
 8012912:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8012916:	4619      	mov	r1, r3
 8012918:	4837      	ldr	r0, [pc, #220]	@ (80129f8 <APP_BLE_Init+0x160>)
 801291a:	f003 f907 	bl	8015b2c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 801291e:	f7f1 feb9 	bl	8004694 <Error_Handler>
 8012922:	e00c      	b.n	801293e <APP_BLE_Init+0xa6>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8012924:	4831      	ldr	r0, [pc, #196]	@ (80129ec <APP_BLE_Init+0x154>)
 8012926:	f7ff fa05 	bl	8011d34 <DbgTraceGetFileName>
 801292a:	4601      	mov	r1, r0
 801292c:	f240 137b 	movw	r3, #379	@ 0x17b
 8012930:	4a2f      	ldr	r2, [pc, #188]	@ (80129f0 <APP_BLE_Init+0x158>)
 8012932:	4830      	ldr	r0, [pc, #192]	@ (80129f4 <APP_BLE_Init+0x15c>)
 8012934:	f003 f8fa 	bl	8015b2c <iprintf>
 8012938:	4830      	ldr	r0, [pc, #192]	@ (80129fc <APP_BLE_Init+0x164>)
 801293a:	f003 f8f7 	bl	8015b2c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 801293e:	f000 fbdb 	bl	80130f8 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8012942:	f7fe fb43 	bl	8010fcc <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012946:	4b2e      	ldr	r3, [pc, #184]	@ (8012a00 <APP_BLE_Init+0x168>)
 8012948:	2200      	movs	r2, #0
 801294a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 801294e:	4b2c      	ldr	r3, [pc, #176]	@ (8012a00 <APP_BLE_Init+0x168>)
 8012950:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012954:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8012956:	4a2b      	ldr	r2, [pc, #172]	@ (8012a04 <APP_BLE_Init+0x16c>)
 8012958:	2100      	movs	r1, #0
 801295a:	2001      	movs	r0, #1
 801295c:	f002 ff06 	bl	801576c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8012960:	2006      	movs	r0, #6
 8012962:	f7fe f908 	bl	8010b76 <aci_hal_set_radio_activity_mask>
 8012966:	4603      	mov	r3, r0
 8012968:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 801296c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012970:	2b00      	cmp	r3, #0
 8012972:	d010      	beq.n	8012996 <APP_BLE_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8012974:	481d      	ldr	r0, [pc, #116]	@ (80129ec <APP_BLE_Init+0x154>)
 8012976:	f7ff f9dd 	bl	8011d34 <DbgTraceGetFileName>
 801297a:	4601      	mov	r1, r0
 801297c:	f240 139f 	movw	r3, #415	@ 0x19f
 8012980:	4a1b      	ldr	r2, [pc, #108]	@ (80129f0 <APP_BLE_Init+0x158>)
 8012982:	481c      	ldr	r0, [pc, #112]	@ (80129f4 <APP_BLE_Init+0x15c>)
 8012984:	f003 f8d2 	bl	8015b2c <iprintf>
 8012988:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801298c:	4619      	mov	r1, r3
 801298e:	481e      	ldr	r0, [pc, #120]	@ (8012a08 <APP_BLE_Init+0x170>)
 8012990:	f003 f8cc 	bl	8015b2c <iprintf>
 8012994:	e00c      	b.n	80129b0 <APP_BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8012996:	4815      	ldr	r0, [pc, #84]	@ (80129ec <APP_BLE_Init+0x154>)
 8012998:	f7ff f9cc 	bl	8011d34 <DbgTraceGetFileName>
 801299c:	4601      	mov	r1, r0
 801299e:	f240 13a3 	movw	r3, #419	@ 0x1a3
 80129a2:	4a13      	ldr	r2, [pc, #76]	@ (80129f0 <APP_BLE_Init+0x158>)
 80129a4:	4813      	ldr	r0, [pc, #76]	@ (80129f4 <APP_BLE_Init+0x15c>)
 80129a6:	f003 f8c1 	bl	8015b2c <iprintf>
 80129aa:	4818      	ldr	r0, [pc, #96]	@ (8012a0c <APP_BLE_Init+0x174>)
 80129ac:	f003 f8be 	bl	8015b2c <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 80129b0:	4b17      	ldr	r3, [pc, #92]	@ (8012a10 <APP_BLE_Init+0x178>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 80129b6:	4b17      	ldr	r3, [pc, #92]	@ (8012a14 <APP_BLE_Init+0x17c>)
 80129b8:	2201      	movs	r2, #1
 80129ba:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80129bc:	f001 f916 	bl	8013bec <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80129c0:	4b0f      	ldr	r3, [pc, #60]	@ (8012a00 <APP_BLE_Init+0x168>)
 80129c2:	2200      	movs	r2, #0
 80129c4:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80129c6:	4b0e      	ldr	r3, [pc, #56]	@ (8012a00 <APP_BLE_Init+0x168>)
 80129c8:	2200      	movs	r2, #0
 80129ca:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80129cc:	2001      	movs	r0, #1
 80129ce:	f000 fe27 	bl	8013620 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80129d2:	bf00      	nop
}
 80129d4:	3740      	adds	r7, #64	@ 0x40
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bdb0      	pop	{r4, r5, r7, pc}
 80129da:	bf00      	nop
 80129dc:	08013ac5 	.word	0x08013ac5
 80129e0:	08013af9 	.word	0x08013af9
 80129e4:	080183d4 	.word	0x080183d4
 80129e8:	08011335 	.word	0x08011335
 80129ec:	080182c8 	.word	0x080182c8
 80129f0:	08019ca4 	.word	0x08019ca4
 80129f4:	080182e4 	.word	0x080182e4
 80129f8:	080182f8 	.word	0x080182f8
 80129fc:	08018330 	.word	0x08018330
 8012a00:	200019f4 	.word	0x200019f4
 8012a04:	080137a5 	.word	0x080137a5
 8012a08:	08018358 	.word	0x08018358
 8012a0c:	0801839c 	.word	0x0801839c
 8012a10:	20001a7c 	.word	0x20001a7c
 8012a14:	20001a7d 	.word	0x20001a7d

08012a18 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8012a18:	b5b0      	push	{r4, r5, r7, lr}
 8012a1a:	b090      	sub	sp, #64	@ 0x40
 8012a1c:	af04      	add	r7, sp, #16
 8012a1e:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8012a20:	2392      	movs	r3, #146	@ 0x92
 8012a22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	3301      	adds	r3, #1
 8012a2a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (p_event_pckt->evt)
 8012a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a2e:	781b      	ldrb	r3, [r3, #0]
 8012a30:	2bff      	cmp	r3, #255	@ 0xff
 8012a32:	f000 81a5 	beq.w	8012d80 <SVCCTL_App_Notification+0x368>
 8012a36:	2bff      	cmp	r3, #255	@ 0xff
 8012a38:	f300 8313 	bgt.w	8013062 <SVCCTL_App_Notification+0x64a>
 8012a3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a3e:	d077      	beq.n	8012b30 <SVCCTL_App_Notification+0x118>
 8012a40:	2b3e      	cmp	r3, #62	@ 0x3e
 8012a42:	f300 830e 	bgt.w	8013062 <SVCCTL_App_Notification+0x64a>
 8012a46:	2b05      	cmp	r3, #5
 8012a48:	d002      	beq.n	8012a50 <SVCCTL_App_Notification+0x38>
 8012a4a:	2b10      	cmp	r3, #16
 8012a4c:	d04f      	beq.n	8012aee <SVCCTL_App_Notification+0xd6>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8012a4e:	e308      	b.n	8013062 <SVCCTL_App_Notification+0x64a>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8012a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012a52:	3302      	adds	r3, #2
 8012a54:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8012a56:	68bb      	ldr	r3, [r7, #8]
 8012a58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	4bb6      	ldr	r3, [pc, #728]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012a60:	8adb      	ldrh	r3, [r3, #22]
 8012a62:	429a      	cmp	r2, r3
 8012a64:	d132      	bne.n	8012acc <SVCCTL_App_Notification+0xb4>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8012a66:	4bb4      	ldr	r3, [pc, #720]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012a68:	2200      	movs	r2, #0
 8012a6a:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8012a6c:	4bb2      	ldr	r3, [pc, #712]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012a6e:	2200      	movs	r2, #0
 8012a70:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8012a74:	48b1      	ldr	r0, [pc, #708]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012a76:	f7ff f95d 	bl	8011d34 <DbgTraceGetFileName>
 8012a7a:	4601      	mov	r1, r0
 8012a7c:	f240 13e7 	movw	r3, #487	@ 0x1e7
 8012a80:	4aaf      	ldr	r2, [pc, #700]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012a82:	48b0      	ldr	r0, [pc, #704]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012a84:	f003 f852 	bl	8015b2c <iprintf>
 8012a88:	48af      	ldr	r0, [pc, #700]	@ (8012d48 <SVCCTL_App_Notification+0x330>)
 8012a8a:	f003 f8bf 	bl	8015c0c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8012a8e:	48ab      	ldr	r0, [pc, #684]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012a90:	f7ff f950 	bl	8011d34 <DbgTraceGetFileName>
 8012a94:	4601      	mov	r1, r0
 8012a96:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8012a9a:	4aa9      	ldr	r2, [pc, #676]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012a9c:	48a9      	ldr	r0, [pc, #676]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012a9e:	f003 f845 	bl	8015b2c <iprintf>
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012aa8:	b29b      	uxth	r3, r3
 8012aaa:	4619      	mov	r1, r3
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	78db      	ldrb	r3, [r3, #3]
 8012ab0:	461a      	mov	r2, r3
 8012ab2:	48a6      	ldr	r0, [pc, #664]	@ (8012d4c <SVCCTL_App_Notification+0x334>)
 8012ab4:	f003 f83a 	bl	8015b2c <iprintf>
        tsBle.Connected = false;
 8012ab8:	4ba5      	ldr	r3, [pc, #660]	@ (8012d50 <SVCCTL_App_Notification+0x338>)
 8012aba:	2200      	movs	r2, #0
 8012abc:	701a      	strb	r2, [r3, #0]
			APP_BLE_Init();
 8012abe:	f7ff feeb 	bl	8012898 <APP_BLE_Init>
			HAL_Delay(250);
 8012ac2:	20fa      	movs	r0, #250	@ 0xfa
 8012ac4:	f7f0 f868 	bl	8002b98 <HAL_Delay>
			NVIC_SystemReset();
 8012ac8:	f7ff feac 	bl	8012824 <__NVIC_SystemReset>
      Adv_Request(APP_BLE_FAST_ADV);
 8012acc:	2001      	movs	r0, #1
 8012ace:	f000 fda7 	bl	8013620 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8012ad2:	4ba0      	ldr	r3, [pc, #640]	@ (8012d54 <SVCCTL_App_Notification+0x33c>)
 8012ad4:	2201      	movs	r2, #1
 8012ad6:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012ad8:	4b97      	ldr	r3, [pc, #604]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012ada:	8ada      	ldrh	r2, [r3, #22]
 8012adc:	4b9d      	ldr	r3, [pc, #628]	@ (8012d54 <SVCCTL_App_Notification+0x33c>)
 8012ade:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8012ae0:	489c      	ldr	r0, [pc, #624]	@ (8012d54 <SVCCTL_App_Notification+0x33c>)
 8012ae2:	f001 f86f 	bl	8013bc4 <Custom_APP_Notification>
      tsCmd.LED = false;
 8012ae6:	4b9c      	ldr	r3, [pc, #624]	@ (8012d58 <SVCCTL_App_Notification+0x340>)
 8012ae8:	2200      	movs	r2, #0
 8012aea:	75da      	strb	r2, [r3, #23]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8012aec:	e2bc      	b.n	8013068 <SVCCTL_App_Notification+0x650>
      p_hardware_error_event = (hci_hardware_error_event_rp0 *)p_event_pckt->data;
 8012aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af0:	3302      	adds	r3, #2
 8012af2:	60fb      	str	r3, [r7, #12]
      APP_DBG_MSG(">>== HCI_HARDWARE_ERROR_EVT_CODE\n");
 8012af4:	4891      	ldr	r0, [pc, #580]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012af6:	f7ff f91d 	bl	8011d34 <DbgTraceGetFileName>
 8012afa:	4601      	mov	r1, r0
 8012afc:	f240 231a 	movw	r3, #538	@ 0x21a
 8012b00:	4a8f      	ldr	r2, [pc, #572]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012b02:	4890      	ldr	r0, [pc, #576]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012b04:	f003 f812 	bl	8015b2c <iprintf>
 8012b08:	4894      	ldr	r0, [pc, #592]	@ (8012d5c <SVCCTL_App_Notification+0x344>)
 8012b0a:	f003 f87f 	bl	8015c0c <puts>
      APP_DBG_MSG("Hardware Code = 0x%02X\n",p_hardware_error_event->Hardware_Code);
 8012b0e:	488b      	ldr	r0, [pc, #556]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012b10:	f7ff f910 	bl	8011d34 <DbgTraceGetFileName>
 8012b14:	4601      	mov	r1, r0
 8012b16:	f240 231b 	movw	r3, #539	@ 0x21b
 8012b1a:	4a89      	ldr	r2, [pc, #548]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012b1c:	4889      	ldr	r0, [pc, #548]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012b1e:	f003 f805 	bl	8015b2c <iprintf>
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	4619      	mov	r1, r3
 8012b28:	488d      	ldr	r0, [pc, #564]	@ (8012d60 <SVCCTL_App_Notification+0x348>)
 8012b2a:	f002 ffff 	bl	8015b2c <iprintf>
      break; /* HCI_HARDWARE_ERROR_EVT_CODE */
 8012b2e:	e29b      	b.n	8013068 <SVCCTL_App_Notification+0x650>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8012b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b32:	3302      	adds	r3, #2
 8012b34:	61bb      	str	r3, [r7, #24]
      switch (p_meta_evt->subevent)
 8012b36:	69bb      	ldr	r3, [r7, #24]
 8012b38:	781b      	ldrb	r3, [r3, #0]
 8012b3a:	2b01      	cmp	r3, #1
 8012b3c:	d06a      	beq.n	8012c14 <SVCCTL_App_Notification+0x1fc>
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	f040 80f7 	bne.w	8012d32 <SVCCTL_App_Notification+0x31a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8012b44:	69bb      	ldr	r3, [r7, #24]
 8012b46:	3301      	adds	r3, #1
 8012b48:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8012b4a:	487c      	ldr	r0, [pc, #496]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012b4c:	f7ff f8f2 	bl	8011d34 <DbgTraceGetFileName>
 8012b50:	4601      	mov	r1, r0
 8012b52:	f240 232d 	movw	r3, #557	@ 0x22d
 8012b56:	4a7a      	ldr	r2, [pc, #488]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012b58:	487a      	ldr	r0, [pc, #488]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012b5a:	f002 ffe7 	bl	8015b2c <iprintf>
 8012b5e:	4881      	ldr	r0, [pc, #516]	@ (8012d64 <SVCCTL_App_Notification+0x34c>)
 8012b60:	f003 f854 	bl	8015c0c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8012b64:	4875      	ldr	r0, [pc, #468]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012b66:	f7ff f8e5 	bl	8011d34 <DbgTraceGetFileName>
 8012b6a:	4601      	mov	r1, r0
 8012b6c:	f240 232e 	movw	r3, #558	@ 0x22e
 8012b70:	4a73      	ldr	r2, [pc, #460]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012b72:	4874      	ldr	r0, [pc, #464]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012b74:	f002 ffda 	bl	8015b2c <iprintf>
 8012b78:	697b      	ldr	r3, [r7, #20]
 8012b7a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	4618      	mov	r0, r3
 8012b82:	f7ed fca7 	bl	80004d4 <__aeabi_i2d>
 8012b86:	f04f 0200 	mov.w	r2, #0
 8012b8a:	4b77      	ldr	r3, [pc, #476]	@ (8012d68 <SVCCTL_App_Notification+0x350>)
 8012b8c:	f7ed fd0c 	bl	80005a8 <__aeabi_dmul>
 8012b90:	4602      	mov	r2, r0
 8012b92:	460b      	mov	r3, r1
 8012b94:	4610      	mov	r0, r2
 8012b96:	4619      	mov	r1, r3
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	461c      	mov	r4, r3
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8012ba8:	b29b      	uxth	r3, r3
 8012baa:	461a      	mov	r2, r3
 8012bac:	4613      	mov	r3, r2
 8012bae:	009b      	lsls	r3, r3, #2
 8012bb0:	4413      	add	r3, r2
 8012bb2:	005b      	lsls	r3, r3, #1
 8012bb4:	9301      	str	r3, [sp, #4]
 8012bb6:	9400      	str	r4, [sp, #0]
 8012bb8:	4602      	mov	r2, r0
 8012bba:	460b      	mov	r3, r1
 8012bbc:	486b      	ldr	r0, [pc, #428]	@ (8012d6c <SVCCTL_App_Notification+0x354>)
 8012bbe:	f002 ffb5 	bl	8015b2c <iprintf>
          DIAG(" BLE Debug ->\t>>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8012bc2:	486b      	ldr	r0, [pc, #428]	@ (8012d70 <SVCCTL_App_Notification+0x358>)
 8012bc4:	f7f0 f884 	bl	8002cd0 <DIAG>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8012bce:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012bd0:	4618      	mov	r0, r3
 8012bd2:	f7ed fc7f 	bl	80004d4 <__aeabi_i2d>
 8012bd6:	f04f 0200 	mov.w	r2, #0
 8012bda:	4b63      	ldr	r3, [pc, #396]	@ (8012d68 <SVCCTL_App_Notification+0x350>)
 8012bdc:	f7ed fce4 	bl	80005a8 <__aeabi_dmul>
 8012be0:	4602      	mov	r2, r0
 8012be2:	460b      	mov	r3, r1
 8012be4:	4610      	mov	r0, r2
 8012be6:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8012bee:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012bf0:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 8012bf2:	697b      	ldr	r3, [r7, #20]
 8012bf4:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8012bf8:	b29b      	uxth	r3, r3
 8012bfa:	461a      	mov	r2, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8012bfc:	4613      	mov	r3, r2
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4413      	add	r3, r2
 8012c02:	005b      	lsls	r3, r3, #1
 8012c04:	9301      	str	r3, [sp, #4]
 8012c06:	9400      	str	r4, [sp, #0]
 8012c08:	4602      	mov	r2, r0
 8012c0a:	460b      	mov	r3, r1
 8012c0c:	4859      	ldr	r0, [pc, #356]	@ (8012d74 <SVCCTL_App_Notification+0x35c>)
 8012c0e:	f7f0 f85f 	bl	8002cd0 <DIAG>
          break;
 8012c12:	e08f      	b.n	8012d34 <SVCCTL_App_Notification+0x31c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8012c14:	69bb      	ldr	r3, [r7, #24]
 8012c16:	3301      	adds	r3, #1
 8012c18:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8012c1a:	4848      	ldr	r0, [pc, #288]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012c1c:	f7ff f88a 	bl	8011d34 <DbgTraceGetFileName>
 8012c20:	4601      	mov	r1, r0
 8012c22:	f240 234b 	movw	r3, #587	@ 0x24b
 8012c26:	4a46      	ldr	r2, [pc, #280]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012c28:	4846      	ldr	r0, [pc, #280]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012c2a:	f002 ff7f 	bl	8015b2c <iprintf>
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012c34:	b29b      	uxth	r3, r3
 8012c36:	4619      	mov	r1, r3
 8012c38:	484f      	ldr	r0, [pc, #316]	@ (8012d78 <SVCCTL_App_Notification+0x360>)
 8012c3a:	f002 ff77 	bl	8015b2c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8012c3e:	483f      	ldr	r0, [pc, #252]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012c40:	f7ff f878 	bl	8011d34 <DbgTraceGetFileName>
 8012c44:	4601      	mov	r1, r0
 8012c46:	f44f 7313 	mov.w	r3, #588	@ 0x24c
 8012c4a:	4a3d      	ldr	r2, [pc, #244]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012c4c:	483d      	ldr	r0, [pc, #244]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012c4e:	f002 ff6d 	bl	8015b2c <iprintf>
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	7a9b      	ldrb	r3, [r3, #10]
 8012c56:	4618      	mov	r0, r3
 8012c58:	693b      	ldr	r3, [r7, #16]
 8012c5a:	7a5b      	ldrb	r3, [r3, #9]
 8012c5c:	461c      	mov	r4, r3
 8012c5e:	693b      	ldr	r3, [r7, #16]
 8012c60:	7a1b      	ldrb	r3, [r3, #8]
 8012c62:	461d      	mov	r5, r3
 8012c64:	693b      	ldr	r3, [r7, #16]
 8012c66:	79db      	ldrb	r3, [r3, #7]
 8012c68:	461a      	mov	r2, r3
 8012c6a:	693b      	ldr	r3, [r7, #16]
 8012c6c:	799b      	ldrb	r3, [r3, #6]
 8012c6e:	4619      	mov	r1, r3
 8012c70:	693b      	ldr	r3, [r7, #16]
 8012c72:	795b      	ldrb	r3, [r3, #5]
 8012c74:	9302      	str	r3, [sp, #8]
 8012c76:	9101      	str	r1, [sp, #4]
 8012c78:	9200      	str	r2, [sp, #0]
 8012c7a:	462b      	mov	r3, r5
 8012c7c:	4622      	mov	r2, r4
 8012c7e:	4601      	mov	r1, r0
 8012c80:	483e      	ldr	r0, [pc, #248]	@ (8012d7c <SVCCTL_App_Notification+0x364>)
 8012c82:	f002 ff53 	bl	8015b2c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8012c86:	482d      	ldr	r0, [pc, #180]	@ (8012d3c <SVCCTL_App_Notification+0x324>)
 8012c88:	f7ff f854 	bl	8011d34 <DbgTraceGetFileName>
 8012c8c:	4601      	mov	r1, r0
 8012c8e:	f240 2353 	movw	r3, #595	@ 0x253
 8012c92:	4a2b      	ldr	r2, [pc, #172]	@ (8012d40 <SVCCTL_App_Notification+0x328>)
 8012c94:	482b      	ldr	r0, [pc, #172]	@ (8012d44 <SVCCTL_App_Notification+0x32c>)
 8012c96:	f002 ff49 	bl	8015b2c <iprintf>
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8012ca0:	b29b      	uxth	r3, r3
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	f7ed fc16 	bl	80004d4 <__aeabi_i2d>
 8012ca8:	f04f 0200 	mov.w	r2, #0
 8012cac:	4b2e      	ldr	r3, [pc, #184]	@ (8012d68 <SVCCTL_App_Notification+0x350>)
 8012cae:	f7ed fc7b 	bl	80005a8 <__aeabi_dmul>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	460b      	mov	r3, r1
 8012cb6:	4610      	mov	r0, r2
 8012cb8:	4619      	mov	r1, r3
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8012cc0:	b29b      	uxth	r3, r3
 8012cc2:	461c      	mov	r4, r3
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8012cca:	b29b      	uxth	r3, r3
 8012ccc:	461a      	mov	r2, r3
 8012cce:	4613      	mov	r3, r2
 8012cd0:	009b      	lsls	r3, r3, #2
 8012cd2:	4413      	add	r3, r2
 8012cd4:	005b      	lsls	r3, r3, #1
 8012cd6:	9301      	str	r3, [sp, #4]
 8012cd8:	9400      	str	r4, [sp, #0]
 8012cda:	4602      	mov	r2, r0
 8012cdc:	460b      	mov	r3, r1
 8012cde:	4823      	ldr	r0, [pc, #140]	@ (8012d6c <SVCCTL_App_Notification+0x354>)
 8012ce0:	f002 ff24 	bl	8015b2c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8012ce4:	4b14      	ldr	r3, [pc, #80]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012ce6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012cea:	2b04      	cmp	r3, #4
 8012cec:	d104      	bne.n	8012cf8 <SVCCTL_App_Notification+0x2e0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8012cee:	4b12      	ldr	r3, [pc, #72]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012cf0:	2206      	movs	r2, #6
 8012cf2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8012cf6:	e003      	b.n	8012d00 <SVCCTL_App_Notification+0x2e8>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8012cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012cfa:	2205      	movs	r2, #5
 8012cfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8012d00:	693b      	ldr	r3, [r7, #16]
 8012d02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	4b0b      	ldr	r3, [pc, #44]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012d0a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8012d0c:	4b11      	ldr	r3, [pc, #68]	@ (8012d54 <SVCCTL_App_Notification+0x33c>)
 8012d0e:	2200      	movs	r2, #0
 8012d10:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8012d12:	4b09      	ldr	r3, [pc, #36]	@ (8012d38 <SVCCTL_App_Notification+0x320>)
 8012d14:	8ada      	ldrh	r2, [r3, #22]
 8012d16:	4b0f      	ldr	r3, [pc, #60]	@ (8012d54 <SVCCTL_App_Notification+0x33c>)
 8012d18:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8012d1a:	480e      	ldr	r0, [pc, #56]	@ (8012d54 <SVCCTL_App_Notification+0x33c>)
 8012d1c:	f000 ff52 	bl	8013bc4 <Custom_APP_Notification>
          tsBle.Connected = true;
 8012d20:	4b0b      	ldr	r3, [pc, #44]	@ (8012d50 <SVCCTL_App_Notification+0x338>)
 8012d22:	2201      	movs	r2, #1
 8012d24:	701a      	strb	r2, [r3, #0]
		          HAL_Delay (250);
 8012d26:	20fa      	movs	r0, #250	@ 0xfa
 8012d28:	f7ef ff36 	bl	8002b98 <HAL_Delay>
		          Connection_Interval_Update_Req();
 8012d2c:	f000 fe5a 	bl	80139e4 <Connection_Interval_Update_Req>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8012d30:	e000      	b.n	8012d34 <SVCCTL_App_Notification+0x31c>
          break;
 8012d32:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8012d34:	e198      	b.n	8013068 <SVCCTL_App_Notification+0x650>
 8012d36:	bf00      	nop
 8012d38:	200019f4 	.word	0x200019f4
 8012d3c:	080182c8 	.word	0x080182c8
 8012d40:	08019cb4 	.word	0x08019cb4
 8012d44:	080182e4 	.word	0x080182e4
 8012d48:	08018410 	.word	0x08018410
 8012d4c:	0801843c 	.word	0x0801843c
 8012d50:	200019dc 	.word	0x200019dc
 8012d54:	20001a78 	.word	0x20001a78
 8012d58:	20001638 	.word	0x20001638
 8012d5c:	08018478 	.word	0x08018478
 8012d60:	0801849c 	.word	0x0801849c
 8012d64:	080184b4 	.word	0x080184b4
 8012d68:	3ff40000 	.word	0x3ff40000
 8012d6c:	080184e8 	.word	0x080184e8
 8012d70:	08018554 	.word	0x08018554
 8012d74:	08018598 	.word	0x08018598
 8012d78:	080185f8 	.word	0x080185f8
 8012d7c:	08018640 	.word	0x08018640
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8012d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d82:	3302      	adds	r3, #2
 8012d84:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (p_blecore_evt->ecode)
 8012d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d88:	881b      	ldrh	r3, [r3, #0]
 8012d8a:	b29b      	uxth	r3, r3
 8012d8c:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012d90:	4293      	cmp	r3, r2
 8012d92:	f000 8130 	beq.w	8012ff6 <SVCCTL_App_Notification+0x5de>
 8012d96:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	f300 8163 	bgt.w	8013066 <SVCCTL_App_Notification+0x64e>
 8012da0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012da4:	d02e      	beq.n	8012e04 <SVCCTL_App_Notification+0x3ec>
 8012da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8012daa:	f300 815c 	bgt.w	8013066 <SVCCTL_App_Notification+0x64e>
 8012dae:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012db2:	4293      	cmp	r3, r2
 8012db4:	f300 8157 	bgt.w	8013066 <SVCCTL_App_Notification+0x64e>
 8012db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8012dbc:	dc06      	bgt.n	8012dcc <SVCCTL_App_Notification+0x3b4>
 8012dbe:	2b04      	cmp	r3, #4
 8012dc0:	f000 814d 	beq.w	801305e <SVCCTL_App_Notification+0x646>
 8012dc4:	2b06      	cmp	r3, #6
 8012dc6:	f000 8129 	beq.w	801301c <SVCCTL_App_Notification+0x604>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8012dca:	e14c      	b.n	8013066 <SVCCTL_App_Notification+0x64e>
 8012dcc:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8012dd0:	2b09      	cmp	r3, #9
 8012dd2:	f200 8148 	bhi.w	8013066 <SVCCTL_App_Notification+0x64e>
 8012dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8012ddc <SVCCTL_App_Notification+0x3c4>)
 8012dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ddc:	08012f71 	.word	0x08012f71
 8012de0:	08012e45 	.word	0x08012e45
 8012de4:	08013067 	.word	0x08013067
 8012de8:	08013067 	.word	0x08013067
 8012dec:	08013067 	.word	0x08013067
 8012df0:	08013067 	.word	0x08013067
 8012df4:	08012e0d 	.word	0x08012e0d
 8012df8:	08013067 	.word	0x08013067
 8012dfc:	08012eb7 	.word	0x08012eb7
 8012e00:	08012e29 	.word	0x08012e29
          mutex = 1;
 8012e04:	4b9b      	ldr	r3, [pc, #620]	@ (8013074 <SVCCTL_App_Notification+0x65c>)
 8012e06:	2201      	movs	r2, #1
 8012e08:	701a      	strb	r2, [r3, #0]
          break;
 8012e0a:	e129      	b.n	8013060 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8012e0c:	489a      	ldr	r0, [pc, #616]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012e0e:	f7fe ff91 	bl	8011d34 <DbgTraceGetFileName>
 8012e12:	4601      	mov	r1, r0
 8012e14:	f240 23af 	movw	r3, #687	@ 0x2af
 8012e18:	4a98      	ldr	r2, [pc, #608]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012e1a:	4899      	ldr	r0, [pc, #612]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012e1c:	f002 fe86 	bl	8015b2c <iprintf>
 8012e20:	4898      	ldr	r0, [pc, #608]	@ (8013084 <SVCCTL_App_Notification+0x66c>)
 8012e22:	f002 fe83 	bl	8015b2c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8012e26:	e11b      	b.n	8013060 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8012e28:	4893      	ldr	r0, [pc, #588]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012e2a:	f7fe ff83 	bl	8011d34 <DbgTraceGetFileName>
 8012e2e:	4601      	mov	r1, r0
 8012e30:	f240 23bf 	movw	r3, #703	@ 0x2bf
 8012e34:	4a91      	ldr	r2, [pc, #580]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012e36:	4892      	ldr	r0, [pc, #584]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012e38:	f002 fe78 	bl	8015b2c <iprintf>
 8012e3c:	4892      	ldr	r0, [pc, #584]	@ (8013088 <SVCCTL_App_Notification+0x670>)
 8012e3e:	f002 fee5 	bl	8015c0c <puts>
          break;
 8012e42:	e10d      	b.n	8013060 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8012e44:	488c      	ldr	r0, [pc, #560]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012e46:	f7fe ff75 	bl	8011d34 <DbgTraceGetFileName>
 8012e4a:	4601      	mov	r1, r0
 8012e4c:	f240 23c6 	movw	r3, #710	@ 0x2c6
 8012e50:	4a8a      	ldr	r2, [pc, #552]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012e52:	488b      	ldr	r0, [pc, #556]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012e54:	f002 fe6a 	bl	8015b2c <iprintf>
 8012e58:	488c      	ldr	r0, [pc, #560]	@ (801308c <SVCCTL_App_Notification+0x674>)
 8012e5a:	f002 fed7 	bl	8015c0c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8012e5e:	4b8c      	ldr	r3, [pc, #560]	@ (8013090 <SVCCTL_App_Notification+0x678>)
 8012e60:	8adb      	ldrh	r3, [r3, #22]
 8012e62:	498c      	ldr	r1, [pc, #560]	@ (8013094 <SVCCTL_App_Notification+0x67c>)
 8012e64:	4618      	mov	r0, r3
 8012e66:	f7fd f833 	bl	800fed0 <aci_gap_pass_key_resp>
 8012e6a:	4603      	mov	r3, r0
 8012e6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8012e70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d010      	beq.n	8012e9a <SVCCTL_App_Notification+0x482>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8012e78:	487f      	ldr	r0, [pc, #508]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012e7a:	f7fe ff5b 	bl	8011d34 <DbgTraceGetFileName>
 8012e7e:	4601      	mov	r1, r0
 8012e80:	f240 23cb 	movw	r3, #715	@ 0x2cb
 8012e84:	4a7d      	ldr	r2, [pc, #500]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012e86:	487e      	ldr	r0, [pc, #504]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012e88:	f002 fe50 	bl	8015b2c <iprintf>
 8012e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012e90:	4619      	mov	r1, r3
 8012e92:	4881      	ldr	r0, [pc, #516]	@ (8013098 <SVCCTL_App_Notification+0x680>)
 8012e94:	f002 fe4a 	bl	8015b2c <iprintf>
          break;
 8012e98:	e0e2      	b.n	8013060 <SVCCTL_App_Notification+0x648>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8012e9a:	4877      	ldr	r0, [pc, #476]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012e9c:	f7fe ff4a 	bl	8011d34 <DbgTraceGetFileName>
 8012ea0:	4601      	mov	r1, r0
 8012ea2:	f240 23cf 	movw	r3, #719	@ 0x2cf
 8012ea6:	4a75      	ldr	r2, [pc, #468]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012ea8:	4875      	ldr	r0, [pc, #468]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012eaa:	f002 fe3f 	bl	8015b2c <iprintf>
 8012eae:	487b      	ldr	r0, [pc, #492]	@ (801309c <SVCCTL_App_Notification+0x684>)
 8012eb0:	f002 feac 	bl	8015c0c <puts>
          break;
 8012eb4:	e0d4      	b.n	8013060 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8012eb6:	4870      	ldr	r0, [pc, #448]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012eb8:	f7fe ff3c 	bl	8011d34 <DbgTraceGetFileName>
 8012ebc:	4601      	mov	r1, r0
 8012ebe:	f240 23d7 	movw	r3, #727	@ 0x2d7
 8012ec2:	4a6e      	ldr	r2, [pc, #440]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012ec4:	486e      	ldr	r0, [pc, #440]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012ec6:	f002 fe31 	bl	8015b2c <iprintf>
 8012eca:	4875      	ldr	r0, [pc, #468]	@ (80130a0 <SVCCTL_App_Notification+0x688>)
 8012ecc:	f002 fe9e 	bl	8015c0c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8012ed0:	4869      	ldr	r0, [pc, #420]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012ed2:	f7fe ff2f 	bl	8011d34 <DbgTraceGetFileName>
 8012ed6:	4601      	mov	r1, r0
 8012ed8:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8012edc:	4a67      	ldr	r2, [pc, #412]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012ede:	4868      	ldr	r0, [pc, #416]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012ee0:	f002 fe24 	bl	8015b2c <iprintf>
 8012ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ee6:	3302      	adds	r3, #2
 8012ee8:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012eec:	4619      	mov	r1, r3
 8012eee:	486d      	ldr	r0, [pc, #436]	@ (80130a4 <SVCCTL_App_Notification+0x68c>)
 8012ef0:	f002 fe1c 	bl	8015b2c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8012ef4:	4860      	ldr	r0, [pc, #384]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012ef6:	f7fe ff1d 	bl	8011d34 <DbgTraceGetFileName>
 8012efa:	4601      	mov	r1, r0
 8012efc:	f240 23da 	movw	r3, #730	@ 0x2da
 8012f00:	4a5e      	ldr	r2, [pc, #376]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012f02:	485f      	ldr	r0, [pc, #380]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012f04:	f002 fe12 	bl	8015b2c <iprintf>
 8012f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f0a:	3302      	adds	r3, #2
 8012f0c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8012f10:	4619      	mov	r1, r3
 8012f12:	4865      	ldr	r0, [pc, #404]	@ (80130a8 <SVCCTL_App_Notification+0x690>)
 8012f14:	f002 fe0a 	bl	8015b2c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8012f18:	4b5d      	ldr	r3, [pc, #372]	@ (8013090 <SVCCTL_App_Notification+0x678>)
 8012f1a:	8adb      	ldrh	r3, [r3, #22]
 8012f1c:	2101      	movs	r1, #1
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7fd f980 	bl	8010224 <aci_gap_numeric_comparison_value_confirm_yesno>
 8012f24:	4603      	mov	r3, r0
 8012f26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8012f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d010      	beq.n	8012f54 <SVCCTL_App_Notification+0x53c>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8012f32:	4851      	ldr	r0, [pc, #324]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012f34:	f7fe fefe 	bl	8011d34 <DbgTraceGetFileName>
 8012f38:	4601      	mov	r1, r0
 8012f3a:	f240 23df 	movw	r3, #735	@ 0x2df
 8012f3e:	4a4f      	ldr	r2, [pc, #316]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012f40:	484f      	ldr	r0, [pc, #316]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012f42:	f002 fdf3 	bl	8015b2c <iprintf>
 8012f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012f4a:	4619      	mov	r1, r3
 8012f4c:	4857      	ldr	r0, [pc, #348]	@ (80130ac <SVCCTL_App_Notification+0x694>)
 8012f4e:	f002 fded 	bl	8015b2c <iprintf>
          break;
 8012f52:	e085      	b.n	8013060 <SVCCTL_App_Notification+0x648>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8012f54:	4848      	ldr	r0, [pc, #288]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012f56:	f7fe feed 	bl	8011d34 <DbgTraceGetFileName>
 8012f5a:	4601      	mov	r1, r0
 8012f5c:	f240 23e3 	movw	r3, #739	@ 0x2e3
 8012f60:	4a46      	ldr	r2, [pc, #280]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012f62:	4847      	ldr	r0, [pc, #284]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012f64:	f002 fde2 	bl	8015b2c <iprintf>
 8012f68:	4851      	ldr	r0, [pc, #324]	@ (80130b0 <SVCCTL_App_Notification+0x698>)
 8012f6a:	f002 fe4f 	bl	8015c0c <puts>
          break;
 8012f6e:	e077      	b.n	8013060 <SVCCTL_App_Notification+0x648>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8012f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f72:	3302      	adds	r3, #2
 8012f74:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8012f76:	4840      	ldr	r0, [pc, #256]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012f78:	f7fe fedc 	bl	8011d34 <DbgTraceGetFileName>
 8012f7c:	4601      	mov	r1, r0
 8012f7e:	f240 23ed 	movw	r3, #749	@ 0x2ed
 8012f82:	4a3e      	ldr	r2, [pc, #248]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012f84:	483e      	ldr	r0, [pc, #248]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012f86:	f002 fdd1 	bl	8015b2c <iprintf>
 8012f8a:	484a      	ldr	r0, [pc, #296]	@ (80130b4 <SVCCTL_App_Notification+0x69c>)
 8012f8c:	f002 fe3e 	bl	8015c0c <puts>
          if (p_pairing_complete->Status != 0)
 8012f90:	6a3b      	ldr	r3, [r7, #32]
 8012f92:	789b      	ldrb	r3, [r3, #2]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d013      	beq.n	8012fc0 <SVCCTL_App_Notification+0x5a8>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8012f98:	4837      	ldr	r0, [pc, #220]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012f9a:	f7fe fecb 	bl	8011d34 <DbgTraceGetFileName>
 8012f9e:	4601      	mov	r1, r0
 8012fa0:	f44f 733c 	mov.w	r3, #752	@ 0x2f0
 8012fa4:	4a35      	ldr	r2, [pc, #212]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012fa6:	4836      	ldr	r0, [pc, #216]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012fa8:	f002 fdc0 	bl	8015b2c <iprintf>
 8012fac:	6a3b      	ldr	r3, [r7, #32]
 8012fae:	789b      	ldrb	r3, [r3, #2]
 8012fb0:	4619      	mov	r1, r3
 8012fb2:	6a3b      	ldr	r3, [r7, #32]
 8012fb4:	78db      	ldrb	r3, [r3, #3]
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	483f      	ldr	r0, [pc, #252]	@ (80130b8 <SVCCTL_App_Notification+0x6a0>)
 8012fba:	f002 fdb7 	bl	8015b2c <iprintf>
 8012fbe:	e00c      	b.n	8012fda <SVCCTL_App_Notification+0x5c2>
            APP_DBG_MSG("     - Pairing Success\n");
 8012fc0:	482d      	ldr	r0, [pc, #180]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012fc2:	f7fe feb7 	bl	8011d34 <DbgTraceGetFileName>
 8012fc6:	4601      	mov	r1, r0
 8012fc8:	f44f 733d 	mov.w	r3, #756	@ 0x2f4
 8012fcc:	4a2b      	ldr	r2, [pc, #172]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012fce:	482c      	ldr	r0, [pc, #176]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012fd0:	f002 fdac 	bl	8015b2c <iprintf>
 8012fd4:	4839      	ldr	r0, [pc, #228]	@ (80130bc <SVCCTL_App_Notification+0x6a4>)
 8012fd6:	f002 fe19 	bl	8015c0c <puts>
          APP_DBG_MSG("\n");
 8012fda:	4827      	ldr	r0, [pc, #156]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012fdc:	f7fe feaa 	bl	8011d34 <DbgTraceGetFileName>
 8012fe0:	4601      	mov	r1, r0
 8012fe2:	f240 23f6 	movw	r3, #758	@ 0x2f6
 8012fe6:	4a25      	ldr	r2, [pc, #148]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8012fe8:	4825      	ldr	r0, [pc, #148]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8012fea:	f002 fd9f 	bl	8015b2c <iprintf>
 8012fee:	200a      	movs	r0, #10
 8012ff0:	f002 fdae 	bl	8015b50 <putchar>
          break;
 8012ff4:	e034      	b.n	8013060 <SVCCTL_App_Notification+0x648>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8012ff6:	4820      	ldr	r0, [pc, #128]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8012ff8:	f7fe fe9c 	bl	8011d34 <DbgTraceGetFileName>
 8012ffc:	4601      	mov	r1, r0
 8012ffe:	f240 23ff 	movw	r3, #767	@ 0x2ff
 8013002:	4a1e      	ldr	r2, [pc, #120]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8013004:	481e      	ldr	r0, [pc, #120]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8013006:	f002 fd91 	bl	8015b2c <iprintf>
 801300a:	482d      	ldr	r0, [pc, #180]	@ (80130c0 <SVCCTL_App_Notification+0x6a8>)
 801300c:	f002 fd8e 	bl	8015b2c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8013010:	4b1f      	ldr	r3, [pc, #124]	@ (8013090 <SVCCTL_App_Notification+0x678>)
 8013012:	8adb      	ldrh	r3, [r3, #22]
 8013014:	4618      	mov	r0, r3
 8013016:	f7fd fc18 	bl	801084a <aci_gatt_confirm_indication>
        break;
 801301a:	e021      	b.n	8013060 <SVCCTL_App_Notification+0x648>
	      p_fw_error_event = (aci_hal_fw_error_event_rp0 *)p_blecore_evt->data;
 801301c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801301e:	3302      	adds	r3, #2
 8013020:	61fb      	str	r3, [r7, #28]
          APP_DBG_MSG(">>== ACI_HAL_FW_ERROR_VSEVT_CODE\n");
 8013022:	4815      	ldr	r0, [pc, #84]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 8013024:	f7fe fe86 	bl	8011d34 <DbgTraceGetFileName>
 8013028:	4601      	mov	r1, r0
 801302a:	f240 330a 	movw	r3, #778	@ 0x30a
 801302e:	4a13      	ldr	r2, [pc, #76]	@ (801307c <SVCCTL_App_Notification+0x664>)
 8013030:	4813      	ldr	r0, [pc, #76]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 8013032:	f002 fd7b 	bl	8015b2c <iprintf>
 8013036:	4823      	ldr	r0, [pc, #140]	@ (80130c4 <SVCCTL_App_Notification+0x6ac>)
 8013038:	f002 fde8 	bl	8015c0c <puts>
          APP_DBG_MSG("FW Error Type = 0x%02X\n", p_fw_error_event->FW_Error_Type);
 801303c:	480e      	ldr	r0, [pc, #56]	@ (8013078 <SVCCTL_App_Notification+0x660>)
 801303e:	f7fe fe79 	bl	8011d34 <DbgTraceGetFileName>
 8013042:	4601      	mov	r1, r0
 8013044:	f240 330b 	movw	r3, #779	@ 0x30b
 8013048:	4a0c      	ldr	r2, [pc, #48]	@ (801307c <SVCCTL_App_Notification+0x664>)
 801304a:	480d      	ldr	r0, [pc, #52]	@ (8013080 <SVCCTL_App_Notification+0x668>)
 801304c:	f002 fd6e 	bl	8015b2c <iprintf>
 8013050:	69fb      	ldr	r3, [r7, #28]
 8013052:	781b      	ldrb	r3, [r3, #0]
 8013054:	4619      	mov	r1, r3
 8013056:	481c      	ldr	r0, [pc, #112]	@ (80130c8 <SVCCTL_App_Notification+0x6b0>)
 8013058:	f002 fd68 	bl	8015b2c <iprintf>
          break;
 801305c:	e000      	b.n	8013060 <SVCCTL_App_Notification+0x648>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 801305e:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013060:	e001      	b.n	8013066 <SVCCTL_App_Notification+0x64e>
      break;
 8013062:	bf00      	nop
 8013064:	e000      	b.n	8013068 <SVCCTL_App_Notification+0x650>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013066:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8013068:	2301      	movs	r3, #1
}
 801306a:	4618      	mov	r0, r3
 801306c:	3730      	adds	r7, #48	@ 0x30
 801306e:	46bd      	mov	sp, r7
 8013070:	bdb0      	pop	{r4, r5, r7, pc}
 8013072:	bf00      	nop
 8013074:	20001a7d 	.word	0x20001a7d
 8013078:	080182c8 	.word	0x080182c8
 801307c:	08019cb4 	.word	0x08019cb4
 8013080:	080182e4 	.word	0x080182e4
 8013084:	08018690 	.word	0x08018690
 8013088:	080186b8 	.word	0x080186b8
 801308c:	080186e8 	.word	0x080186e8
 8013090:	200019f4 	.word	0x200019f4
 8013094:	0001b207 	.word	0x0001b207
 8013098:	08018710 	.word	0x08018710
 801309c:	08018744 	.word	0x08018744
 80130a0:	0801876c 	.word	0x0801876c
 80130a4:	080187a0 	.word	0x080187a0
 80130a8:	080187bc 	.word	0x080187bc
 80130ac:	080187d4 	.word	0x080187d4
 80130b0:	08018824 	.word	0x08018824
 80130b4:	0801886c 	.word	0x0801886c
 80130b8:	08018898 	.word	0x08018898
 80130bc:	080188d4 	.word	0x080188d4
 80130c0:	080188ec 	.word	0x080188ec
 80130c4:	08018914 	.word	0x08018914
 80130c8:	08018938 	.word	0x08018938

080130cc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80130d2:	4b06      	ldr	r3, [pc, #24]	@ (80130ec <Ble_Tl_Init+0x20>)
 80130d4:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80130d6:	4b06      	ldr	r3, [pc, #24]	@ (80130f0 <Ble_Tl_Init+0x24>)
 80130d8:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80130da:	463b      	mov	r3, r7
 80130dc:	4619      	mov	r1, r3
 80130de:	4805      	ldr	r0, [pc, #20]	@ (80130f4 <Ble_Tl_Init+0x28>)
 80130e0:	f7fe f90c 	bl	80112fc <hci_init>

  return;
 80130e4:	bf00      	nop
}
 80130e6:	3708      	adds	r7, #8
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}
 80130ec:	200300d8 	.word	0x200300d8
 80130f0:	08013a8d 	.word	0x08013a8d
 80130f4:	08013a55 	.word	0x08013a55

080130f8 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80130f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130fa:	b08d      	sub	sp, #52	@ 0x34
 80130fc:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80130fe:	2300      	movs	r3, #0
 8013100:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013102:	2392      	movs	r3, #146	@ 0x92
 8013104:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8013106:	48a3      	ldr	r0, [pc, #652]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013108:	f7fe fe14 	bl	8011d34 <DbgTraceGetFileName>
 801310c:	4601      	mov	r1, r0
 801310e:	f240 3349 	movw	r3, #841	@ 0x349
 8013112:	4aa1      	ldr	r2, [pc, #644]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013114:	48a1      	ldr	r0, [pc, #644]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013116:	f002 fd09 	bl	8015b2c <iprintf>
 801311a:	48a1      	ldr	r0, [pc, #644]	@ (80133a0 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 801311c:	f002 fd76 	bl	8015c0c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8013120:	f7fd fd7d 	bl	8010c1e <hci_reset>
 8013124:	4603      	mov	r3, r0
 8013126:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013128:	7dfb      	ldrb	r3, [r7, #23]
 801312a:	2b00      	cmp	r3, #0
 801312c:	d00f      	beq.n	801314e <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 801312e:	4899      	ldr	r0, [pc, #612]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013130:	f7fe fe00 	bl	8011d34 <DbgTraceGetFileName>
 8013134:	4601      	mov	r1, r0
 8013136:	f240 3352 	movw	r3, #850	@ 0x352
 801313a:	4a97      	ldr	r2, [pc, #604]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801313c:	4897      	ldr	r0, [pc, #604]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801313e:	f002 fcf5 	bl	8015b2c <iprintf>
 8013142:	7dfb      	ldrb	r3, [r7, #23]
 8013144:	4619      	mov	r1, r3
 8013146:	4897      	ldr	r0, [pc, #604]	@ (80133a4 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8013148:	f002 fcf0 	bl	8015b2c <iprintf>
 801314c:	e00c      	b.n	8013168 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 801314e:	4891      	ldr	r0, [pc, #580]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013150:	f7fe fdf0 	bl	8011d34 <DbgTraceGetFileName>
 8013154:	4601      	mov	r1, r0
 8013156:	f240 3356 	movw	r3, #854	@ 0x356
 801315a:	4a8f      	ldr	r2, [pc, #572]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801315c:	488f      	ldr	r0, [pc, #572]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801315e:	f002 fce5 	bl	8015b2c <iprintf>
 8013162:	4891      	ldr	r0, [pc, #580]	@ (80133a8 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8013164:	f002 fd52 	bl	8015c0c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8013168:	f000 fad8 	bl	801371c <BleGetBdAddress>
 801316c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 801316e:	693a      	ldr	r2, [r7, #16]
 8013170:	2106      	movs	r1, #6
 8013172:	2000      	movs	r0, #0
 8013174:	f7fd fc13 	bl	801099e <aci_hal_write_config_data>
 8013178:	4603      	mov	r3, r0
 801317a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801317c:	7dfb      	ldrb	r3, [r7, #23]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d00f      	beq.n	80131a2 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8013182:	4884      	ldr	r0, [pc, #528]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013184:	f7fe fdd6 	bl	8011d34 <DbgTraceGetFileName>
 8013188:	4601      	mov	r1, r0
 801318a:	f44f 7358 	mov.w	r3, #864	@ 0x360
 801318e:	4a82      	ldr	r2, [pc, #520]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013190:	4882      	ldr	r0, [pc, #520]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013192:	f002 fccb 	bl	8015b2c <iprintf>
 8013196:	7dfb      	ldrb	r3, [r7, #23]
 8013198:	4619      	mov	r1, r3
 801319a:	4884      	ldr	r0, [pc, #528]	@ (80133ac <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 801319c:	f002 fcc6 	bl	8015b2c <iprintf>
 80131a0:	e035      	b.n	801320e <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80131a2:	487c      	ldr	r0, [pc, #496]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80131a4:	f7fe fdc6 	bl	8011d34 <DbgTraceGetFileName>
 80131a8:	4601      	mov	r1, r0
 80131aa:	f44f 7359 	mov.w	r3, #868	@ 0x364
 80131ae:	4a7a      	ldr	r2, [pc, #488]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80131b0:	487a      	ldr	r0, [pc, #488]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80131b2:	f002 fcbb 	bl	8015b2c <iprintf>
 80131b6:	487e      	ldr	r0, [pc, #504]	@ (80133b0 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80131b8:	f002 fd28 	bl	8015c0c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80131bc:	4875      	ldr	r0, [pc, #468]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80131be:	f7fe fdb9 	bl	8011d34 <DbgTraceGetFileName>
 80131c2:	4601      	mov	r1, r0
 80131c4:	f240 3365 	movw	r3, #869	@ 0x365
 80131c8:	4a73      	ldr	r2, [pc, #460]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80131ca:	4874      	ldr	r0, [pc, #464]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80131cc:	f002 fcae 	bl	8015b2c <iprintf>
 80131d0:	693b      	ldr	r3, [r7, #16]
 80131d2:	3305      	adds	r3, #5
 80131d4:	781b      	ldrb	r3, [r3, #0]
 80131d6:	4618      	mov	r0, r3
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	3304      	adds	r3, #4
 80131dc:	781b      	ldrb	r3, [r3, #0]
 80131de:	461c      	mov	r4, r3
 80131e0:	693b      	ldr	r3, [r7, #16]
 80131e2:	3303      	adds	r3, #3
 80131e4:	781b      	ldrb	r3, [r3, #0]
 80131e6:	461d      	mov	r5, r3
 80131e8:	693b      	ldr	r3, [r7, #16]
 80131ea:	3302      	adds	r3, #2
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	461a      	mov	r2, r3
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	3301      	adds	r3, #1
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	4619      	mov	r1, r3
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	781b      	ldrb	r3, [r3, #0]
 80131fc:	9302      	str	r3, [sp, #8]
 80131fe:	9101      	str	r1, [sp, #4]
 8013200:	9200      	str	r2, [sp, #0]
 8013202:	462b      	mov	r3, r5
 8013204:	4622      	mov	r2, r4
 8013206:	4601      	mov	r1, r0
 8013208:	486a      	ldr	r0, [pc, #424]	@ (80133b4 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 801320a:	f002 fc8f 	bl	8015b2c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 801320e:	4a6a      	ldr	r2, [pc, #424]	@ (80133b8 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8013210:	2110      	movs	r1, #16
 8013212:	2018      	movs	r0, #24
 8013214:	f7fd fbc3 	bl	801099e <aci_hal_write_config_data>
 8013218:	4603      	mov	r3, r0
 801321a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801321c:	7dfb      	ldrb	r3, [r7, #23]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d00f      	beq.n	8013242 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8013222:	485c      	ldr	r0, [pc, #368]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013224:	f7fe fd86 	bl	8011d34 <DbgTraceGetFileName>
 8013228:	4601      	mov	r1, r0
 801322a:	f240 3387 	movw	r3, #903	@ 0x387
 801322e:	4a5a      	ldr	r2, [pc, #360]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013230:	485a      	ldr	r0, [pc, #360]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013232:	f002 fc7b 	bl	8015b2c <iprintf>
 8013236:	7dfb      	ldrb	r3, [r7, #23]
 8013238:	4619      	mov	r1, r3
 801323a:	4860      	ldr	r0, [pc, #384]	@ (80133bc <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 801323c:	f002 fc76 	bl	8015b2c <iprintf>
 8013240:	e00c      	b.n	801325c <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8013242:	4854      	ldr	r0, [pc, #336]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013244:	f7fe fd76 	bl	8011d34 <DbgTraceGetFileName>
 8013248:	4601      	mov	r1, r0
 801324a:	f240 338b 	movw	r3, #907	@ 0x38b
 801324e:	4a52      	ldr	r2, [pc, #328]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013250:	4852      	ldr	r0, [pc, #328]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013252:	f002 fc6b 	bl	8015b2c <iprintf>
 8013256:	485a      	ldr	r0, [pc, #360]	@ (80133c0 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8013258:	f002 fcd8 	bl	8015c0c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 801325c:	4a59      	ldr	r2, [pc, #356]	@ (80133c4 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 801325e:	2110      	movs	r1, #16
 8013260:	2008      	movs	r0, #8
 8013262:	f7fd fb9c 	bl	801099e <aci_hal_write_config_data>
 8013266:	4603      	mov	r3, r0
 8013268:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801326a:	7dfb      	ldrb	r3, [r7, #23]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d00f      	beq.n	8013290 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8013270:	4848      	ldr	r0, [pc, #288]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013272:	f7fe fd5f 	bl	8011d34 <DbgTraceGetFileName>
 8013276:	4601      	mov	r1, r0
 8013278:	f44f 7365 	mov.w	r3, #916	@ 0x394
 801327c:	4a46      	ldr	r2, [pc, #280]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801327e:	4847      	ldr	r0, [pc, #284]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013280:	f002 fc54 	bl	8015b2c <iprintf>
 8013284:	7dfb      	ldrb	r3, [r7, #23]
 8013286:	4619      	mov	r1, r3
 8013288:	484f      	ldr	r0, [pc, #316]	@ (80133c8 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 801328a:	f002 fc4f 	bl	8015b2c <iprintf>
 801328e:	e00c      	b.n	80132aa <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8013290:	4840      	ldr	r0, [pc, #256]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013292:	f7fe fd4f 	bl	8011d34 <DbgTraceGetFileName>
 8013296:	4601      	mov	r1, r0
 8013298:	f44f 7366 	mov.w	r3, #920	@ 0x398
 801329c:	4a3e      	ldr	r2, [pc, #248]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801329e:	483f      	ldr	r0, [pc, #252]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80132a0:	f002 fc44 	bl	8015b2c <iprintf>
 80132a4:	4849      	ldr	r0, [pc, #292]	@ (80133cc <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 80132a6:	f002 fcb1 	bl	8015c0c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80132aa:	211c      	movs	r1, #28
 80132ac:	2001      	movs	r0, #1
 80132ae:	f7fd fbfb 	bl	8010aa8 <aci_hal_set_tx_power_level>
 80132b2:	4603      	mov	r3, r0
 80132b4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80132b6:	7dfb      	ldrb	r3, [r7, #23]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d00f      	beq.n	80132dc <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 80132bc:	4835      	ldr	r0, [pc, #212]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80132be:	f7fe fd39 	bl	8011d34 <DbgTraceGetFileName>
 80132c2:	4601      	mov	r1, r0
 80132c4:	f240 33a1 	movw	r3, #929	@ 0x3a1
 80132c8:	4a33      	ldr	r2, [pc, #204]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80132ca:	4834      	ldr	r0, [pc, #208]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80132cc:	f002 fc2e 	bl	8015b2c <iprintf>
 80132d0:	7dfb      	ldrb	r3, [r7, #23]
 80132d2:	4619      	mov	r1, r3
 80132d4:	483e      	ldr	r0, [pc, #248]	@ (80133d0 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 80132d6:	f002 fc29 	bl	8015b2c <iprintf>
 80132da:	e00c      	b.n	80132f6 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 80132dc:	482d      	ldr	r0, [pc, #180]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80132de:	f7fe fd29 	bl	8011d34 <DbgTraceGetFileName>
 80132e2:	4601      	mov	r1, r0
 80132e4:	f240 33a5 	movw	r3, #933	@ 0x3a5
 80132e8:	4a2b      	ldr	r2, [pc, #172]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80132ea:	482c      	ldr	r0, [pc, #176]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80132ec:	f002 fc1e 	bl	8015b2c <iprintf>
 80132f0:	4838      	ldr	r0, [pc, #224]	@ (80133d4 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 80132f2:	f002 fc8b 	bl	8015c0c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 80132f6:	f7fc fffc 	bl	80102f2 <aci_gatt_init>
 80132fa:	4603      	mov	r3, r0
 80132fc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80132fe:	7dfb      	ldrb	r3, [r7, #23]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d00f      	beq.n	8013324 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8013304:	4823      	ldr	r0, [pc, #140]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013306:	f7fe fd15 	bl	8011d34 <DbgTraceGetFileName>
 801330a:	4601      	mov	r1, r0
 801330c:	f240 33ae 	movw	r3, #942	@ 0x3ae
 8013310:	4a21      	ldr	r2, [pc, #132]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013312:	4822      	ldr	r0, [pc, #136]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013314:	f002 fc0a 	bl	8015b2c <iprintf>
 8013318:	7dfb      	ldrb	r3, [r7, #23]
 801331a:	4619      	mov	r1, r3
 801331c:	482e      	ldr	r0, [pc, #184]	@ (80133d8 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 801331e:	f002 fc05 	bl	8015b2c <iprintf>
 8013322:	e00c      	b.n	801333e <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8013324:	481b      	ldr	r0, [pc, #108]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013326:	f7fe fd05 	bl	8011d34 <DbgTraceGetFileName>
 801332a:	4601      	mov	r1, r0
 801332c:	f240 33b2 	movw	r3, #946	@ 0x3b2
 8013330:	4a19      	ldr	r2, [pc, #100]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013332:	481a      	ldr	r0, [pc, #104]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013334:	f002 fbfa 	bl	8015b2c <iprintf>
 8013338:	4828      	ldr	r0, [pc, #160]	@ (80133dc <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 801333a:	f002 fc67 	bl	8015c0c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 801333e:	2300      	movs	r3, #0
 8013340:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8013342:	7bfb      	ldrb	r3, [r7, #15]
 8013344:	f043 0301 	orr.w	r3, r3, #1
 8013348:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 801334a:	7bfb      	ldrb	r3, [r7, #15]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d069      	beq.n	8013424 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8013350:	4b23      	ldr	r3, [pc, #140]	@ (80133e0 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8013352:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8013354:	1dba      	adds	r2, r7, #6
 8013356:	7bf8      	ldrb	r0, [r7, #15]
 8013358:	1cbb      	adds	r3, r7, #2
 801335a:	9301      	str	r3, [sp, #4]
 801335c:	1d3b      	adds	r3, r7, #4
 801335e:	9300      	str	r3, [sp, #0]
 8013360:	4613      	mov	r3, r2
 8013362:	2209      	movs	r2, #9
 8013364:	2100      	movs	r1, #0
 8013366:	f7fc fe1a 	bl	800ff9e <aci_gap_init>
 801336a:	4603      	mov	r3, r0
 801336c:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 801336e:	7dfb      	ldrb	r3, [r7, #23]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d039      	beq.n	80133e8 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8013374:	4807      	ldr	r0, [pc, #28]	@ (8013394 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013376:	f7fe fcdd 	bl	8011d34 <DbgTraceGetFileName>
 801337a:	4601      	mov	r1, r0
 801337c:	f240 33d2 	movw	r3, #978	@ 0x3d2
 8013380:	4a05      	ldr	r2, [pc, #20]	@ (8013398 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013382:	4806      	ldr	r0, [pc, #24]	@ (801339c <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013384:	f002 fbd2 	bl	8015b2c <iprintf>
 8013388:	7dfb      	ldrb	r3, [r7, #23]
 801338a:	4619      	mov	r1, r3
 801338c:	4815      	ldr	r0, [pc, #84]	@ (80133e4 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 801338e:	f002 fbcd 	bl	8015b2c <iprintf>
 8013392:	e036      	b.n	8013402 <Ble_Hci_Gap_Gatt_Init+0x30a>
 8013394:	080182c8 	.word	0x080182c8
 8013398:	08019ccc 	.word	0x08019ccc
 801339c:	080182e4 	.word	0x080182e4
 80133a0:	08018950 	.word	0x08018950
 80133a4:	0801897c 	.word	0x0801897c
 80133a8:	080189ac 	.word	0x080189ac
 80133ac:	080189cc 	.word	0x080189cc
 80133b0:	08018a28 	.word	0x08018a28
 80133b4:	08018a74 	.word	0x08018a74
 80133b8:	08019c84 	.word	0x08019c84
 80133bc:	08018ab0 	.word	0x08018ab0
 80133c0:	08018b08 	.word	0x08018b08
 80133c4:	08019c94 	.word	0x08019c94
 80133c8:	08018b50 	.word	0x08018b50
 80133cc:	08018ba8 	.word	0x08018ba8
 80133d0:	08018bf0 	.word	0x08018bf0
 80133d4:	08018c30 	.word	0x08018c30
 80133d8:	08018c60 	.word	0x08018c60
 80133dc:	08018c94 	.word	0x08018c94
 80133e0:	08018cb8 	.word	0x08018cb8
 80133e4:	08018cc4 	.word	0x08018cc4
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 80133e8:	487e      	ldr	r0, [pc, #504]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80133ea:	f7fe fca3 	bl	8011d34 <DbgTraceGetFileName>
 80133ee:	4601      	mov	r1, r0
 80133f0:	f240 33d6 	movw	r3, #982	@ 0x3d6
 80133f4:	4a7c      	ldr	r2, [pc, #496]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80133f6:	487d      	ldr	r0, [pc, #500]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80133f8:	f002 fb98 	bl	8015b2c <iprintf>
 80133fc:	487c      	ldr	r0, [pc, #496]	@ (80135f0 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 80133fe:	f002 fc05 	bl	8015c0c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8013402:	88fc      	ldrh	r4, [r7, #6]
 8013404:	88bd      	ldrh	r5, [r7, #4]
 8013406:	68b8      	ldr	r0, [r7, #8]
 8013408:	f7ec feba 	bl	8000180 <strlen>
 801340c:	4603      	mov	r3, r0
 801340e:	b2da      	uxtb	r2, r3
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	9300      	str	r3, [sp, #0]
 8013414:	4613      	mov	r3, r2
 8013416:	2200      	movs	r2, #0
 8013418:	4629      	mov	r1, r5
 801341a:	4620      	mov	r0, r4
 801341c:	f7fd f96c 	bl	80106f8 <aci_gatt_update_char_value>
 8013420:	4603      	mov	r3, r0
 8013422:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8013424:	88f8      	ldrh	r0, [r7, #6]
 8013426:	8879      	ldrh	r1, [r7, #2]
 8013428:	463b      	mov	r3, r7
 801342a:	9300      	str	r3, [sp, #0]
 801342c:	2302      	movs	r3, #2
 801342e:	2200      	movs	r2, #0
 8013430:	f7fd f962 	bl	80106f8 <aci_gatt_update_char_value>
 8013434:	4603      	mov	r3, r0
 8013436:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8013438:	2202      	movs	r2, #2
 801343a:	2102      	movs	r1, #2
 801343c:	2000      	movs	r0, #0
 801343e:	f7fd fc12 	bl	8010c66 <hci_le_set_default_phy>
 8013442:	4603      	mov	r3, r0
 8013444:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013446:	7dfb      	ldrb	r3, [r7, #23]
 8013448:	2b00      	cmp	r3, #0
 801344a:	d00f      	beq.n	801346c <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 801344c:	4865      	ldr	r0, [pc, #404]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801344e:	f7fe fc71 	bl	8011d34 <DbgTraceGetFileName>
 8013452:	4601      	mov	r1, r0
 8013454:	f44f 737e 	mov.w	r3, #1016	@ 0x3f8
 8013458:	4a63      	ldr	r2, [pc, #396]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801345a:	4864      	ldr	r0, [pc, #400]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801345c:	f002 fb66 	bl	8015b2c <iprintf>
 8013460:	7dfb      	ldrb	r3, [r7, #23]
 8013462:	4619      	mov	r1, r3
 8013464:	4863      	ldr	r0, [pc, #396]	@ (80135f4 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8013466:	f002 fb61 	bl	8015b2c <iprintf>
 801346a:	e00c      	b.n	8013486 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 801346c:	485d      	ldr	r0, [pc, #372]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801346e:	f7fe fc61 	bl	8011d34 <DbgTraceGetFileName>
 8013472:	4601      	mov	r1, r0
 8013474:	f44f 737f 	mov.w	r3, #1020	@ 0x3fc
 8013478:	4a5b      	ldr	r2, [pc, #364]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801347a:	485c      	ldr	r0, [pc, #368]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801347c:	f002 fb56 	bl	8015b2c <iprintf>
 8013480:	485d      	ldr	r0, [pc, #372]	@ (80135f8 <Ble_Hci_Gap_Gatt_Init+0x500>)
 8013482:	f002 fbc3 	bl	8015c0c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8013486:	4b5d      	ldr	r3, [pc, #372]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013488:	2201      	movs	r2, #1
 801348a:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 801348c:	4b5b      	ldr	r3, [pc, #364]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 801348e:	781b      	ldrb	r3, [r3, #0]
 8013490:	4618      	mov	r0, r3
 8013492:	f7fc fc05 	bl	800fca0 <aci_gap_set_io_capability>
 8013496:	4603      	mov	r3, r0
 8013498:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801349a:	7dfb      	ldrb	r3, [r7, #23]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d00f      	beq.n	80134c0 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 80134a0:	4850      	ldr	r0, [pc, #320]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80134a2:	f7fe fc47 	bl	8011d34 <DbgTraceGetFileName>
 80134a6:	4601      	mov	r1, r0
 80134a8:	f240 4306 	movw	r3, #1030	@ 0x406
 80134ac:	4a4e      	ldr	r2, [pc, #312]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80134ae:	484f      	ldr	r0, [pc, #316]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80134b0:	f002 fb3c 	bl	8015b2c <iprintf>
 80134b4:	7dfb      	ldrb	r3, [r7, #23]
 80134b6:	4619      	mov	r1, r3
 80134b8:	4851      	ldr	r0, [pc, #324]	@ (8013600 <Ble_Hci_Gap_Gatt_Init+0x508>)
 80134ba:	f002 fb37 	bl	8015b2c <iprintf>
 80134be:	e00c      	b.n	80134da <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 80134c0:	4848      	ldr	r0, [pc, #288]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80134c2:	f7fe fc37 	bl	8011d34 <DbgTraceGetFileName>
 80134c6:	4601      	mov	r1, r0
 80134c8:	f240 430a 	movw	r3, #1034	@ 0x40a
 80134cc:	4a46      	ldr	r2, [pc, #280]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80134ce:	4847      	ldr	r0, [pc, #284]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80134d0:	f002 fb2c 	bl	8015b2c <iprintf>
 80134d4:	484b      	ldr	r0, [pc, #300]	@ (8013604 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 80134d6:	f002 fb99 	bl	8015c0c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80134da:	4b48      	ldr	r3, [pc, #288]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80134dc:	2201      	movs	r2, #1
 80134de:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80134e0:	4b46      	ldr	r3, [pc, #280]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80134e2:	2208      	movs	r2, #8
 80134e4:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80134e6:	4b45      	ldr	r3, [pc, #276]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80134e8:	2210      	movs	r2, #16
 80134ea:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80134ec:	4b43      	ldr	r3, [pc, #268]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80134ee:	2200      	movs	r2, #0
 80134f0:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80134f2:	4b42      	ldr	r3, [pc, #264]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80134f4:	4a44      	ldr	r2, [pc, #272]	@ (8013608 <Ble_Hci_Gap_Gatt_Init+0x510>)
 80134f6:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80134f8:	4b40      	ldr	r3, [pc, #256]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 80134fa:	2200      	movs	r2, #0
 80134fc:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 80134fe:	4b3f      	ldr	r3, [pc, #252]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013500:	789c      	ldrb	r4, [r3, #2]
 8013502:	4b3e      	ldr	r3, [pc, #248]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013504:	785d      	ldrb	r5, [r3, #1]
 8013506:	4b3d      	ldr	r3, [pc, #244]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013508:	791b      	ldrb	r3, [r3, #4]
 801350a:	4a3c      	ldr	r2, [pc, #240]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 801350c:	7952      	ldrb	r2, [r2, #5]
 801350e:	493b      	ldr	r1, [pc, #236]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013510:	78c9      	ldrb	r1, [r1, #3]
 8013512:	483a      	ldr	r0, [pc, #232]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013514:	6880      	ldr	r0, [r0, #8]
 8013516:	2600      	movs	r6, #0
 8013518:	9604      	str	r6, [sp, #16]
 801351a:	9003      	str	r0, [sp, #12]
 801351c:	9102      	str	r1, [sp, #8]
 801351e:	9201      	str	r2, [sp, #4]
 8013520:	9300      	str	r3, [sp, #0]
 8013522:	2300      	movs	r3, #0
 8013524:	2201      	movs	r2, #1
 8013526:	4629      	mov	r1, r5
 8013528:	4620      	mov	r0, r4
 801352a:	f7fc fc0d 	bl	800fd48 <aci_gap_set_authentication_requirement>
 801352e:	4603      	mov	r3, r0
 8013530:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8013532:	7dfb      	ldrb	r3, [r7, #23]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d00f      	beq.n	8013558 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8013538:	482a      	ldr	r0, [pc, #168]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801353a:	f7fe fbfb 	bl	8011d34 <DbgTraceGetFileName>
 801353e:	4601      	mov	r1, r0
 8013540:	f240 4325 	movw	r3, #1061	@ 0x425
 8013544:	4a28      	ldr	r2, [pc, #160]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013546:	4829      	ldr	r0, [pc, #164]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013548:	f002 faf0 	bl	8015b2c <iprintf>
 801354c:	7dfb      	ldrb	r3, [r7, #23]
 801354e:	4619      	mov	r1, r3
 8013550:	482e      	ldr	r0, [pc, #184]	@ (801360c <Ble_Hci_Gap_Gatt_Init+0x514>)
 8013552:	f002 faeb 	bl	8015b2c <iprintf>
 8013556:	e00c      	b.n	8013572 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8013558:	4822      	ldr	r0, [pc, #136]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801355a:	f7fe fbeb 	bl	8011d34 <DbgTraceGetFileName>
 801355e:	4601      	mov	r1, r0
 8013560:	f240 4329 	movw	r3, #1065	@ 0x429
 8013564:	4a20      	ldr	r2, [pc, #128]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013566:	4821      	ldr	r0, [pc, #132]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013568:	f002 fae0 	bl	8015b2c <iprintf>
 801356c:	4828      	ldr	r0, [pc, #160]	@ (8013610 <Ble_Hci_Gap_Gatt_Init+0x518>)
 801356e:	f002 fb4d 	bl	8015c0c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8013572:	4b22      	ldr	r3, [pc, #136]	@ (80135fc <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013574:	789b      	ldrb	r3, [r3, #2]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d023      	beq.n	80135c2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 801357a:	f7fc fe2f 	bl	80101dc <aci_gap_configure_filter_accept_list>
 801357e:	4603      	mov	r3, r0
 8013580:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8013582:	7dfb      	ldrb	r3, [r7, #23]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d00f      	beq.n	80135a8 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8013588:	4816      	ldr	r0, [pc, #88]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801358a:	f7fe fbd3 	bl	8011d34 <DbgTraceGetFileName>
 801358e:	4601      	mov	r1, r0
 8013590:	f240 4334 	movw	r3, #1076	@ 0x434
 8013594:	4a14      	ldr	r2, [pc, #80]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013596:	4815      	ldr	r0, [pc, #84]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013598:	f002 fac8 	bl	8015b2c <iprintf>
 801359c:	7dfb      	ldrb	r3, [r7, #23]
 801359e:	4619      	mov	r1, r3
 80135a0:	481c      	ldr	r0, [pc, #112]	@ (8013614 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 80135a2:	f002 fac3 	bl	8015b2c <iprintf>
 80135a6:	e00c      	b.n	80135c2 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 80135a8:	480e      	ldr	r0, [pc, #56]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80135aa:	f7fe fbc3 	bl	8011d34 <DbgTraceGetFileName>
 80135ae:	4601      	mov	r1, r0
 80135b0:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 80135b4:	4a0c      	ldr	r2, [pc, #48]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80135b6:	480d      	ldr	r0, [pc, #52]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80135b8:	f002 fab8 	bl	8015b2c <iprintf>
 80135bc:	4816      	ldr	r0, [pc, #88]	@ (8013618 <Ble_Hci_Gap_Gatt_Init+0x520>)
 80135be:	f002 fb25 	bl	8015c0c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 80135c2:	4808      	ldr	r0, [pc, #32]	@ (80135e4 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80135c4:	f7fe fbb6 	bl	8011d34 <DbgTraceGetFileName>
 80135c8:	4601      	mov	r1, r0
 80135ca:	f240 433b 	movw	r3, #1083	@ 0x43b
 80135ce:	4a06      	ldr	r2, [pc, #24]	@ (80135e8 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80135d0:	4806      	ldr	r0, [pc, #24]	@ (80135ec <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80135d2:	f002 faab 	bl	8015b2c <iprintf>
 80135d6:	4811      	ldr	r0, [pc, #68]	@ (801361c <Ble_Hci_Gap_Gatt_Init+0x524>)
 80135d8:	f002 faa8 	bl	8015b2c <iprintf>
}
 80135dc:	bf00      	nop
 80135de:	371c      	adds	r7, #28
 80135e0:	46bd      	mov	sp, r7
 80135e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135e4:	080182c8 	.word	0x080182c8
 80135e8:	08019ccc 	.word	0x08019ccc
 80135ec:	080182e4 	.word	0x080182e4
 80135f0:	08018cf4 	.word	0x08018cf4
 80135f4:	08018d14 	.word	0x08018d14
 80135f8:	08018d50 	.word	0x08018d50
 80135fc:	200019f4 	.word	0x200019f4
 8013600:	08018d7c 	.word	0x08018d7c
 8013604:	08018dbc 	.word	0x08018dbc
 8013608:	0001b207 	.word	0x0001b207
 801360c:	08018dec 	.word	0x08018dec
 8013610:	08018e38 	.word	0x08018e38
 8013614:	08018e74 	.word	0x08018e74
 8013618:	08018eb4 	.word	0x08018eb4
 801361c:	08018ee4 	.word	0x08018ee4

08013620 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b08c      	sub	sp, #48	@ 0x30
 8013624:	af08      	add	r7, sp, #32
 8013626:	4603      	mov	r3, r0
 8013628:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801362a:	2392      	movs	r3, #146	@ 0x92
 801362c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801362e:	4a32      	ldr	r2, [pc, #200]	@ (80136f8 <Adv_Request+0xd8>)
 8013630:	79fb      	ldrb	r3, [r7, #7]
 8013632:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8013636:	2300      	movs	r3, #0
 8013638:	9306      	str	r3, [sp, #24]
 801363a:	2300      	movs	r3, #0
 801363c:	9305      	str	r3, [sp, #20]
 801363e:	2300      	movs	r3, #0
 8013640:	9304      	str	r3, [sp, #16]
 8013642:	2300      	movs	r3, #0
 8013644:	9303      	str	r3, [sp, #12]
 8013646:	2300      	movs	r3, #0
 8013648:	9302      	str	r3, [sp, #8]
 801364a:	2300      	movs	r3, #0
 801364c:	9301      	str	r3, [sp, #4]
 801364e:	2300      	movs	r3, #0
 8013650:	9300      	str	r3, [sp, #0]
 8013652:	2300      	movs	r3, #0
 8013654:	22a0      	movs	r2, #160	@ 0xa0
 8013656:	2180      	movs	r1, #128	@ 0x80
 8013658:	2000      	movs	r0, #0
 801365a:	f7fc fa27 	bl	800faac <aci_gap_set_discoverable>
 801365e:	4603      	mov	r3, r0
 8013660:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8013662:	7bfb      	ldrb	r3, [r7, #15]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d00f      	beq.n	8013688 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8013668:	4824      	ldr	r0, [pc, #144]	@ (80136fc <Adv_Request+0xdc>)
 801366a:	f7fe fb63 	bl	8011d34 <DbgTraceGetFileName>
 801366e:	4601      	mov	r1, r0
 8013670:	f240 4351 	movw	r3, #1105	@ 0x451
 8013674:	4a22      	ldr	r2, [pc, #136]	@ (8013700 <Adv_Request+0xe0>)
 8013676:	4823      	ldr	r0, [pc, #140]	@ (8013704 <Adv_Request+0xe4>)
 8013678:	f002 fa58 	bl	8015b2c <iprintf>
 801367c:	7bfb      	ldrb	r3, [r7, #15]
 801367e:	4619      	mov	r1, r3
 8013680:	4821      	ldr	r0, [pc, #132]	@ (8013708 <Adv_Request+0xe8>)
 8013682:	f002 fa53 	bl	8015b2c <iprintf>
 8013686:	e00c      	b.n	80136a2 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8013688:	481c      	ldr	r0, [pc, #112]	@ (80136fc <Adv_Request+0xdc>)
 801368a:	f7fe fb53 	bl	8011d34 <DbgTraceGetFileName>
 801368e:	4601      	mov	r1, r0
 8013690:	f240 4355 	movw	r3, #1109	@ 0x455
 8013694:	4a1a      	ldr	r2, [pc, #104]	@ (8013700 <Adv_Request+0xe0>)
 8013696:	481b      	ldr	r0, [pc, #108]	@ (8013704 <Adv_Request+0xe4>)
 8013698:	f002 fa48 	bl	8015b2c <iprintf>
 801369c:	481b      	ldr	r0, [pc, #108]	@ (801370c <Adv_Request+0xec>)
 801369e:	f002 fab5 	bl	8015c0c <puts>
#endif

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80136a2:	491b      	ldr	r1, [pc, #108]	@ (8013710 <Adv_Request+0xf0>)
 80136a4:	2013      	movs	r0, #19
 80136a6:	f7fc fd27 	bl	80100f8 <aci_gap_update_adv_data>
 80136aa:	4603      	mov	r3, r0
 80136ac:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 80136ae:	7bfb      	ldrb	r3, [r7, #15]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d00f      	beq.n	80136d4 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 80136b4:	4811      	ldr	r0, [pc, #68]	@ (80136fc <Adv_Request+0xdc>)
 80136b6:	f7fe fb3d 	bl	8011d34 <DbgTraceGetFileName>
 80136ba:	4601      	mov	r1, r0
 80136bc:	f240 4364 	movw	r3, #1124	@ 0x464
 80136c0:	4a0f      	ldr	r2, [pc, #60]	@ (8013700 <Adv_Request+0xe0>)
 80136c2:	4810      	ldr	r0, [pc, #64]	@ (8013704 <Adv_Request+0xe4>)
 80136c4:	f002 fa32 	bl	8015b2c <iprintf>
 80136c8:	7bfb      	ldrb	r3, [r7, #15]
 80136ca:	4619      	mov	r1, r3
 80136cc:	4811      	ldr	r0, [pc, #68]	@ (8013714 <Adv_Request+0xf4>)
 80136ce:	f002 fa2d 	bl	8015b2c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80136d2:	e00d      	b.n	80136f0 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 80136d4:	4809      	ldr	r0, [pc, #36]	@ (80136fc <Adv_Request+0xdc>)
 80136d6:	f7fe fb2d 	bl	8011d34 <DbgTraceGetFileName>
 80136da:	4601      	mov	r1, r0
 80136dc:	f44f 638d 	mov.w	r3, #1128	@ 0x468
 80136e0:	4a07      	ldr	r2, [pc, #28]	@ (8013700 <Adv_Request+0xe0>)
 80136e2:	4808      	ldr	r0, [pc, #32]	@ (8013704 <Adv_Request+0xe4>)
 80136e4:	f002 fa22 	bl	8015b2c <iprintf>
 80136e8:	480b      	ldr	r0, [pc, #44]	@ (8013718 <Adv_Request+0xf8>)
 80136ea:	f002 fa1f 	bl	8015b2c <iprintf>
  return;
 80136ee:	bf00      	nop
}
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}
 80136f6:	bf00      	nop
 80136f8:	200019f4 	.word	0x200019f4
 80136fc:	080182c8 	.word	0x080182c8
 8013700:	08019ce4 	.word	0x08019ce4
 8013704:	080182e4 	.word	0x080182e4
 8013708:	08018f10 	.word	0x08018f10
 801370c:	08018f48 	.word	0x08018f48
 8013710:	200000a8 	.word	0x200000a8
 8013714:	08018f70 	.word	0x08018f70
 8013718:	08018fa4 	.word	0x08018fa4

0801371c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b086      	sub	sp, #24
 8013720:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013722:	f7ff f895 	bl	8012850 <LL_FLASH_GetUDN>
 8013726:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8013728:	693b      	ldr	r3, [r7, #16]
 801372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801372e:	d023      	beq.n	8013778 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013730:	f7ff f8a6 	bl	8012880 <LL_FLASH_GetSTCompanyID>
 8013734:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8013736:	f7ff f897 	bl	8012868 <LL_FLASH_GetDeviceID>
 801373a:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	b2da      	uxtb	r2, r3
 8013740:	4b16      	ldr	r3, [pc, #88]	@ (801379c <BleGetBdAddress+0x80>)
 8013742:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8013744:	693b      	ldr	r3, [r7, #16]
 8013746:	0a1b      	lsrs	r3, r3, #8
 8013748:	b2da      	uxtb	r2, r3
 801374a:	4b14      	ldr	r3, [pc, #80]	@ (801379c <BleGetBdAddress+0x80>)
 801374c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	b2da      	uxtb	r2, r3
 8013752:	4b12      	ldr	r3, [pc, #72]	@ (801379c <BleGetBdAddress+0x80>)
 8013754:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8013756:	68bb      	ldr	r3, [r7, #8]
 8013758:	b2da      	uxtb	r2, r3
 801375a:	4b10      	ldr	r3, [pc, #64]	@ (801379c <BleGetBdAddress+0x80>)
 801375c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801375e:	68bb      	ldr	r3, [r7, #8]
 8013760:	0a1b      	lsrs	r3, r3, #8
 8013762:	b2da      	uxtb	r2, r3
 8013764:	4b0d      	ldr	r3, [pc, #52]	@ (801379c <BleGetBdAddress+0x80>)
 8013766:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	0c1b      	lsrs	r3, r3, #16
 801376c:	b2da      	uxtb	r2, r3
 801376e:	4b0b      	ldr	r3, [pc, #44]	@ (801379c <BleGetBdAddress+0x80>)
 8013770:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8013772:	4b0a      	ldr	r3, [pc, #40]	@ (801379c <BleGetBdAddress+0x80>)
 8013774:	617b      	str	r3, [r7, #20]
 8013776:	e00b      	b.n	8013790 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8013778:	2000      	movs	r0, #0
 801377a:	f7fe fba3 	bl	8011ec4 <OTP_Read>
 801377e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2b00      	cmp	r3, #0
 8013784:	d002      	beq.n	801378c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	617b      	str	r3, [r7, #20]
 801378a:	e001      	b.n	8013790 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 801378c:	4b04      	ldr	r3, [pc, #16]	@ (80137a0 <BleGetBdAddress+0x84>)
 801378e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8013790:	697b      	ldr	r3, [r7, #20]
}
 8013792:	4618      	mov	r0, r3
 8013794:	3718      	adds	r7, #24
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	200019ec 	.word	0x200019ec
 80137a0:	08019c7c 	.word	0x08019c7c

080137a4 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80137a4:	b580      	push	{r7, lr}
 80137a6:	b082      	sub	sp, #8
 80137a8:	af00      	add	r7, sp, #0
	  DIAG (" BLE Debug ->\tAdvertising cancelled\n\r" );
#endif

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80137aa:	4b1f      	ldr	r3, [pc, #124]	@ (8013828 <Adv_Cancel+0x84>)
 80137ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80137b0:	2b05      	cmp	r3, #5
 80137b2:	d035      	beq.n	8013820 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80137b4:	2392      	movs	r3, #146	@ 0x92
 80137b6:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80137b8:	f7fc f954 	bl	800fa64 <aci_gap_set_non_discoverable>
 80137bc:	4603      	mov	r3, r0
 80137be:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80137c0:	4b19      	ldr	r3, [pc, #100]	@ (8013828 <Adv_Cancel+0x84>)
 80137c2:	2200      	movs	r2, #0
 80137c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 80137c8:	79fb      	ldrb	r3, [r7, #7]
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00d      	beq.n	80137ea <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 80137ce:	4817      	ldr	r0, [pc, #92]	@ (801382c <Adv_Cancel+0x88>)
 80137d0:	f7fe fab0 	bl	8011d34 <DbgTraceGetFileName>
 80137d4:	4601      	mov	r1, r0
 80137d6:	f240 43ba 	movw	r3, #1210	@ 0x4ba
 80137da:	4a15      	ldr	r2, [pc, #84]	@ (8013830 <Adv_Cancel+0x8c>)
 80137dc:	4815      	ldr	r0, [pc, #84]	@ (8013834 <Adv_Cancel+0x90>)
 80137de:	f002 f9a5 	bl	8015b2c <iprintf>
 80137e2:	4815      	ldr	r0, [pc, #84]	@ (8013838 <Adv_Cancel+0x94>)
 80137e4:	f002 f9a2 	bl	8015b2c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 80137e8:	e01a      	b.n	8013820 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 80137ea:	4810      	ldr	r0, [pc, #64]	@ (801382c <Adv_Cancel+0x88>)
 80137ec:	f7fe faa2 	bl	8011d34 <DbgTraceGetFileName>
 80137f0:	4601      	mov	r1, r0
 80137f2:	f240 43be 	movw	r3, #1214	@ 0x4be
 80137f6:	4a0e      	ldr	r2, [pc, #56]	@ (8013830 <Adv_Cancel+0x8c>)
 80137f8:	480e      	ldr	r0, [pc, #56]	@ (8013834 <Adv_Cancel+0x90>)
 80137fa:	f002 f997 	bl	8015b2c <iprintf>
 80137fe:	480f      	ldr	r0, [pc, #60]	@ (801383c <Adv_Cancel+0x98>)
 8013800:	f002 f994 	bl	8015b2c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8013804:	4809      	ldr	r0, [pc, #36]	@ (801382c <Adv_Cancel+0x88>)
 8013806:	f7fe fa95 	bl	8011d34 <DbgTraceGetFileName>
 801380a:	4601      	mov	r1, r0
 801380c:	f240 43bf 	movw	r3, #1215	@ 0x4bf
 8013810:	4a07      	ldr	r2, [pc, #28]	@ (8013830 <Adv_Cancel+0x8c>)
 8013812:	4808      	ldr	r0, [pc, #32]	@ (8013834 <Adv_Cancel+0x90>)
 8013814:	f002 f98a 	bl	8015b2c <iprintf>
 8013818:	4809      	ldr	r0, [pc, #36]	@ (8013840 <Adv_Cancel+0x9c>)
 801381a:	f002 f987 	bl	8015b2c <iprintf>
  return;
 801381e:	bf00      	nop
 8013820:	bf00      	nop
}
 8013822:	3708      	adds	r7, #8
 8013824:	46bd      	mov	sp, r7
 8013826:	bd80      	pop	{r7, pc}
 8013828:	200019f4 	.word	0x200019f4
 801382c:	080182c8 	.word	0x080182c8
 8013830:	08019cf0 	.word	0x08019cf0
 8013834:	080182e4 	.word	0x080182e4
 8013838:	08018fcc 	.word	0x08018fcc
 801383c:	08018ff0 	.word	0x08018ff0
 8013840:	08018ff8 	.word	0x08018ff8

08013844 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 8013844:	b590      	push	{r4, r7, lr}
 8013846:	b08d      	sub	sp, #52	@ 0x34
 8013848:	af02      	add	r7, sp, #8
 801384a:	4603      	mov	r3, r0
 801384c:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	float a_ConnInterval[SIZE_TAB_CONN_INT] = {_min_interval, _max_interval}; /* ms */
 801384e:	4a59      	ldr	r2, [pc, #356]	@ (80139b4 <BLE_SVC_L2CAP_Conn_Update+0x170>)
 8013850:	f107 030c 	add.w	r3, r7, #12
 8013854:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013858:	e883 0003 	stmia.w	r3, {r0, r1}


    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 801385c:	4b56      	ldr	r3, [pc, #344]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801385e:	781b      	ldrb	r3, [r3, #0]
 8013860:	3301      	adds	r3, #1
 8013862:	2b00      	cmp	r3, #0
 8013864:	f003 0301 	and.w	r3, r3, #1
 8013868:	bfb8      	it	lt
 801386a:	425b      	neglt	r3, r3
 801386c:	b2da      	uxtb	r2, r3
 801386e:	4b52      	ldr	r3, [pc, #328]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013870:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 8013872:	4b51      	ldr	r3, [pc, #324]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	009b      	lsls	r3, r3, #2
 8013878:	3328      	adds	r3, #40	@ 0x28
 801387a:	443b      	add	r3, r7
 801387c:	3b1c      	subs	r3, #28
 801387e:	ed93 7a00 	vldr	s14, [r3]
 8013882:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8013886:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801388a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801388e:	ee17 3a90 	vmov	r3, s15
 8013892:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8013894:	4b48      	ldr	r3, [pc, #288]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	009b      	lsls	r3, r3, #2
 801389a:	3328      	adds	r3, #40	@ 0x28
 801389c:	443b      	add	r3, r7
 801389e:	3b1c      	subs	r3, #28
 80138a0:	ed93 7a00 	vldr	s14, [r3]
 80138a4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80138a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80138ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80138b0:	ee17 3a90 	vmov	r3, s15
 80138b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 80138b6:	2300      	movs	r3, #0
 80138b8:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80138ba:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80138be:	843b      	strh	r3, [r7, #32]



  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 80138c0:	4b3e      	ldr	r3, [pc, #248]	@ (80139bc <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d15e      	bne.n	8013986 <BLE_SVC_L2CAP_Conn_Update+0x142>
  {
    mutex = 0;
 80138c8:	4b3c      	ldr	r3, [pc, #240]	@ (80139bc <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80138ca:	2200      	movs	r2, #0
 80138cc:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80138ce:	4b3a      	ldr	r3, [pc, #232]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80138d0:	781b      	ldrb	r3, [r3, #0]
 80138d2:	3301      	adds	r3, #1
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	f003 0301 	and.w	r3, r3, #1
 80138da:	bfb8      	it	lt
 80138dc:	425b      	neglt	r3, r3
 80138de:	b2da      	uxtb	r2, r3
 80138e0:	4b35      	ldr	r3, [pc, #212]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80138e2:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80138e4:	4b34      	ldr	r3, [pc, #208]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80138e6:	781b      	ldrb	r3, [r3, #0]
 80138e8:	009b      	lsls	r3, r3, #2
 80138ea:	3328      	adds	r3, #40	@ 0x28
 80138ec:	443b      	add	r3, r7
 80138ee:	3b1c      	subs	r3, #28
 80138f0:	ed93 7a00 	vldr	s14, [r3]
 80138f4:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80138f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80138fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013900:	ee17 3a90 	vmov	r3, s15
 8013904:	83fb      	strh	r3, [r7, #30]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8013906:	4b2c      	ldr	r3, [pc, #176]	@ (80139b8 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	009b      	lsls	r3, r3, #2
 801390c:	3328      	adds	r3, #40	@ 0x28
 801390e:	443b      	add	r3, r7
 8013910:	3b1c      	subs	r3, #28
 8013912:	ed93 7a00 	vldr	s14, [r3]
 8013916:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801391a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801391e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013922:	ee17 3a90 	vmov	r3, s15
 8013926:	83bb      	strh	r3, [r7, #28]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8013928:	2300      	movs	r3, #0
 801392a:	837b      	strh	r3, [r7, #26]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 801392c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8013930:	833b      	strh	r3, [r7, #24]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8013932:	4b23      	ldr	r3, [pc, #140]	@ (80139c0 <BLE_SVC_L2CAP_Conn_Update+0x17c>)
 8013934:	8ad8      	ldrh	r0, [r3, #22]
 8013936:	8b7c      	ldrh	r4, [r7, #26]
 8013938:	8bba      	ldrh	r2, [r7, #28]
 801393a:	8bf9      	ldrh	r1, [r7, #30]
 801393c:	8b3b      	ldrh	r3, [r7, #24]
 801393e:	9300      	str	r3, [sp, #0]
 8013940:	4623      	mov	r3, r4
 8013942:	f7fd fa0d 	bl	8010d60 <aci_l2cap_connection_parameter_update_req>
 8013946:	4603      	mov	r3, r0
 8013948:	75fb      	strb	r3, [r7, #23]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 801394a:	7dfb      	ldrb	r3, [r7, #23]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d00d      	beq.n	801396c <BLE_SVC_L2CAP_Conn_Update+0x128>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8013950:	481c      	ldr	r0, [pc, #112]	@ (80139c4 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 8013952:	f7fe f9ef 	bl	8011d34 <DbgTraceGetFileName>
 8013956:	4601      	mov	r1, r0
 8013958:	f240 43ec 	movw	r3, #1260	@ 0x4ec
 801395c:	4a1a      	ldr	r2, [pc, #104]	@ (80139c8 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 801395e:	481b      	ldr	r0, [pc, #108]	@ (80139cc <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8013960:	f002 f8e4 	bl	8015b2c <iprintf>
 8013964:	481a      	ldr	r0, [pc, #104]	@ (80139d0 <BLE_SVC_L2CAP_Conn_Update+0x18c>)
 8013966:	f002 f8e1 	bl	8015b2c <iprintf>
 801396a:	e00c      	b.n	8013986 <BLE_SVC_L2CAP_Conn_Update+0x142>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 801396c:	4815      	ldr	r0, [pc, #84]	@ (80139c4 <BLE_SVC_L2CAP_Conn_Update+0x180>)
 801396e:	f7fe f9e1 	bl	8011d34 <DbgTraceGetFileName>
 8013972:	4601      	mov	r1, r0
 8013974:	f44f 639e 	mov.w	r3, #1264	@ 0x4f0
 8013978:	4a13      	ldr	r2, [pc, #76]	@ (80139c8 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 801397a:	4814      	ldr	r0, [pc, #80]	@ (80139cc <BLE_SVC_L2CAP_Conn_Update+0x188>)
 801397c:	f002 f8d6 	bl	8015b2c <iprintf>
 8013980:	4814      	ldr	r0, [pc, #80]	@ (80139d4 <BLE_SVC_L2CAP_Conn_Update+0x190>)
 8013982:	f002 f8d3 	bl	8015b2c <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */



  if (ret != BLE_STATUS_SUCCESS)
 8013986:	7dbb      	ldrb	r3, [r7, #22]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d003      	beq.n	8013994 <BLE_SVC_L2CAP_Conn_Update+0x150>
  {
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 801398c:	4812      	ldr	r0, [pc, #72]	@ (80139d8 <BLE_SVC_L2CAP_Conn_Update+0x194>)
 801398e:	f7ef f99f 	bl	8002cd0 <DIAG>
  }


  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8013992:	e00c      	b.n	80139ae <BLE_SVC_L2CAP_Conn_Update+0x16a>
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8013994:	4811      	ldr	r0, [pc, #68]	@ (80139dc <BLE_SVC_L2CAP_Conn_Update+0x198>)
 8013996:	f7ef f99b 	bl	8002cd0 <DIAG>
    DIAG("\t\t- Connection Interval:   %d - %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801399a:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 801399c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801399e:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80139a0:	8c3b      	ldrh	r3, [r7, #32]
 80139a2:	9300      	str	r3, [sp, #0]
 80139a4:	4603      	mov	r3, r0
 80139a6:	480e      	ldr	r0, [pc, #56]	@ (80139e0 <BLE_SVC_L2CAP_Conn_Update+0x19c>)
 80139a8:	f7ef f992 	bl	8002cd0 <DIAG>
  return;
 80139ac:	bf00      	nop
}
 80139ae:	372c      	adds	r7, #44	@ 0x2c
 80139b0:	46bd      	mov	sp, r7
 80139b2:	bd90      	pop	{r4, r7, pc}
 80139b4:	08019148 	.word	0x08019148
 80139b8:	20001a7c 	.word	0x20001a7c
 80139bc:	20001a7d 	.word	0x20001a7d
 80139c0:	200019f4 	.word	0x200019f4
 80139c4:	080182c8 	.word	0x080182c8
 80139c8:	08019cfc 	.word	0x08019cfc
 80139cc:	080182e4 	.word	0x080182e4
 80139d0:	08019014 	.word	0x08019014
 80139d4:	0801903c 	.word	0x0801903c
 80139d8:	0801906c 	.word	0x0801906c
 80139dc:	080190a4 	.word	0x080190a4
 80139e0:	080190e0 	.word	0x080190e0

080139e4 <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 80139e8:	4b08      	ldr	r3, [pc, #32]	@ (8013a0c <Connection_Interval_Update_Req+0x28>)
 80139ea:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80139ee:	2b01      	cmp	r3, #1
 80139f0:	d00a      	beq.n	8013a08 <Connection_Interval_Update_Req+0x24>
 80139f2:	4b06      	ldr	r3, [pc, #24]	@ (8013a0c <Connection_Interval_Update_Req+0x28>)
 80139f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d005      	beq.n	8013a08 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80139fc:	4b03      	ldr	r3, [pc, #12]	@ (8013a0c <Connection_Interval_Update_Req+0x28>)
 80139fe:	8adb      	ldrh	r3, [r3, #22]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f7ff ff1f 	bl	8013844 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 8013a06:	bf00      	nop
 8013a08:	bf00      	nop
}
 8013a0a:	bd80      	pop	{r7, pc}
 8013a0c:	200019f4 	.word	0x200019f4

08013a10 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8013a10:	b580      	push	{r7, lr}
 8013a12:	b082      	sub	sp, #8
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8013a18:	2100      	movs	r1, #0
 8013a1a:	2004      	movs	r0, #4
 8013a1c:	f001 fec8 	bl	80157b0 <UTIL_SEQ_SetTask>

  return;
 8013a20:	bf00      	nop
}
 8013a22:	3708      	adds	r7, #8
 8013a24:	46bd      	mov	sp, r7
 8013a26:	bd80      	pop	{r7, pc}

08013a28 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8013a30:	2001      	movs	r0, #1
 8013a32:	f001 ff29 	bl	8015888 <UTIL_SEQ_SetEvt>

  return;
 8013a36:	bf00      	nop
}
 8013a38:	3708      	adds	r7, #8
 8013a3a:	46bd      	mov	sp, r7
 8013a3c:	bd80      	pop	{r7, pc}

08013a3e <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8013a3e:	b580      	push	{r7, lr}
 8013a40:	b082      	sub	sp, #8
 8013a42:	af00      	add	r7, sp, #0
 8013a44:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8013a46:	2001      	movs	r0, #1
 8013a48:	f001 ff3e 	bl	80158c8 <UTIL_SEQ_WaitEvt>

  return;
 8013a4c:	bf00      	nop
}
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}

08013a54 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8013a54:	b580      	push	{r7, lr}
 8013a56:	b084      	sub	sp, #16
 8013a58:	af00      	add	r7, sp, #0
 8013a5a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	685b      	ldr	r3, [r3, #4]
 8013a64:	3308      	adds	r3, #8
 8013a66:	4618      	mov	r0, r3
 8013a68:	f7fd fb02 	bl	8011070 <SVCCTL_UserEvtRx>
 8013a6c:	4603      	mov	r3, r0
 8013a6e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8013a70:	7afb      	ldrb	r3, [r7, #11]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d003      	beq.n	8013a7e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2201      	movs	r2, #1
 8013a7a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8013a7c:	e003      	b.n	8013a86 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	2200      	movs	r2, #0
 8013a82:	701a      	strb	r2, [r3, #0]
  return;
 8013a84:	bf00      	nop
}
 8013a86:	3710      	adds	r7, #16
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	bd80      	pop	{r7, pc}

08013a8c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b084      	sub	sp, #16
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	4603      	mov	r3, r0
 8013a94:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8013a96:	79fb      	ldrb	r3, [r7, #7]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d002      	beq.n	8013aa2 <BLE_StatusNot+0x16>
 8013a9c:	2b01      	cmp	r3, #1
 8013a9e:	d006      	beq.n	8013aae <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8013aa0:	e00b      	b.n	8013aba <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8013aa2:	233f      	movs	r3, #63	@ 0x3f
 8013aa4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8013aa6:	68f8      	ldr	r0, [r7, #12]
 8013aa8:	f001 feae 	bl	8015808 <UTIL_SEQ_PauseTask>
      break;
 8013aac:	e005      	b.n	8013aba <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8013aae:	233f      	movs	r3, #63	@ 0x3f
 8013ab0:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8013ab2:	68f8      	ldr	r0, [r7, #12]
 8013ab4:	f001 fec8 	bl	8015848 <UTIL_SEQ_ResumeTask>
      break;
 8013ab8:	bf00      	nop
  }

  return;
 8013aba:	bf00      	nop
}
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bd80      	pop	{r7, pc}
	...

08013ac4 <ALL_SENs_Task>:

/* USER CODE BEGIN PFP */


void ALL_SENs_Task (void)
{
 8013ac4:	b580      	push	{r7, lr}
 8013ac6:	af00      	add	r7, sp, #0
	if ( tsBle.App.AfeSetTask )
 8013ac8:	4b09      	ldr	r3, [pc, #36]	@ (8013af0 <ALL_SENs_Task+0x2c>)
 8013aca:	7adb      	ldrb	r3, [r3, #11]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d00c      	beq.n	8013aea <ALL_SENs_Task+0x26>
	{
		tsBle.App.AfeSetTask = false;
 8013ad0:	4b07      	ldr	r3, [pc, #28]	@ (8013af0 <ALL_SENs_Task+0x2c>)
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	72da      	strb	r2, [r3, #11]
		Custom_STM_App_Update_Char(CUSTOM_STM_ALL_SENS, (uint8_t*)(tsStreamAFE.u8TxData));
 8013ad6:	4907      	ldr	r1, [pc, #28]	@ (8013af4 <ALL_SENs_Task+0x30>)
 8013ad8:	2003      	movs	r0, #3
 8013ada:	f000 fc09 	bl	80142f0 <Custom_STM_App_Update_Char>
		tsBle.u8PacketCount[0]++;
 8013ade:	4b04      	ldr	r3, [pc, #16]	@ (8013af0 <ALL_SENs_Task+0x2c>)
 8013ae0:	799b      	ldrb	r3, [r3, #6]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	b2da      	uxtb	r2, r3
 8013ae6:	4b02      	ldr	r3, [pc, #8]	@ (8013af0 <ALL_SENs_Task+0x2c>)
 8013ae8:	719a      	strb	r2, [r3, #6]
	}
}
 8013aea:	bf00      	nop
 8013aec:	bd80      	pop	{r7, pc}
 8013aee:	bf00      	nop
 8013af0:	200019dc 	.word	0x200019dc
 8013af4:	20000b2a 	.word	0x20000b2a

08013af8 <ACCEL_Task>:
//--------------------------------------------------------------------------------------------

void ACCEL_Task(void)
{
 8013af8:	b580      	push	{r7, lr}
 8013afa:	af00      	add	r7, sp, #0
	if ( tsBle.App.AccelSetTask )
 8013afc:	4b09      	ldr	r3, [pc, #36]	@ (8013b24 <ACCEL_Task+0x2c>)
 8013afe:	7b1b      	ldrb	r3, [r3, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d00c      	beq.n	8013b1e <ACCEL_Task+0x26>
	{
		tsBle.App.AccelSetTask = false;
 8013b04:	4b07      	ldr	r3, [pc, #28]	@ (8013b24 <ACCEL_Task+0x2c>)
 8013b06:	2200      	movs	r2, #0
 8013b08:	731a      	strb	r2, [r3, #12]
		Custom_STM_App_Update_Char(CUSTOM_STM_ACCEL_S, (uint8_t*)(tsStreamIMU.u8TxData));
 8013b0a:	4907      	ldr	r1, [pc, #28]	@ (8013b28 <ACCEL_Task+0x30>)
 8013b0c:	2000      	movs	r0, #0
 8013b0e:	f000 fbef 	bl	80142f0 <Custom_STM_App_Update_Char>
		tsBle.u8PacketCount[1]++;
 8013b12:	4b04      	ldr	r3, [pc, #16]	@ (8013b24 <ACCEL_Task+0x2c>)
 8013b14:	79db      	ldrb	r3, [r3, #7]
 8013b16:	3301      	adds	r3, #1
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	4b02      	ldr	r3, [pc, #8]	@ (8013b24 <ACCEL_Task+0x2c>)
 8013b1c:	71da      	strb	r2, [r3, #7]
	}
}
 8013b1e:	bf00      	nop
 8013b20:	bd80      	pop	{r7, pc}
 8013b22:	bf00      	nop
 8013b24:	200019dc 	.word	0x200019dc
 8013b28:	2000104e 	.word	0x2000104e

08013b2c <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b082      	sub	sp, #8
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	2b08      	cmp	r3, #8
 8013b3a:	d834      	bhi.n	8013ba6 <Custom_STM_App_Notification+0x7a>
 8013b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8013b44 <Custom_STM_App_Notification+0x18>)
 8013b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b42:	bf00      	nop
 8013b44:	08013b69 	.word	0x08013b69
 8013b48:	08013b7d 	.word	0x08013b7d
 8013b4c:	08013ba7 	.word	0x08013ba7
 8013b50:	08013ba7 	.word	0x08013ba7
 8013b54:	08013ba7 	.word	0x08013ba7
 8013b58:	08013b8b 	.word	0x08013b8b
 8013b5c:	08013b99 	.word	0x08013b99
 8013b60:	08013ba7 	.word	0x08013ba7
 8013b64:	08013ba7 	.word	0x08013ba7

    /* SENSOR_DATA */
    case CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */

    	tsBle.App.AfeNotification = true;
 8013b68:	4b11      	ldr	r3, [pc, #68]	@ (8013bb0 <Custom_STM_App_Notification+0x84>)
 8013b6a:	2201      	movs	r2, #1
 8013b6c:	721a      	strb	r2, [r3, #8]
    	tsBle.App.AccelNotification = true;
 8013b6e:	4b10      	ldr	r3, [pc, #64]	@ (8013bb0 <Custom_STM_App_Notification+0x84>)
 8013b70:	2201      	movs	r2, #1
 8013b72:	725a      	strb	r2, [r3, #9]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Enabled ]\n\r");
 8013b74:	480f      	ldr	r0, [pc, #60]	@ (8013bb4 <Custom_STM_App_Notification+0x88>)
 8013b76:	f7ef f8ab 	bl	8002cd0 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */
      break;
 8013b7a:	e015      	b.n	8013ba8 <Custom_STM_App_Notification+0x7c>

    case CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */


    	tsBle.App.AccelNotification = false;
 8013b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8013bb0 <Custom_STM_App_Notification+0x84>)
 8013b7e:	2200      	movs	r2, #0
 8013b80:	725a      	strb	r2, [r3, #9]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Disabled ]\n\r");
 8013b82:	480d      	ldr	r0, [pc, #52]	@ (8013bb8 <Custom_STM_App_Notification+0x8c>)
 8013b84:	f7ef f8a4 	bl	8002cd0 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */
      break;
 8013b88:	e00e      	b.n	8013ba8 <Custom_STM_App_Notification+0x7c>
      break;

    case CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */

    	tsBle.App.AfeNotification = true;
 8013b8a:	4b09      	ldr	r3, [pc, #36]	@ (8013bb0 <Custom_STM_App_Notification+0x84>)
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	721a      	strb	r2, [r3, #8]
//    	tsBle.App.McgNotification = true;
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Enabled ]\n\r");
 8013b90:	480a      	ldr	r0, [pc, #40]	@ (8013bbc <Custom_STM_App_Notification+0x90>)
 8013b92:	f7ef f89d 	bl	8002cd0 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */
      break;
 8013b96:	e007      	b.n	8013ba8 <Custom_STM_App_Notification+0x7c>

    case CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */

    	tsBle.App.AfeNotification = false;
 8013b98:	4b05      	ldr	r3, [pc, #20]	@ (8013bb0 <Custom_STM_App_Notification+0x84>)
 8013b9a:	2200      	movs	r2, #0
 8013b9c:	721a      	strb	r2, [r3, #8]
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Disabled ]\n\r");
 8013b9e:	4808      	ldr	r0, [pc, #32]	@ (8013bc0 <Custom_STM_App_Notification+0x94>)
 8013ba0:	f7ef f896 	bl	8002cd0 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */
      break;
 8013ba4:	e000      	b.n	8013ba8 <Custom_STM_App_Notification+0x7c>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8013ba6:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8013ba8:	bf00      	nop
}
 8013baa:	3708      	adds	r7, #8
 8013bac:	46bd      	mov	sp, r7
 8013bae:	bd80      	pop	{r7, pc}
 8013bb0:	200019dc 	.word	0x200019dc
 8013bb4:	08019150 	.word	0x08019150
 8013bb8:	08019180 	.word	0x08019180
 8013bbc:	080191b4 	.word	0x080191b4
 8013bc0:	080191e4 	.word	0x080191e4

08013bc4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8013bc4:	b480      	push	{r7}
 8013bc6:	b083      	sub	sp, #12
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	781b      	ldrb	r3, [r3, #0]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d002      	beq.n	8013bda <Custom_APP_Notification+0x16>
 8013bd4:	2b01      	cmp	r3, #1
 8013bd6:	d002      	beq.n	8013bde <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8013bd8:	e002      	b.n	8013be0 <Custom_APP_Notification+0x1c>
      break;
 8013bda:	bf00      	nop
 8013bdc:	e000      	b.n	8013be0 <Custom_APP_Notification+0x1c>
      break;
 8013bde:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8013be0:	bf00      	nop
}
 8013be2:	370c      	adds	r7, #12
 8013be4:	46bd      	mov	sp, r7
 8013be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bea:	4770      	bx	lr

08013bec <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8013bec:	b480      	push	{r7}
 8013bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8013bf0:	bf00      	nop
}
 8013bf2:	46bd      	mov	sp, r7
 8013bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf8:	4770      	bx	lr
	...

08013bfc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b090      	sub	sp, #64	@ 0x40
 8013c00:	af02      	add	r7, sp, #8
 8013c02:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8013c04:	2300      	movs	r3, #0
 8013c06:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	3301      	adds	r3, #1
 8013c0e:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 8013c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	2bff      	cmp	r3, #255	@ 0xff
 8013c16:	f040 8113 	bne.w	8013e40 <Custom_STM_Event_Handler+0x244>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8013c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013c1c:	3302      	adds	r3, #2
 8013c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8013c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c22:	881b      	ldrh	r3, [r3, #0]
 8013c24:	b29b      	uxth	r3, r3
 8013c26:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8013c2a:	2b1a      	cmp	r3, #26
 8013c2c:	f200 8102 	bhi.w	8013e34 <Custom_STM_Event_Handler+0x238>
 8013c30:	a201      	add	r2, pc, #4	@ (adr r2, 8013c38 <Custom_STM_Event_Handler+0x3c>)
 8013c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c36:	bf00      	nop
 8013c38:	08013ca5 	.word	0x08013ca5
 8013c3c:	08013e35 	.word	0x08013e35
 8013c40:	08013e35 	.word	0x08013e35
 8013c44:	08013e35 	.word	0x08013e35
 8013c48:	08013e35 	.word	0x08013e35
 8013c4c:	08013e35 	.word	0x08013e35
 8013c50:	08013e35 	.word	0x08013e35
 8013c54:	08013e35 	.word	0x08013e35
 8013c58:	08013e35 	.word	0x08013e35
 8013c5c:	08013e35 	.word	0x08013e35
 8013c60:	08013e35 	.word	0x08013e35
 8013c64:	08013e35 	.word	0x08013e35
 8013c68:	08013e35 	.word	0x08013e35
 8013c6c:	08013e35 	.word	0x08013e35
 8013c70:	08013e35 	.word	0x08013e35
 8013c74:	08013e35 	.word	0x08013e35
 8013c78:	08013e35 	.word	0x08013e35
 8013c7c:	08013e35 	.word	0x08013e35
 8013c80:	08013e35 	.word	0x08013e35
 8013c84:	08013dd7 	.word	0x08013dd7
 8013c88:	08013e35 	.word	0x08013e35
 8013c8c:	08013e35 	.word	0x08013e35
 8013c90:	08013e35 	.word	0x08013e35
 8013c94:	08013e35 	.word	0x08013e35
 8013c98:	08013e35 	.word	0x08013e35
 8013c9c:	08013e35 	.word	0x08013e35
 8013ca0:	08013e17 	.word	0x08013e17
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8013ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ca6:	3302      	adds	r3, #2
 8013ca8:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013caa:	6a3b      	ldr	r3, [r7, #32]
 8013cac:	885b      	ldrh	r3, [r3, #2]
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	4b67      	ldr	r3, [pc, #412]	@ (8013e50 <Custom_STM_Event_Handler+0x254>)
 8013cb4:	885b      	ldrh	r3, [r3, #2]
 8013cb6:	3302      	adds	r3, #2
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d119      	bne.n	8013cf0 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013cbc:	2301      	movs	r3, #1
 8013cbe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8013cc2:	6a3b      	ldr	r3, [r7, #32]
 8013cc4:	7a1b      	ldrb	r3, [r3, #8]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d002      	beq.n	8013cd0 <Custom_STM_Event_Handler+0xd4>
 8013cca:	2b01      	cmp	r3, #1
 8013ccc:	d008      	beq.n	8013ce0 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8013cce:	e081      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT;
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013cd4:	f107 030c 	add.w	r3, r7, #12
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f7ff ff27 	bl	8013b2c <Custom_STM_App_Notification>
                break;
 8013cde:	e079      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013ce4:	f107 030c 	add.w	r3, r7, #12
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7ff ff1f 	bl	8013b2c <Custom_STM_App_Notification>
                break;
 8013cee:	e071      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013cf0:	6a3b      	ldr	r3, [r7, #32]
 8013cf2:	885b      	ldrh	r3, [r3, #2]
 8013cf4:	b29b      	uxth	r3, r3
 8013cf6:	461a      	mov	r2, r3
 8013cf8:	4b55      	ldr	r3, [pc, #340]	@ (8013e50 <Custom_STM_Event_Handler+0x254>)
 8013cfa:	889b      	ldrh	r3, [r3, #4]
 8013cfc:	3302      	adds	r3, #2
 8013cfe:	429a      	cmp	r2, r3
 8013d00:	d119      	bne.n	8013d36 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013d02:	2301      	movs	r3, #1
 8013d04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8013d08:	6a3b      	ldr	r3, [r7, #32]
 8013d0a:	7a1b      	ldrb	r3, [r3, #8]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d002      	beq.n	8013d16 <Custom_STM_Event_Handler+0x11a>
 8013d10:	2b01      	cmp	r3, #1
 8013d12:	d008      	beq.n	8013d26 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 8013d14:	e05e      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_DISABLED_EVT;
 8013d16:	2303      	movs	r3, #3
 8013d18:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013d1a:	f107 030c 	add.w	r3, r7, #12
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7ff ff04 	bl	8013b2c <Custom_STM_App_Notification>
                break;
 8013d24:	e056      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_ENABLED_EVT;
 8013d26:	2302      	movs	r3, #2
 8013d28:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013d2a:	f107 030c 	add.w	r3, r7, #12
 8013d2e:	4618      	mov	r0, r3
 8013d30:	f7ff fefc 	bl	8013b2c <Custom_STM_App_Notification>
                break;
 8013d34:	e04e      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8013d36:	6a3b      	ldr	r3, [r7, #32]
 8013d38:	885b      	ldrh	r3, [r3, #2]
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	461a      	mov	r2, r3
 8013d3e:	4b44      	ldr	r3, [pc, #272]	@ (8013e50 <Custom_STM_Event_Handler+0x254>)
 8013d40:	891b      	ldrh	r3, [r3, #8]
 8013d42:	3302      	adds	r3, #2
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d119      	bne.n	8013d7c <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013d48:	2301      	movs	r3, #1
 8013d4a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8013d4e:	6a3b      	ldr	r3, [r7, #32]
 8013d50:	7a1b      	ldrb	r3, [r3, #8]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d002      	beq.n	8013d5c <Custom_STM_Event_Handler+0x160>
 8013d56:	2b01      	cmp	r3, #1
 8013d58:	d008      	beq.n	8013d6c <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 8013d5a:	e03b      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT;
 8013d5c:	2306      	movs	r3, #6
 8013d5e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013d60:	f107 030c 	add.w	r3, r7, #12
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7ff fee1 	bl	8013b2c <Custom_STM_App_Notification>
                break;
 8013d6a:	e033      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT;
 8013d6c:	2305      	movs	r3, #5
 8013d6e:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8013d70:	f107 030c 	add.w	r3, r7, #12
 8013d74:	4618      	mov	r0, r3
 8013d76:	f7ff fed9 	bl	8013b2c <Custom_STM_App_Notification>
                break;
 8013d7a:	e02b      	b.n	8013dd4 <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013d7c:	6a3b      	ldr	r3, [r7, #32]
 8013d7e:	885b      	ldrh	r3, [r3, #2]
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	461a      	mov	r2, r3
 8013d84:	4b32      	ldr	r3, [pc, #200]	@ (8013e50 <Custom_STM_Event_Handler+0x254>)
 8013d86:	88db      	ldrh	r3, [r3, #6]
 8013d88:	3301      	adds	r3, #1
 8013d8a:	429a      	cmp	r2, r3
 8013d8c:	d154      	bne.n	8013e38 <Custom_STM_Event_Handler+0x23c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013d8e:	2301      	movs	r3, #1
 8013d90:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */



            memcpy (tsCmd.u8RxCmd, attribute_modified->Attr_Data, 10);
 8013d94:	6a3b      	ldr	r3, [r7, #32]
 8013d96:	f103 0208 	add.w	r2, r3, #8
 8013d9a:	4b2e      	ldr	r3, [pc, #184]	@ (8013e54 <Custom_STM_Event_Handler+0x258>)
 8013d9c:	3301      	adds	r3, #1
 8013d9e:	6810      	ldr	r0, [r2, #0]
 8013da0:	6851      	ldr	r1, [r2, #4]
 8013da2:	6018      	str	r0, [r3, #0]
 8013da4:	6059      	str	r1, [r3, #4]
 8013da6:	8912      	ldrh	r2, [r2, #8]
 8013da8:	811a      	strh	r2, [r3, #8]
            printf (tsCmd.c8RxCmd, tsCmd.u8RxCmd, 10);
 8013daa:	220a      	movs	r2, #10
 8013dac:	492a      	ldr	r1, [pc, #168]	@ (8013e58 <Custom_STM_Event_Handler+0x25c>)
 8013dae:	482b      	ldr	r0, [pc, #172]	@ (8013e5c <Custom_STM_Event_Handler+0x260>)
 8013db0:	f001 febc 	bl	8015b2c <iprintf>
        	//DIAG( "CMD In -> %c%c%c%c%c%c%d%c %d%d\r\n", tsCmd.u8RxCmd[0], tsCmd.u8RxCmd[1], tsCmd.u8RxCmd[2], tsCmd.u8RxCmd[3], tsCmd.u8RxCmd[4], tsCmd.u8RxCmd[5], tsCmd.u8RxCmd[6], tsCmd.u8RxCmd[7], tsCmd.u8RxCmd[8], tsCmd.u8RxCmd[9] );

            char str[]="";
 8013db4:	2300      	movs	r3, #0
 8013db6:	723b      	strb	r3, [r7, #8]
            for (uint8_t i=0 ; i < 10 ; i++)
 8013db8:	2300      	movs	r3, #0
 8013dba:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013dbe:	e004      	b.n	8013dca <Custom_STM_Event_Handler+0x1ce>
 8013dc0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8013dca:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8013dce:	2b09      	cmp	r3, #9
 8013dd0:	d9f6      	bls.n	8013dc0 <Custom_STM_Event_Handler+0x1c4>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8013dd2:	e031      	b.n	8013e38 <Custom_STM_Event_Handler+0x23c>
 8013dd4:	e030      	b.n	8013e38 <Custom_STM_Event_Handler+0x23c>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 8013dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013dd8:	3302      	adds	r3, #2
 8013dda:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8013ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013dde:	885b      	ldrh	r3, [r3, #2]
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	461a      	mov	r2, r3
 8013de4:	4b1a      	ldr	r3, [pc, #104]	@ (8013e50 <Custom_STM_Event_Handler+0x254>)
 8013de6:	895b      	ldrh	r3, [r3, #10]
 8013de8:	3301      	adds	r3, #1
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d126      	bne.n	8013e3c <Custom_STM_Event_Handler+0x240>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8013dee:	2301      	movs	r3, #1
 8013df0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 8013df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013df6:	881b      	ldrh	r3, [r3, #0]
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7fc fd7a 	bl	80108f4 <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */


 			aci_gatt_update_char_value(	CustomContext.CustomS_DataHdle,
 8013e00:	4b13      	ldr	r3, [pc, #76]	@ (8013e50 <Custom_STM_Event_Handler+0x254>)
 8013e02:	8818      	ldrh	r0, [r3, #0]
 8013e04:	4b12      	ldr	r3, [pc, #72]	@ (8013e50 <Custom_STM_Event_Handler+0x254>)
 8013e06:	8959      	ldrh	r1, [r3, #10]
 8013e08:	4b15      	ldr	r3, [pc, #84]	@ (8013e60 <Custom_STM_Event_Handler+0x264>)
 8013e0a:	9300      	str	r3, [sp, #0]
 8013e0c:	2314      	movs	r3, #20
 8013e0e:	2200      	movs	r2, #0
 8013e10:	f7fc fc72 	bl	80106f8 <aci_gatt_update_char_value>
            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 8013e14:	e012      	b.n	8013e3c <Custom_STM_Event_Handler+0x240>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8013e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013e18:	3302      	adds	r3, #2
 8013e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8013e1c:	2308      	movs	r3, #8
 8013e1e:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8013e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013e22:	881b      	ldrh	r3, [r3, #0]
 8013e24:	b29b      	uxth	r3, r3
 8013e26:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8013e28:	f107 030c 	add.w	r3, r7, #12
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7ff fe7d 	bl	8013b2c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8013e32:	e004      	b.n	8013e3e <Custom_STM_Event_Handler+0x242>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8013e34:	bf00      	nop
 8013e36:	e004      	b.n	8013e42 <Custom_STM_Event_Handler+0x246>
          break;
 8013e38:	bf00      	nop
 8013e3a:	e002      	b.n	8013e42 <Custom_STM_Event_Handler+0x246>
          break;
 8013e3c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013e3e:	e000      	b.n	8013e42 <Custom_STM_Event_Handler+0x246>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8013e40:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8013e42:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 8013e46:	4618      	mov	r0, r3
 8013e48:	3738      	adds	r7, #56	@ 0x38
 8013e4a:	46bd      	mov	sp, r7
 8013e4c:	bd80      	pop	{r7, pc}
 8013e4e:	bf00      	nop
 8013e50:	20001a80 	.word	0x20001a80
 8013e54:	20001638 	.word	0x20001638
 8013e58:	20001639 	.word	0x20001639
 8013e5c:	20001643 	.word	0x20001643
 8013e60:	0801921c 	.word	0x0801921c

08013e64 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b08c      	sub	sp, #48	@ 0x30
 8013e68:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013e6a:	2392      	movs	r3, #146	@ 0x92
 8013e6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8013e6e:	48a2      	ldr	r0, [pc, #648]	@ (80140f8 <SVCCTL_InitCustomSvc+0x294>)
 8013e70:	f7fd f8e4 	bl	801103c <SVCCTL_RegisterSvcHandler>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 8013e74:	230e      	movs	r3, #14
 8013e76:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 8013e78:	238f      	movs	r3, #143	@ 0x8f
 8013e7a:	713b      	strb	r3, [r7, #4]
 8013e7c:	23e5      	movs	r3, #229	@ 0xe5
 8013e7e:	717b      	strb	r3, [r7, #5]
 8013e80:	23b3      	movs	r3, #179	@ 0xb3
 8013e82:	71bb      	strb	r3, [r7, #6]
 8013e84:	23d5      	movs	r3, #213	@ 0xd5
 8013e86:	71fb      	strb	r3, [r7, #7]
 8013e88:	232e      	movs	r3, #46	@ 0x2e
 8013e8a:	723b      	strb	r3, [r7, #8]
 8013e8c:	237f      	movs	r3, #127	@ 0x7f
 8013e8e:	727b      	strb	r3, [r7, #9]
 8013e90:	234a      	movs	r3, #74	@ 0x4a
 8013e92:	72bb      	strb	r3, [r7, #10]
 8013e94:	2398      	movs	r3, #152	@ 0x98
 8013e96:	72fb      	strb	r3, [r7, #11]
 8013e98:	232a      	movs	r3, #42	@ 0x2a
 8013e9a:	733b      	strb	r3, [r7, #12]
 8013e9c:	2348      	movs	r3, #72	@ 0x48
 8013e9e:	737b      	strb	r3, [r7, #13]
 8013ea0:	237a      	movs	r3, #122	@ 0x7a
 8013ea2:	73bb      	strb	r3, [r7, #14]
 8013ea4:	23cc      	movs	r3, #204	@ 0xcc
 8013ea6:	73fb      	strb	r3, [r7, #15]
 8013ea8:	2300      	movs	r3, #0
 8013eaa:	743b      	strb	r3, [r7, #16]
 8013eac:	2300      	movs	r3, #0
 8013eae:	747b      	strb	r3, [r7, #17]
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	74bb      	strb	r3, [r7, #18]
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8013eb8:	7dbb      	ldrb	r3, [r7, #22]
 8013eba:	1d39      	adds	r1, r7, #4
 8013ebc:	4a8f      	ldr	r2, [pc, #572]	@ (80140fc <SVCCTL_InitCustomSvc+0x298>)
 8013ebe:	9200      	str	r2, [sp, #0]
 8013ec0:	2201      	movs	r2, #1
 8013ec2:	2002      	movs	r0, #2
 8013ec4:	f7fc fa3a 	bl	801033c <aci_gatt_add_service>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomS_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013ecc:	7dfb      	ldrb	r3, [r7, #23]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d00f      	beq.n	8013ef2 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: S_DATA, error code: 0x%x \n\r", ret);
 8013ed2:	488b      	ldr	r0, [pc, #556]	@ (8014100 <SVCCTL_InitCustomSvc+0x29c>)
 8013ed4:	f7fd ff2e 	bl	8011d34 <DbgTraceGetFileName>
 8013ed8:	4601      	mov	r1, r0
 8013eda:	f240 13fd 	movw	r3, #509	@ 0x1fd
 8013ede:	4a89      	ldr	r2, [pc, #548]	@ (8014104 <SVCCTL_InitCustomSvc+0x2a0>)
 8013ee0:	4889      	ldr	r0, [pc, #548]	@ (8014108 <SVCCTL_InitCustomSvc+0x2a4>)
 8013ee2:	f001 fe23 	bl	8015b2c <iprintf>
 8013ee6:	7dfb      	ldrb	r3, [r7, #23]
 8013ee8:	4619      	mov	r1, r3
 8013eea:	4888      	ldr	r0, [pc, #544]	@ (801410c <SVCCTL_InitCustomSvc+0x2a8>)
 8013eec:	f001 fe1e 	bl	8015b2c <iprintf>
 8013ef0:	e00c      	b.n	8013f0c <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: S_DATA \n\r");
 8013ef2:	4883      	ldr	r0, [pc, #524]	@ (8014100 <SVCCTL_InitCustomSvc+0x29c>)
 8013ef4:	f7fd ff1e 	bl	8011d34 <DbgTraceGetFileName>
 8013ef8:	4601      	mov	r1, r0
 8013efa:	f240 2301 	movw	r3, #513	@ 0x201
 8013efe:	4a81      	ldr	r2, [pc, #516]	@ (8014104 <SVCCTL_InitCustomSvc+0x2a0>)
 8013f00:	4881      	ldr	r0, [pc, #516]	@ (8014108 <SVCCTL_InitCustomSvc+0x2a4>)
 8013f02:	f001 fe13 	bl	8015b2c <iprintf>
 8013f06:	4882      	ldr	r0, [pc, #520]	@ (8014110 <SVCCTL_InitCustomSvc+0x2ac>)
 8013f08:	f001 fe10 	bl	8015b2c <iprintf>
  }

  /**
   *  IMU_ACCEL
   */
  COPY_IMU_ACCEL_UUID(uuid.Char_UUID_128);
 8013f0c:	2319      	movs	r3, #25
 8013f0e:	713b      	strb	r3, [r7, #4]
 8013f10:	23ed      	movs	r3, #237	@ 0xed
 8013f12:	717b      	strb	r3, [r7, #5]
 8013f14:	2382      	movs	r3, #130	@ 0x82
 8013f16:	71bb      	strb	r3, [r7, #6]
 8013f18:	23ae      	movs	r3, #174	@ 0xae
 8013f1a:	71fb      	strb	r3, [r7, #7]
 8013f1c:	23ed      	movs	r3, #237	@ 0xed
 8013f1e:	723b      	strb	r3, [r7, #8]
 8013f20:	2321      	movs	r3, #33	@ 0x21
 8013f22:	727b      	strb	r3, [r7, #9]
 8013f24:	234c      	movs	r3, #76	@ 0x4c
 8013f26:	72bb      	strb	r3, [r7, #10]
 8013f28:	239d      	movs	r3, #157	@ 0x9d
 8013f2a:	72fb      	strb	r3, [r7, #11]
 8013f2c:	2341      	movs	r3, #65	@ 0x41
 8013f2e:	733b      	strb	r3, [r7, #12]
 8013f30:	2345      	movs	r3, #69	@ 0x45
 8013f32:	737b      	strb	r3, [r7, #13]
 8013f34:	2322      	movs	r3, #34	@ 0x22
 8013f36:	73bb      	strb	r3, [r7, #14]
 8013f38:	238e      	movs	r3, #142	@ 0x8e
 8013f3a:	73fb      	strb	r3, [r7, #15]
 8013f3c:	2336      	movs	r3, #54	@ 0x36
 8013f3e:	743b      	strb	r3, [r7, #16]
 8013f40:	232a      	movs	r3, #42	@ 0x2a
 8013f42:	747b      	strb	r3, [r7, #17]
 8013f44:	2300      	movs	r3, #0
 8013f46:	74bb      	strb	r3, [r7, #18]
 8013f48:	2300      	movs	r3, #0
 8013f4a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013f4c:	4b6b      	ldr	r3, [pc, #428]	@ (80140fc <SVCCTL_InitCustomSvc+0x298>)
 8013f4e:	8818      	ldrh	r0, [r3, #0]
 8013f50:	4b70      	ldr	r3, [pc, #448]	@ (8014114 <SVCCTL_InitCustomSvc+0x2b0>)
 8013f52:	881b      	ldrh	r3, [r3, #0]
 8013f54:	1d3a      	adds	r2, r7, #4
 8013f56:	4970      	ldr	r1, [pc, #448]	@ (8014118 <SVCCTL_InitCustomSvc+0x2b4>)
 8013f58:	9105      	str	r1, [sp, #20]
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	9104      	str	r1, [sp, #16]
 8013f5e:	2110      	movs	r1, #16
 8013f60:	9103      	str	r1, [sp, #12]
 8013f62:	2107      	movs	r1, #7
 8013f64:	9102      	str	r1, [sp, #8]
 8013f66:	2100      	movs	r1, #0
 8013f68:	9101      	str	r1, [sp, #4]
 8013f6a:	2110      	movs	r1, #16
 8013f6c:	9100      	str	r1, [sp, #0]
 8013f6e:	2102      	movs	r1, #2
 8013f70:	f7fc faba 	bl	80104e8 <aci_gatt_add_char>
 8013f74:	4603      	mov	r3, r0
 8013f76:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAccel_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8013f78:	7dfb      	ldrb	r3, [r7, #23]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d00f      	beq.n	8013f9e <SVCCTL_InitCustomSvc+0x13a>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCEL_S, error code: 0x%x \n\r", ret);
 8013f7e:	4860      	ldr	r0, [pc, #384]	@ (8014100 <SVCCTL_InitCustomSvc+0x29c>)
 8013f80:	f7fd fed8 	bl	8011d34 <DbgTraceGetFileName>
 8013f84:	4601      	mov	r1, r0
 8013f86:	f240 2313 	movw	r3, #531	@ 0x213
 8013f8a:	4a5e      	ldr	r2, [pc, #376]	@ (8014104 <SVCCTL_InitCustomSvc+0x2a0>)
 8013f8c:	485e      	ldr	r0, [pc, #376]	@ (8014108 <SVCCTL_InitCustomSvc+0x2a4>)
 8013f8e:	f001 fdcd 	bl	8015b2c <iprintf>
 8013f92:	7dfb      	ldrb	r3, [r7, #23]
 8013f94:	4619      	mov	r1, r3
 8013f96:	4861      	ldr	r0, [pc, #388]	@ (801411c <SVCCTL_InitCustomSvc+0x2b8>)
 8013f98:	f001 fdc8 	bl	8015b2c <iprintf>
 8013f9c:	e00c      	b.n	8013fb8 <SVCCTL_InitCustomSvc+0x154>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCEL_S \n\r");
 8013f9e:	4858      	ldr	r0, [pc, #352]	@ (8014100 <SVCCTL_InitCustomSvc+0x29c>)
 8013fa0:	f7fd fec8 	bl	8011d34 <DbgTraceGetFileName>
 8013fa4:	4601      	mov	r1, r0
 8013fa6:	f240 2317 	movw	r3, #535	@ 0x217
 8013faa:	4a56      	ldr	r2, [pc, #344]	@ (8014104 <SVCCTL_InitCustomSvc+0x2a0>)
 8013fac:	4856      	ldr	r0, [pc, #344]	@ (8014108 <SVCCTL_InitCustomSvc+0x2a4>)
 8013fae:	f001 fdbd 	bl	8015b2c <iprintf>
 8013fb2:	485b      	ldr	r0, [pc, #364]	@ (8014120 <SVCCTL_InitCustomSvc+0x2bc>)
 8013fb4:	f001 fdba 	bl	8015b2c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  ECG_SENSOR
   */
  COPY_ECG_SENSOR_UUID(uuid.Char_UUID_128);
 8013fb8:	2319      	movs	r3, #25
 8013fba:	713b      	strb	r3, [r7, #4]
 8013fbc:	23ed      	movs	r3, #237	@ 0xed
 8013fbe:	717b      	strb	r3, [r7, #5]
 8013fc0:	2382      	movs	r3, #130	@ 0x82
 8013fc2:	71bb      	strb	r3, [r7, #6]
 8013fc4:	23ae      	movs	r3, #174	@ 0xae
 8013fc6:	71fb      	strb	r3, [r7, #7]
 8013fc8:	23ed      	movs	r3, #237	@ 0xed
 8013fca:	723b      	strb	r3, [r7, #8]
 8013fcc:	2321      	movs	r3, #33	@ 0x21
 8013fce:	727b      	strb	r3, [r7, #9]
 8013fd0:	234c      	movs	r3, #76	@ 0x4c
 8013fd2:	72bb      	strb	r3, [r7, #10]
 8013fd4:	239d      	movs	r3, #157	@ 0x9d
 8013fd6:	72fb      	strb	r3, [r7, #11]
 8013fd8:	2341      	movs	r3, #65	@ 0x41
 8013fda:	733b      	strb	r3, [r7, #12]
 8013fdc:	2345      	movs	r3, #69	@ 0x45
 8013fde:	737b      	strb	r3, [r7, #13]
 8013fe0:	2322      	movs	r3, #34	@ 0x22
 8013fe2:	73bb      	strb	r3, [r7, #14]
 8013fe4:	238e      	movs	r3, #142	@ 0x8e
 8013fe6:	73fb      	strb	r3, [r7, #15]
 8013fe8:	2337      	movs	r3, #55	@ 0x37
 8013fea:	743b      	strb	r3, [r7, #16]
 8013fec:	232a      	movs	r3, #42	@ 0x2a
 8013fee:	747b      	strb	r3, [r7, #17]
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	74bb      	strb	r3, [r7, #18]
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8013ff8:	4b40      	ldr	r3, [pc, #256]	@ (80140fc <SVCCTL_InitCustomSvc+0x298>)
 8013ffa:	8818      	ldrh	r0, [r3, #0]
 8013ffc:	4b49      	ldr	r3, [pc, #292]	@ (8014124 <SVCCTL_InitCustomSvc+0x2c0>)
 8013ffe:	881b      	ldrh	r3, [r3, #0]
 8014000:	1d3a      	adds	r2, r7, #4
 8014002:	4949      	ldr	r1, [pc, #292]	@ (8014128 <SVCCTL_InitCustomSvc+0x2c4>)
 8014004:	9105      	str	r1, [sp, #20]
 8014006:	2100      	movs	r1, #0
 8014008:	9104      	str	r1, [sp, #16]
 801400a:	2110      	movs	r1, #16
 801400c:	9103      	str	r1, [sp, #12]
 801400e:	2107      	movs	r1, #7
 8014010:	9102      	str	r1, [sp, #8]
 8014012:	2100      	movs	r1, #0
 8014014:	9101      	str	r1, [sp, #4]
 8014016:	2110      	movs	r1, #16
 8014018:	9100      	str	r1, [sp, #0]
 801401a:	2102      	movs	r1, #2
 801401c:	f7fc fa64 	bl	80104e8 <aci_gatt_add_char>
 8014020:	4603      	mov	r3, r0
 8014022:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcg_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014024:	7dfb      	ldrb	r3, [r7, #23]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d00f      	beq.n	801404a <SVCCTL_InitCustomSvc+0x1e6>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ECG_S, error code: 0x%x \n\r", ret);
 801402a:	4835      	ldr	r0, [pc, #212]	@ (8014100 <SVCCTL_InitCustomSvc+0x29c>)
 801402c:	f7fd fe82 	bl	8011d34 <DbgTraceGetFileName>
 8014030:	4601      	mov	r1, r0
 8014032:	f240 232d 	movw	r3, #557	@ 0x22d
 8014036:	4a33      	ldr	r2, [pc, #204]	@ (8014104 <SVCCTL_InitCustomSvc+0x2a0>)
 8014038:	4833      	ldr	r0, [pc, #204]	@ (8014108 <SVCCTL_InitCustomSvc+0x2a4>)
 801403a:	f001 fd77 	bl	8015b2c <iprintf>
 801403e:	7dfb      	ldrb	r3, [r7, #23]
 8014040:	4619      	mov	r1, r3
 8014042:	483a      	ldr	r0, [pc, #232]	@ (801412c <SVCCTL_InitCustomSvc+0x2c8>)
 8014044:	f001 fd72 	bl	8015b2c <iprintf>
 8014048:	e00c      	b.n	8014064 <SVCCTL_InitCustomSvc+0x200>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ECG_S \n\r");
 801404a:	482d      	ldr	r0, [pc, #180]	@ (8014100 <SVCCTL_InitCustomSvc+0x29c>)
 801404c:	f7fd fe72 	bl	8011d34 <DbgTraceGetFileName>
 8014050:	4601      	mov	r1, r0
 8014052:	f240 2331 	movw	r3, #561	@ 0x231
 8014056:	4a2b      	ldr	r2, [pc, #172]	@ (8014104 <SVCCTL_InitCustomSvc+0x2a0>)
 8014058:	482b      	ldr	r0, [pc, #172]	@ (8014108 <SVCCTL_InitCustomSvc+0x2a4>)
 801405a:	f001 fd67 	bl	8015b2c <iprintf>
 801405e:	4834      	ldr	r0, [pc, #208]	@ (8014130 <SVCCTL_InitCustomSvc+0x2cc>)
 8014060:	f001 fd64 	bl	8015b2c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  COMMAND
   */
  COPY_COMMAND_UUID(uuid.Char_UUID_128);
 8014064:	2319      	movs	r3, #25
 8014066:	713b      	strb	r3, [r7, #4]
 8014068:	23ed      	movs	r3, #237	@ 0xed
 801406a:	717b      	strb	r3, [r7, #5]
 801406c:	2382      	movs	r3, #130	@ 0x82
 801406e:	71bb      	strb	r3, [r7, #6]
 8014070:	23ae      	movs	r3, #174	@ 0xae
 8014072:	71fb      	strb	r3, [r7, #7]
 8014074:	23ed      	movs	r3, #237	@ 0xed
 8014076:	723b      	strb	r3, [r7, #8]
 8014078:	2321      	movs	r3, #33	@ 0x21
 801407a:	727b      	strb	r3, [r7, #9]
 801407c:	234c      	movs	r3, #76	@ 0x4c
 801407e:	72bb      	strb	r3, [r7, #10]
 8014080:	239d      	movs	r3, #157	@ 0x9d
 8014082:	72fb      	strb	r3, [r7, #11]
 8014084:	2341      	movs	r3, #65	@ 0x41
 8014086:	733b      	strb	r3, [r7, #12]
 8014088:	2345      	movs	r3, #69	@ 0x45
 801408a:	737b      	strb	r3, [r7, #13]
 801408c:	2322      	movs	r3, #34	@ 0x22
 801408e:	73bb      	strb	r3, [r7, #14]
 8014090:	238e      	movs	r3, #142	@ 0x8e
 8014092:	73fb      	strb	r3, [r7, #15]
 8014094:	2338      	movs	r3, #56	@ 0x38
 8014096:	743b      	strb	r3, [r7, #16]
 8014098:	232a      	movs	r3, #42	@ 0x2a
 801409a:	747b      	strb	r3, [r7, #17]
 801409c:	2300      	movs	r3, #0
 801409e:	74bb      	strb	r3, [r7, #18]
 80140a0:	2300      	movs	r3, #0
 80140a2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 80140a4:	4b15      	ldr	r3, [pc, #84]	@ (80140fc <SVCCTL_InitCustomSvc+0x298>)
 80140a6:	8818      	ldrh	r0, [r3, #0]
 80140a8:	4b22      	ldr	r3, [pc, #136]	@ (8014134 <SVCCTL_InitCustomSvc+0x2d0>)
 80140aa:	881b      	ldrh	r3, [r3, #0]
 80140ac:	1d3a      	adds	r2, r7, #4
 80140ae:	4922      	ldr	r1, [pc, #136]	@ (8014138 <SVCCTL_InitCustomSvc+0x2d4>)
 80140b0:	9105      	str	r1, [sp, #20]
 80140b2:	2100      	movs	r1, #0
 80140b4:	9104      	str	r1, [sp, #16]
 80140b6:	2110      	movs	r1, #16
 80140b8:	9103      	str	r1, [sp, #12]
 80140ba:	2101      	movs	r1, #1
 80140bc:	9102      	str	r1, [sp, #8]
 80140be:	2100      	movs	r1, #0
 80140c0:	9101      	str	r1, [sp, #4]
 80140c2:	2108      	movs	r1, #8
 80140c4:	9100      	str	r1, [sp, #0]
 80140c6:	2102      	movs	r1, #2
 80140c8:	f7fc fa0e 	bl	80104e8 <aci_gatt_add_char>
 80140cc:	4603      	mov	r3, r0
 80140ce:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCmdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80140d0:	7dfb      	ldrb	r3, [r7, #23]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d034      	beq.n	8014140 <SVCCTL_InitCustomSvc+0x2dc>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CMD, error code: 0x%x \n\r", ret);
 80140d6:	480a      	ldr	r0, [pc, #40]	@ (8014100 <SVCCTL_InitCustomSvc+0x29c>)
 80140d8:	f7fd fe2c 	bl	8011d34 <DbgTraceGetFileName>
 80140dc:	4601      	mov	r1, r0
 80140de:	f240 2347 	movw	r3, #583	@ 0x247
 80140e2:	4a08      	ldr	r2, [pc, #32]	@ (8014104 <SVCCTL_InitCustomSvc+0x2a0>)
 80140e4:	4808      	ldr	r0, [pc, #32]	@ (8014108 <SVCCTL_InitCustomSvc+0x2a4>)
 80140e6:	f001 fd21 	bl	8015b2c <iprintf>
 80140ea:	7dfb      	ldrb	r3, [r7, #23]
 80140ec:	4619      	mov	r1, r3
 80140ee:	4813      	ldr	r0, [pc, #76]	@ (801413c <SVCCTL_InitCustomSvc+0x2d8>)
 80140f0:	f001 fd1c 	bl	8015b2c <iprintf>
 80140f4:	e031      	b.n	801415a <SVCCTL_InitCustomSvc+0x2f6>
 80140f6:	bf00      	nop
 80140f8:	08013bfd 	.word	0x08013bfd
 80140fc:	20001a80 	.word	0x20001a80
 8014100:	08019230 	.word	0x08019230
 8014104:	08019d18 	.word	0x08019d18
 8014108:	08019250 	.word	0x08019250
 801410c:	08019264 	.word	0x08019264
 8014110:	080192ac 	.word	0x080192ac
 8014114:	200000bc 	.word	0x200000bc
 8014118:	20001a82 	.word	0x20001a82
 801411c:	080192e0 	.word	0x080192e0
 8014120:	08019328 	.word	0x08019328
 8014124:	200000be 	.word	0x200000be
 8014128:	20001a84 	.word	0x20001a84
 801412c:	0801935c 	.word	0x0801935c
 8014130:	080193a0 	.word	0x080193a0
 8014134:	200000c0 	.word	0x200000c0
 8014138:	20001a86 	.word	0x20001a86
 801413c:	080193d4 	.word	0x080193d4
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CMD \n\r");
 8014140:	485e      	ldr	r0, [pc, #376]	@ (80142bc <SVCCTL_InitCustomSvc+0x458>)
 8014142:	f7fd fdf7 	bl	8011d34 <DbgTraceGetFileName>
 8014146:	4601      	mov	r1, r0
 8014148:	f240 234b 	movw	r3, #587	@ 0x24b
 801414c:	4a5c      	ldr	r2, [pc, #368]	@ (80142c0 <SVCCTL_InitCustomSvc+0x45c>)
 801414e:	485d      	ldr	r0, [pc, #372]	@ (80142c4 <SVCCTL_InitCustomSvc+0x460>)
 8014150:	f001 fcec 	bl	8015b2c <iprintf>
 8014154:	485c      	ldr	r0, [pc, #368]	@ (80142c8 <SVCCTL_InitCustomSvc+0x464>)
 8014156:	f001 fce9 	bl	8015b2c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  ALL_SENSOR
   */
  COPY_ALL_SENSOR_UUID(uuid.Char_UUID_128);
 801415a:	2319      	movs	r3, #25
 801415c:	713b      	strb	r3, [r7, #4]
 801415e:	23ed      	movs	r3, #237	@ 0xed
 8014160:	717b      	strb	r3, [r7, #5]
 8014162:	2382      	movs	r3, #130	@ 0x82
 8014164:	71bb      	strb	r3, [r7, #6]
 8014166:	23ae      	movs	r3, #174	@ 0xae
 8014168:	71fb      	strb	r3, [r7, #7]
 801416a:	23ed      	movs	r3, #237	@ 0xed
 801416c:	723b      	strb	r3, [r7, #8]
 801416e:	2321      	movs	r3, #33	@ 0x21
 8014170:	727b      	strb	r3, [r7, #9]
 8014172:	234c      	movs	r3, #76	@ 0x4c
 8014174:	72bb      	strb	r3, [r7, #10]
 8014176:	239d      	movs	r3, #157	@ 0x9d
 8014178:	72fb      	strb	r3, [r7, #11]
 801417a:	2341      	movs	r3, #65	@ 0x41
 801417c:	733b      	strb	r3, [r7, #12]
 801417e:	2345      	movs	r3, #69	@ 0x45
 8014180:	737b      	strb	r3, [r7, #13]
 8014182:	2322      	movs	r3, #34	@ 0x22
 8014184:	73bb      	strb	r3, [r7, #14]
 8014186:	238e      	movs	r3, #142	@ 0x8e
 8014188:	73fb      	strb	r3, [r7, #15]
 801418a:	2339      	movs	r3, #57	@ 0x39
 801418c:	743b      	strb	r3, [r7, #16]
 801418e:	232a      	movs	r3, #42	@ 0x2a
 8014190:	747b      	strb	r3, [r7, #17]
 8014192:	2300      	movs	r3, #0
 8014194:	74bb      	strb	r3, [r7, #18]
 8014196:	2300      	movs	r3, #0
 8014198:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 801419a:	4b4c      	ldr	r3, [pc, #304]	@ (80142cc <SVCCTL_InitCustomSvc+0x468>)
 801419c:	8818      	ldrh	r0, [r3, #0]
 801419e:	4b4c      	ldr	r3, [pc, #304]	@ (80142d0 <SVCCTL_InitCustomSvc+0x46c>)
 80141a0:	881b      	ldrh	r3, [r3, #0]
 80141a2:	1d3a      	adds	r2, r7, #4
 80141a4:	494b      	ldr	r1, [pc, #300]	@ (80142d4 <SVCCTL_InitCustomSvc+0x470>)
 80141a6:	9105      	str	r1, [sp, #20]
 80141a8:	2100      	movs	r1, #0
 80141aa:	9104      	str	r1, [sp, #16]
 80141ac:	2110      	movs	r1, #16
 80141ae:	9103      	str	r1, [sp, #12]
 80141b0:	2107      	movs	r1, #7
 80141b2:	9102      	str	r1, [sp, #8]
 80141b4:	2100      	movs	r1, #0
 80141b6:	9101      	str	r1, [sp, #4]
 80141b8:	2110      	movs	r1, #16
 80141ba:	9100      	str	r1, [sp, #0]
 80141bc:	2102      	movs	r1, #2
 80141be:	f7fc f993 	bl	80104e8 <aci_gatt_add_char>
 80141c2:	4603      	mov	r3, r0
 80141c4:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAll_SensHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80141c6:	7dfb      	ldrb	r3, [r7, #23]
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d00f      	beq.n	80141ec <SVCCTL_InitCustomSvc+0x388>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ALL_SENS, error code: 0x%x \n\r", ret);
 80141cc:	483b      	ldr	r0, [pc, #236]	@ (80142bc <SVCCTL_InitCustomSvc+0x458>)
 80141ce:	f7fd fdb1 	bl	8011d34 <DbgTraceGetFileName>
 80141d2:	4601      	mov	r1, r0
 80141d4:	f240 2361 	movw	r3, #609	@ 0x261
 80141d8:	4a39      	ldr	r2, [pc, #228]	@ (80142c0 <SVCCTL_InitCustomSvc+0x45c>)
 80141da:	483a      	ldr	r0, [pc, #232]	@ (80142c4 <SVCCTL_InitCustomSvc+0x460>)
 80141dc:	f001 fca6 	bl	8015b2c <iprintf>
 80141e0:	7dfb      	ldrb	r3, [r7, #23]
 80141e2:	4619      	mov	r1, r3
 80141e4:	483c      	ldr	r0, [pc, #240]	@ (80142d8 <SVCCTL_InitCustomSvc+0x474>)
 80141e6:	f001 fca1 	bl	8015b2c <iprintf>
 80141ea:	e00c      	b.n	8014206 <SVCCTL_InitCustomSvc+0x3a2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ALL_SENS \n\r");
 80141ec:	4833      	ldr	r0, [pc, #204]	@ (80142bc <SVCCTL_InitCustomSvc+0x458>)
 80141ee:	f7fd fda1 	bl	8011d34 <DbgTraceGetFileName>
 80141f2:	4601      	mov	r1, r0
 80141f4:	f240 2365 	movw	r3, #613	@ 0x265
 80141f8:	4a31      	ldr	r2, [pc, #196]	@ (80142c0 <SVCCTL_InitCustomSvc+0x45c>)
 80141fa:	4832      	ldr	r0, [pc, #200]	@ (80142c4 <SVCCTL_InitCustomSvc+0x460>)
 80141fc:	f001 fc96 	bl	8015b2c <iprintf>
 8014200:	4836      	ldr	r0, [pc, #216]	@ (80142dc <SVCCTL_InitCustomSvc+0x478>)
 8014202:	f001 fc93 	bl	8015b2c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  READ_DEVICE_INFO
   */
  COPY_READ_DEVICE_INFO_UUID(uuid.Char_UUID_128);
 8014206:	2319      	movs	r3, #25
 8014208:	713b      	strb	r3, [r7, #4]
 801420a:	23ed      	movs	r3, #237	@ 0xed
 801420c:	717b      	strb	r3, [r7, #5]
 801420e:	2382      	movs	r3, #130	@ 0x82
 8014210:	71bb      	strb	r3, [r7, #6]
 8014212:	23ae      	movs	r3, #174	@ 0xae
 8014214:	71fb      	strb	r3, [r7, #7]
 8014216:	23ed      	movs	r3, #237	@ 0xed
 8014218:	723b      	strb	r3, [r7, #8]
 801421a:	2321      	movs	r3, #33	@ 0x21
 801421c:	727b      	strb	r3, [r7, #9]
 801421e:	234c      	movs	r3, #76	@ 0x4c
 8014220:	72bb      	strb	r3, [r7, #10]
 8014222:	239d      	movs	r3, #157	@ 0x9d
 8014224:	72fb      	strb	r3, [r7, #11]
 8014226:	2341      	movs	r3, #65	@ 0x41
 8014228:	733b      	strb	r3, [r7, #12]
 801422a:	2345      	movs	r3, #69	@ 0x45
 801422c:	737b      	strb	r3, [r7, #13]
 801422e:	2322      	movs	r3, #34	@ 0x22
 8014230:	73bb      	strb	r3, [r7, #14]
 8014232:	238e      	movs	r3, #142	@ 0x8e
 8014234:	73fb      	strb	r3, [r7, #15]
 8014236:	2340      	movs	r3, #64	@ 0x40
 8014238:	743b      	strb	r3, [r7, #16]
 801423a:	232a      	movs	r3, #42	@ 0x2a
 801423c:	747b      	strb	r3, [r7, #17]
 801423e:	2300      	movs	r3, #0
 8014240:	74bb      	strb	r3, [r7, #18]
 8014242:	2300      	movs	r3, #0
 8014244:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014246:	4b21      	ldr	r3, [pc, #132]	@ (80142cc <SVCCTL_InitCustomSvc+0x468>)
 8014248:	8818      	ldrh	r0, [r3, #0]
 801424a:	4b25      	ldr	r3, [pc, #148]	@ (80142e0 <SVCCTL_InitCustomSvc+0x47c>)
 801424c:	881b      	ldrh	r3, [r3, #0]
 801424e:	1d3a      	adds	r2, r7, #4
 8014250:	4924      	ldr	r1, [pc, #144]	@ (80142e4 <SVCCTL_InitCustomSvc+0x480>)
 8014252:	9105      	str	r1, [sp, #20]
 8014254:	2100      	movs	r1, #0
 8014256:	9104      	str	r1, [sp, #16]
 8014258:	2110      	movs	r1, #16
 801425a:	9103      	str	r1, [sp, #12]
 801425c:	2104      	movs	r1, #4
 801425e:	9102      	str	r1, [sp, #8]
 8014260:	2100      	movs	r1, #0
 8014262:	9101      	str	r1, [sp, #4]
 8014264:	2102      	movs	r1, #2
 8014266:	9100      	str	r1, [sp, #0]
 8014268:	2102      	movs	r1, #2
 801426a:	f7fc f93d 	bl	80104e8 <aci_gatt_add_char>
 801426e:	4603      	mov	r3, r0
 8014270:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDevice_InfoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014272:	7dfb      	ldrb	r3, [r7, #23]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d00f      	beq.n	8014298 <SVCCTL_InitCustomSvc+0x434>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DEVICE_INFO, error code: 0x%x \n\r", ret);
 8014278:	4810      	ldr	r0, [pc, #64]	@ (80142bc <SVCCTL_InitCustomSvc+0x458>)
 801427a:	f7fd fd5b 	bl	8011d34 <DbgTraceGetFileName>
 801427e:	4601      	mov	r1, r0
 8014280:	f240 237b 	movw	r3, #635	@ 0x27b
 8014284:	4a0e      	ldr	r2, [pc, #56]	@ (80142c0 <SVCCTL_InitCustomSvc+0x45c>)
 8014286:	480f      	ldr	r0, [pc, #60]	@ (80142c4 <SVCCTL_InitCustomSvc+0x460>)
 8014288:	f001 fc50 	bl	8015b2c <iprintf>
 801428c:	7dfb      	ldrb	r3, [r7, #23]
 801428e:	4619      	mov	r1, r3
 8014290:	4815      	ldr	r0, [pc, #84]	@ (80142e8 <SVCCTL_InitCustomSvc+0x484>)
 8014292:	f001 fc4b 	bl	8015b2c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8014296:	e00d      	b.n	80142b4 <SVCCTL_InitCustomSvc+0x450>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DEVICE_INFO \n\r");
 8014298:	4808      	ldr	r0, [pc, #32]	@ (80142bc <SVCCTL_InitCustomSvc+0x458>)
 801429a:	f7fd fd4b 	bl	8011d34 <DbgTraceGetFileName>
 801429e:	4601      	mov	r1, r0
 80142a0:	f240 237f 	movw	r3, #639	@ 0x27f
 80142a4:	4a06      	ldr	r2, [pc, #24]	@ (80142c0 <SVCCTL_InitCustomSvc+0x45c>)
 80142a6:	4807      	ldr	r0, [pc, #28]	@ (80142c4 <SVCCTL_InitCustomSvc+0x460>)
 80142a8:	f001 fc40 	bl	8015b2c <iprintf>
 80142ac:	480f      	ldr	r0, [pc, #60]	@ (80142ec <SVCCTL_InitCustomSvc+0x488>)
 80142ae:	f001 fc3d 	bl	8015b2c <iprintf>
  return;
 80142b2:	bf00      	nop
}
 80142b4:	3718      	adds	r7, #24
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	08019230 	.word	0x08019230
 80142c0:	08019d18 	.word	0x08019d18
 80142c4:	08019250 	.word	0x08019250
 80142c8:	08019418 	.word	0x08019418
 80142cc:	20001a80 	.word	0x20001a80
 80142d0:	200000c2 	.word	0x200000c2
 80142d4:	20001a88 	.word	0x20001a88
 80142d8:	08019448 	.word	0x08019448
 80142dc:	08019490 	.word	0x08019490
 80142e0:	200000c4 	.word	0x200000c4
 80142e4:	20001a8a 	.word	0x20001a8a
 80142e8:	080194c8 	.word	0x080194c8
 80142ec:	08019514 	.word	0x08019514

080142f0 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b086      	sub	sp, #24
 80142f4:	af02      	add	r7, sp, #8
 80142f6:	4603      	mov	r3, r0
 80142f8:	6039      	str	r1, [r7, #0]
 80142fa:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80142fc:	2392      	movs	r3, #146	@ 0x92
 80142fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8014300:	79fb      	ldrb	r3, [r7, #7]
 8014302:	2b04      	cmp	r3, #4
 8014304:	f200 811b 	bhi.w	801453e <Custom_STM_App_Update_Char+0x24e>
 8014308:	a201      	add	r2, pc, #4	@ (adr r2, 8014310 <Custom_STM_App_Update_Char+0x20>)
 801430a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801430e:	bf00      	nop
 8014310:	08014325 	.word	0x08014325
 8014314:	08014393 	.word	0x08014393
 8014318:	080143f3 	.word	0x080143f3
 801431c:	08014453 	.word	0x08014453
 8014320:	080144df 	.word	0x080144df
  {

    case CUSTOM_STM_ACCEL_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014324:	4b8a      	ldr	r3, [pc, #552]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 8014326:	8818      	ldrh	r0, [r3, #0]
 8014328:	4b89      	ldr	r3, [pc, #548]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 801432a:	8859      	ldrh	r1, [r3, #2]
 801432c:	4b89      	ldr	r3, [pc, #548]	@ (8014554 <Custom_STM_App_Update_Char+0x264>)
 801432e:	881b      	ldrh	r3, [r3, #0]
 8014330:	b2da      	uxtb	r2, r3
 8014332:	683b      	ldr	r3, [r7, #0]
 8014334:	9300      	str	r3, [sp, #0]
 8014336:	4613      	mov	r3, r2
 8014338:	2200      	movs	r2, #0
 801433a:	f7fc f9dd 	bl	80106f8 <aci_gatt_update_char_value>
 801433e:	4603      	mov	r3, r0
 8014340:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccel_SHdle,
                                       0, /* charValOffset */
                                       SizeAccel_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014342:	7bfb      	ldrb	r3, [r7, #15]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d00f      	beq.n	8014368 <Custom_STM_App_Update_Char+0x78>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCEL_S command, result : 0x%x \n\r", ret);
 8014348:	4883      	ldr	r0, [pc, #524]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 801434a:	f7fd fcf3 	bl	8011d34 <DbgTraceGetFileName>
 801434e:	4601      	mov	r1, r0
 8014350:	f240 23a6 	movw	r3, #678	@ 0x2a6
 8014354:	4a81      	ldr	r2, [pc, #516]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 8014356:	4882      	ldr	r0, [pc, #520]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 8014358:	f001 fbe8 	bl	8015b2c <iprintf>
 801435c:	7bfb      	ldrb	r3, [r7, #15]
 801435e:	4619      	mov	r1, r3
 8014360:	4880      	ldr	r0, [pc, #512]	@ (8014564 <Custom_STM_App_Update_Char+0x274>)
 8014362:	f001 fbe3 	bl	8015b2c <iprintf>
 8014366:	e00c      	b.n	8014382 <Custom_STM_App_Update_Char+0x92>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCEL_S command\n\r");
 8014368:	487b      	ldr	r0, [pc, #492]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 801436a:	f7fd fce3 	bl	8011d34 <DbgTraceGetFileName>
 801436e:	4601      	mov	r1, r0
 8014370:	f240 23aa 	movw	r3, #682	@ 0x2aa
 8014374:	4a79      	ldr	r2, [pc, #484]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 8014376:	487a      	ldr	r0, [pc, #488]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 8014378:	f001 fbd8 	bl	8015b2c <iprintf>
 801437c:	487a      	ldr	r0, [pc, #488]	@ (8014568 <Custom_STM_App_Update_Char+0x278>)
 801437e:	f001 fbd5 	bl	8015b2c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      if (ret == BLE_STATUS_SUCCESS)
 8014382:	7bfb      	ldrb	r3, [r7, #15]
 8014384:	2b00      	cmp	r3, #0
 8014386:	f040 80dc 	bne.w	8014542 <Custom_STM_App_Update_Char+0x252>
      {
    	  tsBle.ACCEL_XferComplete = true;
 801438a:	4b78      	ldr	r3, [pc, #480]	@ (801456c <Custom_STM_App_Update_Char+0x27c>)
 801438c:	2201      	movs	r2, #1
 801438e:	70da      	strb	r2, [r3, #3]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8014390:	e0d7      	b.n	8014542 <Custom_STM_App_Update_Char+0x252>

    case CUSTOM_STM_ECG_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014392:	4b6f      	ldr	r3, [pc, #444]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 8014394:	8818      	ldrh	r0, [r3, #0]
 8014396:	4b6e      	ldr	r3, [pc, #440]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 8014398:	8899      	ldrh	r1, [r3, #4]
 801439a:	4b75      	ldr	r3, [pc, #468]	@ (8014570 <Custom_STM_App_Update_Char+0x280>)
 801439c:	881b      	ldrh	r3, [r3, #0]
 801439e:	b2da      	uxtb	r2, r3
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	9300      	str	r3, [sp, #0]
 80143a4:	4613      	mov	r3, r2
 80143a6:	2200      	movs	r2, #0
 80143a8:	f7fc f9a6 	bl	80106f8 <aci_gatt_update_char_value>
 80143ac:	4603      	mov	r3, r0
 80143ae:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcg_SHdle,
                                       0, /* charValOffset */
                                       SizeEcg_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80143b0:	7bfb      	ldrb	r3, [r7, #15]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d00f      	beq.n	80143d6 <Custom_STM_App_Update_Char+0xe6>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ECG_S command, result : 0x%x \n\r", ret);
 80143b6:	4868      	ldr	r0, [pc, #416]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 80143b8:	f7fd fcbc 	bl	8011d34 <DbgTraceGetFileName>
 80143bc:	4601      	mov	r1, r0
 80143be:	f44f 7332 	mov.w	r3, #712	@ 0x2c8
 80143c2:	4a66      	ldr	r2, [pc, #408]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 80143c4:	4866      	ldr	r0, [pc, #408]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 80143c6:	f001 fbb1 	bl	8015b2c <iprintf>
 80143ca:	7bfb      	ldrb	r3, [r7, #15]
 80143cc:	4619      	mov	r1, r3
 80143ce:	4869      	ldr	r0, [pc, #420]	@ (8014574 <Custom_STM_App_Update_Char+0x284>)
 80143d0:	f001 fbac 	bl	8015b2c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 80143d4:	e0b6      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
 80143d6:	4860      	ldr	r0, [pc, #384]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 80143d8:	f7fd fcac 	bl	8011d34 <DbgTraceGetFileName>
 80143dc:	4601      	mov	r1, r0
 80143de:	f44f 7333 	mov.w	r3, #716	@ 0x2cc
 80143e2:	4a5e      	ldr	r2, [pc, #376]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 80143e4:	485e      	ldr	r0, [pc, #376]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 80143e6:	f001 fba1 	bl	8015b2c <iprintf>
 80143ea:	4863      	ldr	r0, [pc, #396]	@ (8014578 <Custom_STM_App_Update_Char+0x288>)
 80143ec:	f001 fb9e 	bl	8015b2c <iprintf>
      break;
 80143f0:	e0a8      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>

    case CUSTOM_STM_CMD:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80143f2:	4b57      	ldr	r3, [pc, #348]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 80143f4:	8818      	ldrh	r0, [r3, #0]
 80143f6:	4b56      	ldr	r3, [pc, #344]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 80143f8:	88d9      	ldrh	r1, [r3, #6]
 80143fa:	4b60      	ldr	r3, [pc, #384]	@ (801457c <Custom_STM_App_Update_Char+0x28c>)
 80143fc:	881b      	ldrh	r3, [r3, #0]
 80143fe:	b2da      	uxtb	r2, r3
 8014400:	683b      	ldr	r3, [r7, #0]
 8014402:	9300      	str	r3, [sp, #0]
 8014404:	4613      	mov	r3, r2
 8014406:	2200      	movs	r2, #0
 8014408:	f7fc f976 	bl	80106f8 <aci_gatt_update_char_value>
 801440c:	4603      	mov	r3, r0
 801440e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomCmdHdle,
                                       0, /* charValOffset */
                                       SizeCmd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014410:	7bfb      	ldrb	r3, [r7, #15]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d00f      	beq.n	8014436 <Custom_STM_App_Update_Char+0x146>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CMD command, result : 0x%x \n\r", ret);
 8014416:	4850      	ldr	r0, [pc, #320]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 8014418:	f7fd fc8c 	bl	8011d34 <DbgTraceGetFileName>
 801441c:	4601      	mov	r1, r0
 801441e:	f240 23db 	movw	r3, #731	@ 0x2db
 8014422:	4a4e      	ldr	r2, [pc, #312]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 8014424:	484e      	ldr	r0, [pc, #312]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 8014426:	f001 fb81 	bl	8015b2c <iprintf>
 801442a:	7bfb      	ldrb	r3, [r7, #15]
 801442c:	4619      	mov	r1, r3
 801442e:	4854      	ldr	r0, [pc, #336]	@ (8014580 <Custom_STM_App_Update_Char+0x290>)
 8014430:	f001 fb7c 	bl	8015b2c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8014434:	e086      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
 8014436:	4848      	ldr	r0, [pc, #288]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 8014438:	f7fd fc7c 	bl	8011d34 <DbgTraceGetFileName>
 801443c:	4601      	mov	r1, r0
 801443e:	f240 23df 	movw	r3, #735	@ 0x2df
 8014442:	4a46      	ldr	r2, [pc, #280]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 8014444:	4846      	ldr	r0, [pc, #280]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 8014446:	f001 fb71 	bl	8015b2c <iprintf>
 801444a:	484e      	ldr	r0, [pc, #312]	@ (8014584 <Custom_STM_App_Update_Char+0x294>)
 801444c:	f001 fb6e 	bl	8015b2c <iprintf>
      break;
 8014450:	e078      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>

    case CUSTOM_STM_ALL_SENS:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014452:	4b3f      	ldr	r3, [pc, #252]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 8014454:	8818      	ldrh	r0, [r3, #0]
 8014456:	4b3e      	ldr	r3, [pc, #248]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 8014458:	8919      	ldrh	r1, [r3, #8]
 801445a:	4b4b      	ldr	r3, [pc, #300]	@ (8014588 <Custom_STM_App_Update_Char+0x298>)
 801445c:	881b      	ldrh	r3, [r3, #0]
 801445e:	b2da      	uxtb	r2, r3
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	9300      	str	r3, [sp, #0]
 8014464:	4613      	mov	r3, r2
 8014466:	2200      	movs	r2, #0
 8014468:	f7fc f946 	bl	80106f8 <aci_gatt_update_char_value>
 801446c:	4603      	mov	r3, r0
 801446e:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAll_SensHdle,
                                       0, /* charValOffset */
                                       SizeAll_Sens, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014470:	7bfb      	ldrb	r3, [r7, #15]
 8014472:	2b00      	cmp	r3, #0
 8014474:	d00f      	beq.n	8014496 <Custom_STM_App_Update_Char+0x1a6>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ALL_SENS command, result : 0x%x \n\r", ret);
 8014476:	4838      	ldr	r0, [pc, #224]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 8014478:	f7fd fc5c 	bl	8011d34 <DbgTraceGetFileName>
 801447c:	4601      	mov	r1, r0
 801447e:	f240 23ee 	movw	r3, #750	@ 0x2ee
 8014482:	4a36      	ldr	r2, [pc, #216]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 8014484:	4836      	ldr	r0, [pc, #216]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 8014486:	f001 fb51 	bl	8015b2c <iprintf>
 801448a:	7bfb      	ldrb	r3, [r7, #15]
 801448c:	4619      	mov	r1, r3
 801448e:	483f      	ldr	r0, [pc, #252]	@ (801458c <Custom_STM_App_Update_Char+0x29c>)
 8014490:	f001 fb4c 	bl	8015b2c <iprintf>
 8014494:	e00c      	b.n	80144b0 <Custom_STM_App_Update_Char+0x1c0>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ALL_SENS command\n\r");
 8014496:	4830      	ldr	r0, [pc, #192]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 8014498:	f7fd fc4c 	bl	8011d34 <DbgTraceGetFileName>
 801449c:	4601      	mov	r1, r0
 801449e:	f240 23f2 	movw	r3, #754	@ 0x2f2
 80144a2:	4a2e      	ldr	r2, [pc, #184]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 80144a4:	482e      	ldr	r0, [pc, #184]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 80144a6:	f001 fb41 	bl	8015b2c <iprintf>
 80144aa:	4839      	ldr	r0, [pc, #228]	@ (8014590 <Custom_STM_App_Update_Char+0x2a0>)
 80144ac:	f001 fb3e 	bl	8015b2c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/


      if (ret == BLE_STATUS_SUCCESS)
 80144b0:	7bfb      	ldrb	r3, [r7, #15]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d103      	bne.n	80144be <Custom_STM_App_Update_Char+0x1ce>
      {
    	  tsBle.AFE_XferComplete = true;
 80144b6:	4b2d      	ldr	r3, [pc, #180]	@ (801456c <Custom_STM_App_Update_Char+0x27c>)
 80144b8:	2201      	movs	r2, #1
 80144ba:	709a      	strb	r2, [r3, #2]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 80144bc:	e042      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>
			      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80144be:	4b24      	ldr	r3, [pc, #144]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 80144c0:	8818      	ldrh	r0, [r3, #0]
 80144c2:	4b23      	ldr	r3, [pc, #140]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 80144c4:	8919      	ldrh	r1, [r3, #8]
 80144c6:	4b30      	ldr	r3, [pc, #192]	@ (8014588 <Custom_STM_App_Update_Char+0x298>)
 80144c8:	881b      	ldrh	r3, [r3, #0]
 80144ca:	b2da      	uxtb	r2, r3
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	9300      	str	r3, [sp, #0]
 80144d0:	4613      	mov	r3, r2
 80144d2:	2200      	movs	r2, #0
 80144d4:	f7fc f910 	bl	80106f8 <aci_gatt_update_char_value>
 80144d8:	4603      	mov	r3, r0
 80144da:	73fb      	strb	r3, [r7, #15]
      break;
 80144dc:	e032      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>

    case CUSTOM_STM_DEVICE_INFO:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 80144de:	4b1c      	ldr	r3, [pc, #112]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 80144e0:	8818      	ldrh	r0, [r3, #0]
 80144e2:	4b1b      	ldr	r3, [pc, #108]	@ (8014550 <Custom_STM_App_Update_Char+0x260>)
 80144e4:	8959      	ldrh	r1, [r3, #10]
 80144e6:	4b2b      	ldr	r3, [pc, #172]	@ (8014594 <Custom_STM_App_Update_Char+0x2a4>)
 80144e8:	881b      	ldrh	r3, [r3, #0]
 80144ea:	b2da      	uxtb	r2, r3
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	9300      	str	r3, [sp, #0]
 80144f0:	4613      	mov	r3, r2
 80144f2:	2200      	movs	r2, #0
 80144f4:	f7fc f900 	bl	80106f8 <aci_gatt_update_char_value>
 80144f8:	4603      	mov	r3, r0
 80144fa:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDevice_InfoHdle,
                                       0, /* charValOffset */
                                       SizeDevice_Info, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 80144fc:	7bfb      	ldrb	r3, [r7, #15]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d00f      	beq.n	8014522 <Custom_STM_App_Update_Char+0x232>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DEVICE_INFO command, result : 0x%x \n\r", ret);
 8014502:	4815      	ldr	r0, [pc, #84]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 8014504:	f7fd fc16 	bl	8011d34 <DbgTraceGetFileName>
 8014508:	4601      	mov	r1, r0
 801450a:	f240 331a 	movw	r3, #794	@ 0x31a
 801450e:	4a13      	ldr	r2, [pc, #76]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 8014510:	4813      	ldr	r0, [pc, #76]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 8014512:	f001 fb0b 	bl	8015b2c <iprintf>
 8014516:	7bfb      	ldrb	r3, [r7, #15]
 8014518:	4619      	mov	r1, r3
 801451a:	481f      	ldr	r0, [pc, #124]	@ (8014598 <Custom_STM_App_Update_Char+0x2a8>)
 801451c:	f001 fb06 	bl	8015b2c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 8014520:	e010      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
 8014522:	480d      	ldr	r0, [pc, #52]	@ (8014558 <Custom_STM_App_Update_Char+0x268>)
 8014524:	f7fd fc06 	bl	8011d34 <DbgTraceGetFileName>
 8014528:	4601      	mov	r1, r0
 801452a:	f240 331e 	movw	r3, #798	@ 0x31e
 801452e:	4a0b      	ldr	r2, [pc, #44]	@ (801455c <Custom_STM_App_Update_Char+0x26c>)
 8014530:	480b      	ldr	r0, [pc, #44]	@ (8014560 <Custom_STM_App_Update_Char+0x270>)
 8014532:	f001 fafb 	bl	8015b2c <iprintf>
 8014536:	4819      	ldr	r0, [pc, #100]	@ (801459c <Custom_STM_App_Update_Char+0x2ac>)
 8014538:	f001 faf8 	bl	8015b2c <iprintf>
      break;
 801453c:	e002      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>

    default:
      break;
 801453e:	bf00      	nop
 8014540:	e000      	b.n	8014544 <Custom_STM_App_Update_Char+0x254>
      break;
 8014542:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8014544:	7bfb      	ldrb	r3, [r7, #15]
}
 8014546:	4618      	mov	r0, r3
 8014548:	3710      	adds	r7, #16
 801454a:	46bd      	mov	sp, r7
 801454c:	bd80      	pop	{r7, pc}
 801454e:	bf00      	nop
 8014550:	20001a80 	.word	0x20001a80
 8014554:	200000bc 	.word	0x200000bc
 8014558:	08019230 	.word	0x08019230
 801455c:	08019d30 	.word	0x08019d30
 8014560:	08019250 	.word	0x08019250
 8014564:	0801954c 	.word	0x0801954c
 8014568:	08019594 	.word	0x08019594
 801456c:	200019dc 	.word	0x200019dc
 8014570:	200000be 	.word	0x200000be
 8014574:	080195cc 	.word	0x080195cc
 8014578:	08019614 	.word	0x08019614
 801457c:	200000c0 	.word	0x200000c0
 8014580:	0801964c 	.word	0x0801964c
 8014584:	08019690 	.word	0x08019690
 8014588:	200000c2 	.word	0x200000c2
 801458c:	080196c4 	.word	0x080196c4
 8014590:	08019710 	.word	0x08019710
 8014594:	200000c4 	.word	0x200000c4
 8014598:	0801974c 	.word	0x0801974c
 801459c:	08019798 	.word	0x08019798

080145a0 <LL_PWR_EnableBootC2>:
{
 80145a0:	b480      	push	{r7}
 80145a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80145a4:	4b05      	ldr	r3, [pc, #20]	@ (80145bc <LL_PWR_EnableBootC2+0x1c>)
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	4a04      	ldr	r2, [pc, #16]	@ (80145bc <LL_PWR_EnableBootC2+0x1c>)
 80145aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80145ae:	60d3      	str	r3, [r2, #12]
}
 80145b0:	bf00      	nop
 80145b2:	46bd      	mov	sp, r7
 80145b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145b8:	4770      	bx	lr
 80145ba:	bf00      	nop
 80145bc:	58000400 	.word	0x58000400

080145c0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80145c0:	b480      	push	{r7}
 80145c2:	b083      	sub	sp, #12
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80145c8:	4b06      	ldr	r3, [pc, #24]	@ (80145e4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80145ca:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80145ce:	4905      	ldr	r1, [pc, #20]	@ (80145e4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	4313      	orrs	r3, r2
 80145d4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80145d8:	bf00      	nop
 80145da:	370c      	adds	r7, #12
 80145dc:	46bd      	mov	sp, r7
 80145de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e2:	4770      	bx	lr
 80145e4:	58000800 	.word	0x58000800

080145e8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80145e8:	b480      	push	{r7}
 80145ea:	b083      	sub	sp, #12
 80145ec:	af00      	add	r7, sp, #0
 80145ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80145f0:	4b05      	ldr	r3, [pc, #20]	@ (8014608 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80145f2:	6a1a      	ldr	r2, [r3, #32]
 80145f4:	4904      	ldr	r1, [pc, #16]	@ (8014608 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	4313      	orrs	r3, r2
 80145fa:	620b      	str	r3, [r1, #32]
}
 80145fc:	bf00      	nop
 80145fe:	370c      	adds	r7, #12
 8014600:	46bd      	mov	sp, r7
 8014602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014606:	4770      	bx	lr
 8014608:	58000800 	.word	0x58000800

0801460c <LL_AHB3_GRP1_EnableClock>:
{
 801460c:	b480      	push	{r7}
 801460e:	b085      	sub	sp, #20
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801461a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	4313      	orrs	r3, r2
 8014622:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014624:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014628:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	4013      	ands	r3, r2
 801462e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014630:	68fb      	ldr	r3, [r7, #12]
}
 8014632:	bf00      	nop
 8014634:	3714      	adds	r7, #20
 8014636:	46bd      	mov	sp, r7
 8014638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463c:	4770      	bx	lr

0801463e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 801463e:	b480      	push	{r7}
 8014640:	b085      	sub	sp, #20
 8014642:	af00      	add	r7, sp, #0
 8014644:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801464a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801464e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	4313      	orrs	r3, r2
 8014656:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801465a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801465e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	4013      	ands	r3, r2
 8014666:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014668:	68fb      	ldr	r3, [r7, #12]
}
 801466a:	bf00      	nop
 801466c:	3714      	adds	r7, #20
 801466e:	46bd      	mov	sp, r7
 8014670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014674:	4770      	bx	lr

08014676 <LL_C1_IPCC_EnableIT_TXF>:
{
 8014676:	b480      	push	{r7}
 8014678:	b083      	sub	sp, #12
 801467a:	af00      	add	r7, sp, #0
 801467c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	601a      	str	r2, [r3, #0]
}
 801468a:	bf00      	nop
 801468c:	370c      	adds	r7, #12
 801468e:	46bd      	mov	sp, r7
 8014690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014694:	4770      	bx	lr

08014696 <LL_C1_IPCC_EnableIT_RXO>:
{
 8014696:	b480      	push	{r7}
 8014698:	b083      	sub	sp, #12
 801469a:	af00      	add	r7, sp, #0
 801469c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	f043 0201 	orr.w	r2, r3, #1
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	601a      	str	r2, [r3, #0]
}
 80146aa:	bf00      	nop
 80146ac:	370c      	adds	r7, #12
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr

080146b6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 80146b6:	b480      	push	{r7}
 80146b8:	b083      	sub	sp, #12
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
 80146be:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	685a      	ldr	r2, [r3, #4]
 80146c4:	683b      	ldr	r3, [r7, #0]
 80146c6:	041b      	lsls	r3, r3, #16
 80146c8:	43db      	mvns	r3, r3
 80146ca:	401a      	ands	r2, r3
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	605a      	str	r2, [r3, #4]
}
 80146d0:	bf00      	nop
 80146d2:	370c      	adds	r7, #12
 80146d4:	46bd      	mov	sp, r7
 80146d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146da:	4770      	bx	lr

080146dc <LL_C1_IPCC_DisableTransmitChannel>:
{
 80146dc:	b480      	push	{r7}
 80146de:	b083      	sub	sp, #12
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
 80146e4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	685a      	ldr	r2, [r3, #4]
 80146ea:	683b      	ldr	r3, [r7, #0]
 80146ec:	041b      	lsls	r3, r3, #16
 80146ee:	431a      	orrs	r2, r3
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	605a      	str	r2, [r3, #4]
}
 80146f4:	bf00      	nop
 80146f6:	370c      	adds	r7, #12
 80146f8:	46bd      	mov	sp, r7
 80146fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146fe:	4770      	bx	lr

08014700 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014700:	b480      	push	{r7}
 8014702:	b083      	sub	sp, #12
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
 8014708:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	685a      	ldr	r2, [r3, #4]
 801470e:	683b      	ldr	r3, [r7, #0]
 8014710:	43db      	mvns	r3, r3
 8014712:	401a      	ands	r2, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	605a      	str	r2, [r3, #4]
}
 8014718:	bf00      	nop
 801471a:	370c      	adds	r7, #12
 801471c:	46bd      	mov	sp, r7
 801471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014722:	4770      	bx	lr

08014724 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014724:	b480      	push	{r7}
 8014726:	b083      	sub	sp, #12
 8014728:	af00      	add	r7, sp, #0
 801472a:	6078      	str	r0, [r7, #4]
 801472c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	683a      	ldr	r2, [r7, #0]
 8014732:	609a      	str	r2, [r3, #8]
}
 8014734:	bf00      	nop
 8014736:	370c      	adds	r7, #12
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr

08014740 <LL_C1_IPCC_SetFlag_CHx>:
{
 8014740:	b480      	push	{r7}
 8014742:	b083      	sub	sp, #12
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	041a      	lsls	r2, r3, #16
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	609a      	str	r2, [r3, #8]
}
 8014752:	bf00      	nop
 8014754:	370c      	adds	r7, #12
 8014756:	46bd      	mov	sp, r7
 8014758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801475c:	4770      	bx	lr

0801475e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 801475e:	b480      	push	{r7}
 8014760:	b083      	sub	sp, #12
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
 8014766:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	68da      	ldr	r2, [r3, #12]
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	4013      	ands	r3, r2
 8014770:	683a      	ldr	r2, [r7, #0]
 8014772:	429a      	cmp	r2, r3
 8014774:	d101      	bne.n	801477a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014776:	2301      	movs	r3, #1
 8014778:	e000      	b.n	801477c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801477a:	2300      	movs	r3, #0
}
 801477c:	4618      	mov	r0, r3
 801477e:	370c      	adds	r7, #12
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	69da      	ldr	r2, [r3, #28]
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	4013      	ands	r3, r2
 801479a:	683a      	ldr	r2, [r7, #0]
 801479c:	429a      	cmp	r2, r3
 801479e:	d101      	bne.n	80147a4 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80147a0:	2301      	movs	r3, #1
 80147a2:	e000      	b.n	80147a6 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80147a4:	2300      	movs	r3, #0
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	370c      	adds	r7, #12
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr
	...

080147b4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80147b8:	2102      	movs	r1, #2
 80147ba:	4818      	ldr	r0, [pc, #96]	@ (801481c <HW_IPCC_Rx_Handler+0x68>)
 80147bc:	f7ff ffe4 	bl	8014788 <LL_C2_IPCC_IsActiveFlag_CHx>
 80147c0:	4603      	mov	r3, r0
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d008      	beq.n	80147d8 <HW_IPCC_Rx_Handler+0x24>
 80147c6:	4b15      	ldr	r3, [pc, #84]	@ (801481c <HW_IPCC_Rx_Handler+0x68>)
 80147c8:	685b      	ldr	r3, [r3, #4]
 80147ca:	f003 0302 	and.w	r3, r3, #2
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d102      	bne.n	80147d8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80147d2:	f000 f8d5 	bl	8014980 <HW_IPCC_SYS_EvtHandler>
 80147d6:	e01e      	b.n	8014816 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80147d8:	2101      	movs	r1, #1
 80147da:	4810      	ldr	r0, [pc, #64]	@ (801481c <HW_IPCC_Rx_Handler+0x68>)
 80147dc:	f7ff ffd4 	bl	8014788 <LL_C2_IPCC_IsActiveFlag_CHx>
 80147e0:	4603      	mov	r3, r0
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d008      	beq.n	80147f8 <HW_IPCC_Rx_Handler+0x44>
 80147e6:	4b0d      	ldr	r3, [pc, #52]	@ (801481c <HW_IPCC_Rx_Handler+0x68>)
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	f003 0301 	and.w	r3, r3, #1
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d102      	bne.n	80147f8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80147f2:	f000 f889 	bl	8014908 <HW_IPCC_BLE_EvtHandler>
 80147f6:	e00e      	b.n	8014816 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80147f8:	2108      	movs	r1, #8
 80147fa:	4808      	ldr	r0, [pc, #32]	@ (801481c <HW_IPCC_Rx_Handler+0x68>)
 80147fc:	f7ff ffc4 	bl	8014788 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014800:	4603      	mov	r3, r0
 8014802:	2b00      	cmp	r3, #0
 8014804:	d008      	beq.n	8014818 <HW_IPCC_Rx_Handler+0x64>
 8014806:	4b05      	ldr	r3, [pc, #20]	@ (801481c <HW_IPCC_Rx_Handler+0x68>)
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	f003 0308 	and.w	r3, r3, #8
 801480e:	2b00      	cmp	r3, #0
 8014810:	d102      	bne.n	8014818 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8014812:	f000 f901 	bl	8014a18 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8014816:	bf00      	nop
 8014818:	bf00      	nop
}
 801481a:	bd80      	pop	{r7, pc}
 801481c:	58000c00 	.word	0x58000c00

08014820 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8014820:	b580      	push	{r7, lr}
 8014822:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8014824:	2102      	movs	r1, #2
 8014826:	4818      	ldr	r0, [pc, #96]	@ (8014888 <HW_IPCC_Tx_Handler+0x68>)
 8014828:	f7ff ff99 	bl	801475e <LL_C1_IPCC_IsActiveFlag_CHx>
 801482c:	4603      	mov	r3, r0
 801482e:	2b00      	cmp	r3, #0
 8014830:	d108      	bne.n	8014844 <HW_IPCC_Tx_Handler+0x24>
 8014832:	4b15      	ldr	r3, [pc, #84]	@ (8014888 <HW_IPCC_Tx_Handler+0x68>)
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801483a:	2b00      	cmp	r3, #0
 801483c:	d102      	bne.n	8014844 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801483e:	f000 f893 	bl	8014968 <HW_IPCC_SYS_CmdEvtHandler>
 8014842:	e01e      	b.n	8014882 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8014844:	2108      	movs	r1, #8
 8014846:	4810      	ldr	r0, [pc, #64]	@ (8014888 <HW_IPCC_Tx_Handler+0x68>)
 8014848:	f7ff ff89 	bl	801475e <LL_C1_IPCC_IsActiveFlag_CHx>
 801484c:	4603      	mov	r3, r0
 801484e:	2b00      	cmp	r3, #0
 8014850:	d108      	bne.n	8014864 <HW_IPCC_Tx_Handler+0x44>
 8014852:	4b0d      	ldr	r3, [pc, #52]	@ (8014888 <HW_IPCC_Tx_Handler+0x68>)
 8014854:	685b      	ldr	r3, [r3, #4]
 8014856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801485a:	2b00      	cmp	r3, #0
 801485c:	d102      	bne.n	8014864 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801485e:	f000 f8bd 	bl	80149dc <HW_IPCC_MM_FreeBufHandler>
 8014862:	e00e      	b.n	8014882 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8014864:	2120      	movs	r1, #32
 8014866:	4808      	ldr	r0, [pc, #32]	@ (8014888 <HW_IPCC_Tx_Handler+0x68>)
 8014868:	f7ff ff79 	bl	801475e <LL_C1_IPCC_IsActiveFlag_CHx>
 801486c:	4603      	mov	r3, r0
 801486e:	2b00      	cmp	r3, #0
 8014870:	d108      	bne.n	8014884 <HW_IPCC_Tx_Handler+0x64>
 8014872:	4b05      	ldr	r3, [pc, #20]	@ (8014888 <HW_IPCC_Tx_Handler+0x68>)
 8014874:	685b      	ldr	r3, [r3, #4]
 8014876:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801487a:	2b00      	cmp	r3, #0
 801487c:	d102      	bne.n	8014884 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801487e:	f000 f84f 	bl	8014920 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8014882:	bf00      	nop
 8014884:	bf00      	nop
}
 8014886:	bd80      	pop	{r7, pc}
 8014888:	58000c00 	.word	0x58000c00

0801488c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8014890:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8014894:	f7ff fed3 	bl	801463e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8014898:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801489c:	f7ff fea4 	bl	80145e8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80148a0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80148a4:	f7ff fe8c 	bl	80145c0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80148a8:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80148aa:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80148ac:	f7ff fe78 	bl	80145a0 <LL_PWR_EnableBootC2>

  return;
 80148b0:	bf00      	nop
}
 80148b2:	bd80      	pop	{r7, pc}

080148b4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80148b8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80148bc:	f7ff fea6 	bl	801460c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80148c0:	4806      	ldr	r0, [pc, #24]	@ (80148dc <HW_IPCC_Init+0x28>)
 80148c2:	f7ff fee8 	bl	8014696 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80148c6:	4805      	ldr	r0, [pc, #20]	@ (80148dc <HW_IPCC_Init+0x28>)
 80148c8:	f7ff fed5 	bl	8014676 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80148cc:	202c      	movs	r0, #44	@ 0x2c
 80148ce:	f7f0 fcea 	bl	80052a6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80148d2:	202d      	movs	r0, #45	@ 0x2d
 80148d4:	f7f0 fce7 	bl	80052a6 <HAL_NVIC_EnableIRQ>

  return;
 80148d8:	bf00      	nop
}
 80148da:	bd80      	pop	{r7, pc}
 80148dc:	58000c00 	.word	0x58000c00

080148e0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80148e0:	b580      	push	{r7, lr}
 80148e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80148e4:	2101      	movs	r1, #1
 80148e6:	4802      	ldr	r0, [pc, #8]	@ (80148f0 <HW_IPCC_BLE_Init+0x10>)
 80148e8:	f7ff ff0a 	bl	8014700 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80148ec:	bf00      	nop
}
 80148ee:	bd80      	pop	{r7, pc}
 80148f0:	58000c00 	.word	0x58000c00

080148f4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80148f8:	2101      	movs	r1, #1
 80148fa:	4802      	ldr	r0, [pc, #8]	@ (8014904 <HW_IPCC_BLE_SendCmd+0x10>)
 80148fc:	f7ff ff20 	bl	8014740 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8014900:	bf00      	nop
}
 8014902:	bd80      	pop	{r7, pc}
 8014904:	58000c00 	.word	0x58000c00

08014908 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8014908:	b580      	push	{r7, lr}
 801490a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801490c:	f7fd f85a 	bl	80119c4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8014910:	2101      	movs	r1, #1
 8014912:	4802      	ldr	r0, [pc, #8]	@ (801491c <HW_IPCC_BLE_EvtHandler+0x14>)
 8014914:	f7ff ff06 	bl	8014724 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014918:	bf00      	nop
}
 801491a:	bd80      	pop	{r7, pc}
 801491c:	58000c00 	.word	0x58000c00

08014920 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8014920:	b580      	push	{r7, lr}
 8014922:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8014924:	2120      	movs	r1, #32
 8014926:	4803      	ldr	r0, [pc, #12]	@ (8014934 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8014928:	f7ff fed8 	bl	80146dc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801492c:	f7fd f87a 	bl	8011a24 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8014930:	bf00      	nop
}
 8014932:	bd80      	pop	{r7, pc}
 8014934:	58000c00 	.word	0x58000c00

08014938 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8014938:	b580      	push	{r7, lr}
 801493a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801493c:	2102      	movs	r1, #2
 801493e:	4802      	ldr	r0, [pc, #8]	@ (8014948 <HW_IPCC_SYS_Init+0x10>)
 8014940:	f7ff fede 	bl	8014700 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014944:	bf00      	nop
}
 8014946:	bd80      	pop	{r7, pc}
 8014948:	58000c00 	.word	0x58000c00

0801494c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801494c:	b580      	push	{r7, lr}
 801494e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014950:	2102      	movs	r1, #2
 8014952:	4804      	ldr	r0, [pc, #16]	@ (8014964 <HW_IPCC_SYS_SendCmd+0x18>)
 8014954:	f7ff fef4 	bl	8014740 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8014958:	2102      	movs	r1, #2
 801495a:	4802      	ldr	r0, [pc, #8]	@ (8014964 <HW_IPCC_SYS_SendCmd+0x18>)
 801495c:	f7ff feab 	bl	80146b6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8014960:	bf00      	nop
}
 8014962:	bd80      	pop	{r7, pc}
 8014964:	58000c00 	.word	0x58000c00

08014968 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8014968:	b580      	push	{r7, lr}
 801496a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801496c:	2102      	movs	r1, #2
 801496e:	4803      	ldr	r0, [pc, #12]	@ (801497c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8014970:	f7ff feb4 	bl	80146dc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8014974:	f7fd f8a6 	bl	8011ac4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8014978:	bf00      	nop
}
 801497a:	bd80      	pop	{r7, pc}
 801497c:	58000c00 	.word	0x58000c00

08014980 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8014980:	b580      	push	{r7, lr}
 8014982:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8014984:	f7fd f8b4 	bl	8011af0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8014988:	2102      	movs	r1, #2
 801498a:	4802      	ldr	r0, [pc, #8]	@ (8014994 <HW_IPCC_SYS_EvtHandler+0x14>)
 801498c:	f7ff feca 	bl	8014724 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014990:	bf00      	nop
}
 8014992:	bd80      	pop	{r7, pc}
 8014994:	58000c00 	.word	0x58000c00

08014998 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b082      	sub	sp, #8
 801499c:	af00      	add	r7, sp, #0
 801499e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80149a0:	2108      	movs	r1, #8
 80149a2:	480c      	ldr	r0, [pc, #48]	@ (80149d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80149a4:	f7ff fedb 	bl	801475e <LL_C1_IPCC_IsActiveFlag_CHx>
 80149a8:	4603      	mov	r3, r0
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d007      	beq.n	80149be <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80149ae:	4a0a      	ldr	r2, [pc, #40]	@ (80149d8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80149b4:	2108      	movs	r1, #8
 80149b6:	4807      	ldr	r0, [pc, #28]	@ (80149d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80149b8:	f7ff fe7d 	bl	80146b6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80149bc:	e006      	b.n	80149cc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80149c2:	2108      	movs	r1, #8
 80149c4:	4803      	ldr	r0, [pc, #12]	@ (80149d4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80149c6:	f7ff febb 	bl	8014740 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80149ca:	bf00      	nop
}
 80149cc:	3708      	adds	r7, #8
 80149ce:	46bd      	mov	sp, r7
 80149d0:	bd80      	pop	{r7, pc}
 80149d2:	bf00      	nop
 80149d4:	58000c00 	.word	0x58000c00
 80149d8:	20001a8c 	.word	0x20001a8c

080149dc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80149dc:	b580      	push	{r7, lr}
 80149de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80149e0:	2108      	movs	r1, #8
 80149e2:	4806      	ldr	r0, [pc, #24]	@ (80149fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80149e4:	f7ff fe7a 	bl	80146dc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80149e8:	4b05      	ldr	r3, [pc, #20]	@ (8014a00 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80149ee:	2108      	movs	r1, #8
 80149f0:	4802      	ldr	r0, [pc, #8]	@ (80149fc <HW_IPCC_MM_FreeBufHandler+0x20>)
 80149f2:	f7ff fea5 	bl	8014740 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80149f6:	bf00      	nop
}
 80149f8:	bd80      	pop	{r7, pc}
 80149fa:	bf00      	nop
 80149fc:	58000c00 	.word	0x58000c00
 8014a00:	20001a8c 	.word	0x20001a8c

08014a04 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014a08:	2108      	movs	r1, #8
 8014a0a:	4802      	ldr	r0, [pc, #8]	@ (8014a14 <HW_IPCC_TRACES_Init+0x10>)
 8014a0c:	f7ff fe78 	bl	8014700 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8014a10:	bf00      	nop
}
 8014a12:	bd80      	pop	{r7, pc}
 8014a14:	58000c00 	.word	0x58000c00

08014a18 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8014a1c:	f7fd f910 	bl	8011c40 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8014a20:	2108      	movs	r1, #8
 8014a22:	4802      	ldr	r0, [pc, #8]	@ (8014a2c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8014a24:	f7ff fe7e 	bl	8014724 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8014a28:	bf00      	nop
}
 8014a2a:	bd80      	pop	{r7, pc}
 8014a2c:	58000c00 	.word	0x58000c00

08014a30 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8014a34:	2200      	movs	r2, #0
 8014a36:	4912      	ldr	r1, [pc, #72]	@ (8014a80 <MX_USB_Device_Init+0x50>)
 8014a38:	4812      	ldr	r0, [pc, #72]	@ (8014a84 <MX_USB_Device_Init+0x54>)
 8014a3a:	f7f9 fd79 	bl	800e530 <USBD_Init>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d001      	beq.n	8014a48 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8014a44:	f7ef fe26 	bl	8004694 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8014a48:	490f      	ldr	r1, [pc, #60]	@ (8014a88 <MX_USB_Device_Init+0x58>)
 8014a4a:	480e      	ldr	r0, [pc, #56]	@ (8014a84 <MX_USB_Device_Init+0x54>)
 8014a4c:	f7f9 fda0 	bl	800e590 <USBD_RegisterClass>
 8014a50:	4603      	mov	r3, r0
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d001      	beq.n	8014a5a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8014a56:	f7ef fe1d 	bl	8004694 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8014a5a:	490c      	ldr	r1, [pc, #48]	@ (8014a8c <MX_USB_Device_Init+0x5c>)
 8014a5c:	4809      	ldr	r0, [pc, #36]	@ (8014a84 <MX_USB_Device_Init+0x54>)
 8014a5e:	f7f9 fc97 	bl	800e390 <USBD_CDC_RegisterInterface>
 8014a62:	4603      	mov	r3, r0
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d001      	beq.n	8014a6c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8014a68:	f7ef fe14 	bl	8004694 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8014a6c:	4805      	ldr	r0, [pc, #20]	@ (8014a84 <MX_USB_Device_Init+0x54>)
 8014a6e:	f7f9 fdc5 	bl	800e5fc <USBD_Start>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d001      	beq.n	8014a7c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8014a78:	f7ef fe0c 	bl	8004694 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8014a7c:	bf00      	nop
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	200000dc 	.word	0x200000dc
 8014a84:	20001a90 	.word	0x20001a90
 8014a88:	20000028 	.word	0x20000028
 8014a8c:	200000c8 	.word	0x200000c8

08014a90 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014a90:	b580      	push	{r7, lr}
 8014a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014a94:	2200      	movs	r2, #0
 8014a96:	4905      	ldr	r1, [pc, #20]	@ (8014aac <CDC_Init_FS+0x1c>)
 8014a98:	4805      	ldr	r0, [pc, #20]	@ (8014ab0 <CDC_Init_FS+0x20>)
 8014a9a:	f7f9 fc93 	bl	800e3c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014a9e:	4905      	ldr	r1, [pc, #20]	@ (8014ab4 <CDC_Init_FS+0x24>)
 8014aa0:	4803      	ldr	r0, [pc, #12]	@ (8014ab0 <CDC_Init_FS+0x20>)
 8014aa2:	f7f9 fcb1 	bl	800e408 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014aa6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014aa8:	4618      	mov	r0, r3
 8014aaa:	bd80      	pop	{r7, pc}
 8014aac:	2000256c 	.word	0x2000256c
 8014ab0:	20001a90 	.word	0x20001a90
 8014ab4:	20001d6c 	.word	0x20001d6c

08014ab8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014abc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	46bd      	mov	sp, r7
 8014ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac6:	4770      	bx	lr

08014ac8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014ac8:	b480      	push	{r7}
 8014aca:	b083      	sub	sp, #12
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	4603      	mov	r3, r0
 8014ad0:	6039      	str	r1, [r7, #0]
 8014ad2:	71fb      	strb	r3, [r7, #7]
 8014ad4:	4613      	mov	r3, r2
 8014ad6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014ad8:	79fb      	ldrb	r3, [r7, #7]
 8014ada:	2b23      	cmp	r3, #35	@ 0x23
 8014adc:	d84a      	bhi.n	8014b74 <CDC_Control_FS+0xac>
 8014ade:	a201      	add	r2, pc, #4	@ (adr r2, 8014ae4 <CDC_Control_FS+0x1c>)
 8014ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ae4:	08014b75 	.word	0x08014b75
 8014ae8:	08014b75 	.word	0x08014b75
 8014aec:	08014b75 	.word	0x08014b75
 8014af0:	08014b75 	.word	0x08014b75
 8014af4:	08014b75 	.word	0x08014b75
 8014af8:	08014b75 	.word	0x08014b75
 8014afc:	08014b75 	.word	0x08014b75
 8014b00:	08014b75 	.word	0x08014b75
 8014b04:	08014b75 	.word	0x08014b75
 8014b08:	08014b75 	.word	0x08014b75
 8014b0c:	08014b75 	.word	0x08014b75
 8014b10:	08014b75 	.word	0x08014b75
 8014b14:	08014b75 	.word	0x08014b75
 8014b18:	08014b75 	.word	0x08014b75
 8014b1c:	08014b75 	.word	0x08014b75
 8014b20:	08014b75 	.word	0x08014b75
 8014b24:	08014b75 	.word	0x08014b75
 8014b28:	08014b75 	.word	0x08014b75
 8014b2c:	08014b75 	.word	0x08014b75
 8014b30:	08014b75 	.word	0x08014b75
 8014b34:	08014b75 	.word	0x08014b75
 8014b38:	08014b75 	.word	0x08014b75
 8014b3c:	08014b75 	.word	0x08014b75
 8014b40:	08014b75 	.word	0x08014b75
 8014b44:	08014b75 	.word	0x08014b75
 8014b48:	08014b75 	.word	0x08014b75
 8014b4c:	08014b75 	.word	0x08014b75
 8014b50:	08014b75 	.word	0x08014b75
 8014b54:	08014b75 	.word	0x08014b75
 8014b58:	08014b75 	.word	0x08014b75
 8014b5c:	08014b75 	.word	0x08014b75
 8014b60:	08014b75 	.word	0x08014b75
 8014b64:	08014b75 	.word	0x08014b75
 8014b68:	08014b75 	.word	0x08014b75
 8014b6c:	08014b75 	.word	0x08014b75
 8014b70:	08014b75 	.word	0x08014b75
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014b74:	bf00      	nop
  }

  return (USBD_OK);
 8014b76:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	370c      	adds	r7, #12
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b82:	4770      	bx	lr

08014b84 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014b8e:	6879      	ldr	r1, [r7, #4]
 8014b90:	4805      	ldr	r0, [pc, #20]	@ (8014ba8 <CDC_Receive_FS+0x24>)
 8014b92:	f7f9 fc39 	bl	800e408 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014b96:	4804      	ldr	r0, [pc, #16]	@ (8014ba8 <CDC_Receive_FS+0x24>)
 8014b98:	f7f9 fc94 	bl	800e4c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014b9c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3708      	adds	r7, #8
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	20001a90 	.word	0x20001a90

08014bac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b084      	sub	sp, #16
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014bb8:	2300      	movs	r3, #0
 8014bba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8014bf4 <CDC_Transmit_FS+0x48>)
 8014bbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8014bc2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d001      	beq.n	8014bd2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014bce:	2301      	movs	r3, #1
 8014bd0:	e00b      	b.n	8014bea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014bd2:	887b      	ldrh	r3, [r7, #2]
 8014bd4:	461a      	mov	r2, r3
 8014bd6:	6879      	ldr	r1, [r7, #4]
 8014bd8:	4806      	ldr	r0, [pc, #24]	@ (8014bf4 <CDC_Transmit_FS+0x48>)
 8014bda:	f7f9 fbf3 	bl	800e3c4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014bde:	4805      	ldr	r0, [pc, #20]	@ (8014bf4 <CDC_Transmit_FS+0x48>)
 8014be0:	f7f9 fc30 	bl	800e444 <USBD_CDC_TransmitPacket>
 8014be4:	4603      	mov	r3, r0
 8014be6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014bea:	4618      	mov	r0, r3
 8014bec:	3710      	adds	r7, #16
 8014bee:	46bd      	mov	sp, r7
 8014bf0:	bd80      	pop	{r7, pc}
 8014bf2:	bf00      	nop
 8014bf4:	20001a90 	.word	0x20001a90

08014bf8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014bf8:	b480      	push	{r7}
 8014bfa:	b087      	sub	sp, #28
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	60f8      	str	r0, [r7, #12]
 8014c00:	60b9      	str	r1, [r7, #8]
 8014c02:	4613      	mov	r3, r2
 8014c04:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014c06:	2300      	movs	r3, #0
 8014c08:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014c0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c0e:	4618      	mov	r0, r3
 8014c10:	371c      	adds	r7, #28
 8014c12:	46bd      	mov	sp, r7
 8014c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c18:	4770      	bx	lr
	...

08014c1c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c1c:	b480      	push	{r7}
 8014c1e:	b083      	sub	sp, #12
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	4603      	mov	r3, r0
 8014c24:	6039      	str	r1, [r7, #0]
 8014c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	2212      	movs	r2, #18
 8014c2c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8014c2e:	4b03      	ldr	r3, [pc, #12]	@ (8014c3c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8014c30:	4618      	mov	r0, r3
 8014c32:	370c      	adds	r7, #12
 8014c34:	46bd      	mov	sp, r7
 8014c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3a:	4770      	bx	lr
 8014c3c:	200000fc 	.word	0x200000fc

08014c40 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c40:	b480      	push	{r7}
 8014c42:	b083      	sub	sp, #12
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	4603      	mov	r3, r0
 8014c48:	6039      	str	r1, [r7, #0]
 8014c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014c4c:	683b      	ldr	r3, [r7, #0]
 8014c4e:	2204      	movs	r2, #4
 8014c50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014c52:	4b03      	ldr	r3, [pc, #12]	@ (8014c60 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	370c      	adds	r7, #12
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr
 8014c60:	20000110 	.word	0x20000110

08014c64 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b082      	sub	sp, #8
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	6039      	str	r1, [r7, #0]
 8014c6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014c70:	79fb      	ldrb	r3, [r7, #7]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d105      	bne.n	8014c82 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014c76:	683a      	ldr	r2, [r7, #0]
 8014c78:	4907      	ldr	r1, [pc, #28]	@ (8014c98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014c7a:	4808      	ldr	r0, [pc, #32]	@ (8014c9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8014c7c:	f7fa fe06 	bl	800f88c <USBD_GetString>
 8014c80:	e004      	b.n	8014c8c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8014c82:	683a      	ldr	r2, [r7, #0]
 8014c84:	4904      	ldr	r1, [pc, #16]	@ (8014c98 <USBD_CDC_ProductStrDescriptor+0x34>)
 8014c86:	4805      	ldr	r0, [pc, #20]	@ (8014c9c <USBD_CDC_ProductStrDescriptor+0x38>)
 8014c88:	f7fa fe00 	bl	800f88c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014c8c:	4b02      	ldr	r3, [pc, #8]	@ (8014c98 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3708      	adds	r7, #8
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	20002d6c 	.word	0x20002d6c
 8014c9c:	080199f4 	.word	0x080199f4

08014ca0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014ca0:	b580      	push	{r7, lr}
 8014ca2:	b082      	sub	sp, #8
 8014ca4:	af00      	add	r7, sp, #0
 8014ca6:	4603      	mov	r3, r0
 8014ca8:	6039      	str	r1, [r7, #0]
 8014caa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014cac:	683a      	ldr	r2, [r7, #0]
 8014cae:	4904      	ldr	r1, [pc, #16]	@ (8014cc0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8014cb0:	4804      	ldr	r0, [pc, #16]	@ (8014cc4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8014cb2:	f7fa fdeb 	bl	800f88c <USBD_GetString>
  return USBD_StrDesc;
 8014cb6:	4b02      	ldr	r3, [pc, #8]	@ (8014cc0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3708      	adds	r7, #8
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}
 8014cc0:	20002d6c 	.word	0x20002d6c
 8014cc4:	08019a10 	.word	0x08019a10

08014cc8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cc8:	b580      	push	{r7, lr}
 8014cca:	b082      	sub	sp, #8
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	4603      	mov	r3, r0
 8014cd0:	6039      	str	r1, [r7, #0]
 8014cd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014cd4:	683b      	ldr	r3, [r7, #0]
 8014cd6:	221a      	movs	r2, #26
 8014cd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014cda:	f000 f843 	bl	8014d64 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8014cde:	4b02      	ldr	r3, [pc, #8]	@ (8014ce8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3708      	adds	r7, #8
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	20000114 	.word	0x20000114

08014cec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b082      	sub	sp, #8
 8014cf0:	af00      	add	r7, sp, #0
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	6039      	str	r1, [r7, #0]
 8014cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014cf8:	79fb      	ldrb	r3, [r7, #7]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d105      	bne.n	8014d0a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014cfe:	683a      	ldr	r2, [r7, #0]
 8014d00:	4907      	ldr	r1, [pc, #28]	@ (8014d20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014d02:	4808      	ldr	r0, [pc, #32]	@ (8014d24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014d04:	f7fa fdc2 	bl	800f88c <USBD_GetString>
 8014d08:	e004      	b.n	8014d14 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8014d0a:	683a      	ldr	r2, [r7, #0]
 8014d0c:	4904      	ldr	r1, [pc, #16]	@ (8014d20 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8014d0e:	4805      	ldr	r0, [pc, #20]	@ (8014d24 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8014d10:	f7fa fdbc 	bl	800f88c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d14:	4b02      	ldr	r3, [pc, #8]	@ (8014d20 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8014d16:	4618      	mov	r0, r3
 8014d18:	3708      	adds	r7, #8
 8014d1a:	46bd      	mov	sp, r7
 8014d1c:	bd80      	pop	{r7, pc}
 8014d1e:	bf00      	nop
 8014d20:	20002d6c 	.word	0x20002d6c
 8014d24:	08019a1c 	.word	0x08019a1c

08014d28 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d28:	b580      	push	{r7, lr}
 8014d2a:	b082      	sub	sp, #8
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	4603      	mov	r3, r0
 8014d30:	6039      	str	r1, [r7, #0]
 8014d32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d34:	79fb      	ldrb	r3, [r7, #7]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d105      	bne.n	8014d46 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014d3a:	683a      	ldr	r2, [r7, #0]
 8014d3c:	4907      	ldr	r1, [pc, #28]	@ (8014d5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014d3e:	4808      	ldr	r0, [pc, #32]	@ (8014d60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014d40:	f7fa fda4 	bl	800f88c <USBD_GetString>
 8014d44:	e004      	b.n	8014d50 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8014d46:	683a      	ldr	r2, [r7, #0]
 8014d48:	4904      	ldr	r1, [pc, #16]	@ (8014d5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8014d4a:	4805      	ldr	r0, [pc, #20]	@ (8014d60 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8014d4c:	f7fa fd9e 	bl	800f88c <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d50:	4b02      	ldr	r3, [pc, #8]	@ (8014d5c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	3708      	adds	r7, #8
 8014d56:	46bd      	mov	sp, r7
 8014d58:	bd80      	pop	{r7, pc}
 8014d5a:	bf00      	nop
 8014d5c:	20002d6c 	.word	0x20002d6c
 8014d60:	08019a28 	.word	0x08019a28

08014d64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014d6a:	4b0f      	ldr	r3, [pc, #60]	@ (8014da8 <Get_SerialNum+0x44>)
 8014d6c:	681b      	ldr	r3, [r3, #0]
 8014d6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014d70:	4b0e      	ldr	r3, [pc, #56]	@ (8014dac <Get_SerialNum+0x48>)
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014d76:	4b0e      	ldr	r3, [pc, #56]	@ (8014db0 <Get_SerialNum+0x4c>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014d7c:	68fa      	ldr	r2, [r7, #12]
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	4413      	add	r3, r2
 8014d82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014d84:	68fb      	ldr	r3, [r7, #12]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d009      	beq.n	8014d9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014d8a:	2208      	movs	r2, #8
 8014d8c:	4909      	ldr	r1, [pc, #36]	@ (8014db4 <Get_SerialNum+0x50>)
 8014d8e:	68f8      	ldr	r0, [r7, #12]
 8014d90:	f000 f814 	bl	8014dbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014d94:	2204      	movs	r2, #4
 8014d96:	4908      	ldr	r1, [pc, #32]	@ (8014db8 <Get_SerialNum+0x54>)
 8014d98:	68b8      	ldr	r0, [r7, #8]
 8014d9a:	f000 f80f 	bl	8014dbc <IntToUnicode>
  }
}
 8014d9e:	bf00      	nop
 8014da0:	3710      	adds	r7, #16
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}
 8014da6:	bf00      	nop
 8014da8:	1fff7590 	.word	0x1fff7590
 8014dac:	1fff7594 	.word	0x1fff7594
 8014db0:	1fff7598 	.word	0x1fff7598
 8014db4:	20000116 	.word	0x20000116
 8014db8:	20000126 	.word	0x20000126

08014dbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014dbc:	b480      	push	{r7}
 8014dbe:	b087      	sub	sp, #28
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	60f8      	str	r0, [r7, #12]
 8014dc4:	60b9      	str	r1, [r7, #8]
 8014dc6:	4613      	mov	r3, r2
 8014dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014dca:	2300      	movs	r3, #0
 8014dcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014dce:	2300      	movs	r3, #0
 8014dd0:	75fb      	strb	r3, [r7, #23]
 8014dd2:	e027      	b.n	8014e24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	0f1b      	lsrs	r3, r3, #28
 8014dd8:	2b09      	cmp	r3, #9
 8014dda:	d80b      	bhi.n	8014df4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014ddc:	68fb      	ldr	r3, [r7, #12]
 8014dde:	0f1b      	lsrs	r3, r3, #28
 8014de0:	b2da      	uxtb	r2, r3
 8014de2:	7dfb      	ldrb	r3, [r7, #23]
 8014de4:	005b      	lsls	r3, r3, #1
 8014de6:	4619      	mov	r1, r3
 8014de8:	68bb      	ldr	r3, [r7, #8]
 8014dea:	440b      	add	r3, r1
 8014dec:	3230      	adds	r2, #48	@ 0x30
 8014dee:	b2d2      	uxtb	r2, r2
 8014df0:	701a      	strb	r2, [r3, #0]
 8014df2:	e00a      	b.n	8014e0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	0f1b      	lsrs	r3, r3, #28
 8014df8:	b2da      	uxtb	r2, r3
 8014dfa:	7dfb      	ldrb	r3, [r7, #23]
 8014dfc:	005b      	lsls	r3, r3, #1
 8014dfe:	4619      	mov	r1, r3
 8014e00:	68bb      	ldr	r3, [r7, #8]
 8014e02:	440b      	add	r3, r1
 8014e04:	3237      	adds	r2, #55	@ 0x37
 8014e06:	b2d2      	uxtb	r2, r2
 8014e08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	011b      	lsls	r3, r3, #4
 8014e0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014e10:	7dfb      	ldrb	r3, [r7, #23]
 8014e12:	005b      	lsls	r3, r3, #1
 8014e14:	3301      	adds	r3, #1
 8014e16:	68ba      	ldr	r2, [r7, #8]
 8014e18:	4413      	add	r3, r2
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014e1e:	7dfb      	ldrb	r3, [r7, #23]
 8014e20:	3301      	adds	r3, #1
 8014e22:	75fb      	strb	r3, [r7, #23]
 8014e24:	7dfa      	ldrb	r2, [r7, #23]
 8014e26:	79fb      	ldrb	r3, [r7, #7]
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d3d3      	bcc.n	8014dd4 <IntToUnicode+0x18>
  }
}
 8014e2c:	bf00      	nop
 8014e2e:	bf00      	nop
 8014e30:	371c      	adds	r7, #28
 8014e32:	46bd      	mov	sp, r7
 8014e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e38:	4770      	bx	lr

08014e3a <LL_AHB2_GRP1_EnableClock>:
{
 8014e3a:	b480      	push	{r7}
 8014e3c:	b085      	sub	sp, #20
 8014e3e:	af00      	add	r7, sp, #0
 8014e40:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8014e42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014e48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	4313      	orrs	r3, r2
 8014e50:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8014e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	4013      	ands	r3, r2
 8014e5c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
}
 8014e60:	bf00      	nop
 8014e62:	3714      	adds	r7, #20
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <LL_APB1_GRP1_EnableClock>:
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	b085      	sub	sp, #20
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8014e74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014e7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	4313      	orrs	r3, r2
 8014e82:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8014e84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	4013      	ands	r3, r2
 8014e8e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014e90:	68fb      	ldr	r3, [r7, #12]
}
 8014e92:	bf00      	nop
 8014e94:	3714      	adds	r7, #20
 8014e96:	46bd      	mov	sp, r7
 8014e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9c:	4770      	bx	lr
	...

08014ea0 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b09c      	sub	sp, #112	@ 0x70
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014ea8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014eac:	2200      	movs	r2, #0
 8014eae:	601a      	str	r2, [r3, #0]
 8014eb0:	605a      	str	r2, [r3, #4]
 8014eb2:	609a      	str	r2, [r3, #8]
 8014eb4:	60da      	str	r2, [r3, #12]
 8014eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014eb8:	f107 030c 	add.w	r3, r7, #12
 8014ebc:	2250      	movs	r2, #80	@ 0x50
 8014ebe:	2100      	movs	r1, #0
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f000 ffbb 	bl	8015e3c <memset>
  if(pcdHandle->Instance==USB)
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	681b      	ldr	r3, [r3, #0]
 8014eca:	4a23      	ldr	r2, [pc, #140]	@ (8014f58 <HAL_PCD_MspInit+0xb8>)
 8014ecc:	4293      	cmp	r3, r2
 8014ece:	d13e      	bne.n	8014f4e <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8014ed0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8014ed4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8014ed6:	2306      	movs	r3, #6
 8014ed8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8014eda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8014ede:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8014ee0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8014ee4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8014ee6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8014eea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8014eec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8014ef0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8014ef2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8014ef6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014ef8:	f107 030c 	add.w	r3, r7, #12
 8014efc:	4618      	mov	r0, r3
 8014efe:	f7f4 fb4f 	bl	80095a0 <HAL_RCCEx_PeriphCLKConfig>
 8014f02:	4603      	mov	r3, r0
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d001      	beq.n	8014f0c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8014f08:	f7ef fbc4 	bl	8004694 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f0c:	2001      	movs	r0, #1
 8014f0e:	f7ff ff94 	bl	8014e3a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014f12:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8014f16:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f18:	2302      	movs	r3, #2
 8014f1a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f1c:	2300      	movs	r3, #0
 8014f1e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f20:	2300      	movs	r3, #0
 8014f22:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8014f24:	230a      	movs	r3, #10
 8014f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8014f32:	f7f0 fc23 	bl	800577c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8014f36:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8014f3a:	f7ff ff97 	bl	8014e6c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8014f3e:	2200      	movs	r2, #0
 8014f40:	2105      	movs	r1, #5
 8014f42:	2014      	movs	r0, #20
 8014f44:	f7f0 f995 	bl	8005272 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8014f48:	2014      	movs	r0, #20
 8014f4a:	f7f0 f9ac 	bl	80052a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8014f4e:	bf00      	nop
 8014f50:	3770      	adds	r7, #112	@ 0x70
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bd80      	pop	{r7, pc}
 8014f56:	bf00      	nop
 8014f58:	40006800 	.word	0x40006800

08014f5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8014f70:	4619      	mov	r1, r3
 8014f72:	4610      	mov	r0, r2
 8014f74:	f7f9 fb8f 	bl	800e696 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8014f78:	bf00      	nop
 8014f7a:	3708      	adds	r7, #8
 8014f7c:	46bd      	mov	sp, r7
 8014f7e:	bd80      	pop	{r7, pc}

08014f80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b082      	sub	sp, #8
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	460b      	mov	r3, r1
 8014f8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014f92:	78fa      	ldrb	r2, [r7, #3]
 8014f94:	6879      	ldr	r1, [r7, #4]
 8014f96:	4613      	mov	r3, r2
 8014f98:	009b      	lsls	r3, r3, #2
 8014f9a:	4413      	add	r3, r2
 8014f9c:	00db      	lsls	r3, r3, #3
 8014f9e:	440b      	add	r3, r1
 8014fa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8014fa4:	681a      	ldr	r2, [r3, #0]
 8014fa6:	78fb      	ldrb	r3, [r7, #3]
 8014fa8:	4619      	mov	r1, r3
 8014faa:	f7f9 fbc9 	bl	800e740 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8014fae:	bf00      	nop
 8014fb0:	3708      	adds	r7, #8
 8014fb2:	46bd      	mov	sp, r7
 8014fb4:	bd80      	pop	{r7, pc}

08014fb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fb6:	b580      	push	{r7, lr}
 8014fb8:	b082      	sub	sp, #8
 8014fba:	af00      	add	r7, sp, #0
 8014fbc:	6078      	str	r0, [r7, #4]
 8014fbe:	460b      	mov	r3, r1
 8014fc0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8014fc8:	78fa      	ldrb	r2, [r7, #3]
 8014fca:	6879      	ldr	r1, [r7, #4]
 8014fcc:	4613      	mov	r3, r2
 8014fce:	009b      	lsls	r3, r3, #2
 8014fd0:	4413      	add	r3, r2
 8014fd2:	00db      	lsls	r3, r3, #3
 8014fd4:	440b      	add	r3, r1
 8014fd6:	3324      	adds	r3, #36	@ 0x24
 8014fd8:	681a      	ldr	r2, [r3, #0]
 8014fda:	78fb      	ldrb	r3, [r7, #3]
 8014fdc:	4619      	mov	r1, r3
 8014fde:	f7f9 fc62 	bl	800e8a6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8014fe2:	bf00      	nop
 8014fe4:	3708      	adds	r7, #8
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd80      	pop	{r7, pc}

08014fea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fea:	b580      	push	{r7, lr}
 8014fec:	b082      	sub	sp, #8
 8014fee:	af00      	add	r7, sp, #0
 8014ff0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	f7f9 fd9c 	bl	800eb36 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8014ffe:	bf00      	nop
 8015000:	3708      	adds	r7, #8
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}

08015006 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015006:	b580      	push	{r7, lr}
 8015008:	b084      	sub	sp, #16
 801500a:	af00      	add	r7, sp, #0
 801500c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801500e:	2301      	movs	r3, #1
 8015010:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	795b      	ldrb	r3, [r3, #5]
 8015016:	2b02      	cmp	r3, #2
 8015018:	d001      	beq.n	801501e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801501a:	f7ef fb3b 	bl	8004694 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015024:	7bfa      	ldrb	r2, [r7, #15]
 8015026:	4611      	mov	r1, r2
 8015028:	4618      	mov	r0, r3
 801502a:	f7f9 fd40 	bl	800eaae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015034:	4618      	mov	r0, r3
 8015036:	f7f9 fce8 	bl	800ea0a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801503a:	bf00      	nop
 801503c:	3710      	adds	r7, #16
 801503e:	46bd      	mov	sp, r7
 8015040:	bd80      	pop	{r7, pc}
	...

08015044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015052:	4618      	mov	r0, r3
 8015054:	f7f9 fd3b 	bl	800eace <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	7a5b      	ldrb	r3, [r3, #9]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d005      	beq.n	801506c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015060:	4b04      	ldr	r3, [pc, #16]	@ (8015074 <HAL_PCD_SuspendCallback+0x30>)
 8015062:	691b      	ldr	r3, [r3, #16]
 8015064:	4a03      	ldr	r2, [pc, #12]	@ (8015074 <HAL_PCD_SuspendCallback+0x30>)
 8015066:	f043 0306 	orr.w	r3, r3, #6
 801506a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801506c:	bf00      	nop
 801506e:	3708      	adds	r7, #8
 8015070:	46bd      	mov	sp, r7
 8015072:	bd80      	pop	{r7, pc}
 8015074:	e000ed00 	.word	0xe000ed00

08015078 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015078:	b580      	push	{r7, lr}
 801507a:	b082      	sub	sp, #8
 801507c:	af00      	add	r7, sp, #0
 801507e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	7a5b      	ldrb	r3, [r3, #9]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d007      	beq.n	8015098 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015088:	4b08      	ldr	r3, [pc, #32]	@ (80150ac <HAL_PCD_ResumeCallback+0x34>)
 801508a:	691b      	ldr	r3, [r3, #16]
 801508c:	4a07      	ldr	r2, [pc, #28]	@ (80150ac <HAL_PCD_ResumeCallback+0x34>)
 801508e:	f023 0306 	bic.w	r3, r3, #6
 8015092:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015094:	f000 f9fa 	bl	801548c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801509e:	4618      	mov	r0, r3
 80150a0:	f7f9 fd31 	bl	800eb06 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80150a4:	bf00      	nop
 80150a6:	3708      	adds	r7, #8
 80150a8:	46bd      	mov	sp, r7
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	e000ed00 	.word	0xe000ed00

080150b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80150b0:	b580      	push	{r7, lr}
 80150b2:	b082      	sub	sp, #8
 80150b4:	af00      	add	r7, sp, #0
 80150b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80150b8:	4a2c      	ldr	r2, [pc, #176]	@ (801516c <USBD_LL_Init+0xbc>)
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	4a2a      	ldr	r2, [pc, #168]	@ (801516c <USBD_LL_Init+0xbc>)
 80150c4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80150c8:	f7f2 ff52 	bl	8007f70 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80150cc:	4b27      	ldr	r3, [pc, #156]	@ (801516c <USBD_LL_Init+0xbc>)
 80150ce:	4a28      	ldr	r2, [pc, #160]	@ (8015170 <USBD_LL_Init+0xc0>)
 80150d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80150d2:	4b26      	ldr	r3, [pc, #152]	@ (801516c <USBD_LL_Init+0xbc>)
 80150d4:	2208      	movs	r2, #8
 80150d6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80150d8:	4b24      	ldr	r3, [pc, #144]	@ (801516c <USBD_LL_Init+0xbc>)
 80150da:	2202      	movs	r2, #2
 80150dc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80150de:	4b23      	ldr	r3, [pc, #140]	@ (801516c <USBD_LL_Init+0xbc>)
 80150e0:	2202      	movs	r2, #2
 80150e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80150e4:	4b21      	ldr	r3, [pc, #132]	@ (801516c <USBD_LL_Init+0xbc>)
 80150e6:	2200      	movs	r2, #0
 80150e8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80150ea:	4b20      	ldr	r3, [pc, #128]	@ (801516c <USBD_LL_Init+0xbc>)
 80150ec:	2200      	movs	r2, #0
 80150ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80150f0:	4b1e      	ldr	r3, [pc, #120]	@ (801516c <USBD_LL_Init+0xbc>)
 80150f2:	2200      	movs	r2, #0
 80150f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80150f6:	4b1d      	ldr	r3, [pc, #116]	@ (801516c <USBD_LL_Init+0xbc>)
 80150f8:	2200      	movs	r2, #0
 80150fa:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80150fc:	481b      	ldr	r0, [pc, #108]	@ (801516c <USBD_LL_Init+0xbc>)
 80150fe:	f7f1 fa17 	bl	8006530 <HAL_PCD_Init>
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	d001      	beq.n	801510c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8015108:	f7ef fac4 	bl	8004694 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015112:	2318      	movs	r3, #24
 8015114:	2200      	movs	r2, #0
 8015116:	2100      	movs	r1, #0
 8015118:	f7f2 fe9e 	bl	8007e58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015122:	2358      	movs	r3, #88	@ 0x58
 8015124:	2200      	movs	r2, #0
 8015126:	2180      	movs	r1, #128	@ 0x80
 8015128:	f7f2 fe96 	bl	8007e58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015132:	23c0      	movs	r3, #192	@ 0xc0
 8015134:	2200      	movs	r2, #0
 8015136:	2181      	movs	r1, #129	@ 0x81
 8015138:	f7f2 fe8e 	bl	8007e58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015142:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015146:	2200      	movs	r2, #0
 8015148:	2101      	movs	r1, #1
 801514a:	f7f2 fe85 	bl	8007e58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015154:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015158:	2200      	movs	r2, #0
 801515a:	2182      	movs	r1, #130	@ 0x82
 801515c:	f7f2 fe7c 	bl	8007e58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015160:	2300      	movs	r3, #0
}
 8015162:	4618      	mov	r0, r3
 8015164:	3708      	adds	r7, #8
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	20002f6c 	.word	0x20002f6c
 8015170:	40006800 	.word	0x40006800

08015174 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b084      	sub	sp, #16
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801517c:	2300      	movs	r3, #0
 801517e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015180:	2300      	movs	r3, #0
 8015182:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801518a:	4618      	mov	r0, r3
 801518c:	f7f1 fa9e 	bl	80066cc <HAL_PCD_Start>
 8015190:	4603      	mov	r3, r0
 8015192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015194:	7bfb      	ldrb	r3, [r7, #15]
 8015196:	4618      	mov	r0, r3
 8015198:	f000 f97e 	bl	8015498 <USBD_Get_USB_Status>
 801519c:	4603      	mov	r3, r0
 801519e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80151a2:	4618      	mov	r0, r3
 80151a4:	3710      	adds	r7, #16
 80151a6:	46bd      	mov	sp, r7
 80151a8:	bd80      	pop	{r7, pc}

080151aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80151aa:	b580      	push	{r7, lr}
 80151ac:	b084      	sub	sp, #16
 80151ae:	af00      	add	r7, sp, #0
 80151b0:	6078      	str	r0, [r7, #4]
 80151b2:	4608      	mov	r0, r1
 80151b4:	4611      	mov	r1, r2
 80151b6:	461a      	mov	r2, r3
 80151b8:	4603      	mov	r3, r0
 80151ba:	70fb      	strb	r3, [r7, #3]
 80151bc:	460b      	mov	r3, r1
 80151be:	70bb      	strb	r3, [r7, #2]
 80151c0:	4613      	mov	r3, r2
 80151c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80151c4:	2300      	movs	r3, #0
 80151c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80151c8:	2300      	movs	r3, #0
 80151ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80151d2:	78bb      	ldrb	r3, [r7, #2]
 80151d4:	883a      	ldrh	r2, [r7, #0]
 80151d6:	78f9      	ldrb	r1, [r7, #3]
 80151d8:	f7f1 fbe5 	bl	80069a6 <HAL_PCD_EP_Open>
 80151dc:	4603      	mov	r3, r0
 80151de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80151e0:	7bfb      	ldrb	r3, [r7, #15]
 80151e2:	4618      	mov	r0, r3
 80151e4:	f000 f958 	bl	8015498 <USBD_Get_USB_Status>
 80151e8:	4603      	mov	r3, r0
 80151ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80151ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b084      	sub	sp, #16
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
 80151fe:	460b      	mov	r3, r1
 8015200:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015202:	2300      	movs	r3, #0
 8015204:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015206:	2300      	movs	r3, #0
 8015208:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015210:	78fa      	ldrb	r2, [r7, #3]
 8015212:	4611      	mov	r1, r2
 8015214:	4618      	mov	r0, r3
 8015216:	f7f1 fc25 	bl	8006a64 <HAL_PCD_EP_Close>
 801521a:	4603      	mov	r3, r0
 801521c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801521e:	7bfb      	ldrb	r3, [r7, #15]
 8015220:	4618      	mov	r0, r3
 8015222:	f000 f939 	bl	8015498 <USBD_Get_USB_Status>
 8015226:	4603      	mov	r3, r0
 8015228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801522a:	7bbb      	ldrb	r3, [r7, #14]
}
 801522c:	4618      	mov	r0, r3
 801522e:	3710      	adds	r7, #16
 8015230:	46bd      	mov	sp, r7
 8015232:	bd80      	pop	{r7, pc}

08015234 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	b084      	sub	sp, #16
 8015238:	af00      	add	r7, sp, #0
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	460b      	mov	r3, r1
 801523e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015240:	2300      	movs	r3, #0
 8015242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015244:	2300      	movs	r3, #0
 8015246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801524e:	78fa      	ldrb	r2, [r7, #3]
 8015250:	4611      	mov	r1, r2
 8015252:	4618      	mov	r0, r3
 8015254:	f7f1 fcce 	bl	8006bf4 <HAL_PCD_EP_SetStall>
 8015258:	4603      	mov	r3, r0
 801525a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801525c:	7bfb      	ldrb	r3, [r7, #15]
 801525e:	4618      	mov	r0, r3
 8015260:	f000 f91a 	bl	8015498 <USBD_Get_USB_Status>
 8015264:	4603      	mov	r3, r0
 8015266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015268:	7bbb      	ldrb	r3, [r7, #14]
}
 801526a:	4618      	mov	r0, r3
 801526c:	3710      	adds	r7, #16
 801526e:	46bd      	mov	sp, r7
 8015270:	bd80      	pop	{r7, pc}

08015272 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015272:	b580      	push	{r7, lr}
 8015274:	b084      	sub	sp, #16
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
 801527a:	460b      	mov	r3, r1
 801527c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801527e:	2300      	movs	r3, #0
 8015280:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015282:	2300      	movs	r3, #0
 8015284:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801528c:	78fa      	ldrb	r2, [r7, #3]
 801528e:	4611      	mov	r1, r2
 8015290:	4618      	mov	r0, r3
 8015292:	f7f1 fd01 	bl	8006c98 <HAL_PCD_EP_ClrStall>
 8015296:	4603      	mov	r3, r0
 8015298:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801529a:	7bfb      	ldrb	r3, [r7, #15]
 801529c:	4618      	mov	r0, r3
 801529e:	f000 f8fb 	bl	8015498 <USBD_Get_USB_Status>
 80152a2:	4603      	mov	r3, r0
 80152a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3710      	adds	r7, #16
 80152ac:	46bd      	mov	sp, r7
 80152ae:	bd80      	pop	{r7, pc}

080152b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152b0:	b480      	push	{r7}
 80152b2:	b085      	sub	sp, #20
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
 80152b8:	460b      	mov	r3, r1
 80152ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80152c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80152c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	da0b      	bge.n	80152e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80152cc:	78fb      	ldrb	r3, [r7, #3]
 80152ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80152d2:	68f9      	ldr	r1, [r7, #12]
 80152d4:	4613      	mov	r3, r2
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	4413      	add	r3, r2
 80152da:	00db      	lsls	r3, r3, #3
 80152dc:	440b      	add	r3, r1
 80152de:	3312      	adds	r3, #18
 80152e0:	781b      	ldrb	r3, [r3, #0]
 80152e2:	e00b      	b.n	80152fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80152e4:	78fb      	ldrb	r3, [r7, #3]
 80152e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80152ea:	68f9      	ldr	r1, [r7, #12]
 80152ec:	4613      	mov	r3, r2
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	4413      	add	r3, r2
 80152f2:	00db      	lsls	r3, r3, #3
 80152f4:	440b      	add	r3, r1
 80152f6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80152fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	3714      	adds	r7, #20
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b084      	sub	sp, #16
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	460b      	mov	r3, r1
 8015312:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015314:	2300      	movs	r3, #0
 8015316:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015318:	2300      	movs	r3, #0
 801531a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015322:	78fa      	ldrb	r2, [r7, #3]
 8015324:	4611      	mov	r1, r2
 8015326:	4618      	mov	r0, r3
 8015328:	f7f1 fb19 	bl	800695e <HAL_PCD_SetAddress>
 801532c:	4603      	mov	r3, r0
 801532e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015330:	7bfb      	ldrb	r3, [r7, #15]
 8015332:	4618      	mov	r0, r3
 8015334:	f000 f8b0 	bl	8015498 <USBD_Get_USB_Status>
 8015338:	4603      	mov	r3, r0
 801533a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801533c:	7bbb      	ldrb	r3, [r7, #14]
}
 801533e:	4618      	mov	r0, r3
 8015340:	3710      	adds	r7, #16
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}

08015346 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015346:	b580      	push	{r7, lr}
 8015348:	b086      	sub	sp, #24
 801534a:	af00      	add	r7, sp, #0
 801534c:	60f8      	str	r0, [r7, #12]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	603b      	str	r3, [r7, #0]
 8015352:	460b      	mov	r3, r1
 8015354:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015356:	2300      	movs	r3, #0
 8015358:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801535a:	2300      	movs	r3, #0
 801535c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801535e:	68fb      	ldr	r3, [r7, #12]
 8015360:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015364:	7af9      	ldrb	r1, [r7, #11]
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	f7f1 fc0c 	bl	8006b86 <HAL_PCD_EP_Transmit>
 801536e:	4603      	mov	r3, r0
 8015370:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015372:	7dfb      	ldrb	r3, [r7, #23]
 8015374:	4618      	mov	r0, r3
 8015376:	f000 f88f 	bl	8015498 <USBD_Get_USB_Status>
 801537a:	4603      	mov	r3, r0
 801537c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801537e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015380:	4618      	mov	r0, r3
 8015382:	3718      	adds	r7, #24
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}

08015388 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b086      	sub	sp, #24
 801538c:	af00      	add	r7, sp, #0
 801538e:	60f8      	str	r0, [r7, #12]
 8015390:	607a      	str	r2, [r7, #4]
 8015392:	603b      	str	r3, [r7, #0]
 8015394:	460b      	mov	r3, r1
 8015396:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015398:	2300      	movs	r3, #0
 801539a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801539c:	2300      	movs	r3, #0
 801539e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80153a0:	68fb      	ldr	r3, [r7, #12]
 80153a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80153a6:	7af9      	ldrb	r1, [r7, #11]
 80153a8:	683b      	ldr	r3, [r7, #0]
 80153aa:	687a      	ldr	r2, [r7, #4]
 80153ac:	f7f1 fba2 	bl	8006af4 <HAL_PCD_EP_Receive>
 80153b0:	4603      	mov	r3, r0
 80153b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80153b4:	7dfb      	ldrb	r3, [r7, #23]
 80153b6:	4618      	mov	r0, r3
 80153b8:	f000 f86e 	bl	8015498 <USBD_Get_USB_Status>
 80153bc:	4603      	mov	r3, r0
 80153be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80153c0:	7dbb      	ldrb	r3, [r7, #22]
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3718      	adds	r7, #24
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b082      	sub	sp, #8
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
 80153d2:	460b      	mov	r3, r1
 80153d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80153dc:	78fa      	ldrb	r2, [r7, #3]
 80153de:	4611      	mov	r1, r2
 80153e0:	4618      	mov	r0, r3
 80153e2:	f7f1 fbb8 	bl	8006b56 <HAL_PCD_EP_GetRxCount>
 80153e6:	4603      	mov	r3, r0
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3708      	adds	r7, #8
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}

080153f0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b082      	sub	sp, #8
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	460b      	mov	r3, r1
 80153fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80153fc:	78fb      	ldrb	r3, [r7, #3]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d002      	beq.n	8015408 <HAL_PCDEx_LPM_Callback+0x18>
 8015402:	2b01      	cmp	r3, #1
 8015404:	d013      	beq.n	801542e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015406:	e023      	b.n	8015450 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	7a5b      	ldrb	r3, [r3, #9]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d007      	beq.n	8015420 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015410:	f000 f83c 	bl	801548c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015414:	4b10      	ldr	r3, [pc, #64]	@ (8015458 <HAL_PCDEx_LPM_Callback+0x68>)
 8015416:	691b      	ldr	r3, [r3, #16]
 8015418:	4a0f      	ldr	r2, [pc, #60]	@ (8015458 <HAL_PCDEx_LPM_Callback+0x68>)
 801541a:	f023 0306 	bic.w	r3, r3, #6
 801541e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015426:	4618      	mov	r0, r3
 8015428:	f7f9 fb6d 	bl	800eb06 <USBD_LL_Resume>
    break;
 801542c:	e010      	b.n	8015450 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015434:	4618      	mov	r0, r3
 8015436:	f7f9 fb4a 	bl	800eace <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801543a:	687b      	ldr	r3, [r7, #4]
 801543c:	7a5b      	ldrb	r3, [r3, #9]
 801543e:	2b00      	cmp	r3, #0
 8015440:	d005      	beq.n	801544e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015442:	4b05      	ldr	r3, [pc, #20]	@ (8015458 <HAL_PCDEx_LPM_Callback+0x68>)
 8015444:	691b      	ldr	r3, [r3, #16]
 8015446:	4a04      	ldr	r2, [pc, #16]	@ (8015458 <HAL_PCDEx_LPM_Callback+0x68>)
 8015448:	f043 0306 	orr.w	r3, r3, #6
 801544c:	6113      	str	r3, [r2, #16]
    break;
 801544e:	bf00      	nop
}
 8015450:	bf00      	nop
 8015452:	3708      	adds	r7, #8
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	e000ed00 	.word	0xe000ed00

0801545c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801545c:	b480      	push	{r7}
 801545e:	b083      	sub	sp, #12
 8015460:	af00      	add	r7, sp, #0
 8015462:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015464:	4b03      	ldr	r3, [pc, #12]	@ (8015474 <USBD_static_malloc+0x18>)
}
 8015466:	4618      	mov	r0, r3
 8015468:	370c      	adds	r7, #12
 801546a:	46bd      	mov	sp, r7
 801546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015470:	4770      	bx	lr
 8015472:	bf00      	nop
 8015474:	20003248 	.word	0x20003248

08015478 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015478:	b480      	push	{r7}
 801547a:	b083      	sub	sp, #12
 801547c:	af00      	add	r7, sp, #0
 801547e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015480:	bf00      	nop
 8015482:	370c      	adds	r7, #12
 8015484:	46bd      	mov	sp, r7
 8015486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548a:	4770      	bx	lr

0801548c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801548c:	b580      	push	{r7, lr}
 801548e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015490:	f7ee fe18 	bl	80040c4 <SystemClock_Config>
}
 8015494:	bf00      	nop
 8015496:	bd80      	pop	{r7, pc}

08015498 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015498:	b480      	push	{r7}
 801549a:	b085      	sub	sp, #20
 801549c:	af00      	add	r7, sp, #0
 801549e:	4603      	mov	r3, r0
 80154a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80154a2:	2300      	movs	r3, #0
 80154a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80154a6:	79fb      	ldrb	r3, [r7, #7]
 80154a8:	2b03      	cmp	r3, #3
 80154aa:	d817      	bhi.n	80154dc <USBD_Get_USB_Status+0x44>
 80154ac:	a201      	add	r2, pc, #4	@ (adr r2, 80154b4 <USBD_Get_USB_Status+0x1c>)
 80154ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154b2:	bf00      	nop
 80154b4:	080154c5 	.word	0x080154c5
 80154b8:	080154cb 	.word	0x080154cb
 80154bc:	080154d1 	.word	0x080154d1
 80154c0:	080154d7 	.word	0x080154d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80154c4:	2300      	movs	r3, #0
 80154c6:	73fb      	strb	r3, [r7, #15]
    break;
 80154c8:	e00b      	b.n	80154e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80154ca:	2303      	movs	r3, #3
 80154cc:	73fb      	strb	r3, [r7, #15]
    break;
 80154ce:	e008      	b.n	80154e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80154d0:	2301      	movs	r3, #1
 80154d2:	73fb      	strb	r3, [r7, #15]
    break;
 80154d4:	e005      	b.n	80154e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80154d6:	2303      	movs	r3, #3
 80154d8:	73fb      	strb	r3, [r7, #15]
    break;
 80154da:	e002      	b.n	80154e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80154dc:	2303      	movs	r3, #3
 80154de:	73fb      	strb	r3, [r7, #15]
    break;
 80154e0:	bf00      	nop
  }
  return usb_status;
 80154e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80154e4:	4618      	mov	r0, r3
 80154e6:	3714      	adds	r7, #20
 80154e8:	46bd      	mov	sp, r7
 80154ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ee:	4770      	bx	lr

080154f0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80154f0:	b480      	push	{r7}
 80154f2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80154f4:	4b05      	ldr	r3, [pc, #20]	@ (801550c <UTIL_LPM_Init+0x1c>)
 80154f6:	2200      	movs	r2, #0
 80154f8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80154fa:	4b05      	ldr	r3, [pc, #20]	@ (8015510 <UTIL_LPM_Init+0x20>)
 80154fc:	2200      	movs	r2, #0
 80154fe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015500:	bf00      	nop
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr
 801550a:	bf00      	nop
 801550c:	20003468 	.word	0x20003468
 8015510:	2000346c 	.word	0x2000346c

08015514 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015514:	b480      	push	{r7}
 8015516:	b087      	sub	sp, #28
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	460b      	mov	r3, r1
 801551e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015520:	f3ef 8310 	mrs	r3, PRIMASK
 8015524:	613b      	str	r3, [r7, #16]
  return(result);
 8015526:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015528:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801552a:	b672      	cpsid	i
}
 801552c:	bf00      	nop
  
  switch(state)
 801552e:	78fb      	ldrb	r3, [r7, #3]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d008      	beq.n	8015546 <UTIL_LPM_SetOffMode+0x32>
 8015534:	2b01      	cmp	r3, #1
 8015536:	d10e      	bne.n	8015556 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015538:	4b0d      	ldr	r3, [pc, #52]	@ (8015570 <UTIL_LPM_SetOffMode+0x5c>)
 801553a:	681a      	ldr	r2, [r3, #0]
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	4313      	orrs	r3, r2
 8015540:	4a0b      	ldr	r2, [pc, #44]	@ (8015570 <UTIL_LPM_SetOffMode+0x5c>)
 8015542:	6013      	str	r3, [r2, #0]
      break;
 8015544:	e008      	b.n	8015558 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	43da      	mvns	r2, r3
 801554a:	4b09      	ldr	r3, [pc, #36]	@ (8015570 <UTIL_LPM_SetOffMode+0x5c>)
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	4013      	ands	r3, r2
 8015550:	4a07      	ldr	r2, [pc, #28]	@ (8015570 <UTIL_LPM_SetOffMode+0x5c>)
 8015552:	6013      	str	r3, [r2, #0]
      break;
 8015554:	e000      	b.n	8015558 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8015556:	bf00      	nop
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	f383 8810 	msr	PRIMASK, r3
}
 8015562:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015564:	bf00      	nop
 8015566:	371c      	adds	r7, #28
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr
 8015570:	2000346c 	.word	0x2000346c

08015574 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b090      	sub	sp, #64	@ 0x40
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801557c:	4b73      	ldr	r3, [pc, #460]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8015582:	4b72      	ldr	r3, [pc, #456]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 8015584:	681a      	ldr	r2, [r3, #0]
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	4013      	ands	r3, r2
 801558a:	4a70      	ldr	r2, [pc, #448]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 801558c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801558e:	4b70      	ldr	r3, [pc, #448]	@ (8015750 <UTIL_SEQ_Run+0x1dc>)
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015594:	4b6f      	ldr	r3, [pc, #444]	@ (8015754 <UTIL_SEQ_Run+0x1e0>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801559a:	4b6f      	ldr	r3, [pc, #444]	@ (8015758 <UTIL_SEQ_Run+0x1e4>)
 801559c:	681b      	ldr	r3, [r3, #0]
 801559e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80155a0:	4b6e      	ldr	r3, [pc, #440]	@ (801575c <UTIL_SEQ_Run+0x1e8>)
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80155a6:	e08d      	b.n	80156c4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80155a8:	2300      	movs	r3, #0
 80155aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80155ac:	e002      	b.n	80155b4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80155ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155b0:	3301      	adds	r3, #1
 80155b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80155b4:	4a6a      	ldr	r2, [pc, #424]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 80155b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80155bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155be:	401a      	ands	r2, r3
 80155c0:	4b62      	ldr	r3, [pc, #392]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 80155c2:	681b      	ldr	r3, [r3, #0]
 80155c4:	4013      	ands	r3, r2
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d0f1      	beq.n	80155ae <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80155ca:	4a65      	ldr	r2, [pc, #404]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 80155cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80155d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80155d4:	401a      	ands	r2, r3
 80155d6:	4b5d      	ldr	r3, [pc, #372]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 80155d8:	681b      	ldr	r3, [r3, #0]
 80155da:	4013      	ands	r3, r2
 80155dc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80155de:	4a60      	ldr	r2, [pc, #384]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 80155e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155e2:	00db      	lsls	r3, r3, #3
 80155e4:	4413      	add	r3, r2
 80155e6:	685a      	ldr	r2, [r3, #4]
 80155e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80155ea:	4013      	ands	r3, r2
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d106      	bne.n	80155fe <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80155f0:	4a5b      	ldr	r2, [pc, #364]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 80155f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155f4:	00db      	lsls	r3, r3, #3
 80155f6:	4413      	add	r3, r2
 80155f8:	f04f 32ff 	mov.w	r2, #4294967295
 80155fc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80155fe:	4a58      	ldr	r2, [pc, #352]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 8015600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015602:	00db      	lsls	r3, r3, #3
 8015604:	4413      	add	r3, r2
 8015606:	685a      	ldr	r2, [r3, #4]
 8015608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801560a:	4013      	ands	r3, r2
 801560c:	4618      	mov	r0, r3
 801560e:	f000 f9b3 	bl	8015978 <SEQ_BitPosition>
 8015612:	4603      	mov	r3, r0
 8015614:	461a      	mov	r2, r3
 8015616:	4b53      	ldr	r3, [pc, #332]	@ (8015764 <UTIL_SEQ_Run+0x1f0>)
 8015618:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801561a:	4a51      	ldr	r2, [pc, #324]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 801561c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801561e:	00db      	lsls	r3, r3, #3
 8015620:	4413      	add	r3, r2
 8015622:	685a      	ldr	r2, [r3, #4]
 8015624:	4b4f      	ldr	r3, [pc, #316]	@ (8015764 <UTIL_SEQ_Run+0x1f0>)
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	2101      	movs	r1, #1
 801562a:	fa01 f303 	lsl.w	r3, r1, r3
 801562e:	43db      	mvns	r3, r3
 8015630:	401a      	ands	r2, r3
 8015632:	494b      	ldr	r1, [pc, #300]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 8015634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015636:	00db      	lsls	r3, r3, #3
 8015638:	440b      	add	r3, r1
 801563a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801563c:	f3ef 8310 	mrs	r3, PRIMASK
 8015640:	61bb      	str	r3, [r7, #24]
  return(result);
 8015642:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015644:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8015646:	b672      	cpsid	i
}
 8015648:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801564a:	4b46      	ldr	r3, [pc, #280]	@ (8015764 <UTIL_SEQ_Run+0x1f0>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	2201      	movs	r2, #1
 8015650:	fa02 f303 	lsl.w	r3, r2, r3
 8015654:	43da      	mvns	r2, r3
 8015656:	4b3e      	ldr	r3, [pc, #248]	@ (8015750 <UTIL_SEQ_Run+0x1dc>)
 8015658:	681b      	ldr	r3, [r3, #0]
 801565a:	4013      	ands	r3, r2
 801565c:	4a3c      	ldr	r2, [pc, #240]	@ (8015750 <UTIL_SEQ_Run+0x1dc>)
 801565e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015660:	2305      	movs	r3, #5
 8015662:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015664:	e013      	b.n	801568e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8015666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015668:	3b01      	subs	r3, #1
 801566a:	4a3d      	ldr	r2, [pc, #244]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 801566c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8015670:	4b3c      	ldr	r3, [pc, #240]	@ (8015764 <UTIL_SEQ_Run+0x1f0>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	2201      	movs	r2, #1
 8015676:	fa02 f303 	lsl.w	r3, r2, r3
 801567a:	43da      	mvns	r2, r3
 801567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801567e:	3b01      	subs	r3, #1
 8015680:	400a      	ands	r2, r1
 8015682:	4937      	ldr	r1, [pc, #220]	@ (8015760 <UTIL_SEQ_Run+0x1ec>)
 8015684:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801568a:	3b01      	subs	r3, #1
 801568c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801568e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015690:	2b00      	cmp	r3, #0
 8015692:	d1e8      	bne.n	8015666 <UTIL_SEQ_Run+0xf2>
 8015694:	6a3b      	ldr	r3, [r7, #32]
 8015696:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	f383 8810 	msr	PRIMASK, r3
}
 801569e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80156a0:	4b30      	ldr	r3, [pc, #192]	@ (8015764 <UTIL_SEQ_Run+0x1f0>)
 80156a2:	681b      	ldr	r3, [r3, #0]
 80156a4:	4a30      	ldr	r2, [pc, #192]	@ (8015768 <UTIL_SEQ_Run+0x1f4>)
 80156a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80156aa:	4798      	blx	r3

    local_taskset = TaskSet;
 80156ac:	4b28      	ldr	r3, [pc, #160]	@ (8015750 <UTIL_SEQ_Run+0x1dc>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80156b2:	4b28      	ldr	r3, [pc, #160]	@ (8015754 <UTIL_SEQ_Run+0x1e0>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80156b8:	4b27      	ldr	r3, [pc, #156]	@ (8015758 <UTIL_SEQ_Run+0x1e4>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80156be:	4b27      	ldr	r3, [pc, #156]	@ (801575c <UTIL_SEQ_Run+0x1e8>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80156c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80156c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80156c8:	401a      	ands	r2, r3
 80156ca:	4b20      	ldr	r3, [pc, #128]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	4013      	ands	r3, r2
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d005      	beq.n	80156e0 <UTIL_SEQ_Run+0x16c>
 80156d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80156d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80156d8:	4013      	ands	r3, r2
 80156da:	2b00      	cmp	r3, #0
 80156dc:	f43f af64 	beq.w	80155a8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80156e0:	4b20      	ldr	r3, [pc, #128]	@ (8015764 <UTIL_SEQ_Run+0x1f0>)
 80156e2:	f04f 32ff 	mov.w	r2, #4294967295
 80156e6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80156e8:	f000 f938 	bl	801595c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80156ec:	f3ef 8310 	mrs	r3, PRIMASK
 80156f0:	613b      	str	r3, [r7, #16]
  return(result);
 80156f2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80156f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80156f6:	b672      	cpsid	i
}
 80156f8:	bf00      	nop
  local_taskset = TaskSet;
 80156fa:	4b15      	ldr	r3, [pc, #84]	@ (8015750 <UTIL_SEQ_Run+0x1dc>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015700:	4b14      	ldr	r3, [pc, #80]	@ (8015754 <UTIL_SEQ_Run+0x1e0>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015706:	4b14      	ldr	r3, [pc, #80]	@ (8015758 <UTIL_SEQ_Run+0x1e4>)
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801570c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015710:	401a      	ands	r2, r3
 8015712:	4b0e      	ldr	r3, [pc, #56]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	4013      	ands	r3, r2
 8015718:	2b00      	cmp	r3, #0
 801571a:	d107      	bne.n	801572c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801571c:	4b0f      	ldr	r3, [pc, #60]	@ (801575c <UTIL_SEQ_Run+0x1e8>)
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015722:	4013      	ands	r3, r2
 8015724:	2b00      	cmp	r3, #0
 8015726:	d101      	bne.n	801572c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8015728:	f7ed fa63 	bl	8002bf2 <UTIL_SEQ_Idle>
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	f383 8810 	msr	PRIMASK, r3
}
 8015736:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8015738:	f000 f917 	bl	801596a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801573c:	4a03      	ldr	r2, [pc, #12]	@ (801574c <UTIL_SEQ_Run+0x1d8>)
 801573e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015740:	6013      	str	r3, [r2, #0]

  return;
 8015742:	bf00      	nop
}
 8015744:	3740      	adds	r7, #64	@ 0x40
 8015746:	46bd      	mov	sp, r7
 8015748:	bd80      	pop	{r7, pc}
 801574a:	bf00      	nop
 801574c:	20000134 	.word	0x20000134
 8015750:	20003470 	.word	0x20003470
 8015754:	20003474 	.word	0x20003474
 8015758:	20000130 	.word	0x20000130
 801575c:	20003478 	.word	0x20003478
 8015760:	20003500 	.word	0x20003500
 8015764:	2000347c 	.word	0x2000347c
 8015768:	20003480 	.word	0x20003480

0801576c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801576c:	b580      	push	{r7, lr}
 801576e:	b088      	sub	sp, #32
 8015770:	af00      	add	r7, sp, #0
 8015772:	60f8      	str	r0, [r7, #12]
 8015774:	60b9      	str	r1, [r7, #8]
 8015776:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015778:	f3ef 8310 	mrs	r3, PRIMASK
 801577c:	617b      	str	r3, [r7, #20]
  return(result);
 801577e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8015780:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015782:	b672      	cpsid	i
}
 8015784:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8015786:	68f8      	ldr	r0, [r7, #12]
 8015788:	f000 f8f6 	bl	8015978 <SEQ_BitPosition>
 801578c:	4603      	mov	r3, r0
 801578e:	4619      	mov	r1, r3
 8015790:	4a06      	ldr	r2, [pc, #24]	@ (80157ac <UTIL_SEQ_RegTask+0x40>)
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8015798:	69fb      	ldr	r3, [r7, #28]
 801579a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801579c:	69bb      	ldr	r3, [r7, #24]
 801579e:	f383 8810 	msr	PRIMASK, r3
}
 80157a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80157a4:	bf00      	nop
}
 80157a6:	3720      	adds	r7, #32
 80157a8:	46bd      	mov	sp, r7
 80157aa:	bd80      	pop	{r7, pc}
 80157ac:	20003480 	.word	0x20003480

080157b0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80157b0:	b480      	push	{r7}
 80157b2:	b087      	sub	sp, #28
 80157b4:	af00      	add	r7, sp, #0
 80157b6:	6078      	str	r0, [r7, #4]
 80157b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80157ba:	f3ef 8310 	mrs	r3, PRIMASK
 80157be:	60fb      	str	r3, [r7, #12]
  return(result);
 80157c0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80157c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80157c4:	b672      	cpsid	i
}
 80157c6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80157c8:	4b0d      	ldr	r3, [pc, #52]	@ (8015800 <UTIL_SEQ_SetTask+0x50>)
 80157ca:	681a      	ldr	r2, [r3, #0]
 80157cc:	687b      	ldr	r3, [r7, #4]
 80157ce:	4313      	orrs	r3, r2
 80157d0:	4a0b      	ldr	r2, [pc, #44]	@ (8015800 <UTIL_SEQ_SetTask+0x50>)
 80157d2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80157d4:	4a0b      	ldr	r2, [pc, #44]	@ (8015804 <UTIL_SEQ_SetTask+0x54>)
 80157d6:	683b      	ldr	r3, [r7, #0]
 80157d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	431a      	orrs	r2, r3
 80157e0:	4908      	ldr	r1, [pc, #32]	@ (8015804 <UTIL_SEQ_SetTask+0x54>)
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80157e8:	697b      	ldr	r3, [r7, #20]
 80157ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157ec:	693b      	ldr	r3, [r7, #16]
 80157ee:	f383 8810 	msr	PRIMASK, r3
}
 80157f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80157f4:	bf00      	nop
}
 80157f6:	371c      	adds	r7, #28
 80157f8:	46bd      	mov	sp, r7
 80157fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fe:	4770      	bx	lr
 8015800:	20003470 	.word	0x20003470
 8015804:	20003500 	.word	0x20003500

08015808 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015808:	b480      	push	{r7}
 801580a:	b087      	sub	sp, #28
 801580c:	af00      	add	r7, sp, #0
 801580e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015810:	f3ef 8310 	mrs	r3, PRIMASK
 8015814:	60fb      	str	r3, [r7, #12]
  return(result);
 8015816:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015818:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801581a:	b672      	cpsid	i
}
 801581c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	43da      	mvns	r2, r3
 8015822:	4b08      	ldr	r3, [pc, #32]	@ (8015844 <UTIL_SEQ_PauseTask+0x3c>)
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	4013      	ands	r3, r2
 8015828:	4a06      	ldr	r2, [pc, #24]	@ (8015844 <UTIL_SEQ_PauseTask+0x3c>)
 801582a:	6013      	str	r3, [r2, #0]
 801582c:	697b      	ldr	r3, [r7, #20]
 801582e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015830:	693b      	ldr	r3, [r7, #16]
 8015832:	f383 8810 	msr	PRIMASK, r3
}
 8015836:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015838:	bf00      	nop
}
 801583a:	371c      	adds	r7, #28
 801583c:	46bd      	mov	sp, r7
 801583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015842:	4770      	bx	lr
 8015844:	20000130 	.word	0x20000130

08015848 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015848:	b480      	push	{r7}
 801584a:	b087      	sub	sp, #28
 801584c:	af00      	add	r7, sp, #0
 801584e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015850:	f3ef 8310 	mrs	r3, PRIMASK
 8015854:	60fb      	str	r3, [r7, #12]
  return(result);
 8015856:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015858:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801585a:	b672      	cpsid	i
}
 801585c:	bf00      	nop

  TaskMask |= TaskId_bm;
 801585e:	4b09      	ldr	r3, [pc, #36]	@ (8015884 <UTIL_SEQ_ResumeTask+0x3c>)
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	4313      	orrs	r3, r2
 8015866:	4a07      	ldr	r2, [pc, #28]	@ (8015884 <UTIL_SEQ_ResumeTask+0x3c>)
 8015868:	6013      	str	r3, [r2, #0]
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801586e:	693b      	ldr	r3, [r7, #16]
 8015870:	f383 8810 	msr	PRIMASK, r3
}
 8015874:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015876:	bf00      	nop
}
 8015878:	371c      	adds	r7, #28
 801587a:	46bd      	mov	sp, r7
 801587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015880:	4770      	bx	lr
 8015882:	bf00      	nop
 8015884:	20000130 	.word	0x20000130

08015888 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8015888:	b480      	push	{r7}
 801588a:	b087      	sub	sp, #28
 801588c:	af00      	add	r7, sp, #0
 801588e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015890:	f3ef 8310 	mrs	r3, PRIMASK
 8015894:	60fb      	str	r3, [r7, #12]
  return(result);
 8015896:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801589a:	b672      	cpsid	i
}
 801589c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801589e:	4b09      	ldr	r3, [pc, #36]	@ (80158c4 <UTIL_SEQ_SetEvt+0x3c>)
 80158a0:	681a      	ldr	r2, [r3, #0]
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	4313      	orrs	r3, r2
 80158a6:	4a07      	ldr	r2, [pc, #28]	@ (80158c4 <UTIL_SEQ_SetEvt+0x3c>)
 80158a8:	6013      	str	r3, [r2, #0]
 80158aa:	697b      	ldr	r3, [r7, #20]
 80158ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80158ae:	693b      	ldr	r3, [r7, #16]
 80158b0:	f383 8810 	msr	PRIMASK, r3
}
 80158b4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80158b6:	bf00      	nop
}
 80158b8:	371c      	adds	r7, #28
 80158ba:	46bd      	mov	sp, r7
 80158bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c0:	4770      	bx	lr
 80158c2:	bf00      	nop
 80158c4:	20003474 	.word	0x20003474

080158c8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b088      	sub	sp, #32
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80158d0:	4b1f      	ldr	r3, [pc, #124]	@ (8015950 <UTIL_SEQ_WaitEvt+0x88>)
 80158d2:	681b      	ldr	r3, [r3, #0]
 80158d4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80158d6:	4b1e      	ldr	r3, [pc, #120]	@ (8015950 <UTIL_SEQ_WaitEvt+0x88>)
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158de:	d102      	bne.n	80158e6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80158e0:	2300      	movs	r3, #0
 80158e2:	61fb      	str	r3, [r7, #28]
 80158e4:	e005      	b.n	80158f2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80158e6:	4b1a      	ldr	r3, [pc, #104]	@ (8015950 <UTIL_SEQ_WaitEvt+0x88>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	2201      	movs	r2, #1
 80158ec:	fa02 f303 	lsl.w	r3, r2, r3
 80158f0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80158f2:	4b18      	ldr	r3, [pc, #96]	@ (8015954 <UTIL_SEQ_WaitEvt+0x8c>)
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80158f8:	4a16      	ldr	r2, [pc, #88]	@ (8015954 <UTIL_SEQ_WaitEvt+0x8c>)
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80158fe:	e003      	b.n	8015908 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8015900:	6879      	ldr	r1, [r7, #4]
 8015902:	69f8      	ldr	r0, [r7, #28]
 8015904:	f7ed f97c 	bl	8002c00 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8015908:	4b13      	ldr	r3, [pc, #76]	@ (8015958 <UTIL_SEQ_WaitEvt+0x90>)
 801590a:	681a      	ldr	r2, [r3, #0]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	4013      	ands	r3, r2
 8015910:	2b00      	cmp	r3, #0
 8015912:	d0f5      	beq.n	8015900 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8015914:	4a0e      	ldr	r2, [pc, #56]	@ (8015950 <UTIL_SEQ_WaitEvt+0x88>)
 8015916:	69bb      	ldr	r3, [r7, #24]
 8015918:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801591a:	f3ef 8310 	mrs	r3, PRIMASK
 801591e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015920:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015922:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015924:	b672      	cpsid	i
}
 8015926:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	43da      	mvns	r2, r3
 801592c:	4b0a      	ldr	r3, [pc, #40]	@ (8015958 <UTIL_SEQ_WaitEvt+0x90>)
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	4013      	ands	r3, r2
 8015932:	4a09      	ldr	r2, [pc, #36]	@ (8015958 <UTIL_SEQ_WaitEvt+0x90>)
 8015934:	6013      	str	r3, [r2, #0]
 8015936:	693b      	ldr	r3, [r7, #16]
 8015938:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	f383 8810 	msr	PRIMASK, r3
}
 8015940:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8015942:	4a04      	ldr	r2, [pc, #16]	@ (8015954 <UTIL_SEQ_WaitEvt+0x8c>)
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	6013      	str	r3, [r2, #0]
  return;
 8015948:	bf00      	nop
}
 801594a:	3720      	adds	r7, #32
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}
 8015950:	2000347c 	.word	0x2000347c
 8015954:	20003478 	.word	0x20003478
 8015958:	20003474 	.word	0x20003474

0801595c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801595c:	b480      	push	{r7}
 801595e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8015960:	bf00      	nop
}
 8015962:	46bd      	mov	sp, r7
 8015964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015968:	4770      	bx	lr

0801596a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801596a:	b480      	push	{r7}
 801596c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801596e:	bf00      	nop
}
 8015970:	46bd      	mov	sp, r7
 8015972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015976:	4770      	bx	lr

08015978 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8015978:	b480      	push	{r7}
 801597a:	b085      	sub	sp, #20
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8015984:	68fb      	ldr	r3, [r7, #12]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d101      	bne.n	801598e <SEQ_BitPosition+0x16>
    return 32U;
 801598a:	2320      	movs	r3, #32
 801598c:	e003      	b.n	8015996 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	fab3 f383 	clz	r3, r3
 8015994:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8015996:	f1c3 031f 	rsb	r3, r3, #31
 801599a:	b2db      	uxtb	r3, r3
}
 801599c:	4618      	mov	r0, r3
 801599e:	3714      	adds	r7, #20
 80159a0:	46bd      	mov	sp, r7
 80159a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a6:	4770      	bx	lr

080159a8 <std>:
 80159a8:	2300      	movs	r3, #0
 80159aa:	b510      	push	{r4, lr}
 80159ac:	4604      	mov	r4, r0
 80159ae:	e9c0 3300 	strd	r3, r3, [r0]
 80159b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80159b6:	6083      	str	r3, [r0, #8]
 80159b8:	8181      	strh	r1, [r0, #12]
 80159ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80159bc:	81c2      	strh	r2, [r0, #14]
 80159be:	6183      	str	r3, [r0, #24]
 80159c0:	4619      	mov	r1, r3
 80159c2:	2208      	movs	r2, #8
 80159c4:	305c      	adds	r0, #92	@ 0x5c
 80159c6:	f000 fa39 	bl	8015e3c <memset>
 80159ca:	4b0d      	ldr	r3, [pc, #52]	@ (8015a00 <std+0x58>)
 80159cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80159ce:	4b0d      	ldr	r3, [pc, #52]	@ (8015a04 <std+0x5c>)
 80159d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80159d2:	4b0d      	ldr	r3, [pc, #52]	@ (8015a08 <std+0x60>)
 80159d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80159d6:	4b0d      	ldr	r3, [pc, #52]	@ (8015a0c <std+0x64>)
 80159d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80159da:	4b0d      	ldr	r3, [pc, #52]	@ (8015a10 <std+0x68>)
 80159dc:	6224      	str	r4, [r4, #32]
 80159de:	429c      	cmp	r4, r3
 80159e0:	d006      	beq.n	80159f0 <std+0x48>
 80159e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80159e6:	4294      	cmp	r4, r2
 80159e8:	d002      	beq.n	80159f0 <std+0x48>
 80159ea:	33d0      	adds	r3, #208	@ 0xd0
 80159ec:	429c      	cmp	r4, r3
 80159ee:	d105      	bne.n	80159fc <std+0x54>
 80159f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80159f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80159f8:	f000 baae 	b.w	8015f58 <__retarget_lock_init_recursive>
 80159fc:	bd10      	pop	{r4, pc}
 80159fe:	bf00      	nop
 8015a00:	08015c1d 	.word	0x08015c1d
 8015a04:	08015c3f 	.word	0x08015c3f
 8015a08:	08015c77 	.word	0x08015c77
 8015a0c:	08015c9b 	.word	0x08015c9b
 8015a10:	20003528 	.word	0x20003528

08015a14 <stdio_exit_handler>:
 8015a14:	4a02      	ldr	r2, [pc, #8]	@ (8015a20 <stdio_exit_handler+0xc>)
 8015a16:	4903      	ldr	r1, [pc, #12]	@ (8015a24 <stdio_exit_handler+0x10>)
 8015a18:	4803      	ldr	r0, [pc, #12]	@ (8015a28 <stdio_exit_handler+0x14>)
 8015a1a:	f000 b869 	b.w	8015af0 <_fwalk_sglue>
 8015a1e:	bf00      	nop
 8015a20:	20000138 	.word	0x20000138
 8015a24:	08016ac5 	.word	0x08016ac5
 8015a28:	20000148 	.word	0x20000148

08015a2c <cleanup_stdio>:
 8015a2c:	6841      	ldr	r1, [r0, #4]
 8015a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8015a60 <cleanup_stdio+0x34>)
 8015a30:	4299      	cmp	r1, r3
 8015a32:	b510      	push	{r4, lr}
 8015a34:	4604      	mov	r4, r0
 8015a36:	d001      	beq.n	8015a3c <cleanup_stdio+0x10>
 8015a38:	f001 f844 	bl	8016ac4 <_fflush_r>
 8015a3c:	68a1      	ldr	r1, [r4, #8]
 8015a3e:	4b09      	ldr	r3, [pc, #36]	@ (8015a64 <cleanup_stdio+0x38>)
 8015a40:	4299      	cmp	r1, r3
 8015a42:	d002      	beq.n	8015a4a <cleanup_stdio+0x1e>
 8015a44:	4620      	mov	r0, r4
 8015a46:	f001 f83d 	bl	8016ac4 <_fflush_r>
 8015a4a:	68e1      	ldr	r1, [r4, #12]
 8015a4c:	4b06      	ldr	r3, [pc, #24]	@ (8015a68 <cleanup_stdio+0x3c>)
 8015a4e:	4299      	cmp	r1, r3
 8015a50:	d004      	beq.n	8015a5c <cleanup_stdio+0x30>
 8015a52:	4620      	mov	r0, r4
 8015a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a58:	f001 b834 	b.w	8016ac4 <_fflush_r>
 8015a5c:	bd10      	pop	{r4, pc}
 8015a5e:	bf00      	nop
 8015a60:	20003528 	.word	0x20003528
 8015a64:	20003590 	.word	0x20003590
 8015a68:	200035f8 	.word	0x200035f8

08015a6c <global_stdio_init.part.0>:
 8015a6c:	b510      	push	{r4, lr}
 8015a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8015a9c <global_stdio_init.part.0+0x30>)
 8015a70:	4c0b      	ldr	r4, [pc, #44]	@ (8015aa0 <global_stdio_init.part.0+0x34>)
 8015a72:	4a0c      	ldr	r2, [pc, #48]	@ (8015aa4 <global_stdio_init.part.0+0x38>)
 8015a74:	601a      	str	r2, [r3, #0]
 8015a76:	4620      	mov	r0, r4
 8015a78:	2200      	movs	r2, #0
 8015a7a:	2104      	movs	r1, #4
 8015a7c:	f7ff ff94 	bl	80159a8 <std>
 8015a80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8015a84:	2201      	movs	r2, #1
 8015a86:	2109      	movs	r1, #9
 8015a88:	f7ff ff8e 	bl	80159a8 <std>
 8015a8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8015a90:	2202      	movs	r2, #2
 8015a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015a96:	2112      	movs	r1, #18
 8015a98:	f7ff bf86 	b.w	80159a8 <std>
 8015a9c:	20003660 	.word	0x20003660
 8015aa0:	20003528 	.word	0x20003528
 8015aa4:	08015a15 	.word	0x08015a15

08015aa8 <__sfp_lock_acquire>:
 8015aa8:	4801      	ldr	r0, [pc, #4]	@ (8015ab0 <__sfp_lock_acquire+0x8>)
 8015aaa:	f000 ba56 	b.w	8015f5a <__retarget_lock_acquire_recursive>
 8015aae:	bf00      	nop
 8015ab0:	20003669 	.word	0x20003669

08015ab4 <__sfp_lock_release>:
 8015ab4:	4801      	ldr	r0, [pc, #4]	@ (8015abc <__sfp_lock_release+0x8>)
 8015ab6:	f000 ba51 	b.w	8015f5c <__retarget_lock_release_recursive>
 8015aba:	bf00      	nop
 8015abc:	20003669 	.word	0x20003669

08015ac0 <__sinit>:
 8015ac0:	b510      	push	{r4, lr}
 8015ac2:	4604      	mov	r4, r0
 8015ac4:	f7ff fff0 	bl	8015aa8 <__sfp_lock_acquire>
 8015ac8:	6a23      	ldr	r3, [r4, #32]
 8015aca:	b11b      	cbz	r3, 8015ad4 <__sinit+0x14>
 8015acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015ad0:	f7ff bff0 	b.w	8015ab4 <__sfp_lock_release>
 8015ad4:	4b04      	ldr	r3, [pc, #16]	@ (8015ae8 <__sinit+0x28>)
 8015ad6:	6223      	str	r3, [r4, #32]
 8015ad8:	4b04      	ldr	r3, [pc, #16]	@ (8015aec <__sinit+0x2c>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d1f5      	bne.n	8015acc <__sinit+0xc>
 8015ae0:	f7ff ffc4 	bl	8015a6c <global_stdio_init.part.0>
 8015ae4:	e7f2      	b.n	8015acc <__sinit+0xc>
 8015ae6:	bf00      	nop
 8015ae8:	08015a2d 	.word	0x08015a2d
 8015aec:	20003660 	.word	0x20003660

08015af0 <_fwalk_sglue>:
 8015af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015af4:	4607      	mov	r7, r0
 8015af6:	4688      	mov	r8, r1
 8015af8:	4614      	mov	r4, r2
 8015afa:	2600      	movs	r6, #0
 8015afc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015b00:	f1b9 0901 	subs.w	r9, r9, #1
 8015b04:	d505      	bpl.n	8015b12 <_fwalk_sglue+0x22>
 8015b06:	6824      	ldr	r4, [r4, #0]
 8015b08:	2c00      	cmp	r4, #0
 8015b0a:	d1f7      	bne.n	8015afc <_fwalk_sglue+0xc>
 8015b0c:	4630      	mov	r0, r6
 8015b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015b12:	89ab      	ldrh	r3, [r5, #12]
 8015b14:	2b01      	cmp	r3, #1
 8015b16:	d907      	bls.n	8015b28 <_fwalk_sglue+0x38>
 8015b18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015b1c:	3301      	adds	r3, #1
 8015b1e:	d003      	beq.n	8015b28 <_fwalk_sglue+0x38>
 8015b20:	4629      	mov	r1, r5
 8015b22:	4638      	mov	r0, r7
 8015b24:	47c0      	blx	r8
 8015b26:	4306      	orrs	r6, r0
 8015b28:	3568      	adds	r5, #104	@ 0x68
 8015b2a:	e7e9      	b.n	8015b00 <_fwalk_sglue+0x10>

08015b2c <iprintf>:
 8015b2c:	b40f      	push	{r0, r1, r2, r3}
 8015b2e:	b507      	push	{r0, r1, r2, lr}
 8015b30:	4906      	ldr	r1, [pc, #24]	@ (8015b4c <iprintf+0x20>)
 8015b32:	ab04      	add	r3, sp, #16
 8015b34:	6808      	ldr	r0, [r1, #0]
 8015b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8015b3a:	6881      	ldr	r1, [r0, #8]
 8015b3c:	9301      	str	r3, [sp, #4]
 8015b3e:	f000 fc97 	bl	8016470 <_vfiprintf_r>
 8015b42:	b003      	add	sp, #12
 8015b44:	f85d eb04 	ldr.w	lr, [sp], #4
 8015b48:	b004      	add	sp, #16
 8015b4a:	4770      	bx	lr
 8015b4c:	20000144 	.word	0x20000144

08015b50 <putchar>:
 8015b50:	4b02      	ldr	r3, [pc, #8]	@ (8015b5c <putchar+0xc>)
 8015b52:	4601      	mov	r1, r0
 8015b54:	6818      	ldr	r0, [r3, #0]
 8015b56:	6882      	ldr	r2, [r0, #8]
 8015b58:	f001 b83e 	b.w	8016bd8 <_putc_r>
 8015b5c:	20000144 	.word	0x20000144

08015b60 <_puts_r>:
 8015b60:	6a03      	ldr	r3, [r0, #32]
 8015b62:	b570      	push	{r4, r5, r6, lr}
 8015b64:	6884      	ldr	r4, [r0, #8]
 8015b66:	4605      	mov	r5, r0
 8015b68:	460e      	mov	r6, r1
 8015b6a:	b90b      	cbnz	r3, 8015b70 <_puts_r+0x10>
 8015b6c:	f7ff ffa8 	bl	8015ac0 <__sinit>
 8015b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b72:	07db      	lsls	r3, r3, #31
 8015b74:	d405      	bmi.n	8015b82 <_puts_r+0x22>
 8015b76:	89a3      	ldrh	r3, [r4, #12]
 8015b78:	0598      	lsls	r0, r3, #22
 8015b7a:	d402      	bmi.n	8015b82 <_puts_r+0x22>
 8015b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015b7e:	f000 f9ec 	bl	8015f5a <__retarget_lock_acquire_recursive>
 8015b82:	89a3      	ldrh	r3, [r4, #12]
 8015b84:	0719      	lsls	r1, r3, #28
 8015b86:	d502      	bpl.n	8015b8e <_puts_r+0x2e>
 8015b88:	6923      	ldr	r3, [r4, #16]
 8015b8a:	2b00      	cmp	r3, #0
 8015b8c:	d135      	bne.n	8015bfa <_puts_r+0x9a>
 8015b8e:	4621      	mov	r1, r4
 8015b90:	4628      	mov	r0, r5
 8015b92:	f000 f8fd 	bl	8015d90 <__swsetup_r>
 8015b96:	b380      	cbz	r0, 8015bfa <_puts_r+0x9a>
 8015b98:	f04f 35ff 	mov.w	r5, #4294967295
 8015b9c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8015b9e:	07da      	lsls	r2, r3, #31
 8015ba0:	d405      	bmi.n	8015bae <_puts_r+0x4e>
 8015ba2:	89a3      	ldrh	r3, [r4, #12]
 8015ba4:	059b      	lsls	r3, r3, #22
 8015ba6:	d402      	bmi.n	8015bae <_puts_r+0x4e>
 8015ba8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8015baa:	f000 f9d7 	bl	8015f5c <__retarget_lock_release_recursive>
 8015bae:	4628      	mov	r0, r5
 8015bb0:	bd70      	pop	{r4, r5, r6, pc}
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	da04      	bge.n	8015bc0 <_puts_r+0x60>
 8015bb6:	69a2      	ldr	r2, [r4, #24]
 8015bb8:	429a      	cmp	r2, r3
 8015bba:	dc17      	bgt.n	8015bec <_puts_r+0x8c>
 8015bbc:	290a      	cmp	r1, #10
 8015bbe:	d015      	beq.n	8015bec <_puts_r+0x8c>
 8015bc0:	6823      	ldr	r3, [r4, #0]
 8015bc2:	1c5a      	adds	r2, r3, #1
 8015bc4:	6022      	str	r2, [r4, #0]
 8015bc6:	7019      	strb	r1, [r3, #0]
 8015bc8:	68a3      	ldr	r3, [r4, #8]
 8015bca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8015bce:	3b01      	subs	r3, #1
 8015bd0:	60a3      	str	r3, [r4, #8]
 8015bd2:	2900      	cmp	r1, #0
 8015bd4:	d1ed      	bne.n	8015bb2 <_puts_r+0x52>
 8015bd6:	2b00      	cmp	r3, #0
 8015bd8:	da11      	bge.n	8015bfe <_puts_r+0x9e>
 8015bda:	4622      	mov	r2, r4
 8015bdc:	210a      	movs	r1, #10
 8015bde:	4628      	mov	r0, r5
 8015be0:	f000 f898 	bl	8015d14 <__swbuf_r>
 8015be4:	3001      	adds	r0, #1
 8015be6:	d0d7      	beq.n	8015b98 <_puts_r+0x38>
 8015be8:	250a      	movs	r5, #10
 8015bea:	e7d7      	b.n	8015b9c <_puts_r+0x3c>
 8015bec:	4622      	mov	r2, r4
 8015bee:	4628      	mov	r0, r5
 8015bf0:	f000 f890 	bl	8015d14 <__swbuf_r>
 8015bf4:	3001      	adds	r0, #1
 8015bf6:	d1e7      	bne.n	8015bc8 <_puts_r+0x68>
 8015bf8:	e7ce      	b.n	8015b98 <_puts_r+0x38>
 8015bfa:	3e01      	subs	r6, #1
 8015bfc:	e7e4      	b.n	8015bc8 <_puts_r+0x68>
 8015bfe:	6823      	ldr	r3, [r4, #0]
 8015c00:	1c5a      	adds	r2, r3, #1
 8015c02:	6022      	str	r2, [r4, #0]
 8015c04:	220a      	movs	r2, #10
 8015c06:	701a      	strb	r2, [r3, #0]
 8015c08:	e7ee      	b.n	8015be8 <_puts_r+0x88>
	...

08015c0c <puts>:
 8015c0c:	4b02      	ldr	r3, [pc, #8]	@ (8015c18 <puts+0xc>)
 8015c0e:	4601      	mov	r1, r0
 8015c10:	6818      	ldr	r0, [r3, #0]
 8015c12:	f7ff bfa5 	b.w	8015b60 <_puts_r>
 8015c16:	bf00      	nop
 8015c18:	20000144 	.word	0x20000144

08015c1c <__sread>:
 8015c1c:	b510      	push	{r4, lr}
 8015c1e:	460c      	mov	r4, r1
 8015c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c24:	f000 f94a 	bl	8015ebc <_read_r>
 8015c28:	2800      	cmp	r0, #0
 8015c2a:	bfab      	itete	ge
 8015c2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8015c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8015c30:	181b      	addge	r3, r3, r0
 8015c32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8015c36:	bfac      	ite	ge
 8015c38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8015c3a:	81a3      	strhlt	r3, [r4, #12]
 8015c3c:	bd10      	pop	{r4, pc}

08015c3e <__swrite>:
 8015c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c42:	461f      	mov	r7, r3
 8015c44:	898b      	ldrh	r3, [r1, #12]
 8015c46:	05db      	lsls	r3, r3, #23
 8015c48:	4605      	mov	r5, r0
 8015c4a:	460c      	mov	r4, r1
 8015c4c:	4616      	mov	r6, r2
 8015c4e:	d505      	bpl.n	8015c5c <__swrite+0x1e>
 8015c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c54:	2302      	movs	r3, #2
 8015c56:	2200      	movs	r2, #0
 8015c58:	f000 f91e 	bl	8015e98 <_lseek_r>
 8015c5c:	89a3      	ldrh	r3, [r4, #12]
 8015c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015c62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015c66:	81a3      	strh	r3, [r4, #12]
 8015c68:	4632      	mov	r2, r6
 8015c6a:	463b      	mov	r3, r7
 8015c6c:	4628      	mov	r0, r5
 8015c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c72:	f000 b935 	b.w	8015ee0 <_write_r>

08015c76 <__sseek>:
 8015c76:	b510      	push	{r4, lr}
 8015c78:	460c      	mov	r4, r1
 8015c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c7e:	f000 f90b 	bl	8015e98 <_lseek_r>
 8015c82:	1c43      	adds	r3, r0, #1
 8015c84:	89a3      	ldrh	r3, [r4, #12]
 8015c86:	bf15      	itete	ne
 8015c88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8015c8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8015c8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8015c92:	81a3      	strheq	r3, [r4, #12]
 8015c94:	bf18      	it	ne
 8015c96:	81a3      	strhne	r3, [r4, #12]
 8015c98:	bd10      	pop	{r4, pc}

08015c9a <__sclose>:
 8015c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015c9e:	f000 b8eb 	b.w	8015e78 <_close_r>

08015ca2 <_vsniprintf_r>:
 8015ca2:	b530      	push	{r4, r5, lr}
 8015ca4:	4614      	mov	r4, r2
 8015ca6:	2c00      	cmp	r4, #0
 8015ca8:	b09b      	sub	sp, #108	@ 0x6c
 8015caa:	4605      	mov	r5, r0
 8015cac:	461a      	mov	r2, r3
 8015cae:	da05      	bge.n	8015cbc <_vsniprintf_r+0x1a>
 8015cb0:	238b      	movs	r3, #139	@ 0x8b
 8015cb2:	6003      	str	r3, [r0, #0]
 8015cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8015cb8:	b01b      	add	sp, #108	@ 0x6c
 8015cba:	bd30      	pop	{r4, r5, pc}
 8015cbc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8015cc0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015cc4:	bf14      	ite	ne
 8015cc6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015cca:	4623      	moveq	r3, r4
 8015ccc:	9302      	str	r3, [sp, #8]
 8015cce:	9305      	str	r3, [sp, #20]
 8015cd0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015cd4:	9100      	str	r1, [sp, #0]
 8015cd6:	9104      	str	r1, [sp, #16]
 8015cd8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015cdc:	4669      	mov	r1, sp
 8015cde:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8015ce0:	f000 faa0 	bl	8016224 <_svfiprintf_r>
 8015ce4:	1c43      	adds	r3, r0, #1
 8015ce6:	bfbc      	itt	lt
 8015ce8:	238b      	movlt	r3, #139	@ 0x8b
 8015cea:	602b      	strlt	r3, [r5, #0]
 8015cec:	2c00      	cmp	r4, #0
 8015cee:	d0e3      	beq.n	8015cb8 <_vsniprintf_r+0x16>
 8015cf0:	9b00      	ldr	r3, [sp, #0]
 8015cf2:	2200      	movs	r2, #0
 8015cf4:	701a      	strb	r2, [r3, #0]
 8015cf6:	e7df      	b.n	8015cb8 <_vsniprintf_r+0x16>

08015cf8 <vsniprintf>:
 8015cf8:	b507      	push	{r0, r1, r2, lr}
 8015cfa:	9300      	str	r3, [sp, #0]
 8015cfc:	4613      	mov	r3, r2
 8015cfe:	460a      	mov	r2, r1
 8015d00:	4601      	mov	r1, r0
 8015d02:	4803      	ldr	r0, [pc, #12]	@ (8015d10 <vsniprintf+0x18>)
 8015d04:	6800      	ldr	r0, [r0, #0]
 8015d06:	f7ff ffcc 	bl	8015ca2 <_vsniprintf_r>
 8015d0a:	b003      	add	sp, #12
 8015d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d10:	20000144 	.word	0x20000144

08015d14 <__swbuf_r>:
 8015d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d16:	460e      	mov	r6, r1
 8015d18:	4614      	mov	r4, r2
 8015d1a:	4605      	mov	r5, r0
 8015d1c:	b118      	cbz	r0, 8015d26 <__swbuf_r+0x12>
 8015d1e:	6a03      	ldr	r3, [r0, #32]
 8015d20:	b90b      	cbnz	r3, 8015d26 <__swbuf_r+0x12>
 8015d22:	f7ff fecd 	bl	8015ac0 <__sinit>
 8015d26:	69a3      	ldr	r3, [r4, #24]
 8015d28:	60a3      	str	r3, [r4, #8]
 8015d2a:	89a3      	ldrh	r3, [r4, #12]
 8015d2c:	071a      	lsls	r2, r3, #28
 8015d2e:	d501      	bpl.n	8015d34 <__swbuf_r+0x20>
 8015d30:	6923      	ldr	r3, [r4, #16]
 8015d32:	b943      	cbnz	r3, 8015d46 <__swbuf_r+0x32>
 8015d34:	4621      	mov	r1, r4
 8015d36:	4628      	mov	r0, r5
 8015d38:	f000 f82a 	bl	8015d90 <__swsetup_r>
 8015d3c:	b118      	cbz	r0, 8015d46 <__swbuf_r+0x32>
 8015d3e:	f04f 37ff 	mov.w	r7, #4294967295
 8015d42:	4638      	mov	r0, r7
 8015d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015d46:	6823      	ldr	r3, [r4, #0]
 8015d48:	6922      	ldr	r2, [r4, #16]
 8015d4a:	1a98      	subs	r0, r3, r2
 8015d4c:	6963      	ldr	r3, [r4, #20]
 8015d4e:	b2f6      	uxtb	r6, r6
 8015d50:	4283      	cmp	r3, r0
 8015d52:	4637      	mov	r7, r6
 8015d54:	dc05      	bgt.n	8015d62 <__swbuf_r+0x4e>
 8015d56:	4621      	mov	r1, r4
 8015d58:	4628      	mov	r0, r5
 8015d5a:	f000 feb3 	bl	8016ac4 <_fflush_r>
 8015d5e:	2800      	cmp	r0, #0
 8015d60:	d1ed      	bne.n	8015d3e <__swbuf_r+0x2a>
 8015d62:	68a3      	ldr	r3, [r4, #8]
 8015d64:	3b01      	subs	r3, #1
 8015d66:	60a3      	str	r3, [r4, #8]
 8015d68:	6823      	ldr	r3, [r4, #0]
 8015d6a:	1c5a      	adds	r2, r3, #1
 8015d6c:	6022      	str	r2, [r4, #0]
 8015d6e:	701e      	strb	r6, [r3, #0]
 8015d70:	6962      	ldr	r2, [r4, #20]
 8015d72:	1c43      	adds	r3, r0, #1
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d004      	beq.n	8015d82 <__swbuf_r+0x6e>
 8015d78:	89a3      	ldrh	r3, [r4, #12]
 8015d7a:	07db      	lsls	r3, r3, #31
 8015d7c:	d5e1      	bpl.n	8015d42 <__swbuf_r+0x2e>
 8015d7e:	2e0a      	cmp	r6, #10
 8015d80:	d1df      	bne.n	8015d42 <__swbuf_r+0x2e>
 8015d82:	4621      	mov	r1, r4
 8015d84:	4628      	mov	r0, r5
 8015d86:	f000 fe9d 	bl	8016ac4 <_fflush_r>
 8015d8a:	2800      	cmp	r0, #0
 8015d8c:	d0d9      	beq.n	8015d42 <__swbuf_r+0x2e>
 8015d8e:	e7d6      	b.n	8015d3e <__swbuf_r+0x2a>

08015d90 <__swsetup_r>:
 8015d90:	b538      	push	{r3, r4, r5, lr}
 8015d92:	4b29      	ldr	r3, [pc, #164]	@ (8015e38 <__swsetup_r+0xa8>)
 8015d94:	4605      	mov	r5, r0
 8015d96:	6818      	ldr	r0, [r3, #0]
 8015d98:	460c      	mov	r4, r1
 8015d9a:	b118      	cbz	r0, 8015da4 <__swsetup_r+0x14>
 8015d9c:	6a03      	ldr	r3, [r0, #32]
 8015d9e:	b90b      	cbnz	r3, 8015da4 <__swsetup_r+0x14>
 8015da0:	f7ff fe8e 	bl	8015ac0 <__sinit>
 8015da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015da8:	0719      	lsls	r1, r3, #28
 8015daa:	d422      	bmi.n	8015df2 <__swsetup_r+0x62>
 8015dac:	06da      	lsls	r2, r3, #27
 8015dae:	d407      	bmi.n	8015dc0 <__swsetup_r+0x30>
 8015db0:	2209      	movs	r2, #9
 8015db2:	602a      	str	r2, [r5, #0]
 8015db4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015db8:	81a3      	strh	r3, [r4, #12]
 8015dba:	f04f 30ff 	mov.w	r0, #4294967295
 8015dbe:	e033      	b.n	8015e28 <__swsetup_r+0x98>
 8015dc0:	0758      	lsls	r0, r3, #29
 8015dc2:	d512      	bpl.n	8015dea <__swsetup_r+0x5a>
 8015dc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8015dc6:	b141      	cbz	r1, 8015dda <__swsetup_r+0x4a>
 8015dc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8015dcc:	4299      	cmp	r1, r3
 8015dce:	d002      	beq.n	8015dd6 <__swsetup_r+0x46>
 8015dd0:	4628      	mov	r0, r5
 8015dd2:	f000 f8d3 	bl	8015f7c <_free_r>
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8015dda:	89a3      	ldrh	r3, [r4, #12]
 8015ddc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8015de0:	81a3      	strh	r3, [r4, #12]
 8015de2:	2300      	movs	r3, #0
 8015de4:	6063      	str	r3, [r4, #4]
 8015de6:	6923      	ldr	r3, [r4, #16]
 8015de8:	6023      	str	r3, [r4, #0]
 8015dea:	89a3      	ldrh	r3, [r4, #12]
 8015dec:	f043 0308 	orr.w	r3, r3, #8
 8015df0:	81a3      	strh	r3, [r4, #12]
 8015df2:	6923      	ldr	r3, [r4, #16]
 8015df4:	b94b      	cbnz	r3, 8015e0a <__swsetup_r+0x7a>
 8015df6:	89a3      	ldrh	r3, [r4, #12]
 8015df8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8015dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015e00:	d003      	beq.n	8015e0a <__swsetup_r+0x7a>
 8015e02:	4621      	mov	r1, r4
 8015e04:	4628      	mov	r0, r5
 8015e06:	f000 feab 	bl	8016b60 <__smakebuf_r>
 8015e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015e0e:	f013 0201 	ands.w	r2, r3, #1
 8015e12:	d00a      	beq.n	8015e2a <__swsetup_r+0x9a>
 8015e14:	2200      	movs	r2, #0
 8015e16:	60a2      	str	r2, [r4, #8]
 8015e18:	6962      	ldr	r2, [r4, #20]
 8015e1a:	4252      	negs	r2, r2
 8015e1c:	61a2      	str	r2, [r4, #24]
 8015e1e:	6922      	ldr	r2, [r4, #16]
 8015e20:	b942      	cbnz	r2, 8015e34 <__swsetup_r+0xa4>
 8015e22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8015e26:	d1c5      	bne.n	8015db4 <__swsetup_r+0x24>
 8015e28:	bd38      	pop	{r3, r4, r5, pc}
 8015e2a:	0799      	lsls	r1, r3, #30
 8015e2c:	bf58      	it	pl
 8015e2e:	6962      	ldrpl	r2, [r4, #20]
 8015e30:	60a2      	str	r2, [r4, #8]
 8015e32:	e7f4      	b.n	8015e1e <__swsetup_r+0x8e>
 8015e34:	2000      	movs	r0, #0
 8015e36:	e7f7      	b.n	8015e28 <__swsetup_r+0x98>
 8015e38:	20000144 	.word	0x20000144

08015e3c <memset>:
 8015e3c:	4402      	add	r2, r0
 8015e3e:	4603      	mov	r3, r0
 8015e40:	4293      	cmp	r3, r2
 8015e42:	d100      	bne.n	8015e46 <memset+0xa>
 8015e44:	4770      	bx	lr
 8015e46:	f803 1b01 	strb.w	r1, [r3], #1
 8015e4a:	e7f9      	b.n	8015e40 <memset+0x4>

08015e4c <strrchr>:
 8015e4c:	b538      	push	{r3, r4, r5, lr}
 8015e4e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8015e52:	4603      	mov	r3, r0
 8015e54:	d10e      	bne.n	8015e74 <strrchr+0x28>
 8015e56:	4621      	mov	r1, r4
 8015e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015e5c:	f000 bf0a 	b.w	8016c74 <strchr>
 8015e60:	1c43      	adds	r3, r0, #1
 8015e62:	4605      	mov	r5, r0
 8015e64:	4621      	mov	r1, r4
 8015e66:	4618      	mov	r0, r3
 8015e68:	f000 ff04 	bl	8016c74 <strchr>
 8015e6c:	2800      	cmp	r0, #0
 8015e6e:	d1f7      	bne.n	8015e60 <strrchr+0x14>
 8015e70:	4628      	mov	r0, r5
 8015e72:	bd38      	pop	{r3, r4, r5, pc}
 8015e74:	2500      	movs	r5, #0
 8015e76:	e7f5      	b.n	8015e64 <strrchr+0x18>

08015e78 <_close_r>:
 8015e78:	b538      	push	{r3, r4, r5, lr}
 8015e7a:	4d06      	ldr	r5, [pc, #24]	@ (8015e94 <_close_r+0x1c>)
 8015e7c:	2300      	movs	r3, #0
 8015e7e:	4604      	mov	r4, r0
 8015e80:	4608      	mov	r0, r1
 8015e82:	602b      	str	r3, [r5, #0]
 8015e84:	f7ee fe93 	bl	8004bae <_close>
 8015e88:	1c43      	adds	r3, r0, #1
 8015e8a:	d102      	bne.n	8015e92 <_close_r+0x1a>
 8015e8c:	682b      	ldr	r3, [r5, #0]
 8015e8e:	b103      	cbz	r3, 8015e92 <_close_r+0x1a>
 8015e90:	6023      	str	r3, [r4, #0]
 8015e92:	bd38      	pop	{r3, r4, r5, pc}
 8015e94:	20003664 	.word	0x20003664

08015e98 <_lseek_r>:
 8015e98:	b538      	push	{r3, r4, r5, lr}
 8015e9a:	4d07      	ldr	r5, [pc, #28]	@ (8015eb8 <_lseek_r+0x20>)
 8015e9c:	4604      	mov	r4, r0
 8015e9e:	4608      	mov	r0, r1
 8015ea0:	4611      	mov	r1, r2
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	602a      	str	r2, [r5, #0]
 8015ea6:	461a      	mov	r2, r3
 8015ea8:	f7ee fea8 	bl	8004bfc <_lseek>
 8015eac:	1c43      	adds	r3, r0, #1
 8015eae:	d102      	bne.n	8015eb6 <_lseek_r+0x1e>
 8015eb0:	682b      	ldr	r3, [r5, #0]
 8015eb2:	b103      	cbz	r3, 8015eb6 <_lseek_r+0x1e>
 8015eb4:	6023      	str	r3, [r4, #0]
 8015eb6:	bd38      	pop	{r3, r4, r5, pc}
 8015eb8:	20003664 	.word	0x20003664

08015ebc <_read_r>:
 8015ebc:	b538      	push	{r3, r4, r5, lr}
 8015ebe:	4d07      	ldr	r5, [pc, #28]	@ (8015edc <_read_r+0x20>)
 8015ec0:	4604      	mov	r4, r0
 8015ec2:	4608      	mov	r0, r1
 8015ec4:	4611      	mov	r1, r2
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	602a      	str	r2, [r5, #0]
 8015eca:	461a      	mov	r2, r3
 8015ecc:	f7ee fe52 	bl	8004b74 <_read>
 8015ed0:	1c43      	adds	r3, r0, #1
 8015ed2:	d102      	bne.n	8015eda <_read_r+0x1e>
 8015ed4:	682b      	ldr	r3, [r5, #0]
 8015ed6:	b103      	cbz	r3, 8015eda <_read_r+0x1e>
 8015ed8:	6023      	str	r3, [r4, #0]
 8015eda:	bd38      	pop	{r3, r4, r5, pc}
 8015edc:	20003664 	.word	0x20003664

08015ee0 <_write_r>:
 8015ee0:	b538      	push	{r3, r4, r5, lr}
 8015ee2:	4d07      	ldr	r5, [pc, #28]	@ (8015f00 <_write_r+0x20>)
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	4608      	mov	r0, r1
 8015ee8:	4611      	mov	r1, r2
 8015eea:	2200      	movs	r2, #0
 8015eec:	602a      	str	r2, [r5, #0]
 8015eee:	461a      	mov	r2, r3
 8015ef0:	f7fb ff80 	bl	8011df4 <_write>
 8015ef4:	1c43      	adds	r3, r0, #1
 8015ef6:	d102      	bne.n	8015efe <_write_r+0x1e>
 8015ef8:	682b      	ldr	r3, [r5, #0]
 8015efa:	b103      	cbz	r3, 8015efe <_write_r+0x1e>
 8015efc:	6023      	str	r3, [r4, #0]
 8015efe:	bd38      	pop	{r3, r4, r5, pc}
 8015f00:	20003664 	.word	0x20003664

08015f04 <__errno>:
 8015f04:	4b01      	ldr	r3, [pc, #4]	@ (8015f0c <__errno+0x8>)
 8015f06:	6818      	ldr	r0, [r3, #0]
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop
 8015f0c:	20000144 	.word	0x20000144

08015f10 <__libc_init_array>:
 8015f10:	b570      	push	{r4, r5, r6, lr}
 8015f12:	4d0d      	ldr	r5, [pc, #52]	@ (8015f48 <__libc_init_array+0x38>)
 8015f14:	4c0d      	ldr	r4, [pc, #52]	@ (8015f4c <__libc_init_array+0x3c>)
 8015f16:	1b64      	subs	r4, r4, r5
 8015f18:	10a4      	asrs	r4, r4, #2
 8015f1a:	2600      	movs	r6, #0
 8015f1c:	42a6      	cmp	r6, r4
 8015f1e:	d109      	bne.n	8015f34 <__libc_init_array+0x24>
 8015f20:	4d0b      	ldr	r5, [pc, #44]	@ (8015f50 <__libc_init_array+0x40>)
 8015f22:	4c0c      	ldr	r4, [pc, #48]	@ (8015f54 <__libc_init_array+0x44>)
 8015f24:	f001 ff4c 	bl	8017dc0 <_init>
 8015f28:	1b64      	subs	r4, r4, r5
 8015f2a:	10a4      	asrs	r4, r4, #2
 8015f2c:	2600      	movs	r6, #0
 8015f2e:	42a6      	cmp	r6, r4
 8015f30:	d105      	bne.n	8015f3e <__libc_init_array+0x2e>
 8015f32:	bd70      	pop	{r4, r5, r6, pc}
 8015f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f38:	4798      	blx	r3
 8015f3a:	3601      	adds	r6, #1
 8015f3c:	e7ee      	b.n	8015f1c <__libc_init_array+0xc>
 8015f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f42:	4798      	blx	r3
 8015f44:	3601      	adds	r6, #1
 8015f46:	e7f2      	b.n	8015f2e <__libc_init_array+0x1e>
 8015f48:	08019f60 	.word	0x08019f60
 8015f4c:	08019f60 	.word	0x08019f60
 8015f50:	08019f60 	.word	0x08019f60
 8015f54:	08019f64 	.word	0x08019f64

08015f58 <__retarget_lock_init_recursive>:
 8015f58:	4770      	bx	lr

08015f5a <__retarget_lock_acquire_recursive>:
 8015f5a:	4770      	bx	lr

08015f5c <__retarget_lock_release_recursive>:
 8015f5c:	4770      	bx	lr

08015f5e <memcpy>:
 8015f5e:	440a      	add	r2, r1
 8015f60:	4291      	cmp	r1, r2
 8015f62:	f100 33ff 	add.w	r3, r0, #4294967295
 8015f66:	d100      	bne.n	8015f6a <memcpy+0xc>
 8015f68:	4770      	bx	lr
 8015f6a:	b510      	push	{r4, lr}
 8015f6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015f70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015f74:	4291      	cmp	r1, r2
 8015f76:	d1f9      	bne.n	8015f6c <memcpy+0xe>
 8015f78:	bd10      	pop	{r4, pc}
	...

08015f7c <_free_r>:
 8015f7c:	b538      	push	{r3, r4, r5, lr}
 8015f7e:	4605      	mov	r5, r0
 8015f80:	2900      	cmp	r1, #0
 8015f82:	d041      	beq.n	8016008 <_free_r+0x8c>
 8015f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015f88:	1f0c      	subs	r4, r1, #4
 8015f8a:	2b00      	cmp	r3, #0
 8015f8c:	bfb8      	it	lt
 8015f8e:	18e4      	addlt	r4, r4, r3
 8015f90:	f000 f8e0 	bl	8016154 <__malloc_lock>
 8015f94:	4a1d      	ldr	r2, [pc, #116]	@ (801600c <_free_r+0x90>)
 8015f96:	6813      	ldr	r3, [r2, #0]
 8015f98:	b933      	cbnz	r3, 8015fa8 <_free_r+0x2c>
 8015f9a:	6063      	str	r3, [r4, #4]
 8015f9c:	6014      	str	r4, [r2, #0]
 8015f9e:	4628      	mov	r0, r5
 8015fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015fa4:	f000 b8dc 	b.w	8016160 <__malloc_unlock>
 8015fa8:	42a3      	cmp	r3, r4
 8015faa:	d908      	bls.n	8015fbe <_free_r+0x42>
 8015fac:	6820      	ldr	r0, [r4, #0]
 8015fae:	1821      	adds	r1, r4, r0
 8015fb0:	428b      	cmp	r3, r1
 8015fb2:	bf01      	itttt	eq
 8015fb4:	6819      	ldreq	r1, [r3, #0]
 8015fb6:	685b      	ldreq	r3, [r3, #4]
 8015fb8:	1809      	addeq	r1, r1, r0
 8015fba:	6021      	streq	r1, [r4, #0]
 8015fbc:	e7ed      	b.n	8015f9a <_free_r+0x1e>
 8015fbe:	461a      	mov	r2, r3
 8015fc0:	685b      	ldr	r3, [r3, #4]
 8015fc2:	b10b      	cbz	r3, 8015fc8 <_free_r+0x4c>
 8015fc4:	42a3      	cmp	r3, r4
 8015fc6:	d9fa      	bls.n	8015fbe <_free_r+0x42>
 8015fc8:	6811      	ldr	r1, [r2, #0]
 8015fca:	1850      	adds	r0, r2, r1
 8015fcc:	42a0      	cmp	r0, r4
 8015fce:	d10b      	bne.n	8015fe8 <_free_r+0x6c>
 8015fd0:	6820      	ldr	r0, [r4, #0]
 8015fd2:	4401      	add	r1, r0
 8015fd4:	1850      	adds	r0, r2, r1
 8015fd6:	4283      	cmp	r3, r0
 8015fd8:	6011      	str	r1, [r2, #0]
 8015fda:	d1e0      	bne.n	8015f9e <_free_r+0x22>
 8015fdc:	6818      	ldr	r0, [r3, #0]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	6053      	str	r3, [r2, #4]
 8015fe2:	4408      	add	r0, r1
 8015fe4:	6010      	str	r0, [r2, #0]
 8015fe6:	e7da      	b.n	8015f9e <_free_r+0x22>
 8015fe8:	d902      	bls.n	8015ff0 <_free_r+0x74>
 8015fea:	230c      	movs	r3, #12
 8015fec:	602b      	str	r3, [r5, #0]
 8015fee:	e7d6      	b.n	8015f9e <_free_r+0x22>
 8015ff0:	6820      	ldr	r0, [r4, #0]
 8015ff2:	1821      	adds	r1, r4, r0
 8015ff4:	428b      	cmp	r3, r1
 8015ff6:	bf04      	itt	eq
 8015ff8:	6819      	ldreq	r1, [r3, #0]
 8015ffa:	685b      	ldreq	r3, [r3, #4]
 8015ffc:	6063      	str	r3, [r4, #4]
 8015ffe:	bf04      	itt	eq
 8016000:	1809      	addeq	r1, r1, r0
 8016002:	6021      	streq	r1, [r4, #0]
 8016004:	6054      	str	r4, [r2, #4]
 8016006:	e7ca      	b.n	8015f9e <_free_r+0x22>
 8016008:	bd38      	pop	{r3, r4, r5, pc}
 801600a:	bf00      	nop
 801600c:	20003670 	.word	0x20003670

08016010 <sbrk_aligned>:
 8016010:	b570      	push	{r4, r5, r6, lr}
 8016012:	4e0f      	ldr	r6, [pc, #60]	@ (8016050 <sbrk_aligned+0x40>)
 8016014:	460c      	mov	r4, r1
 8016016:	6831      	ldr	r1, [r6, #0]
 8016018:	4605      	mov	r5, r0
 801601a:	b911      	cbnz	r1, 8016022 <sbrk_aligned+0x12>
 801601c:	f000 fe5a 	bl	8016cd4 <_sbrk_r>
 8016020:	6030      	str	r0, [r6, #0]
 8016022:	4621      	mov	r1, r4
 8016024:	4628      	mov	r0, r5
 8016026:	f000 fe55 	bl	8016cd4 <_sbrk_r>
 801602a:	1c43      	adds	r3, r0, #1
 801602c:	d103      	bne.n	8016036 <sbrk_aligned+0x26>
 801602e:	f04f 34ff 	mov.w	r4, #4294967295
 8016032:	4620      	mov	r0, r4
 8016034:	bd70      	pop	{r4, r5, r6, pc}
 8016036:	1cc4      	adds	r4, r0, #3
 8016038:	f024 0403 	bic.w	r4, r4, #3
 801603c:	42a0      	cmp	r0, r4
 801603e:	d0f8      	beq.n	8016032 <sbrk_aligned+0x22>
 8016040:	1a21      	subs	r1, r4, r0
 8016042:	4628      	mov	r0, r5
 8016044:	f000 fe46 	bl	8016cd4 <_sbrk_r>
 8016048:	3001      	adds	r0, #1
 801604a:	d1f2      	bne.n	8016032 <sbrk_aligned+0x22>
 801604c:	e7ef      	b.n	801602e <sbrk_aligned+0x1e>
 801604e:	bf00      	nop
 8016050:	2000366c 	.word	0x2000366c

08016054 <_malloc_r>:
 8016054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016058:	1ccd      	adds	r5, r1, #3
 801605a:	f025 0503 	bic.w	r5, r5, #3
 801605e:	3508      	adds	r5, #8
 8016060:	2d0c      	cmp	r5, #12
 8016062:	bf38      	it	cc
 8016064:	250c      	movcc	r5, #12
 8016066:	2d00      	cmp	r5, #0
 8016068:	4606      	mov	r6, r0
 801606a:	db01      	blt.n	8016070 <_malloc_r+0x1c>
 801606c:	42a9      	cmp	r1, r5
 801606e:	d904      	bls.n	801607a <_malloc_r+0x26>
 8016070:	230c      	movs	r3, #12
 8016072:	6033      	str	r3, [r6, #0]
 8016074:	2000      	movs	r0, #0
 8016076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801607a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016150 <_malloc_r+0xfc>
 801607e:	f000 f869 	bl	8016154 <__malloc_lock>
 8016082:	f8d8 3000 	ldr.w	r3, [r8]
 8016086:	461c      	mov	r4, r3
 8016088:	bb44      	cbnz	r4, 80160dc <_malloc_r+0x88>
 801608a:	4629      	mov	r1, r5
 801608c:	4630      	mov	r0, r6
 801608e:	f7ff ffbf 	bl	8016010 <sbrk_aligned>
 8016092:	1c43      	adds	r3, r0, #1
 8016094:	4604      	mov	r4, r0
 8016096:	d158      	bne.n	801614a <_malloc_r+0xf6>
 8016098:	f8d8 4000 	ldr.w	r4, [r8]
 801609c:	4627      	mov	r7, r4
 801609e:	2f00      	cmp	r7, #0
 80160a0:	d143      	bne.n	801612a <_malloc_r+0xd6>
 80160a2:	2c00      	cmp	r4, #0
 80160a4:	d04b      	beq.n	801613e <_malloc_r+0xea>
 80160a6:	6823      	ldr	r3, [r4, #0]
 80160a8:	4639      	mov	r1, r7
 80160aa:	4630      	mov	r0, r6
 80160ac:	eb04 0903 	add.w	r9, r4, r3
 80160b0:	f000 fe10 	bl	8016cd4 <_sbrk_r>
 80160b4:	4581      	cmp	r9, r0
 80160b6:	d142      	bne.n	801613e <_malloc_r+0xea>
 80160b8:	6821      	ldr	r1, [r4, #0]
 80160ba:	1a6d      	subs	r5, r5, r1
 80160bc:	4629      	mov	r1, r5
 80160be:	4630      	mov	r0, r6
 80160c0:	f7ff ffa6 	bl	8016010 <sbrk_aligned>
 80160c4:	3001      	adds	r0, #1
 80160c6:	d03a      	beq.n	801613e <_malloc_r+0xea>
 80160c8:	6823      	ldr	r3, [r4, #0]
 80160ca:	442b      	add	r3, r5
 80160cc:	6023      	str	r3, [r4, #0]
 80160ce:	f8d8 3000 	ldr.w	r3, [r8]
 80160d2:	685a      	ldr	r2, [r3, #4]
 80160d4:	bb62      	cbnz	r2, 8016130 <_malloc_r+0xdc>
 80160d6:	f8c8 7000 	str.w	r7, [r8]
 80160da:	e00f      	b.n	80160fc <_malloc_r+0xa8>
 80160dc:	6822      	ldr	r2, [r4, #0]
 80160de:	1b52      	subs	r2, r2, r5
 80160e0:	d420      	bmi.n	8016124 <_malloc_r+0xd0>
 80160e2:	2a0b      	cmp	r2, #11
 80160e4:	d917      	bls.n	8016116 <_malloc_r+0xc2>
 80160e6:	1961      	adds	r1, r4, r5
 80160e8:	42a3      	cmp	r3, r4
 80160ea:	6025      	str	r5, [r4, #0]
 80160ec:	bf18      	it	ne
 80160ee:	6059      	strne	r1, [r3, #4]
 80160f0:	6863      	ldr	r3, [r4, #4]
 80160f2:	bf08      	it	eq
 80160f4:	f8c8 1000 	streq.w	r1, [r8]
 80160f8:	5162      	str	r2, [r4, r5]
 80160fa:	604b      	str	r3, [r1, #4]
 80160fc:	4630      	mov	r0, r6
 80160fe:	f000 f82f 	bl	8016160 <__malloc_unlock>
 8016102:	f104 000b 	add.w	r0, r4, #11
 8016106:	1d23      	adds	r3, r4, #4
 8016108:	f020 0007 	bic.w	r0, r0, #7
 801610c:	1ac2      	subs	r2, r0, r3
 801610e:	bf1c      	itt	ne
 8016110:	1a1b      	subne	r3, r3, r0
 8016112:	50a3      	strne	r3, [r4, r2]
 8016114:	e7af      	b.n	8016076 <_malloc_r+0x22>
 8016116:	6862      	ldr	r2, [r4, #4]
 8016118:	42a3      	cmp	r3, r4
 801611a:	bf0c      	ite	eq
 801611c:	f8c8 2000 	streq.w	r2, [r8]
 8016120:	605a      	strne	r2, [r3, #4]
 8016122:	e7eb      	b.n	80160fc <_malloc_r+0xa8>
 8016124:	4623      	mov	r3, r4
 8016126:	6864      	ldr	r4, [r4, #4]
 8016128:	e7ae      	b.n	8016088 <_malloc_r+0x34>
 801612a:	463c      	mov	r4, r7
 801612c:	687f      	ldr	r7, [r7, #4]
 801612e:	e7b6      	b.n	801609e <_malloc_r+0x4a>
 8016130:	461a      	mov	r2, r3
 8016132:	685b      	ldr	r3, [r3, #4]
 8016134:	42a3      	cmp	r3, r4
 8016136:	d1fb      	bne.n	8016130 <_malloc_r+0xdc>
 8016138:	2300      	movs	r3, #0
 801613a:	6053      	str	r3, [r2, #4]
 801613c:	e7de      	b.n	80160fc <_malloc_r+0xa8>
 801613e:	230c      	movs	r3, #12
 8016140:	6033      	str	r3, [r6, #0]
 8016142:	4630      	mov	r0, r6
 8016144:	f000 f80c 	bl	8016160 <__malloc_unlock>
 8016148:	e794      	b.n	8016074 <_malloc_r+0x20>
 801614a:	6005      	str	r5, [r0, #0]
 801614c:	e7d6      	b.n	80160fc <_malloc_r+0xa8>
 801614e:	bf00      	nop
 8016150:	20003670 	.word	0x20003670

08016154 <__malloc_lock>:
 8016154:	4801      	ldr	r0, [pc, #4]	@ (801615c <__malloc_lock+0x8>)
 8016156:	f7ff bf00 	b.w	8015f5a <__retarget_lock_acquire_recursive>
 801615a:	bf00      	nop
 801615c:	20003668 	.word	0x20003668

08016160 <__malloc_unlock>:
 8016160:	4801      	ldr	r0, [pc, #4]	@ (8016168 <__malloc_unlock+0x8>)
 8016162:	f7ff befb 	b.w	8015f5c <__retarget_lock_release_recursive>
 8016166:	bf00      	nop
 8016168:	20003668 	.word	0x20003668

0801616c <__ssputs_r>:
 801616c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016170:	688e      	ldr	r6, [r1, #8]
 8016172:	461f      	mov	r7, r3
 8016174:	42be      	cmp	r6, r7
 8016176:	680b      	ldr	r3, [r1, #0]
 8016178:	4682      	mov	sl, r0
 801617a:	460c      	mov	r4, r1
 801617c:	4690      	mov	r8, r2
 801617e:	d82d      	bhi.n	80161dc <__ssputs_r+0x70>
 8016180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8016184:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8016188:	d026      	beq.n	80161d8 <__ssputs_r+0x6c>
 801618a:	6965      	ldr	r5, [r4, #20]
 801618c:	6909      	ldr	r1, [r1, #16]
 801618e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016192:	eba3 0901 	sub.w	r9, r3, r1
 8016196:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801619a:	1c7b      	adds	r3, r7, #1
 801619c:	444b      	add	r3, r9
 801619e:	106d      	asrs	r5, r5, #1
 80161a0:	429d      	cmp	r5, r3
 80161a2:	bf38      	it	cc
 80161a4:	461d      	movcc	r5, r3
 80161a6:	0553      	lsls	r3, r2, #21
 80161a8:	d527      	bpl.n	80161fa <__ssputs_r+0x8e>
 80161aa:	4629      	mov	r1, r5
 80161ac:	f7ff ff52 	bl	8016054 <_malloc_r>
 80161b0:	4606      	mov	r6, r0
 80161b2:	b360      	cbz	r0, 801620e <__ssputs_r+0xa2>
 80161b4:	6921      	ldr	r1, [r4, #16]
 80161b6:	464a      	mov	r2, r9
 80161b8:	f7ff fed1 	bl	8015f5e <memcpy>
 80161bc:	89a3      	ldrh	r3, [r4, #12]
 80161be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80161c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80161c6:	81a3      	strh	r3, [r4, #12]
 80161c8:	6126      	str	r6, [r4, #16]
 80161ca:	6165      	str	r5, [r4, #20]
 80161cc:	444e      	add	r6, r9
 80161ce:	eba5 0509 	sub.w	r5, r5, r9
 80161d2:	6026      	str	r6, [r4, #0]
 80161d4:	60a5      	str	r5, [r4, #8]
 80161d6:	463e      	mov	r6, r7
 80161d8:	42be      	cmp	r6, r7
 80161da:	d900      	bls.n	80161de <__ssputs_r+0x72>
 80161dc:	463e      	mov	r6, r7
 80161de:	6820      	ldr	r0, [r4, #0]
 80161e0:	4632      	mov	r2, r6
 80161e2:	4641      	mov	r1, r8
 80161e4:	f000 fd2c 	bl	8016c40 <memmove>
 80161e8:	68a3      	ldr	r3, [r4, #8]
 80161ea:	1b9b      	subs	r3, r3, r6
 80161ec:	60a3      	str	r3, [r4, #8]
 80161ee:	6823      	ldr	r3, [r4, #0]
 80161f0:	4433      	add	r3, r6
 80161f2:	6023      	str	r3, [r4, #0]
 80161f4:	2000      	movs	r0, #0
 80161f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161fa:	462a      	mov	r2, r5
 80161fc:	f000 fd7a 	bl	8016cf4 <_realloc_r>
 8016200:	4606      	mov	r6, r0
 8016202:	2800      	cmp	r0, #0
 8016204:	d1e0      	bne.n	80161c8 <__ssputs_r+0x5c>
 8016206:	6921      	ldr	r1, [r4, #16]
 8016208:	4650      	mov	r0, sl
 801620a:	f7ff feb7 	bl	8015f7c <_free_r>
 801620e:	230c      	movs	r3, #12
 8016210:	f8ca 3000 	str.w	r3, [sl]
 8016214:	89a3      	ldrh	r3, [r4, #12]
 8016216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801621a:	81a3      	strh	r3, [r4, #12]
 801621c:	f04f 30ff 	mov.w	r0, #4294967295
 8016220:	e7e9      	b.n	80161f6 <__ssputs_r+0x8a>
	...

08016224 <_svfiprintf_r>:
 8016224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016228:	4698      	mov	r8, r3
 801622a:	898b      	ldrh	r3, [r1, #12]
 801622c:	061b      	lsls	r3, r3, #24
 801622e:	b09d      	sub	sp, #116	@ 0x74
 8016230:	4607      	mov	r7, r0
 8016232:	460d      	mov	r5, r1
 8016234:	4614      	mov	r4, r2
 8016236:	d510      	bpl.n	801625a <_svfiprintf_r+0x36>
 8016238:	690b      	ldr	r3, [r1, #16]
 801623a:	b973      	cbnz	r3, 801625a <_svfiprintf_r+0x36>
 801623c:	2140      	movs	r1, #64	@ 0x40
 801623e:	f7ff ff09 	bl	8016054 <_malloc_r>
 8016242:	6028      	str	r0, [r5, #0]
 8016244:	6128      	str	r0, [r5, #16]
 8016246:	b930      	cbnz	r0, 8016256 <_svfiprintf_r+0x32>
 8016248:	230c      	movs	r3, #12
 801624a:	603b      	str	r3, [r7, #0]
 801624c:	f04f 30ff 	mov.w	r0, #4294967295
 8016250:	b01d      	add	sp, #116	@ 0x74
 8016252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016256:	2340      	movs	r3, #64	@ 0x40
 8016258:	616b      	str	r3, [r5, #20]
 801625a:	2300      	movs	r3, #0
 801625c:	9309      	str	r3, [sp, #36]	@ 0x24
 801625e:	2320      	movs	r3, #32
 8016260:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016264:	f8cd 800c 	str.w	r8, [sp, #12]
 8016268:	2330      	movs	r3, #48	@ 0x30
 801626a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016408 <_svfiprintf_r+0x1e4>
 801626e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016272:	f04f 0901 	mov.w	r9, #1
 8016276:	4623      	mov	r3, r4
 8016278:	469a      	mov	sl, r3
 801627a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801627e:	b10a      	cbz	r2, 8016284 <_svfiprintf_r+0x60>
 8016280:	2a25      	cmp	r2, #37	@ 0x25
 8016282:	d1f9      	bne.n	8016278 <_svfiprintf_r+0x54>
 8016284:	ebba 0b04 	subs.w	fp, sl, r4
 8016288:	d00b      	beq.n	80162a2 <_svfiprintf_r+0x7e>
 801628a:	465b      	mov	r3, fp
 801628c:	4622      	mov	r2, r4
 801628e:	4629      	mov	r1, r5
 8016290:	4638      	mov	r0, r7
 8016292:	f7ff ff6b 	bl	801616c <__ssputs_r>
 8016296:	3001      	adds	r0, #1
 8016298:	f000 80a7 	beq.w	80163ea <_svfiprintf_r+0x1c6>
 801629c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801629e:	445a      	add	r2, fp
 80162a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80162a2:	f89a 3000 	ldrb.w	r3, [sl]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	f000 809f 	beq.w	80163ea <_svfiprintf_r+0x1c6>
 80162ac:	2300      	movs	r3, #0
 80162ae:	f04f 32ff 	mov.w	r2, #4294967295
 80162b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162b6:	f10a 0a01 	add.w	sl, sl, #1
 80162ba:	9304      	str	r3, [sp, #16]
 80162bc:	9307      	str	r3, [sp, #28]
 80162be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80162c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80162c4:	4654      	mov	r4, sl
 80162c6:	2205      	movs	r2, #5
 80162c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80162cc:	484e      	ldr	r0, [pc, #312]	@ (8016408 <_svfiprintf_r+0x1e4>)
 80162ce:	f7e9 ff5f 	bl	8000190 <memchr>
 80162d2:	9a04      	ldr	r2, [sp, #16]
 80162d4:	b9d8      	cbnz	r0, 801630e <_svfiprintf_r+0xea>
 80162d6:	06d0      	lsls	r0, r2, #27
 80162d8:	bf44      	itt	mi
 80162da:	2320      	movmi	r3, #32
 80162dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162e0:	0711      	lsls	r1, r2, #28
 80162e2:	bf44      	itt	mi
 80162e4:	232b      	movmi	r3, #43	@ 0x2b
 80162e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80162ea:	f89a 3000 	ldrb.w	r3, [sl]
 80162ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80162f0:	d015      	beq.n	801631e <_svfiprintf_r+0xfa>
 80162f2:	9a07      	ldr	r2, [sp, #28]
 80162f4:	4654      	mov	r4, sl
 80162f6:	2000      	movs	r0, #0
 80162f8:	f04f 0c0a 	mov.w	ip, #10
 80162fc:	4621      	mov	r1, r4
 80162fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016302:	3b30      	subs	r3, #48	@ 0x30
 8016304:	2b09      	cmp	r3, #9
 8016306:	d94b      	bls.n	80163a0 <_svfiprintf_r+0x17c>
 8016308:	b1b0      	cbz	r0, 8016338 <_svfiprintf_r+0x114>
 801630a:	9207      	str	r2, [sp, #28]
 801630c:	e014      	b.n	8016338 <_svfiprintf_r+0x114>
 801630e:	eba0 0308 	sub.w	r3, r0, r8
 8016312:	fa09 f303 	lsl.w	r3, r9, r3
 8016316:	4313      	orrs	r3, r2
 8016318:	9304      	str	r3, [sp, #16]
 801631a:	46a2      	mov	sl, r4
 801631c:	e7d2      	b.n	80162c4 <_svfiprintf_r+0xa0>
 801631e:	9b03      	ldr	r3, [sp, #12]
 8016320:	1d19      	adds	r1, r3, #4
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	9103      	str	r1, [sp, #12]
 8016326:	2b00      	cmp	r3, #0
 8016328:	bfbb      	ittet	lt
 801632a:	425b      	neglt	r3, r3
 801632c:	f042 0202 	orrlt.w	r2, r2, #2
 8016330:	9307      	strge	r3, [sp, #28]
 8016332:	9307      	strlt	r3, [sp, #28]
 8016334:	bfb8      	it	lt
 8016336:	9204      	strlt	r2, [sp, #16]
 8016338:	7823      	ldrb	r3, [r4, #0]
 801633a:	2b2e      	cmp	r3, #46	@ 0x2e
 801633c:	d10a      	bne.n	8016354 <_svfiprintf_r+0x130>
 801633e:	7863      	ldrb	r3, [r4, #1]
 8016340:	2b2a      	cmp	r3, #42	@ 0x2a
 8016342:	d132      	bne.n	80163aa <_svfiprintf_r+0x186>
 8016344:	9b03      	ldr	r3, [sp, #12]
 8016346:	1d1a      	adds	r2, r3, #4
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	9203      	str	r2, [sp, #12]
 801634c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016350:	3402      	adds	r4, #2
 8016352:	9305      	str	r3, [sp, #20]
 8016354:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016418 <_svfiprintf_r+0x1f4>
 8016358:	7821      	ldrb	r1, [r4, #0]
 801635a:	2203      	movs	r2, #3
 801635c:	4650      	mov	r0, sl
 801635e:	f7e9 ff17 	bl	8000190 <memchr>
 8016362:	b138      	cbz	r0, 8016374 <_svfiprintf_r+0x150>
 8016364:	9b04      	ldr	r3, [sp, #16]
 8016366:	eba0 000a 	sub.w	r0, r0, sl
 801636a:	2240      	movs	r2, #64	@ 0x40
 801636c:	4082      	lsls	r2, r0
 801636e:	4313      	orrs	r3, r2
 8016370:	3401      	adds	r4, #1
 8016372:	9304      	str	r3, [sp, #16]
 8016374:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016378:	4824      	ldr	r0, [pc, #144]	@ (801640c <_svfiprintf_r+0x1e8>)
 801637a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801637e:	2206      	movs	r2, #6
 8016380:	f7e9 ff06 	bl	8000190 <memchr>
 8016384:	2800      	cmp	r0, #0
 8016386:	d036      	beq.n	80163f6 <_svfiprintf_r+0x1d2>
 8016388:	4b21      	ldr	r3, [pc, #132]	@ (8016410 <_svfiprintf_r+0x1ec>)
 801638a:	bb1b      	cbnz	r3, 80163d4 <_svfiprintf_r+0x1b0>
 801638c:	9b03      	ldr	r3, [sp, #12]
 801638e:	3307      	adds	r3, #7
 8016390:	f023 0307 	bic.w	r3, r3, #7
 8016394:	3308      	adds	r3, #8
 8016396:	9303      	str	r3, [sp, #12]
 8016398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801639a:	4433      	add	r3, r6
 801639c:	9309      	str	r3, [sp, #36]	@ 0x24
 801639e:	e76a      	b.n	8016276 <_svfiprintf_r+0x52>
 80163a0:	fb0c 3202 	mla	r2, ip, r2, r3
 80163a4:	460c      	mov	r4, r1
 80163a6:	2001      	movs	r0, #1
 80163a8:	e7a8      	b.n	80162fc <_svfiprintf_r+0xd8>
 80163aa:	2300      	movs	r3, #0
 80163ac:	3401      	adds	r4, #1
 80163ae:	9305      	str	r3, [sp, #20]
 80163b0:	4619      	mov	r1, r3
 80163b2:	f04f 0c0a 	mov.w	ip, #10
 80163b6:	4620      	mov	r0, r4
 80163b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163bc:	3a30      	subs	r2, #48	@ 0x30
 80163be:	2a09      	cmp	r2, #9
 80163c0:	d903      	bls.n	80163ca <_svfiprintf_r+0x1a6>
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d0c6      	beq.n	8016354 <_svfiprintf_r+0x130>
 80163c6:	9105      	str	r1, [sp, #20]
 80163c8:	e7c4      	b.n	8016354 <_svfiprintf_r+0x130>
 80163ca:	fb0c 2101 	mla	r1, ip, r1, r2
 80163ce:	4604      	mov	r4, r0
 80163d0:	2301      	movs	r3, #1
 80163d2:	e7f0      	b.n	80163b6 <_svfiprintf_r+0x192>
 80163d4:	ab03      	add	r3, sp, #12
 80163d6:	9300      	str	r3, [sp, #0]
 80163d8:	462a      	mov	r2, r5
 80163da:	4b0e      	ldr	r3, [pc, #56]	@ (8016414 <_svfiprintf_r+0x1f0>)
 80163dc:	a904      	add	r1, sp, #16
 80163de:	4638      	mov	r0, r7
 80163e0:	f3af 8000 	nop.w
 80163e4:	1c42      	adds	r2, r0, #1
 80163e6:	4606      	mov	r6, r0
 80163e8:	d1d6      	bne.n	8016398 <_svfiprintf_r+0x174>
 80163ea:	89ab      	ldrh	r3, [r5, #12]
 80163ec:	065b      	lsls	r3, r3, #25
 80163ee:	f53f af2d 	bmi.w	801624c <_svfiprintf_r+0x28>
 80163f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80163f4:	e72c      	b.n	8016250 <_svfiprintf_r+0x2c>
 80163f6:	ab03      	add	r3, sp, #12
 80163f8:	9300      	str	r3, [sp, #0]
 80163fa:	462a      	mov	r2, r5
 80163fc:	4b05      	ldr	r3, [pc, #20]	@ (8016414 <_svfiprintf_r+0x1f0>)
 80163fe:	a904      	add	r1, sp, #16
 8016400:	4638      	mov	r0, r7
 8016402:	f000 f9bb 	bl	801677c <_printf_i>
 8016406:	e7ed      	b.n	80163e4 <_svfiprintf_r+0x1c0>
 8016408:	08019d4b 	.word	0x08019d4b
 801640c:	08019d55 	.word	0x08019d55
 8016410:	00000000 	.word	0x00000000
 8016414:	0801616d 	.word	0x0801616d
 8016418:	08019d51 	.word	0x08019d51

0801641c <__sfputc_r>:
 801641c:	6893      	ldr	r3, [r2, #8]
 801641e:	3b01      	subs	r3, #1
 8016420:	2b00      	cmp	r3, #0
 8016422:	b410      	push	{r4}
 8016424:	6093      	str	r3, [r2, #8]
 8016426:	da08      	bge.n	801643a <__sfputc_r+0x1e>
 8016428:	6994      	ldr	r4, [r2, #24]
 801642a:	42a3      	cmp	r3, r4
 801642c:	db01      	blt.n	8016432 <__sfputc_r+0x16>
 801642e:	290a      	cmp	r1, #10
 8016430:	d103      	bne.n	801643a <__sfputc_r+0x1e>
 8016432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016436:	f7ff bc6d 	b.w	8015d14 <__swbuf_r>
 801643a:	6813      	ldr	r3, [r2, #0]
 801643c:	1c58      	adds	r0, r3, #1
 801643e:	6010      	str	r0, [r2, #0]
 8016440:	7019      	strb	r1, [r3, #0]
 8016442:	4608      	mov	r0, r1
 8016444:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016448:	4770      	bx	lr

0801644a <__sfputs_r>:
 801644a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801644c:	4606      	mov	r6, r0
 801644e:	460f      	mov	r7, r1
 8016450:	4614      	mov	r4, r2
 8016452:	18d5      	adds	r5, r2, r3
 8016454:	42ac      	cmp	r4, r5
 8016456:	d101      	bne.n	801645c <__sfputs_r+0x12>
 8016458:	2000      	movs	r0, #0
 801645a:	e007      	b.n	801646c <__sfputs_r+0x22>
 801645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016460:	463a      	mov	r2, r7
 8016462:	4630      	mov	r0, r6
 8016464:	f7ff ffda 	bl	801641c <__sfputc_r>
 8016468:	1c43      	adds	r3, r0, #1
 801646a:	d1f3      	bne.n	8016454 <__sfputs_r+0xa>
 801646c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016470 <_vfiprintf_r>:
 8016470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016474:	460d      	mov	r5, r1
 8016476:	b09d      	sub	sp, #116	@ 0x74
 8016478:	4614      	mov	r4, r2
 801647a:	4698      	mov	r8, r3
 801647c:	4606      	mov	r6, r0
 801647e:	b118      	cbz	r0, 8016488 <_vfiprintf_r+0x18>
 8016480:	6a03      	ldr	r3, [r0, #32]
 8016482:	b90b      	cbnz	r3, 8016488 <_vfiprintf_r+0x18>
 8016484:	f7ff fb1c 	bl	8015ac0 <__sinit>
 8016488:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801648a:	07d9      	lsls	r1, r3, #31
 801648c:	d405      	bmi.n	801649a <_vfiprintf_r+0x2a>
 801648e:	89ab      	ldrh	r3, [r5, #12]
 8016490:	059a      	lsls	r2, r3, #22
 8016492:	d402      	bmi.n	801649a <_vfiprintf_r+0x2a>
 8016494:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016496:	f7ff fd60 	bl	8015f5a <__retarget_lock_acquire_recursive>
 801649a:	89ab      	ldrh	r3, [r5, #12]
 801649c:	071b      	lsls	r3, r3, #28
 801649e:	d501      	bpl.n	80164a4 <_vfiprintf_r+0x34>
 80164a0:	692b      	ldr	r3, [r5, #16]
 80164a2:	b99b      	cbnz	r3, 80164cc <_vfiprintf_r+0x5c>
 80164a4:	4629      	mov	r1, r5
 80164a6:	4630      	mov	r0, r6
 80164a8:	f7ff fc72 	bl	8015d90 <__swsetup_r>
 80164ac:	b170      	cbz	r0, 80164cc <_vfiprintf_r+0x5c>
 80164ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80164b0:	07dc      	lsls	r4, r3, #31
 80164b2:	d504      	bpl.n	80164be <_vfiprintf_r+0x4e>
 80164b4:	f04f 30ff 	mov.w	r0, #4294967295
 80164b8:	b01d      	add	sp, #116	@ 0x74
 80164ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164be:	89ab      	ldrh	r3, [r5, #12]
 80164c0:	0598      	lsls	r0, r3, #22
 80164c2:	d4f7      	bmi.n	80164b4 <_vfiprintf_r+0x44>
 80164c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80164c6:	f7ff fd49 	bl	8015f5c <__retarget_lock_release_recursive>
 80164ca:	e7f3      	b.n	80164b4 <_vfiprintf_r+0x44>
 80164cc:	2300      	movs	r3, #0
 80164ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80164d0:	2320      	movs	r3, #32
 80164d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80164d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80164da:	2330      	movs	r3, #48	@ 0x30
 80164dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801668c <_vfiprintf_r+0x21c>
 80164e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80164e4:	f04f 0901 	mov.w	r9, #1
 80164e8:	4623      	mov	r3, r4
 80164ea:	469a      	mov	sl, r3
 80164ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80164f0:	b10a      	cbz	r2, 80164f6 <_vfiprintf_r+0x86>
 80164f2:	2a25      	cmp	r2, #37	@ 0x25
 80164f4:	d1f9      	bne.n	80164ea <_vfiprintf_r+0x7a>
 80164f6:	ebba 0b04 	subs.w	fp, sl, r4
 80164fa:	d00b      	beq.n	8016514 <_vfiprintf_r+0xa4>
 80164fc:	465b      	mov	r3, fp
 80164fe:	4622      	mov	r2, r4
 8016500:	4629      	mov	r1, r5
 8016502:	4630      	mov	r0, r6
 8016504:	f7ff ffa1 	bl	801644a <__sfputs_r>
 8016508:	3001      	adds	r0, #1
 801650a:	f000 80a7 	beq.w	801665c <_vfiprintf_r+0x1ec>
 801650e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016510:	445a      	add	r2, fp
 8016512:	9209      	str	r2, [sp, #36]	@ 0x24
 8016514:	f89a 3000 	ldrb.w	r3, [sl]
 8016518:	2b00      	cmp	r3, #0
 801651a:	f000 809f 	beq.w	801665c <_vfiprintf_r+0x1ec>
 801651e:	2300      	movs	r3, #0
 8016520:	f04f 32ff 	mov.w	r2, #4294967295
 8016524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016528:	f10a 0a01 	add.w	sl, sl, #1
 801652c:	9304      	str	r3, [sp, #16]
 801652e:	9307      	str	r3, [sp, #28]
 8016530:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016534:	931a      	str	r3, [sp, #104]	@ 0x68
 8016536:	4654      	mov	r4, sl
 8016538:	2205      	movs	r2, #5
 801653a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801653e:	4853      	ldr	r0, [pc, #332]	@ (801668c <_vfiprintf_r+0x21c>)
 8016540:	f7e9 fe26 	bl	8000190 <memchr>
 8016544:	9a04      	ldr	r2, [sp, #16]
 8016546:	b9d8      	cbnz	r0, 8016580 <_vfiprintf_r+0x110>
 8016548:	06d1      	lsls	r1, r2, #27
 801654a:	bf44      	itt	mi
 801654c:	2320      	movmi	r3, #32
 801654e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016552:	0713      	lsls	r3, r2, #28
 8016554:	bf44      	itt	mi
 8016556:	232b      	movmi	r3, #43	@ 0x2b
 8016558:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801655c:	f89a 3000 	ldrb.w	r3, [sl]
 8016560:	2b2a      	cmp	r3, #42	@ 0x2a
 8016562:	d015      	beq.n	8016590 <_vfiprintf_r+0x120>
 8016564:	9a07      	ldr	r2, [sp, #28]
 8016566:	4654      	mov	r4, sl
 8016568:	2000      	movs	r0, #0
 801656a:	f04f 0c0a 	mov.w	ip, #10
 801656e:	4621      	mov	r1, r4
 8016570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016574:	3b30      	subs	r3, #48	@ 0x30
 8016576:	2b09      	cmp	r3, #9
 8016578:	d94b      	bls.n	8016612 <_vfiprintf_r+0x1a2>
 801657a:	b1b0      	cbz	r0, 80165aa <_vfiprintf_r+0x13a>
 801657c:	9207      	str	r2, [sp, #28]
 801657e:	e014      	b.n	80165aa <_vfiprintf_r+0x13a>
 8016580:	eba0 0308 	sub.w	r3, r0, r8
 8016584:	fa09 f303 	lsl.w	r3, r9, r3
 8016588:	4313      	orrs	r3, r2
 801658a:	9304      	str	r3, [sp, #16]
 801658c:	46a2      	mov	sl, r4
 801658e:	e7d2      	b.n	8016536 <_vfiprintf_r+0xc6>
 8016590:	9b03      	ldr	r3, [sp, #12]
 8016592:	1d19      	adds	r1, r3, #4
 8016594:	681b      	ldr	r3, [r3, #0]
 8016596:	9103      	str	r1, [sp, #12]
 8016598:	2b00      	cmp	r3, #0
 801659a:	bfbb      	ittet	lt
 801659c:	425b      	neglt	r3, r3
 801659e:	f042 0202 	orrlt.w	r2, r2, #2
 80165a2:	9307      	strge	r3, [sp, #28]
 80165a4:	9307      	strlt	r3, [sp, #28]
 80165a6:	bfb8      	it	lt
 80165a8:	9204      	strlt	r2, [sp, #16]
 80165aa:	7823      	ldrb	r3, [r4, #0]
 80165ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80165ae:	d10a      	bne.n	80165c6 <_vfiprintf_r+0x156>
 80165b0:	7863      	ldrb	r3, [r4, #1]
 80165b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80165b4:	d132      	bne.n	801661c <_vfiprintf_r+0x1ac>
 80165b6:	9b03      	ldr	r3, [sp, #12]
 80165b8:	1d1a      	adds	r2, r3, #4
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	9203      	str	r2, [sp, #12]
 80165be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80165c2:	3402      	adds	r4, #2
 80165c4:	9305      	str	r3, [sp, #20]
 80165c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801669c <_vfiprintf_r+0x22c>
 80165ca:	7821      	ldrb	r1, [r4, #0]
 80165cc:	2203      	movs	r2, #3
 80165ce:	4650      	mov	r0, sl
 80165d0:	f7e9 fdde 	bl	8000190 <memchr>
 80165d4:	b138      	cbz	r0, 80165e6 <_vfiprintf_r+0x176>
 80165d6:	9b04      	ldr	r3, [sp, #16]
 80165d8:	eba0 000a 	sub.w	r0, r0, sl
 80165dc:	2240      	movs	r2, #64	@ 0x40
 80165de:	4082      	lsls	r2, r0
 80165e0:	4313      	orrs	r3, r2
 80165e2:	3401      	adds	r4, #1
 80165e4:	9304      	str	r3, [sp, #16]
 80165e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80165ea:	4829      	ldr	r0, [pc, #164]	@ (8016690 <_vfiprintf_r+0x220>)
 80165ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80165f0:	2206      	movs	r2, #6
 80165f2:	f7e9 fdcd 	bl	8000190 <memchr>
 80165f6:	2800      	cmp	r0, #0
 80165f8:	d03f      	beq.n	801667a <_vfiprintf_r+0x20a>
 80165fa:	4b26      	ldr	r3, [pc, #152]	@ (8016694 <_vfiprintf_r+0x224>)
 80165fc:	bb1b      	cbnz	r3, 8016646 <_vfiprintf_r+0x1d6>
 80165fe:	9b03      	ldr	r3, [sp, #12]
 8016600:	3307      	adds	r3, #7
 8016602:	f023 0307 	bic.w	r3, r3, #7
 8016606:	3308      	adds	r3, #8
 8016608:	9303      	str	r3, [sp, #12]
 801660a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801660c:	443b      	add	r3, r7
 801660e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016610:	e76a      	b.n	80164e8 <_vfiprintf_r+0x78>
 8016612:	fb0c 3202 	mla	r2, ip, r2, r3
 8016616:	460c      	mov	r4, r1
 8016618:	2001      	movs	r0, #1
 801661a:	e7a8      	b.n	801656e <_vfiprintf_r+0xfe>
 801661c:	2300      	movs	r3, #0
 801661e:	3401      	adds	r4, #1
 8016620:	9305      	str	r3, [sp, #20]
 8016622:	4619      	mov	r1, r3
 8016624:	f04f 0c0a 	mov.w	ip, #10
 8016628:	4620      	mov	r0, r4
 801662a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801662e:	3a30      	subs	r2, #48	@ 0x30
 8016630:	2a09      	cmp	r2, #9
 8016632:	d903      	bls.n	801663c <_vfiprintf_r+0x1cc>
 8016634:	2b00      	cmp	r3, #0
 8016636:	d0c6      	beq.n	80165c6 <_vfiprintf_r+0x156>
 8016638:	9105      	str	r1, [sp, #20]
 801663a:	e7c4      	b.n	80165c6 <_vfiprintf_r+0x156>
 801663c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016640:	4604      	mov	r4, r0
 8016642:	2301      	movs	r3, #1
 8016644:	e7f0      	b.n	8016628 <_vfiprintf_r+0x1b8>
 8016646:	ab03      	add	r3, sp, #12
 8016648:	9300      	str	r3, [sp, #0]
 801664a:	462a      	mov	r2, r5
 801664c:	4b12      	ldr	r3, [pc, #72]	@ (8016698 <_vfiprintf_r+0x228>)
 801664e:	a904      	add	r1, sp, #16
 8016650:	4630      	mov	r0, r6
 8016652:	f3af 8000 	nop.w
 8016656:	4607      	mov	r7, r0
 8016658:	1c78      	adds	r0, r7, #1
 801665a:	d1d6      	bne.n	801660a <_vfiprintf_r+0x19a>
 801665c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801665e:	07d9      	lsls	r1, r3, #31
 8016660:	d405      	bmi.n	801666e <_vfiprintf_r+0x1fe>
 8016662:	89ab      	ldrh	r3, [r5, #12]
 8016664:	059a      	lsls	r2, r3, #22
 8016666:	d402      	bmi.n	801666e <_vfiprintf_r+0x1fe>
 8016668:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801666a:	f7ff fc77 	bl	8015f5c <__retarget_lock_release_recursive>
 801666e:	89ab      	ldrh	r3, [r5, #12]
 8016670:	065b      	lsls	r3, r3, #25
 8016672:	f53f af1f 	bmi.w	80164b4 <_vfiprintf_r+0x44>
 8016676:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016678:	e71e      	b.n	80164b8 <_vfiprintf_r+0x48>
 801667a:	ab03      	add	r3, sp, #12
 801667c:	9300      	str	r3, [sp, #0]
 801667e:	462a      	mov	r2, r5
 8016680:	4b05      	ldr	r3, [pc, #20]	@ (8016698 <_vfiprintf_r+0x228>)
 8016682:	a904      	add	r1, sp, #16
 8016684:	4630      	mov	r0, r6
 8016686:	f000 f879 	bl	801677c <_printf_i>
 801668a:	e7e4      	b.n	8016656 <_vfiprintf_r+0x1e6>
 801668c:	08019d4b 	.word	0x08019d4b
 8016690:	08019d55 	.word	0x08019d55
 8016694:	00000000 	.word	0x00000000
 8016698:	0801644b 	.word	0x0801644b
 801669c:	08019d51 	.word	0x08019d51

080166a0 <_printf_common>:
 80166a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80166a4:	4616      	mov	r6, r2
 80166a6:	4698      	mov	r8, r3
 80166a8:	688a      	ldr	r2, [r1, #8]
 80166aa:	690b      	ldr	r3, [r1, #16]
 80166ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80166b0:	4293      	cmp	r3, r2
 80166b2:	bfb8      	it	lt
 80166b4:	4613      	movlt	r3, r2
 80166b6:	6033      	str	r3, [r6, #0]
 80166b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80166bc:	4607      	mov	r7, r0
 80166be:	460c      	mov	r4, r1
 80166c0:	b10a      	cbz	r2, 80166c6 <_printf_common+0x26>
 80166c2:	3301      	adds	r3, #1
 80166c4:	6033      	str	r3, [r6, #0]
 80166c6:	6823      	ldr	r3, [r4, #0]
 80166c8:	0699      	lsls	r1, r3, #26
 80166ca:	bf42      	ittt	mi
 80166cc:	6833      	ldrmi	r3, [r6, #0]
 80166ce:	3302      	addmi	r3, #2
 80166d0:	6033      	strmi	r3, [r6, #0]
 80166d2:	6825      	ldr	r5, [r4, #0]
 80166d4:	f015 0506 	ands.w	r5, r5, #6
 80166d8:	d106      	bne.n	80166e8 <_printf_common+0x48>
 80166da:	f104 0a19 	add.w	sl, r4, #25
 80166de:	68e3      	ldr	r3, [r4, #12]
 80166e0:	6832      	ldr	r2, [r6, #0]
 80166e2:	1a9b      	subs	r3, r3, r2
 80166e4:	42ab      	cmp	r3, r5
 80166e6:	dc26      	bgt.n	8016736 <_printf_common+0x96>
 80166e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80166ec:	6822      	ldr	r2, [r4, #0]
 80166ee:	3b00      	subs	r3, #0
 80166f0:	bf18      	it	ne
 80166f2:	2301      	movne	r3, #1
 80166f4:	0692      	lsls	r2, r2, #26
 80166f6:	d42b      	bmi.n	8016750 <_printf_common+0xb0>
 80166f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80166fc:	4641      	mov	r1, r8
 80166fe:	4638      	mov	r0, r7
 8016700:	47c8      	blx	r9
 8016702:	3001      	adds	r0, #1
 8016704:	d01e      	beq.n	8016744 <_printf_common+0xa4>
 8016706:	6823      	ldr	r3, [r4, #0]
 8016708:	6922      	ldr	r2, [r4, #16]
 801670a:	f003 0306 	and.w	r3, r3, #6
 801670e:	2b04      	cmp	r3, #4
 8016710:	bf02      	ittt	eq
 8016712:	68e5      	ldreq	r5, [r4, #12]
 8016714:	6833      	ldreq	r3, [r6, #0]
 8016716:	1aed      	subeq	r5, r5, r3
 8016718:	68a3      	ldr	r3, [r4, #8]
 801671a:	bf0c      	ite	eq
 801671c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016720:	2500      	movne	r5, #0
 8016722:	4293      	cmp	r3, r2
 8016724:	bfc4      	itt	gt
 8016726:	1a9b      	subgt	r3, r3, r2
 8016728:	18ed      	addgt	r5, r5, r3
 801672a:	2600      	movs	r6, #0
 801672c:	341a      	adds	r4, #26
 801672e:	42b5      	cmp	r5, r6
 8016730:	d11a      	bne.n	8016768 <_printf_common+0xc8>
 8016732:	2000      	movs	r0, #0
 8016734:	e008      	b.n	8016748 <_printf_common+0xa8>
 8016736:	2301      	movs	r3, #1
 8016738:	4652      	mov	r2, sl
 801673a:	4641      	mov	r1, r8
 801673c:	4638      	mov	r0, r7
 801673e:	47c8      	blx	r9
 8016740:	3001      	adds	r0, #1
 8016742:	d103      	bne.n	801674c <_printf_common+0xac>
 8016744:	f04f 30ff 	mov.w	r0, #4294967295
 8016748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801674c:	3501      	adds	r5, #1
 801674e:	e7c6      	b.n	80166de <_printf_common+0x3e>
 8016750:	18e1      	adds	r1, r4, r3
 8016752:	1c5a      	adds	r2, r3, #1
 8016754:	2030      	movs	r0, #48	@ 0x30
 8016756:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801675a:	4422      	add	r2, r4
 801675c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016760:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016764:	3302      	adds	r3, #2
 8016766:	e7c7      	b.n	80166f8 <_printf_common+0x58>
 8016768:	2301      	movs	r3, #1
 801676a:	4622      	mov	r2, r4
 801676c:	4641      	mov	r1, r8
 801676e:	4638      	mov	r0, r7
 8016770:	47c8      	blx	r9
 8016772:	3001      	adds	r0, #1
 8016774:	d0e6      	beq.n	8016744 <_printf_common+0xa4>
 8016776:	3601      	adds	r6, #1
 8016778:	e7d9      	b.n	801672e <_printf_common+0x8e>
	...

0801677c <_printf_i>:
 801677c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016780:	7e0f      	ldrb	r7, [r1, #24]
 8016782:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016784:	2f78      	cmp	r7, #120	@ 0x78
 8016786:	4691      	mov	r9, r2
 8016788:	4680      	mov	r8, r0
 801678a:	460c      	mov	r4, r1
 801678c:	469a      	mov	sl, r3
 801678e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016792:	d807      	bhi.n	80167a4 <_printf_i+0x28>
 8016794:	2f62      	cmp	r7, #98	@ 0x62
 8016796:	d80a      	bhi.n	80167ae <_printf_i+0x32>
 8016798:	2f00      	cmp	r7, #0
 801679a:	f000 80d2 	beq.w	8016942 <_printf_i+0x1c6>
 801679e:	2f58      	cmp	r7, #88	@ 0x58
 80167a0:	f000 80b9 	beq.w	8016916 <_printf_i+0x19a>
 80167a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80167a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80167ac:	e03a      	b.n	8016824 <_printf_i+0xa8>
 80167ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80167b2:	2b15      	cmp	r3, #21
 80167b4:	d8f6      	bhi.n	80167a4 <_printf_i+0x28>
 80167b6:	a101      	add	r1, pc, #4	@ (adr r1, 80167bc <_printf_i+0x40>)
 80167b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80167bc:	08016815 	.word	0x08016815
 80167c0:	08016829 	.word	0x08016829
 80167c4:	080167a5 	.word	0x080167a5
 80167c8:	080167a5 	.word	0x080167a5
 80167cc:	080167a5 	.word	0x080167a5
 80167d0:	080167a5 	.word	0x080167a5
 80167d4:	08016829 	.word	0x08016829
 80167d8:	080167a5 	.word	0x080167a5
 80167dc:	080167a5 	.word	0x080167a5
 80167e0:	080167a5 	.word	0x080167a5
 80167e4:	080167a5 	.word	0x080167a5
 80167e8:	08016929 	.word	0x08016929
 80167ec:	08016853 	.word	0x08016853
 80167f0:	080168e3 	.word	0x080168e3
 80167f4:	080167a5 	.word	0x080167a5
 80167f8:	080167a5 	.word	0x080167a5
 80167fc:	0801694b 	.word	0x0801694b
 8016800:	080167a5 	.word	0x080167a5
 8016804:	08016853 	.word	0x08016853
 8016808:	080167a5 	.word	0x080167a5
 801680c:	080167a5 	.word	0x080167a5
 8016810:	080168eb 	.word	0x080168eb
 8016814:	6833      	ldr	r3, [r6, #0]
 8016816:	1d1a      	adds	r2, r3, #4
 8016818:	681b      	ldr	r3, [r3, #0]
 801681a:	6032      	str	r2, [r6, #0]
 801681c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016820:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8016824:	2301      	movs	r3, #1
 8016826:	e09d      	b.n	8016964 <_printf_i+0x1e8>
 8016828:	6833      	ldr	r3, [r6, #0]
 801682a:	6820      	ldr	r0, [r4, #0]
 801682c:	1d19      	adds	r1, r3, #4
 801682e:	6031      	str	r1, [r6, #0]
 8016830:	0606      	lsls	r6, r0, #24
 8016832:	d501      	bpl.n	8016838 <_printf_i+0xbc>
 8016834:	681d      	ldr	r5, [r3, #0]
 8016836:	e003      	b.n	8016840 <_printf_i+0xc4>
 8016838:	0645      	lsls	r5, r0, #25
 801683a:	d5fb      	bpl.n	8016834 <_printf_i+0xb8>
 801683c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8016840:	2d00      	cmp	r5, #0
 8016842:	da03      	bge.n	801684c <_printf_i+0xd0>
 8016844:	232d      	movs	r3, #45	@ 0x2d
 8016846:	426d      	negs	r5, r5
 8016848:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801684c:	4859      	ldr	r0, [pc, #356]	@ (80169b4 <_printf_i+0x238>)
 801684e:	230a      	movs	r3, #10
 8016850:	e011      	b.n	8016876 <_printf_i+0xfa>
 8016852:	6821      	ldr	r1, [r4, #0]
 8016854:	6833      	ldr	r3, [r6, #0]
 8016856:	0608      	lsls	r0, r1, #24
 8016858:	f853 5b04 	ldr.w	r5, [r3], #4
 801685c:	d402      	bmi.n	8016864 <_printf_i+0xe8>
 801685e:	0649      	lsls	r1, r1, #25
 8016860:	bf48      	it	mi
 8016862:	b2ad      	uxthmi	r5, r5
 8016864:	2f6f      	cmp	r7, #111	@ 0x6f
 8016866:	4853      	ldr	r0, [pc, #332]	@ (80169b4 <_printf_i+0x238>)
 8016868:	6033      	str	r3, [r6, #0]
 801686a:	bf14      	ite	ne
 801686c:	230a      	movne	r3, #10
 801686e:	2308      	moveq	r3, #8
 8016870:	2100      	movs	r1, #0
 8016872:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8016876:	6866      	ldr	r6, [r4, #4]
 8016878:	60a6      	str	r6, [r4, #8]
 801687a:	2e00      	cmp	r6, #0
 801687c:	bfa2      	ittt	ge
 801687e:	6821      	ldrge	r1, [r4, #0]
 8016880:	f021 0104 	bicge.w	r1, r1, #4
 8016884:	6021      	strge	r1, [r4, #0]
 8016886:	b90d      	cbnz	r5, 801688c <_printf_i+0x110>
 8016888:	2e00      	cmp	r6, #0
 801688a:	d04b      	beq.n	8016924 <_printf_i+0x1a8>
 801688c:	4616      	mov	r6, r2
 801688e:	fbb5 f1f3 	udiv	r1, r5, r3
 8016892:	fb03 5711 	mls	r7, r3, r1, r5
 8016896:	5dc7      	ldrb	r7, [r0, r7]
 8016898:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801689c:	462f      	mov	r7, r5
 801689e:	42bb      	cmp	r3, r7
 80168a0:	460d      	mov	r5, r1
 80168a2:	d9f4      	bls.n	801688e <_printf_i+0x112>
 80168a4:	2b08      	cmp	r3, #8
 80168a6:	d10b      	bne.n	80168c0 <_printf_i+0x144>
 80168a8:	6823      	ldr	r3, [r4, #0]
 80168aa:	07df      	lsls	r7, r3, #31
 80168ac:	d508      	bpl.n	80168c0 <_printf_i+0x144>
 80168ae:	6923      	ldr	r3, [r4, #16]
 80168b0:	6861      	ldr	r1, [r4, #4]
 80168b2:	4299      	cmp	r1, r3
 80168b4:	bfde      	ittt	le
 80168b6:	2330      	movle	r3, #48	@ 0x30
 80168b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80168bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80168c0:	1b92      	subs	r2, r2, r6
 80168c2:	6122      	str	r2, [r4, #16]
 80168c4:	f8cd a000 	str.w	sl, [sp]
 80168c8:	464b      	mov	r3, r9
 80168ca:	aa03      	add	r2, sp, #12
 80168cc:	4621      	mov	r1, r4
 80168ce:	4640      	mov	r0, r8
 80168d0:	f7ff fee6 	bl	80166a0 <_printf_common>
 80168d4:	3001      	adds	r0, #1
 80168d6:	d14a      	bne.n	801696e <_printf_i+0x1f2>
 80168d8:	f04f 30ff 	mov.w	r0, #4294967295
 80168dc:	b004      	add	sp, #16
 80168de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80168e2:	6823      	ldr	r3, [r4, #0]
 80168e4:	f043 0320 	orr.w	r3, r3, #32
 80168e8:	6023      	str	r3, [r4, #0]
 80168ea:	4833      	ldr	r0, [pc, #204]	@ (80169b8 <_printf_i+0x23c>)
 80168ec:	2778      	movs	r7, #120	@ 0x78
 80168ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80168f2:	6823      	ldr	r3, [r4, #0]
 80168f4:	6831      	ldr	r1, [r6, #0]
 80168f6:	061f      	lsls	r7, r3, #24
 80168f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80168fc:	d402      	bmi.n	8016904 <_printf_i+0x188>
 80168fe:	065f      	lsls	r7, r3, #25
 8016900:	bf48      	it	mi
 8016902:	b2ad      	uxthmi	r5, r5
 8016904:	6031      	str	r1, [r6, #0]
 8016906:	07d9      	lsls	r1, r3, #31
 8016908:	bf44      	itt	mi
 801690a:	f043 0320 	orrmi.w	r3, r3, #32
 801690e:	6023      	strmi	r3, [r4, #0]
 8016910:	b11d      	cbz	r5, 801691a <_printf_i+0x19e>
 8016912:	2310      	movs	r3, #16
 8016914:	e7ac      	b.n	8016870 <_printf_i+0xf4>
 8016916:	4827      	ldr	r0, [pc, #156]	@ (80169b4 <_printf_i+0x238>)
 8016918:	e7e9      	b.n	80168ee <_printf_i+0x172>
 801691a:	6823      	ldr	r3, [r4, #0]
 801691c:	f023 0320 	bic.w	r3, r3, #32
 8016920:	6023      	str	r3, [r4, #0]
 8016922:	e7f6      	b.n	8016912 <_printf_i+0x196>
 8016924:	4616      	mov	r6, r2
 8016926:	e7bd      	b.n	80168a4 <_printf_i+0x128>
 8016928:	6833      	ldr	r3, [r6, #0]
 801692a:	6825      	ldr	r5, [r4, #0]
 801692c:	6961      	ldr	r1, [r4, #20]
 801692e:	1d18      	adds	r0, r3, #4
 8016930:	6030      	str	r0, [r6, #0]
 8016932:	062e      	lsls	r6, r5, #24
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	d501      	bpl.n	801693c <_printf_i+0x1c0>
 8016938:	6019      	str	r1, [r3, #0]
 801693a:	e002      	b.n	8016942 <_printf_i+0x1c6>
 801693c:	0668      	lsls	r0, r5, #25
 801693e:	d5fb      	bpl.n	8016938 <_printf_i+0x1bc>
 8016940:	8019      	strh	r1, [r3, #0]
 8016942:	2300      	movs	r3, #0
 8016944:	6123      	str	r3, [r4, #16]
 8016946:	4616      	mov	r6, r2
 8016948:	e7bc      	b.n	80168c4 <_printf_i+0x148>
 801694a:	6833      	ldr	r3, [r6, #0]
 801694c:	1d1a      	adds	r2, r3, #4
 801694e:	6032      	str	r2, [r6, #0]
 8016950:	681e      	ldr	r6, [r3, #0]
 8016952:	6862      	ldr	r2, [r4, #4]
 8016954:	2100      	movs	r1, #0
 8016956:	4630      	mov	r0, r6
 8016958:	f7e9 fc1a 	bl	8000190 <memchr>
 801695c:	b108      	cbz	r0, 8016962 <_printf_i+0x1e6>
 801695e:	1b80      	subs	r0, r0, r6
 8016960:	6060      	str	r0, [r4, #4]
 8016962:	6863      	ldr	r3, [r4, #4]
 8016964:	6123      	str	r3, [r4, #16]
 8016966:	2300      	movs	r3, #0
 8016968:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801696c:	e7aa      	b.n	80168c4 <_printf_i+0x148>
 801696e:	6923      	ldr	r3, [r4, #16]
 8016970:	4632      	mov	r2, r6
 8016972:	4649      	mov	r1, r9
 8016974:	4640      	mov	r0, r8
 8016976:	47d0      	blx	sl
 8016978:	3001      	adds	r0, #1
 801697a:	d0ad      	beq.n	80168d8 <_printf_i+0x15c>
 801697c:	6823      	ldr	r3, [r4, #0]
 801697e:	079b      	lsls	r3, r3, #30
 8016980:	d413      	bmi.n	80169aa <_printf_i+0x22e>
 8016982:	68e0      	ldr	r0, [r4, #12]
 8016984:	9b03      	ldr	r3, [sp, #12]
 8016986:	4298      	cmp	r0, r3
 8016988:	bfb8      	it	lt
 801698a:	4618      	movlt	r0, r3
 801698c:	e7a6      	b.n	80168dc <_printf_i+0x160>
 801698e:	2301      	movs	r3, #1
 8016990:	4632      	mov	r2, r6
 8016992:	4649      	mov	r1, r9
 8016994:	4640      	mov	r0, r8
 8016996:	47d0      	blx	sl
 8016998:	3001      	adds	r0, #1
 801699a:	d09d      	beq.n	80168d8 <_printf_i+0x15c>
 801699c:	3501      	adds	r5, #1
 801699e:	68e3      	ldr	r3, [r4, #12]
 80169a0:	9903      	ldr	r1, [sp, #12]
 80169a2:	1a5b      	subs	r3, r3, r1
 80169a4:	42ab      	cmp	r3, r5
 80169a6:	dcf2      	bgt.n	801698e <_printf_i+0x212>
 80169a8:	e7eb      	b.n	8016982 <_printf_i+0x206>
 80169aa:	2500      	movs	r5, #0
 80169ac:	f104 0619 	add.w	r6, r4, #25
 80169b0:	e7f5      	b.n	801699e <_printf_i+0x222>
 80169b2:	bf00      	nop
 80169b4:	08019d5c 	.word	0x08019d5c
 80169b8:	08019d6d 	.word	0x08019d6d

080169bc <__sflush_r>:
 80169bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80169c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169c4:	0716      	lsls	r6, r2, #28
 80169c6:	4605      	mov	r5, r0
 80169c8:	460c      	mov	r4, r1
 80169ca:	d454      	bmi.n	8016a76 <__sflush_r+0xba>
 80169cc:	684b      	ldr	r3, [r1, #4]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	dc02      	bgt.n	80169d8 <__sflush_r+0x1c>
 80169d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	dd48      	ble.n	8016a6a <__sflush_r+0xae>
 80169d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80169da:	2e00      	cmp	r6, #0
 80169dc:	d045      	beq.n	8016a6a <__sflush_r+0xae>
 80169de:	2300      	movs	r3, #0
 80169e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80169e4:	682f      	ldr	r7, [r5, #0]
 80169e6:	6a21      	ldr	r1, [r4, #32]
 80169e8:	602b      	str	r3, [r5, #0]
 80169ea:	d030      	beq.n	8016a4e <__sflush_r+0x92>
 80169ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80169ee:	89a3      	ldrh	r3, [r4, #12]
 80169f0:	0759      	lsls	r1, r3, #29
 80169f2:	d505      	bpl.n	8016a00 <__sflush_r+0x44>
 80169f4:	6863      	ldr	r3, [r4, #4]
 80169f6:	1ad2      	subs	r2, r2, r3
 80169f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80169fa:	b10b      	cbz	r3, 8016a00 <__sflush_r+0x44>
 80169fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80169fe:	1ad2      	subs	r2, r2, r3
 8016a00:	2300      	movs	r3, #0
 8016a02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8016a04:	6a21      	ldr	r1, [r4, #32]
 8016a06:	4628      	mov	r0, r5
 8016a08:	47b0      	blx	r6
 8016a0a:	1c43      	adds	r3, r0, #1
 8016a0c:	89a3      	ldrh	r3, [r4, #12]
 8016a0e:	d106      	bne.n	8016a1e <__sflush_r+0x62>
 8016a10:	6829      	ldr	r1, [r5, #0]
 8016a12:	291d      	cmp	r1, #29
 8016a14:	d82b      	bhi.n	8016a6e <__sflush_r+0xb2>
 8016a16:	4a2a      	ldr	r2, [pc, #168]	@ (8016ac0 <__sflush_r+0x104>)
 8016a18:	410a      	asrs	r2, r1
 8016a1a:	07d6      	lsls	r6, r2, #31
 8016a1c:	d427      	bmi.n	8016a6e <__sflush_r+0xb2>
 8016a1e:	2200      	movs	r2, #0
 8016a20:	6062      	str	r2, [r4, #4]
 8016a22:	04d9      	lsls	r1, r3, #19
 8016a24:	6922      	ldr	r2, [r4, #16]
 8016a26:	6022      	str	r2, [r4, #0]
 8016a28:	d504      	bpl.n	8016a34 <__sflush_r+0x78>
 8016a2a:	1c42      	adds	r2, r0, #1
 8016a2c:	d101      	bne.n	8016a32 <__sflush_r+0x76>
 8016a2e:	682b      	ldr	r3, [r5, #0]
 8016a30:	b903      	cbnz	r3, 8016a34 <__sflush_r+0x78>
 8016a32:	6560      	str	r0, [r4, #84]	@ 0x54
 8016a34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8016a36:	602f      	str	r7, [r5, #0]
 8016a38:	b1b9      	cbz	r1, 8016a6a <__sflush_r+0xae>
 8016a3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8016a3e:	4299      	cmp	r1, r3
 8016a40:	d002      	beq.n	8016a48 <__sflush_r+0x8c>
 8016a42:	4628      	mov	r0, r5
 8016a44:	f7ff fa9a 	bl	8015f7c <_free_r>
 8016a48:	2300      	movs	r3, #0
 8016a4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8016a4c:	e00d      	b.n	8016a6a <__sflush_r+0xae>
 8016a4e:	2301      	movs	r3, #1
 8016a50:	4628      	mov	r0, r5
 8016a52:	47b0      	blx	r6
 8016a54:	4602      	mov	r2, r0
 8016a56:	1c50      	adds	r0, r2, #1
 8016a58:	d1c9      	bne.n	80169ee <__sflush_r+0x32>
 8016a5a:	682b      	ldr	r3, [r5, #0]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d0c6      	beq.n	80169ee <__sflush_r+0x32>
 8016a60:	2b1d      	cmp	r3, #29
 8016a62:	d001      	beq.n	8016a68 <__sflush_r+0xac>
 8016a64:	2b16      	cmp	r3, #22
 8016a66:	d11e      	bne.n	8016aa6 <__sflush_r+0xea>
 8016a68:	602f      	str	r7, [r5, #0]
 8016a6a:	2000      	movs	r0, #0
 8016a6c:	e022      	b.n	8016ab4 <__sflush_r+0xf8>
 8016a6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a72:	b21b      	sxth	r3, r3
 8016a74:	e01b      	b.n	8016aae <__sflush_r+0xf2>
 8016a76:	690f      	ldr	r7, [r1, #16]
 8016a78:	2f00      	cmp	r7, #0
 8016a7a:	d0f6      	beq.n	8016a6a <__sflush_r+0xae>
 8016a7c:	0793      	lsls	r3, r2, #30
 8016a7e:	680e      	ldr	r6, [r1, #0]
 8016a80:	bf08      	it	eq
 8016a82:	694b      	ldreq	r3, [r1, #20]
 8016a84:	600f      	str	r7, [r1, #0]
 8016a86:	bf18      	it	ne
 8016a88:	2300      	movne	r3, #0
 8016a8a:	eba6 0807 	sub.w	r8, r6, r7
 8016a8e:	608b      	str	r3, [r1, #8]
 8016a90:	f1b8 0f00 	cmp.w	r8, #0
 8016a94:	dde9      	ble.n	8016a6a <__sflush_r+0xae>
 8016a96:	6a21      	ldr	r1, [r4, #32]
 8016a98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8016a9a:	4643      	mov	r3, r8
 8016a9c:	463a      	mov	r2, r7
 8016a9e:	4628      	mov	r0, r5
 8016aa0:	47b0      	blx	r6
 8016aa2:	2800      	cmp	r0, #0
 8016aa4:	dc08      	bgt.n	8016ab8 <__sflush_r+0xfc>
 8016aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016aaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016aae:	81a3      	strh	r3, [r4, #12]
 8016ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016ab8:	4407      	add	r7, r0
 8016aba:	eba8 0800 	sub.w	r8, r8, r0
 8016abe:	e7e7      	b.n	8016a90 <__sflush_r+0xd4>
 8016ac0:	dfbffffe 	.word	0xdfbffffe

08016ac4 <_fflush_r>:
 8016ac4:	b538      	push	{r3, r4, r5, lr}
 8016ac6:	690b      	ldr	r3, [r1, #16]
 8016ac8:	4605      	mov	r5, r0
 8016aca:	460c      	mov	r4, r1
 8016acc:	b913      	cbnz	r3, 8016ad4 <_fflush_r+0x10>
 8016ace:	2500      	movs	r5, #0
 8016ad0:	4628      	mov	r0, r5
 8016ad2:	bd38      	pop	{r3, r4, r5, pc}
 8016ad4:	b118      	cbz	r0, 8016ade <_fflush_r+0x1a>
 8016ad6:	6a03      	ldr	r3, [r0, #32]
 8016ad8:	b90b      	cbnz	r3, 8016ade <_fflush_r+0x1a>
 8016ada:	f7fe fff1 	bl	8015ac0 <__sinit>
 8016ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016ae2:	2b00      	cmp	r3, #0
 8016ae4:	d0f3      	beq.n	8016ace <_fflush_r+0xa>
 8016ae6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8016ae8:	07d0      	lsls	r0, r2, #31
 8016aea:	d404      	bmi.n	8016af6 <_fflush_r+0x32>
 8016aec:	0599      	lsls	r1, r3, #22
 8016aee:	d402      	bmi.n	8016af6 <_fflush_r+0x32>
 8016af0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016af2:	f7ff fa32 	bl	8015f5a <__retarget_lock_acquire_recursive>
 8016af6:	4628      	mov	r0, r5
 8016af8:	4621      	mov	r1, r4
 8016afa:	f7ff ff5f 	bl	80169bc <__sflush_r>
 8016afe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016b00:	07da      	lsls	r2, r3, #31
 8016b02:	4605      	mov	r5, r0
 8016b04:	d4e4      	bmi.n	8016ad0 <_fflush_r+0xc>
 8016b06:	89a3      	ldrh	r3, [r4, #12]
 8016b08:	059b      	lsls	r3, r3, #22
 8016b0a:	d4e1      	bmi.n	8016ad0 <_fflush_r+0xc>
 8016b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016b0e:	f7ff fa25 	bl	8015f5c <__retarget_lock_release_recursive>
 8016b12:	e7dd      	b.n	8016ad0 <_fflush_r+0xc>

08016b14 <__swhatbuf_r>:
 8016b14:	b570      	push	{r4, r5, r6, lr}
 8016b16:	460c      	mov	r4, r1
 8016b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b1c:	2900      	cmp	r1, #0
 8016b1e:	b096      	sub	sp, #88	@ 0x58
 8016b20:	4615      	mov	r5, r2
 8016b22:	461e      	mov	r6, r3
 8016b24:	da0d      	bge.n	8016b42 <__swhatbuf_r+0x2e>
 8016b26:	89a3      	ldrh	r3, [r4, #12]
 8016b28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8016b2c:	f04f 0100 	mov.w	r1, #0
 8016b30:	bf14      	ite	ne
 8016b32:	2340      	movne	r3, #64	@ 0x40
 8016b34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8016b38:	2000      	movs	r0, #0
 8016b3a:	6031      	str	r1, [r6, #0]
 8016b3c:	602b      	str	r3, [r5, #0]
 8016b3e:	b016      	add	sp, #88	@ 0x58
 8016b40:	bd70      	pop	{r4, r5, r6, pc}
 8016b42:	466a      	mov	r2, sp
 8016b44:	f000 f8a4 	bl	8016c90 <_fstat_r>
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	dbec      	blt.n	8016b26 <__swhatbuf_r+0x12>
 8016b4c:	9901      	ldr	r1, [sp, #4]
 8016b4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8016b52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8016b56:	4259      	negs	r1, r3
 8016b58:	4159      	adcs	r1, r3
 8016b5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8016b5e:	e7eb      	b.n	8016b38 <__swhatbuf_r+0x24>

08016b60 <__smakebuf_r>:
 8016b60:	898b      	ldrh	r3, [r1, #12]
 8016b62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b64:	079d      	lsls	r5, r3, #30
 8016b66:	4606      	mov	r6, r0
 8016b68:	460c      	mov	r4, r1
 8016b6a:	d507      	bpl.n	8016b7c <__smakebuf_r+0x1c>
 8016b6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8016b70:	6023      	str	r3, [r4, #0]
 8016b72:	6123      	str	r3, [r4, #16]
 8016b74:	2301      	movs	r3, #1
 8016b76:	6163      	str	r3, [r4, #20]
 8016b78:	b003      	add	sp, #12
 8016b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b7c:	ab01      	add	r3, sp, #4
 8016b7e:	466a      	mov	r2, sp
 8016b80:	f7ff ffc8 	bl	8016b14 <__swhatbuf_r>
 8016b84:	9f00      	ldr	r7, [sp, #0]
 8016b86:	4605      	mov	r5, r0
 8016b88:	4639      	mov	r1, r7
 8016b8a:	4630      	mov	r0, r6
 8016b8c:	f7ff fa62 	bl	8016054 <_malloc_r>
 8016b90:	b948      	cbnz	r0, 8016ba6 <__smakebuf_r+0x46>
 8016b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b96:	059a      	lsls	r2, r3, #22
 8016b98:	d4ee      	bmi.n	8016b78 <__smakebuf_r+0x18>
 8016b9a:	f023 0303 	bic.w	r3, r3, #3
 8016b9e:	f043 0302 	orr.w	r3, r3, #2
 8016ba2:	81a3      	strh	r3, [r4, #12]
 8016ba4:	e7e2      	b.n	8016b6c <__smakebuf_r+0xc>
 8016ba6:	89a3      	ldrh	r3, [r4, #12]
 8016ba8:	6020      	str	r0, [r4, #0]
 8016baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016bae:	81a3      	strh	r3, [r4, #12]
 8016bb0:	9b01      	ldr	r3, [sp, #4]
 8016bb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8016bb6:	b15b      	cbz	r3, 8016bd0 <__smakebuf_r+0x70>
 8016bb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bbc:	4630      	mov	r0, r6
 8016bbe:	f000 f879 	bl	8016cb4 <_isatty_r>
 8016bc2:	b128      	cbz	r0, 8016bd0 <__smakebuf_r+0x70>
 8016bc4:	89a3      	ldrh	r3, [r4, #12]
 8016bc6:	f023 0303 	bic.w	r3, r3, #3
 8016bca:	f043 0301 	orr.w	r3, r3, #1
 8016bce:	81a3      	strh	r3, [r4, #12]
 8016bd0:	89a3      	ldrh	r3, [r4, #12]
 8016bd2:	431d      	orrs	r5, r3
 8016bd4:	81a5      	strh	r5, [r4, #12]
 8016bd6:	e7cf      	b.n	8016b78 <__smakebuf_r+0x18>

08016bd8 <_putc_r>:
 8016bd8:	b570      	push	{r4, r5, r6, lr}
 8016bda:	460d      	mov	r5, r1
 8016bdc:	4614      	mov	r4, r2
 8016bde:	4606      	mov	r6, r0
 8016be0:	b118      	cbz	r0, 8016bea <_putc_r+0x12>
 8016be2:	6a03      	ldr	r3, [r0, #32]
 8016be4:	b90b      	cbnz	r3, 8016bea <_putc_r+0x12>
 8016be6:	f7fe ff6b 	bl	8015ac0 <__sinit>
 8016bea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016bec:	07d8      	lsls	r0, r3, #31
 8016bee:	d405      	bmi.n	8016bfc <_putc_r+0x24>
 8016bf0:	89a3      	ldrh	r3, [r4, #12]
 8016bf2:	0599      	lsls	r1, r3, #22
 8016bf4:	d402      	bmi.n	8016bfc <_putc_r+0x24>
 8016bf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016bf8:	f7ff f9af 	bl	8015f5a <__retarget_lock_acquire_recursive>
 8016bfc:	68a3      	ldr	r3, [r4, #8]
 8016bfe:	3b01      	subs	r3, #1
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	60a3      	str	r3, [r4, #8]
 8016c04:	da05      	bge.n	8016c12 <_putc_r+0x3a>
 8016c06:	69a2      	ldr	r2, [r4, #24]
 8016c08:	4293      	cmp	r3, r2
 8016c0a:	db12      	blt.n	8016c32 <_putc_r+0x5a>
 8016c0c:	b2eb      	uxtb	r3, r5
 8016c0e:	2b0a      	cmp	r3, #10
 8016c10:	d00f      	beq.n	8016c32 <_putc_r+0x5a>
 8016c12:	6823      	ldr	r3, [r4, #0]
 8016c14:	1c5a      	adds	r2, r3, #1
 8016c16:	6022      	str	r2, [r4, #0]
 8016c18:	701d      	strb	r5, [r3, #0]
 8016c1a:	b2ed      	uxtb	r5, r5
 8016c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8016c1e:	07da      	lsls	r2, r3, #31
 8016c20:	d405      	bmi.n	8016c2e <_putc_r+0x56>
 8016c22:	89a3      	ldrh	r3, [r4, #12]
 8016c24:	059b      	lsls	r3, r3, #22
 8016c26:	d402      	bmi.n	8016c2e <_putc_r+0x56>
 8016c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8016c2a:	f7ff f997 	bl	8015f5c <__retarget_lock_release_recursive>
 8016c2e:	4628      	mov	r0, r5
 8016c30:	bd70      	pop	{r4, r5, r6, pc}
 8016c32:	4629      	mov	r1, r5
 8016c34:	4622      	mov	r2, r4
 8016c36:	4630      	mov	r0, r6
 8016c38:	f7ff f86c 	bl	8015d14 <__swbuf_r>
 8016c3c:	4605      	mov	r5, r0
 8016c3e:	e7ed      	b.n	8016c1c <_putc_r+0x44>

08016c40 <memmove>:
 8016c40:	4288      	cmp	r0, r1
 8016c42:	b510      	push	{r4, lr}
 8016c44:	eb01 0402 	add.w	r4, r1, r2
 8016c48:	d902      	bls.n	8016c50 <memmove+0x10>
 8016c4a:	4284      	cmp	r4, r0
 8016c4c:	4623      	mov	r3, r4
 8016c4e:	d807      	bhi.n	8016c60 <memmove+0x20>
 8016c50:	1e43      	subs	r3, r0, #1
 8016c52:	42a1      	cmp	r1, r4
 8016c54:	d008      	beq.n	8016c68 <memmove+0x28>
 8016c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016c5e:	e7f8      	b.n	8016c52 <memmove+0x12>
 8016c60:	4402      	add	r2, r0
 8016c62:	4601      	mov	r1, r0
 8016c64:	428a      	cmp	r2, r1
 8016c66:	d100      	bne.n	8016c6a <memmove+0x2a>
 8016c68:	bd10      	pop	{r4, pc}
 8016c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016c72:	e7f7      	b.n	8016c64 <memmove+0x24>

08016c74 <strchr>:
 8016c74:	b2c9      	uxtb	r1, r1
 8016c76:	4603      	mov	r3, r0
 8016c78:	4618      	mov	r0, r3
 8016c7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016c7e:	b112      	cbz	r2, 8016c86 <strchr+0x12>
 8016c80:	428a      	cmp	r2, r1
 8016c82:	d1f9      	bne.n	8016c78 <strchr+0x4>
 8016c84:	4770      	bx	lr
 8016c86:	2900      	cmp	r1, #0
 8016c88:	bf18      	it	ne
 8016c8a:	2000      	movne	r0, #0
 8016c8c:	4770      	bx	lr
	...

08016c90 <_fstat_r>:
 8016c90:	b538      	push	{r3, r4, r5, lr}
 8016c92:	4d07      	ldr	r5, [pc, #28]	@ (8016cb0 <_fstat_r+0x20>)
 8016c94:	2300      	movs	r3, #0
 8016c96:	4604      	mov	r4, r0
 8016c98:	4608      	mov	r0, r1
 8016c9a:	4611      	mov	r1, r2
 8016c9c:	602b      	str	r3, [r5, #0]
 8016c9e:	f7ed ff92 	bl	8004bc6 <_fstat>
 8016ca2:	1c43      	adds	r3, r0, #1
 8016ca4:	d102      	bne.n	8016cac <_fstat_r+0x1c>
 8016ca6:	682b      	ldr	r3, [r5, #0]
 8016ca8:	b103      	cbz	r3, 8016cac <_fstat_r+0x1c>
 8016caa:	6023      	str	r3, [r4, #0]
 8016cac:	bd38      	pop	{r3, r4, r5, pc}
 8016cae:	bf00      	nop
 8016cb0:	20003664 	.word	0x20003664

08016cb4 <_isatty_r>:
 8016cb4:	b538      	push	{r3, r4, r5, lr}
 8016cb6:	4d06      	ldr	r5, [pc, #24]	@ (8016cd0 <_isatty_r+0x1c>)
 8016cb8:	2300      	movs	r3, #0
 8016cba:	4604      	mov	r4, r0
 8016cbc:	4608      	mov	r0, r1
 8016cbe:	602b      	str	r3, [r5, #0]
 8016cc0:	f7ed ff91 	bl	8004be6 <_isatty>
 8016cc4:	1c43      	adds	r3, r0, #1
 8016cc6:	d102      	bne.n	8016cce <_isatty_r+0x1a>
 8016cc8:	682b      	ldr	r3, [r5, #0]
 8016cca:	b103      	cbz	r3, 8016cce <_isatty_r+0x1a>
 8016ccc:	6023      	str	r3, [r4, #0]
 8016cce:	bd38      	pop	{r3, r4, r5, pc}
 8016cd0:	20003664 	.word	0x20003664

08016cd4 <_sbrk_r>:
 8016cd4:	b538      	push	{r3, r4, r5, lr}
 8016cd6:	4d06      	ldr	r5, [pc, #24]	@ (8016cf0 <_sbrk_r+0x1c>)
 8016cd8:	2300      	movs	r3, #0
 8016cda:	4604      	mov	r4, r0
 8016cdc:	4608      	mov	r0, r1
 8016cde:	602b      	str	r3, [r5, #0]
 8016ce0:	f7ed ff9a 	bl	8004c18 <_sbrk>
 8016ce4:	1c43      	adds	r3, r0, #1
 8016ce6:	d102      	bne.n	8016cee <_sbrk_r+0x1a>
 8016ce8:	682b      	ldr	r3, [r5, #0]
 8016cea:	b103      	cbz	r3, 8016cee <_sbrk_r+0x1a>
 8016cec:	6023      	str	r3, [r4, #0]
 8016cee:	bd38      	pop	{r3, r4, r5, pc}
 8016cf0:	20003664 	.word	0x20003664

08016cf4 <_realloc_r>:
 8016cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cf8:	4680      	mov	r8, r0
 8016cfa:	4615      	mov	r5, r2
 8016cfc:	460c      	mov	r4, r1
 8016cfe:	b921      	cbnz	r1, 8016d0a <_realloc_r+0x16>
 8016d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016d04:	4611      	mov	r1, r2
 8016d06:	f7ff b9a5 	b.w	8016054 <_malloc_r>
 8016d0a:	b92a      	cbnz	r2, 8016d18 <_realloc_r+0x24>
 8016d0c:	f7ff f936 	bl	8015f7c <_free_r>
 8016d10:	2400      	movs	r4, #0
 8016d12:	4620      	mov	r0, r4
 8016d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d18:	f000 f81a 	bl	8016d50 <_malloc_usable_size_r>
 8016d1c:	4285      	cmp	r5, r0
 8016d1e:	4606      	mov	r6, r0
 8016d20:	d802      	bhi.n	8016d28 <_realloc_r+0x34>
 8016d22:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8016d26:	d8f4      	bhi.n	8016d12 <_realloc_r+0x1e>
 8016d28:	4629      	mov	r1, r5
 8016d2a:	4640      	mov	r0, r8
 8016d2c:	f7ff f992 	bl	8016054 <_malloc_r>
 8016d30:	4607      	mov	r7, r0
 8016d32:	2800      	cmp	r0, #0
 8016d34:	d0ec      	beq.n	8016d10 <_realloc_r+0x1c>
 8016d36:	42b5      	cmp	r5, r6
 8016d38:	462a      	mov	r2, r5
 8016d3a:	4621      	mov	r1, r4
 8016d3c:	bf28      	it	cs
 8016d3e:	4632      	movcs	r2, r6
 8016d40:	f7ff f90d 	bl	8015f5e <memcpy>
 8016d44:	4621      	mov	r1, r4
 8016d46:	4640      	mov	r0, r8
 8016d48:	f7ff f918 	bl	8015f7c <_free_r>
 8016d4c:	463c      	mov	r4, r7
 8016d4e:	e7e0      	b.n	8016d12 <_realloc_r+0x1e>

08016d50 <_malloc_usable_size_r>:
 8016d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d54:	1f18      	subs	r0, r3, #4
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	bfbc      	itt	lt
 8016d5a:	580b      	ldrlt	r3, [r1, r0]
 8016d5c:	18c0      	addlt	r0, r0, r3
 8016d5e:	4770      	bx	lr

08016d60 <cos>:
 8016d60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016d62:	ec53 2b10 	vmov	r2, r3, d0
 8016d66:	4826      	ldr	r0, [pc, #152]	@ (8016e00 <cos+0xa0>)
 8016d68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8016d6c:	4281      	cmp	r1, r0
 8016d6e:	d806      	bhi.n	8016d7e <cos+0x1e>
 8016d70:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8016df8 <cos+0x98>
 8016d74:	b005      	add	sp, #20
 8016d76:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d7a:	f000 b845 	b.w	8016e08 <__kernel_cos>
 8016d7e:	4821      	ldr	r0, [pc, #132]	@ (8016e04 <cos+0xa4>)
 8016d80:	4281      	cmp	r1, r0
 8016d82:	d908      	bls.n	8016d96 <cos+0x36>
 8016d84:	4610      	mov	r0, r2
 8016d86:	4619      	mov	r1, r3
 8016d88:	f7e9 fa56 	bl	8000238 <__aeabi_dsub>
 8016d8c:	ec41 0b10 	vmov	d0, r0, r1
 8016d90:	b005      	add	sp, #20
 8016d92:	f85d fb04 	ldr.w	pc, [sp], #4
 8016d96:	4668      	mov	r0, sp
 8016d98:	f000 f9ba 	bl	8017110 <__ieee754_rem_pio2>
 8016d9c:	f000 0003 	and.w	r0, r0, #3
 8016da0:	2801      	cmp	r0, #1
 8016da2:	d00b      	beq.n	8016dbc <cos+0x5c>
 8016da4:	2802      	cmp	r0, #2
 8016da6:	d015      	beq.n	8016dd4 <cos+0x74>
 8016da8:	b9d8      	cbnz	r0, 8016de2 <cos+0x82>
 8016daa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016dae:	ed9d 0b00 	vldr	d0, [sp]
 8016db2:	f000 f829 	bl	8016e08 <__kernel_cos>
 8016db6:	ec51 0b10 	vmov	r0, r1, d0
 8016dba:	e7e7      	b.n	8016d8c <cos+0x2c>
 8016dbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016dc0:	ed9d 0b00 	vldr	d0, [sp]
 8016dc4:	f000 f8e8 	bl	8016f98 <__kernel_sin>
 8016dc8:	ec53 2b10 	vmov	r2, r3, d0
 8016dcc:	4610      	mov	r0, r2
 8016dce:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8016dd2:	e7db      	b.n	8016d8c <cos+0x2c>
 8016dd4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016dd8:	ed9d 0b00 	vldr	d0, [sp]
 8016ddc:	f000 f814 	bl	8016e08 <__kernel_cos>
 8016de0:	e7f2      	b.n	8016dc8 <cos+0x68>
 8016de2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016de6:	ed9d 0b00 	vldr	d0, [sp]
 8016dea:	2001      	movs	r0, #1
 8016dec:	f000 f8d4 	bl	8016f98 <__kernel_sin>
 8016df0:	e7e1      	b.n	8016db6 <cos+0x56>
 8016df2:	bf00      	nop
 8016df4:	f3af 8000 	nop.w
	...
 8016e00:	3fe921fb 	.word	0x3fe921fb
 8016e04:	7fefffff 	.word	0x7fefffff

08016e08 <__kernel_cos>:
 8016e08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e0c:	ec57 6b10 	vmov	r6, r7, d0
 8016e10:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8016e14:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8016e18:	ed8d 1b00 	vstr	d1, [sp]
 8016e1c:	d206      	bcs.n	8016e2c <__kernel_cos+0x24>
 8016e1e:	4630      	mov	r0, r6
 8016e20:	4639      	mov	r1, r7
 8016e22:	f7e9 fe5b 	bl	8000adc <__aeabi_d2iz>
 8016e26:	2800      	cmp	r0, #0
 8016e28:	f000 8088 	beq.w	8016f3c <__kernel_cos+0x134>
 8016e2c:	4632      	mov	r2, r6
 8016e2e:	463b      	mov	r3, r7
 8016e30:	4630      	mov	r0, r6
 8016e32:	4639      	mov	r1, r7
 8016e34:	f7e9 fbb8 	bl	80005a8 <__aeabi_dmul>
 8016e38:	4b51      	ldr	r3, [pc, #324]	@ (8016f80 <__kernel_cos+0x178>)
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	4604      	mov	r4, r0
 8016e3e:	460d      	mov	r5, r1
 8016e40:	f7e9 fbb2 	bl	80005a8 <__aeabi_dmul>
 8016e44:	a340      	add	r3, pc, #256	@ (adr r3, 8016f48 <__kernel_cos+0x140>)
 8016e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e4a:	4682      	mov	sl, r0
 8016e4c:	468b      	mov	fp, r1
 8016e4e:	4620      	mov	r0, r4
 8016e50:	4629      	mov	r1, r5
 8016e52:	f7e9 fba9 	bl	80005a8 <__aeabi_dmul>
 8016e56:	a33e      	add	r3, pc, #248	@ (adr r3, 8016f50 <__kernel_cos+0x148>)
 8016e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e5c:	f7e9 f9ee 	bl	800023c <__adddf3>
 8016e60:	4622      	mov	r2, r4
 8016e62:	462b      	mov	r3, r5
 8016e64:	f7e9 fba0 	bl	80005a8 <__aeabi_dmul>
 8016e68:	a33b      	add	r3, pc, #236	@ (adr r3, 8016f58 <__kernel_cos+0x150>)
 8016e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6e:	f7e9 f9e3 	bl	8000238 <__aeabi_dsub>
 8016e72:	4622      	mov	r2, r4
 8016e74:	462b      	mov	r3, r5
 8016e76:	f7e9 fb97 	bl	80005a8 <__aeabi_dmul>
 8016e7a:	a339      	add	r3, pc, #228	@ (adr r3, 8016f60 <__kernel_cos+0x158>)
 8016e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e80:	f7e9 f9dc 	bl	800023c <__adddf3>
 8016e84:	4622      	mov	r2, r4
 8016e86:	462b      	mov	r3, r5
 8016e88:	f7e9 fb8e 	bl	80005a8 <__aeabi_dmul>
 8016e8c:	a336      	add	r3, pc, #216	@ (adr r3, 8016f68 <__kernel_cos+0x160>)
 8016e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e92:	f7e9 f9d1 	bl	8000238 <__aeabi_dsub>
 8016e96:	4622      	mov	r2, r4
 8016e98:	462b      	mov	r3, r5
 8016e9a:	f7e9 fb85 	bl	80005a8 <__aeabi_dmul>
 8016e9e:	a334      	add	r3, pc, #208	@ (adr r3, 8016f70 <__kernel_cos+0x168>)
 8016ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ea4:	f7e9 f9ca 	bl	800023c <__adddf3>
 8016ea8:	4622      	mov	r2, r4
 8016eaa:	462b      	mov	r3, r5
 8016eac:	f7e9 fb7c 	bl	80005a8 <__aeabi_dmul>
 8016eb0:	4622      	mov	r2, r4
 8016eb2:	462b      	mov	r3, r5
 8016eb4:	f7e9 fb78 	bl	80005a8 <__aeabi_dmul>
 8016eb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016ebc:	4604      	mov	r4, r0
 8016ebe:	460d      	mov	r5, r1
 8016ec0:	4630      	mov	r0, r6
 8016ec2:	4639      	mov	r1, r7
 8016ec4:	f7e9 fb70 	bl	80005a8 <__aeabi_dmul>
 8016ec8:	460b      	mov	r3, r1
 8016eca:	4602      	mov	r2, r0
 8016ecc:	4629      	mov	r1, r5
 8016ece:	4620      	mov	r0, r4
 8016ed0:	f7e9 f9b2 	bl	8000238 <__aeabi_dsub>
 8016ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8016f84 <__kernel_cos+0x17c>)
 8016ed6:	4598      	cmp	r8, r3
 8016ed8:	4606      	mov	r6, r0
 8016eda:	460f      	mov	r7, r1
 8016edc:	d810      	bhi.n	8016f00 <__kernel_cos+0xf8>
 8016ede:	4602      	mov	r2, r0
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	4650      	mov	r0, sl
 8016ee4:	4659      	mov	r1, fp
 8016ee6:	f7e9 f9a7 	bl	8000238 <__aeabi_dsub>
 8016eea:	460b      	mov	r3, r1
 8016eec:	4926      	ldr	r1, [pc, #152]	@ (8016f88 <__kernel_cos+0x180>)
 8016eee:	4602      	mov	r2, r0
 8016ef0:	2000      	movs	r0, #0
 8016ef2:	f7e9 f9a1 	bl	8000238 <__aeabi_dsub>
 8016ef6:	ec41 0b10 	vmov	d0, r0, r1
 8016efa:	b003      	add	sp, #12
 8016efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f00:	4b22      	ldr	r3, [pc, #136]	@ (8016f8c <__kernel_cos+0x184>)
 8016f02:	4921      	ldr	r1, [pc, #132]	@ (8016f88 <__kernel_cos+0x180>)
 8016f04:	4598      	cmp	r8, r3
 8016f06:	bf8c      	ite	hi
 8016f08:	4d21      	ldrhi	r5, [pc, #132]	@ (8016f90 <__kernel_cos+0x188>)
 8016f0a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8016f0e:	2400      	movs	r4, #0
 8016f10:	4622      	mov	r2, r4
 8016f12:	462b      	mov	r3, r5
 8016f14:	2000      	movs	r0, #0
 8016f16:	f7e9 f98f 	bl	8000238 <__aeabi_dsub>
 8016f1a:	4622      	mov	r2, r4
 8016f1c:	4680      	mov	r8, r0
 8016f1e:	4689      	mov	r9, r1
 8016f20:	462b      	mov	r3, r5
 8016f22:	4650      	mov	r0, sl
 8016f24:	4659      	mov	r1, fp
 8016f26:	f7e9 f987 	bl	8000238 <__aeabi_dsub>
 8016f2a:	4632      	mov	r2, r6
 8016f2c:	463b      	mov	r3, r7
 8016f2e:	f7e9 f983 	bl	8000238 <__aeabi_dsub>
 8016f32:	4602      	mov	r2, r0
 8016f34:	460b      	mov	r3, r1
 8016f36:	4640      	mov	r0, r8
 8016f38:	4649      	mov	r1, r9
 8016f3a:	e7da      	b.n	8016ef2 <__kernel_cos+0xea>
 8016f3c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8016f78 <__kernel_cos+0x170>
 8016f40:	e7db      	b.n	8016efa <__kernel_cos+0xf2>
 8016f42:	bf00      	nop
 8016f44:	f3af 8000 	nop.w
 8016f48:	be8838d4 	.word	0xbe8838d4
 8016f4c:	bda8fae9 	.word	0xbda8fae9
 8016f50:	bdb4b1c4 	.word	0xbdb4b1c4
 8016f54:	3e21ee9e 	.word	0x3e21ee9e
 8016f58:	809c52ad 	.word	0x809c52ad
 8016f5c:	3e927e4f 	.word	0x3e927e4f
 8016f60:	19cb1590 	.word	0x19cb1590
 8016f64:	3efa01a0 	.word	0x3efa01a0
 8016f68:	16c15177 	.word	0x16c15177
 8016f6c:	3f56c16c 	.word	0x3f56c16c
 8016f70:	5555554c 	.word	0x5555554c
 8016f74:	3fa55555 	.word	0x3fa55555
 8016f78:	00000000 	.word	0x00000000
 8016f7c:	3ff00000 	.word	0x3ff00000
 8016f80:	3fe00000 	.word	0x3fe00000
 8016f84:	3fd33332 	.word	0x3fd33332
 8016f88:	3ff00000 	.word	0x3ff00000
 8016f8c:	3fe90000 	.word	0x3fe90000
 8016f90:	3fd20000 	.word	0x3fd20000
 8016f94:	00000000 	.word	0x00000000

08016f98 <__kernel_sin>:
 8016f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f9c:	ec55 4b10 	vmov	r4, r5, d0
 8016fa0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8016fa4:	b085      	sub	sp, #20
 8016fa6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8016faa:	ed8d 1b02 	vstr	d1, [sp, #8]
 8016fae:	4680      	mov	r8, r0
 8016fb0:	d205      	bcs.n	8016fbe <__kernel_sin+0x26>
 8016fb2:	4620      	mov	r0, r4
 8016fb4:	4629      	mov	r1, r5
 8016fb6:	f7e9 fd91 	bl	8000adc <__aeabi_d2iz>
 8016fba:	2800      	cmp	r0, #0
 8016fbc:	d052      	beq.n	8017064 <__kernel_sin+0xcc>
 8016fbe:	4622      	mov	r2, r4
 8016fc0:	462b      	mov	r3, r5
 8016fc2:	4620      	mov	r0, r4
 8016fc4:	4629      	mov	r1, r5
 8016fc6:	f7e9 faef 	bl	80005a8 <__aeabi_dmul>
 8016fca:	4682      	mov	sl, r0
 8016fcc:	468b      	mov	fp, r1
 8016fce:	4602      	mov	r2, r0
 8016fd0:	460b      	mov	r3, r1
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	4629      	mov	r1, r5
 8016fd6:	f7e9 fae7 	bl	80005a8 <__aeabi_dmul>
 8016fda:	a342      	add	r3, pc, #264	@ (adr r3, 80170e4 <__kernel_sin+0x14c>)
 8016fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe0:	e9cd 0100 	strd	r0, r1, [sp]
 8016fe4:	4650      	mov	r0, sl
 8016fe6:	4659      	mov	r1, fp
 8016fe8:	f7e9 fade 	bl	80005a8 <__aeabi_dmul>
 8016fec:	a33f      	add	r3, pc, #252	@ (adr r3, 80170ec <__kernel_sin+0x154>)
 8016fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ff2:	f7e9 f921 	bl	8000238 <__aeabi_dsub>
 8016ff6:	4652      	mov	r2, sl
 8016ff8:	465b      	mov	r3, fp
 8016ffa:	f7e9 fad5 	bl	80005a8 <__aeabi_dmul>
 8016ffe:	a33d      	add	r3, pc, #244	@ (adr r3, 80170f4 <__kernel_sin+0x15c>)
 8017000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017004:	f7e9 f91a 	bl	800023c <__adddf3>
 8017008:	4652      	mov	r2, sl
 801700a:	465b      	mov	r3, fp
 801700c:	f7e9 facc 	bl	80005a8 <__aeabi_dmul>
 8017010:	a33a      	add	r3, pc, #232	@ (adr r3, 80170fc <__kernel_sin+0x164>)
 8017012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017016:	f7e9 f90f 	bl	8000238 <__aeabi_dsub>
 801701a:	4652      	mov	r2, sl
 801701c:	465b      	mov	r3, fp
 801701e:	f7e9 fac3 	bl	80005a8 <__aeabi_dmul>
 8017022:	a338      	add	r3, pc, #224	@ (adr r3, 8017104 <__kernel_sin+0x16c>)
 8017024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017028:	f7e9 f908 	bl	800023c <__adddf3>
 801702c:	4606      	mov	r6, r0
 801702e:	460f      	mov	r7, r1
 8017030:	f1b8 0f00 	cmp.w	r8, #0
 8017034:	d11b      	bne.n	801706e <__kernel_sin+0xd6>
 8017036:	4602      	mov	r2, r0
 8017038:	460b      	mov	r3, r1
 801703a:	4650      	mov	r0, sl
 801703c:	4659      	mov	r1, fp
 801703e:	f7e9 fab3 	bl	80005a8 <__aeabi_dmul>
 8017042:	a325      	add	r3, pc, #148	@ (adr r3, 80170d8 <__kernel_sin+0x140>)
 8017044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017048:	f7e9 f8f6 	bl	8000238 <__aeabi_dsub>
 801704c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017050:	f7e9 faaa 	bl	80005a8 <__aeabi_dmul>
 8017054:	4602      	mov	r2, r0
 8017056:	460b      	mov	r3, r1
 8017058:	4620      	mov	r0, r4
 801705a:	4629      	mov	r1, r5
 801705c:	f7e9 f8ee 	bl	800023c <__adddf3>
 8017060:	4604      	mov	r4, r0
 8017062:	460d      	mov	r5, r1
 8017064:	ec45 4b10 	vmov	d0, r4, r5
 8017068:	b005      	add	sp, #20
 801706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801706e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017072:	4b1b      	ldr	r3, [pc, #108]	@ (80170e0 <__kernel_sin+0x148>)
 8017074:	2200      	movs	r2, #0
 8017076:	f7e9 fa97 	bl	80005a8 <__aeabi_dmul>
 801707a:	4632      	mov	r2, r6
 801707c:	4680      	mov	r8, r0
 801707e:	4689      	mov	r9, r1
 8017080:	463b      	mov	r3, r7
 8017082:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017086:	f7e9 fa8f 	bl	80005a8 <__aeabi_dmul>
 801708a:	4602      	mov	r2, r0
 801708c:	460b      	mov	r3, r1
 801708e:	4640      	mov	r0, r8
 8017090:	4649      	mov	r1, r9
 8017092:	f7e9 f8d1 	bl	8000238 <__aeabi_dsub>
 8017096:	4652      	mov	r2, sl
 8017098:	465b      	mov	r3, fp
 801709a:	f7e9 fa85 	bl	80005a8 <__aeabi_dmul>
 801709e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80170a2:	f7e9 f8c9 	bl	8000238 <__aeabi_dsub>
 80170a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80170d8 <__kernel_sin+0x140>)
 80170a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ac:	4606      	mov	r6, r0
 80170ae:	460f      	mov	r7, r1
 80170b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80170b4:	f7e9 fa78 	bl	80005a8 <__aeabi_dmul>
 80170b8:	4602      	mov	r2, r0
 80170ba:	460b      	mov	r3, r1
 80170bc:	4630      	mov	r0, r6
 80170be:	4639      	mov	r1, r7
 80170c0:	f7e9 f8bc 	bl	800023c <__adddf3>
 80170c4:	4602      	mov	r2, r0
 80170c6:	460b      	mov	r3, r1
 80170c8:	4620      	mov	r0, r4
 80170ca:	4629      	mov	r1, r5
 80170cc:	f7e9 f8b4 	bl	8000238 <__aeabi_dsub>
 80170d0:	e7c6      	b.n	8017060 <__kernel_sin+0xc8>
 80170d2:	bf00      	nop
 80170d4:	f3af 8000 	nop.w
 80170d8:	55555549 	.word	0x55555549
 80170dc:	3fc55555 	.word	0x3fc55555
 80170e0:	3fe00000 	.word	0x3fe00000
 80170e4:	5acfd57c 	.word	0x5acfd57c
 80170e8:	3de5d93a 	.word	0x3de5d93a
 80170ec:	8a2b9ceb 	.word	0x8a2b9ceb
 80170f0:	3e5ae5e6 	.word	0x3e5ae5e6
 80170f4:	57b1fe7d 	.word	0x57b1fe7d
 80170f8:	3ec71de3 	.word	0x3ec71de3
 80170fc:	19c161d5 	.word	0x19c161d5
 8017100:	3f2a01a0 	.word	0x3f2a01a0
 8017104:	1110f8a6 	.word	0x1110f8a6
 8017108:	3f811111 	.word	0x3f811111
 801710c:	00000000 	.word	0x00000000

08017110 <__ieee754_rem_pio2>:
 8017110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017114:	ec57 6b10 	vmov	r6, r7, d0
 8017118:	4bc5      	ldr	r3, [pc, #788]	@ (8017430 <__ieee754_rem_pio2+0x320>)
 801711a:	b08d      	sub	sp, #52	@ 0x34
 801711c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017120:	4598      	cmp	r8, r3
 8017122:	4604      	mov	r4, r0
 8017124:	9704      	str	r7, [sp, #16]
 8017126:	d807      	bhi.n	8017138 <__ieee754_rem_pio2+0x28>
 8017128:	2200      	movs	r2, #0
 801712a:	2300      	movs	r3, #0
 801712c:	ed80 0b00 	vstr	d0, [r0]
 8017130:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017134:	2500      	movs	r5, #0
 8017136:	e028      	b.n	801718a <__ieee754_rem_pio2+0x7a>
 8017138:	4bbe      	ldr	r3, [pc, #760]	@ (8017434 <__ieee754_rem_pio2+0x324>)
 801713a:	4598      	cmp	r8, r3
 801713c:	d878      	bhi.n	8017230 <__ieee754_rem_pio2+0x120>
 801713e:	9b04      	ldr	r3, [sp, #16]
 8017140:	4dbd      	ldr	r5, [pc, #756]	@ (8017438 <__ieee754_rem_pio2+0x328>)
 8017142:	2b00      	cmp	r3, #0
 8017144:	4630      	mov	r0, r6
 8017146:	a3ac      	add	r3, pc, #688	@ (adr r3, 80173f8 <__ieee754_rem_pio2+0x2e8>)
 8017148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801714c:	4639      	mov	r1, r7
 801714e:	dd38      	ble.n	80171c2 <__ieee754_rem_pio2+0xb2>
 8017150:	f7e9 f872 	bl	8000238 <__aeabi_dsub>
 8017154:	45a8      	cmp	r8, r5
 8017156:	4606      	mov	r6, r0
 8017158:	460f      	mov	r7, r1
 801715a:	d01a      	beq.n	8017192 <__ieee754_rem_pio2+0x82>
 801715c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8017400 <__ieee754_rem_pio2+0x2f0>)
 801715e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017162:	f7e9 f869 	bl	8000238 <__aeabi_dsub>
 8017166:	4602      	mov	r2, r0
 8017168:	460b      	mov	r3, r1
 801716a:	4680      	mov	r8, r0
 801716c:	4689      	mov	r9, r1
 801716e:	4630      	mov	r0, r6
 8017170:	4639      	mov	r1, r7
 8017172:	f7e9 f861 	bl	8000238 <__aeabi_dsub>
 8017176:	a3a2      	add	r3, pc, #648	@ (adr r3, 8017400 <__ieee754_rem_pio2+0x2f0>)
 8017178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801717c:	f7e9 f85c 	bl	8000238 <__aeabi_dsub>
 8017180:	e9c4 8900 	strd	r8, r9, [r4]
 8017184:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017188:	2501      	movs	r5, #1
 801718a:	4628      	mov	r0, r5
 801718c:	b00d      	add	sp, #52	@ 0x34
 801718e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017192:	a39d      	add	r3, pc, #628	@ (adr r3, 8017408 <__ieee754_rem_pio2+0x2f8>)
 8017194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017198:	f7e9 f84e 	bl	8000238 <__aeabi_dsub>
 801719c:	a39c      	add	r3, pc, #624	@ (adr r3, 8017410 <__ieee754_rem_pio2+0x300>)
 801719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a2:	4606      	mov	r6, r0
 80171a4:	460f      	mov	r7, r1
 80171a6:	f7e9 f847 	bl	8000238 <__aeabi_dsub>
 80171aa:	4602      	mov	r2, r0
 80171ac:	460b      	mov	r3, r1
 80171ae:	4680      	mov	r8, r0
 80171b0:	4689      	mov	r9, r1
 80171b2:	4630      	mov	r0, r6
 80171b4:	4639      	mov	r1, r7
 80171b6:	f7e9 f83f 	bl	8000238 <__aeabi_dsub>
 80171ba:	a395      	add	r3, pc, #596	@ (adr r3, 8017410 <__ieee754_rem_pio2+0x300>)
 80171bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171c0:	e7dc      	b.n	801717c <__ieee754_rem_pio2+0x6c>
 80171c2:	f7e9 f83b 	bl	800023c <__adddf3>
 80171c6:	45a8      	cmp	r8, r5
 80171c8:	4606      	mov	r6, r0
 80171ca:	460f      	mov	r7, r1
 80171cc:	d018      	beq.n	8017200 <__ieee754_rem_pio2+0xf0>
 80171ce:	a38c      	add	r3, pc, #560	@ (adr r3, 8017400 <__ieee754_rem_pio2+0x2f0>)
 80171d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171d4:	f7e9 f832 	bl	800023c <__adddf3>
 80171d8:	4602      	mov	r2, r0
 80171da:	460b      	mov	r3, r1
 80171dc:	4680      	mov	r8, r0
 80171de:	4689      	mov	r9, r1
 80171e0:	4630      	mov	r0, r6
 80171e2:	4639      	mov	r1, r7
 80171e4:	f7e9 f828 	bl	8000238 <__aeabi_dsub>
 80171e8:	a385      	add	r3, pc, #532	@ (adr r3, 8017400 <__ieee754_rem_pio2+0x2f0>)
 80171ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171ee:	f7e9 f825 	bl	800023c <__adddf3>
 80171f2:	f04f 35ff 	mov.w	r5, #4294967295
 80171f6:	e9c4 8900 	strd	r8, r9, [r4]
 80171fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80171fe:	e7c4      	b.n	801718a <__ieee754_rem_pio2+0x7a>
 8017200:	a381      	add	r3, pc, #516	@ (adr r3, 8017408 <__ieee754_rem_pio2+0x2f8>)
 8017202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017206:	f7e9 f819 	bl	800023c <__adddf3>
 801720a:	a381      	add	r3, pc, #516	@ (adr r3, 8017410 <__ieee754_rem_pio2+0x300>)
 801720c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017210:	4606      	mov	r6, r0
 8017212:	460f      	mov	r7, r1
 8017214:	f7e9 f812 	bl	800023c <__adddf3>
 8017218:	4602      	mov	r2, r0
 801721a:	460b      	mov	r3, r1
 801721c:	4680      	mov	r8, r0
 801721e:	4689      	mov	r9, r1
 8017220:	4630      	mov	r0, r6
 8017222:	4639      	mov	r1, r7
 8017224:	f7e9 f808 	bl	8000238 <__aeabi_dsub>
 8017228:	a379      	add	r3, pc, #484	@ (adr r3, 8017410 <__ieee754_rem_pio2+0x300>)
 801722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801722e:	e7de      	b.n	80171ee <__ieee754_rem_pio2+0xde>
 8017230:	4b82      	ldr	r3, [pc, #520]	@ (801743c <__ieee754_rem_pio2+0x32c>)
 8017232:	4598      	cmp	r8, r3
 8017234:	f200 80d1 	bhi.w	80173da <__ieee754_rem_pio2+0x2ca>
 8017238:	f000 f966 	bl	8017508 <fabs>
 801723c:	ec57 6b10 	vmov	r6, r7, d0
 8017240:	a375      	add	r3, pc, #468	@ (adr r3, 8017418 <__ieee754_rem_pio2+0x308>)
 8017242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017246:	4630      	mov	r0, r6
 8017248:	4639      	mov	r1, r7
 801724a:	f7e9 f9ad 	bl	80005a8 <__aeabi_dmul>
 801724e:	4b7c      	ldr	r3, [pc, #496]	@ (8017440 <__ieee754_rem_pio2+0x330>)
 8017250:	2200      	movs	r2, #0
 8017252:	f7e8 fff3 	bl	800023c <__adddf3>
 8017256:	f7e9 fc41 	bl	8000adc <__aeabi_d2iz>
 801725a:	4605      	mov	r5, r0
 801725c:	f7e9 f93a 	bl	80004d4 <__aeabi_i2d>
 8017260:	4602      	mov	r2, r0
 8017262:	460b      	mov	r3, r1
 8017264:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017268:	a363      	add	r3, pc, #396	@ (adr r3, 80173f8 <__ieee754_rem_pio2+0x2e8>)
 801726a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801726e:	f7e9 f99b 	bl	80005a8 <__aeabi_dmul>
 8017272:	4602      	mov	r2, r0
 8017274:	460b      	mov	r3, r1
 8017276:	4630      	mov	r0, r6
 8017278:	4639      	mov	r1, r7
 801727a:	f7e8 ffdd 	bl	8000238 <__aeabi_dsub>
 801727e:	a360      	add	r3, pc, #384	@ (adr r3, 8017400 <__ieee754_rem_pio2+0x2f0>)
 8017280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017284:	4682      	mov	sl, r0
 8017286:	468b      	mov	fp, r1
 8017288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801728c:	f7e9 f98c 	bl	80005a8 <__aeabi_dmul>
 8017290:	2d1f      	cmp	r5, #31
 8017292:	4606      	mov	r6, r0
 8017294:	460f      	mov	r7, r1
 8017296:	dc0c      	bgt.n	80172b2 <__ieee754_rem_pio2+0x1a2>
 8017298:	4b6a      	ldr	r3, [pc, #424]	@ (8017444 <__ieee754_rem_pio2+0x334>)
 801729a:	1e6a      	subs	r2, r5, #1
 801729c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80172a0:	4543      	cmp	r3, r8
 80172a2:	d006      	beq.n	80172b2 <__ieee754_rem_pio2+0x1a2>
 80172a4:	4632      	mov	r2, r6
 80172a6:	463b      	mov	r3, r7
 80172a8:	4650      	mov	r0, sl
 80172aa:	4659      	mov	r1, fp
 80172ac:	f7e8 ffc4 	bl	8000238 <__aeabi_dsub>
 80172b0:	e00e      	b.n	80172d0 <__ieee754_rem_pio2+0x1c0>
 80172b2:	463b      	mov	r3, r7
 80172b4:	4632      	mov	r2, r6
 80172b6:	4650      	mov	r0, sl
 80172b8:	4659      	mov	r1, fp
 80172ba:	f7e8 ffbd 	bl	8000238 <__aeabi_dsub>
 80172be:	ea4f 5328 	mov.w	r3, r8, asr #20
 80172c2:	9305      	str	r3, [sp, #20]
 80172c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80172c8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80172cc:	2b10      	cmp	r3, #16
 80172ce:	dc02      	bgt.n	80172d6 <__ieee754_rem_pio2+0x1c6>
 80172d0:	e9c4 0100 	strd	r0, r1, [r4]
 80172d4:	e039      	b.n	801734a <__ieee754_rem_pio2+0x23a>
 80172d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8017408 <__ieee754_rem_pio2+0x2f8>)
 80172d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80172e0:	f7e9 f962 	bl	80005a8 <__aeabi_dmul>
 80172e4:	4606      	mov	r6, r0
 80172e6:	460f      	mov	r7, r1
 80172e8:	4602      	mov	r2, r0
 80172ea:	460b      	mov	r3, r1
 80172ec:	4650      	mov	r0, sl
 80172ee:	4659      	mov	r1, fp
 80172f0:	f7e8 ffa2 	bl	8000238 <__aeabi_dsub>
 80172f4:	4602      	mov	r2, r0
 80172f6:	460b      	mov	r3, r1
 80172f8:	4680      	mov	r8, r0
 80172fa:	4689      	mov	r9, r1
 80172fc:	4650      	mov	r0, sl
 80172fe:	4659      	mov	r1, fp
 8017300:	f7e8 ff9a 	bl	8000238 <__aeabi_dsub>
 8017304:	4632      	mov	r2, r6
 8017306:	463b      	mov	r3, r7
 8017308:	f7e8 ff96 	bl	8000238 <__aeabi_dsub>
 801730c:	a340      	add	r3, pc, #256	@ (adr r3, 8017410 <__ieee754_rem_pio2+0x300>)
 801730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017312:	4606      	mov	r6, r0
 8017314:	460f      	mov	r7, r1
 8017316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801731a:	f7e9 f945 	bl	80005a8 <__aeabi_dmul>
 801731e:	4632      	mov	r2, r6
 8017320:	463b      	mov	r3, r7
 8017322:	f7e8 ff89 	bl	8000238 <__aeabi_dsub>
 8017326:	4602      	mov	r2, r0
 8017328:	460b      	mov	r3, r1
 801732a:	4606      	mov	r6, r0
 801732c:	460f      	mov	r7, r1
 801732e:	4640      	mov	r0, r8
 8017330:	4649      	mov	r1, r9
 8017332:	f7e8 ff81 	bl	8000238 <__aeabi_dsub>
 8017336:	9a05      	ldr	r2, [sp, #20]
 8017338:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801733c:	1ad3      	subs	r3, r2, r3
 801733e:	2b31      	cmp	r3, #49	@ 0x31
 8017340:	dc20      	bgt.n	8017384 <__ieee754_rem_pio2+0x274>
 8017342:	e9c4 0100 	strd	r0, r1, [r4]
 8017346:	46c2      	mov	sl, r8
 8017348:	46cb      	mov	fp, r9
 801734a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801734e:	4650      	mov	r0, sl
 8017350:	4642      	mov	r2, r8
 8017352:	464b      	mov	r3, r9
 8017354:	4659      	mov	r1, fp
 8017356:	f7e8 ff6f 	bl	8000238 <__aeabi_dsub>
 801735a:	463b      	mov	r3, r7
 801735c:	4632      	mov	r2, r6
 801735e:	f7e8 ff6b 	bl	8000238 <__aeabi_dsub>
 8017362:	9b04      	ldr	r3, [sp, #16]
 8017364:	2b00      	cmp	r3, #0
 8017366:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801736a:	f6bf af0e 	bge.w	801718a <__ieee754_rem_pio2+0x7a>
 801736e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8017372:	6063      	str	r3, [r4, #4]
 8017374:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017378:	f8c4 8000 	str.w	r8, [r4]
 801737c:	60a0      	str	r0, [r4, #8]
 801737e:	60e3      	str	r3, [r4, #12]
 8017380:	426d      	negs	r5, r5
 8017382:	e702      	b.n	801718a <__ieee754_rem_pio2+0x7a>
 8017384:	a326      	add	r3, pc, #152	@ (adr r3, 8017420 <__ieee754_rem_pio2+0x310>)
 8017386:	e9d3 2300 	ldrd	r2, r3, [r3]
 801738a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801738e:	f7e9 f90b 	bl	80005a8 <__aeabi_dmul>
 8017392:	4606      	mov	r6, r0
 8017394:	460f      	mov	r7, r1
 8017396:	4602      	mov	r2, r0
 8017398:	460b      	mov	r3, r1
 801739a:	4640      	mov	r0, r8
 801739c:	4649      	mov	r1, r9
 801739e:	f7e8 ff4b 	bl	8000238 <__aeabi_dsub>
 80173a2:	4602      	mov	r2, r0
 80173a4:	460b      	mov	r3, r1
 80173a6:	4682      	mov	sl, r0
 80173a8:	468b      	mov	fp, r1
 80173aa:	4640      	mov	r0, r8
 80173ac:	4649      	mov	r1, r9
 80173ae:	f7e8 ff43 	bl	8000238 <__aeabi_dsub>
 80173b2:	4632      	mov	r2, r6
 80173b4:	463b      	mov	r3, r7
 80173b6:	f7e8 ff3f 	bl	8000238 <__aeabi_dsub>
 80173ba:	a31b      	add	r3, pc, #108	@ (adr r3, 8017428 <__ieee754_rem_pio2+0x318>)
 80173bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c0:	4606      	mov	r6, r0
 80173c2:	460f      	mov	r7, r1
 80173c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80173c8:	f7e9 f8ee 	bl	80005a8 <__aeabi_dmul>
 80173cc:	4632      	mov	r2, r6
 80173ce:	463b      	mov	r3, r7
 80173d0:	f7e8 ff32 	bl	8000238 <__aeabi_dsub>
 80173d4:	4606      	mov	r6, r0
 80173d6:	460f      	mov	r7, r1
 80173d8:	e764      	b.n	80172a4 <__ieee754_rem_pio2+0x194>
 80173da:	4b1b      	ldr	r3, [pc, #108]	@ (8017448 <__ieee754_rem_pio2+0x338>)
 80173dc:	4598      	cmp	r8, r3
 80173de:	d935      	bls.n	801744c <__ieee754_rem_pio2+0x33c>
 80173e0:	4632      	mov	r2, r6
 80173e2:	463b      	mov	r3, r7
 80173e4:	4630      	mov	r0, r6
 80173e6:	4639      	mov	r1, r7
 80173e8:	f7e8 ff26 	bl	8000238 <__aeabi_dsub>
 80173ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80173f0:	e9c4 0100 	strd	r0, r1, [r4]
 80173f4:	e69e      	b.n	8017134 <__ieee754_rem_pio2+0x24>
 80173f6:	bf00      	nop
 80173f8:	54400000 	.word	0x54400000
 80173fc:	3ff921fb 	.word	0x3ff921fb
 8017400:	1a626331 	.word	0x1a626331
 8017404:	3dd0b461 	.word	0x3dd0b461
 8017408:	1a600000 	.word	0x1a600000
 801740c:	3dd0b461 	.word	0x3dd0b461
 8017410:	2e037073 	.word	0x2e037073
 8017414:	3ba3198a 	.word	0x3ba3198a
 8017418:	6dc9c883 	.word	0x6dc9c883
 801741c:	3fe45f30 	.word	0x3fe45f30
 8017420:	2e000000 	.word	0x2e000000
 8017424:	3ba3198a 	.word	0x3ba3198a
 8017428:	252049c1 	.word	0x252049c1
 801742c:	397b839a 	.word	0x397b839a
 8017430:	3fe921fb 	.word	0x3fe921fb
 8017434:	4002d97b 	.word	0x4002d97b
 8017438:	3ff921fb 	.word	0x3ff921fb
 801743c:	413921fb 	.word	0x413921fb
 8017440:	3fe00000 	.word	0x3fe00000
 8017444:	08019d80 	.word	0x08019d80
 8017448:	7fefffff 	.word	0x7fefffff
 801744c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017450:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8017454:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017458:	4630      	mov	r0, r6
 801745a:	460f      	mov	r7, r1
 801745c:	f7e9 fb3e 	bl	8000adc <__aeabi_d2iz>
 8017460:	f7e9 f838 	bl	80004d4 <__aeabi_i2d>
 8017464:	4602      	mov	r2, r0
 8017466:	460b      	mov	r3, r1
 8017468:	4630      	mov	r0, r6
 801746a:	4639      	mov	r1, r7
 801746c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017470:	f7e8 fee2 	bl	8000238 <__aeabi_dsub>
 8017474:	4b22      	ldr	r3, [pc, #136]	@ (8017500 <__ieee754_rem_pio2+0x3f0>)
 8017476:	2200      	movs	r2, #0
 8017478:	f7e9 f896 	bl	80005a8 <__aeabi_dmul>
 801747c:	460f      	mov	r7, r1
 801747e:	4606      	mov	r6, r0
 8017480:	f7e9 fb2c 	bl	8000adc <__aeabi_d2iz>
 8017484:	f7e9 f826 	bl	80004d4 <__aeabi_i2d>
 8017488:	4602      	mov	r2, r0
 801748a:	460b      	mov	r3, r1
 801748c:	4630      	mov	r0, r6
 801748e:	4639      	mov	r1, r7
 8017490:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017494:	f7e8 fed0 	bl	8000238 <__aeabi_dsub>
 8017498:	4b19      	ldr	r3, [pc, #100]	@ (8017500 <__ieee754_rem_pio2+0x3f0>)
 801749a:	2200      	movs	r2, #0
 801749c:	f7e9 f884 	bl	80005a8 <__aeabi_dmul>
 80174a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80174a4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80174a8:	f04f 0803 	mov.w	r8, #3
 80174ac:	2600      	movs	r6, #0
 80174ae:	2700      	movs	r7, #0
 80174b0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80174b4:	4632      	mov	r2, r6
 80174b6:	463b      	mov	r3, r7
 80174b8:	46c2      	mov	sl, r8
 80174ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80174be:	f7e9 fadb 	bl	8000a78 <__aeabi_dcmpeq>
 80174c2:	2800      	cmp	r0, #0
 80174c4:	d1f4      	bne.n	80174b0 <__ieee754_rem_pio2+0x3a0>
 80174c6:	4b0f      	ldr	r3, [pc, #60]	@ (8017504 <__ieee754_rem_pio2+0x3f4>)
 80174c8:	9301      	str	r3, [sp, #4]
 80174ca:	2302      	movs	r3, #2
 80174cc:	9300      	str	r3, [sp, #0]
 80174ce:	462a      	mov	r2, r5
 80174d0:	4653      	mov	r3, sl
 80174d2:	4621      	mov	r1, r4
 80174d4:	a806      	add	r0, sp, #24
 80174d6:	f000 f81f 	bl	8017518 <__kernel_rem_pio2>
 80174da:	9b04      	ldr	r3, [sp, #16]
 80174dc:	2b00      	cmp	r3, #0
 80174de:	4605      	mov	r5, r0
 80174e0:	f6bf ae53 	bge.w	801718a <__ieee754_rem_pio2+0x7a>
 80174e4:	e9d4 2100 	ldrd	r2, r1, [r4]
 80174e8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80174ec:	e9c4 2300 	strd	r2, r3, [r4]
 80174f0:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80174f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80174f8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80174fc:	e740      	b.n	8017380 <__ieee754_rem_pio2+0x270>
 80174fe:	bf00      	nop
 8017500:	41700000 	.word	0x41700000
 8017504:	08019e00 	.word	0x08019e00

08017508 <fabs>:
 8017508:	ec51 0b10 	vmov	r0, r1, d0
 801750c:	4602      	mov	r2, r0
 801750e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017512:	ec43 2b10 	vmov	d0, r2, r3
 8017516:	4770      	bx	lr

08017518 <__kernel_rem_pio2>:
 8017518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801751c:	ed2d 8b02 	vpush	{d8}
 8017520:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8017524:	f112 0f14 	cmn.w	r2, #20
 8017528:	9306      	str	r3, [sp, #24]
 801752a:	9104      	str	r1, [sp, #16]
 801752c:	4bbe      	ldr	r3, [pc, #760]	@ (8017828 <__kernel_rem_pio2+0x310>)
 801752e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8017530:	9008      	str	r0, [sp, #32]
 8017532:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017536:	9300      	str	r3, [sp, #0]
 8017538:	9b06      	ldr	r3, [sp, #24]
 801753a:	f103 33ff 	add.w	r3, r3, #4294967295
 801753e:	bfa8      	it	ge
 8017540:	1ed4      	subge	r4, r2, #3
 8017542:	9305      	str	r3, [sp, #20]
 8017544:	bfb2      	itee	lt
 8017546:	2400      	movlt	r4, #0
 8017548:	2318      	movge	r3, #24
 801754a:	fb94 f4f3 	sdivge	r4, r4, r3
 801754e:	f06f 0317 	mvn.w	r3, #23
 8017552:	fb04 3303 	mla	r3, r4, r3, r3
 8017556:	eb03 0b02 	add.w	fp, r3, r2
 801755a:	9b00      	ldr	r3, [sp, #0]
 801755c:	9a05      	ldr	r2, [sp, #20]
 801755e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8017818 <__kernel_rem_pio2+0x300>
 8017562:	eb03 0802 	add.w	r8, r3, r2
 8017566:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8017568:	1aa7      	subs	r7, r4, r2
 801756a:	ae20      	add	r6, sp, #128	@ 0x80
 801756c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017570:	2500      	movs	r5, #0
 8017572:	4545      	cmp	r5, r8
 8017574:	dd13      	ble.n	801759e <__kernel_rem_pio2+0x86>
 8017576:	9b06      	ldr	r3, [sp, #24]
 8017578:	aa20      	add	r2, sp, #128	@ 0x80
 801757a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801757e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8017582:	f04f 0800 	mov.w	r8, #0
 8017586:	9b00      	ldr	r3, [sp, #0]
 8017588:	4598      	cmp	r8, r3
 801758a:	dc31      	bgt.n	80175f0 <__kernel_rem_pio2+0xd8>
 801758c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8017818 <__kernel_rem_pio2+0x300>
 8017590:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017594:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017598:	462f      	mov	r7, r5
 801759a:	2600      	movs	r6, #0
 801759c:	e01b      	b.n	80175d6 <__kernel_rem_pio2+0xbe>
 801759e:	42ef      	cmn	r7, r5
 80175a0:	d407      	bmi.n	80175b2 <__kernel_rem_pio2+0x9a>
 80175a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80175a6:	f7e8 ff95 	bl	80004d4 <__aeabi_i2d>
 80175aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80175ae:	3501      	adds	r5, #1
 80175b0:	e7df      	b.n	8017572 <__kernel_rem_pio2+0x5a>
 80175b2:	ec51 0b18 	vmov	r0, r1, d8
 80175b6:	e7f8      	b.n	80175aa <__kernel_rem_pio2+0x92>
 80175b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80175bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80175c0:	f7e8 fff2 	bl	80005a8 <__aeabi_dmul>
 80175c4:	4602      	mov	r2, r0
 80175c6:	460b      	mov	r3, r1
 80175c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175cc:	f7e8 fe36 	bl	800023c <__adddf3>
 80175d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80175d4:	3601      	adds	r6, #1
 80175d6:	9b05      	ldr	r3, [sp, #20]
 80175d8:	429e      	cmp	r6, r3
 80175da:	f1a7 0708 	sub.w	r7, r7, #8
 80175de:	ddeb      	ble.n	80175b8 <__kernel_rem_pio2+0xa0>
 80175e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80175e4:	f108 0801 	add.w	r8, r8, #1
 80175e8:	ecaa 7b02 	vstmia	sl!, {d7}
 80175ec:	3508      	adds	r5, #8
 80175ee:	e7ca      	b.n	8017586 <__kernel_rem_pio2+0x6e>
 80175f0:	9b00      	ldr	r3, [sp, #0]
 80175f2:	f8dd 8000 	ldr.w	r8, [sp]
 80175f6:	aa0c      	add	r2, sp, #48	@ 0x30
 80175f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80175fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80175fe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8017600:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017604:	9309      	str	r3, [sp, #36]	@ 0x24
 8017606:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 801760a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801760c:	ab98      	add	r3, sp, #608	@ 0x260
 801760e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017612:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8017616:	ed8d 7b02 	vstr	d7, [sp, #8]
 801761a:	ac0c      	add	r4, sp, #48	@ 0x30
 801761c:	ab70      	add	r3, sp, #448	@ 0x1c0
 801761e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8017622:	46a1      	mov	r9, r4
 8017624:	46c2      	mov	sl, r8
 8017626:	f1ba 0f00 	cmp.w	sl, #0
 801762a:	f1a5 0508 	sub.w	r5, r5, #8
 801762e:	dc77      	bgt.n	8017720 <__kernel_rem_pio2+0x208>
 8017630:	4658      	mov	r0, fp
 8017632:	ed9d 0b02 	vldr	d0, [sp, #8]
 8017636:	f000 fac7 	bl	8017bc8 <scalbn>
 801763a:	ec57 6b10 	vmov	r6, r7, d0
 801763e:	2200      	movs	r2, #0
 8017640:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8017644:	4630      	mov	r0, r6
 8017646:	4639      	mov	r1, r7
 8017648:	f7e8 ffae 	bl	80005a8 <__aeabi_dmul>
 801764c:	ec41 0b10 	vmov	d0, r0, r1
 8017650:	f000 fb3a 	bl	8017cc8 <floor>
 8017654:	4b75      	ldr	r3, [pc, #468]	@ (801782c <__kernel_rem_pio2+0x314>)
 8017656:	ec51 0b10 	vmov	r0, r1, d0
 801765a:	2200      	movs	r2, #0
 801765c:	f7e8 ffa4 	bl	80005a8 <__aeabi_dmul>
 8017660:	4602      	mov	r2, r0
 8017662:	460b      	mov	r3, r1
 8017664:	4630      	mov	r0, r6
 8017666:	4639      	mov	r1, r7
 8017668:	f7e8 fde6 	bl	8000238 <__aeabi_dsub>
 801766c:	460f      	mov	r7, r1
 801766e:	4606      	mov	r6, r0
 8017670:	f7e9 fa34 	bl	8000adc <__aeabi_d2iz>
 8017674:	9002      	str	r0, [sp, #8]
 8017676:	f7e8 ff2d 	bl	80004d4 <__aeabi_i2d>
 801767a:	4602      	mov	r2, r0
 801767c:	460b      	mov	r3, r1
 801767e:	4630      	mov	r0, r6
 8017680:	4639      	mov	r1, r7
 8017682:	f7e8 fdd9 	bl	8000238 <__aeabi_dsub>
 8017686:	f1bb 0f00 	cmp.w	fp, #0
 801768a:	4606      	mov	r6, r0
 801768c:	460f      	mov	r7, r1
 801768e:	dd6c      	ble.n	801776a <__kernel_rem_pio2+0x252>
 8017690:	f108 31ff 	add.w	r1, r8, #4294967295
 8017694:	ab0c      	add	r3, sp, #48	@ 0x30
 8017696:	9d02      	ldr	r5, [sp, #8]
 8017698:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801769c:	f1cb 0018 	rsb	r0, fp, #24
 80176a0:	fa43 f200 	asr.w	r2, r3, r0
 80176a4:	4415      	add	r5, r2
 80176a6:	4082      	lsls	r2, r0
 80176a8:	1a9b      	subs	r3, r3, r2
 80176aa:	aa0c      	add	r2, sp, #48	@ 0x30
 80176ac:	9502      	str	r5, [sp, #8]
 80176ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80176b2:	f1cb 0217 	rsb	r2, fp, #23
 80176b6:	fa43 f902 	asr.w	r9, r3, r2
 80176ba:	f1b9 0f00 	cmp.w	r9, #0
 80176be:	dd64      	ble.n	801778a <__kernel_rem_pio2+0x272>
 80176c0:	9b02      	ldr	r3, [sp, #8]
 80176c2:	2200      	movs	r2, #0
 80176c4:	3301      	adds	r3, #1
 80176c6:	9302      	str	r3, [sp, #8]
 80176c8:	4615      	mov	r5, r2
 80176ca:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80176ce:	4590      	cmp	r8, r2
 80176d0:	f300 80b8 	bgt.w	8017844 <__kernel_rem_pio2+0x32c>
 80176d4:	f1bb 0f00 	cmp.w	fp, #0
 80176d8:	dd07      	ble.n	80176ea <__kernel_rem_pio2+0x1d2>
 80176da:	f1bb 0f01 	cmp.w	fp, #1
 80176de:	f000 80bf 	beq.w	8017860 <__kernel_rem_pio2+0x348>
 80176e2:	f1bb 0f02 	cmp.w	fp, #2
 80176e6:	f000 80c6 	beq.w	8017876 <__kernel_rem_pio2+0x35e>
 80176ea:	f1b9 0f02 	cmp.w	r9, #2
 80176ee:	d14c      	bne.n	801778a <__kernel_rem_pio2+0x272>
 80176f0:	4632      	mov	r2, r6
 80176f2:	463b      	mov	r3, r7
 80176f4:	494e      	ldr	r1, [pc, #312]	@ (8017830 <__kernel_rem_pio2+0x318>)
 80176f6:	2000      	movs	r0, #0
 80176f8:	f7e8 fd9e 	bl	8000238 <__aeabi_dsub>
 80176fc:	4606      	mov	r6, r0
 80176fe:	460f      	mov	r7, r1
 8017700:	2d00      	cmp	r5, #0
 8017702:	d042      	beq.n	801778a <__kernel_rem_pio2+0x272>
 8017704:	4658      	mov	r0, fp
 8017706:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8017820 <__kernel_rem_pio2+0x308>
 801770a:	f000 fa5d 	bl	8017bc8 <scalbn>
 801770e:	4630      	mov	r0, r6
 8017710:	4639      	mov	r1, r7
 8017712:	ec53 2b10 	vmov	r2, r3, d0
 8017716:	f7e8 fd8f 	bl	8000238 <__aeabi_dsub>
 801771a:	4606      	mov	r6, r0
 801771c:	460f      	mov	r7, r1
 801771e:	e034      	b.n	801778a <__kernel_rem_pio2+0x272>
 8017720:	4b44      	ldr	r3, [pc, #272]	@ (8017834 <__kernel_rem_pio2+0x31c>)
 8017722:	2200      	movs	r2, #0
 8017724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017728:	f7e8 ff3e 	bl	80005a8 <__aeabi_dmul>
 801772c:	f7e9 f9d6 	bl	8000adc <__aeabi_d2iz>
 8017730:	f7e8 fed0 	bl	80004d4 <__aeabi_i2d>
 8017734:	4b40      	ldr	r3, [pc, #256]	@ (8017838 <__kernel_rem_pio2+0x320>)
 8017736:	2200      	movs	r2, #0
 8017738:	4606      	mov	r6, r0
 801773a:	460f      	mov	r7, r1
 801773c:	f7e8 ff34 	bl	80005a8 <__aeabi_dmul>
 8017740:	4602      	mov	r2, r0
 8017742:	460b      	mov	r3, r1
 8017744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017748:	f7e8 fd76 	bl	8000238 <__aeabi_dsub>
 801774c:	f7e9 f9c6 	bl	8000adc <__aeabi_d2iz>
 8017750:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017754:	f849 0b04 	str.w	r0, [r9], #4
 8017758:	4639      	mov	r1, r7
 801775a:	4630      	mov	r0, r6
 801775c:	f7e8 fd6e 	bl	800023c <__adddf3>
 8017760:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017768:	e75d      	b.n	8017626 <__kernel_rem_pio2+0x10e>
 801776a:	d107      	bne.n	801777c <__kernel_rem_pio2+0x264>
 801776c:	f108 33ff 	add.w	r3, r8, #4294967295
 8017770:	aa0c      	add	r2, sp, #48	@ 0x30
 8017772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017776:	ea4f 59e3 	mov.w	r9, r3, asr #23
 801777a:	e79e      	b.n	80176ba <__kernel_rem_pio2+0x1a2>
 801777c:	4b2f      	ldr	r3, [pc, #188]	@ (801783c <__kernel_rem_pio2+0x324>)
 801777e:	2200      	movs	r2, #0
 8017780:	f7e9 f998 	bl	8000ab4 <__aeabi_dcmpge>
 8017784:	2800      	cmp	r0, #0
 8017786:	d143      	bne.n	8017810 <__kernel_rem_pio2+0x2f8>
 8017788:	4681      	mov	r9, r0
 801778a:	2200      	movs	r2, #0
 801778c:	2300      	movs	r3, #0
 801778e:	4630      	mov	r0, r6
 8017790:	4639      	mov	r1, r7
 8017792:	f7e9 f971 	bl	8000a78 <__aeabi_dcmpeq>
 8017796:	2800      	cmp	r0, #0
 8017798:	f000 80bf 	beq.w	801791a <__kernel_rem_pio2+0x402>
 801779c:	f108 33ff 	add.w	r3, r8, #4294967295
 80177a0:	2200      	movs	r2, #0
 80177a2:	9900      	ldr	r1, [sp, #0]
 80177a4:	428b      	cmp	r3, r1
 80177a6:	da6e      	bge.n	8017886 <__kernel_rem_pio2+0x36e>
 80177a8:	2a00      	cmp	r2, #0
 80177aa:	f000 8089 	beq.w	80178c0 <__kernel_rem_pio2+0x3a8>
 80177ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80177b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80177b4:	f1ab 0b18 	sub.w	fp, fp, #24
 80177b8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d0f6      	beq.n	80177ae <__kernel_rem_pio2+0x296>
 80177c0:	4658      	mov	r0, fp
 80177c2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8017820 <__kernel_rem_pio2+0x308>
 80177c6:	f000 f9ff 	bl	8017bc8 <scalbn>
 80177ca:	f108 0301 	add.w	r3, r8, #1
 80177ce:	00da      	lsls	r2, r3, #3
 80177d0:	9205      	str	r2, [sp, #20]
 80177d2:	ec55 4b10 	vmov	r4, r5, d0
 80177d6:	aa70      	add	r2, sp, #448	@ 0x1c0
 80177d8:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8017834 <__kernel_rem_pio2+0x31c>
 80177dc:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80177e0:	4646      	mov	r6, r8
 80177e2:	f04f 0a00 	mov.w	sl, #0
 80177e6:	2e00      	cmp	r6, #0
 80177e8:	f280 80cf 	bge.w	801798a <__kernel_rem_pio2+0x472>
 80177ec:	4644      	mov	r4, r8
 80177ee:	2c00      	cmp	r4, #0
 80177f0:	f2c0 80fd 	blt.w	80179ee <__kernel_rem_pio2+0x4d6>
 80177f4:	4b12      	ldr	r3, [pc, #72]	@ (8017840 <__kernel_rem_pio2+0x328>)
 80177f6:	461f      	mov	r7, r3
 80177f8:	ab70      	add	r3, sp, #448	@ 0x1c0
 80177fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80177fe:	9306      	str	r3, [sp, #24]
 8017800:	f04f 0a00 	mov.w	sl, #0
 8017804:	f04f 0b00 	mov.w	fp, #0
 8017808:	2600      	movs	r6, #0
 801780a:	eba8 0504 	sub.w	r5, r8, r4
 801780e:	e0e2      	b.n	80179d6 <__kernel_rem_pio2+0x4be>
 8017810:	f04f 0902 	mov.w	r9, #2
 8017814:	e754      	b.n	80176c0 <__kernel_rem_pio2+0x1a8>
 8017816:	bf00      	nop
	...
 8017824:	3ff00000 	.word	0x3ff00000
 8017828:	08019f48 	.word	0x08019f48
 801782c:	40200000 	.word	0x40200000
 8017830:	3ff00000 	.word	0x3ff00000
 8017834:	3e700000 	.word	0x3e700000
 8017838:	41700000 	.word	0x41700000
 801783c:	3fe00000 	.word	0x3fe00000
 8017840:	08019f08 	.word	0x08019f08
 8017844:	f854 3b04 	ldr.w	r3, [r4], #4
 8017848:	b945      	cbnz	r5, 801785c <__kernel_rem_pio2+0x344>
 801784a:	b123      	cbz	r3, 8017856 <__kernel_rem_pio2+0x33e>
 801784c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8017850:	f844 3c04 	str.w	r3, [r4, #-4]
 8017854:	2301      	movs	r3, #1
 8017856:	3201      	adds	r2, #1
 8017858:	461d      	mov	r5, r3
 801785a:	e738      	b.n	80176ce <__kernel_rem_pio2+0x1b6>
 801785c:	1acb      	subs	r3, r1, r3
 801785e:	e7f7      	b.n	8017850 <__kernel_rem_pio2+0x338>
 8017860:	f108 32ff 	add.w	r2, r8, #4294967295
 8017864:	ab0c      	add	r3, sp, #48	@ 0x30
 8017866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801786a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801786e:	a90c      	add	r1, sp, #48	@ 0x30
 8017870:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8017874:	e739      	b.n	80176ea <__kernel_rem_pio2+0x1d2>
 8017876:	f108 32ff 	add.w	r2, r8, #4294967295
 801787a:	ab0c      	add	r3, sp, #48	@ 0x30
 801787c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017880:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8017884:	e7f3      	b.n	801786e <__kernel_rem_pio2+0x356>
 8017886:	a90c      	add	r1, sp, #48	@ 0x30
 8017888:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801788c:	3b01      	subs	r3, #1
 801788e:	430a      	orrs	r2, r1
 8017890:	e787      	b.n	80177a2 <__kernel_rem_pio2+0x28a>
 8017892:	3401      	adds	r4, #1
 8017894:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8017898:	2a00      	cmp	r2, #0
 801789a:	d0fa      	beq.n	8017892 <__kernel_rem_pio2+0x37a>
 801789c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801789e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80178a2:	eb0d 0503 	add.w	r5, sp, r3
 80178a6:	9b06      	ldr	r3, [sp, #24]
 80178a8:	aa20      	add	r2, sp, #128	@ 0x80
 80178aa:	4443      	add	r3, r8
 80178ac:	f108 0701 	add.w	r7, r8, #1
 80178b0:	3d98      	subs	r5, #152	@ 0x98
 80178b2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80178b6:	4444      	add	r4, r8
 80178b8:	42bc      	cmp	r4, r7
 80178ba:	da04      	bge.n	80178c6 <__kernel_rem_pio2+0x3ae>
 80178bc:	46a0      	mov	r8, r4
 80178be:	e6a2      	b.n	8017606 <__kernel_rem_pio2+0xee>
 80178c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80178c2:	2401      	movs	r4, #1
 80178c4:	e7e6      	b.n	8017894 <__kernel_rem_pio2+0x37c>
 80178c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80178c8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80178cc:	f7e8 fe02 	bl	80004d4 <__aeabi_i2d>
 80178d0:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8017b98 <__kernel_rem_pio2+0x680>
 80178d4:	e8e6 0102 	strd	r0, r1, [r6], #8
 80178d8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80178dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80178e0:	46b2      	mov	sl, r6
 80178e2:	f04f 0800 	mov.w	r8, #0
 80178e6:	9b05      	ldr	r3, [sp, #20]
 80178e8:	4598      	cmp	r8, r3
 80178ea:	dd05      	ble.n	80178f8 <__kernel_rem_pio2+0x3e0>
 80178ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80178f0:	3701      	adds	r7, #1
 80178f2:	eca5 7b02 	vstmia	r5!, {d7}
 80178f6:	e7df      	b.n	80178b8 <__kernel_rem_pio2+0x3a0>
 80178f8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80178fc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8017900:	f7e8 fe52 	bl	80005a8 <__aeabi_dmul>
 8017904:	4602      	mov	r2, r0
 8017906:	460b      	mov	r3, r1
 8017908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801790c:	f7e8 fc96 	bl	800023c <__adddf3>
 8017910:	f108 0801 	add.w	r8, r8, #1
 8017914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017918:	e7e5      	b.n	80178e6 <__kernel_rem_pio2+0x3ce>
 801791a:	f1cb 0000 	rsb	r0, fp, #0
 801791e:	ec47 6b10 	vmov	d0, r6, r7
 8017922:	f000 f951 	bl	8017bc8 <scalbn>
 8017926:	ec55 4b10 	vmov	r4, r5, d0
 801792a:	4b9d      	ldr	r3, [pc, #628]	@ (8017ba0 <__kernel_rem_pio2+0x688>)
 801792c:	2200      	movs	r2, #0
 801792e:	4620      	mov	r0, r4
 8017930:	4629      	mov	r1, r5
 8017932:	f7e9 f8bf 	bl	8000ab4 <__aeabi_dcmpge>
 8017936:	b300      	cbz	r0, 801797a <__kernel_rem_pio2+0x462>
 8017938:	4b9a      	ldr	r3, [pc, #616]	@ (8017ba4 <__kernel_rem_pio2+0x68c>)
 801793a:	2200      	movs	r2, #0
 801793c:	4620      	mov	r0, r4
 801793e:	4629      	mov	r1, r5
 8017940:	f7e8 fe32 	bl	80005a8 <__aeabi_dmul>
 8017944:	f7e9 f8ca 	bl	8000adc <__aeabi_d2iz>
 8017948:	4606      	mov	r6, r0
 801794a:	f7e8 fdc3 	bl	80004d4 <__aeabi_i2d>
 801794e:	4b94      	ldr	r3, [pc, #592]	@ (8017ba0 <__kernel_rem_pio2+0x688>)
 8017950:	2200      	movs	r2, #0
 8017952:	f7e8 fe29 	bl	80005a8 <__aeabi_dmul>
 8017956:	460b      	mov	r3, r1
 8017958:	4602      	mov	r2, r0
 801795a:	4629      	mov	r1, r5
 801795c:	4620      	mov	r0, r4
 801795e:	f7e8 fc6b 	bl	8000238 <__aeabi_dsub>
 8017962:	f7e9 f8bb 	bl	8000adc <__aeabi_d2iz>
 8017966:	ab0c      	add	r3, sp, #48	@ 0x30
 8017968:	f10b 0b18 	add.w	fp, fp, #24
 801796c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8017970:	f108 0801 	add.w	r8, r8, #1
 8017974:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8017978:	e722      	b.n	80177c0 <__kernel_rem_pio2+0x2a8>
 801797a:	4620      	mov	r0, r4
 801797c:	4629      	mov	r1, r5
 801797e:	f7e9 f8ad 	bl	8000adc <__aeabi_d2iz>
 8017982:	ab0c      	add	r3, sp, #48	@ 0x30
 8017984:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8017988:	e71a      	b.n	80177c0 <__kernel_rem_pio2+0x2a8>
 801798a:	ab0c      	add	r3, sp, #48	@ 0x30
 801798c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017990:	f7e8 fda0 	bl	80004d4 <__aeabi_i2d>
 8017994:	4622      	mov	r2, r4
 8017996:	462b      	mov	r3, r5
 8017998:	f7e8 fe06 	bl	80005a8 <__aeabi_dmul>
 801799c:	4652      	mov	r2, sl
 801799e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80179a2:	465b      	mov	r3, fp
 80179a4:	4620      	mov	r0, r4
 80179a6:	4629      	mov	r1, r5
 80179a8:	f7e8 fdfe 	bl	80005a8 <__aeabi_dmul>
 80179ac:	3e01      	subs	r6, #1
 80179ae:	4604      	mov	r4, r0
 80179b0:	460d      	mov	r5, r1
 80179b2:	e718      	b.n	80177e6 <__kernel_rem_pio2+0x2ce>
 80179b4:	9906      	ldr	r1, [sp, #24]
 80179b6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80179ba:	9106      	str	r1, [sp, #24]
 80179bc:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80179c0:	f7e8 fdf2 	bl	80005a8 <__aeabi_dmul>
 80179c4:	4602      	mov	r2, r0
 80179c6:	460b      	mov	r3, r1
 80179c8:	4650      	mov	r0, sl
 80179ca:	4659      	mov	r1, fp
 80179cc:	f7e8 fc36 	bl	800023c <__adddf3>
 80179d0:	3601      	adds	r6, #1
 80179d2:	4682      	mov	sl, r0
 80179d4:	468b      	mov	fp, r1
 80179d6:	9b00      	ldr	r3, [sp, #0]
 80179d8:	429e      	cmp	r6, r3
 80179da:	dc01      	bgt.n	80179e0 <__kernel_rem_pio2+0x4c8>
 80179dc:	42b5      	cmp	r5, r6
 80179de:	dae9      	bge.n	80179b4 <__kernel_rem_pio2+0x49c>
 80179e0:	ab48      	add	r3, sp, #288	@ 0x120
 80179e2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80179e6:	e9c5 ab00 	strd	sl, fp, [r5]
 80179ea:	3c01      	subs	r4, #1
 80179ec:	e6ff      	b.n	80177ee <__kernel_rem_pio2+0x2d6>
 80179ee:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80179f0:	2b02      	cmp	r3, #2
 80179f2:	dc0b      	bgt.n	8017a0c <__kernel_rem_pio2+0x4f4>
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	dc39      	bgt.n	8017a6c <__kernel_rem_pio2+0x554>
 80179f8:	d05d      	beq.n	8017ab6 <__kernel_rem_pio2+0x59e>
 80179fa:	9b02      	ldr	r3, [sp, #8]
 80179fc:	f003 0007 	and.w	r0, r3, #7
 8017a00:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8017a04:	ecbd 8b02 	vpop	{d8}
 8017a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a0c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8017a0e:	2b03      	cmp	r3, #3
 8017a10:	d1f3      	bne.n	80179fa <__kernel_rem_pio2+0x4e2>
 8017a12:	9b05      	ldr	r3, [sp, #20]
 8017a14:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017a18:	eb0d 0403 	add.w	r4, sp, r3
 8017a1c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8017a20:	4625      	mov	r5, r4
 8017a22:	46c2      	mov	sl, r8
 8017a24:	f1ba 0f00 	cmp.w	sl, #0
 8017a28:	f1a5 0508 	sub.w	r5, r5, #8
 8017a2c:	dc6b      	bgt.n	8017b06 <__kernel_rem_pio2+0x5ee>
 8017a2e:	4645      	mov	r5, r8
 8017a30:	2d01      	cmp	r5, #1
 8017a32:	f1a4 0408 	sub.w	r4, r4, #8
 8017a36:	f300 8087 	bgt.w	8017b48 <__kernel_rem_pio2+0x630>
 8017a3a:	9c05      	ldr	r4, [sp, #20]
 8017a3c:	ab48      	add	r3, sp, #288	@ 0x120
 8017a3e:	441c      	add	r4, r3
 8017a40:	2000      	movs	r0, #0
 8017a42:	2100      	movs	r1, #0
 8017a44:	f1b8 0f01 	cmp.w	r8, #1
 8017a48:	f300 809c 	bgt.w	8017b84 <__kernel_rem_pio2+0x66c>
 8017a4c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8017a50:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8017a54:	f1b9 0f00 	cmp.w	r9, #0
 8017a58:	f040 80a6 	bne.w	8017ba8 <__kernel_rem_pio2+0x690>
 8017a5c:	9b04      	ldr	r3, [sp, #16]
 8017a5e:	e9c3 7800 	strd	r7, r8, [r3]
 8017a62:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8017a66:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8017a6a:	e7c6      	b.n	80179fa <__kernel_rem_pio2+0x4e2>
 8017a6c:	9d05      	ldr	r5, [sp, #20]
 8017a6e:	ab48      	add	r3, sp, #288	@ 0x120
 8017a70:	441d      	add	r5, r3
 8017a72:	4644      	mov	r4, r8
 8017a74:	2000      	movs	r0, #0
 8017a76:	2100      	movs	r1, #0
 8017a78:	2c00      	cmp	r4, #0
 8017a7a:	da35      	bge.n	8017ae8 <__kernel_rem_pio2+0x5d0>
 8017a7c:	f1b9 0f00 	cmp.w	r9, #0
 8017a80:	d038      	beq.n	8017af4 <__kernel_rem_pio2+0x5dc>
 8017a82:	4602      	mov	r2, r0
 8017a84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017a88:	9c04      	ldr	r4, [sp, #16]
 8017a8a:	e9c4 2300 	strd	r2, r3, [r4]
 8017a8e:	4602      	mov	r2, r0
 8017a90:	460b      	mov	r3, r1
 8017a92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8017a96:	f7e8 fbcf 	bl	8000238 <__aeabi_dsub>
 8017a9a:	ad4a      	add	r5, sp, #296	@ 0x128
 8017a9c:	2401      	movs	r4, #1
 8017a9e:	45a0      	cmp	r8, r4
 8017aa0:	da2b      	bge.n	8017afa <__kernel_rem_pio2+0x5e2>
 8017aa2:	f1b9 0f00 	cmp.w	r9, #0
 8017aa6:	d002      	beq.n	8017aae <__kernel_rem_pio2+0x596>
 8017aa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017aac:	4619      	mov	r1, r3
 8017aae:	9b04      	ldr	r3, [sp, #16]
 8017ab0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8017ab4:	e7a1      	b.n	80179fa <__kernel_rem_pio2+0x4e2>
 8017ab6:	9c05      	ldr	r4, [sp, #20]
 8017ab8:	ab48      	add	r3, sp, #288	@ 0x120
 8017aba:	441c      	add	r4, r3
 8017abc:	2000      	movs	r0, #0
 8017abe:	2100      	movs	r1, #0
 8017ac0:	f1b8 0f00 	cmp.w	r8, #0
 8017ac4:	da09      	bge.n	8017ada <__kernel_rem_pio2+0x5c2>
 8017ac6:	f1b9 0f00 	cmp.w	r9, #0
 8017aca:	d002      	beq.n	8017ad2 <__kernel_rem_pio2+0x5ba>
 8017acc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017ad0:	4619      	mov	r1, r3
 8017ad2:	9b04      	ldr	r3, [sp, #16]
 8017ad4:	e9c3 0100 	strd	r0, r1, [r3]
 8017ad8:	e78f      	b.n	80179fa <__kernel_rem_pio2+0x4e2>
 8017ada:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017ade:	f7e8 fbad 	bl	800023c <__adddf3>
 8017ae2:	f108 38ff 	add.w	r8, r8, #4294967295
 8017ae6:	e7eb      	b.n	8017ac0 <__kernel_rem_pio2+0x5a8>
 8017ae8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8017aec:	f7e8 fba6 	bl	800023c <__adddf3>
 8017af0:	3c01      	subs	r4, #1
 8017af2:	e7c1      	b.n	8017a78 <__kernel_rem_pio2+0x560>
 8017af4:	4602      	mov	r2, r0
 8017af6:	460b      	mov	r3, r1
 8017af8:	e7c6      	b.n	8017a88 <__kernel_rem_pio2+0x570>
 8017afa:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8017afe:	f7e8 fb9d 	bl	800023c <__adddf3>
 8017b02:	3401      	adds	r4, #1
 8017b04:	e7cb      	b.n	8017a9e <__kernel_rem_pio2+0x586>
 8017b06:	ed95 7b00 	vldr	d7, [r5]
 8017b0a:	ed8d 7b00 	vstr	d7, [sp]
 8017b0e:	ed95 7b02 	vldr	d7, [r5, #8]
 8017b12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b16:	ec53 2b17 	vmov	r2, r3, d7
 8017b1a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017b1e:	f7e8 fb8d 	bl	800023c <__adddf3>
 8017b22:	4602      	mov	r2, r0
 8017b24:	460b      	mov	r3, r1
 8017b26:	4606      	mov	r6, r0
 8017b28:	460f      	mov	r7, r1
 8017b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b2e:	f7e8 fb83 	bl	8000238 <__aeabi_dsub>
 8017b32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017b36:	f7e8 fb81 	bl	800023c <__adddf3>
 8017b3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b3e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8017b42:	e9c5 6700 	strd	r6, r7, [r5]
 8017b46:	e76d      	b.n	8017a24 <__kernel_rem_pio2+0x50c>
 8017b48:	ed94 7b00 	vldr	d7, [r4]
 8017b4c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8017b50:	ec51 0b17 	vmov	r0, r1, d7
 8017b54:	4652      	mov	r2, sl
 8017b56:	465b      	mov	r3, fp
 8017b58:	ed8d 7b00 	vstr	d7, [sp]
 8017b5c:	f7e8 fb6e 	bl	800023c <__adddf3>
 8017b60:	4602      	mov	r2, r0
 8017b62:	460b      	mov	r3, r1
 8017b64:	4606      	mov	r6, r0
 8017b66:	460f      	mov	r7, r1
 8017b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b6c:	f7e8 fb64 	bl	8000238 <__aeabi_dsub>
 8017b70:	4652      	mov	r2, sl
 8017b72:	465b      	mov	r3, fp
 8017b74:	f7e8 fb62 	bl	800023c <__adddf3>
 8017b78:	3d01      	subs	r5, #1
 8017b7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017b7e:	e9c4 6700 	strd	r6, r7, [r4]
 8017b82:	e755      	b.n	8017a30 <__kernel_rem_pio2+0x518>
 8017b84:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8017b88:	f7e8 fb58 	bl	800023c <__adddf3>
 8017b8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b90:	e758      	b.n	8017a44 <__kernel_rem_pio2+0x52c>
 8017b92:	bf00      	nop
 8017b94:	f3af 8000 	nop.w
	...
 8017ba0:	41700000 	.word	0x41700000
 8017ba4:	3e700000 	.word	0x3e700000
 8017ba8:	9b04      	ldr	r3, [sp, #16]
 8017baa:	9a04      	ldr	r2, [sp, #16]
 8017bac:	601f      	str	r7, [r3, #0]
 8017bae:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8017bb2:	605c      	str	r4, [r3, #4]
 8017bb4:	609d      	str	r5, [r3, #8]
 8017bb6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8017bba:	60d3      	str	r3, [r2, #12]
 8017bbc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017bc0:	6110      	str	r0, [r2, #16]
 8017bc2:	6153      	str	r3, [r2, #20]
 8017bc4:	e719      	b.n	80179fa <__kernel_rem_pio2+0x4e2>
 8017bc6:	bf00      	nop

08017bc8 <scalbn>:
 8017bc8:	b570      	push	{r4, r5, r6, lr}
 8017bca:	ec55 4b10 	vmov	r4, r5, d0
 8017bce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8017bd2:	4606      	mov	r6, r0
 8017bd4:	462b      	mov	r3, r5
 8017bd6:	b991      	cbnz	r1, 8017bfe <scalbn+0x36>
 8017bd8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8017bdc:	4323      	orrs	r3, r4
 8017bde:	d03d      	beq.n	8017c5c <scalbn+0x94>
 8017be0:	4b35      	ldr	r3, [pc, #212]	@ (8017cb8 <scalbn+0xf0>)
 8017be2:	4620      	mov	r0, r4
 8017be4:	4629      	mov	r1, r5
 8017be6:	2200      	movs	r2, #0
 8017be8:	f7e8 fcde 	bl	80005a8 <__aeabi_dmul>
 8017bec:	4b33      	ldr	r3, [pc, #204]	@ (8017cbc <scalbn+0xf4>)
 8017bee:	429e      	cmp	r6, r3
 8017bf0:	4604      	mov	r4, r0
 8017bf2:	460d      	mov	r5, r1
 8017bf4:	da0f      	bge.n	8017c16 <scalbn+0x4e>
 8017bf6:	a328      	add	r3, pc, #160	@ (adr r3, 8017c98 <scalbn+0xd0>)
 8017bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bfc:	e01e      	b.n	8017c3c <scalbn+0x74>
 8017bfe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8017c02:	4291      	cmp	r1, r2
 8017c04:	d10b      	bne.n	8017c1e <scalbn+0x56>
 8017c06:	4622      	mov	r2, r4
 8017c08:	4620      	mov	r0, r4
 8017c0a:	4629      	mov	r1, r5
 8017c0c:	f7e8 fb16 	bl	800023c <__adddf3>
 8017c10:	4604      	mov	r4, r0
 8017c12:	460d      	mov	r5, r1
 8017c14:	e022      	b.n	8017c5c <scalbn+0x94>
 8017c16:	460b      	mov	r3, r1
 8017c18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017c1c:	3936      	subs	r1, #54	@ 0x36
 8017c1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8017c22:	4296      	cmp	r6, r2
 8017c24:	dd0d      	ble.n	8017c42 <scalbn+0x7a>
 8017c26:	2d00      	cmp	r5, #0
 8017c28:	a11d      	add	r1, pc, #116	@ (adr r1, 8017ca0 <scalbn+0xd8>)
 8017c2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c2e:	da02      	bge.n	8017c36 <scalbn+0x6e>
 8017c30:	a11d      	add	r1, pc, #116	@ (adr r1, 8017ca8 <scalbn+0xe0>)
 8017c32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c36:	a31a      	add	r3, pc, #104	@ (adr r3, 8017ca0 <scalbn+0xd8>)
 8017c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c3c:	f7e8 fcb4 	bl	80005a8 <__aeabi_dmul>
 8017c40:	e7e6      	b.n	8017c10 <scalbn+0x48>
 8017c42:	1872      	adds	r2, r6, r1
 8017c44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8017c48:	428a      	cmp	r2, r1
 8017c4a:	dcec      	bgt.n	8017c26 <scalbn+0x5e>
 8017c4c:	2a00      	cmp	r2, #0
 8017c4e:	dd08      	ble.n	8017c62 <scalbn+0x9a>
 8017c50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017c54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017c58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017c5c:	ec45 4b10 	vmov	d0, r4, r5
 8017c60:	bd70      	pop	{r4, r5, r6, pc}
 8017c62:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8017c66:	da08      	bge.n	8017c7a <scalbn+0xb2>
 8017c68:	2d00      	cmp	r5, #0
 8017c6a:	a10b      	add	r1, pc, #44	@ (adr r1, 8017c98 <scalbn+0xd0>)
 8017c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c70:	dac1      	bge.n	8017bf6 <scalbn+0x2e>
 8017c72:	a10f      	add	r1, pc, #60	@ (adr r1, 8017cb0 <scalbn+0xe8>)
 8017c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c78:	e7bd      	b.n	8017bf6 <scalbn+0x2e>
 8017c7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8017c7e:	3236      	adds	r2, #54	@ 0x36
 8017c80:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8017c84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017c88:	4620      	mov	r0, r4
 8017c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8017cc0 <scalbn+0xf8>)
 8017c8c:	4629      	mov	r1, r5
 8017c8e:	2200      	movs	r2, #0
 8017c90:	e7d4      	b.n	8017c3c <scalbn+0x74>
 8017c92:	bf00      	nop
 8017c94:	f3af 8000 	nop.w
 8017c98:	c2f8f359 	.word	0xc2f8f359
 8017c9c:	01a56e1f 	.word	0x01a56e1f
 8017ca0:	8800759c 	.word	0x8800759c
 8017ca4:	7e37e43c 	.word	0x7e37e43c
 8017ca8:	8800759c 	.word	0x8800759c
 8017cac:	fe37e43c 	.word	0xfe37e43c
 8017cb0:	c2f8f359 	.word	0xc2f8f359
 8017cb4:	81a56e1f 	.word	0x81a56e1f
 8017cb8:	43500000 	.word	0x43500000
 8017cbc:	ffff3cb0 	.word	0xffff3cb0
 8017cc0:	3c900000 	.word	0x3c900000
 8017cc4:	00000000 	.word	0x00000000

08017cc8 <floor>:
 8017cc8:	ec51 0b10 	vmov	r0, r1, d0
 8017ccc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8017cd8:	2e13      	cmp	r6, #19
 8017cda:	460c      	mov	r4, r1
 8017cdc:	4605      	mov	r5, r0
 8017cde:	4680      	mov	r8, r0
 8017ce0:	dc34      	bgt.n	8017d4c <floor+0x84>
 8017ce2:	2e00      	cmp	r6, #0
 8017ce4:	da17      	bge.n	8017d16 <floor+0x4e>
 8017ce6:	a332      	add	r3, pc, #200	@ (adr r3, 8017db0 <floor+0xe8>)
 8017ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cec:	f7e8 faa6 	bl	800023c <__adddf3>
 8017cf0:	2200      	movs	r2, #0
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	f7e8 fee8 	bl	8000ac8 <__aeabi_dcmpgt>
 8017cf8:	b150      	cbz	r0, 8017d10 <floor+0x48>
 8017cfa:	2c00      	cmp	r4, #0
 8017cfc:	da55      	bge.n	8017daa <floor+0xe2>
 8017cfe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8017d02:	432c      	orrs	r4, r5
 8017d04:	2500      	movs	r5, #0
 8017d06:	42ac      	cmp	r4, r5
 8017d08:	4c2b      	ldr	r4, [pc, #172]	@ (8017db8 <floor+0xf0>)
 8017d0a:	bf08      	it	eq
 8017d0c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8017d10:	4621      	mov	r1, r4
 8017d12:	4628      	mov	r0, r5
 8017d14:	e023      	b.n	8017d5e <floor+0x96>
 8017d16:	4f29      	ldr	r7, [pc, #164]	@ (8017dbc <floor+0xf4>)
 8017d18:	4137      	asrs	r7, r6
 8017d1a:	ea01 0307 	and.w	r3, r1, r7
 8017d1e:	4303      	orrs	r3, r0
 8017d20:	d01d      	beq.n	8017d5e <floor+0x96>
 8017d22:	a323      	add	r3, pc, #140	@ (adr r3, 8017db0 <floor+0xe8>)
 8017d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d28:	f7e8 fa88 	bl	800023c <__adddf3>
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	2300      	movs	r3, #0
 8017d30:	f7e8 feca 	bl	8000ac8 <__aeabi_dcmpgt>
 8017d34:	2800      	cmp	r0, #0
 8017d36:	d0eb      	beq.n	8017d10 <floor+0x48>
 8017d38:	2c00      	cmp	r4, #0
 8017d3a:	bfbe      	ittt	lt
 8017d3c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8017d40:	4133      	asrlt	r3, r6
 8017d42:	18e4      	addlt	r4, r4, r3
 8017d44:	ea24 0407 	bic.w	r4, r4, r7
 8017d48:	2500      	movs	r5, #0
 8017d4a:	e7e1      	b.n	8017d10 <floor+0x48>
 8017d4c:	2e33      	cmp	r6, #51	@ 0x33
 8017d4e:	dd0a      	ble.n	8017d66 <floor+0x9e>
 8017d50:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017d54:	d103      	bne.n	8017d5e <floor+0x96>
 8017d56:	4602      	mov	r2, r0
 8017d58:	460b      	mov	r3, r1
 8017d5a:	f7e8 fa6f 	bl	800023c <__adddf3>
 8017d5e:	ec41 0b10 	vmov	d0, r0, r1
 8017d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d66:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8017d6a:	f04f 37ff 	mov.w	r7, #4294967295
 8017d6e:	40df      	lsrs	r7, r3
 8017d70:	4207      	tst	r7, r0
 8017d72:	d0f4      	beq.n	8017d5e <floor+0x96>
 8017d74:	a30e      	add	r3, pc, #56	@ (adr r3, 8017db0 <floor+0xe8>)
 8017d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d7a:	f7e8 fa5f 	bl	800023c <__adddf3>
 8017d7e:	2200      	movs	r2, #0
 8017d80:	2300      	movs	r3, #0
 8017d82:	f7e8 fea1 	bl	8000ac8 <__aeabi_dcmpgt>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	d0c2      	beq.n	8017d10 <floor+0x48>
 8017d8a:	2c00      	cmp	r4, #0
 8017d8c:	da0a      	bge.n	8017da4 <floor+0xdc>
 8017d8e:	2e14      	cmp	r6, #20
 8017d90:	d101      	bne.n	8017d96 <floor+0xce>
 8017d92:	3401      	adds	r4, #1
 8017d94:	e006      	b.n	8017da4 <floor+0xdc>
 8017d96:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	40b3      	lsls	r3, r6
 8017d9e:	441d      	add	r5, r3
 8017da0:	4545      	cmp	r5, r8
 8017da2:	d3f6      	bcc.n	8017d92 <floor+0xca>
 8017da4:	ea25 0507 	bic.w	r5, r5, r7
 8017da8:	e7b2      	b.n	8017d10 <floor+0x48>
 8017daa:	2500      	movs	r5, #0
 8017dac:	462c      	mov	r4, r5
 8017dae:	e7af      	b.n	8017d10 <floor+0x48>
 8017db0:	8800759c 	.word	0x8800759c
 8017db4:	7e37e43c 	.word	0x7e37e43c
 8017db8:	bff00000 	.word	0xbff00000
 8017dbc:	000fffff 	.word	0x000fffff

08017dc0 <_init>:
 8017dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dc2:	bf00      	nop
 8017dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dc6:	bc08      	pop	{r3}
 8017dc8:	469e      	mov	lr, r3
 8017dca:	4770      	bx	lr

08017dcc <_fini>:
 8017dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017dce:	bf00      	nop
 8017dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017dd2:	bc08      	pop	{r3}
 8017dd4:	469e      	mov	lr, r3
 8017dd6:	4770      	bx	lr
