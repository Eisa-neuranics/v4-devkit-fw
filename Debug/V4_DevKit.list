
V4_DevKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184c8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f00  08018608  08018608  00019608  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a508  0801a508  0001b508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a510  0801a510  0001b510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801a514  0801a514  0001b514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000180  20000008  0801a518  0001c008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000188  0801a698  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001c0  0801a6cd  0001c1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003478  200001d8  0801a6de  0001c1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20003650  0801a6de  0001c650  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001df57  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  0001e000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  0001e000  2**2
                  ALLOC
 14 .MB_MEM2      00001d73  200301e4  0801a6de  0001c1e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00048e33  00000000  00000000  0001df87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a24c  00000000  00000000  00066dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003d60  00000000  00000000  00071008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002f13  00000000  00000000  00074d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00037411  00000000  00000000  00077c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00050f11  00000000  00000000  000af08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00112205  00000000  00000000  000fff9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  002121a2  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00010d2c  00000000  00000000  002121e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007c  00000000  00000000  00222f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	080185f0 	.word	0x080185f0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	080185f0 	.word	0x080185f0

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_d2iz>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ae4:	d215      	bcs.n	8000b12 <__aeabi_d2iz+0x36>
 8000ae6:	d511      	bpl.n	8000b0c <__aeabi_d2iz+0x30>
 8000ae8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af0:	d912      	bls.n	8000b18 <__aeabi_d2iz+0x3c>
 8000af2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000af6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000afa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000afe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	bf18      	it	ne
 8000b08:	4240      	negne	r0, r0
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b16:	d105      	bne.n	8000b24 <__aeabi_d2iz+0x48>
 8000b18:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b22:	4770      	bx	lr
 8000b24:	f04f 0000 	mov.w	r0, #0
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <ADS1293_Init>:
//  DESCRIPTION:
//  Configures the assigned interface to function as a SPI port and
//  initializes it.
//------------------------------------------------------------------------------
void ADS1293_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	ENABLE_RSTB_ADS;			// Reset ADS
 8000bd0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000bd4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000bd8:	619a      	str	r2, [r3, #24]
	HAL_Delay (25);
 8000bda:	2019      	movs	r0, #25
 8000bdc:	f001 ffcc 	bl	8002b78 <HAL_Delay>
	DISABLE_RSTB_ADS;			// Release Reset pin
 8000be0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000be4:	2201      	movs	r2, #1
 8000be6:	619a      	str	r2, [r3, #24]
	HAL_Delay (100);
 8000be8:	2064      	movs	r0, #100	@ 0x64
 8000bea:	f001 ffc5 	bl	8002b78 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_CONFIG_REG			, ADS_STOP );
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f000 f885 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000bf6:	2019      	movs	r0, #25
 8000bf8:	f001 ffbe 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_OSC_CN_REG			, 0x04 );				// Use external crystal and feed the internal oscillator's output to the digital.
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	2012      	movs	r0, #18
 8000c00:	f000 f87e 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c04:	2019      	movs	r0, #25
 8000c06:	f001 ffb7 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH1_CN_REG	, 0x0A );				// CH1 is routed to: N = IN1 , P = IN2
 8000c0a:	210a      	movs	r1, #10
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 f877 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c12:	2019      	movs	r0, #25
 8000c14:	f001 ffb0 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH2_CN_REG	, 0x1C );				// CH1 is routed to: N = IN1 , P = IN2
 8000c18:	211c      	movs	r1, #28
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f000 f870 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c20:	2019      	movs	r0, #25
 8000c22:	f001 ffa9 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_FLEX_CH3_CN_REG	, 0x2E );				// CH3 is routed to: N = IN6 , P = IN5   0x2E	0x35
 8000c26:	212e      	movs	r1, #46	@ 0x2e
 8000c28:	2003      	movs	r0, #3
 8000c2a:	f000 f869 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c2e:	2019      	movs	r0, #25
 8000c30:	f001 ffa2 	bl	8002b78 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_RLD_CN_REG			, 0x06 );				// 0x04: RLD amplifier powered down, 0x03: Right-leg drive output connected to IN3
 8000c34:	2106      	movs	r1, #6
 8000c36:	200c      	movs	r0, #12
 8000c38:	f000 f862 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c3c:	2019      	movs	r0, #25
 8000c3e:	f001 ff9b 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CMDET_EN_REG		, 0x30 );				// 0x04: RLD amplifier powered down
 8000c42:	2130      	movs	r1, #48	@ 0x30
 8000c44:	200a      	movs	r0, #10
 8000c46:	f000 f85b 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c4a:	2019      	movs	r0, #25
 8000c4c:	f001 ff94 	bl	8002b78 <HAL_Delay>

	ADS1293_SPIWriteReg( ADS1293_R2_RATE_REG		, R2_4 );				// Configures the R2 decimation rate as 5 for all channels.
 8000c50:	2101      	movs	r1, #1
 8000c52:	2021      	movs	r0, #33	@ 0x21
 8000c54:	f000 f854 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c58:	2019      	movs	r0, #25
 8000c5a:	f001 ff8d 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE1_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 1. (853 sps, 175 Hz)
 8000c5e:	2102      	movs	r1, #2
 8000c60:	2022      	movs	r0, #34	@ 0x22
 8000c62:	f000 f84d 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c66:	2019      	movs	r0, #25
 8000c68:	f001 ff86 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE2_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	2023      	movs	r0, #35	@ 0x23
 8000c70:	f000 f846 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c74:	2019      	movs	r0, #25
 8000c76:	f001 ff7f 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_R3_RATE3_REG		, R3_6 );				// Configures the R3 decimation rate as 6 for channel 3. (853 sps, 175 Hz)
 8000c7a:	2102      	movs	r1, #2
 8000c7c:	2024      	movs	r0, #36	@ 0x24
 8000c7e:	f000 f83f 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c82:	2019      	movs	r0, #25
 8000c84:	f001 ff78 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_DRDYB_SRC_REG		, 0x08 );				// Data Ready Pin Source CH1 ECG 0x08
 8000c88:	2108      	movs	r1, #8
 8000c8a:	2027      	movs	r0, #39	@ 0x27
 8000c8c:	f000 f838 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c90:	2019      	movs	r0, #25
 8000c92:	f001 ff71 	bl	8002b78 <HAL_Delay>
	ADS1293_SPIWriteReg( ADS1293_CH_CNFG_REG		, 0x70 );				// Channel for Loop Read Back: CH1
 8000c96:	2170      	movs	r1, #112	@ 0x70
 8000c98:	202f      	movs	r0, #47	@ 0x2f
 8000c9a:	f000 f831 	bl	8000d00 <ADS1293_SPIWriteReg>
	HAL_Delay (25);
 8000c9e:	2019      	movs	r0, #25
 8000ca0:	f001 ff6a 	bl	8002b78 <HAL_Delay>
	//ADS1293_SPIWriteReg( ADS1293_DIS_EFILTER_REG	, 0x05 );				// Channel for Loop Read Back: CH1 and CH2
	//HAL_Delay (25);

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <ADS1293_SPIReadReg>:
//  DESCRIPTION:
//  Reads a single configuration register at address "addr" and returns the
//  value read.
//------------------------------------------------------------------------------
uint8_t ADS1293_SPIReadReg(uint8_t addr)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
	TxData[0] = addr | ADS1293_READ_BIT;											// register address
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b0e      	ldr	r3, [pc, #56]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cbc:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00;
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	705a      	strb	r2, [r3, #1]

	ENABLE_CS; 												// CS enable
 8000cc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000cc8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000ccc:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, RxData, 2,100);								// Send it, receive it
 8000cce:	2364      	movs	r3, #100	@ 0x64
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	4a08      	ldr	r2, [pc, #32]	@ (8000cf8 <ADS1293_SPIReadReg+0x50>)
 8000cd6:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <ADS1293_SPIReadReg+0x4c>)
 8000cd8:	4808      	ldr	r0, [pc, #32]	@ (8000cfc <ADS1293_SPIReadReg+0x54>)
 8000cda:	f009 fb1b 	bl	800a314 <HAL_SPI_TransmitReceive>
	DISABLE_CS; 											// CS disable
 8000cde:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	619a      	str	r2, [r3, #24]
#ifdef ADS_DEBUG_EN
	DIAG(">>> Read Reg. -> [ Address= %0X, Value= %0X ]\r\n", addr, RxData[1]);				// Send DBG
	HAL_Delay(50);
#endif

	return RxData[1];
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <ADS1293_SPIReadReg+0x50>)
 8000ce8:	785b      	ldrb	r3, [r3, #1]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200001f4 	.word	0x200001f4
 8000cf8:	20000200 	.word	0x20000200
 8000cfc:	20001724 	.word	0x20001724

08000d00 <ADS1293_SPIWriteReg>:
//
//  DESCRIPTION:
//  Writes "value" to a single configuration register at address "addr".
//------------------------------------------------------------------------------
void ADS1293_SPIWriteReg(uint8_t addr, uint8_t value)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	71fb      	strb	r3, [r7, #7]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	71bb      	strb	r3, [r7, #6]
	TxData[0] = addr & ADS1293_WRITE_BIT;											// register address
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d1a:	701a      	strb	r2, [r3, #0]
	TxData[1] = value;
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	7053      	strb	r3, [r2, #1]

	ENABLE_CS; 												// CS enable
 8000d22:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d26:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d2a:	619a      	str	r2, [r3, #24]
	HAL_SPI_Transmit(&hspi1, TxData, 2,100);						// Send it
 8000d2c:	2364      	movs	r3, #100	@ 0x64
 8000d2e:	2202      	movs	r2, #2
 8000d30:	4905      	ldr	r1, [pc, #20]	@ (8000d48 <ADS1293_SPIWriteReg+0x48>)
 8000d32:	4806      	ldr	r0, [pc, #24]	@ (8000d4c <ADS1293_SPIWriteReg+0x4c>)
 8000d34:	f009 f979 	bl	800a02a <HAL_SPI_Transmit>
	DISABLE_CS; 											// CS disable
 8000d38:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d3c:	2202      	movs	r2, #2
 8000d3e:	619a      	str	r2, [r3, #24]
	#ifdef ADS_DEBUG_EN
		DIAG(">>>Write Reg. -> [ Address= %0X, Value= %0X ]\r\n",addr, value);				// Send DBG
		HAL_Delay(50);
	#endif

}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	200001f4 	.word	0x200001f4
 8000d4c:	20001724 	.word	0x20001724

08000d50 <ADS1293_SPIStreamReadReg>:
//  Data Loop Register read is extended "count+1" times where "count" is number of source bytes
//  enabled in CH_CNFG. Data read are deposited sequentially starting at address "buffer"
//  until "count" bytes have been read.
//------------------------------------------------------------------------------
void ADS1293_SPIStreamReadReg ( uint8_t *buffer, uint8_t count )
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	70fb      	strb	r3, [r7, #3]
	TxData[0] = ADS1293_READ_BIT | ADS1293_DATA_LOOP_REG;											// register address
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d5e:	22d0      	movs	r2, #208	@ 0xd0
 8000d60:	701a      	strb	r2, [r3, #0]
	TxData[1] = 0x00; TxData[2] = 0x00; TxData[3] = 0x00; TxData[4] = 0x00; TxData[5] = 0x00; TxData[6] = 0x00; TxData[7] = 0x00; TxData[8] = 0x00; TxData[9] = 0x00;	// write dummy data to read
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	705a      	strb	r2, [r3, #1]
 8000d68:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	709a      	strb	r2, [r3, #2]
 8000d6e:	4b16      	ldr	r3, [pc, #88]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	70da      	strb	r2, [r3, #3]
 8000d74:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	711a      	strb	r2, [r3, #4]
 8000d7a:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	715a      	strb	r2, [r3, #5]
 8000d80:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	719a      	strb	r2, [r3, #6]
 8000d86:	4b10      	ldr	r3, [pc, #64]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	71da      	strb	r2, [r3, #7]
 8000d8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	721a      	strb	r2, [r3, #8]
 8000d92:	4b0d      	ldr	r3, [pc, #52]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	725a      	strb	r2, [r3, #9]

	ENABLE_CS; 																						// CS enable
 8000d98:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000d9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000da0:	619a      	str	r2, [r3, #24]
	HAL_SPI_TransmitReceive(&hspi1, TxData, (uint8_t *)buffer, ( count + 1 ), 100);					// Send it, receive it
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	3301      	adds	r3, #1
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	2264      	movs	r2, #100	@ 0x64
 8000dac:	9200      	str	r2, [sp, #0]
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	4905      	ldr	r1, [pc, #20]	@ (8000dc8 <ADS1293_SPIStreamReadReg+0x78>)
 8000db2:	4806      	ldr	r0, [pc, #24]	@ (8000dcc <ADS1293_SPIStreamReadReg+0x7c>)
 8000db4:	f009 faae 	bl	800a314 <HAL_SPI_TransmitReceive>
	DISABLE_CS;
 8000db8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	619a      	str	r2, [r3, #24]

	#ifdef ADS_DEBUG_EN
		DIAG(">>> Stream read. -> [ Address= %0X, Value= %0X - %0X - %0X - %0X - %0X - %0X ]\r\n", ADS1293_DATA_LOOP_REG, buffer[0], buffer[1], buffer[2], buffer[3], buffer[4], buffer[6] );				// Send DBG
		HAL_Delay(50);
	#endif
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	200001f4 	.word	0x200001f4
 8000dcc:	20001724 	.word	0x20001724

08000dd0 <AFE_Init>:
 uint8_t SpiTxData[10], Temp_buff_count, Output_buff_count;
 //------------------------------------------------------------------------------------------//
 //                                        Initialisation                                    //
 //------------------------------------------------------------------------------------------//
 void AFE_Init (void)
 {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0


	 // Initialize filters
	 init_combined_filter(&combined_filter, 10.0, 100.0, 50.0);
 8000dd4:	ed9f 2b08 	vldr	d2, [pc, #32]	@ 8000df8 <AFE_Init+0x28>
 8000dd8:	ed9f 1b09 	vldr	d1, [pc, #36]	@ 8000e00 <AFE_Init+0x30>
 8000ddc:	ed9f 0b0a 	vldr	d0, [pc, #40]	@ 8000e08 <AFE_Init+0x38>
 8000de0:	480b      	ldr	r0, [pc, #44]	@ (8000e10 <AFE_Init+0x40>)
 8000de2:	f000 fd91 	bl	8001908 <init_combined_filter>

	 DIAG ("\t\tAFE initialised\r\n");
 8000de6:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <AFE_Init+0x44>)
 8000de8:	f001 ff56 	bl	8002c98 <DIAG>
	 HAL_Delay (10);
 8000dec:	200a      	movs	r0, #10
 8000dee:	f001 fec3 	bl	8002b78 <HAL_Delay>
 }
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	00000000 	.word	0x00000000
 8000dfc:	40490000 	.word	0x40490000
 8000e00:	00000000 	.word	0x00000000
 8000e04:	40590000 	.word	0x40590000
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40240000 	.word	0x40240000
 8000e10:	20000dd8 	.word	0x20000dd8
 8000e14:	08018608 	.word	0x08018608

08000e18 <AFE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void AFE_Control ( void )
 {
 8000e18:	b598      	push	{r3, r4, r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
 	  switch (eAFE_STATE)
 8000e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f0c <AFE_Control+0xf4>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b07      	cmp	r3, #7
 8000e22:	d813      	bhi.n	8000e4c <AFE_Control+0x34>
 8000e24:	a201      	add	r2, pc, #4	@ (adr r2, 8000e2c <AFE_Control+0x14>)
 8000e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e2a:	bf00      	nop
 8000e2c:	08000e55 	.word	0x08000e55
 8000e30:	08000e7b 	.word	0x08000e7b
 8000e34:	08000e87 	.word	0x08000e87
 8000e38:	08000ead 	.word	0x08000ead
 8000e3c:	08000ed1 	.word	0x08000ed1
 8000e40:	08000f25 	.word	0x08000f25
 8000e44:	08001419 	.word	0x08001419
 8000e48:	08001421 	.word	0x08001421
 	  	  default:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE STATE_DEFAULT\r\n");
 		  	  #endif

 	  	    eAFE_STATE = AFE_STATE_RESET;
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <AFE_Control+0xf4>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	701a      	strb	r2, [r3, #0]
 	  		break;
 8000e52:	e2e9      	b.n	8001428 <AFE_Control+0x610>

 	  	  case AFE_STATE_RESET:
 			  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_RESET\r\n");
 			  #endif
 	  		  ENABLE_RSTB_ADS; 											// Pull RESET low
 8000e54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e5c:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(5); 											// Wait for a brief period
 8000e5e:	2005      	movs	r0, #5
 8000e60:	f001 fe8a 	bl	8002b78 <HAL_Delay>
 	  		  DISABLE_RSTB_ADS; 										// Release RESET
 8000e64:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000e68:	2201      	movs	r2, #1
 8000e6a:	619a      	str	r2, [r3, #24]
 	  		  HAL_Delay(25); 											// Wait for a brief period
 8000e6c:	2019      	movs	r0, #25
 8000e6e:	f001 fe83 	bl	8002b78 <HAL_Delay>

 	  	      eAFE_STATE = AFE_STATE_INIT;
 8000e72:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <AFE_Control+0xf4>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000e78:	e2d6      	b.n	8001428 <AFE_Control+0x610>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_INIT:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_INIT\r\n");
 			  #endif
 		  	  ADS1293_Init();
 8000e7a:	f7ff fea7 	bl	8000bcc <ADS1293_Init>

 		  	  eAFE_STATE = AFE_STATE_ID;
 8000e7e:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <AFE_Control+0xf4>)
 8000e80:	2202      	movs	r2, #2
 8000e82:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000e84:	e2d0      	b.n	8001428 <AFE_Control+0x610>
 	  	  case AFE_STATE_ID:
 		  	  #ifdef AFE_DEBUG_EN
 	  		  	  DIAG(">>> AFE_READ_DEVICE_ID\r\n");
 			  #endif

 	  		  u8temp = ADS1293_SPIReadReg(ADS1293_REVID_REG);
 8000e86:	2040      	movs	r0, #64	@ 0x40
 8000e88:	f7ff ff0e 	bl	8000ca8 <ADS1293_SPIReadReg>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4b1f      	ldr	r3, [pc, #124]	@ (8000f10 <AFE_Control+0xf8>)
 8000e92:	701a      	strb	r2, [r3, #0]
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> DEVICE_ID = [%X] \r\n", u8temp );
 	  		  	  HAL_Delay(1000);
        	  #endif

 	  		  if ( u8temp == ADS1293_ID )
 8000e94:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <AFE_Control+0xf8>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d103      	bne.n	8000ea4 <AFE_Control+0x8c>
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_START ;		//ADS_STATE_START ADS_STATE_ID
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <AFE_Control+0xf4>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	701a      	strb	r2, [r3, #0]
 	  		  else
 	  		  {
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 	  		  }

 	  		  break;
 8000ea2:	e2c1      	b.n	8001428 <AFE_Control+0x610>
 	  			  eAFE_STATE= AFE_STATE_ERROR;
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <AFE_Control+0xf4>)
 8000ea6:	2207      	movs	r2, #7
 8000ea8:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000eaa:	e2bd      	b.n	8001428 <AFE_Control+0x610>
 	  	  case AFE_STATE_START:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> AFE_START_CONVERSION\r\n");
 			  #endif

 		  	  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff26 	bl	8000d00 <ADS1293_SPIWriteReg>
 		  	  HAL_Delay(50);
 8000eb4:	2032      	movs	r0, #50	@ 0x32
 8000eb6:	f001 fe5f 	bl	8002b78 <HAL_Delay>
 	  		  ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8000eba:	2101      	movs	r1, #1
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff ff1f 	bl	8000d00 <ADS1293_SPIWriteReg>
 	  		  HAL_Delay(50);
 8000ec2:	2032      	movs	r0, #50	@ 0x32
 8000ec4:	f001 fe58 	bl	8002b78 <HAL_Delay>

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <AFE_Control+0xf4>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000ece:	e2ab      	b.n	8001428 <AFE_Control+0x610>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_READ_DATA:


 	  		  // Check if DRDY pin is triggered, then start reading data.
 	  		  if (ADS.DRDY == true)
 8000ed0:	4b10      	ldr	r3, [pc, #64]	@ (8000f14 <AFE_Control+0xfc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d114      	bne.n	8000f04 <AFE_Control+0xec>
 	  		  {
				 #ifdef AFE_DEBUG_EN
						  DIAG(">>> AFE_READ_DATA\r\n");
				 #endif
				// Each time we sample from AFE, sample forom IMU too
 	  			  tsTimer.bImuFlag = true;
 8000eda:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <AFE_Control+0x100>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	70da      	strb	r2, [r3, #3]

 	  			  ADS.DRDY = false;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <AFE_Control+0xfc>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 	  			  ADS1293_SPIStreamReadReg( SpiRxData, 9 );
 8000ee6:	2109      	movs	r1, #9
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <AFE_Control+0x104>)
 8000eea:	f7ff ff31 	bl	8000d50 <ADS1293_SPIStreamReadReg>

 	  			  // Count SPS
 	  			  AFE.u16SampleCount++;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <AFE_Control+0x108>)
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <AFE_Control+0x108>)
 8000efa:	801a      	strh	r2, [r3, #0]

 	  			  eAFE_STATE = AFE_STATE_PROCESS_DATA;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <AFE_Control+0xf4>)
 8000efe:	2205      	movs	r2, #5
 8000f00:	701a      	strb	r2, [r3, #0]
 	  		  }
 	  		  else
 	  		  {
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 	  		  }
 	  		  break;
 8000f02:	e291      	b.n	8001428 <AFE_Control+0x610>
 				  eAFE_STATE = AFE_STATE_READ_DATA;
 8000f04:	4b01      	ldr	r3, [pc, #4]	@ (8000f0c <AFE_Control+0xf4>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8000f0a:	e28d      	b.n	8001428 <AFE_Control+0x610>
 8000f0c:	2000020a 	.word	0x2000020a
 8000f10:	20000e68 	.word	0x20000e68
 8000f14:	2000020c 	.word	0x2000020c
 8000f18:	20001918 	.word	0x20001918
 8000f1c:	20000e6c 	.word	0x20000e6c
 8000f20:	20001930 	.word	0x20001930
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_PROCESS_DATA:

 	  		  TMR1.Input = (int32_t)( (SpiRxData[1] << 16) | (uint16_t)(SpiRxData[2] << 8) | SpiRxData[3]);
 8000f24:	4bc4      	ldr	r3, [pc, #784]	@ (8001238 <AFE_Control+0x420>)
 8000f26:	785b      	ldrb	r3, [r3, #1]
 8000f28:	041b      	lsls	r3, r3, #16
 8000f2a:	4ac3      	ldr	r2, [pc, #780]	@ (8001238 <AFE_Control+0x420>)
 8000f2c:	7892      	ldrb	r2, [r2, #2]
 8000f2e:	0212      	lsls	r2, r2, #8
 8000f30:	b292      	uxth	r2, r2
 8000f32:	4313      	orrs	r3, r2
 8000f34:	4ac0      	ldr	r2, [pc, #768]	@ (8001238 <AFE_Control+0x420>)
 8000f36:	78d2      	ldrb	r2, [r2, #3]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	4ac0      	ldr	r2, [pc, #768]	@ (800123c <AFE_Control+0x424>)
 8000f3c:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  TMR1.Vin = ( 2.4 * ( ( (2.0 * (double)TMR1.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8000f40:	4bbe      	ldr	r3, [pc, #760]	@ (800123c <AFE_Control+0x424>)
 8000f42:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff fac4 	bl	80004d4 <__aeabi_i2d>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	f7ff f974 	bl	800023c <__adddf3>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	a3b2      	add	r3, pc, #712	@ (adr r3, 8001228 <AFE_Control+0x410>)
 8000f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f62:	f7ff fc4b 	bl	80007fc <__aeabi_ddiv>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 0200 	mov.w	r2, #0
 8000f72:	4bb3      	ldr	r3, [pc, #716]	@ (8001240 <AFE_Control+0x428>)
 8000f74:	f7ff f960 	bl	8000238 <__aeabi_dsub>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	4619      	mov	r1, r3
 8000f80:	a3ab      	add	r3, pc, #684	@ (adr r3, 8001230 <AFE_Control+0x418>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb0f 	bl	80005a8 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	4bab      	ldr	r3, [pc, #684]	@ (8001244 <AFE_Control+0x42c>)
 8000f98:	f7ff fc30 	bl	80007fc <__aeabi_ddiv>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fdc2 	bl	8000b2c <__aeabi_d2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4aa4      	ldr	r2, [pc, #656]	@ (800123c <AFE_Control+0x424>)
 8000fac:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  TMR1.Raw[Temp_buff_count] = (int)(TMR1.Vin * 1000000);
 8000fb0:	4ba2      	ldr	r3, [pc, #648]	@ (800123c <AFE_Control+0x424>)
 8000fb2:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8000fb6:	ed9f 7aa4 	vldr	s14, [pc, #656]	@ 8001248 <AFE_Control+0x430>
 8000fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fbe:	4ba3      	ldr	r3, [pc, #652]	@ (800124c <AFE_Control+0x434>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc8:	ee17 1a90 	vmov	r1, s15
 8000fcc:	4b9b      	ldr	r3, [pc, #620]	@ (800123c <AFE_Control+0x424>)
 8000fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  TMR2.Input = (int32_t)( (SpiRxData[4] << 16) | (uint16_t)(SpiRxData[5] << 8) | SpiRxData[6]);
 8000fd2:	4b99      	ldr	r3, [pc, #612]	@ (8001238 <AFE_Control+0x420>)
 8000fd4:	791b      	ldrb	r3, [r3, #4]
 8000fd6:	041b      	lsls	r3, r3, #16
 8000fd8:	4a97      	ldr	r2, [pc, #604]	@ (8001238 <AFE_Control+0x420>)
 8000fda:	7952      	ldrb	r2, [r2, #5]
 8000fdc:	0212      	lsls	r2, r2, #8
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	4a95      	ldr	r2, [pc, #596]	@ (8001238 <AFE_Control+0x420>)
 8000fe4:	7992      	ldrb	r2, [r2, #6]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	4a99      	ldr	r2, [pc, #612]	@ (8001250 <AFE_Control+0x438>)
 8000fea:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  TMR2.Vin = ( 2.4 * ( ( (2.0 * (double)TMR2.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 8000fee:	4b98      	ldr	r3, [pc, #608]	@ (8001250 <AFE_Control+0x438>)
 8000ff0:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa6d 	bl	80004d4 <__aeabi_i2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	f7ff f91d 	bl	800023c <__adddf3>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	a387      	add	r3, pc, #540	@ (adr r3, 8001228 <AFE_Control+0x410>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fbf4 	bl	80007fc <__aeabi_ddiv>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b87      	ldr	r3, [pc, #540]	@ (8001240 <AFE_Control+0x428>)
 8001022:	f7ff f909 	bl	8000238 <__aeabi_dsub>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	a380      	add	r3, pc, #512	@ (adr r3, 8001230 <AFE_Control+0x418>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	f7ff fab8 	bl	80005a8 <__aeabi_dmul>
 8001038:	4602      	mov	r2, r0
 800103a:	460b      	mov	r3, r1
 800103c:	4610      	mov	r0, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	4b7f      	ldr	r3, [pc, #508]	@ (8001244 <AFE_Control+0x42c>)
 8001046:	f7ff fbd9 	bl	80007fc <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd6b 	bl	8000b2c <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	4a7d      	ldr	r2, [pc, #500]	@ (8001250 <AFE_Control+0x438>)
 800105a:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  TMR2.Raw[Temp_buff_count] = (int)(TMR2.Vin * 1000000);
 800105e:	4b7c      	ldr	r3, [pc, #496]	@ (8001250 <AFE_Control+0x438>)
 8001060:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8001064:	ed9f 7a78 	vldr	s14, [pc, #480]	@ 8001248 <AFE_Control+0x430>
 8001068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800106c:	4b77      	ldr	r3, [pc, #476]	@ (800124c <AFE_Control+0x434>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001076:	ee17 1a90 	vmov	r1, s15
 800107a:	4b75      	ldr	r3, [pc, #468]	@ (8001250 <AFE_Control+0x438>)
 800107c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

 	  		  EMG.Input = (int32_t)( (SpiRxData[7] << 16) | (uint16_t)(SpiRxData[8] << 8) | SpiRxData[9]);
 8001080:	4b6d      	ldr	r3, [pc, #436]	@ (8001238 <AFE_Control+0x420>)
 8001082:	79db      	ldrb	r3, [r3, #7]
 8001084:	041b      	lsls	r3, r3, #16
 8001086:	4a6c      	ldr	r2, [pc, #432]	@ (8001238 <AFE_Control+0x420>)
 8001088:	7a12      	ldrb	r2, [r2, #8]
 800108a:	0212      	lsls	r2, r2, #8
 800108c:	b292      	uxth	r2, r2
 800108e:	4313      	orrs	r3, r2
 8001090:	4a69      	ldr	r2, [pc, #420]	@ (8001238 <AFE_Control+0x420>)
 8001092:	7a52      	ldrb	r2, [r2, #9]
 8001094:	4313      	orrs	r3, r2
 8001096:	4a6f      	ldr	r2, [pc, #444]	@ (8001254 <AFE_Control+0x43c>)
 8001098:	f8c2 3258 	str.w	r3, [r2, #600]	@ 0x258
 	  		  EMG.Vin = ( 2.4 * ( ( (2.0 * (double)EMG.Input ) / (double)ADC_MAX ) - 1.0 ) ) / (double)ADC_GAIN;
 800109c:	4b6d      	ldr	r3, [pc, #436]	@ (8001254 <AFE_Control+0x43c>)
 800109e:	f8d3 3258 	ldr.w	r3, [r3, #600]	@ 0x258
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa16 	bl	80004d4 <__aeabi_i2d>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	f7ff f8c6 	bl	800023c <__adddf3>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4610      	mov	r0, r2
 80010b6:	4619      	mov	r1, r3
 80010b8:	a35b      	add	r3, pc, #364	@ (adr r3, 8001228 <AFE_Control+0x410>)
 80010ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010be:	f7ff fb9d 	bl	80007fc <__aeabi_ddiv>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4610      	mov	r0, r2
 80010c8:	4619      	mov	r1, r3
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <AFE_Control+0x428>)
 80010d0:	f7ff f8b2 	bl	8000238 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	a354      	add	r3, pc, #336	@ (adr r3, 8001230 <AFE_Control+0x418>)
 80010de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e2:	f7ff fa61 	bl	80005a8 <__aeabi_dmul>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b54      	ldr	r3, [pc, #336]	@ (8001244 <AFE_Control+0x42c>)
 80010f4:	f7ff fb82 	bl	80007fc <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4610      	mov	r0, r2
 80010fe:	4619      	mov	r1, r3
 8001100:	f7ff fd14 	bl	8000b2c <__aeabi_d2f>
 8001104:	4603      	mov	r3, r0
 8001106:	4a53      	ldr	r2, [pc, #332]	@ (8001254 <AFE_Control+0x43c>)
 8001108:	f8c2 32f8 	str.w	r3, [r2, #760]	@ 0x2f8
 	  		  EMG.Raw[Temp_buff_count] = (int)(EMG.Vin * 1000000);
 800110c:	4b51      	ldr	r3, [pc, #324]	@ (8001254 <AFE_Control+0x43c>)
 800110e:	edd3 7abe 	vldr	s15, [r3, #760]	@ 0x2f8
 8001112:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001248 <AFE_Control+0x430>
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	4b4c      	ldr	r3, [pc, #304]	@ (800124c <AFE_Control+0x434>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001124:	ee17 1a90 	vmov	r1, s15
 8001128:	4b4a      	ldr	r3, [pc, #296]	@ (8001254 <AFE_Control+0x43c>)
 800112a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
// 	  		  TMR2.Filtered [Temp_buff_count] = apply_combined_filter(&combined_filter, TMR2.Raw[Temp_buff_count]);
// 	  		  // Apply Bandpass filter
// 	  		  EMG.Filtered  [Temp_buff_count] = apply_combined_filter(&combined_filter, EMG.Raw[Temp_buff_count]);


 	  		  TMR1.Filtered [Temp_buff_count] = IIR_AFE ( &TMR1, Temp_buff_count);
 800112e:	4b47      	ldr	r3, [pc, #284]	@ (800124c <AFE_Control+0x434>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4a46      	ldr	r2, [pc, #280]	@ (800124c <AFE_Control+0x434>)
 8001134:	7812      	ldrb	r2, [r2, #0]
 8001136:	4614      	mov	r4, r2
 8001138:	4619      	mov	r1, r3
 800113a:	4840      	ldr	r0, [pc, #256]	@ (800123c <AFE_Control+0x424>)
 800113c:	f000 fd26 	bl	8001b8c <IIR_AFE>
 8001140:	4602      	mov	r2, r0
 8001142:	493e      	ldr	r1, [pc, #248]	@ (800123c <AFE_Control+0x424>)
 8001144:	f104 0318 	add.w	r3, r4, #24
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	605a      	str	r2, [r3, #4]
 	  		  TMR2.Filtered [Temp_buff_count] = IIR_AFE ( &TMR2, Temp_buff_count);
 800114e:	4b3f      	ldr	r3, [pc, #252]	@ (800124c <AFE_Control+0x434>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	4a3e      	ldr	r2, [pc, #248]	@ (800124c <AFE_Control+0x434>)
 8001154:	7812      	ldrb	r2, [r2, #0]
 8001156:	4614      	mov	r4, r2
 8001158:	4619      	mov	r1, r3
 800115a:	483d      	ldr	r0, [pc, #244]	@ (8001250 <AFE_Control+0x438>)
 800115c:	f000 fd16 	bl	8001b8c <IIR_AFE>
 8001160:	4602      	mov	r2, r0
 8001162:	493b      	ldr	r1, [pc, #236]	@ (8001250 <AFE_Control+0x438>)
 8001164:	f104 0318 	add.w	r3, r4, #24
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	605a      	str	r2, [r3, #4]
 	  		  EMG.Filtered  [Temp_buff_count] = IIR_AFE ( &EMG, Temp_buff_count);
 800116e:	4b37      	ldr	r3, [pc, #220]	@ (800124c <AFE_Control+0x434>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	4a36      	ldr	r2, [pc, #216]	@ (800124c <AFE_Control+0x434>)
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4614      	mov	r4, r2
 8001178:	4619      	mov	r1, r3
 800117a:	4836      	ldr	r0, [pc, #216]	@ (8001254 <AFE_Control+0x43c>)
 800117c:	f000 fd06 	bl	8001b8c <IIR_AFE>
 8001180:	4602      	mov	r2, r0
 8001182:	4934      	ldr	r1, [pc, #208]	@ (8001254 <AFE_Control+0x43c>)
 8001184:	f104 0318 	add.w	r3, r4, #24
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	440b      	add	r3, r1
 800118c:	605a      	str	r2, [r3, #4]





 	  		  TMR1.u8TxData[u8TMR1DataLen++] 	= ( (  		  TMR1.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 800118e:	4b2f      	ldr	r3, [pc, #188]	@ (800124c <AFE_Control+0x434>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	4a2a      	ldr	r2, [pc, #168]	@ (800123c <AFE_Control+0x424>)
 8001194:	3318      	adds	r3, #24
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	1218      	asrs	r0, r3, #8
 800119e:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <AFE_Control+0x440>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	b2d1      	uxtb	r1, r2
 80011a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001258 <AFE_Control+0x440>)
 80011a8:	7011      	strb	r1, [r2, #0]
 80011aa:	4619      	mov	r1, r3
 80011ac:	b2c2      	uxtb	r2, r0
 80011ae:	4b23      	ldr	r3, [pc, #140]	@ (800123c <AFE_Control+0x424>)
 80011b0:	440b      	add	r3, r1
 80011b2:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  TMR1.u8TxData[u8TMR1DataLen++] 	= ( (uint8_t) TMR1.Filtered [Temp_buff_count] & 0x00FF );
 80011b6:	4b25      	ldr	r3, [pc, #148]	@ (800124c <AFE_Control+0x434>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4a20      	ldr	r2, [pc, #128]	@ (800123c <AFE_Control+0x424>)
 80011bc:	3318      	adds	r3, #24
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	6858      	ldr	r0, [r3, #4]
 80011c4:	4b24      	ldr	r3, [pc, #144]	@ (8001258 <AFE_Control+0x440>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	1c5a      	adds	r2, r3, #1
 80011ca:	b2d1      	uxtb	r1, r2
 80011cc:	4a22      	ldr	r2, [pc, #136]	@ (8001258 <AFE_Control+0x440>)
 80011ce:	7011      	strb	r1, [r2, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	b2c2      	uxtb	r2, r0
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <AFE_Control+0x424>)
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 	  		  TMR2.u8TxData[u8TMR2DataLen++]   	= ( (  		  TMR2.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 80011dc:	4b1b      	ldr	r3, [pc, #108]	@ (800124c <AFE_Control+0x434>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001250 <AFE_Control+0x438>)
 80011e2:	3318      	adds	r3, #24
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	1218      	asrs	r0, r3, #8
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <AFE_Control+0x444>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	b2d1      	uxtb	r1, r2
 80011f4:	4a19      	ldr	r2, [pc, #100]	@ (800125c <AFE_Control+0x444>)
 80011f6:	7011      	strb	r1, [r2, #0]
 80011f8:	4619      	mov	r1, r3
 80011fa:	b2c2      	uxtb	r2, r0
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <AFE_Control+0x438>)
 80011fe:	440b      	add	r3, r1
 8001200:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  TMR2.u8TxData[u8TMR2DataLen++]   	= ( (uint8_t) TMR2.Filtered [Temp_buff_count] & 0x00FF );
 8001204:	4b11      	ldr	r3, [pc, #68]	@ (800124c <AFE_Control+0x434>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <AFE_Control+0x438>)
 800120a:	3318      	adds	r3, #24
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	4413      	add	r3, r2
 8001210:	6858      	ldr	r0, [r3, #4]
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <AFE_Control+0x444>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	b2d1      	uxtb	r1, r2
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <AFE_Control+0x444>)
 800121c:	7011      	strb	r1, [r2, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	e01e      	b.n	8001260 <AFE_Control+0x448>
 8001222:	bf00      	nop
 8001224:	f3af 8000 	nop.w
 8001228:	00000000 	.word	0x00000000
 800122c:	41686a00 	.word	0x41686a00
 8001230:	33333333 	.word	0x33333333
 8001234:	40033333 	.word	0x40033333
 8001238:	20000e6c 	.word	0x20000e6c
 800123c:	20000210 	.word	0x20000210
 8001240:	3ff00000 	.word	0x3ff00000
 8001244:	400c0000 	.word	0x400c0000
 8001248:	49742400 	.word	0x49742400
 800124c:	20000e76 	.word	0x20000e76
 8001250:	20000514 	.word	0x20000514
 8001254:	20000818 	.word	0x20000818
 8001258:	20000e69 	.word	0x20000e69
 800125c:	20000e6a 	.word	0x20000e6a
 8001260:	b2c2      	uxtb	r2, r0
 8001262:	4b72      	ldr	r3, [pc, #456]	@ (800142c <AFE_Control+0x614>)
 8001264:	440b      	add	r3, r1
 8001266:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 	  		  EMG.u8TxData [u8EMGDataLen++]    	= ( (  		  EMG.Filtered [Temp_buff_count] & 0xFF00 ) >> 8 );
 800126a:	4b71      	ldr	r3, [pc, #452]	@ (8001430 <AFE_Control+0x618>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4a71      	ldr	r2, [pc, #452]	@ (8001434 <AFE_Control+0x61c>)
 8001270:	3318      	adds	r3, #24
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4413      	add	r3, r2
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	1218      	asrs	r0, r3, #8
 800127a:	4b6f      	ldr	r3, [pc, #444]	@ (8001438 <AFE_Control+0x620>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	1c5a      	adds	r2, r3, #1
 8001280:	b2d1      	uxtb	r1, r2
 8001282:	4a6d      	ldr	r2, [pc, #436]	@ (8001438 <AFE_Control+0x620>)
 8001284:	7011      	strb	r1, [r2, #0]
 8001286:	4619      	mov	r1, r3
 8001288:	b2c2      	uxtb	r2, r0
 800128a:	4b6a      	ldr	r3, [pc, #424]	@ (8001434 <AFE_Control+0x61c>)
 800128c:	440b      	add	r3, r1
 800128e:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c
 	  		  EMG.u8TxData [u8EMGDataLen++]    	= ( (uint8_t) EMG.Filtered [Temp_buff_count] & 0x00FF );
 8001292:	4b67      	ldr	r3, [pc, #412]	@ (8001430 <AFE_Control+0x618>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4a67      	ldr	r2, [pc, #412]	@ (8001434 <AFE_Control+0x61c>)
 8001298:	3318      	adds	r3, #24
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	6858      	ldr	r0, [r3, #4]
 80012a0:	4b65      	ldr	r3, [pc, #404]	@ (8001438 <AFE_Control+0x620>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	b2d1      	uxtb	r1, r2
 80012a8:	4a63      	ldr	r2, [pc, #396]	@ (8001438 <AFE_Control+0x620>)
 80012aa:	7011      	strb	r1, [r2, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	b2c2      	uxtb	r2, r0
 80012b0:	4b60      	ldr	r3, [pc, #384]	@ (8001434 <AFE_Control+0x61c>)
 80012b2:	440b      	add	r3, r1
 80012b4:	f883 225c 	strb.w	r2, [r3, #604]	@ 0x25c

 			  #ifdef DATA_DEBUG_EN
 				  if (tsCmd.TMR == true && tsCmd.EMG == true)
 80012b8:	4b60      	ldr	r3, [pc, #384]	@ (800143c <AFE_Control+0x624>)
 80012ba:	7e1b      	ldrb	r3, [r3, #24]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d125      	bne.n	800130c <AFE_Control+0x4f4>
 80012c0:	4b5e      	ldr	r3, [pc, #376]	@ (800143c <AFE_Control+0x624>)
 80012c2:	7edb      	ldrb	r3, [r3, #27]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d121      	bne.n	800130c <AFE_Control+0x4f4>
 				  {
 					 tsDebug.i16TxTMR1 = TMR1.Filtered [Temp_buff_count];
 80012c8:	4b59      	ldr	r3, [pc, #356]	@ (8001430 <AFE_Control+0x618>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	4a5c      	ldr	r2, [pc, #368]	@ (8001440 <AFE_Control+0x628>)
 80012ce:	3318      	adds	r3, #24
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	b21a      	sxth	r2, r3
 80012d8:	4b5a      	ldr	r3, [pc, #360]	@ (8001444 <AFE_Control+0x62c>)
 80012da:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
 					 tsDebug.i16TxTMR2 = TMR2.Filtered [Temp_buff_count];
 80012de:	4b54      	ldr	r3, [pc, #336]	@ (8001430 <AFE_Control+0x618>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	4a52      	ldr	r2, [pc, #328]	@ (800142c <AFE_Control+0x614>)
 80012e4:	3318      	adds	r3, #24
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <AFE_Control+0x62c>)
 80012f0:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
 					 tsDebug.i16TxEMG  = EMG.Filtered  [Temp_buff_count];
 80012f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001430 <AFE_Control+0x618>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	4a4e      	ldr	r2, [pc, #312]	@ (8001434 <AFE_Control+0x61c>)
 80012fa:	3318      	adds	r3, #24
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	b21a      	sxth	r2, r3
 8001304:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <AFE_Control+0x62c>)
 8001306:	f8a3 2264 	strh.w	r2, [r3, #612]	@ 0x264
 800130a:	e03d      	b.n	8001388 <AFE_Control+0x570>
 				  }
 				  else if (tsCmd.TMR == true && tsCmd.EMG == false )
 800130c:	4b4b      	ldr	r3, [pc, #300]	@ (800143c <AFE_Control+0x624>)
 800130e:	7e1b      	ldrb	r3, [r3, #24]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d11e      	bne.n	8001352 <AFE_Control+0x53a>
 8001314:	4b49      	ldr	r3, [pc, #292]	@ (800143c <AFE_Control+0x624>)
 8001316:	7edb      	ldrb	r3, [r3, #27]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d11a      	bne.n	8001352 <AFE_Control+0x53a>
 				  {
  					 tsDebug.i16TxTMR1 = TMR1.Filtered [Temp_buff_count];
 800131c:	4b44      	ldr	r3, [pc, #272]	@ (8001430 <AFE_Control+0x618>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4a47      	ldr	r2, [pc, #284]	@ (8001440 <AFE_Control+0x628>)
 8001322:	3318      	adds	r3, #24
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	b21a      	sxth	r2, r3
 800132c:	4b45      	ldr	r3, [pc, #276]	@ (8001444 <AFE_Control+0x62c>)
 800132e:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
  					 tsDebug.i16TxTMR2 = TMR2.Filtered [Temp_buff_count];
 8001332:	4b3f      	ldr	r3, [pc, #252]	@ (8001430 <AFE_Control+0x618>)
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	4a3d      	ldr	r2, [pc, #244]	@ (800142c <AFE_Control+0x614>)
 8001338:	3318      	adds	r3, #24
 800133a:	009b      	lsls	r3, r3, #2
 800133c:	4413      	add	r3, r2
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	b21a      	sxth	r2, r3
 8001342:	4b40      	ldr	r3, [pc, #256]	@ (8001444 <AFE_Control+0x62c>)
 8001344:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxEMG  = 0x00;
 8001348:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <AFE_Control+0x62c>)
 800134a:	2200      	movs	r2, #0
 800134c:	f8a3 2264 	strh.w	r2, [r3, #612]	@ 0x264
 8001350:	e01a      	b.n	8001388 <AFE_Control+0x570>
 				  }

 				  else if (tsCmd.TMR == false && tsCmd.EMG == true )
 8001352:	4b3a      	ldr	r3, [pc, #232]	@ (800143c <AFE_Control+0x624>)
 8001354:	7e1b      	ldrb	r3, [r3, #24]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d116      	bne.n	8001388 <AFE_Control+0x570>
 800135a:	4b38      	ldr	r3, [pc, #224]	@ (800143c <AFE_Control+0x624>)
 800135c:	7edb      	ldrb	r3, [r3, #27]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d112      	bne.n	8001388 <AFE_Control+0x570>
 				  {
  					 tsDebug.i16TxTMR1 = 0x00;
 8001362:	4b38      	ldr	r3, [pc, #224]	@ (8001444 <AFE_Control+0x62c>)
 8001364:	2200      	movs	r2, #0
 8001366:	f8a3 2260 	strh.w	r2, [r3, #608]	@ 0x260
  					 tsDebug.i16TxTMR2 = 0x00;
 800136a:	4b36      	ldr	r3, [pc, #216]	@ (8001444 <AFE_Control+0x62c>)
 800136c:	2200      	movs	r2, #0
 800136e:	f8a3 2262 	strh.w	r2, [r3, #610]	@ 0x262
  					 tsDebug.i16TxEMG  = EMG.Filtered [Temp_buff_count];
 8001372:	4b2f      	ldr	r3, [pc, #188]	@ (8001430 <AFE_Control+0x618>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	4a2f      	ldr	r2, [pc, #188]	@ (8001434 <AFE_Control+0x61c>)
 8001378:	3318      	adds	r3, #24
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	b21a      	sxth	r2, r3
 8001382:	4b30      	ldr	r3, [pc, #192]	@ (8001444 <AFE_Control+0x62c>)
 8001384:	f8a3 2264 	strh.w	r2, [r3, #612]	@ 0x264
 				  }
 				 tsDebug.bReleaseAFEData= true;
 8001388:	4b2e      	ldr	r3, [pc, #184]	@ (8001444 <AFE_Control+0x62c>)
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2266 	strb.w	r2, [r3, #614]	@ 0x266
 			  #endif


	  		  Temp_buff_count++;		if (Temp_buff_count  ==  Temp_BUF_LEN ) 	{ Temp_buff_count = 0; }
 8001390:	4b27      	ldr	r3, [pc, #156]	@ (8001430 <AFE_Control+0x618>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	3301      	adds	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b25      	ldr	r3, [pc, #148]	@ (8001430 <AFE_Control+0x618>)
 800139a:	701a      	strb	r2, [r3, #0]
 800139c:	4b24      	ldr	r3, [pc, #144]	@ (8001430 <AFE_Control+0x618>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b19      	cmp	r3, #25
 80013a2:	d102      	bne.n	80013aa <AFE_Control+0x592>
 80013a4:	4b22      	ldr	r3, [pc, #136]	@ (8001430 <AFE_Control+0x618>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]

 	  		if ( u8TMR1DataLen >=  BLE_Data_Length )
 80013aa:	4b27      	ldr	r3, [pc, #156]	@ (8001448 <AFE_Control+0x630>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80013b0:	d92e      	bls.n	8001410 <AFE_Control+0x5f8>
 	  		{
 	  			memcpy ( tsStreamAFE.u8TMR1TxCpy, TMR1.u8TxData, 64 );
 80013b2:	2240      	movs	r2, #64	@ 0x40
 80013b4:	4925      	ldr	r1, [pc, #148]	@ (800144c <AFE_Control+0x634>)
 80013b6:	4826      	ldr	r0, [pc, #152]	@ (8001450 <AFE_Control+0x638>)
 80013b8:	f015 f9e9 	bl	801678e <memcpy>
 	  			memcpy ( tsStreamAFE.u8TMR2TxCpy, TMR2.u8TxData, 64 );
 80013bc:	2240      	movs	r2, #64	@ 0x40
 80013be:	4925      	ldr	r1, [pc, #148]	@ (8001454 <AFE_Control+0x63c>)
 80013c0:	4825      	ldr	r0, [pc, #148]	@ (8001458 <AFE_Control+0x640>)
 80013c2:	f015 f9e4 	bl	801678e <memcpy>
 	  			memcpy ( tsStreamAFE.u8EMGTxCpy, EMG.u8TxData, 64 );
 80013c6:	2240      	movs	r2, #64	@ 0x40
 80013c8:	4924      	ldr	r1, [pc, #144]	@ (800145c <AFE_Control+0x644>)
 80013ca:	4825      	ldr	r0, [pc, #148]	@ (8001460 <AFE_Control+0x648>)
 80013cc:	f015 f9df 	bl	801678e <memcpy>


 	  			// Copy TMR data length
 	  			TMR1.u8TxLen = u8TMR1DataLen;
 80013d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001448 <AFE_Control+0x630>)
 80013d2:	781a      	ldrb	r2, [r3, #0]
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <AFE_Control+0x628>)
 80013d6:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
 	  			TMR2.u8TxLen = u8TMR2DataLen;
 80013da:	4b22      	ldr	r3, [pc, #136]	@ (8001464 <AFE_Control+0x64c>)
 80013dc:	781a      	ldrb	r2, [r3, #0]
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <AFE_Control+0x614>)
 80013e0:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
 	  			EMG.u8TxLen = u8EMGDataLen;
 80013e4:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <AFE_Control+0x620>)
 80013e6:	781a      	ldrb	r2, [r3, #0]
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <AFE_Control+0x61c>)
 80013ea:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2

 	  			// Enable BLE data transmission
 	  			tsStreamAFE.bReleaseAfeData = true;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <AFE_Control+0x650>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9
 	  			tsStreamIMU.bReleaseAccelData = true;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <AFE_Control+0x654>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
 	  			u8TMR1DataLen = 0;
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <AFE_Control+0x630>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
 	  			u8TMR2DataLen = 0;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <AFE_Control+0x64c>)
 8001406:	2200      	movs	r2, #0
 8001408:	701a      	strb	r2, [r3, #0]
 	  			u8EMGDataLen = 0;
 800140a:	4b0b      	ldr	r3, [pc, #44]	@ (8001438 <AFE_Control+0x620>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
 	  		}

 	  		  eAFE_STATE = AFE_STATE_READ_DATA;
 8001410:	4b17      	ldr	r3, [pc, #92]	@ (8001470 <AFE_Control+0x658>)
 8001412:	2204      	movs	r2, #4
 8001414:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8001416:	e007      	b.n	8001428 <AFE_Control+0x610>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_IDLE:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_IDLE\r\n");
 			  #endif
 	  		  eAFE_STATE = AFE_STATE_IDLE;
 8001418:	4b15      	ldr	r3, [pc, #84]	@ (8001470 <AFE_Control+0x658>)
 800141a:	2206      	movs	r2, #6
 800141c:	701a      	strb	r2, [r3, #0]
 	  		  break;
 800141e:	e003      	b.n	8001428 <AFE_Control+0x610>
 //-----------------------------------------------------------------------------------------------
 	  	  case AFE_STATE_ERROR:
 			  #ifdef ADS_DEBUG_EN
 	  		  	  DIAG(">>> STATE_ADS_ERROR\r\n");
      	 	  #endif
 	  		  eAFE_STATE = AFE_STATE_RESET;
 8001420:	4b13      	ldr	r3, [pc, #76]	@ (8001470 <AFE_Control+0x658>)
 8001422:	2200      	movs	r2, #0
 8001424:	701a      	strb	r2, [r3, #0]
 	  		  break;
 8001426:	bf00      	nop
 	  	  }
 }
 8001428:	bf00      	nop
 800142a:	bd98      	pop	{r3, r4, r7, pc}
 800142c:	20000514 	.word	0x20000514
 8001430:	20000e76 	.word	0x20000e76
 8001434:	20000818 	.word	0x20000818
 8001438:	20000e6b 	.word	0x20000e6b
 800143c:	20001630 	.word	0x20001630
 8001440:	20000210 	.word	0x20000210
 8001444:	2000131c 	.word	0x2000131c
 8001448:	20000e69 	.word	0x20000e69
 800144c:	2000046c 	.word	0x2000046c
 8001450:	20000c22 	.word	0x20000c22
 8001454:	20000770 	.word	0x20000770
 8001458:	20000c6a 	.word	0x20000c6a
 800145c:	20000a74 	.word	0x20000a74
 8001460:	20000cb2 	.word	0x20000cb2
 8001464:	20000e6a 	.word	0x20000e6a
 8001468:	20000b1c 	.word	0x20000b1c
 800146c:	20001040 	.word	0x20001040
 8001470:	2000020a 	.word	0x2000020a

08001474 <AFE_StreamDataPack>:

 void AFE_StreamDataPack 		( uint8_t *TMR1Data, uint8_t TMR1DataLen,
		  	  	  	  	  	  	  uint8_t *TMR2Data, uint8_t TMR2DataLen,
								  uint8_t *EMGData , uint8_t EMGDataLen,
								  uint8_t *outputString )
 {
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	607a      	str	r2, [r7, #4]
 800147e:	461a      	mov	r2, r3
 8001480:	460b      	mov	r3, r1
 8001482:	72fb      	strb	r3, [r7, #11]
 8001484:	4613      	mov	r3, r2
 8001486:	72bb      	strb	r3, [r7, #10]
 	uint8_t index=0;
 8001488:	2300      	movs	r3, #0
 800148a:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamAFE.u8TxData, 0, sizeof(tsStreamAFE.u8TxData) );
 800148c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001490:	2100      	movs	r1, #0
 8001492:	4875      	ldr	r0, [pc, #468]	@ (8001668 <AFE_StreamDataPack+0x1f4>)
 8001494:	f015 f8ea 	bl	801666c <memset>

//#ifdef IMU_ENABLE
 	outputString [index++] = 'S';
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	75fa      	strb	r2, [r7, #23]
 800149e:	461a      	mov	r2, r3
 80014a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014a2:	4413      	add	r3, r2
 80014a4:	2253      	movs	r2, #83	@ 0x53
 80014a6:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp++;
 80014a8:	4b70      	ldr	r3, [pc, #448]	@ (800166c <AFE_StreamDataPack+0x1f8>)
 80014aa:	795b      	ldrb	r3, [r3, #5]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	b2d1      	uxtb	r1, r2
 80014b0:	4a6e      	ldr	r2, [pc, #440]	@ (800166c <AFE_StreamDataPack+0x1f8>)
 80014b2:	7151      	strb	r1, [r2, #5]
 80014b4:	7dfa      	ldrb	r2, [r7, #23]
 80014b6:	1c51      	adds	r1, r2, #1
 80014b8:	75f9      	strb	r1, [r7, #23]
 80014ba:	4611      	mov	r1, r2
 80014bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014be:	440a      	add	r2, r1
 80014c0:	7013      	strb	r3, [r2, #0]
 	outputString [index++] = ',';
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	75fa      	strb	r2, [r7, #23]
 80014c8:	461a      	mov	r2, r3
 80014ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014cc:	4413      	add	r3, r2
 80014ce:	222c      	movs	r2, #44	@ 0x2c
 80014d0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	1c5a      	adds	r2, r3, #1
 80014d6:	75fa      	strb	r2, [r7, #23]
 80014d8:	461a      	mov	r2, r3
 80014da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014dc:	4413      	add	r3, r2
 80014de:	2243      	movs	r2, #67	@ 0x43
 80014e0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '0';
 80014e2:	7dfb      	ldrb	r3, [r7, #23]
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	75fa      	strb	r2, [r7, #23]
 80014e8:	461a      	mov	r2, r3
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	4413      	add	r3, r2
 80014ee:	2230      	movs	r2, #48	@ 0x30
 80014f0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80014f2:	7dfb      	ldrb	r3, [r7, #23]
 80014f4:	1c5a      	adds	r2, r3, #1
 80014f6:	75fa      	strb	r2, [r7, #23]
 80014f8:	461a      	mov	r2, r3
 80014fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014fc:	4413      	add	r3, r2
 80014fe:	222c      	movs	r2, #44	@ 0x2c
 8001500:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = TMR1DataLen;
 8001502:	7dfb      	ldrb	r3, [r7, #23]
 8001504:	1c5a      	adds	r2, r3, #1
 8001506:	75fa      	strb	r2, [r7, #23]
 8001508:	461a      	mov	r2, r3
 800150a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800150c:	4413      	add	r3, r2
 800150e:	7afa      	ldrb	r2, [r7, #11]
 8001510:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001512:	7dfb      	ldrb	r3, [r7, #23]
 8001514:	1c5a      	adds	r2, r3, #1
 8001516:	75fa      	strb	r2, [r7, #23]
 8001518:	461a      	mov	r2, r3
 800151a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800151c:	4413      	add	r3, r2
 800151e:	222c      	movs	r2, #44	@ 0x2c
 8001520:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, TMR1Data, TMR1DataLen );
 8001522:	7dfb      	ldrb	r3, [r7, #23]
 8001524:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001526:	4413      	add	r3, r2
 8001528:	7afa      	ldrb	r2, [r7, #11]
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	4618      	mov	r0, r3
 800152e:	f015 f92e 	bl	801678e <memcpy>

 	index += TMR1DataLen;
 8001532:	7dfa      	ldrb	r2, [r7, #23]
 8001534:	7afb      	ldrb	r3, [r7, #11]
 8001536:	4413      	add	r3, r2
 8001538:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 800153a:	7dfb      	ldrb	r3, [r7, #23]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	75fa      	strb	r2, [r7, #23]
 8001540:	461a      	mov	r2, r3
 8001542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001544:	4413      	add	r3, r2
 8001546:	222c      	movs	r2, #44	@ 0x2c
 8001548:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 800154a:	7dfb      	ldrb	r3, [r7, #23]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	75fa      	strb	r2, [r7, #23]
 8001550:	461a      	mov	r2, r3
 8001552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001554:	4413      	add	r3, r2
 8001556:	2243      	movs	r2, #67	@ 0x43
 8001558:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '1';
 800155a:	7dfb      	ldrb	r3, [r7, #23]
 800155c:	1c5a      	adds	r2, r3, #1
 800155e:	75fa      	strb	r2, [r7, #23]
 8001560:	461a      	mov	r2, r3
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	4413      	add	r3, r2
 8001566:	2231      	movs	r2, #49	@ 0x31
 8001568:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800156a:	7dfb      	ldrb	r3, [r7, #23]
 800156c:	1c5a      	adds	r2, r3, #1
 800156e:	75fa      	strb	r2, [r7, #23]
 8001570:	461a      	mov	r2, r3
 8001572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001574:	4413      	add	r3, r2
 8001576:	222c      	movs	r2, #44	@ 0x2c
 8001578:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = TMR2DataLen;
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	1c5a      	adds	r2, r3, #1
 800157e:	75fa      	strb	r2, [r7, #23]
 8001580:	461a      	mov	r2, r3
 8001582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001584:	4413      	add	r3, r2
 8001586:	7aba      	ldrb	r2, [r7, #10]
 8001588:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 800158a:	7dfb      	ldrb	r3, [r7, #23]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	75fa      	strb	r2, [r7, #23]
 8001590:	461a      	mov	r2, r3
 8001592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001594:	4413      	add	r3, r2
 8001596:	222c      	movs	r2, #44	@ 0x2c
 8001598:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, TMR2Data, TMR2DataLen );
 800159a:	7dfb      	ldrb	r3, [r7, #23]
 800159c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800159e:	4413      	add	r3, r2
 80015a0:	7aba      	ldrb	r2, [r7, #10]
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f015 f8f2 	bl	801678e <memcpy>

 	index += TMR2DataLen;
 80015aa:	7dfa      	ldrb	r2, [r7, #23]
 80015ac:	7abb      	ldrb	r3, [r7, #10]
 80015ae:	4413      	add	r3, r2
 80015b0:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	1c5a      	adds	r2, r3, #1
 80015b6:	75fa      	strb	r2, [r7, #23]
 80015b8:	461a      	mov	r2, r3
 80015ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015bc:	4413      	add	r3, r2
 80015be:	222c      	movs	r2, #44	@ 0x2c
 80015c0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	1c5a      	adds	r2, r3, #1
 80015c6:	75fa      	strb	r2, [r7, #23]
 80015c8:	461a      	mov	r2, r3
 80015ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015cc:	4413      	add	r3, r2
 80015ce:	2243      	movs	r2, #67	@ 0x43
 80015d0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = '2';
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	75fa      	strb	r2, [r7, #23]
 80015d8:	461a      	mov	r2, r3
 80015da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015dc:	4413      	add	r3, r2
 80015de:	2232      	movs	r2, #50	@ 0x32
 80015e0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80015e2:	7dfb      	ldrb	r3, [r7, #23]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	75fa      	strb	r2, [r7, #23]
 80015e8:	461a      	mov	r2, r3
 80015ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ec:	4413      	add	r3, r2
 80015ee:	222c      	movs	r2, #44	@ 0x2c
 80015f0:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = EMGDataLen;
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	1c5a      	adds	r2, r3, #1
 80015f6:	75fa      	strb	r2, [r7, #23]
 80015f8:	461a      	mov	r2, r3
 80015fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fc:	4413      	add	r3, r2
 80015fe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001602:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001604:	7dfb      	ldrb	r3, [r7, #23]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	75fa      	strb	r2, [r7, #23]
 800160a:	461a      	mov	r2, r3
 800160c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160e:	4413      	add	r3, r2
 8001610:	222c      	movs	r2, #44	@ 0x2c
 8001612:	701a      	strb	r2, [r3, #0]
 	memcpy ( outputString + index, EMGData, EMGDataLen );
 8001614:	7dfb      	ldrb	r3, [r7, #23]
 8001616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001618:	4413      	add	r3, r2
 800161a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800161e:	6a39      	ldr	r1, [r7, #32]
 8001620:	4618      	mov	r0, r3
 8001622:	f015 f8b4 	bl	801678e <memcpy>

 	index += EMGDataLen;
 8001626:	7dfa      	ldrb	r2, [r7, #23]
 8001628:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800162c:	4413      	add	r3, r2
 800162e:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = 'T';
 8001630:	7dfb      	ldrb	r3, [r7, #23]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	75fa      	strb	r2, [r7, #23]
 8001636:	461a      	mov	r2, r3
 8001638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800163a:	4413      	add	r3, r2
 800163c:	2254      	movs	r2, #84	@ 0x54
 800163e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'M';
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	1c5a      	adds	r2, r3, #1
 8001644:	75fa      	strb	r2, [r7, #23]
 8001646:	461a      	mov	r2, r3
 8001648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164a:	4413      	add	r3, r2
 800164c:	224d      	movs	r2, #77	@ 0x4d
 800164e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'M';
 8001650:	7dfb      	ldrb	r3, [r7, #23]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	75fa      	strb	r2, [r7, #23]
 8001656:	461a      	mov	r2, r3
 8001658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800165a:	4413      	add	r3, r2
 800165c:	224d      	movs	r2, #77	@ 0x4d
 800165e:	701a      	strb	r2, [r3, #0]
//	outputString [index++] = ',';
//
//	memcpy ( outputString + index, TMR2Data, TMR2DataLen );
//#endif

 }
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20000b22 	.word	0x20000b22
 800166c:	200019d0 	.word	0x200019d0

08001670 <BLE_Init>:
 uint16_t u16temp;
//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
 void BLE_Init (void)
 {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0

	 tsBle.App.AccelNotification = false;
 8001674:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <BLE_Init+0x28>)
 8001676:	2200      	movs	r2, #0
 8001678:	725a      	strb	r2, [r3, #9]
	 tsBle.App.GyroNotification = false;
 800167a:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <BLE_Init+0x28>)
 800167c:	2200      	movs	r2, #0
 800167e:	729a      	strb	r2, [r3, #10]
	 tsBle.App.AfeNotification = false;
 8001680:	4b05      	ldr	r3, [pc, #20]	@ (8001698 <BLE_Init+0x28>)
 8001682:	2200      	movs	r2, #0
 8001684:	721a      	strb	r2, [r3, #8]

	 DIAG ("\t\tBLE initialised\r\n");
 8001686:	4805      	ldr	r0, [pc, #20]	@ (800169c <BLE_Init+0x2c>)
 8001688:	f001 fb06 	bl	8002c98 <DIAG>
	 HAL_Delay (10);
 800168c:	200a      	movs	r0, #10
 800168e:	f001 fa73 	bl	8002b78 <HAL_Delay>
 }
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200019d0 	.word	0x200019d0
 800169c:	0801861c 	.word	0x0801861c

080016a0 <BLE_Control>:
 //**********************************************************************************************
 //                                        ADS1293 control                                     //
 //**********************************************************************************************
 //**********************************************************************************************
 void BLE_Control ( void )
 {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af04      	add	r7, sp, #16

	 switch( eBLE_STATE )
 80016a6:	4b88      	ldr	r3, [pc, #544]	@ (80018c8 <BLE_Control+0x228>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b0c      	cmp	r3, #12
 80016ac:	f200 8105 	bhi.w	80018ba <BLE_Control+0x21a>
 80016b0:	a201      	add	r2, pc, #4	@ (adr r2, 80016b8 <BLE_Control+0x18>)
 80016b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b6:	bf00      	nop
 80016b8:	080016ed 	.word	0x080016ed
 80016bc:	080016f5 	.word	0x080016f5
 80016c0:	080016fd 	.word	0x080016fd
 80016c4:	08001705 	.word	0x08001705
 80016c8:	0800171f 	.word	0x0800171f
 80016cc:	08001739 	.word	0x08001739
 80016d0:	080017af 	.word	0x080017af
 80016d4:	080017cd 	.word	0x080017cd
 80016d8:	08001827 	.word	0x08001827
 80016dc:	0800184b 	.word	0x0800184b
 80016e0:	08001887 	.word	0x08001887
 80016e4:	080018ab 	.word	0x080018ab
 80016e8:	080018b3 	.word	0x080018b3
	 {
// ---------------------------------------------

	 case BLE_STATE_RESET:

		 eBLE_STATE = BLE_STATE_INIT;
 80016ec:	4b76      	ldr	r3, [pc, #472]	@ (80018c8 <BLE_Control+0x228>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
		 break;
 80016f2:	e0e6      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_INIT:

		 eBLE_STATE = BLE_STATE_ADV;
 80016f4:	4b74      	ldr	r3, [pc, #464]	@ (80018c8 <BLE_Control+0x228>)
 80016f6:	2202      	movs	r2, #2
 80016f8:	701a      	strb	r2, [r3, #0]
		 break;
 80016fa:	e0e2      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_ADV:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80016fc:	4b72      	ldr	r3, [pc, #456]	@ (80018c8 <BLE_Control+0x228>)
 80016fe:	2203      	movs	r2, #3
 8001700:	701a      	strb	r2, [r3, #0]
		 break;
 8001702:	e0de      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_CHECK_CONNECTION:

		 if ( tsBle.Connected )
 8001704:	4b71      	ldr	r3, [pc, #452]	@ (80018cc <BLE_Control+0x22c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <BLE_Control+0x76>
		 {
			 #if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
			 	 //BLE_SVC_L2CAP_Conn_Update(0x00);
			 #endif
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 800170e:	4b6e      	ldr	r3, [pc, #440]	@ (80018c8 <BLE_Control+0x228>)
 8001710:	2205      	movs	r2, #5
 8001712:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
		 }
		 break;
 8001714:	e0d5      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 8001716:	4b6c      	ldr	r3, [pc, #432]	@ (80018c8 <BLE_Control+0x228>)
 8001718:	2203      	movs	r2, #3
 800171a:	701a      	strb	r2, [r3, #0]
		 break;
 800171c:	e0d1      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_CONNECTED:
		 if ( tsBle.Connected )
 800171e:	4b6b      	ldr	r3, [pc, #428]	@ (80018cc <BLE_Control+0x22c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b2db      	uxtb	r3, r3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <BLE_Control+0x90>
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG;
 8001728:	4b67      	ldr	r3, [pc, #412]	@ (80018c8 <BLE_Control+0x228>)
 800172a:	2205      	movs	r2, #5
 800172c:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_ADV;
		 }
		 break;
 800172e:	e0c8      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_ADV;
 8001730:	4b65      	ldr	r3, [pc, #404]	@ (80018c8 <BLE_Control+0x228>)
 8001732:	2202      	movs	r2, #2
 8001734:	701a      	strb	r2, [r3, #0]
		 break;
 8001736:	e0c4      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_SCG:

		 if ( tsBle.App.AfeNotification )
 8001738:	4b64      	ldr	r3, [pc, #400]	@ (80018cc <BLE_Control+0x22c>)
 800173a:	7a1b      	ldrb	r3, [r3, #8]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d032      	beq.n	80017a6 <BLE_Control+0x106>
		 {
			 if ( tsStreamAFE.bReleaseAfeData == true )
 8001740:	4b63      	ldr	r3, [pc, #396]	@ (80018d0 <BLE_Control+0x230>)
 8001742:	f893 32b9 	ldrb.w	r3, [r3, #697]	@ 0x2b9
 8001746:	2b01      	cmp	r3, #1
 8001748:	d129      	bne.n	800179e <BLE_Control+0xfe>
			 {
				 tsStreamAFE.bReleaseAfeData = false;
 800174a:	4b61      	ldr	r3, [pc, #388]	@ (80018d0 <BLE_Control+0x230>)
 800174c:	2200      	movs	r2, #0
 800174e:	f883 22b9 	strb.w	r2, [r3, #697]	@ 0x2b9
				 AFE_StreamDataPack ( tsStreamAFE.u8TMR1TxCpy, TMR1.u8TxLen,
 8001752:	4b60      	ldr	r3, [pc, #384]	@ (80018d4 <BLE_Control+0x234>)
 8001754:	f893 12f2 	ldrb.w	r1, [r3, #754]	@ 0x2f2
 8001758:	4b5f      	ldr	r3, [pc, #380]	@ (80018d8 <BLE_Control+0x238>)
 800175a:	f893 22f2 	ldrb.w	r2, [r3, #754]	@ 0x2f2
 800175e:	4b5f      	ldr	r3, [pc, #380]	@ (80018dc <BLE_Control+0x23c>)
 8001760:	f893 32f2 	ldrb.w	r3, [r3, #754]	@ 0x2f2
 8001764:	485e      	ldr	r0, [pc, #376]	@ (80018e0 <BLE_Control+0x240>)
 8001766:	9002      	str	r0, [sp, #8]
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	4b5e      	ldr	r3, [pc, #376]	@ (80018e4 <BLE_Control+0x244>)
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4613      	mov	r3, r2
 8001770:	4a5d      	ldr	r2, [pc, #372]	@ (80018e8 <BLE_Control+0x248>)
 8001772:	485e      	ldr	r0, [pc, #376]	@ (80018ec <BLE_Control+0x24c>)
 8001774:	f7ff fe7e 	bl	8001474 <AFE_StreamDataPack>
						 	 	 	  tsStreamAFE.u8TMR2TxCpy, TMR2.u8TxLen,
									  tsStreamAFE.u8EMGTxCpy, EMG.u8TxLen,
									  tsStreamAFE.u8TxData );
				 // Reset data length
				 TMR1.u8TxLen = 0;
 8001778:	4b56      	ldr	r3, [pc, #344]	@ (80018d4 <BLE_Control+0x234>)
 800177a:	2200      	movs	r2, #0
 800177c:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 TMR2.u8TxLen = 0;
 8001780:	4b55      	ldr	r3, [pc, #340]	@ (80018d8 <BLE_Control+0x238>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 EMG.u8TxLen = 0;
 8001788:	4b54      	ldr	r3, [pc, #336]	@ (80018dc <BLE_Control+0x23c>)
 800178a:	2200      	movs	r2, #0
 800178c:	f883 22f2 	strb.w	r2, [r3, #754]	@ 0x2f2
				 // Set the task for BLE
				 tsBle.App.AfeSetTask = true;
 8001790:	4b4e      	ldr	r3, [pc, #312]	@ (80018cc <BLE_Control+0x22c>)
 8001792:	2201      	movs	r2, #1
 8001794:	72da      	strb	r2, [r3, #11]

				 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 8001796:	4b4c      	ldr	r3, [pc, #304]	@ (80018c8 <BLE_Control+0x228>)
 8001798:	2206      	movs	r2, #6
 800179a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
		 }
		 break;
 800179c:	e091      	b.n	80018c2 <BLE_Control+0x222>
				 eBLE_STATE = BLE_STATE_XFER_SCG;
 800179e:	4b4a      	ldr	r3, [pc, #296]	@ (80018c8 <BLE_Control+0x228>)
 80017a0:	2205      	movs	r2, #5
 80017a2:	701a      	strb	r2, [r3, #0]
		 break;
 80017a4:	e08d      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 80017a6:	4b48      	ldr	r3, [pc, #288]	@ (80018c8 <BLE_Control+0x228>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	701a      	strb	r2, [r3, #0]
		 break;
 80017ac:	e089      	b.n	80018c2 <BLE_Control+0x222>


	 case BLE_STATE_XFER_SCG_Cmplt:


		 if ( tsBle.AFE_XferComplete )
 80017ae:	4b47      	ldr	r3, [pc, #284]	@ (80018cc <BLE_Control+0x22c>)
 80017b0:	789b      	ldrb	r3, [r3, #2]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <BLE_Control+0x124>
		 {
			 tsBle.AFE_XferComplete = false;
 80017b6:	4b45      	ldr	r3, [pc, #276]	@ (80018cc <BLE_Control+0x22c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	709a      	strb	r2, [r3, #2]

			 // By default the next step is waiting another SCG/MCG data, but if IMU is enabled, so ACCEL would be the next step.
			 eBLE_STATE = BLE_STATE_IDLE;
 80017bc:	4b42      	ldr	r3, [pc, #264]	@ (80018c8 <BLE_Control+0x228>)
 80017be:	220b      	movs	r2, #11
 80017c0:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
		 }
		 break;
 80017c2:	e07e      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_SCG_Cmplt;
 80017c4:	4b40      	ldr	r3, [pc, #256]	@ (80018c8 <BLE_Control+0x228>)
 80017c6:	2206      	movs	r2, #6
 80017c8:	701a      	strb	r2, [r3, #0]
		 break;
 80017ca:	e07a      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL:

		 if ( tsBle.App.AccelNotification )
 80017cc:	4b3f      	ldr	r3, [pc, #252]	@ (80018cc <BLE_Control+0x22c>)
 80017ce:	7a5b      	ldrb	r3, [r3, #9]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d024      	beq.n	800181e <BLE_Control+0x17e>
		 {
			 if ( tsStreamIMU.bReleaseAccelData == true )
 80017d4:	4b46      	ldr	r3, [pc, #280]	@ (80018f0 <BLE_Control+0x250>)
 80017d6:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d11b      	bne.n	8001816 <BLE_Control+0x176>
			 {
				 tsStreamIMU.bReleaseAccelData = false;
 80017de:	4b44      	ldr	r3, [pc, #272]	@ (80018f0 <BLE_Control+0x250>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
				 IMU_StreamDataPack ( Accelerometer, IMU.u8AxTxData, IMU.u8AyTxData, IMU.u8AzTxData, tsStreamIMU.u8TxData );
 80017e6:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <BLE_Control+0x254>)
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	4b43      	ldr	r3, [pc, #268]	@ (80018f8 <BLE_Control+0x258>)
 80017ec:	4a43      	ldr	r2, [pc, #268]	@ (80018fc <BLE_Control+0x25c>)
 80017ee:	4944      	ldr	r1, [pc, #272]	@ (8001900 <BLE_Control+0x260>)
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 fb95 	bl	8001f20 <IMU_StreamDataPack>
				 //Reset data length
				 IMU.u8AxTxLen = 0;
 80017f6:	4b43      	ldr	r3, [pc, #268]	@ (8001904 <BLE_Control+0x264>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	731a      	strb	r2, [r3, #12]
				 IMU.u8AyTxLen = 0;
 80017fc:	4b41      	ldr	r3, [pc, #260]	@ (8001904 <BLE_Control+0x264>)
 80017fe:	2200      	movs	r2, #0
 8001800:	735a      	strb	r2, [r3, #13]
				 IMU.u8AzTxLen = 0;
 8001802:	4b40      	ldr	r3, [pc, #256]	@ (8001904 <BLE_Control+0x264>)
 8001804:	2200      	movs	r2, #0
 8001806:	739a      	strb	r2, [r3, #14]
				 // Set the task for BLE
				 tsBle.App.AccelSetTask= true;
 8001808:	4b30      	ldr	r3, [pc, #192]	@ (80018cc <BLE_Control+0x22c>)
 800180a:	2201      	movs	r2, #1
 800180c:	731a      	strb	r2, [r3, #12]

				 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 800180e:	4b2e      	ldr	r3, [pc, #184]	@ (80018c8 <BLE_Control+0x228>)
 8001810:	2208      	movs	r2, #8
 8001812:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_IDLE;
		 }
		 break;
 8001814:	e055      	b.n	80018c2 <BLE_Control+0x222>
				 eBLE_STATE = BLE_STATE_XFER_ACCEL;
 8001816:	4b2c      	ldr	r3, [pc, #176]	@ (80018c8 <BLE_Control+0x228>)
 8001818:	2207      	movs	r2, #7
 800181a:	701a      	strb	r2, [r3, #0]
		 break;
 800181c:	e051      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_IDLE;
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <BLE_Control+0x228>)
 8001820:	220b      	movs	r2, #11
 8001822:	701a      	strb	r2, [r3, #0]
		 break;
 8001824:	e04d      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_ACCEL_Cmplt:

		 if ( tsBle.ACCEL_XferComplete )
 8001826:	4b29      	ldr	r3, [pc, #164]	@ (80018cc <BLE_Control+0x22c>)
 8001828:	78db      	ldrb	r3, [r3, #3]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d009      	beq.n	8001842 <BLE_Control+0x1a2>
		 {
			 tsBle.ACCEL_XferComplete = false;
 800182e:	4b27      	ldr	r3, [pc, #156]	@ (80018cc <BLE_Control+0x22c>)
 8001830:	2200      	movs	r2, #0
 8001832:	70da      	strb	r2, [r3, #3]

			 eBLE_STATE = BLE_STATE_IDLE;
 8001834:	4b24      	ldr	r3, [pc, #144]	@ (80018c8 <BLE_Control+0x228>)
 8001836:	220b      	movs	r2, #11
 8001838:	701a      	strb	r2, [r3, #0]
			 #ifdef GYRO_ENABLE
			 	 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <BLE_Control+0x228>)
 800183c:	2209      	movs	r2, #9
 800183e:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
		 }
		 break;
 8001840:	e03f      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_ACCEL_Cmplt;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <BLE_Control+0x228>)
 8001844:	2208      	movs	r2, #8
 8001846:	701a      	strb	r2, [r3, #0]
		 break;
 8001848:	e03b      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO:

		 tsStreamIMU.bReleaseGyroData = true;
 800184a:	4b29      	ldr	r3, [pc, #164]	@ (80018f0 <BLE_Control+0x250>)
 800184c:	2201      	movs	r2, #1
 800184e:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
		 if ( tsStreamIMU.bReleaseGyroData == true )
 8001852:	4b27      	ldr	r3, [pc, #156]	@ (80018f0 <BLE_Control+0x250>)
 8001854:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8001858:	2b01      	cmp	r3, #1
 800185a:	d110      	bne.n	800187e <BLE_Control+0x1de>
		 {
			 // Pack all the data
			 	IMU.u8GxTxLen = 0;
 800185c:	4b29      	ldr	r3, [pc, #164]	@ (8001904 <BLE_Control+0x264>)
 800185e:	2200      	movs	r2, #0
 8001860:	73da      	strb	r2, [r3, #15]
			 	IMU.u8GyTxLen = 0;
 8001862:	4b28      	ldr	r3, [pc, #160]	@ (8001904 <BLE_Control+0x264>)
 8001864:	2200      	movs	r2, #0
 8001866:	741a      	strb	r2, [r3, #16]
			 	IMU.u8GzTxLen = 0;
 8001868:	4b26      	ldr	r3, [pc, #152]	@ (8001904 <BLE_Control+0x264>)
 800186a:	2200      	movs	r2, #0
 800186c:	745a      	strb	r2, [r3, #17]

			 tsStreamIMU.bReleaseGyroData = false;
 800186e:	4b20      	ldr	r3, [pc, #128]	@ (80018f0 <BLE_Control+0x250>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
			 eBLE_STATE = BLE_STATE_XFER_GYRO_Cmplt;
 8001876:	4b14      	ldr	r3, [pc, #80]	@ (80018c8 <BLE_Control+0x228>)
 8001878:	220a      	movs	r2, #10
 800187a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 800187c:	e021      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 800187e:	4b12      	ldr	r3, [pc, #72]	@ (80018c8 <BLE_Control+0x228>)
 8001880:	2209      	movs	r2, #9
 8001882:	701a      	strb	r2, [r3, #0]
		 break;
 8001884:	e01d      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_XFER_GYRO_Cmplt:

		 tsBle.GYRO_XferComplete = true;
 8001886:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <BLE_Control+0x22c>)
 8001888:	2201      	movs	r2, #1
 800188a:	711a      	strb	r2, [r3, #4]
		 if ( tsBle.GYRO_XferComplete )
 800188c:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <BLE_Control+0x22c>)
 800188e:	791b      	ldrb	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d006      	beq.n	80018a2 <BLE_Control+0x202>
		 {
			 tsBle.GYRO_XferComplete = false;
 8001894:	4b0d      	ldr	r3, [pc, #52]	@ (80018cc <BLE_Control+0x22c>)
 8001896:	2200      	movs	r2, #0
 8001898:	711a      	strb	r2, [r3, #4]
			 eBLE_STATE = BLE_STATE_IDLE;
 800189a:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <BLE_Control+0x228>)
 800189c:	220b      	movs	r2, #11
 800189e:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
		 }
		 break;
 80018a0:	e00f      	b.n	80018c2 <BLE_Control+0x222>
			 eBLE_STATE = BLE_STATE_XFER_GYRO;
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <BLE_Control+0x228>)
 80018a4:	2209      	movs	r2, #9
 80018a6:	701a      	strb	r2, [r3, #0]
		 break;
 80018a8:	e00b      	b.n	80018c2 <BLE_Control+0x222>
// ---------------------------------------------

	 case BLE_STATE_IDLE:

		 eBLE_STATE = BLE_STATE_CHECK_CONNECTION;
 80018aa:	4b07      	ldr	r3, [pc, #28]	@ (80018c8 <BLE_Control+0x228>)
 80018ac:	2203      	movs	r2, #3
 80018ae:	701a      	strb	r2, [r3, #0]
		 break;
 80018b0:	e007      	b.n	80018c2 <BLE_Control+0x222>

	 case BLE_STATE_DISCONNECTED:

		 eBLE_STATE = BLE_STATE_ADV;
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <BLE_Control+0x228>)
 80018b4:	2202      	movs	r2, #2
 80018b6:	701a      	strb	r2, [r3, #0]
		 break;
 80018b8:	e003      	b.n	80018c2 <BLE_Control+0x222>

// Unknown state--------------------------------

	 default:

		 eBLE_STATE = BLE_STATE_RESET;
 80018ba:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <BLE_Control+0x228>)
 80018bc:	2200      	movs	r2, #0
 80018be:	701a      	strb	r2, [r3, #0]
		 break;
 80018c0:	bf00      	nop

	 }
// ---------------------------------------------

 }
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000e77 	.word	0x20000e77
 80018cc:	200019d0 	.word	0x200019d0
 80018d0:	20000b1c 	.word	0x20000b1c
 80018d4:	20000210 	.word	0x20000210
 80018d8:	20000514 	.word	0x20000514
 80018dc:	20000818 	.word	0x20000818
 80018e0:	20000b22 	.word	0x20000b22
 80018e4:	20000cb2 	.word	0x20000cb2
 80018e8:	20000c6a 	.word	0x20000c6a
 80018ec:	20000c22 	.word	0x20000c22
 80018f0:	20001040 	.word	0x20001040
 80018f4:	20001046 	.word	0x20001046
 80018f8:	20000f1a 	.word	0x20000f1a
 80018fc:	20000ed2 	.word	0x20000ed2
 8001900:	20000e8a 	.word	0x20000e8a
 8001904:	20000e78 	.word	0x20000e78

08001908 <init_combined_filter>:
//--------------------------------------------------------------------------------------------


// Function to initialize Bandpass Filter
void init_combined_filter( Filter *filter, double low_fc, double high_fc, double notch_fc )
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b098      	sub	sp, #96	@ 0x60
 800190c:	af00      	add	r7, sp, #0
 800190e:	61f8      	str	r0, [r7, #28]
 8001910:	ed87 0b04 	vstr	d0, [r7, #16]
 8001914:	ed87 1b02 	vstr	d1, [r7, #8]
 8001918:	ed87 2b00 	vstr	d2, [r7]
    // Bandpass Filter initialization
    double nyquist = SAMPLE_RATE / 2.0;
 800191c:	f04f 0200 	mov.w	r2, #0
 8001920:	4b97      	ldr	r3, [pc, #604]	@ (8001b80 <init_combined_filter+0x278>)
 8001922:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
    double low = low_fc / nyquist;
 8001926:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800192a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800192e:	f7fe ff65 	bl	80007fc <__aeabi_ddiv>
 8001932:	4602      	mov	r2, r0
 8001934:	460b      	mov	r3, r1
 8001936:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    double high = high_fc / nyquist;
 800193a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800193e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001942:	f7fe ff5b 	bl	80007fc <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48

    double W0 = 2 * PI * (high + low) / 2.0;  // Center frequency
 800194e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001952:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001956:	f7fe fc71 	bl	800023c <__adddf3>
 800195a:	4602      	mov	r2, r0
 800195c:	460b      	mov	r3, r1
 800195e:	4610      	mov	r0, r2
 8001960:	4619      	mov	r1, r3
 8001962:	a385      	add	r3, pc, #532	@ (adr r3, 8001b78 <init_combined_filter+0x270>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe1e 	bl	80005a8 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800197c:	f7fe ff3e 	bl	80007fc <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    double BW = high - low;                  // Bandwidth
 8001988:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800198c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001990:	f7fe fc52 	bl	8000238 <__aeabi_dsub>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double Q = W0 / BW;                      // Quality factor
 800199c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80019a0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80019a4:	f7fe ff2a 	bl	80007fc <__aeabi_ddiv>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Bandpass filter coefficients for a second-order Butterworth filter (simplified)
    filter->b_bpf[0] = BW / 2.0;
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019b8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80019bc:	f7fe ff1e 	bl	80007fc <__aeabi_ddiv>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	69f9      	ldr	r1, [r7, #28]
 80019c6:	e9c1 2300 	strd	r2, r3, [r1]
    filter->b_bpf[1] = 0.0;
 80019ca:	69f9      	ldr	r1, [r7, #28]
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	f04f 0300 	mov.w	r3, #0
 80019d4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    filter->b_bpf[2] = -BW / 2.0;
 80019d8:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80019da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019dc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe ff06 	bl	80007fc <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	69f9      	ldr	r1, [r7, #28]
 80019f6:	e9c1 2304 	strd	r2, r3, [r1, #16]

    filter->a_bpf[0] = 1.0 + BW / Q;
 80019fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80019fe:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a02:	f7fe fefb 	bl	80007fc <__aeabi_ddiv>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	4b5c      	ldr	r3, [pc, #368]	@ (8001b84 <init_combined_filter+0x27c>)
 8001a14:	f7fe fc12 	bl	800023c <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	69f9      	ldr	r1, [r7, #28]
 8001a1e:	e9c1 2306 	strd	r2, r3, [r1, #24]
    filter->a_bpf[1] = -2.0 * cos(W0);
 8001a22:	ed97 0b10 	vldr	d0, [r7, #64]	@ 0x40
 8001a26:	f015 fdb3 	bl	8017590 <cos>
 8001a2a:	ec51 0b10 	vmov	r0, r1, d0
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001a36:	f7fe fdb7 	bl	80005a8 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	69f9      	ldr	r1, [r7, #28]
 8001a40:	e9c1 2308 	strd	r2, r3, [r1, #32]
    filter->a_bpf[2] = 1.0 - BW / Q;
 8001a44:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001a48:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001a4c:	f7fe fed6 	bl	80007fc <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	494a      	ldr	r1, [pc, #296]	@ (8001b84 <init_combined_filter+0x27c>)
 8001a5a:	f7fe fbed 	bl	8000238 <__aeabi_dsub>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	69f9      	ldr	r1, [r7, #28]
 8001a64:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

    // Initialize bandpass filter state to zero
    filter->z_bpf[0] = filter->z_bpf[1] = filter->z_bpf[2] = 0.0;
 8001a68:	69f9      	ldr	r1, [r7, #28]
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001a7c:	69f9      	ldr	r1, [r7, #28]
 8001a7e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001a88:	69f9      	ldr	r1, [r7, #28]
 8001a8a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

    // Notch Filter initialization
    double W0_notch = 2 * PI * notch_fc / nyquist;
 8001a8e:	a33a      	add	r3, pc, #232	@ (adr r3, 8001b78 <init_combined_filter+0x270>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a98:	f7fe fd86 	bl	80005a8 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001aa8:	f7fe fea8 	bl	80007fc <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    double BW_notch = 5.0;  // Bandwidth of the notch (adjustable)
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <init_combined_filter+0x280>)
 8001aba:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Notch filter coefficients (second-order IIR)
    filter->b_notch[0] = 1.0;
 8001abe:	69f9      	ldr	r1, [r7, #28]
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8001b84 <init_combined_filter+0x27c>)
 8001ac6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    filter->b_notch[1] = -2.0 * cos(W0_notch);
 8001aca:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001ace:	f015 fd5f 	bl	8017590 <cos>
 8001ad2:	ec51 0b10 	vmov	r0, r1, d0
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001ade:	f7fe fd63 	bl	80005a8 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	69f9      	ldr	r1, [r7, #28]
 8001ae8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
    filter->b_notch[2] = 1.0;
 8001aec:	69f9      	ldr	r1, [r7, #28]
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4b24      	ldr	r3, [pc, #144]	@ (8001b84 <init_combined_filter+0x27c>)
 8001af4:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58

    filter->a_notch[0] = 1.0 + BW_notch;
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	4b21      	ldr	r3, [pc, #132]	@ (8001b84 <init_combined_filter+0x27c>)
 8001afe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b02:	f7fe fb9b 	bl	800023c <__adddf3>
 8001b06:	4602      	mov	r2, r0
 8001b08:	460b      	mov	r3, r1
 8001b0a:	69f9      	ldr	r1, [r7, #28]
 8001b0c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
    filter->a_notch[1] = -2.0 * cos(W0_notch);
 8001b10:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001b14:	f015 fd3c 	bl	8017590 <cos>
 8001b18:	ec51 0b10 	vmov	r0, r1, d0
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001b24:	f7fe fd40 	bl	80005a8 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	69f9      	ldr	r1, [r7, #28]
 8001b2e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
    filter->a_notch[2] = 1.0 - BW_notch;
 8001b32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b36:	f04f 0000 	mov.w	r0, #0
 8001b3a:	4912      	ldr	r1, [pc, #72]	@ (8001b84 <init_combined_filter+0x27c>)
 8001b3c:	f7fe fb7c 	bl	8000238 <__aeabi_dsub>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	69f9      	ldr	r1, [r7, #28]
 8001b46:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70

    // Initialize notch filter state to zero
    filter->z_notch[0] = filter->z_notch[1] = filter->z_notch[2] = 0.0;
 8001b4a:	69f9      	ldr	r1, [r7, #28]
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8001b5e:	69f9      	ldr	r1, [r7, #28]
 8001b60:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8001b6a:	69f9      	ldr	r1, [r7, #28]
 8001b6c:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
}
 8001b70:	bf00      	nop
 8001b72:	3760      	adds	r7, #96	@ 0x60
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	54442d18 	.word	0x54442d18
 8001b7c:	401921fb 	.word	0x401921fb
 8001b80:	4080ac00 	.word	0x4080ac00
 8001b84:	3ff00000 	.word	0x3ff00000
 8001b88:	40140000 	.word	0x40140000

08001b8c <IIR_AFE>:

//--------------------------------------------------------------------------------------------
//								IIR Bandpass Filter
//--------------------------------------------------------------------------------------------
int32_t IIR_AFE ( tsSIG *Signal, uint8_t Temp_xyptr )
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b088      	sub	sp, #32
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	70fb      	strb	r3, [r7, #3]

	float  		convM = 0;
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
	float  		conv1M = 0, conv2M = 0;
 8001b9e:	f04f 0300 	mov.w	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
	uint8_t 	o = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	73fb      	strb	r3, [r7, #15]


	// BPF Implementation ------------------------------------------------------------------------------------
	if (tsCmd.TMR_HPF)
 8001bae:	4b8d      	ldr	r3, [pc, #564]	@ (8001de4 <IIR_AFE+0x258>)
 8001bb0:	7e9b      	ldrb	r3, [r3, #26]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d07e      	beq.n	8001cb4 <IIR_AFE+0x128>
	{
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	74fb      	strb	r3, [r7, #19]
 8001bba:	e020      	b.n	8001bfe <IIR_AFE+0x72>
		{
			o= RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001bbc:	7cfa      	ldrb	r2, [r7, #19]
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	2019      	movs	r0, #25
 8001bc4:	f000 f918 	bl	8001df8 <RecentValueIndex>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	73fb      	strb	r3, [r7, #15]
			conv1M +=  b[i] * Signal->Raw[o];
 8001bcc:	7cfb      	ldrb	r3, [r7, #19]
 8001bce:	4a86      	ldr	r2, [pc, #536]	@ (8001de8 <IIR_AFE+0x25c>)
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4413      	add	r3, r2
 8001bd4:	ed93 7a00 	vldr	s14, [r3]
 8001bd8:	7bfa      	ldrb	r2, [r7, #15]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be0:	ee07 3a90 	vmov	s15, r3
 8001be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bec:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bf4:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i = 0 ; i < BPF_order ; i++ )
 8001bf8:	7cfb      	ldrb	r3, [r7, #19]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	74fb      	strb	r3, [r7, #19]
 8001bfe:	7cfb      	ldrb	r3, [r7, #19]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d9db      	bls.n	8001bbc <IIR_AFE+0x30>
		}

		o=0;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 8001c08:	2301      	movs	r3, #1
 8001c0a:	74bb      	strb	r3, [r7, #18]
 8001c0c:	e03f      	b.n	8001c8e <IIR_AFE+0x102>
		{
			o = RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001c0e:	7cba      	ldrb	r2, [r7, #18]
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	4619      	mov	r1, r3
 8001c14:	2019      	movs	r0, #25
 8001c16:	f000 f8ef 	bl	8001df8 <RecentValueIndex>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	73fb      	strb	r3, [r7, #15]
			if (tsCmd.TMR_N50) {conv2M += a[i] * Signal->HPF [o];} else {conv2M += a[i] * Signal->Filtered [o];}
 8001c1e:	4b71      	ldr	r3, [pc, #452]	@ (8001de4 <IIR_AFE+0x258>)
 8001c20:	7e5b      	ldrb	r3, [r3, #25]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d018      	beq.n	8001c58 <IIR_AFE+0xcc>
 8001c26:	7cbb      	ldrb	r3, [r7, #18]
 8001c28:	4a70      	ldr	r2, [pc, #448]	@ (8001dec <IIR_AFE+0x260>)
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	4413      	add	r3, r2
 8001c2e:	ed93 7a00 	vldr	s14, [r3]
 8001c32:	7bfb      	ldrb	r3, [r7, #15]
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	334a      	adds	r3, #74	@ 0x4a
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	ee07 3a90 	vmov	s15, r3
 8001c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c52:	edc7 7a05 	vstr	s15, [r7, #20]
 8001c56:	e017      	b.n	8001c88 <IIR_AFE+0xfc>
 8001c58:	7cbb      	ldrb	r3, [r7, #18]
 8001c5a:	4a64      	ldr	r2, [pc, #400]	@ (8001dec <IIR_AFE+0x260>)
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	3318      	adds	r3, #24
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	ee07 3a90 	vmov	s15, r3
 8001c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c7c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c84:	edc7 7a05 	vstr	s15, [r7, #20]
		for ( uint8_t i = 1 ;  i < BPF_order ; i++ )
 8001c88:	7cbb      	ldrb	r3, [r7, #18]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	74bb      	strb	r3, [r7, #18]
 8001c8e:	7cbb      	ldrb	r3, [r7, #18]
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d9bc      	bls.n	8001c0e <IIR_AFE+0x82>
		}

		Signal->HPF [Temp_xyptr] =  conv1M -  conv2M ;
 8001c94:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ca6:	ee17 1a90 	vmov	r1, s15
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	334a      	adds	r3, #74	@ 0x4a
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	6059      	str	r1, [r3, #4]
	}

	// Notch Filter implementation ---------------------------------------------------------------------------
	if (tsCmd.TMR_N50)
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	@ (8001de4 <IIR_AFE+0x258>)
 8001cb6:	7e5b      	ldrb	r3, [r3, #25]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d07c      	beq.n	8001db6 <IIR_AFE+0x22a>
	{
		conv1M= 0;		conv2M= 0;
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]

		// 50 Notch Filter Implementation
		for ( uint8_t i=0 ; i < NF_order ; i++ )
 8001cc8:	2300      	movs	r3, #0
 8001cca:	747b      	strb	r3, [r7, #17]
 8001ccc:	e03d      	b.n	8001d4a <IIR_AFE+0x1be>
		{
			o = RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001cce:	7c7a      	ldrb	r2, [r7, #17]
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	2019      	movs	r0, #25
 8001cd6:	f000 f88f 	bl	8001df8 <RecentValueIndex>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	73fb      	strb	r3, [r7, #15]
			if (tsCmd.TMR_HPF) { conv1M +=  b_N50_60[i] * Signal->HPF[o]; } else { conv1M +=  b_N50_60[i] * Signal->Raw[o]; }
 8001cde:	4b41      	ldr	r3, [pc, #260]	@ (8001de4 <IIR_AFE+0x258>)
 8001ce0:	7e9b      	ldrb	r3, [r3, #26]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d018      	beq.n	8001d18 <IIR_AFE+0x18c>
 8001ce6:	7c7b      	ldrb	r3, [r7, #17]
 8001ce8:	4a41      	ldr	r2, [pc, #260]	@ (8001df0 <IIR_AFE+0x264>)
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4413      	add	r3, r2
 8001cee:	ed93 7a00 	vldr	s14, [r3]
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	334a      	adds	r3, #74	@ 0x4a
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0a:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d12:	edc7 7a06 	vstr	s15, [r7, #24]
 8001d16:	e015      	b.n	8001d44 <IIR_AFE+0x1b8>
 8001d18:	7c7b      	ldrb	r3, [r7, #17]
 8001d1a:	4a35      	ldr	r2, [pc, #212]	@ (8001df0 <IIR_AFE+0x264>)
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	4413      	add	r3, r2
 8001d20:	ed93 7a00 	vldr	s14, [r3]
 8001d24:	7bfa      	ldrb	r2, [r7, #15]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	ee07 3a90 	vmov	s15, r3
 8001d30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d38:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d40:	edc7 7a06 	vstr	s15, [r7, #24]
		for ( uint8_t i=0 ; i < NF_order ; i++ )
 8001d44:	7c7b      	ldrb	r3, [r7, #17]
 8001d46:	3301      	adds	r3, #1
 8001d48:	747b      	strb	r3, [r7, #17]
 8001d4a:	7c7b      	ldrb	r3, [r7, #17]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d9be      	bls.n	8001cce <IIR_AFE+0x142>
		}

		o=0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]

		for ( uint8_t i=1 ; i < NF_order ; i++ )
 8001d54:	2301      	movs	r3, #1
 8001d56:	743b      	strb	r3, [r7, #16]
 8001d58:	e022      	b.n	8001da0 <IIR_AFE+0x214>
		{
			o=RecentValueIndex ( Temp_BUF_LEN, Temp_xyptr, i );					// Get buffer position for past values
 8001d5a:	7c3a      	ldrb	r2, [r7, #16]
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	4619      	mov	r1, r3
 8001d60:	2019      	movs	r0, #25
 8001d62:	f000 f849 	bl	8001df8 <RecentValueIndex>
 8001d66:	4603      	mov	r3, r0
 8001d68:	73fb      	strb	r3, [r7, #15]
			 conv2M += a_N50_60[i] * Signal->Filtered[o] ;
 8001d6a:	7c3b      	ldrb	r3, [r7, #16]
 8001d6c:	4a21      	ldr	r2, [pc, #132]	@ (8001df4 <IIR_AFE+0x268>)
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	ed93 7a00 	vldr	s14, [r3]
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	3318      	adds	r3, #24
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4413      	add	r3, r2
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	ee07 3a90 	vmov	s15, r3
 8001d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	edc7 7a05 	vstr	s15, [r7, #20]
		for ( uint8_t i=1 ; i < NF_order ; i++ )
 8001d9a:	7c3b      	ldrb	r3, [r7, #16]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	743b      	strb	r3, [r7, #16]
 8001da0:	7c3b      	ldrb	r3, [r7, #16]
 8001da2:	2b04      	cmp	r3, #4
 8001da4:	d9d9      	bls.n	8001d5a <IIR_AFE+0x1ce>
		}

		convM= conv1M - conv2M;
 8001da6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001daa:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db2:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if (tsCmd.TMR_HPF == false && tsCmd.TMR_N50 == false)
 8001db6:	4b0b      	ldr	r3, [pc, #44]	@ (8001de4 <IIR_AFE+0x258>)
 8001db8:	7e9b      	ldrb	r3, [r3, #26]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d108      	bne.n	8001dd0 <IIR_AFE+0x244>
 8001dbe:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <IIR_AFE+0x258>)
 8001dc0:	7e5b      	ldrb	r3, [r3, #25]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d104      	bne.n	8001dd0 <IIR_AFE+0x244>
	{
		return Signal->Raw[Temp_xyptr];
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dce:	e005      	b.n	8001ddc <IIR_AFE+0x250>
	}
	else
	{
		return  (int)convM; //(int)conv;
 8001dd0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001dd4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd8:	ee17 3a90 	vmov	r3, s15
	}

}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20001630 	.word	0x20001630
 8001de8:	08019fd8 	.word	0x08019fd8
 8001dec:	08019fec 	.word	0x08019fec
 8001df0:	0801a000 	.word	0x0801a000
 8001df4:	0801a014 	.word	0x0801a014

08001df8 <RecentValueIndex>:

//--------------------------------------------------------------------------------------------
//						Get buffer position for past values
//--------------------------------------------------------------------------------------------
uint8_t RecentValueIndex ( uint8_t BufferLen, uint8_t BufferPos, uint8_t in_dex )
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	460b      	mov	r3, r1
 8001e04:	71bb      	strb	r3, [r7, #6]
 8001e06:	4613      	mov	r3, r2
 8001e08:	717b      	strb	r3, [r7, #5]
	uint8_t out_xy = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	73fb      	strb	r3, [r7, #15]

	if ( ( BufferPos - in_dex ) <  0 )	{ out_xy = ( BufferLen + BufferPos ) - in_dex; }	// Calculate pointer of the circular buffer for previous values
 8001e0e:	79ba      	ldrb	r2, [r7, #6]
 8001e10:	797b      	ldrb	r3, [r7, #5]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	da06      	bge.n	8001e26 <RecentValueIndex+0x2e>
 8001e18:	79fa      	ldrb	r2, [r7, #7]
 8001e1a:	79bb      	ldrb	r3, [r7, #6]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	797b      	ldrb	r3, [r7, #5]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	73fb      	strb	r3, [r7, #15]
	if ( ( BufferPos - in_dex ) >= 0 )	{ out_xy = BufferPos - in_dex; }				// Calculate pointer of the circular buffer for previous values
 8001e26:	79ba      	ldrb	r2, [r7, #6]
 8001e28:	797b      	ldrb	r3, [r7, #5]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	db03      	blt.n	8001e38 <RecentValueIndex+0x40>
 8001e30:	79ba      	ldrb	r2, [r7, #6]
 8001e32:	797b      	ldrb	r3, [r7, #5]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	73fb      	strb	r3, [r7, #15]

	return out_xy;
 8001e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <IMU_Init>:

#define 	M_PI 			3.14159265358979323846
#define		IMU_SPS			1067
//----------------------------------------------------------------------------------------------------
HAL_StatusTypeDef IMU_Init(I2C_HandleTypeDef *hi2c)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af02      	add	r7, sp, #8
 8001e4e:	6078      	str	r0, [r7, #4]
    uint8_t config[2];

    // Set the HW address on IMU to 0x6A
    ADDR_IMU_6A;
 8001e50:	4b2d      	ldr	r3, [pc, #180]	@ (8001f08 <IMU_Init+0xc0>)
 8001e52:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e56:	619a      	str	r2, [r3, #24]

    // Enable accelerometer, 104 Hz, 2g
    config[0] = IMU_CTRL1_XL;
 8001e58:	2310      	movs	r3, #16
 8001e5a:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001e5c:	2340      	movs	r3, #64	@ 0x40
 8001e5e:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001e60:	f107 020c 	add.w	r2, r7, #12
 8001e64:	230a      	movs	r3, #10
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	2302      	movs	r3, #2
 8001e6a:	21d4      	movs	r1, #212	@ 0xd4
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f003 fe51 	bl	8005b14 <HAL_I2C_Master_Transmit>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <IMU_Init+0x34>
    {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e041      	b.n	8001f00 <IMU_Init+0xb8>
    }

    // Enable gyroscope, 104 Hz, 250 dps
    config[0] = IMU_CTRL2_G;
 8001e7c:	2311      	movs	r3, #17
 8001e7e:	733b      	strb	r3, [r7, #12]
    config[1] = 0x40;
 8001e80:	2340      	movs	r3, #64	@ 0x40
 8001e82:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001e84:	f107 020c 	add.w	r2, r7, #12
 8001e88:	230a      	movs	r3, #10
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	21d4      	movs	r1, #212	@ 0xd4
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f003 fe3f 	bl	8005b14 <HAL_I2C_Master_Transmit>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <IMU_Init+0x58>
    {
        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e02f      	b.n	8001f00 <IMU_Init+0xb8>
    }

    // BDU (Block Data Update) enabled
    config[0] = IMU_CTRL3_C;
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	733b      	strb	r3, [r7, #12]
    config[1] = 0x44;
 8001ea4:	2344      	movs	r3, #68	@ 0x44
 8001ea6:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(hi2c, IMU_ADDR, config, 2, I2C_DELAY) != HAL_OK)
 8001ea8:	f107 020c 	add.w	r2, r7, #12
 8001eac:	230a      	movs	r3, #10
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	21d4      	movs	r1, #212	@ 0xd4
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f003 fe2d 	bl	8005b14 <HAL_I2C_Master_Transmit>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <IMU_Init+0x7c>
    {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e01d      	b.n	8001f00 <IMU_Init+0xb8>
    }

    HighPassFilter_Init	( &accelFilter, cutoff_freq, IMU_SPS );
 8001ec4:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <IMU_Init+0xc4>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ed0:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 8001f10 <IMU_Init+0xc8>
 8001ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed8:	480e      	ldr	r0, [pc, #56]	@ (8001f14 <IMU_Init+0xcc>)
 8001eda:	f000 f91d 	bl	8002118 <HighPassFilter_Init>
    HighPassFilter_Init	( &gyroFilter , cutoff_freq, IMU_SPS );
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <IMU_Init+0xc4>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eea:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001f10 <IMU_Init+0xc8>
 8001eee:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef2:	4809      	ldr	r0, [pc, #36]	@ (8001f18 <IMU_Init+0xd0>)
 8001ef4:	f000 f910 	bl	8002118 <HighPassFilter_Init>

    DIAG ("\t\tIMU initialised\r\n");
 8001ef8:	4808      	ldr	r0, [pc, #32]	@ (8001f1c <IMU_Init+0xd4>)
 8001efa:	f000 fecd 	bl	8002c98 <DIAG>

    return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3710      	adds	r7, #16
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	48000400 	.word	0x48000400
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	44856000 	.word	0x44856000
 8001f14:	200012fc 	.word	0x200012fc
 8001f18:	2000130c 	.word	0x2000130c
 8001f1c:	08018630 	.word	0x08018630

08001f20 <IMU_StreamDataPack>:
	//tsSystem.u8Error |= eBus_Error;
}
//--------------------------------------------------------------------------------------------

void IMU_StreamDataPack ( uint8_t sensor, uint8_t *x_pData, uint8_t *y_pData, uint8_t *z_pData, uint8_t *outputString   )
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60b9      	str	r1, [r7, #8]
 8001f28:	607a      	str	r2, [r7, #4]
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	73fb      	strb	r3, [r7, #15]
 	uint8_t index=0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	75fb      	strb	r3, [r7, #23]

 	// Clear buffer
 	memset( tsStreamIMU.u8TxData, 0, sizeof(tsStreamIMU.u8TxData) );
 8001f34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f38:	2100      	movs	r1, #0
 8001f3a:	4875      	ldr	r0, [pc, #468]	@ (8002110 <IMU_StreamDataPack+0x1f0>)
 8001f3c:	f014 fb96 	bl	801666c <memset>

 	outputString [index++] = 'S';
 8001f40:	7dfb      	ldrb	r3, [r7, #23]
 8001f42:	1c5a      	adds	r2, r3, #1
 8001f44:	75fa      	strb	r2, [r7, #23]
 8001f46:	461a      	mov	r2, r3
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	2253      	movs	r2, #83	@ 0x53
 8001f4e:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = tsBle.Timestamp;				//'N'
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	1c5a      	adds	r2, r3, #1
 8001f54:	75fa      	strb	r2, [r7, #23]
 8001f56:	461a      	mov	r2, r3
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	4a6d      	ldr	r2, [pc, #436]	@ (8002114 <IMU_StreamDataPack+0x1f4>)
 8001f5e:	7952      	ldrb	r2, [r2, #5]
 8001f60:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001f62:	7dfb      	ldrb	r3, [r7, #23]
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	75fa      	strb	r2, [r7, #23]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	222c      	movs	r2, #44	@ 0x2c
 8001f70:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8001f72:	7dfb      	ldrb	r3, [r7, #23]
 8001f74:	1c5a      	adds	r2, r3, #1
 8001f76:	75fa      	strb	r2, [r7, #23]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	2243      	movs	r2, #67	@ 0x43
 8001f80:	701a      	strb	r2, [r3, #0]
 	if ( sensor == Accelerometer)
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d108      	bne.n	8001f9a <IMU_StreamDataPack+0x7a>
 	{
 		outputString [index++] = '3';
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	75fa      	strb	r2, [r7, #23]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6a3b      	ldr	r3, [r7, #32]
 8001f92:	4413      	add	r3, r2
 8001f94:	2233      	movs	r2, #51	@ 0x33
 8001f96:	701a      	strb	r2, [r3, #0]
 8001f98:	e007      	b.n	8001faa <IMU_StreamDataPack+0x8a>
 	}
 	else
 	{
 		outputString [index++] = '6';
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	1c5a      	adds	r2, r3, #1
 8001f9e:	75fa      	strb	r2, [r7, #23]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	2236      	movs	r2, #54	@ 0x36
 8001fa8:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8001faa:	7dfb      	ldrb	r3, [r7, #23]
 8001fac:	1c5a      	adds	r2, r3, #1
 8001fae:	75fa      	strb	r2, [r7, #23]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	6a3b      	ldr	r3, [r7, #32]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	222c      	movs	r2, #44	@ 0x2c
 8001fb8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	75fa      	strb	r2, [r7, #23]
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	2240      	movs	r2, #64	@ 0x40
 8001fc8:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8001fca:	7dfb      	ldrb	r3, [r7, #23]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	75fa      	strb	r2, [r7, #23]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	222c      	movs	r2, #44	@ 0x2c
 8001fd8:	701a      	strb	r2, [r3, #0]

 	//DIAG( "%d\r", tsStreamSCG.Counter);
 	memcpy ( outputString + index, x_pData, 64 );
 8001fda:	7dfb      	ldrb	r3, [r7, #23]
 8001fdc:	6a3a      	ldr	r2, [r7, #32]
 8001fde:	4413      	add	r3, r2
 8001fe0:	2240      	movs	r2, #64	@ 0x40
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f014 fbd2 	bl	801678e <memcpy>
 	index += 64;
 8001fea:	7dfb      	ldrb	r3, [r7, #23]
 8001fec:	3340      	adds	r3, #64	@ 0x40
 8001fee:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	75fa      	strb	r2, [r7, #23]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	222c      	movs	r2, #44	@ 0x2c
 8001ffe:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 8002000:	7dfb      	ldrb	r3, [r7, #23]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	75fa      	strb	r2, [r7, #23]
 8002006:	461a      	mov	r2, r3
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	4413      	add	r3, r2
 800200c:	2243      	movs	r2, #67	@ 0x43
 800200e:	701a      	strb	r2, [r3, #0]
 	if ( sensor == Accelerometer)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d108      	bne.n	8002028 <IMU_StreamDataPack+0x108>
 	{
 		outputString [index++] = '4';
 8002016:	7dfb      	ldrb	r3, [r7, #23]
 8002018:	1c5a      	adds	r2, r3, #1
 800201a:	75fa      	strb	r2, [r7, #23]
 800201c:	461a      	mov	r2, r3
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	4413      	add	r3, r2
 8002022:	2234      	movs	r2, #52	@ 0x34
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e007      	b.n	8002038 <IMU_StreamDataPack+0x118>
 	}
 	else
 	{
 		outputString [index++] = '7';
 8002028:	7dfb      	ldrb	r3, [r7, #23]
 800202a:	1c5a      	adds	r2, r3, #1
 800202c:	75fa      	strb	r2, [r7, #23]
 800202e:	461a      	mov	r2, r3
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	4413      	add	r3, r2
 8002034:	2237      	movs	r2, #55	@ 0x37
 8002036:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 8002038:	7dfb      	ldrb	r3, [r7, #23]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	75fa      	strb	r2, [r7, #23]
 800203e:	461a      	mov	r2, r3
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	4413      	add	r3, r2
 8002044:	222c      	movs	r2, #44	@ 0x2c
 8002046:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 8002048:	7dfb      	ldrb	r3, [r7, #23]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	75fa      	strb	r2, [r7, #23]
 800204e:	461a      	mov	r2, r3
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	4413      	add	r3, r2
 8002054:	2240      	movs	r2, #64	@ 0x40
 8002056:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	75fa      	strb	r2, [r7, #23]
 800205e:	461a      	mov	r2, r3
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	4413      	add	r3, r2
 8002064:	222c      	movs	r2, #44	@ 0x2c
 8002066:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, y_pData, 64 );
 8002068:	7dfb      	ldrb	r3, [r7, #23]
 800206a:	6a3a      	ldr	r2, [r7, #32]
 800206c:	4413      	add	r3, r2
 800206e:	2240      	movs	r2, #64	@ 0x40
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4618      	mov	r0, r3
 8002074:	f014 fb8b 	bl	801678e <memcpy>
 	index += 64;
 8002078:	7dfb      	ldrb	r3, [r7, #23]
 800207a:	3340      	adds	r3, #64	@ 0x40
 800207c:	75fb      	strb	r3, [r7, #23]

 	outputString [index++] = ',';
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	75fa      	strb	r2, [r7, #23]
 8002084:	461a      	mov	r2, r3
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	4413      	add	r3, r2
 800208a:	222c      	movs	r2, #44	@ 0x2c
 800208c:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 'C';
 800208e:	7dfb      	ldrb	r3, [r7, #23]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	75fa      	strb	r2, [r7, #23]
 8002094:	461a      	mov	r2, r3
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	4413      	add	r3, r2
 800209a:	2243      	movs	r2, #67	@ 0x43
 800209c:	701a      	strb	r2, [r3, #0]
 	if ( sensor == 0)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d108      	bne.n	80020b6 <IMU_StreamDataPack+0x196>
 	{
 		outputString [index++] = '5';
 80020a4:	7dfb      	ldrb	r3, [r7, #23]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	75fa      	strb	r2, [r7, #23]
 80020aa:	461a      	mov	r2, r3
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	4413      	add	r3, r2
 80020b0:	2235      	movs	r2, #53	@ 0x35
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	e007      	b.n	80020c6 <IMU_StreamDataPack+0x1a6>
 	}
 	else
 	{
 		outputString [index++] = '8';
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	75fa      	strb	r2, [r7, #23]
 80020bc:	461a      	mov	r2, r3
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	4413      	add	r3, r2
 80020c2:	2238      	movs	r2, #56	@ 0x38
 80020c4:	701a      	strb	r2, [r3, #0]
 	}
 	outputString [index++] = ',';
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	1c5a      	adds	r2, r3, #1
 80020ca:	75fa      	strb	r2, [r7, #23]
 80020cc:	461a      	mov	r2, r3
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	4413      	add	r3, r2
 80020d2:	222c      	movs	r2, #44	@ 0x2c
 80020d4:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = 64;
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	75fa      	strb	r2, [r7, #23]
 80020dc:	461a      	mov	r2, r3
 80020de:	6a3b      	ldr	r3, [r7, #32]
 80020e0:	4413      	add	r3, r2
 80020e2:	2240      	movs	r2, #64	@ 0x40
 80020e4:	701a      	strb	r2, [r3, #0]
 	outputString [index++] = ',';
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	75fa      	strb	r2, [r7, #23]
 80020ec:	461a      	mov	r2, r3
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	4413      	add	r3, r2
 80020f2:	222c      	movs	r2, #44	@ 0x2c
 80020f4:	701a      	strb	r2, [r3, #0]

 	memcpy ( outputString + index, z_pData, 64 );
 80020f6:	7dfb      	ldrb	r3, [r7, #23]
 80020f8:	6a3a      	ldr	r2, [r7, #32]
 80020fa:	4413      	add	r3, r2
 80020fc:	2240      	movs	r2, #64	@ 0x40
 80020fe:	6839      	ldr	r1, [r7, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f014 fb44 	bl	801678e <memcpy>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	20001046 	.word	0x20001046
 8002114:	200019d0 	.word	0x200019d0

08002118 <HighPassFilter_Init>:
//--------------------------------------------------------------------------------------------

void HighPassFilter_Init(tsHighPassFilter *filter, float cutoff_freq, float sampling_rate)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	ed87 0a02 	vstr	s0, [r7, #8]
 8002124:	edc7 0a01 	vstr	s1, [r7, #4]
    float rc = 1.0 / (2.0 * M_PI * cutoff_freq);
 8002128:	68b8      	ldr	r0, [r7, #8]
 800212a:	f7fe f9e5 	bl	80004f8 <__aeabi_f2d>
 800212e:	a321      	add	r3, pc, #132	@ (adr r3, 80021b4 <HighPassFilter_Init+0x9c>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa38 	bl	80005a8 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	f04f 0000 	mov.w	r0, #0
 8002140:	491b      	ldr	r1, [pc, #108]	@ (80021b0 <HighPassFilter_Init+0x98>)
 8002142:	f7fe fb5b 	bl	80007fc <__aeabi_ddiv>
 8002146:	4602      	mov	r2, r0
 8002148:	460b      	mov	r3, r1
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	f7fe fced 	bl	8000b2c <__aeabi_d2f>
 8002152:	4603      	mov	r3, r0
 8002154:	617b      	str	r3, [r7, #20]
    float dt = 1.0 / sampling_rate;
 8002156:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800215a:	ed97 7a01 	vldr	s14, [r7, #4]
 800215e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002162:	edc7 7a04 	vstr	s15, [r7, #16]
    filter->alpha = rc / (rc + dt);
 8002166:	ed97 7a05 	vldr	s14, [r7, #20]
 800216a:	edd7 7a04 	vldr	s15, [r7, #16]
 800216e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002172:	edd7 6a05 	vldr	s13, [r7, #20]
 8002176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	edc3 7a00 	vstr	s15, [r3]

    filter->prev_input.x = 0;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	809a      	strh	r2, [r3, #4]
    filter->prev_input.y = 0;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	80da      	strh	r2, [r3, #6]
    filter->prev_input.z = 0;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	811a      	strh	r2, [r3, #8]

    filter->prev_output.x = 0;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	815a      	strh	r2, [r3, #10]
    filter->prev_output.y = 0;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	819a      	strh	r2, [r3, #12]
    filter->prev_output.z = 0;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	81da      	strh	r2, [r3, #14]
}
 80021a4:	bf00      	nop
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	f3af 8000 	nop.w
 80021b0:	3ff00000 	.word	0x3ff00000
 80021b4:	54442d18 	.word	0x54442d18
 80021b8:	401921fb 	.word	0x401921fb

080021bc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80021c2:	4b0b      	ldr	r3, [pc, #44]	@ (80021f0 <APPD_EnableCPU2+0x34>)
 80021c4:	1d3c      	adds	r4, r7, #4
 80021c6:	461d      	mov	r5, r3
 80021c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80021d0:	c403      	stmia	r4!, {r0, r1}
 80021d2:	8022      	strh	r2, [r4, #0]
 80021d4:	3402      	adds	r4, #2
 80021d6:	0c13      	lsrs	r3, r2, #16
 80021d8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80021da:	f010 f963 	bl	80124a4 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00f fbf4 	bl	80119ce <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80021e6:	bf00      	nop
}
 80021e8:	3720      	adds	r7, #32
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bdb0      	pop	{r4, r5, r7, pc}
 80021ee:	bf00      	nop
 80021f0:	08018654 	.word	0x08018654

080021f4 <DbgOutputTraces>:
/* USER CODE END DbgOutputInit */
  return;
}

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	460b      	mov	r3, r1
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8002202:	897a      	ldrh	r2, [r7, #10]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68f9      	ldr	r1, [r7, #12]
 8002208:	2000      	movs	r0, #0
 800220a:	f001 fbaf 	bl	800396c <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 800220e:	bf00      	nop
}
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <LL_PWR_SMPS_Enable>:
  *         @ref LL_PWR_SMPS_SetMode() should be used instead.
  * @rmtoll CR5          SMPSEN        LL_PWR_SMPS_Enable
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_Enable(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR5, PWR_CR5_SMPSEN);
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <LL_PWR_SMPS_Enable+0x1c>)
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <LL_PWR_SMPS_Enable+0x1c>)
 8002222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002226:	61d3      	str	r3, [r2, #28]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	58000400 	.word	0x58000400

08002238 <LL_PWR_SMPS_SetStartupCurrent>:
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_200MA
  *         @arg @ref LL_PWR_SMPS_STARTUP_CURRENT_220MA
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetStartupCurrent(uint32_t StartupCurrent)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR5, PWR_CR5_SMPSSC, StartupCurrent);
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002248:	4904      	ldr	r1, [pc, #16]	@ (800225c <LL_PWR_SMPS_SetStartupCurrent+0x24>)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4313      	orrs	r3, r2
 800224e:	61cb      	str	r3, [r1, #28]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	58000400 	.word	0x58000400

08002260 <LL_PWR_SMPS_SetOutputVoltageLevel>:
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V85
  *         @arg @ref LL_PWR_SMPS_OUTPUT_VOLTAGE_1V90
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SMPS_SetOutputVoltageLevel(uint32_t OutputVoltageLevel)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO const uint32_t OutputVoltageLevel_calibration = (((*SMPS_VOLTAGE_CAL_ADDR) & SMPS_VOLTAGE_CAL) >> SMPS_VOLTAGE_CAL_POS);  /* SMPS output voltage level calibrated in production */
 8002268:	4b18      	ldr	r3, [pc, #96]	@ (80022cc <LL_PWR_SMPS_SetOutputVoltageLevel+0x6c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	0a1b      	lsrs	r3, r3, #8
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	60fb      	str	r3, [r7, #12]
  int32_t TrimmingSteps;                               /* Trimming steps between theoretical output voltage and calibrated output voltage */
  int32_t OutputVoltageLevelTrimmed;                   /* SMPS output voltage level after calibration: trimming value added to required level */

  if (OutputVoltageLevel_calibration == 0UL)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d108      	bne.n	800228c <LL_PWR_SMPS_SetOutputVoltageLevel+0x2c>
  {
    /* Device with SMPS output voltage not calibrated in production: Apply output voltage value directly */

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, OutputVoltageLevel);
 800227a:	4b15      	ldr	r3, [pc, #84]	@ (80022d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f023 020f 	bic.w	r2, r3, #15
 8002282:	4913      	ldr	r1, [pc, #76]	@ (80022d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4313      	orrs	r3, r2
 8002288:	61cb      	str	r3, [r1, #28]
    }

    /* Update register */
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
  }
}
 800228a:	e019      	b.n	80022c0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x60>
    TrimmingSteps = ((int32_t)OutputVoltageLevel_calibration - (int32_t)(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V50 >> PWR_CR5_SMPSVOS_Pos));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	3b06      	subs	r3, #6
 8002290:	613b      	str	r3, [r7, #16]
    OutputVoltageLevelTrimmed = ((int32_t)((uint32_t)(OutputVoltageLevel >> PWR_CR5_SMPSVOS_Pos)) + (int32_t)TrimmingSteps);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	617b      	str	r3, [r7, #20]
    if (OutputVoltageLevelTrimmed < 0)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	2b00      	cmp	r3, #0
 800229e:	da02      	bge.n	80022a6 <LL_PWR_SMPS_SetOutputVoltageLevel+0x46>
      OutputVoltageLevelTrimmed = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	e004      	b.n	80022b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
      if (OutputVoltageLevelTrimmed > (int32_t)PWR_CR5_SMPSVOS)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b0f      	cmp	r3, #15
 80022aa:	dd01      	ble.n	80022b0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x50>
        OutputVoltageLevelTrimmed = (int32_t)PWR_CR5_SMPSVOS;
 80022ac:	230f      	movs	r3, #15
 80022ae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(PWR->CR5, PWR_CR5_SMPSVOS, (uint32_t)OutputVoltageLevelTrimmed);
 80022b0:	4b07      	ldr	r3, [pc, #28]	@ (80022d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80022b2:	69db      	ldr	r3, [r3, #28]
 80022b4:	f023 020f 	bic.w	r2, r3, #15
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4905      	ldr	r1, [pc, #20]	@ (80022d0 <LL_PWR_SMPS_SetOutputVoltageLevel+0x70>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	61cb      	str	r3, [r1, #28]
}
 80022c0:	bf00      	nop
 80022c2:	371c      	adds	r7, #28
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	1fff7558 	.word	0x1fff7558
 80022d0:	58000400 	.word	0x58000400

080022d4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80022dc:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <LL_C2_PWR_SetPowerMode+0x28>)
 80022de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80022e2:	f023 0207 	bic.w	r2, r3, #7
 80022e6:	4905      	ldr	r1, [pc, #20]	@ (80022fc <LL_C2_PWR_SetPowerMode+0x28>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	58000400 	.word	0x58000400

08002300 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002308:	4b06      	ldr	r3, [pc, #24]	@ (8002324 <LL_EXTI_EnableIT_32_63+0x24>)
 800230a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800230e:	4905      	ldr	r1, [pc, #20]	@ (8002324 <LL_EXTI_EnableIT_32_63+0x24>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4313      	orrs	r3, r2
 8002314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	58000800 	.word	0x58000800

08002328 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002334:	4a0a      	ldr	r2, [pc, #40]	@ (8002360 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8002336:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800233a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800233e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002342:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	cafecafe 	.word	0xcafecafe

08002364 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800236c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002376:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4313      	orrs	r3, r2
 800237e:	608b      	str	r3, [r1, #8]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800239c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023a4:	bf00      	nop
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80023c6:	bf00      	nop
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80023d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80023e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e4:	d101      	bne.n	80023ea <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002406:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800240a:	d101      	bne.n	8002410 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800242a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4313      	orrs	r3, r2
 8002432:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002438:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4013      	ands	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002440:	68fb      	ldr	r3, [r7, #12]
}
 8002442:	bf00      	nop
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <LL_DBGMCU_GetDeviceID+0x18>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e0042000 	.word	0xe0042000

0800246c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <LL_DBGMCU_GetRevisionID+0x18>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0c1b      	lsrs	r3, r3, #16
 8002476:	b29b      	uxth	r3, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e0042000 	.word	0xe0042000

08002488 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	041b      	lsls	r3, r3, #16
 800249a:	431a      	orrs	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	605a      	str	r2, [r3, #4]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	605a      	str	r2, [r3, #4]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	041b      	lsls	r3, r3, #16
 80024e0:	431a      	orrs	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	615a      	str	r2, [r3, #20]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695a      	ldr	r2, [r3, #20]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	615a      	str	r2, [r3, #20]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	609a      	str	r2, [r3, #8]
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	619a      	str	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002550:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <LL_LPM_EnableSleep+0x1c>)
 8002552:	691b      	ldr	r3, [r3, #16]
 8002554:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <LL_LPM_EnableSleep+0x1c>)
 8002556:	f023 0304 	bic.w	r3, r3, #4
 800255a:	6113      	str	r3, [r2, #16]
}
 800255c:	bf00      	nop
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	22ff      	movs	r2, #255	@ 0xff
 8002578:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800257a:	bf00      	nop
 800257c:	370c      	adds	r7, #12
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr

08002586 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	22ca      	movs	r2, #202	@ 0xca
 8002592:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2253      	movs	r2, #83	@ 0x53
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800259a:	bf00      	nop
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b083      	sub	sp, #12
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 0207 	bic.w	r2, r3, #7
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	609a      	str	r2, [r3, #8]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80025d0:	4b04      	ldr	r3, [pc, #16]	@ (80025e4 <MX_APPE_Config+0x18>)
 80025d2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80025d6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80025d8:	f000 f829 	bl	800262e <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80025dc:	f000 f868 	bl	80026b0 <Config_HSE>

  return;
 80025e0:	bf00      	nop
}
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	58004000 	.word	0x58004000

080025e8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80025ec:	f000 f874 	bl	80026d8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80025f0:	f000 f88c 	bl	800270c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80025f4:	4903      	ldr	r1, [pc, #12]	@ (8002604 <MX_APPE_Init+0x1c>)
 80025f6:	2000      	movs	r0, #0
 80025f8:	f000 ffc6 	bl	8003588 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80025fc:	f000 f896 	bl	800272c <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8002600:	bf00      	nop
}
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20001700 	.word	0x20001700

08002608 <Init_Smps>:

void Init_Smps(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
   *
   *  The SMPS configuration is not yet supported by CubeMx
   *  when SMPS output voltage is set to 1.4V, the RF output power is limited to 3.7dBm
   *  the SMPS output voltage shall be increased for higher RF output power
   */
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
 800260c:	2000      	movs	r0, #0
 800260e:	f7ff fe13 	bl	8002238 <LL_PWR_SMPS_SetStartupCurrent>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
 8002612:	2004      	movs	r0, #4
 8002614:	f7ff fe24 	bl	8002260 <LL_PWR_SMPS_SetOutputVoltageLevel>
  LL_PWR_SMPS_Enable();
 8002618:	f7ff fdfe 	bl	8002218 <LL_PWR_SMPS_Enable>
#endif /* CFG_USE_SMPS != 0 */

  return;
 800261c:	bf00      	nop
}
 800261e:	bd80      	pop	{r7, pc}

08002620 <Init_Exti>:

void Init_Exti(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8002624:	2050      	movs	r0, #80	@ 0x50
 8002626:	f7ff fe6b 	bl	8002300 <LL_EXTI_EnableIT_32_63>

  return;
 800262a:	bf00      	nop
}
 800262c:	bd80      	pop	{r7, pc}

0800262e <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800262e:	b580      	push	{r7, lr}
 8002630:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8002632:	f000 f804 	bl	800263e <Reset_BackupDomain>

  Reset_IPCC();
 8002636:	f000 f819 	bl	800266c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 800263a:	bf00      	nop
}
 800263c:	bd80      	pop	{r7, pc}

0800263e <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8002642:	f7ff fec5 	bl	80023d0 <LL_RCC_IsActiveFlag_PINRST>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00d      	beq.n	8002668 <Reset_BackupDomain+0x2a>
 800264c:	f7ff fed3 	bl	80023f6 <LL_RCC_IsActiveFlag_SFTRST>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002656:	f005 fbf3 	bl	8007e40 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 800265a:	f005 fbf1 	bl	8007e40 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800265e:	f7ff fe95 	bl	800238c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8002662:	f7ff fea4 	bl	80023ae <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8002666:	bf00      	nop
 8002668:	bf00      	nop
}
 800266a:	bd80      	pop	{r7, pc}

0800266c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8002670:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002674:	f7ff fed2 	bl	800241c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8002678:	213f      	movs	r1, #63	@ 0x3f
 800267a:	480c      	ldr	r0, [pc, #48]	@ (80026ac <Reset_IPCC+0x40>)
 800267c:	f7ff ff4a 	bl	8002514 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8002680:	213f      	movs	r1, #63	@ 0x3f
 8002682:	480a      	ldr	r0, [pc, #40]	@ (80026ac <Reset_IPCC+0x40>)
 8002684:	f7ff ff54 	bl	8002530 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8002688:	213f      	movs	r1, #63	@ 0x3f
 800268a:	4808      	ldr	r0, [pc, #32]	@ (80026ac <Reset_IPCC+0x40>)
 800268c:	f7ff fefc 	bl	8002488 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8002690:	213f      	movs	r1, #63	@ 0x3f
 8002692:	4806      	ldr	r0, [pc, #24]	@ (80026ac <Reset_IPCC+0x40>)
 8002694:	f7ff ff1b 	bl	80024ce <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8002698:	213f      	movs	r1, #63	@ 0x3f
 800269a:	4804      	ldr	r0, [pc, #16]	@ (80026ac <Reset_IPCC+0x40>)
 800269c:	f7ff ff06 	bl	80024ac <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80026a0:	213f      	movs	r1, #63	@ 0x3f
 80026a2:	4802      	ldr	r0, [pc, #8]	@ (80026ac <Reset_IPCC+0x40>)
 80026a4:	f7ff ff25 	bl	80024f2 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80026a8:	bf00      	nop
}
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	58000c00 	.word	0x58000c00

080026b0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f010 f848 	bl	801274c <OTP_Read>
 80026bc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	799b      	ldrb	r3, [r3, #6]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff fe2d 	bl	8002328 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
}
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <System_Init>:

static void System_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  Init_Smps();
 80026dc:	f7ff ff94 	bl	8002608 <Init_Smps>

  Init_Exti();
 80026e0:	f7ff ff9e 	bl	8002620 <Init_Exti>

  Init_Rtc();
 80026e4:	f000 f802 	bl	80026ec <Init_Rtc>

  return;
 80026e8:	bf00      	nop
}
 80026ea:	bd80      	pop	{r7, pc}

080026ec <Init_Rtc>:

static void Init_Rtc(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80026f0:	4805      	ldr	r0, [pc, #20]	@ (8002708 <Init_Rtc+0x1c>)
 80026f2:	f7ff ff48 	bl	8002586 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80026f6:	2100      	movs	r1, #0
 80026f8:	4803      	ldr	r0, [pc, #12]	@ (8002708 <Init_Rtc+0x1c>)
 80026fa:	f7ff ff54 	bl	80025a6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80026fe:	4802      	ldr	r0, [pc, #8]	@ (8002708 <Init_Rtc+0x1c>)
 8002700:	f7ff ff34 	bl	800256c <LL_RTC_EnableWriteProtection>

  return;
 8002704:	bf00      	nop
}
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40002800 	.word	0x40002800

0800270c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8002710:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002714:	f7ff fe26 	bl	8002364 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8002718:	f013 fae2 	bl	8015ce0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800271c:	2004      	movs	r0, #4
 800271e:	f7ff fdd9 	bl	80022d4 <LL_C2_PWR_SetPowerMode>

#if (CFG_USB_INTERFACE_ENABLE != 0)
  /**
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
 8002722:	f005 fbab 	bl	8007e7c <HAL_PWREx_EnableVddUSB>
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8002726:	bf00      	nop
}
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8002732:	f00f fd01 	bl	8012138 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8002736:	4a11      	ldr	r2, [pc, #68]	@ (800277c <appe_Tl_Init+0x50>)
 8002738:	2100      	movs	r1, #0
 800273a:	2040      	movs	r0, #64	@ 0x40
 800273c:	f013 fc0e 	bl	8015f5c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8002740:	4b0f      	ldr	r3, [pc, #60]	@ (8002780 <appe_Tl_Init+0x54>)
 8002742:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8002744:	4b0f      	ldr	r3, [pc, #60]	@ (8002784 <appe_Tl_Init+0x58>)
 8002746:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8002748:	463b      	mov	r3, r7
 800274a:	4619      	mov	r1, r3
 800274c:	480e      	ldr	r0, [pc, #56]	@ (8002788 <appe_Tl_Init+0x5c>)
 800274e:	f00f fbb5 	bl	8011ebc <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <appe_Tl_Init+0x60>)
 8002754:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8002756:	4b0e      	ldr	r3, [pc, #56]	@ (8002790 <appe_Tl_Init+0x64>)
 8002758:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800275a:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <appe_Tl_Init+0x68>)
 800275c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800275e:	f641 232c 	movw	r3, #6700	@ 0x1a2c
 8002762:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8002764:	f107 0308 	add.w	r3, r7, #8
 8002768:	4618      	mov	r0, r3
 800276a:	f00f fe27 	bl	80123bc <TL_MM_Init>

  TL_Enable();
 800276e:	f00f fcdd 	bl	801212c <TL_Enable>

  return;
 8002772:	bf00      	nop
}
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	08011ef5 	.word	0x08011ef5
 8002780:	20031c24 	.word	0x20031c24
 8002784:	08002799 	.word	0x08002799
 8002788:	080027b1 	.word	0x080027b1
 800278c:	20031e3c 	.word	0x20031e3c
 8002790:	20031d30 	.word	0x20031d30
 8002794:	200301f8 	.word	0x200301f8

08002798 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80027a2:	bf00      	nop
}
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	330b      	adds	r3, #11
 80027be:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80027ca:	2b07      	cmp	r3, #7
 80027cc:	f200 80d0 	bhi.w	8002970 <APPE_SysUserEvtRx+0x1c0>
 80027d0:	a201      	add	r2, pc, #4	@ (adr r2, 80027d8 <APPE_SysUserEvtRx+0x28>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	080027f9 	.word	0x080027f9
 80027dc:	0800288b 	.word	0x0800288b
 80027e0:	080028ad 	.word	0x080028ad
 80027e4:	08002971 	.word	0x08002971
 80027e8:	080028f1 	.word	0x080028f1
 80027ec:	08002915 	.word	0x08002915
 80027f0:	08002931 	.word	0x08002931
 80027f4:	08002955 	.word	0x08002955
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 80027f8:	f107 030c 	add.w	r3, r7, #12
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00f f913 	bl	8011a28 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8002802:	485e      	ldr	r0, [pc, #376]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 8002804:	f00f feda 	bl	80125bc <DbgTraceGetFileName>
 8002808:	4601      	mov	r1, r0
 800280a:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 800280e:	4a5c      	ldr	r2, [pc, #368]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 8002810:	485c      	ldr	r0, [pc, #368]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002812:	f013 fda3 	bl	801635c <iprintf>
 8002816:	7b3b      	ldrb	r3, [r7, #12]
 8002818:	4619      	mov	r1, r3
 800281a:	7b7b      	ldrb	r3, [r7, #13]
 800281c:	461a      	mov	r2, r3
 800281e:	7bbb      	ldrb	r3, [r7, #14]
 8002820:	4859      	ldr	r0, [pc, #356]	@ (8002988 <APPE_SysUserEvtRx+0x1d8>)
 8002822:	f013 fd9b 	bl	801635c <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8002826:	4855      	ldr	r0, [pc, #340]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 8002828:	f00f fec8 	bl	80125bc <DbgTraceGetFileName>
 800282c:	4601      	mov	r1, r0
 800282e:	f240 136b 	movw	r3, #363	@ 0x16b
 8002832:	4a53      	ldr	r2, [pc, #332]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 8002834:	4853      	ldr	r0, [pc, #332]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002836:	f013 fd91 	bl	801635c <iprintf>
 800283a:	7c3b      	ldrb	r3, [r7, #16]
 800283c:	4619      	mov	r1, r3
 800283e:	4853      	ldr	r0, [pc, #332]	@ (800298c <APPE_SysUserEvtRx+0x1dc>)
 8002840:	f013 fd8c 	bl	801635c <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8002844:	484d      	ldr	r0, [pc, #308]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 8002846:	f00f feb9 	bl	80125bc <DbgTraceGetFileName>
 800284a:	4601      	mov	r1, r0
 800284c:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8002850:	4a4b      	ldr	r2, [pc, #300]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 8002852:	484c      	ldr	r0, [pc, #304]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002854:	f013 fd82 	bl	801635c <iprintf>
 8002858:	7dbb      	ldrb	r3, [r7, #22]
 800285a:	4619      	mov	r1, r3
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	461a      	mov	r2, r3
 8002860:	7e3b      	ldrb	r3, [r7, #24]
 8002862:	484b      	ldr	r0, [pc, #300]	@ (8002990 <APPE_SysUserEvtRx+0x1e0>)
 8002864:	f013 fd7a 	bl	801635c <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8002868:	4844      	ldr	r0, [pc, #272]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 800286a:	f00f fea7 	bl	80125bc <DbgTraceGetFileName>
 800286e:	4601      	mov	r1, r0
 8002870:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8002874:	4a42      	ldr	r2, [pc, #264]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 8002876:	4843      	ldr	r0, [pc, #268]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002878:	f013 fd70 	bl	801635c <iprintf>
 800287c:	4845      	ldr	r0, [pc, #276]	@ (8002994 <APPE_SysUserEvtRx+0x1e4>)
 800287e:	f013 fd6d 	bl	801635c <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f8e0 	bl	8002a48 <APPE_SysEvtReadyProcessing>
    break;
 8002888:	e073      	b.n	8002972 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800288a:	483c      	ldr	r0, [pc, #240]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 800288c:	f00f fe96 	bl	80125bc <DbgTraceGetFileName>
 8002890:	4601      	mov	r1, r0
 8002892:	f240 1373 	movw	r3, #371	@ 0x173
 8002896:	4a3a      	ldr	r2, [pc, #232]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 8002898:	483a      	ldr	r0, [pc, #232]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 800289a:	f013 fd5f 	bl	801635c <iprintf>
 800289e:	483e      	ldr	r0, [pc, #248]	@ (8002998 <APPE_SysUserEvtRx+0x1e8>)
 80028a0:	f013 fd5c 	bl	801635c <iprintf>
    APPE_SysEvtError(pPayload);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f885 	bl	80029b4 <APPE_SysEvtError>
    break;
 80028aa:	e062      	b.n	8002972 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 80028ac:	4833      	ldr	r0, [pc, #204]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 80028ae:	f00f fe85 	bl	80125bc <DbgTraceGetFileName>
 80028b2:	4601      	mov	r1, r0
 80028b4:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 80028b8:	4a31      	ldr	r2, [pc, #196]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 80028ba:	4832      	ldr	r0, [pc, #200]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 80028bc:	f013 fd4e 	bl	801635c <iprintf>
 80028c0:	4836      	ldr	r0, [pc, #216]	@ (800299c <APPE_SysUserEvtRx+0x1ec>)
 80028c2:	f013 fdbb 	bl	801643c <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 80028c6:	482d      	ldr	r0, [pc, #180]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 80028c8:	f00f fe78 	bl	80125bc <DbgTraceGetFileName>
 80028cc:	4601      	mov	r1, r0
 80028ce:	f240 1379 	movw	r3, #377	@ 0x179
 80028d2:	4a2b      	ldr	r2, [pc, #172]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 80028d4:	482b      	ldr	r0, [pc, #172]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 80028d6:	f013 fd41 	bl	801635c <iprintf>
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3302      	adds	r3, #2
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3302      	adds	r3, #2
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	461a      	mov	r2, r3
 80028e8:	482d      	ldr	r0, [pc, #180]	@ (80029a0 <APPE_SysUserEvtRx+0x1f0>)
 80028ea:	f013 fd37 	bl	801635c <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 80028ee:	e040      	b.n	8002972 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 80028f0:	4822      	ldr	r0, [pc, #136]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 80028f2:	f00f fe63 	bl	80125bc <DbgTraceGetFileName>
 80028f6:	4601      	mov	r1, r0
 80028f8:	f240 137f 	movw	r3, #383	@ 0x17f
 80028fc:	4a20      	ldr	r2, [pc, #128]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 80028fe:	4821      	ldr	r0, [pc, #132]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002900:	f013 fd2c 	bl	801635c <iprintf>
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	3302      	adds	r3, #2
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4619      	mov	r1, r3
 800290c:	4825      	ldr	r0, [pc, #148]	@ (80029a4 <APPE_SysUserEvtRx+0x1f4>)
 800290e:	f013 fd25 	bl	801635c <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8002912:	e02e      	b.n	8002972 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8002914:	4819      	ldr	r0, [pc, #100]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 8002916:	f00f fe51 	bl	80125bc <DbgTraceGetFileName>
 800291a:	4601      	mov	r1, r0
 800291c:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8002920:	4a17      	ldr	r2, [pc, #92]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 8002922:	4818      	ldr	r0, [pc, #96]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002924:	f013 fd1a 	bl	801635c <iprintf>
 8002928:	481f      	ldr	r0, [pc, #124]	@ (80029a8 <APPE_SysUserEvtRx+0x1f8>)
 800292a:	f013 fd17 	bl	801635c <iprintf>
    break;
 800292e:	e020      	b.n	8002972 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8002930:	4812      	ldr	r0, [pc, #72]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 8002932:	f00f fe43 	bl	80125bc <DbgTraceGetFileName>
 8002936:	4601      	mov	r1, r0
 8002938:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 800293c:	4a10      	ldr	r2, [pc, #64]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 800293e:	4811      	ldr	r0, [pc, #68]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002940:	f013 fd0c 	bl	801635c <iprintf>
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	3302      	adds	r3, #2
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4619      	mov	r1, r3
 800294c:	4817      	ldr	r0, [pc, #92]	@ (80029ac <APPE_SysUserEvtRx+0x1fc>)
 800294e:	f013 fd05 	bl	801635c <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8002952:	e00e      	b.n	8002972 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8002954:	4809      	ldr	r0, [pc, #36]	@ (800297c <APPE_SysUserEvtRx+0x1cc>)
 8002956:	f00f fe31 	bl	80125bc <DbgTraceGetFileName>
 800295a:	4601      	mov	r1, r0
 800295c:	f240 138d 	movw	r3, #397	@ 0x18d
 8002960:	4a07      	ldr	r2, [pc, #28]	@ (8002980 <APPE_SysUserEvtRx+0x1d0>)
 8002962:	4808      	ldr	r0, [pc, #32]	@ (8002984 <APPE_SysUserEvtRx+0x1d4>)
 8002964:	f013 fcfa 	bl	801635c <iprintf>
 8002968:	4811      	ldr	r0, [pc, #68]	@ (80029b0 <APPE_SysUserEvtRx+0x200>)
 800296a:	f013 fcf7 	bl	801635c <iprintf>
    break;
 800296e:	e000      	b.n	8002972 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8002970:	bf00      	nop
  }

  return;
 8002972:	bf00      	nop
}
 8002974:	3720      	adds	r7, #32
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	08018670 	.word	0x08018670
 8002980:	0801a158 	.word	0x0801a158
 8002984:	08018688 	.word	0x08018688
 8002988:	0801869c 	.word	0x0801869c
 800298c:	080186c0 	.word	0x080186c0
 8002990:	080186dc 	.word	0x080186dc
 8002994:	080186f4 	.word	0x080186f4
 8002998:	08018714 	.word	0x08018714
 800299c:	08018738 	.word	0x08018738
 80029a0:	08018788 	.word	0x08018788
 80029a4:	080187b0 	.word	0x080187b0
 80029a8:	080187ec 	.word	0x080187ec
 80029ac:	08018810 	.word	0x08018810
 80029b0:	0801884c 	.word	0x0801884c

080029b4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	330b      	adds	r3, #11
 80029c2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	3302      	adds	r3, #2
 80029c8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80029ca:	4819      	ldr	r0, [pc, #100]	@ (8002a30 <APPE_SysEvtError+0x7c>)
 80029cc:	f00f fdf6 	bl	80125bc <DbgTraceGetFileName>
 80029d0:	4601      	mov	r1, r0
 80029d2:	f240 13a5 	movw	r3, #421	@ 0x1a5
 80029d6:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <APPE_SysEvtError+0x80>)
 80029d8:	4817      	ldr	r0, [pc, #92]	@ (8002a38 <APPE_SysEvtError+0x84>)
 80029da:	f013 fcbf 	bl	801635c <iprintf>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	4619      	mov	r1, r3
 80029e4:	4815      	ldr	r0, [pc, #84]	@ (8002a3c <APPE_SysEvtError+0x88>)
 80029e6:	f013 fcb9 	bl	801635c <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80029f2:	480f      	ldr	r0, [pc, #60]	@ (8002a30 <APPE_SysEvtError+0x7c>)
 80029f4:	f00f fde2 	bl	80125bc <DbgTraceGetFileName>
 80029f8:	4601      	mov	r1, r0
 80029fa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80029fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <APPE_SysEvtError+0x80>)
 8002a00:	480d      	ldr	r0, [pc, #52]	@ (8002a38 <APPE_SysEvtError+0x84>)
 8002a02:	f013 fcab 	bl	801635c <iprintf>
 8002a06:	480e      	ldr	r0, [pc, #56]	@ (8002a40 <APPE_SysEvtError+0x8c>)
 8002a08:	f013 fd18 	bl	801643c <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8002a0c:	e00d      	b.n	8002a2a <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8002a0e:	4808      	ldr	r0, [pc, #32]	@ (8002a30 <APPE_SysEvtError+0x7c>)
 8002a10:	f00f fdd4 	bl	80125bc <DbgTraceGetFileName>
 8002a14:	4601      	mov	r1, r0
 8002a16:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8002a1a:	4a06      	ldr	r2, [pc, #24]	@ (8002a34 <APPE_SysEvtError+0x80>)
 8002a1c:	4806      	ldr	r0, [pc, #24]	@ (8002a38 <APPE_SysEvtError+0x84>)
 8002a1e:	f013 fc9d 	bl	801635c <iprintf>
 8002a22:	4808      	ldr	r0, [pc, #32]	@ (8002a44 <APPE_SysEvtError+0x90>)
 8002a24:	f013 fd0a 	bl	801643c <puts>
  return;
 8002a28:	bf00      	nop
}
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	08018670 	.word	0x08018670
 8002a34:	0801a16c 	.word	0x0801a16c
 8002a38:	08018688 	.word	0x08018688
 8002a3c:	08018870 	.word	0x08018870
 8002a40:	080188a0 	.word	0x080188a0
 8002a44:	080188dc 	.word	0x080188dc

08002a48 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	@ 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8002a50:	f107 0308 	add.w	r3, r7, #8
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
 8002a58:	605a      	str	r2, [r3, #4]
 8002a5a:	609a      	str	r2, [r3, #8]
 8002a5c:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	330b      	adds	r3, #11
 8002a6c:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3302      	adds	r3, #2
 8002a72:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d146      	bne.n	8002b0a <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8002a7c:	4836      	ldr	r0, [pc, #216]	@ (8002b58 <APPE_SysEvtReadyProcessing+0x110>)
 8002a7e:	f00f fd9d 	bl	80125bc <DbgTraceGetFileName>
 8002a82:	4601      	mov	r1, r0
 8002a84:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8002a88:	4a34      	ldr	r2, [pc, #208]	@ (8002b5c <APPE_SysEvtReadyProcessing+0x114>)
 8002a8a:	4835      	ldr	r0, [pc, #212]	@ (8002b60 <APPE_SysEvtReadyProcessing+0x118>)
 8002a8c:	f013 fc66 	bl	801635c <iprintf>
 8002a90:	4834      	ldr	r0, [pc, #208]	@ (8002b64 <APPE_SysEvtReadyProcessing+0x11c>)
 8002a92:	f013 fcd3 	bl	801643c <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8002a96:	f7ff fb91 	bl	80021bc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8002a9a:	230f      	movs	r3, #15
 8002a9c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8002a9e:	237f      	movs	r3, #127	@ 0x7f
 8002aa0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8002aa2:	f7ff fce3 	bl	800246c <LL_DBGMCU_GetRevisionID>
 8002aa6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8002aa8:	482b      	ldr	r0, [pc, #172]	@ (8002b58 <APPE_SysEvtReadyProcessing+0x110>)
 8002aaa:	f00f fd87 	bl	80125bc <DbgTraceGetFileName>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8002ab4:	4a29      	ldr	r2, [pc, #164]	@ (8002b5c <APPE_SysEvtReadyProcessing+0x114>)
 8002ab6:	482a      	ldr	r0, [pc, #168]	@ (8002b60 <APPE_SysEvtReadyProcessing+0x118>)
 8002ab8:	f013 fc50 	bl	801635c <iprintf>
 8002abc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002abe:	482a      	ldr	r0, [pc, #168]	@ (8002b68 <APPE_SysEvtReadyProcessing+0x120>)
 8002ac0:	f013 fc4c 	bl	801635c <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8002aca:	f7ff fcc1 	bl	8002450 <LL_DBGMCU_GetDeviceID>
 8002ace:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8002ad0:	4821      	ldr	r0, [pc, #132]	@ (8002b58 <APPE_SysEvtReadyProcessing+0x110>)
 8002ad2:	f00f fd73 	bl	80125bc <DbgTraceGetFileName>
 8002ad6:	4601      	mov	r1, r0
 8002ad8:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8002adc:	4a1f      	ldr	r2, [pc, #124]	@ (8002b5c <APPE_SysEvtReadyProcessing+0x114>)
 8002ade:	4820      	ldr	r0, [pc, #128]	@ (8002b60 <APPE_SysEvtReadyProcessing+0x118>)
 8002ae0:	f013 fc3c 	bl	801635c <iprintf>
 8002ae4:	6a39      	ldr	r1, [r7, #32]
 8002ae6:	4821      	ldr	r0, [pc, #132]	@ (8002b6c <APPE_SysEvtReadyProcessing+0x124>)
 8002ae8:	f013 fc38 	bl	801635c <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8002aec:	6a3b      	ldr	r3, [r7, #32]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8002af2:	f107 0308 	add.w	r3, r7, #8
 8002af6:	4618      	mov	r0, r3
 8002af8:	f00e ff80 	bl	80119fc <SHCI_C2_Config>

    APP_BLE_Init();
 8002afc:	f010 fb10 	bl	8013120 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8002b00:	2100      	movs	r1, #0
 8002b02:	2001      	movs	r0, #1
 8002b04:	f013 f8fe 	bl	8015d04 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8002b08:	e022      	b.n	8002b50 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d110      	bne.n	8002b34 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8002b12:	4811      	ldr	r0, [pc, #68]	@ (8002b58 <APPE_SysEvtReadyProcessing+0x110>)
 8002b14:	f00f fd52 	bl	80125bc <DbgTraceGetFileName>
 8002b18:	4601      	mov	r1, r0
 8002b1a:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8002b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8002b5c <APPE_SysEvtReadyProcessing+0x114>)
 8002b20:	480f      	ldr	r0, [pc, #60]	@ (8002b60 <APPE_SysEvtReadyProcessing+0x118>)
 8002b22:	f013 fc1b 	bl	801635c <iprintf>
 8002b26:	4812      	ldr	r0, [pc, #72]	@ (8002b70 <APPE_SysEvtReadyProcessing+0x128>)
 8002b28:	f013 fc18 	bl	801635c <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]
  return;
 8002b32:	e00d      	b.n	8002b50 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8002b34:	4808      	ldr	r0, [pc, #32]	@ (8002b58 <APPE_SysEvtReadyProcessing+0x110>)
 8002b36:	f00f fd41 	bl	80125bc <DbgTraceGetFileName>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8002b40:	4a06      	ldr	r2, [pc, #24]	@ (8002b5c <APPE_SysEvtReadyProcessing+0x114>)
 8002b42:	4807      	ldr	r0, [pc, #28]	@ (8002b60 <APPE_SysEvtReadyProcessing+0x118>)
 8002b44:	f013 fc0a 	bl	801635c <iprintf>
 8002b48:	480a      	ldr	r0, [pc, #40]	@ (8002b74 <APPE_SysEvtReadyProcessing+0x12c>)
 8002b4a:	f013 fc07 	bl	801635c <iprintf>
  return;
 8002b4e:	bf00      	nop
}
 8002b50:	3728      	adds	r7, #40	@ 0x28
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	08018670 	.word	0x08018670
 8002b5c:	0801a180 	.word	0x0801a180
 8002b60:	08018688 	.word	0x08018688
 8002b64:	08018914 	.word	0x08018914
 8002b68:	08018930 	.word	0x08018930
 8002b6c:	08018954 	.word	0x08018954
 8002b70:	08018974 	.word	0x08018974
 8002b74:	080189a8 	.word	0x080189a8

08002b78 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f002 f984 	bl	8004e8c <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d00a      	beq.n	8002ba8 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8002b92:	f002 f993 	bl	8004ebc <HAL_GetTickFreq>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ba0:	e002      	b.n	8002ba8 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8002ba2:	f7ff fcd3 	bl	800254c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8002ba6:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8002ba8:	f002 f970 	bl	8004e8c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d8f4      	bhi.n	8002ba2 <HAL_Delay+0x2a>
  }
}
 8002bb8:	bf00      	nop
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	f013 f8cb 	bl	8015d64 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8002bd6:	bf00      	nop
}
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002bea:	f04f 30ff 	mov.w	r0, #4294967295
 8002bee:	f013 f8b9 	bl	8015d64 <UTIL_SEQ_Run>
  return;
 8002bf2:	bf00      	nop
}
 8002bf4:	3708      	adds	r7, #8
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002c02:	2100      	movs	r1, #0
 8002c04:	2040      	movs	r0, #64	@ 0x40
 8002c06:	f013 f9cb 	bl	8015fa0 <UTIL_SEQ_SetTask>
  return;
 8002c0a:	bf00      	nop
}
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b082      	sub	sp, #8
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f013 fa2c 	bl	8016078 <UTIL_SEQ_SetEvt>
  return;
 8002c20:	bf00      	nop
}
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8002c30:	2002      	movs	r0, #2
 8002c32:	f013 fa41 	bl	80160b8 <UTIL_SEQ_WaitEvt>
  return;
 8002c36:	bf00      	nop
}
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <Debug_Init>:
uint16_t u16dummy =0;


//-----------------------------------------------------------------------------------
void Debug_Init (void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0

	DIAG ("\t\tDebug initialised\r\n");
 8002c44:	4803      	ldr	r0, [pc, #12]	@ (8002c54 <Debug_Init+0x14>)
 8002c46:	f000 f827 	bl	8002c98 <DIAG>
	HAL_Delay(10);
 8002c4a:	200a      	movs	r0, #10
 8002c4c:	f7ff ff94 	bl	8002b78 <HAL_Delay>
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	080189dc 	.word	0x080189dc

08002c58 <Debug_Control>:

//-----------------------------------------------------------------------------------
void Debug_Control (void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0

#ifndef BLE_Debug
#ifdef DATA_DEBUG_EN

		#ifndef IMU_ENABLE
			if ( tsDebug.bReleaseAFEData )
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c90 <Debug_Control+0x38>)
 8002c5e:	f893 3266 	ldrb.w	r3, [r3, #614]	@ 0x266
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d011      	beq.n	8002c8a <Debug_Control+0x32>
			{
				DIAG ( "%d,%d,%d\r\n", tsDebug.i16TxTMR1, tsDebug.i16TxTMR2, tsDebug.i16TxEMG );
 8002c66:	4b0a      	ldr	r3, [pc, #40]	@ (8002c90 <Debug_Control+0x38>)
 8002c68:	f9b3 3260 	ldrsh.w	r3, [r3, #608]	@ 0x260
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4b08      	ldr	r3, [pc, #32]	@ (8002c90 <Debug_Control+0x38>)
 8002c70:	f9b3 3262 	ldrsh.w	r3, [r3, #610]	@ 0x262
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <Debug_Control+0x38>)
 8002c78:	f9b3 3264 	ldrsh.w	r3, [r3, #612]	@ 0x264
 8002c7c:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <Debug_Control+0x3c>)
 8002c7e:	f000 f80b 	bl	8002c98 <DIAG>
//				DIAG ( "%d,%d,%d,%d,%d\r\n", tsDebug.i16TxTMR1, tsDebug.i16TxTMR2, tsDebug.i16TxEMG, tsDebug.u8PacketCount[0], tsDebug.u8PacketCount[1] );

//				DIAG (  "[%d - %d]-%d,%d,%d,%d\r\n",
//						AFE.u16SPS, IMU.u16SPS,
//						tsDebug.i16TxTMR1, tsDebug.i16TxTMR2 );
				tsDebug.bReleaseAFEData= false;
 8002c82:	4b03      	ldr	r3, [pc, #12]	@ (8002c90 <Debug_Control+0x38>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2266 	strb.w	r2, [r3, #614]	@ 0x266
			}
		#endif

#endif
#endif
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000131c 	.word	0x2000131c
 8002c94:	080189f4 	.word	0x080189f4

08002c98 <DIAG>:
   // HAL_UART_Transmit_DMA(&huart1, (uint8_t*)buffer, strlen(buffer) );
   // HAL_UART_DMAResume(&huart1);
}
#else

void DIAG(const char *fmt, ...) {
 8002c98:	b40f      	push	{r0, r1, r2, r3}
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	f6ad 7dd8 	subw	sp, sp, #4056	@ 0xfd8
 8002ca0:	af00      	add	r7, sp, #0
    char buffer[4048];
    va_list args;
    va_start(args, fmt);
 8002ca2:	f607 72e4 	addw	r2, r7, #4068	@ 0xfe4
 8002ca6:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002caa:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002cae:	601a      	str	r2, [r3, #0]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002cb0:	f607 73d8 	addw	r3, r7, #4056	@ 0xfd8
 8002cb4:	f6a3 73d4 	subw	r3, r3, #4052	@ 0xfd4
 8002cb8:	f107 0008 	add.w	r0, r7, #8
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f8d7 2fe0 	ldr.w	r2, [r7, #4064]	@ 0xfe0
 8002cc2:	f44f 617d 	mov.w	r1, #4048	@ 0xfd0
 8002cc6:	f013 fc2f 	bl	8016528 <vsniprintf>
    va_end(args);
    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002cca:	f107 0308 	add.w	r3, r7, #8
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fa56 	bl	8000180 <strlen>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	f107 0308 	add.w	r3, r7, #8
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f012 fb5c 	bl	801539c <CDC_Transmit_FS>
}
 8002ce4:	bf00      	nop
 8002ce6:	f607 77d8 	addw	r7, r7, #4056	@ 0xfd8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002cf0:	b004      	add	sp, #16
 8002cf2:	4770      	bx	lr

08002cf4 <HAL_GPIO_EXTI_Callback>:
	HAL_Delay (10);
}

//----------------------------------------------------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	80fb      	strh	r3, [r7, #6]

	//----------------------------------------------
	if (GPIO_Pin == ADS_DRDY_Pin)
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b80      	cmp	r3, #128	@ 0x80
 8002d02:	d105      	bne.n	8002d10 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		ADS.DRDY = true;
 8002d04:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_GPIO_EXTI_Callback+0x58>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
		__HAL_GPIO_EXTI_CLEAR_IT(ADS_DRDY_Pin);
 8002d0a:	4b11      	ldr	r3, [pc, #68]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d0c:	2280      	movs	r2, #128	@ 0x80
 8002d0e:	60da      	str	r2, [r3, #12]
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT1_Pin)
 8002d10:	88fb      	ldrh	r3, [r7, #6]
 8002d12:	2b10      	cmp	r3, #16
 8002d14:	d109      	bne.n	8002d2a <HAL_GPIO_EXTI_Callback+0x36>
	{
		IMU.bInt1 = true;
 8002d16:	4b0f      	ldr	r3, [pc, #60]	@ (8002d54 <HAL_GPIO_EXTI_Callback+0x60>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 21c6 	strb.w	r2, [r3, #454]	@ 0x1c6
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT1_Pin);
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d20:	2210      	movs	r2, #16
 8002d22:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT1 \r\n");
 8002d24:	480c      	ldr	r0, [pc, #48]	@ (8002d58 <HAL_GPIO_EXTI_Callback+0x64>)
 8002d26:	f7ff ffb7 	bl	8002c98 <DIAG>
	}

	//----------------------------------------------
	if (GPIO_Pin == IMU_INT2_Pin)
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	2b20      	cmp	r3, #32
 8002d2e:	d109      	bne.n	8002d44 <HAL_GPIO_EXTI_Callback+0x50>
	{
		IMU.bInt2 = true;
 8002d30:	4b08      	ldr	r3, [pc, #32]	@ (8002d54 <HAL_GPIO_EXTI_Callback+0x60>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 21c7 	strb.w	r2, [r3, #455]	@ 0x1c7
		__HAL_GPIO_EXTI_CLEAR_IT(IMU_INT2_Pin);
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	60da      	str	r2, [r3, #12]
		DIAG (" IMU_INT2 \r\n");
 8002d3e:	4807      	ldr	r0, [pc, #28]	@ (8002d5c <HAL_GPIO_EXTI_Callback+0x68>)
 8002d40:	f7ff ffaa 	bl	8002c98 <DIAG>
	}

}
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	2000020c 	.word	0x2000020c
 8002d50:	58000800 	.word	0x58000800
 8002d54:	20000e78 	.word	0x20000e78
 8002d58:	08018a18 	.word	0x08018a18
 8002d5c:	08018a28 	.word	0x08018a28

08002d60 <LL_EXTI_EnableIT_0_31>:
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002d68:	4b06      	ldr	r3, [pc, #24]	@ (8002d84 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002d6e:	4905      	ldr	r1, [pc, #20]	@ (8002d84 <LL_EXTI_EnableIT_0_31+0x24>)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	58000800 	.word	0x58000800

08002d88 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4904      	ldr	r1, [pc, #16]	@ (8002da8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	600b      	str	r3, [r1, #0]

}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	58000800 	.word	0x58000800

08002dac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002db2:	4b0d      	ldr	r3, [pc, #52]	@ (8002de8 <ReadRtcSsrValue+0x3c>)
 8002db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002dba:	4b0b      	ldr	r3, [pc, #44]	@ (8002de8 <ReadRtcSsrValue+0x3c>)
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002dc2:	e005      	b.n	8002dd0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <ReadRtcSsrValue+0x3c>)
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1f5      	bne.n	8002dc4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002dd8:	683b      	ldr	r3, [r7, #0]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40002800 	.word	0x40002800

08002dec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	460a      	mov	r2, r1
 8002df6:	71fb      	strb	r3, [r7, #7]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002dfc:	79ba      	ldrb	r2, [r7, #6]
 8002dfe:	491d      	ldr	r1, [pc, #116]	@ (8002e74 <LinkTimerAfter+0x88>)
 8002e00:	4613      	mov	r3, r2
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	4413      	add	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	440b      	add	r3, r1
 8002e0a:	3315      	adds	r3, #21
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002e10:	7bfb      	ldrb	r3, [r7, #15]
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d009      	beq.n	8002e2a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002e16:	7bfa      	ldrb	r2, [r7, #15]
 8002e18:	4916      	ldr	r1, [pc, #88]	@ (8002e74 <LinkTimerAfter+0x88>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	440b      	add	r3, r1
 8002e24:	3314      	adds	r3, #20
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
 8002e2c:	4911      	ldr	r1, [pc, #68]	@ (8002e74 <LinkTimerAfter+0x88>)
 8002e2e:	4613      	mov	r3, r2
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	4413      	add	r3, r2
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	440b      	add	r3, r1
 8002e38:	3315      	adds	r3, #21
 8002e3a:	7bfa      	ldrb	r2, [r7, #15]
 8002e3c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002e3e:	79fa      	ldrb	r2, [r7, #7]
 8002e40:	490c      	ldr	r1, [pc, #48]	@ (8002e74 <LinkTimerAfter+0x88>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	79ba      	ldrb	r2, [r7, #6]
 8002e50:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002e52:	79ba      	ldrb	r2, [r7, #6]
 8002e54:	4907      	ldr	r1, [pc, #28]	@ (8002e74 <LinkTimerAfter+0x88>)
 8002e56:	4613      	mov	r3, r2
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	4413      	add	r3, r2
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	440b      	add	r3, r1
 8002e60:	3315      	adds	r3, #21
 8002e62:	79fa      	ldrb	r2, [r7, #7]
 8002e64:	701a      	strb	r2, [r3, #0]

  return;
 8002e66:	bf00      	nop
}
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20001588 	.word	0x20001588

08002e78 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	460a      	mov	r2, r1
 8002e82:	71fb      	strb	r3, [r7, #7]
 8002e84:	4613      	mov	r3, r2
 8002e86:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002e88:	4b29      	ldr	r3, [pc, #164]	@ (8002f30 <LinkTimerBefore+0xb8>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	79ba      	ldrb	r2, [r7, #6]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d032      	beq.n	8002efa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002e94:	79ba      	ldrb	r2, [r7, #6]
 8002e96:	4927      	ldr	r1, [pc, #156]	@ (8002f34 <LinkTimerBefore+0xbc>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	4413      	add	r3, r2
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3314      	adds	r3, #20
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002ea8:	7bfa      	ldrb	r2, [r7, #15]
 8002eaa:	4922      	ldr	r1, [pc, #136]	@ (8002f34 <LinkTimerBefore+0xbc>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	4413      	add	r3, r2
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3315      	adds	r3, #21
 8002eb8:	79fa      	ldrb	r2, [r7, #7]
 8002eba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002ebc:	79fa      	ldrb	r2, [r7, #7]
 8002ebe:	491d      	ldr	r1, [pc, #116]	@ (8002f34 <LinkTimerBefore+0xbc>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	440b      	add	r3, r1
 8002eca:	3315      	adds	r3, #21
 8002ecc:	79ba      	ldrb	r2, [r7, #6]
 8002ece:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002ed0:	79fa      	ldrb	r2, [r7, #7]
 8002ed2:	4918      	ldr	r1, [pc, #96]	@ (8002f34 <LinkTimerBefore+0xbc>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	4413      	add	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	440b      	add	r3, r1
 8002ede:	3314      	adds	r3, #20
 8002ee0:	7bfa      	ldrb	r2, [r7, #15]
 8002ee2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002ee4:	79ba      	ldrb	r2, [r7, #6]
 8002ee6:	4913      	ldr	r1, [pc, #76]	@ (8002f34 <LinkTimerBefore+0xbc>)
 8002ee8:	4613      	mov	r3, r2
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3314      	adds	r3, #20
 8002ef4:	79fa      	ldrb	r2, [r7, #7]
 8002ef6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002ef8:	e014      	b.n	8002f24 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002efa:	79fa      	ldrb	r2, [r7, #7]
 8002efc:	490d      	ldr	r1, [pc, #52]	@ (8002f34 <LinkTimerBefore+0xbc>)
 8002efe:	4613      	mov	r3, r2
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	4413      	add	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	440b      	add	r3, r1
 8002f08:	3315      	adds	r3, #21
 8002f0a:	79ba      	ldrb	r2, [r7, #6]
 8002f0c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002f0e:	79ba      	ldrb	r2, [r7, #6]
 8002f10:	4908      	ldr	r1, [pc, #32]	@ (8002f34 <LinkTimerBefore+0xbc>)
 8002f12:	4613      	mov	r3, r2
 8002f14:	005b      	lsls	r3, r3, #1
 8002f16:	4413      	add	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3314      	adds	r3, #20
 8002f1e:	79fa      	ldrb	r2, [r7, #7]
 8002f20:	701a      	strb	r2, [r3, #0]
  return;
 8002f22:	bf00      	nop
}
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20001618 	.word	0x20001618
 8002f34:	20001588 	.word	0x20001588

08002f38 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002f42:	4b4e      	ldr	r3, [pc, #312]	@ (800307c <linkTimer+0x144>)
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d118      	bne.n	8002f7e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002f4c:	4b4b      	ldr	r3, [pc, #300]	@ (800307c <linkTimer+0x144>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b4b      	ldr	r3, [pc, #300]	@ (8003080 <linkTimer+0x148>)
 8002f54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002f56:	4a49      	ldr	r2, [pc, #292]	@ (800307c <linkTimer+0x144>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002f5c:	79fa      	ldrb	r2, [r7, #7]
 8002f5e:	4949      	ldr	r1, [pc, #292]	@ (8003084 <linkTimer+0x14c>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	440b      	add	r3, r1
 8002f6a:	3315      	adds	r3, #21
 8002f6c:	2206      	movs	r2, #6
 8002f6e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002f70:	4b45      	ldr	r3, [pc, #276]	@ (8003088 <linkTimer+0x150>)
 8002f72:	f04f 32ff 	mov.w	r2, #4294967295
 8002f76:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	81fb      	strh	r3, [r7, #14]
 8002f7c:	e078      	b.n	8003070 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002f7e:	f000 f909 	bl	8003194 <ReturnTimeElapsed>
 8002f82:	4603      	mov	r3, r0
 8002f84:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002f86:	79fa      	ldrb	r2, [r7, #7]
 8002f88:	493e      	ldr	r1, [pc, #248]	@ (8003084 <linkTimer+0x14c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	440b      	add	r3, r1
 8002f94:	3308      	adds	r3, #8
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	89fb      	ldrh	r3, [r7, #14]
 8002f9a:	79fa      	ldrb	r2, [r7, #7]
 8002f9c:	4419      	add	r1, r3
 8002f9e:	4839      	ldr	r0, [pc, #228]	@ (8003084 <linkTimer+0x14c>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	4413      	add	r3, r2
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4403      	add	r3, r0
 8002faa:	3308      	adds	r3, #8
 8002fac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002fae:	79fa      	ldrb	r2, [r7, #7]
 8002fb0:	4934      	ldr	r1, [pc, #208]	@ (8003084 <linkTimer+0x14c>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	4413      	add	r3, r2
 8002fb8:	00db      	lsls	r3, r3, #3
 8002fba:	440b      	add	r3, r1
 8002fbc:	3308      	adds	r3, #8
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800307c <linkTimer+0x144>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	4619      	mov	r1, r3
 8002fca:	4a2e      	ldr	r2, [pc, #184]	@ (8003084 <linkTimer+0x14c>)
 8002fcc:	460b      	mov	r3, r1
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	440b      	add	r3, r1
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d337      	bcc.n	8003050 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002fe0:	4b26      	ldr	r3, [pc, #152]	@ (800307c <linkTimer+0x144>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002fe6:	7b7a      	ldrb	r2, [r7, #13]
 8002fe8:	4926      	ldr	r1, [pc, #152]	@ (8003084 <linkTimer+0x14c>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3315      	adds	r3, #21
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002ffa:	e013      	b.n	8003024 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002ffc:	7b7a      	ldrb	r2, [r7, #13]
 8002ffe:	4921      	ldr	r1, [pc, #132]	@ (8003084 <linkTimer+0x14c>)
 8003000:	4613      	mov	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	4413      	add	r3, r2
 8003006:	00db      	lsls	r3, r3, #3
 8003008:	440b      	add	r3, r1
 800300a:	3315      	adds	r3, #21
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8003010:	7b7a      	ldrb	r2, [r7, #13]
 8003012:	491c      	ldr	r1, [pc, #112]	@ (8003084 <linkTimer+0x14c>)
 8003014:	4613      	mov	r3, r2
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3315      	adds	r3, #21
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8003024:	7b3b      	ldrb	r3, [r7, #12]
 8003026:	2b06      	cmp	r3, #6
 8003028:	d00b      	beq.n	8003042 <linkTimer+0x10a>
 800302a:	7b3a      	ldrb	r2, [r7, #12]
 800302c:	4915      	ldr	r1, [pc, #84]	@ (8003084 <linkTimer+0x14c>)
 800302e:	4613      	mov	r3, r2
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4413      	add	r3, r2
 8003034:	00db      	lsls	r3, r3, #3
 8003036:	440b      	add	r3, r1
 8003038:	3308      	adds	r3, #8
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	d2dc      	bcs.n	8002ffc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8003042:	7b7a      	ldrb	r2, [r7, #13]
 8003044:	79fb      	ldrb	r3, [r7, #7]
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fecf 	bl	8002dec <LinkTimerAfter>
 800304e:	e00f      	b.n	8003070 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8003050:	4b0a      	ldr	r3, [pc, #40]	@ (800307c <linkTimer+0x144>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b2da      	uxtb	r2, r3
 8003056:	79fb      	ldrb	r3, [r7, #7]
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff ff0c 	bl	8002e78 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8003060:	4b06      	ldr	r3, [pc, #24]	@ (800307c <linkTimer+0x144>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b06      	ldr	r3, [pc, #24]	@ (8003080 <linkTimer+0x148>)
 8003068:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800306a:	4a04      	ldr	r2, [pc, #16]	@ (800307c <linkTimer+0x144>)
 800306c:	79fb      	ldrb	r3, [r7, #7]
 800306e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8003070:	89fb      	ldrh	r3, [r7, #14]
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20001618 	.word	0x20001618
 8003080:	20001619 	.word	0x20001619
 8003084:	20001588 	.word	0x20001588
 8003088:	2000161c 	.word	0x2000161c

0800308c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	460a      	mov	r2, r1
 8003096:	71fb      	strb	r3, [r7, #7]
 8003098:	4613      	mov	r3, r2
 800309a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800309c:	4b39      	ldr	r3, [pc, #228]	@ (8003184 <UnlinkTimer+0xf8>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	79fa      	ldrb	r2, [r7, #7]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d111      	bne.n	80030cc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80030a8:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <UnlinkTimer+0xf8>)
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4b36      	ldr	r3, [pc, #216]	@ (8003188 <UnlinkTimer+0xfc>)
 80030b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80030b2:	79fa      	ldrb	r2, [r7, #7]
 80030b4:	4935      	ldr	r1, [pc, #212]	@ (800318c <UnlinkTimer+0x100>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	440b      	add	r3, r1
 80030c0:	3315      	adds	r3, #21
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003184 <UnlinkTimer+0xf8>)
 80030c8:	701a      	strb	r2, [r3, #0]
 80030ca:	e03e      	b.n	800314a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80030cc:	79fa      	ldrb	r2, [r7, #7]
 80030ce:	492f      	ldr	r1, [pc, #188]	@ (800318c <UnlinkTimer+0x100>)
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	3314      	adds	r3, #20
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80030e0:	79fa      	ldrb	r2, [r7, #7]
 80030e2:	492a      	ldr	r1, [pc, #168]	@ (800318c <UnlinkTimer+0x100>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	4413      	add	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	440b      	add	r3, r1
 80030ee:	3315      	adds	r3, #21
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80030f4:	79f9      	ldrb	r1, [r7, #7]
 80030f6:	7bfa      	ldrb	r2, [r7, #15]
 80030f8:	4824      	ldr	r0, [pc, #144]	@ (800318c <UnlinkTimer+0x100>)
 80030fa:	460b      	mov	r3, r1
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	440b      	add	r3, r1
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	4403      	add	r3, r0
 8003104:	3315      	adds	r3, #21
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	b2d8      	uxtb	r0, r3
 800310a:	4920      	ldr	r1, [pc, #128]	@ (800318c <UnlinkTimer+0x100>)
 800310c:	4613      	mov	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	4413      	add	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	440b      	add	r3, r1
 8003116:	3315      	adds	r3, #21
 8003118:	4602      	mov	r2, r0
 800311a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800311c:	7bbb      	ldrb	r3, [r7, #14]
 800311e:	2b06      	cmp	r3, #6
 8003120:	d013      	beq.n	800314a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8003122:	79f9      	ldrb	r1, [r7, #7]
 8003124:	7bba      	ldrb	r2, [r7, #14]
 8003126:	4819      	ldr	r0, [pc, #100]	@ (800318c <UnlinkTimer+0x100>)
 8003128:	460b      	mov	r3, r1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	440b      	add	r3, r1
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	4403      	add	r3, r0
 8003132:	3314      	adds	r3, #20
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	b2d8      	uxtb	r0, r3
 8003138:	4914      	ldr	r1, [pc, #80]	@ (800318c <UnlinkTimer+0x100>)
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3314      	adds	r3, #20
 8003146:	4602      	mov	r2, r0
 8003148:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800314a:	79fa      	ldrb	r2, [r7, #7]
 800314c:	490f      	ldr	r1, [pc, #60]	@ (800318c <UnlinkTimer+0x100>)
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	440b      	add	r3, r1
 8003158:	330c      	adds	r3, #12
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800315e:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <UnlinkTimer+0xf8>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b06      	cmp	r3, #6
 8003166:	d107      	bne.n	8003178 <UnlinkTimer+0xec>
 8003168:	79bb      	ldrb	r3, [r7, #6]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d104      	bne.n	8003178 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800316e:	4b08      	ldr	r3, [pc, #32]	@ (8003190 <UnlinkTimer+0x104>)
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	601a      	str	r2, [r3, #0]
  }

  return;
 8003176:	bf00      	nop
 8003178:	bf00      	nop
}
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	20001618 	.word	0x20001618
 8003188:	20001619 	.word	0x20001619
 800318c:	20001588 	.word	0x20001588
 8003190:	2000161c 	.word	0x2000161c

08003194 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800319a:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <ReturnTimeElapsed+0x70>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a2:	d026      	beq.n	80031f2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80031a4:	f7ff fe02 	bl	8002dac <ReadRtcSsrValue>
 80031a8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80031aa:	4b16      	ldr	r3, [pc, #88]	@ (8003204 <ReturnTimeElapsed+0x70>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d805      	bhi.n	80031c0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80031b4:	4b13      	ldr	r3, [pc, #76]	@ (8003204 <ReturnTimeElapsed+0x70>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	e00a      	b.n	80031d6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80031c0:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <ReturnTimeElapsed+0x74>)
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80031cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003204 <ReturnTimeElapsed+0x70>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80031d6:	4b0d      	ldr	r3, [pc, #52]	@ (800320c <ReturnTimeElapsed+0x78>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003210 <ReturnTimeElapsed+0x7c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	40d3      	lsrs	r3, r2
 80031ee:	607b      	str	r3, [r7, #4]
 80031f0:	e001      	b.n	80031f6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	b29b      	uxth	r3, r3
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3708      	adds	r7, #8
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	2000161c 	.word	0x2000161c
 8003208:	20001624 	.word	0x20001624
 800320c:	20001622 	.word	0x20001622
 8003210:	20001621 	.word	0x20001621

08003214 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	4603      	mov	r3, r0
 800321c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800321e:	88fb      	ldrh	r3, [r7, #6]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d108      	bne.n	8003236 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8003224:	f7ff fdc2 	bl	8002dac <ReadRtcSsrValue>
 8003228:	4603      	mov	r3, r0
 800322a:	4a21      	ldr	r2, [pc, #132]	@ (80032b0 <RestartWakeupCounter+0x9c>)
 800322c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800322e:	2003      	movs	r0, #3
 8003230:	f001 ffcd 	bl	80051ce <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8003234:	e039      	b.n	80032aa <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8003236:	88fb      	ldrh	r3, [r7, #6]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d803      	bhi.n	8003244 <RestartWakeupCounter+0x30>
 800323c:	4b1d      	ldr	r3, [pc, #116]	@ (80032b4 <RestartWakeupCounter+0xa0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d002      	beq.n	800324a <RestartWakeupCounter+0x36>
      Value -= 1;
 8003244:	88fb      	ldrh	r3, [r7, #6]
 8003246:	3b01      	subs	r3, #1
 8003248:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800324a:	bf00      	nop
 800324c:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <RestartWakeupCounter+0xa4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	d0f8      	beq.n	800324c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800325a:	4b17      	ldr	r3, [pc, #92]	@ (80032b8 <RestartWakeupCounter+0xa4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b15      	ldr	r3, [pc, #84]	@ (80032b8 <RestartWakeupCounter+0xa4>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800326a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800326c:	4b13      	ldr	r3, [pc, #76]	@ (80032bc <RestartWakeupCounter+0xa8>)
 800326e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003272:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8003274:	2003      	movs	r0, #3
 8003276:	f001 ffb8 	bl	80051ea <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800327a:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <RestartWakeupCounter+0xac>)
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	041b      	lsls	r3, r3, #16
 8003282:	88fa      	ldrh	r2, [r7, #6]
 8003284:	490e      	ldr	r1, [pc, #56]	@ (80032c0 <RestartWakeupCounter+0xac>)
 8003286:	4313      	orrs	r3, r2
 8003288:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800328a:	f7ff fd8f 	bl	8002dac <ReadRtcSsrValue>
 800328e:	4603      	mov	r3, r0
 8003290:	4a07      	ldr	r2, [pc, #28]	@ (80032b0 <RestartWakeupCounter+0x9c>)
 8003292:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8003294:	4b08      	ldr	r3, [pc, #32]	@ (80032b8 <RestartWakeupCounter+0xa4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	4b07      	ldr	r3, [pc, #28]	@ (80032b8 <RestartWakeupCounter+0xa4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032a2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80032a4:	f3af 8000 	nop.w
  return ;
 80032a8:	bf00      	nop
}
 80032aa:	3708      	adds	r7, #8
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}
 80032b0:	2000161c 	.word	0x2000161c
 80032b4:	20001621 	.word	0x20001621
 80032b8:	20001700 	.word	0x20001700
 80032bc:	58000800 	.word	0x58000800
 80032c0:	40002800 	.word	0x40002800

080032c4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80032ca:	4b45      	ldr	r3, [pc, #276]	@ (80033e0 <RescheduleTimerList+0x11c>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d6:	d107      	bne.n	80032e8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80032d8:	bf00      	nop
 80032da:	4b42      	ldr	r3, [pc, #264]	@ (80033e4 <RescheduleTimerList+0x120>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f8      	bne.n	80032da <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80032e8:	4b3e      	ldr	r3, [pc, #248]	@ (80033e4 <RescheduleTimerList+0x120>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b3d      	ldr	r3, [pc, #244]	@ (80033e4 <RescheduleTimerList+0x120>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80032f8:	4b3b      	ldr	r3, [pc, #236]	@ (80033e8 <RescheduleTimerList+0x124>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	493a      	ldr	r1, [pc, #232]	@ (80033ec <RescheduleTimerList+0x128>)
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3308      	adds	r3, #8
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8003312:	f7ff ff3f 	bl	8003194 <ReturnTimeElapsed>
 8003316:	4603      	mov	r3, r0
 8003318:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	d205      	bcs.n	800332e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003322:	2300      	movs	r3, #0
 8003324:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003326:	4b32      	ldr	r3, [pc, #200]	@ (80033f0 <RescheduleTimerList+0x12c>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
 800332c:	e04d      	b.n	80033ca <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	4a30      	ldr	r2, [pc, #192]	@ (80033f4 <RescheduleTimerList+0x130>)
 8003332:	8812      	ldrh	r2, [r2, #0]
 8003334:	b292      	uxth	r2, r2
 8003336:	4413      	add	r3, r2
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	4293      	cmp	r3, r2
 800333e:	d906      	bls.n	800334e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003340:	4b2c      	ldr	r3, [pc, #176]	@ (80033f4 <RescheduleTimerList+0x130>)
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003346:	4b2a      	ldr	r3, [pc, #168]	@ (80033f0 <RescheduleTimerList+0x12c>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e03d      	b.n	80033ca <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	b29a      	uxth	r2, r3
 8003352:	88fb      	ldrh	r3, [r7, #6]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003358:	4b25      	ldr	r3, [pc, #148]	@ (80033f0 <RescheduleTimerList+0x12c>)
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800335e:	e034      	b.n	80033ca <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003360:	7bfa      	ldrb	r2, [r7, #15]
 8003362:	4922      	ldr	r1, [pc, #136]	@ (80033ec <RescheduleTimerList+0x128>)
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	3308      	adds	r3, #8
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	429a      	cmp	r2, r3
 8003376:	d20a      	bcs.n	800338e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	491c      	ldr	r1, [pc, #112]	@ (80033ec <RescheduleTimerList+0x128>)
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	440b      	add	r3, r1
 8003386:	3308      	adds	r3, #8
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e013      	b.n	80033b6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800338e:	7bfa      	ldrb	r2, [r7, #15]
 8003390:	4916      	ldr	r1, [pc, #88]	@ (80033ec <RescheduleTimerList+0x128>)
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	440b      	add	r3, r1
 800339c:	3308      	adds	r3, #8
 800339e:	6819      	ldr	r1, [r3, #0]
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	7bfa      	ldrb	r2, [r7, #15]
 80033a4:	1ac9      	subs	r1, r1, r3
 80033a6:	4811      	ldr	r0, [pc, #68]	@ (80033ec <RescheduleTimerList+0x128>)
 80033a8:	4613      	mov	r3, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	4413      	add	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4403      	add	r3, r0
 80033b2:	3308      	adds	r3, #8
 80033b4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	490c      	ldr	r1, [pc, #48]	@ (80033ec <RescheduleTimerList+0x128>)
 80033ba:	4613      	mov	r3, r2
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3315      	adds	r3, #21
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80033ca:	7bfb      	ldrb	r3, [r7, #15]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	d1c7      	bne.n	8003360 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80033d0:	89bb      	ldrh	r3, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff ff1e 	bl	8003214 <RestartWakeupCounter>

  return ;
 80033d8:	bf00      	nop
}
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40002800 	.word	0x40002800
 80033e4:	20001700 	.word	0x20001700
 80033e8:	20001618 	.word	0x20001618
 80033ec:	20001588 	.word	0x20001588
 80033f0:	20001620 	.word	0x20001620
 80033f4:	20001626 	.word	0x20001626

080033f8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	617b      	str	r3, [r7, #20]
  return(result);
 8003404:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003406:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8003408:	b672      	cpsid	i
}
 800340a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800340c:	4b59      	ldr	r3, [pc, #356]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	22ca      	movs	r2, #202	@ 0xca
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24
 8003414:	4b57      	ldr	r3, [pc, #348]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2253      	movs	r2, #83	@ 0x53
 800341a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800341c:	4b55      	ldr	r3, [pc, #340]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	4b54      	ldr	r3, [pc, #336]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800342c:	4b52      	ldr	r3, [pc, #328]	@ (8003578 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8003434:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003438:	4950      	ldr	r1, [pc, #320]	@ (800357c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	440b      	add	r3, r1
 8003444:	330c      	adds	r3, #12
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d16e      	bne.n	800352c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800344e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003452:	494a      	ldr	r1, [pc, #296]	@ (800357c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8003462:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003466:	4945      	ldr	r1, [pc, #276]	@ (800357c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	440b      	add	r3, r1
 8003472:	3310      	adds	r3, #16
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003478:	4b41      	ldr	r3, [pc, #260]	@ (8003580 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d04c      	beq.n	800351c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8003482:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003486:	493d      	ldr	r1, [pc, #244]	@ (800357c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8003488:	4613      	mov	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	4413      	add	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	440b      	add	r3, r1
 8003492:	330d      	adds	r3, #13
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d124      	bne.n	80034e6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800349c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034a0:	2101      	movs	r1, #1
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fdf2 	bl	800308c <UnlinkTimer>
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80034b4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80034b8:	4930      	ldr	r1, [pc, #192]	@ (800357c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	440b      	add	r3, r1
 80034c4:	3304      	adds	r3, #4
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f9b8 	bl	8003844 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034d4:	4b27      	ldr	r3, [pc, #156]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	22ca      	movs	r2, #202	@ 0xca
 80034da:	625a      	str	r2, [r3, #36]	@ 0x24
 80034dc:	4b25      	ldr	r3, [pc, #148]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2253      	movs	r2, #83	@ 0x53
 80034e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80034e4:	e012      	b.n	800350c <HW_TS_RTC_Wakeup_Handler+0x114>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80034f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 f920 	bl	800373c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80034fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	22ca      	movs	r2, #202	@ 0xca
 8003502:	625a      	str	r2, [r3, #36]	@ 0x24
 8003504:	4b1b      	ldr	r3, [pc, #108]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2253      	movs	r2, #83	@ 0x53
 800350a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800350c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	4619      	mov	r1, r3
 8003514:	69b8      	ldr	r0, [r7, #24]
 8003516:	f000 fa1b 	bl	8003950 <HW_TS_RTC_Int_AppNot>
 800351a:	e022      	b.n	8003562 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800351c:	f7ff fed2 	bl	80032c4 <RescheduleTimerList>
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	e01a      	b.n	8003562 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800352c:	bf00      	nop
 800352e:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0f8      	beq.n	800352e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800353c:	4b0d      	ldr	r3, [pc, #52]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	b2da      	uxtb	r2, r3
 8003544:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800354c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003550:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003558:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003562:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	22ff      	movs	r2, #255	@ 0xff
 8003568:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800356a:	bf00      	nop
}
 800356c:	3728      	adds	r7, #40	@ 0x28
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20001700 	.word	0x20001700
 8003578:	20001618 	.word	0x20001618
 800357c:	20001588 	.word	0x20001588
 8003580:	20001620 	.word	0x20001620
 8003584:	58000800 	.word	0x58000800

08003588 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	6039      	str	r1, [r7, #0]
 8003592:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003594:	4b5e      	ldr	r3, [pc, #376]	@ (8003710 <HW_TS_Init+0x188>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	22ca      	movs	r2, #202	@ 0xca
 800359a:	625a      	str	r2, [r3, #36]	@ 0x24
 800359c:	4b5c      	ldr	r3, [pc, #368]	@ (8003710 <HW_TS_Init+0x188>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2253      	movs	r2, #83	@ 0x53
 80035a2:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80035a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003714 <HW_TS_Init+0x18c>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a5a      	ldr	r2, [pc, #360]	@ (8003714 <HW_TS_Init+0x18c>)
 80035aa:	f043 0320 	orr.w	r3, r3, #32
 80035ae:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80035b0:	4b58      	ldr	r3, [pc, #352]	@ (8003714 <HW_TS_Init+0x18c>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f1c3 0304 	rsb	r3, r3, #4
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4b55      	ldr	r3, [pc, #340]	@ (8003718 <HW_TS_Init+0x190>)
 80035c4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80035c6:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HW_TS_Init+0x18c>)
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80035ce:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 80035d2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	fa92 f2a2 	rbit	r2, r2
 80035da:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	2a00      	cmp	r2, #0
 80035e4:	d101      	bne.n	80035ea <HW_TS_Init+0x62>
  {
    return 32U;
 80035e6:	2220      	movs	r2, #32
 80035e8:	e003      	b.n	80035f2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	fab2 f282 	clz	r2, r2
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	40d3      	lsrs	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	3301      	adds	r3, #1
 80035f8:	b2da      	uxtb	r2, r3
 80035fa:	4b48      	ldr	r3, [pc, #288]	@ (800371c <HW_TS_Init+0x194>)
 80035fc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80035fe:	4b45      	ldr	r3, [pc, #276]	@ (8003714 <HW_TS_Init+0x18c>)
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	b29b      	uxth	r3, r3
 8003604:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003608:	b29b      	uxth	r3, r3
 800360a:	3301      	adds	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	4b44      	ldr	r3, [pc, #272]	@ (8003720 <HW_TS_Init+0x198>)
 8003610:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003612:	4b43      	ldr	r3, [pc, #268]	@ (8003720 <HW_TS_Init+0x198>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	3b01      	subs	r3, #1
 8003618:	4a40      	ldr	r2, [pc, #256]	@ (800371c <HW_TS_Init+0x194>)
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	fb02 f303 	mul.w	r3, r2, r3
 8003620:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003624:	4a3c      	ldr	r2, [pc, #240]	@ (8003718 <HW_TS_Init+0x190>)
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	40d3      	lsrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003632:	4293      	cmp	r3, r2
 8003634:	d904      	bls.n	8003640 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003636:	4b3b      	ldr	r3, [pc, #236]	@ (8003724 <HW_TS_Init+0x19c>)
 8003638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800363c:	801a      	strh	r2, [r3, #0]
 800363e:	e003      	b.n	8003648 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	b29a      	uxth	r2, r3
 8003644:	4b37      	ldr	r3, [pc, #220]	@ (8003724 <HW_TS_Init+0x19c>)
 8003646:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003648:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800364c:	f7ff fb9c 	bl	8002d88 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003650:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003654:	f7ff fb84 	bl	8002d60 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003658:	79fb      	ldrb	r3, [r7, #7]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d13d      	bne.n	80036da <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800365e:	4b32      	ldr	r3, [pc, #200]	@ (8003728 <HW_TS_Init+0x1a0>)
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003664:	4b31      	ldr	r3, [pc, #196]	@ (800372c <HW_TS_Init+0x1a4>)
 8003666:	f04f 32ff 	mov.w	r2, #4294967295
 800366a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800366c:	2300      	movs	r3, #0
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e00c      	b.n	800368c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003672:	7ffa      	ldrb	r2, [r7, #31]
 8003674:	492e      	ldr	r1, [pc, #184]	@ (8003730 <HW_TS_Init+0x1a8>)
 8003676:	4613      	mov	r3, r2
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	4413      	add	r3, r2
 800367c:	00db      	lsls	r3, r3, #3
 800367e:	440b      	add	r3, r1
 8003680:	330c      	adds	r3, #12
 8003682:	2200      	movs	r2, #0
 8003684:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003686:	7ffb      	ldrb	r3, [r7, #31]
 8003688:	3301      	adds	r3, #1
 800368a:	77fb      	strb	r3, [r7, #31]
 800368c:	7ffb      	ldrb	r3, [r7, #31]
 800368e:	2b05      	cmp	r3, #5
 8003690:	d9ef      	bls.n	8003672 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003692:	4b28      	ldr	r3, [pc, #160]	@ (8003734 <HW_TS_Init+0x1ac>)
 8003694:	2206      	movs	r2, #6
 8003696:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8003698:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <HW_TS_Init+0x188>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	4b1c      	ldr	r3, [pc, #112]	@ (8003710 <HW_TS_Init+0x188>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036a6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80036a8:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HW_TS_Init+0x188>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	4b17      	ldr	r3, [pc, #92]	@ (8003710 <HW_TS_Init+0x188>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80036b8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80036ba:	4b1f      	ldr	r3, [pc, #124]	@ (8003738 <HW_TS_Init+0x1b0>)
 80036bc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80036c0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80036c2:	2003      	movs	r0, #3
 80036c4:	f001 fd91 	bl	80051ea <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80036c8:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <HW_TS_Init+0x188>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	4b10      	ldr	r3, [pc, #64]	@ (8003710 <HW_TS_Init+0x188>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e009      	b.n	80036ee <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <HW_TS_Init+0x188>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d002      	beq.n	80036ee <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80036e8:	2003      	movs	r0, #3
 80036ea:	f001 fd70 	bl	80051ce <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80036ee:	4b08      	ldr	r3, [pc, #32]	@ (8003710 <HW_TS_Init+0x188>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	22ff      	movs	r2, #255	@ 0xff
 80036f4:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80036f6:	2200      	movs	r2, #0
 80036f8:	2103      	movs	r1, #3
 80036fa:	2003      	movs	r0, #3
 80036fc:	f001 fd25 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003700:	2003      	movs	r0, #3
 8003702:	f001 fd3c 	bl	800517e <HAL_NVIC_EnableIRQ>

  return;
 8003706:	bf00      	nop
}
 8003708:	3720      	adds	r7, #32
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20001700 	.word	0x20001700
 8003714:	40002800 	.word	0x40002800
 8003718:	20001621 	.word	0x20001621
 800371c:	20001622 	.word	0x20001622
 8003720:	20001624 	.word	0x20001624
 8003724:	20001626 	.word	0x20001626
 8003728:	20001620 	.word	0x20001620
 800372c:	2000161c 	.word	0x2000161c
 8003730:	20001588 	.word	0x20001588
 8003734:	20001618 	.word	0x20001618
 8003738:	58000800 	.word	0x58000800

0800373c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003746:	f3ef 8310 	mrs	r3, PRIMASK
 800374a:	60fb      	str	r3, [r7, #12]
  return(result);
 800374c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800374e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003750:	b672      	cpsid	i
}
 8003752:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003754:	2003      	movs	r0, #3
 8003756:	f001 fd20 	bl	800519a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800375a:	4b34      	ldr	r3, [pc, #208]	@ (800382c <HW_TS_Stop+0xf0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	22ca      	movs	r2, #202	@ 0xca
 8003760:	625a      	str	r2, [r3, #36]	@ 0x24
 8003762:	4b32      	ldr	r3, [pc, #200]	@ (800382c <HW_TS_Stop+0xf0>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	2253      	movs	r2, #83	@ 0x53
 8003768:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800376a:	79fa      	ldrb	r2, [r7, #7]
 800376c:	4930      	ldr	r1, [pc, #192]	@ (8003830 <HW_TS_Stop+0xf4>)
 800376e:	4613      	mov	r3, r2
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4413      	add	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	440b      	add	r3, r1
 8003778:	330c      	adds	r3, #12
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d142      	bne.n	8003808 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	2100      	movs	r1, #0
 8003786:	4618      	mov	r0, r3
 8003788:	f7ff fc80 	bl	800308c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800378c:	4b29      	ldr	r3, [pc, #164]	@ (8003834 <HW_TS_Stop+0xf8>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003792:	7cfb      	ldrb	r3, [r7, #19]
 8003794:	2b06      	cmp	r3, #6
 8003796:	d12f      	bne.n	80037f8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003798:	4b27      	ldr	r3, [pc, #156]	@ (8003838 <HW_TS_Stop+0xfc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037a4:	d107      	bne.n	80037b6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80037a6:	bf00      	nop
 80037a8:	4b20      	ldr	r3, [pc, #128]	@ (800382c <HW_TS_Stop+0xf0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1f8      	bne.n	80037a8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80037b6:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <HW_TS_Stop+0xf0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	4b1b      	ldr	r3, [pc, #108]	@ (800382c <HW_TS_Stop+0xf0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037c4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80037c6:	bf00      	nop
 80037c8:	4b18      	ldr	r3, [pc, #96]	@ (800382c <HW_TS_Stop+0xf0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0304 	and.w	r3, r3, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0f8      	beq.n	80037c8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <HW_TS_Stop+0xf0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4b13      	ldr	r3, [pc, #76]	@ (800382c <HW_TS_Stop+0xf0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80037e6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80037e8:	4b14      	ldr	r3, [pc, #80]	@ (800383c <HW_TS_Stop+0x100>)
 80037ea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80037ee:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80037f0:	2003      	movs	r0, #3
 80037f2:	f001 fcfa 	bl	80051ea <HAL_NVIC_ClearPendingIRQ>
 80037f6:	e007      	b.n	8003808 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80037f8:	4b11      	ldr	r3, [pc, #68]	@ (8003840 <HW_TS_Stop+0x104>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	7cfa      	ldrb	r2, [r7, #19]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8003804:	f7ff fd5e 	bl	80032c4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HW_TS_Stop+0xf0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	22ff      	movs	r2, #255	@ 0xff
 800380e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003810:	2003      	movs	r0, #3
 8003812:	f001 fcb4 	bl	800517e <HAL_NVIC_EnableIRQ>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003822:	bf00      	nop
}
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	20001700 	.word	0x20001700
 8003830:	20001588 	.word	0x20001588
 8003834:	20001618 	.word	0x20001618
 8003838:	40002800 	.word	0x40002800
 800383c:	58000800 	.word	0x58000800
 8003840:	20001619 	.word	0x20001619

08003844 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	6039      	str	r1, [r7, #0]
 800384e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003850:	79fa      	ldrb	r2, [r7, #7]
 8003852:	493b      	ldr	r1, [pc, #236]	@ (8003940 <HW_TS_Start+0xfc>)
 8003854:	4613      	mov	r3, r2
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	4413      	add	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	330c      	adds	r3, #12
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d103      	bne.n	8003870 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff66 	bl	800373c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003870:	f3ef 8310 	mrs	r3, PRIMASK
 8003874:	60fb      	str	r3, [r7, #12]
  return(result);
 8003876:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003878:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800387a:	b672      	cpsid	i
}
 800387c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800387e:	2003      	movs	r0, #3
 8003880:	f001 fc8b 	bl	800519a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8003884:	4b2f      	ldr	r3, [pc, #188]	@ (8003944 <HW_TS_Start+0x100>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	22ca      	movs	r2, #202	@ 0xca
 800388a:	625a      	str	r2, [r3, #36]	@ 0x24
 800388c:	4b2d      	ldr	r3, [pc, #180]	@ (8003944 <HW_TS_Start+0x100>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2253      	movs	r2, #83	@ 0x53
 8003892:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8003894:	79fa      	ldrb	r2, [r7, #7]
 8003896:	492a      	ldr	r1, [pc, #168]	@ (8003940 <HW_TS_Start+0xfc>)
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	440b      	add	r3, r1
 80038a2:	330c      	adds	r3, #12
 80038a4:	2202      	movs	r2, #2
 80038a6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80038a8:	79fa      	ldrb	r2, [r7, #7]
 80038aa:	4925      	ldr	r1, [pc, #148]	@ (8003940 <HW_TS_Start+0xfc>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	440b      	add	r3, r1
 80038b6:	3308      	adds	r3, #8
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80038bc:	79fa      	ldrb	r2, [r7, #7]
 80038be:	4920      	ldr	r1, [pc, #128]	@ (8003940 <HW_TS_Start+0xfc>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	3304      	adds	r3, #4
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff fb30 	bl	8002f38 <linkTimer>
 80038d8:	4603      	mov	r3, r0
 80038da:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80038dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003948 <HW_TS_Start+0x104>)
 80038de:	781b      	ldrb	r3, [r3, #0]
 80038e0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <HW_TS_Start+0x108>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	7c7a      	ldrb	r2, [r7, #17]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d002      	beq.n	80038f4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80038ee:	f7ff fce9 	bl	80032c4 <RescheduleTimerList>
 80038f2:	e013      	b.n	800391c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80038f4:	79fa      	ldrb	r2, [r7, #7]
 80038f6:	4912      	ldr	r1, [pc, #72]	@ (8003940 <HW_TS_Start+0xfc>)
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	3308      	adds	r3, #8
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	8a7b      	ldrh	r3, [r7, #18]
 8003908:	79fa      	ldrb	r2, [r7, #7]
 800390a:	1ac9      	subs	r1, r1, r3
 800390c:	480c      	ldr	r0, [pc, #48]	@ (8003940 <HW_TS_Start+0xfc>)
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	00db      	lsls	r3, r3, #3
 8003916:	4403      	add	r3, r0
 8003918:	3308      	adds	r3, #8
 800391a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800391c:	4b09      	ldr	r3, [pc, #36]	@ (8003944 <HW_TS_Start+0x100>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	22ff      	movs	r2, #255	@ 0xff
 8003922:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003924:	2003      	movs	r0, #3
 8003926:	f001 fc2a 	bl	800517e <HAL_NVIC_EnableIRQ>
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	f383 8810 	msr	PRIMASK, r3
}
 8003934:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003936:	bf00      	nop
}
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20001588 	.word	0x20001588
 8003944:	20001700 	.word	0x20001700
 8003948:	20001618 	.word	0x20001618
 800394c:	20001619 	.word	0x20001619

08003950 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	460b      	mov	r3, r1
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4798      	blx	r3

  return;
 8003962:	bf00      	nop
}
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60b9      	str	r1, [r7, #8]
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	4603      	mov	r3, r0
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	4613      	mov	r3, r2
 800397c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8003982:	2300      	movs	r3, #0
 8003984:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10e      	bne.n	80039aa <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 800398c:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <HW_UART_Transmit_DMA+0x80>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8003992:	4b17      	ldr	r3, [pc, #92]	@ (80039f0 <HW_UART_Transmit_DMA+0x84>)
 8003994:	4a17      	ldr	r2, [pc, #92]	@ (80039f4 <HW_UART_Transmit_DMA+0x88>)
 8003996:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8003998:	89bb      	ldrh	r3, [r7, #12]
 800399a:	461a      	mov	r2, r3
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	4814      	ldr	r0, [pc, #80]	@ (80039f0 <HW_UART_Transmit_DMA+0x84>)
 80039a0:	f007 fc66 	bl	800b270 <HAL_UART_Transmit_DMA>
 80039a4:	4603      	mov	r3, r0
 80039a6:	75fb      	strb	r3, [r7, #23]
            break;
 80039a8:	e000      	b.n	80039ac <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80039aa:	bf00      	nop
    }

    switch (hal_status)
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d816      	bhi.n	80039e0 <HW_UART_Transmit_DMA+0x74>
 80039b2:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <HW_UART_Transmit_DMA+0x4c>)
 80039b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039cf 	.word	0x080039cf
 80039c0:	080039d5 	.word	0x080039d5
 80039c4:	080039db 	.word	0x080039db
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80039c8:	2300      	movs	r3, #0
 80039ca:	75bb      	strb	r3, [r7, #22]
            break;
 80039cc:	e009      	b.n	80039e2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75bb      	strb	r3, [r7, #22]
            break;
 80039d2:	e006      	b.n	80039e2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80039d4:	2302      	movs	r3, #2
 80039d6:	75bb      	strb	r3, [r7, #22]
            break;
 80039d8:	e003      	b.n	80039e2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80039da:	2303      	movs	r3, #3
 80039dc:	75bb      	strb	r3, [r7, #22]
            break;
 80039de:	e000      	b.n	80039e2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 80039e0:	bf00      	nop
    }

    return hw_status;
 80039e2:	7dbb      	ldrb	r3, [r7, #22]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	20001628 	.word	0x20001628
 80039f0:	20001820 	.word	0x20001820
 80039f4:	40013800 	.word	0x40013800

080039f8 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	4b09      	ldr	r3, [pc, #36]	@ (8003a2c <HAL_UART_TxCpltCallback+0x34>)
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d107      	bne.n	8003a1c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8003a0c:	4b08      	ldr	r3, [pc, #32]	@ (8003a30 <HAL_UART_TxCpltCallback+0x38>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8003a14:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_UART_TxCpltCallback+0x38>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4798      	blx	r3
            }
            break;
 8003a1a:	e001      	b.n	8003a20 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8003a1c:	bf00      	nop
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8003a20:	bf00      	nop
    }

    return;
 8003a22:	bf00      	nop
}
 8003a24:	3708      	adds	r7, #8
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40013800 	.word	0x40013800
 8003a30:	20001628 	.word	0x20001628

08003a34 <Kernel_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Kernel_Init (void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
	SET_RGB_COLOR(GREEN);
 8003a38:	2201      	movs	r2, #1
 8003a3a:	2110      	movs	r1, #16
 8003a3c:	4842      	ldr	r0, [pc, #264]	@ (8003b48 <Kernel_Init+0x114>)
 8003a3e:	f001 ff79 	bl	8005934 <HAL_GPIO_WritePin>
 8003a42:	2200      	movs	r2, #0
 8003a44:	2102      	movs	r1, #2
 8003a46:	4841      	ldr	r0, [pc, #260]	@ (8003b4c <Kernel_Init+0x118>)
 8003a48:	f001 ff74 	bl	8005934 <HAL_GPIO_WritePin>
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	2101      	movs	r1, #1
 8003a50:	483e      	ldr	r0, [pc, #248]	@ (8003b4c <Kernel_Init+0x118>)
 8003a52:	f001 ff6f 	bl	8005934 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003a56:	20fa      	movs	r0, #250	@ 0xfa
 8003a58:	f7ff f88e 	bl	8002b78 <HAL_Delay>
	SET_RGB_COLOR(OFF);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2110      	movs	r1, #16
 8003a60:	4839      	ldr	r0, [pc, #228]	@ (8003b48 <Kernel_Init+0x114>)
 8003a62:	f001 ff67 	bl	8005934 <HAL_GPIO_WritePin>
 8003a66:	2201      	movs	r2, #1
 8003a68:	2102      	movs	r1, #2
 8003a6a:	4838      	ldr	r0, [pc, #224]	@ (8003b4c <Kernel_Init+0x118>)
 8003a6c:	f001 ff62 	bl	8005934 <HAL_GPIO_WritePin>
 8003a70:	2201      	movs	r2, #1
 8003a72:	2101      	movs	r1, #1
 8003a74:	4835      	ldr	r0, [pc, #212]	@ (8003b4c <Kernel_Init+0x118>)
 8003a76:	f001 ff5d 	bl	8005934 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003a7a:	20fa      	movs	r0, #250	@ 0xfa
 8003a7c:	f7ff f87c 	bl	8002b78 <HAL_Delay>
	SET_RGB_COLOR(GREEN);
 8003a80:	2201      	movs	r2, #1
 8003a82:	2110      	movs	r1, #16
 8003a84:	4830      	ldr	r0, [pc, #192]	@ (8003b48 <Kernel_Init+0x114>)
 8003a86:	f001 ff55 	bl	8005934 <HAL_GPIO_WritePin>
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	2102      	movs	r1, #2
 8003a8e:	482f      	ldr	r0, [pc, #188]	@ (8003b4c <Kernel_Init+0x118>)
 8003a90:	f001 ff50 	bl	8005934 <HAL_GPIO_WritePin>
 8003a94:	2201      	movs	r2, #1
 8003a96:	2101      	movs	r1, #1
 8003a98:	482c      	ldr	r0, [pc, #176]	@ (8003b4c <Kernel_Init+0x118>)
 8003a9a:	f001 ff4b 	bl	8005934 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003a9e:	20fa      	movs	r0, #250	@ 0xfa
 8003aa0:	f7ff f86a 	bl	8002b78 <HAL_Delay>
	SET_RGB_COLOR(OFF);
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	2110      	movs	r1, #16
 8003aa8:	4827      	ldr	r0, [pc, #156]	@ (8003b48 <Kernel_Init+0x114>)
 8003aaa:	f001 ff43 	bl	8005934 <HAL_GPIO_WritePin>
 8003aae:	2201      	movs	r2, #1
 8003ab0:	2102      	movs	r1, #2
 8003ab2:	4826      	ldr	r0, [pc, #152]	@ (8003b4c <Kernel_Init+0x118>)
 8003ab4:	f001 ff3e 	bl	8005934 <HAL_GPIO_WritePin>
 8003ab8:	2201      	movs	r2, #1
 8003aba:	2101      	movs	r1, #1
 8003abc:	4823      	ldr	r0, [pc, #140]	@ (8003b4c <Kernel_Init+0x118>)
 8003abe:	f001 ff39 	bl	8005934 <HAL_GPIO_WritePin>
	HAL_Delay(250);
 8003ac2:	20fa      	movs	r0, #250	@ 0xfa
 8003ac4:	f7ff f858 	bl	8002b78 <HAL_Delay>
	SET_RGB_COLOR(GREEN);
 8003ac8:	2201      	movs	r2, #1
 8003aca:	2110      	movs	r1, #16
 8003acc:	481e      	ldr	r0, [pc, #120]	@ (8003b48 <Kernel_Init+0x114>)
 8003ace:	f001 ff31 	bl	8005934 <HAL_GPIO_WritePin>
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	2102      	movs	r1, #2
 8003ad6:	481d      	ldr	r0, [pc, #116]	@ (8003b4c <Kernel_Init+0x118>)
 8003ad8:	f001 ff2c 	bl	8005934 <HAL_GPIO_WritePin>
 8003adc:	2201      	movs	r2, #1
 8003ade:	2101      	movs	r1, #1
 8003ae0:	481a      	ldr	r0, [pc, #104]	@ (8003b4c <Kernel_Init+0x118>)
 8003ae2:	f001 ff27 	bl	8005934 <HAL_GPIO_WritePin>



	tsCmd.MODE		= Start;
 8003ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b50 <Kernel_Init+0x11c>)
 8003ae8:	2201      	movs	r2, #1
 8003aea:	755a      	strb	r2, [r3, #21]
	tsCmd.LED		= true;
 8003aec:	4b18      	ldr	r3, [pc, #96]	@ (8003b50 <Kernel_Init+0x11c>)
 8003aee:	2201      	movs	r2, #1
 8003af0:	75da      	strb	r2, [r3, #23]
	tsCmd.HLP 		= true;
 8003af2:	4b17      	ldr	r3, [pc, #92]	@ (8003b50 <Kernel_Init+0x11c>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	759a      	strb	r2, [r3, #22]

	tsCmd.TMR 		= true;
 8003af8:	4b15      	ldr	r3, [pc, #84]	@ (8003b50 <Kernel_Init+0x11c>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	761a      	strb	r2, [r3, #24]
	tsCmd.TMR_N50 	= true;
 8003afe:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <Kernel_Init+0x11c>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	765a      	strb	r2, [r3, #25]
	tsCmd.TMR_HPF	= true;
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <Kernel_Init+0x11c>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	769a      	strb	r2, [r3, #26]

	tsCmd.EMG		= true;
 8003b0a:	4b11      	ldr	r3, [pc, #68]	@ (8003b50 <Kernel_Init+0x11c>)
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	76da      	strb	r2, [r3, #27]
	tsCmd.EMG_N50	= true;
 8003b10:	4b0f      	ldr	r3, [pc, #60]	@ (8003b50 <Kernel_Init+0x11c>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	771a      	strb	r2, [r3, #28]
	tsCmd.EMG_HPF	= true;
 8003b16:	4b0e      	ldr	r3, [pc, #56]	@ (8003b50 <Kernel_Init+0x11c>)
 8003b18:	2201      	movs	r2, #1
 8003b1a:	775a      	strb	r2, [r3, #29]


	tsSystem.Power	= true;
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b54 <Kernel_Init+0x120>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
	tsBle.Connected	= false;
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <Kernel_Init+0x124>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	701a      	strb	r2, [r3, #0]

	DIAG ("-----------------------------------------\r\n");
 8003b28:	480c      	ldr	r0, [pc, #48]	@ (8003b5c <Kernel_Init+0x128>)
 8003b2a:	f7ff f8b5 	bl	8002c98 <DIAG>
	HAL_Delay(1);
 8003b2e:	2001      	movs	r0, #1
 8003b30:	f7ff f822 	bl	8002b78 <HAL_Delay>
	DIAG (" System ON ->\t%s\r\n\n", DEVICE_INFO);
 8003b34:	490a      	ldr	r1, [pc, #40]	@ (8003b60 <Kernel_Init+0x12c>)
 8003b36:	480b      	ldr	r0, [pc, #44]	@ (8003b64 <Kernel_Init+0x130>)
 8003b38:	f7ff f8ae 	bl	8002c98 <DIAG>
	HAL_Delay(1);
 8003b3c:	2001      	movs	r0, #1
 8003b3e:	f7ff f81b 	bl	8002b78 <HAL_Delay>

	// Wait until USB being recognised by the PC.


}
 8003b42:	bf00      	nop
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	48001000 	.word	0x48001000
 8003b4c:	48000400 	.word	0x48000400
 8003b50:	20001630 	.word	0x20001630
 8003b54:	20001650 	.word	0x20001650
 8003b58:	200019d0 	.word	0x200019d0
 8003b5c:	08018a38 	.word	0x08018a38
 8003b60:	08018a64 	.word	0x08018a64
 8003b64:	08018a78 	.word	0x08018a78

08003b68 <Main_Process>:
//------------------------------------------------------------------------------------------//
//                                        System control                                    //
//------------------------------------------------------------------------------------------//

void Main_Process (void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0

	switch (eSYS_STATE)
 8003b6c:	4b94      	ldr	r3, [pc, #592]	@ (8003dc0 <Main_Process+0x258>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	f000 80ea 	beq.w	8003d4a <Main_Process+0x1e2>
 8003b76:	2b04      	cmp	r3, #4
 8003b78:	dc03      	bgt.n	8003b82 <Main_Process+0x1a>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d005      	beq.n	8003b8a <Main_Process+0x22>
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d01a      	beq.n	8003bb8 <Main_Process+0x50>
	{

	default:
		eSYS_STATE = SYS_STATE_INIT;
 8003b82:	4b8f      	ldr	r3, [pc, #572]	@ (8003dc0 <Main_Process+0x258>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
		break;
 8003b88:	e118      	b.n	8003dbc <Main_Process+0x254>
		//----------------------------------------------------

	case SYS_STATE_INIT:

		AFE_Init();
 8003b8a:	f7fd f921 	bl	8000dd0 <AFE_Init>
		IMU_Init( &hi2c1 );
 8003b8e:	488d      	ldr	r0, [pc, #564]	@ (8003dc4 <Main_Process+0x25c>)
 8003b90:	f7fe f95a 	bl	8001e48 <IMU_Init>
		BLE_Init();
 8003b94:	f7fd fd6c 	bl	8001670 <BLE_Init>
		Debug_Init();
 8003b98:	f7ff f852 	bl	8002c40 <Debug_Init>
		Timer_Init();
 8003b9c:	f001 f854 	bl	8004c48 <Timer_Init>
		BLE_Init();
 8003ba0:	f7fd fd66 	bl	8001670 <BLE_Init>

		DIAG ("-----------------------------------------\r\n\n");
 8003ba4:	4888      	ldr	r0, [pc, #544]	@ (8003dc8 <Main_Process+0x260>)
 8003ba6:	f7ff f877 	bl	8002c98 <DIAG>
		HAL_Delay(1);
 8003baa:	2001      	movs	r0, #1
 8003bac:	f7fe ffe4 	bl	8002b78 <HAL_Delay>
		eSYS_STATE= SYS_STATE_NORMAL;
 8003bb0:	4b83      	ldr	r3, [pc, #524]	@ (8003dc0 <Main_Process+0x258>)
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	701a      	strb	r2, [r3, #0]
		break;
 8003bb6:	e101      	b.n	8003dbc <Main_Process+0x254>
		//----------------------------------------------------

	case SYS_STATE_NORMAL:

		if (tsSystem.Power)
 8003bb8:	4b84      	ldr	r3, [pc, #528]	@ (8003dcc <Main_Process+0x264>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	f000 80b1 	beq.w	8003d24 <Main_Process+0x1bc>
		{

			AFE_Control();
 8003bc2:	f7fd f929 	bl	8000e18 <AFE_Control>

	        #ifdef IMU_ENABLE
				IMU_Control();
	        #endif

			Debug_Control();
 8003bc6:	f7ff f847 	bl	8002c58 <Debug_Control>

			#ifdef WBxx_BLE
				BLE_Control();
 8003bca:	f7fd fd69 	bl	80016a0 <BLE_Control>
			#endif

			if (!tsBle.Connected)
 8003bce:	4b80      	ldr	r3, [pc, #512]	@ (8003dd0 <Main_Process+0x268>)
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d112      	bne.n	8003bfe <Main_Process+0x96>
			{
				SET_RGB_COLOR(GREEN);
 8003bd8:	2201      	movs	r2, #1
 8003bda:	2110      	movs	r1, #16
 8003bdc:	487d      	ldr	r0, [pc, #500]	@ (8003dd4 <Main_Process+0x26c>)
 8003bde:	f001 fea9 	bl	8005934 <HAL_GPIO_WritePin>
 8003be2:	2200      	movs	r2, #0
 8003be4:	2102      	movs	r1, #2
 8003be6:	487c      	ldr	r0, [pc, #496]	@ (8003dd8 <Main_Process+0x270>)
 8003be8:	f001 fea4 	bl	8005934 <HAL_GPIO_WritePin>
 8003bec:	2201      	movs	r2, #1
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4879      	ldr	r0, [pc, #484]	@ (8003dd8 <Main_Process+0x270>)
 8003bf2:	f001 fe9f 	bl	8005934 <HAL_GPIO_WritePin>

				// If BLE is disconnected, keep the timestamp zero
				tsBle.Timestamp = 0;
 8003bf6:	4b76      	ldr	r3, [pc, #472]	@ (8003dd0 <Main_Process+0x268>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	715a      	strb	r2, [r3, #5]
 8003bfc:	e0a1      	b.n	8003d42 <Main_Process+0x1da>
			}
			else
			{
				if (tsTimer.u8TimeFlag)
 8003bfe:	4b77      	ldr	r3, [pc, #476]	@ (8003ddc <Main_Process+0x274>)
 8003c00:	789b      	ldrb	r3, [r3, #2]
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 809c 	beq.w	8003d42 <Main_Process+0x1da>
				{
					tsTimer.u8TimeFlag = false;
 8003c0a:	4b74      	ldr	r3, [pc, #464]	@ (8003ddc <Main_Process+0x274>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	709a      	strb	r2, [r3, #2]

					switch (LedRGB.color)
 8003c10:	4b73      	ldr	r3, [pc, #460]	@ (8003de0 <Main_Process+0x278>)
 8003c12:	791b      	ldrb	r3, [r3, #4]
 8003c14:	2b07      	cmp	r3, #7
 8003c16:	d813      	bhi.n	8003c40 <Main_Process+0xd8>
 8003c18:	a201      	add	r2, pc, #4	@ (adr r2, 8003c20 <Main_Process+0xb8>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003c67 	.word	0x08003c67
 8003c24:	08003cff 	.word	0x08003cff
 8003c28:	08003c41 	.word	0x08003c41
 8003c2c:	08003cb3 	.word	0x08003cb3
 8003c30:	08003c8d 	.word	0x08003c8d
 8003c34:	08003c41 	.word	0x08003c41
 8003c38:	08003c41 	.word	0x08003c41
 8003c3c:	08003cd9 	.word	0x08003cd9
					{
					default:
						SET_RGB_COLOR(OFF);
 8003c40:	2201      	movs	r2, #1
 8003c42:	2110      	movs	r1, #16
 8003c44:	4863      	ldr	r0, [pc, #396]	@ (8003dd4 <Main_Process+0x26c>)
 8003c46:	f001 fe75 	bl	8005934 <HAL_GPIO_WritePin>
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	2102      	movs	r1, #2
 8003c4e:	4862      	ldr	r0, [pc, #392]	@ (8003dd8 <Main_Process+0x270>)
 8003c50:	f001 fe70 	bl	8005934 <HAL_GPIO_WritePin>
 8003c54:	2201      	movs	r2, #1
 8003c56:	2101      	movs	r1, #1
 8003c58:	485f      	ldr	r0, [pc, #380]	@ (8003dd8 <Main_Process+0x270>)
 8003c5a:	f001 fe6b 	bl	8005934 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 8003c5e:	4b60      	ldr	r3, [pc, #384]	@ (8003de0 <Main_Process+0x278>)
 8003c60:	2204      	movs	r2, #4
 8003c62:	711a      	strb	r2, [r3, #4]
						break;
 8003c64:	e06d      	b.n	8003d42 <Main_Process+0x1da>

					case OFF:
						SET_RGB_COLOR(OFF);
 8003c66:	2201      	movs	r2, #1
 8003c68:	2110      	movs	r1, #16
 8003c6a:	485a      	ldr	r0, [pc, #360]	@ (8003dd4 <Main_Process+0x26c>)
 8003c6c:	f001 fe62 	bl	8005934 <HAL_GPIO_WritePin>
 8003c70:	2201      	movs	r2, #1
 8003c72:	2102      	movs	r1, #2
 8003c74:	4858      	ldr	r0, [pc, #352]	@ (8003dd8 <Main_Process+0x270>)
 8003c76:	f001 fe5d 	bl	8005934 <HAL_GPIO_WritePin>
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	4856      	ldr	r0, [pc, #344]	@ (8003dd8 <Main_Process+0x270>)
 8003c80:	f001 fe58 	bl	8005934 <HAL_GPIO_WritePin>
						LedRGB.color = BLUE;
 8003c84:	4b56      	ldr	r3, [pc, #344]	@ (8003de0 <Main_Process+0x278>)
 8003c86:	2204      	movs	r2, #4
 8003c88:	711a      	strb	r2, [r3, #4]
						break;
 8003c8a:	e05a      	b.n	8003d42 <Main_Process+0x1da>

					case BLUE:
						SET_RGB_COLOR(BLUE);
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	2110      	movs	r1, #16
 8003c90:	4850      	ldr	r0, [pc, #320]	@ (8003dd4 <Main_Process+0x26c>)
 8003c92:	f001 fe4f 	bl	8005934 <HAL_GPIO_WritePin>
 8003c96:	2201      	movs	r2, #1
 8003c98:	2102      	movs	r1, #2
 8003c9a:	484f      	ldr	r0, [pc, #316]	@ (8003dd8 <Main_Process+0x270>)
 8003c9c:	f001 fe4a 	bl	8005934 <HAL_GPIO_WritePin>
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	484c      	ldr	r0, [pc, #304]	@ (8003dd8 <Main_Process+0x270>)
 8003ca6:	f001 fe45 	bl	8005934 <HAL_GPIO_WritePin>
						LedRGB.color = YELLOW;
 8003caa:	4b4d      	ldr	r3, [pc, #308]	@ (8003de0 <Main_Process+0x278>)
 8003cac:	2203      	movs	r2, #3
 8003cae:	711a      	strb	r2, [r3, #4]
						break;
 8003cb0:	e047      	b.n	8003d42 <Main_Process+0x1da>

					case YELLOW:
						SET_RGB_COLOR(OFF);
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	2110      	movs	r1, #16
 8003cb6:	4847      	ldr	r0, [pc, #284]	@ (8003dd4 <Main_Process+0x26c>)
 8003cb8:	f001 fe3c 	bl	8005934 <HAL_GPIO_WritePin>
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	2102      	movs	r1, #2
 8003cc0:	4845      	ldr	r0, [pc, #276]	@ (8003dd8 <Main_Process+0x270>)
 8003cc2:	f001 fe37 	bl	8005934 <HAL_GPIO_WritePin>
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4843      	ldr	r0, [pc, #268]	@ (8003dd8 <Main_Process+0x270>)
 8003ccc:	f001 fe32 	bl	8005934 <HAL_GPIO_WritePin>
						LedRGB.color = WHITE;
 8003cd0:	4b43      	ldr	r3, [pc, #268]	@ (8003de0 <Main_Process+0x278>)
 8003cd2:	2207      	movs	r2, #7
 8003cd4:	711a      	strb	r2, [r3, #4]
						break;
 8003cd6:	e034      	b.n	8003d42 <Main_Process+0x1da>

					case WHITE:
						SET_RGB_COLOR(OFF);
 8003cd8:	2201      	movs	r2, #1
 8003cda:	2110      	movs	r1, #16
 8003cdc:	483d      	ldr	r0, [pc, #244]	@ (8003dd4 <Main_Process+0x26c>)
 8003cde:	f001 fe29 	bl	8005934 <HAL_GPIO_WritePin>
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	483c      	ldr	r0, [pc, #240]	@ (8003dd8 <Main_Process+0x270>)
 8003ce8:	f001 fe24 	bl	8005934 <HAL_GPIO_WritePin>
 8003cec:	2201      	movs	r2, #1
 8003cee:	2101      	movs	r1, #1
 8003cf0:	4839      	ldr	r0, [pc, #228]	@ (8003dd8 <Main_Process+0x270>)
 8003cf2:	f001 fe1f 	bl	8005934 <HAL_GPIO_WritePin>
						LedRGB.color = RED;
 8003cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8003de0 <Main_Process+0x278>)
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	711a      	strb	r2, [r3, #4]
						break;
 8003cfc:	e021      	b.n	8003d42 <Main_Process+0x1da>

					case RED:
						SET_RGB_COLOR(OFF);
 8003cfe:	2201      	movs	r2, #1
 8003d00:	2110      	movs	r1, #16
 8003d02:	4834      	ldr	r0, [pc, #208]	@ (8003dd4 <Main_Process+0x26c>)
 8003d04:	f001 fe16 	bl	8005934 <HAL_GPIO_WritePin>
 8003d08:	2201      	movs	r2, #1
 8003d0a:	2102      	movs	r1, #2
 8003d0c:	4832      	ldr	r0, [pc, #200]	@ (8003dd8 <Main_Process+0x270>)
 8003d0e:	f001 fe11 	bl	8005934 <HAL_GPIO_WritePin>
 8003d12:	2201      	movs	r2, #1
 8003d14:	2101      	movs	r1, #1
 8003d16:	4830      	ldr	r0, [pc, #192]	@ (8003dd8 <Main_Process+0x270>)
 8003d18:	f001 fe0c 	bl	8005934 <HAL_GPIO_WritePin>
						LedRGB.color = OFF;
 8003d1c:	4b30      	ldr	r3, [pc, #192]	@ (8003de0 <Main_Process+0x278>)
 8003d1e:	2200      	movs	r2, #0
 8003d20:	711a      	strb	r2, [r3, #4]
						break;
 8003d22:	e00e      	b.n	8003d42 <Main_Process+0x1da>
				}
			}
		}
		else
		{
			SET_RGB_COLOR(OFF);
 8003d24:	2201      	movs	r2, #1
 8003d26:	2110      	movs	r1, #16
 8003d28:	482a      	ldr	r0, [pc, #168]	@ (8003dd4 <Main_Process+0x26c>)
 8003d2a:	f001 fe03 	bl	8005934 <HAL_GPIO_WritePin>
 8003d2e:	2201      	movs	r2, #1
 8003d30:	2102      	movs	r1, #2
 8003d32:	4829      	ldr	r0, [pc, #164]	@ (8003dd8 <Main_Process+0x270>)
 8003d34:	f001 fdfe 	bl	8005934 <HAL_GPIO_WritePin>
 8003d38:	2201      	movs	r2, #1
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	4826      	ldr	r0, [pc, #152]	@ (8003dd8 <Main_Process+0x270>)
 8003d3e:	f001 fdf9 	bl	8005934 <HAL_GPIO_WritePin>
		}

		eSYS_STATE = SYS_STATE_WAIT_CMD;
 8003d42:	4b1f      	ldr	r3, [pc, #124]	@ (8003dc0 <Main_Process+0x258>)
 8003d44:	2204      	movs	r2, #4
 8003d46:	701a      	strb	r2, [r3, #0]
		break;
 8003d48:	e038      	b.n	8003dbc <Main_Process+0x254>
		//----------------------------------------------------
	case SYS_STATE_WAIT_CMD:

		//DIAG("BLE Notified- Kernel - > %d\r\n", McgTimer.TimeFlag );

		if (tsCmd.MODE == Start)
 8003d4a:	4b26      	ldr	r3, [pc, #152]	@ (8003de4 <Main_Process+0x27c>)
 8003d4c:	7d5b      	ldrb	r3, [r3, #21]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d106      	bne.n	8003d60 <Main_Process+0x1f8>
		{
			tsCmd.MODE = Idle;
 8003d52:	4b24      	ldr	r3, [pc, #144]	@ (8003de4 <Main_Process+0x27c>)
 8003d54:	22ff      	movs	r2, #255	@ 0xff
 8003d56:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Start );
 8003d58:	2101      	movs	r1, #1
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	f7fc ffd0 	bl	8000d00 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == Stop)
 8003d60:	4b20      	ldr	r3, [pc, #128]	@ (8003de4 <Main_Process+0x27c>)
 8003d62:	7d5b      	ldrb	r3, [r3, #21]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <Main_Process+0x20e>
		{
			tsCmd.MODE = Idle;
 8003d68:	4b1e      	ldr	r3, [pc, #120]	@ (8003de4 <Main_Process+0x27c>)
 8003d6a:	22ff      	movs	r2, #255	@ 0xff
 8003d6c:	755a      	strb	r2, [r3, #21]
			ADS1293_SPIWriteReg( ADS1293_CONFIG_REG, Stop );
 8003d6e:	2100      	movs	r1, #0
 8003d70:	2000      	movs	r0, #0
 8003d72:	f7fc ffc5 	bl	8000d00 <ADS1293_SPIWriteReg>
		}

		if (tsCmd.MODE == PrintSetting )
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <Main_Process+0x27c>)
 8003d78:	7d5b      	ldrb	r3, [r3, #21]
 8003d7a:	2b05      	cmp	r3, #5
 8003d7c:	d104      	bne.n	8003d88 <Main_Process+0x220>
		{
			tsCmd.MODE = Idle;
 8003d7e:	4b19      	ldr	r3, [pc, #100]	@ (8003de4 <Main_Process+0x27c>)
 8003d80:	22ff      	movs	r2, #255	@ 0xff
 8003d82:	755a      	strb	r2, [r3, #21]
			Print_Setting();
 8003d84:	f000 f837 	bl	8003df6 <Print_Setting>
		}

		if ( tsCmd.HLP == true )
 8003d88:	4b16      	ldr	r3, [pc, #88]	@ (8003de4 <Main_Process+0x27c>)
 8003d8a:	7d9b      	ldrb	r3, [r3, #22]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d104      	bne.n	8003d9a <Main_Process+0x232>
		{
			//tsCmd.MODE = Idle;
			Print_Help();
 8003d90:	f000 f82a 	bl	8003de8 <Print_Help>
			tsCmd.HLP = false;
 8003d94:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <Main_Process+0x27c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	759a      	strb	r2, [r3, #22]
		}

					#ifdef WBxx_BLE
						if ( tsBle.Connected )
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <Main_Process+0x268>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <Main_Process+0x24c>
						{
							 if ( tsBle.App.AfeNotification )
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <Main_Process+0x268>)
 8003da6:	7a1b      	ldrb	r3, [r3, #8]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <Main_Process+0x24c>
							 {
								UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);
 8003dac:	2100      	movs	r1, #0
 8003dae:	2020      	movs	r0, #32
 8003db0:	f012 f8f6 	bl	8015fa0 <UTIL_SEQ_SetTask>
								 }
							 #endif
						}
					#endif

		eSYS_STATE = SYS_STATE_NORMAL;
 8003db4:	4b02      	ldr	r3, [pc, #8]	@ (8003dc0 <Main_Process+0x258>)
 8003db6:	2203      	movs	r2, #3
 8003db8:	701a      	strb	r2, [r3, #0]
		break;
 8003dba:	bf00      	nop
		//----------------------------------------------------
	}
}
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	2000162c 	.word	0x2000162c
 8003dc4:	2000165c 	.word	0x2000165c
 8003dc8:	08018a8c 	.word	0x08018a8c
 8003dcc:	20001650 	.word	0x20001650
 8003dd0:	200019d0 	.word	0x200019d0
 8003dd4:	48001000 	.word	0x48001000
 8003dd8:	48000400 	.word	0x48000400
 8003ddc:	20001918 	.word	0x20001918
 8003de0:	20001654 	.word	0x20001654
 8003de4:	20001630 	.word	0x20001630

08003de8 <Print_Help>:

//------------------------------------------------------------------------------------------------

void Print_Help( void )
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
	DIAG(" Examples 1: https://hackaday.io/project/5334-serialplot-realtime\r\n");
	HAL_Delay(10);
	DIAG(" Examples 2: https://x-io.co.uk/serial-oscilloscope\r\n");
	HAL_Delay(10);
*/
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <Print_Setting>:
//--------------------------------------------------------------------------------------------------------

void Print_Setting ( void )
{
 8003df6:	b480      	push	{r7}
 8003df8:	af00      	add	r7, sp, #0
	HAL_Delay(10);

	DIAG("LED status\t\t: %s\r\n", tsCmd.LED ? "active" : "deactive");
	HAL_Delay(10);
*/
}
 8003dfa:	bf00      	nop
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_RCC_HSI48_Enable>:
{
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003e08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8003e1c:	bf00      	nop
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <LL_RCC_HSI48_IsReady>:
{
 8003e26:	b480      	push	{r7}
 8003e28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003e2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d101      	bne.n	8003e3e <LL_RCC_HSI48_IsReady+0x18>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <LL_RCC_HSI48_IsReady+0x1a>
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_RCC_LSE_SetDriveCapability>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003e52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e5a:	f023 0218 	bic.w	r2, r3, #24
 8003e5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr

08003e76 <LL_AHB1_GRP1_EnableClock>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	b085      	sub	sp, #20
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4013      	ands	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
}
 8003e9c:	bf00      	nop
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <LL_AHB2_GRP1_EnableClock>:
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b085      	sub	sp, #20
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003eb4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003eb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003ec0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
}
 8003ece:	bf00      	nop
 8003ed0:	3714      	adds	r7, #20
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr

08003eda <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003eda:	b480      	push	{r7}
 8003edc:	b085      	sub	sp, #20
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ee6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ee8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ef6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4013      	ands	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003efe:	68fb      	ldr	r3, [r7, #12]
}
 8003f00:	bf00      	nop
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	683a      	ldr	r2, [r7, #0]
 8003f1a:	3220      	adds	r2, #32
 8003f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f20:	4a05      	ldr	r2, [pc, #20]	@ (8003f38 <LL_HSEM_1StepLock+0x2c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d001      	beq.n	8003f2a <LL_HSEM_1StepLock+0x1e>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <LL_HSEM_1StepLock+0x20>
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	370c      	adds	r7, #12
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	80000400 	.word	0x80000400

08003f3c <PeriphUsbClock_Config>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void PeriphUsbClock_Config(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b09a      	sub	sp, #104	@ 0x68
 8003f40:	af00      	add	r7, sp, #0
#if (CFG_USB_INTERFACE_ENABLE != 0)
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003f42:	f107 0318 	add.w	r3, r7, #24
 8003f46:	2250      	movs	r2, #80	@ 0x50
 8003f48:	2100      	movs	r1, #0
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f012 fb8e 	bl	801666c <memset>
	RCC_CRSInitTypeDef RCC_CRSInitStruct = { 0 };
 8003f50:	463b      	mov	r3, r7
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	609a      	str	r2, [r3, #8]
 8003f5a:	60da      	str	r2, [r3, #12]
 8003f5c:	611a      	str	r2, [r3, #16]
 8003f5e:	615a      	str	r2, [r3, #20]

/* This prevents the CPU2 to disable the HSI48 oscillator when
 * It does not use anymore the RNG IP */

LL_HSEM_1StepLock( HSEM, 5 );
 8003f60:	2105      	movs	r1, #5
 8003f62:	4817      	ldr	r0, [pc, #92]	@ (8003fc0 <PeriphUsbClock_Config+0x84>)
 8003f64:	f7ff ffd2 	bl	8003f0c <LL_HSEM_1StepLock>


/* Enables the HSI48 Clock Source */

LL_RCC_HSI48_Enable();
 8003f68:	f7ff ff4c 	bl	8003e04 <LL_RCC_HSI48_Enable>

while(!LL_RCC_HSI48_IsReady());
 8003f6c:	bf00      	nop
 8003f6e:	f7ff ff5a 	bl	8003e26 <LL_RCC_HSI48_IsReady>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0fa      	beq.n	8003f6e <PeriphUsbClock_Config+0x32>

/* Select HSI48 as USB clock source */
PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f7c:	61bb      	str	r3, [r7, #24]
PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003f82:	f107 0318 	add.w	r3, r7, #24
 8003f86:	4618      	mov	r0, r3
 8003f88:	f005 fa90 	bl	80094ac <HAL_RCCEx_PeriphCLKConfig>


/* Configure the clock recovery system (CRS)**********************************/

/* Enable CRS Clock */
__HAL_RCC_CRS_CLK_ENABLE();
 8003f8c:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8003f90:	f7ff ffa3 	bl	8003eda <LL_APB1_GRP1_EnableClock>

/* Default Synchro Signal division factor (not divided) */
RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8003f94:	2300      	movs	r3, #0
 8003f96:	603b      	str	r3, [r7, #0]

/* Set the SYNCSRC[1:0] bits according to CRS_Source value */
RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_USB;
 8003f98:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003f9c:	607b      	str	r3, [r7, #4]

/* HSI48 is synchronized with USB SOF at 1KHz rate */
RCC_CRSInitStruct.ReloadValue = RCC_CRS_RELOADVALUE_DEFAULT;
 8003f9e:	f64b 337f 	movw	r3, #47999	@ 0xbb7f
 8003fa2:	60fb      	str	r3, [r7, #12]
RCC_CRSInitStruct.ErrorLimitValue = RCC_CRS_ERRORLIMIT_DEFAULT;
 8003fa4:	2322      	movs	r3, #34	@ 0x22
 8003fa6:	613b      	str	r3, [r7, #16]
RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60bb      	str	r3, [r7, #8]

/* Set the TRIM[5:0] to the default value*/
RCC_CRSInitStruct.HSI48CalibrationValue = RCC_CRS_HSI48CALIBRATION_DEFAULT;
 8003fac:	2320      	movs	r3, #32
 8003fae:	617b      	str	r3, [r7, #20]

/* Start automatic synchronization */
HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8003fb0:	463b      	mov	r3, r7
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f005 fbf0 	bl	8009798 <HAL_RCCEx_CRSConfig>

#endif

	return;
 8003fb8:	bf00      	nop
}
 8003fba:	3768      	adds	r7, #104	@ 0x68
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	58001400 	.word	0x58001400

08003fc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fc8:	f000 fef2 	bl	8004db0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8003fcc:	f7fe fafe 	bl	80025cc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fd0:	f000 f824 	bl	800401c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003fd4:	f000 f88e 	bl	80040f4 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8003fd8:	f000 f8f0 	bl	80041bc <MX_IPCC_Init>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fdc:	f000 fa46 	bl	800446c <MX_GPIO_Init>
  MX_DMA_Init();
 8003fe0:	f000 fa32 	bl	8004448 <MX_DMA_Init>
  MX_TIM2_Init();
 8003fe4:	f000 f9e2 	bl	80043ac <MX_TIM2_Init>
  MX_SPI1_Init();
 8003fe8:	f000 f94e 	bl	8004288 <MX_SPI1_Init>
  MX_RTC_Init();
 8003fec:	f000 f918 	bl	8004220 <MX_RTC_Init>
  MX_USB_Device_Init();
 8003ff0:	f011 f916 	bl	8015220 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003ff4:	f000 f89e 	bl	8004134 <MX_I2C1_Init>
  MX_RNG_Init();
 8003ff8:	f000 f8fc 	bl	80041f4 <MX_RNG_Init>
  MX_TIM1_Init();
 8003ffc:	f000 f982 	bl	8004304 <MX_TIM1_Init>
  MX_RF_Init();
 8004000:	f000 f8f0 	bl	80041e4 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  Kernel_Init();
 8004004:	f7ff fd16 	bl	8003a34 <Kernel_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8004008:	f7fe faee 	bl	80025e8 <MX_APPE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  PeriphUsbClock_Config();
 800400c:	f7ff ff96 	bl	8003f3c <PeriphUsbClock_Config>


  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8004010:	f7fe fdd7 	bl	8002bc2 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */

    Main_Process();
 8004014:	f7ff fda8 	bl	8003b68 <Main_Process>
    MX_APPE_Process();
 8004018:	bf00      	nop
 800401a:	e7f9      	b.n	8004010 <main+0x4c>

0800401c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b09a      	sub	sp, #104	@ 0x68
 8004020:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004022:	f107 0320 	add.w	r3, r7, #32
 8004026:	2248      	movs	r2, #72	@ 0x48
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f012 fb1e 	bl	801666c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004030:	1d3b      	adds	r3, r7, #4
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
 8004036:	605a      	str	r2, [r3, #4]
 8004038:	609a      	str	r2, [r3, #8]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	611a      	str	r2, [r3, #16]
 800403e:	615a      	str	r2, [r3, #20]
 8004040:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8004042:	f003 fefd 	bl	8007e40 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004046:	2000      	movs	r0, #0
 8004048:	f7ff feff 	bl	8003e4a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800404c:	4b28      	ldr	r3, [pc, #160]	@ (80040f0 <SystemClock_Config+0xd4>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004054:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <SystemClock_Config+0xd4>)
 8004056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b24      	ldr	r3, [pc, #144]	@ (80040f0 <SystemClock_Config+0xd4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004064:	603b      	str	r3, [r7, #0]
 8004066:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004068:	2307      	movs	r3, #7
 800406a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800406c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004072:	2301      	movs	r3, #1
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004076:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800407a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800407c:	2340      	movs	r3, #64	@ 0x40
 800407e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004080:	2302      	movs	r3, #2
 8004082:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004084:	2303      	movs	r3, #3
 8004086:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8004088:	2310      	movs	r3, #16
 800408a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 800408c:	2308      	movs	r3, #8
 800408e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004090:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004094:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004096:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800409a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800409c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80040a2:	f107 0320 	add.w	r3, r7, #32
 80040a6:	4618      	mov	r0, r3
 80040a8:	f004 fa56 	bl	8008558 <HAL_RCC_OscConfig>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80040b2:	f000 fa7f 	bl	80045b4 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80040b6:	236f      	movs	r3, #111	@ 0x6f
 80040b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040ba:	2303      	movs	r3, #3
 80040bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040be:	2300      	movs	r3, #0
 80040c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040c6:	2300      	movs	r3, #0
 80040c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80040ca:	2380      	movs	r3, #128	@ 0x80
 80040cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80040ce:	2300      	movs	r3, #0
 80040d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80040d2:	1d3b      	adds	r3, r7, #4
 80040d4:	2103      	movs	r1, #3
 80040d6:	4618      	mov	r0, r3
 80040d8:	f004 fdb2 	bl	8008c40 <HAL_RCC_ClockConfig>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d001      	beq.n	80040e6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80040e2:	f000 fa67 	bl	80045b4 <Error_Handler>
  }
}
 80040e6:	bf00      	nop
 80040e8:	3768      	adds	r7, #104	@ 0x68
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	58000400 	.word	0x58000400

080040f4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b094      	sub	sp, #80	@ 0x50
 80040f8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040fa:	463b      	mov	r3, r7
 80040fc:	2250      	movs	r2, #80	@ 0x50
 80040fe:	2100      	movs	r1, #0
 8004100:	4618      	mov	r0, r3
 8004102:	f012 fab3 	bl	801666c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8004106:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800410a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 800410c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004110:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8004112:	2302      	movs	r3, #2
 8004114:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8004116:	2310      	movs	r3, #16
 8004118:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800411a:	463b      	mov	r3, r7
 800411c:	4618      	mov	r0, r3
 800411e:	f005 f9c5 	bl	80094ac <HAL_RCCEx_PeriphCLKConfig>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8004128:	f000 fa44 	bl	80045b4 <Error_Handler>
  /* USER CODE BEGIN Smps */



  /* USER CODE END Smps */
}
 800412c:	bf00      	nop
 800412e:	3750      	adds	r7, #80	@ 0x50
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004138:	4b1d      	ldr	r3, [pc, #116]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 800413a:	4a1e      	ldr	r2, [pc, #120]	@ (80041b4 <MX_I2C1_Init+0x80>)
 800413c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300B29;
 800413e:	4b1c      	ldr	r3, [pc, #112]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004140:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <MX_I2C1_Init+0x84>)
 8004142:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004144:	4b1a      	ldr	r3, [pc, #104]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800414a:	4b19      	ldr	r3, [pc, #100]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 800414c:	2201      	movs	r2, #1
 800414e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004150:	4b17      	ldr	r3, [pc, #92]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004156:	4b16      	ldr	r3, [pc, #88]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004158:	2200      	movs	r2, #0
 800415a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800415c:	4b14      	ldr	r3, [pc, #80]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 800415e:	2200      	movs	r2, #0
 8004160:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004162:	4b13      	ldr	r3, [pc, #76]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004164:	2200      	movs	r2, #0
 8004166:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004168:	4b11      	ldr	r3, [pc, #68]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 800416a:	2200      	movs	r2, #0
 800416c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800416e:	4810      	ldr	r0, [pc, #64]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004170:	f001 fc34 	bl	80059dc <HAL_I2C_Init>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800417a:	f000 fa1b 	bl	80045b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800417e:	2100      	movs	r1, #0
 8004180:	480b      	ldr	r0, [pc, #44]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004182:	f001 fff9 	bl	8006178 <HAL_I2CEx_ConfigAnalogFilter>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800418c:	f000 fa12 	bl	80045b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004190:	2100      	movs	r1, #0
 8004192:	4807      	ldr	r0, [pc, #28]	@ (80041b0 <MX_I2C1_Init+0x7c>)
 8004194:	f002 f83b 	bl	800620e <HAL_I2CEx_ConfigDigitalFilter>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800419e:	f000 fa09 	bl	80045b4 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80041a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80041a6:	f002 f87f 	bl	80062a8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041aa:	bf00      	nop
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	2000165c 	.word	0x2000165c
 80041b4:	40005400 	.word	0x40005400
 80041b8:	00300b29 	.word	0x00300b29

080041bc <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80041c0:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <MX_IPCC_Init+0x20>)
 80041c2:	4a07      	ldr	r2, [pc, #28]	@ (80041e0 <MX_IPCC_Init+0x24>)
 80041c4:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80041c6:	4805      	ldr	r0, [pc, #20]	@ (80041dc <MX_IPCC_Init+0x20>)
 80041c8:	f002 f880 	bl	80062cc <HAL_IPCC_Init>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80041d2:	f000 f9ef 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80041d6:	bf00      	nop
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	200016b0 	.word	0x200016b0
 80041e0:	58000c00 	.word	0x58000c00

080041e4 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80041e8:	bf00      	nop
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80041f8:	4b07      	ldr	r3, [pc, #28]	@ (8004218 <MX_RNG_Init+0x24>)
 80041fa:	4a08      	ldr	r2, [pc, #32]	@ (800421c <MX_RNG_Init+0x28>)
 80041fc:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <MX_RNG_Init+0x24>)
 8004200:	2200      	movs	r2, #0
 8004202:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004204:	4804      	ldr	r0, [pc, #16]	@ (8004218 <MX_RNG_Init+0x24>)
 8004206:	f005 fc12 	bl	8009a2e <HAL_RNG_Init>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8004210:	f000 f9d0 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004214:	bf00      	nop
 8004216:	bd80      	pop	{r7, pc}
 8004218:	200016ec 	.word	0x200016ec
 800421c:	58001000 	.word	0x58001000

08004220 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004224:	4b16      	ldr	r3, [pc, #88]	@ (8004280 <MX_RTC_Init+0x60>)
 8004226:	4a17      	ldr	r2, [pc, #92]	@ (8004284 <MX_RTC_Init+0x64>)
 8004228:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800422a:	4b15      	ldr	r3, [pc, #84]	@ (8004280 <MX_RTC_Init+0x60>)
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8004230:	4b13      	ldr	r3, [pc, #76]	@ (8004280 <MX_RTC_Init+0x60>)
 8004232:	220f      	movs	r2, #15
 8004234:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8004236:	4b12      	ldr	r3, [pc, #72]	@ (8004280 <MX_RTC_Init+0x60>)
 8004238:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800423c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800423e:	4b10      	ldr	r3, [pc, #64]	@ (8004280 <MX_RTC_Init+0x60>)
 8004240:	2200      	movs	r2, #0
 8004242:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004244:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <MX_RTC_Init+0x60>)
 8004246:	2200      	movs	r2, #0
 8004248:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <MX_RTC_Init+0x60>)
 800424c:	2200      	movs	r2, #0
 800424e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <MX_RTC_Init+0x60>)
 8004252:	2200      	movs	r2, #0
 8004254:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004256:	480a      	ldr	r0, [pc, #40]	@ (8004280 <MX_RTC_Init+0x60>)
 8004258:	f005 fc88 	bl	8009b6c <HAL_RTC_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8004262:	f000 f9a7 	bl	80045b4 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	4805      	ldr	r0, [pc, #20]	@ (8004280 <MX_RTC_Init+0x60>)
 800426c:	f005 fd7e 	bl	8009d6c <HAL_RTCEx_SetWakeUpTimer_IT>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8004276:	f000 f99d 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20001700 	.word	0x20001700
 8004284:	40002800 	.word	0x40002800

08004288 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800428c:	4b1b      	ldr	r3, [pc, #108]	@ (80042fc <MX_SPI1_Init+0x74>)
 800428e:	4a1c      	ldr	r2, [pc, #112]	@ (8004300 <MX_SPI1_Init+0x78>)
 8004290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004292:	4b1a      	ldr	r3, [pc, #104]	@ (80042fc <MX_SPI1_Init+0x74>)
 8004294:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800429a:	4b18      	ldr	r3, [pc, #96]	@ (80042fc <MX_SPI1_Init+0x74>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80042a0:	4b16      	ldr	r3, [pc, #88]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80042a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80042a8:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80042ae:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80042b4:	4b11      	ldr	r3, [pc, #68]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80042bc:	4b0f      	ldr	r3, [pc, #60]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042be:	2208      	movs	r2, #8
 80042c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042c2:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80042d4:	4b09      	ldr	r3, [pc, #36]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042d6:	2207      	movs	r2, #7
 80042d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042da:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042dc:	2200      	movs	r2, #0
 80042de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042e0:	4b06      	ldr	r3, [pc, #24]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042e2:	2208      	movs	r2, #8
 80042e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80042e6:	4805      	ldr	r0, [pc, #20]	@ (80042fc <MX_SPI1_Init+0x74>)
 80042e8:	f005 fdfc 	bl	8009ee4 <HAL_SPI_Init>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80042f2:	f000 f95f 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80042f6:	bf00      	nop
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20001724 	.word	0x20001724
 8004300:	40013000 	.word	0x40013000

08004304 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800430a:	f107 0310 	add.w	r3, r7, #16
 800430e:	2200      	movs	r2, #0
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	605a      	str	r2, [r3, #4]
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004318:	1d3b      	adds	r3, r7, #4
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	605a      	str	r2, [r3, #4]
 8004320:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004322:	4b20      	ldr	r3, [pc, #128]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 8004324:	4a20      	ldr	r2, [pc, #128]	@ (80043a8 <MX_TIM1_Init+0xa4>)
 8004326:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 3199;
 8004328:	4b1e      	ldr	r3, [pc, #120]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 800432a:	f640 427f 	movw	r2, #3199	@ 0xc7f
 800432e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8004330:	4b1c      	ldr	r3, [pc, #112]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 8004332:	2210      	movs	r2, #16
 8004334:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8004336:	4b1b      	ldr	r3, [pc, #108]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 8004338:	2209      	movs	r2, #9
 800433a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800433c:	4b19      	ldr	r3, [pc, #100]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 800433e:	2200      	movs	r2, #0
 8004340:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004342:	4b18      	ldr	r3, [pc, #96]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 8004344:	2200      	movs	r2, #0
 8004346:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004348:	4b16      	ldr	r3, [pc, #88]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 800434a:	2280      	movs	r2, #128	@ 0x80
 800434c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800434e:	4815      	ldr	r0, [pc, #84]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 8004350:	f006 fb66 	bl	800aa20 <HAL_TIM_Base_Init>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800435a:	f000 f92b 	bl	80045b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800435e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004362:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004364:	f107 0310 	add.w	r3, r7, #16
 8004368:	4619      	mov	r1, r3
 800436a:	480e      	ldr	r0, [pc, #56]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 800436c:	f006 fd05 	bl	800ad7a <HAL_TIM_ConfigClockSource>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004376:	f000 f91d 	bl	80045b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004386:	1d3b      	adds	r3, r7, #4
 8004388:	4619      	mov	r1, r3
 800438a:	4806      	ldr	r0, [pc, #24]	@ (80043a4 <MX_TIM1_Init+0xa0>)
 800438c:	f006 fef2 	bl	800b174 <HAL_TIMEx_MasterConfigSynchronization>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004396:	f000 f90d 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800439a:	bf00      	nop
 800439c:	3720      	adds	r7, #32
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20001788 	.word	0x20001788
 80043a8:	40012c00 	.word	0x40012c00

080043ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b088      	sub	sp, #32
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043b2:	f107 0310 	add.w	r3, r7, #16
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
 80043ba:	605a      	str	r2, [r3, #4]
 80043bc:	609a      	str	r2, [r3, #8]
 80043be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043c0:	1d3b      	adds	r3, r7, #4
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
 80043c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80043ca:	4b1e      	ldr	r3, [pc, #120]	@ (8004444 <MX_TIM2_Init+0x98>)
 80043cc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80043d0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31999;
 80043d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004444 <MX_TIM2_Init+0x98>)
 80043d4:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 80043d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80043da:	4b1a      	ldr	r3, [pc, #104]	@ (8004444 <MX_TIM2_Init+0x98>)
 80043dc:	2210      	movs	r2, #16
 80043de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80043e0:	4b18      	ldr	r3, [pc, #96]	@ (8004444 <MX_TIM2_Init+0x98>)
 80043e2:	2264      	movs	r2, #100	@ 0x64
 80043e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043e6:	4b17      	ldr	r3, [pc, #92]	@ (8004444 <MX_TIM2_Init+0x98>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80043ec:	4b15      	ldr	r3, [pc, #84]	@ (8004444 <MX_TIM2_Init+0x98>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80043f2:	4814      	ldr	r0, [pc, #80]	@ (8004444 <MX_TIM2_Init+0x98>)
 80043f4:	f006 fb14 	bl	800aa20 <HAL_TIM_Base_Init>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80043fe:	f000 f8d9 	bl	80045b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004406:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004408:	f107 0310 	add.w	r3, r7, #16
 800440c:	4619      	mov	r1, r3
 800440e:	480d      	ldr	r0, [pc, #52]	@ (8004444 <MX_TIM2_Init+0x98>)
 8004410:	f006 fcb3 	bl	800ad7a <HAL_TIM_ConfigClockSource>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800441a:	f000 f8cb 	bl	80045b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800441e:	2300      	movs	r3, #0
 8004420:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004422:	2300      	movs	r3, #0
 8004424:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4806      	ldr	r0, [pc, #24]	@ (8004444 <MX_TIM2_Init+0x98>)
 800442c:	f006 fea2 	bl	800b174 <HAL_TIMEx_MasterConfigSynchronization>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004436:	f000 f8bd 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800443a:	bf00      	nop
 800443c:	3720      	adds	r7, #32
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	200017d4 	.word	0x200017d4

08004448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800444c:	2004      	movs	r0, #4
 800444e:	f7ff fd12 	bl	8003e76 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004452:	2001      	movs	r0, #1
 8004454:	f7ff fd0f 	bl	8003e76 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004458:	2200      	movs	r2, #0
 800445a:	2100      	movs	r1, #0
 800445c:	200b      	movs	r0, #11
 800445e:	f000 fe74 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004462:	200b      	movs	r0, #11
 8004464:	f000 fe8b 	bl	800517e <HAL_NVIC_EnableIRQ>

}
 8004468:	bf00      	nop
 800446a:	bd80      	pop	{r7, pc}

0800446c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004472:	1d3b      	adds	r3, r7, #4
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	609a      	str	r2, [r3, #8]
 800447c:	60da      	str	r2, [r3, #12]
 800447e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004480:	2004      	movs	r0, #4
 8004482:	f7ff fd11 	bl	8003ea8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004486:	2002      	movs	r0, #2
 8004488:	f7ff fd0e 	bl	8003ea8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800448c:	2001      	movs	r0, #1
 800448e:	f7ff fd0b 	bl	8003ea8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004492:	2010      	movs	r0, #16
 8004494:	f7ff fd08 	bl	8003ea8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ADS_RSTB_Pin|ADS_CS_Pin, GPIO_PIN_SET);
 8004498:	2201      	movs	r2, #1
 800449a:	2103      	movs	r1, #3
 800449c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044a0:	f001 fa48 	bl	8005934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_CS_GPIO_Port, IMU_CS_Pin, GPIO_PIN_RESET);
 80044a4:	2200      	movs	r2, #0
 80044a6:	2140      	movs	r1, #64	@ 0x40
 80044a8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044ac:	f001 fa42 	bl	8005934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IMU_ADDR_GPIO_Port, IMU_ADDR_Pin, GPIO_PIN_RESET);
 80044b0:	2200      	movs	r2, #0
 80044b2:	2104      	movs	r1, #4
 80044b4:	483d      	ldr	r0, [pc, #244]	@ (80045ac <MX_GPIO_Init+0x140>)
 80044b6:	f001 fa3d 	bl	8005934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGB_B_Pin|RGB_G_Pin, GPIO_PIN_SET);
 80044ba:	2201      	movs	r2, #1
 80044bc:	2103      	movs	r1, #3
 80044be:	483b      	ldr	r0, [pc, #236]	@ (80045ac <MX_GPIO_Init+0x140>)
 80044c0:	f001 fa38 	bl	8005934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RGB_R_GPIO_Port, RGB_R_Pin, GPIO_PIN_SET);
 80044c4:	2201      	movs	r2, #1
 80044c6:	2110      	movs	r1, #16
 80044c8:	4839      	ldr	r0, [pc, #228]	@ (80045b0 <MX_GPIO_Init+0x144>)
 80044ca:	f001 fa33 	bl	8005934 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADS_RSTB_Pin ADS_CS_Pin */
  GPIO_InitStruct.Pin = ADS_RSTB_Pin|ADS_CS_Pin;
 80044ce:	2303      	movs	r3, #3
 80044d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044d2:	2301      	movs	r3, #1
 80044d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044d6:	2301      	movs	r3, #1
 80044d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044da:	2300      	movs	r3, #0
 80044dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044de:	1d3b      	adds	r3, r7, #4
 80044e0:	4619      	mov	r1, r3
 80044e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80044e6:	f001 f8b5 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 80044ea:	2330      	movs	r3, #48	@ 0x30
 80044ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80044ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80044f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044f4:	2301      	movs	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f8:	1d3b      	adds	r3, r7, #4
 80044fa:	4619      	mov	r1, r3
 80044fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004500:	f001 f8a8 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pin : IMU_CS_Pin */
  GPIO_InitStruct.Pin = IMU_CS_Pin;
 8004504:	2340      	movs	r3, #64	@ 0x40
 8004506:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004508:	2301      	movs	r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800450c:	2300      	movs	r3, #0
 800450e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(IMU_CS_GPIO_Port, &GPIO_InitStruct);
 8004514:	1d3b      	adds	r3, r7, #4
 8004516:	4619      	mov	r1, r3
 8004518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800451c:	f001 f89a 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_ADDR_Pin RGB_B_Pin RGB_G_Pin */
  GPIO_InitStruct.Pin = IMU_ADDR_Pin|RGB_B_Pin|RGB_G_Pin;
 8004520:	2307      	movs	r3, #7
 8004522:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004524:	2301      	movs	r3, #1
 8004526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004528:	2300      	movs	r3, #0
 800452a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004530:	1d3b      	adds	r3, r7, #4
 8004532:	4619      	mov	r1, r3
 8004534:	481d      	ldr	r0, [pc, #116]	@ (80045ac <MX_GPIO_Init+0x140>)
 8004536:	f001 f88d 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pin : RGB_R_Pin */
  GPIO_InitStruct.Pin = RGB_R_Pin;
 800453a:	2310      	movs	r3, #16
 800453c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800453e:	2301      	movs	r3, #1
 8004540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004546:	2300      	movs	r3, #0
 8004548:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RGB_R_GPIO_Port, &GPIO_InitStruct);
 800454a:	1d3b      	adds	r3, r7, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4818      	ldr	r0, [pc, #96]	@ (80045b0 <MX_GPIO_Init+0x144>)
 8004550:	f001 f880 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_ALARMB_Pin */
  GPIO_InitStruct.Pin = ADS_ALARMB_Pin;
 8004554:	2340      	movs	r3, #64	@ 0x40
 8004556:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800455c:	2301      	movs	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_ALARMB_GPIO_Port, &GPIO_InitStruct);
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	4619      	mov	r1, r3
 8004564:	4811      	ldr	r0, [pc, #68]	@ (80045ac <MX_GPIO_Init+0x140>)
 8004566:	f001 f875 	bl	8005654 <HAL_GPIO_Init>

  /*Configure GPIO pin : ADS_DRDY_Pin */
  GPIO_InitStruct.Pin = ADS_DRDY_Pin;
 800456a:	2380      	movs	r3, #128	@ 0x80
 800456c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800456e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004572:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004574:	2301      	movs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ADS_DRDY_GPIO_Port, &GPIO_InitStruct);
 8004578:	1d3b      	adds	r3, r7, #4
 800457a:	4619      	mov	r1, r3
 800457c:	480b      	ldr	r0, [pc, #44]	@ (80045ac <MX_GPIO_Init+0x140>)
 800457e:	f001 f869 	bl	8005654 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	2100      	movs	r1, #0
 8004586:	200a      	movs	r0, #10
 8004588:	f000 fddf 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800458c:	200a      	movs	r0, #10
 800458e:	f000 fdf6 	bl	800517e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004592:	2200      	movs	r2, #0
 8004594:	2100      	movs	r1, #0
 8004596:	2017      	movs	r0, #23
 8004598:	f000 fdd7 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800459c:	2017      	movs	r0, #23
 800459e:	f000 fdee 	bl	800517e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80045a2:	bf00      	nop
 80045a4:	3718      	adds	r7, #24
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	48000400 	.word	0x48000400
 80045b0:	48001000 	.word	0x48001000

080045b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80045b8:	b672      	cpsid	i
}
 80045ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  SET_RGB_COLOR(RED);
 80045bc:	2200      	movs	r2, #0
 80045be:	2110      	movs	r1, #16
 80045c0:	4806      	ldr	r0, [pc, #24]	@ (80045dc <Error_Handler+0x28>)
 80045c2:	f001 f9b7 	bl	8005934 <HAL_GPIO_WritePin>
 80045c6:	2201      	movs	r2, #1
 80045c8:	2102      	movs	r1, #2
 80045ca:	4805      	ldr	r0, [pc, #20]	@ (80045e0 <Error_Handler+0x2c>)
 80045cc:	f001 f9b2 	bl	8005934 <HAL_GPIO_WritePin>
 80045d0:	2201      	movs	r2, #1
 80045d2:	2101      	movs	r1, #1
 80045d4:	4802      	ldr	r0, [pc, #8]	@ (80045e0 <Error_Handler+0x2c>)
 80045d6:	f001 f9ad 	bl	8005934 <HAL_GPIO_WritePin>
 80045da:	e7ef      	b.n	80045bc <Error_Handler+0x8>
 80045dc:	48001000 	.word	0x48001000
 80045e0:	48000400 	.word	0x48000400

080045e4 <LL_RCC_EnableRTC>:
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80045e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <LL_AHB2_GRP1_EnableClock>:
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800460e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004612:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004614:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4313      	orrs	r3, r2
 800461c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800461e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4013      	ands	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800462a:	68fb      	ldr	r3, [r7, #12]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <LL_AHB3_GRP1_EnableClock>:
{
 8004638:	b480      	push	{r7}
 800463a:	b085      	sub	sp, #20
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8004640:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004644:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004646:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4313      	orrs	r3, r2
 800464e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8004650:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004654:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4013      	ands	r3, r2
 800465a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800465c:	68fb      	ldr	r3, [r7, #12]
}
 800465e:	bf00      	nop
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <LL_APB1_GRP1_EnableClock>:
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004676:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004678:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	4313      	orrs	r3, r2
 8004680:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004686:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4013      	ands	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800468e:	68fb      	ldr	r3, [r7, #12]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800469c:	b480      	push	{r7}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80046a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046a8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80046b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046b8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80046c0:	68fb      	ldr	r3, [r7, #12]
}
 80046c2:	bf00      	nop
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80046d2:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80046d6:	f7ff ffaf 	bl	8004638 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80046da:	2200      	movs	r2, #0
 80046dc:	2100      	movs	r1, #0
 80046de:	2005      	movs	r0, #5
 80046e0:	f000 fd33 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80046e4:	2005      	movs	r0, #5
 80046e6:	f000 fd4a 	bl	800517e <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80046ea:	2200      	movs	r2, #0
 80046ec:	2100      	movs	r1, #0
 80046ee:	202e      	movs	r0, #46	@ 0x2e
 80046f0:	f000 fd2b 	bl	800514a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80046f4:	202e      	movs	r0, #46	@ 0x2e
 80046f6:	f000 fd42 	bl	800517e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046fa:	bf00      	nop
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b09c      	sub	sp, #112	@ 0x70
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004708:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	2250      	movs	r2, #80	@ 0x50
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f011 ffa3 	bl	801666c <memset>
  if(hi2c->Instance==I2C1)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	@ (8004788 <HAL_I2C_MspInit+0x88>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d126      	bne.n	800477e <HAL_I2C_MspInit+0x7e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004730:	2304      	movs	r3, #4
 8004732:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004734:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800473a:	f107 030c 	add.w	r3, r7, #12
 800473e:	4618      	mov	r0, r3
 8004740:	f004 feb4 	bl	80094ac <HAL_RCCEx_PeriphCLKConfig>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800474a:	f7ff ff33 	bl	80045b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800474e:	2002      	movs	r0, #2
 8004750:	f7ff ff59 	bl	8004606 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004754:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004758:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800475a:	2312      	movs	r3, #18
 800475c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004762:	2300      	movs	r3, #0
 8004764:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004766:	2304      	movs	r3, #4
 8004768:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800476a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800476e:	4619      	mov	r1, r3
 8004770:	4806      	ldr	r0, [pc, #24]	@ (800478c <HAL_I2C_MspInit+0x8c>)
 8004772:	f000 ff6f 	bl	8005654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004776:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800477a:	f7ff ff76 	bl	800466a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800477e:	bf00      	nop
 8004780:	3770      	adds	r7, #112	@ 0x70
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40005400 	.word	0x40005400
 800478c:	48000400 	.word	0x48000400

08004790 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a0d      	ldr	r2, [pc, #52]	@ (80047d4 <HAL_IPCC_MspInit+0x44>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d113      	bne.n	80047ca <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80047a2:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80047a6:	f7ff ff47 	bl	8004638 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80047aa:	2200      	movs	r2, #0
 80047ac:	2100      	movs	r1, #0
 80047ae:	202c      	movs	r0, #44	@ 0x2c
 80047b0:	f000 fccb 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80047b4:	202c      	movs	r0, #44	@ 0x2c
 80047b6:	f000 fce2 	bl	800517e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80047ba:	2200      	movs	r2, #0
 80047bc:	2100      	movs	r1, #0
 80047be:	202d      	movs	r0, #45	@ 0x2d
 80047c0:	f000 fcc3 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80047c4:	202d      	movs	r0, #45	@ 0x2d
 80047c6:	f000 fcda 	bl	800517e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80047ca:	bf00      	nop
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	58000c00 	.word	0x58000c00

080047d8 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b096      	sub	sp, #88	@ 0x58
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	2250      	movs	r2, #80	@ 0x50
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f011 ff3f 	bl	801666c <memset>
  if(hrng->Instance==RNG)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a11      	ldr	r2, [pc, #68]	@ (8004838 <HAL_RNG_MspInit+0x60>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d11b      	bne.n	8004830 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80047f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047fc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_LSE;
 80047fe:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004802:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004804:	f107 0308 	add.w	r3, r7, #8
 8004808:	4618      	mov	r0, r3
 800480a:	f004 fe4f 	bl	80094ac <HAL_RCCEx_PeriphCLKConfig>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d001      	beq.n	8004818 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8004814:	f7ff fece 	bl	80045b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004818:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800481c:	f7ff ff0c 	bl	8004638 <LL_AHB3_GRP1_EnableClock>
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(RNG_IRQn, 0, 0);
 8004820:	2200      	movs	r2, #0
 8004822:	2100      	movs	r1, #0
 8004824:	2035      	movs	r0, #53	@ 0x35
 8004826:	f000 fc90 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RNG_IRQn);
 800482a:	2035      	movs	r0, #53	@ 0x35
 800482c:	f000 fca7 	bl	800517e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004830:	bf00      	nop
 8004832:	3758      	adds	r7, #88	@ 0x58
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	58001000 	.word	0x58001000

0800483c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b096      	sub	sp, #88	@ 0x58
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004844:	f107 0308 	add.w	r3, r7, #8
 8004848:	2250      	movs	r2, #80	@ 0x50
 800484a:	2100      	movs	r1, #0
 800484c:	4618      	mov	r0, r3
 800484e:	f011 ff0d 	bl	801666c <memset>
  if(hrtc->Instance==RTC)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a12      	ldr	r2, [pc, #72]	@ (80048a0 <HAL_RTC_MspInit+0x64>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d11d      	bne.n	8004898 <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800485c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004860:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004866:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004868:	f107 0308 	add.w	r3, r7, #8
 800486c:	4618      	mov	r0, r3
 800486e:	f004 fe1d 	bl	80094ac <HAL_RCCEx_PeriphCLKConfig>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004878:	f7ff fe9c 	bl	80045b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800487c:	f7ff feb2 	bl	80045e4 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004880:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004884:	f7ff fef1 	bl	800466a <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8004888:	2200      	movs	r2, #0
 800488a:	2100      	movs	r1, #0
 800488c:	2003      	movs	r0, #3
 800488e:	f000 fc5c 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8004892:	2003      	movs	r0, #3
 8004894:	f000 fc73 	bl	800517e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004898:	bf00      	nop
 800489a:	3758      	adds	r7, #88	@ 0x58
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40002800 	.word	0x40002800

080048a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b088      	sub	sp, #32
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048ac:	f107 030c 	add.w	r3, r7, #12
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	605a      	str	r2, [r3, #4]
 80048b6:	609a      	str	r2, [r3, #8]
 80048b8:	60da      	str	r2, [r3, #12]
 80048ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a0e      	ldr	r2, [pc, #56]	@ (80048fc <HAL_SPI_MspInit+0x58>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d116      	bne.n	80048f4 <HAL_SPI_MspInit+0x50>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80048c6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80048ca:	f7ff fee7 	bl	800469c <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048ce:	2002      	movs	r0, #2
 80048d0:	f7ff fe99 	bl	8004606 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80048d4:	2338      	movs	r3, #56	@ 0x38
 80048d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d8:	2302      	movs	r3, #2
 80048da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048dc:	2300      	movs	r3, #0
 80048de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e0:	2300      	movs	r3, #0
 80048e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80048e4:	2305      	movs	r3, #5
 80048e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80048e8:	f107 030c 	add.w	r3, r7, #12
 80048ec:	4619      	mov	r1, r3
 80048ee:	4804      	ldr	r0, [pc, #16]	@ (8004900 <HAL_SPI_MspInit+0x5c>)
 80048f0:	f000 feb0 	bl	8005654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80048f4:	bf00      	nop
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40013000 	.word	0x40013000
 8004900:	48000400 	.word	0x48000400

08004904 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <HAL_TIM_Base_MspInit+0x54>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10c      	bne.n	8004930 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004916:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800491a:	f7ff febf 	bl	800469c <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800491e:	2200      	movs	r2, #0
 8004920:	2100      	movs	r1, #0
 8004922:	2019      	movs	r0, #25
 8004924:	f000 fc11 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004928:	2019      	movs	r0, #25
 800492a:	f000 fc28 	bl	800517e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800492e:	e00f      	b.n	8004950 <HAL_TIM_Base_MspInit+0x4c>
  else if(htim_base->Instance==TIM2)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004938:	d10a      	bne.n	8004950 <HAL_TIM_Base_MspInit+0x4c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800493a:	2001      	movs	r0, #1
 800493c:	f7ff fe95 	bl	800466a <LL_APB1_GRP1_EnableClock>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004940:	2200      	movs	r2, #0
 8004942:	2100      	movs	r1, #0
 8004944:	201c      	movs	r0, #28
 8004946:	f000 fc00 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800494a:	201c      	movs	r0, #28
 800494c:	f000 fc17 	bl	800517e <HAL_NVIC_EnableIRQ>
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40012c00 	.word	0x40012c00

0800495c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <NMI_Handler+0x4>

08004964 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004964:	b480      	push	{r7}
 8004966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004968:	bf00      	nop
 800496a:	e7fd      	b.n	8004968 <HardFault_Handler+0x4>

0800496c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <MemManage_Handler+0x4>

08004974 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004978:	bf00      	nop
 800497a:	e7fd      	b.n	8004978 <BusFault_Handler+0x4>

0800497c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004980:	bf00      	nop
 8004982:	e7fd      	b.n	8004980 <UsageFault_Handler+0x4>

08004984 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004988:	bf00      	nop
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049b2:	f000 fa57 	bl	8004e64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}

080049ba <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80049ba:	b580      	push	{r7, lr}
 80049bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80049be:	f7fe fd1b 	bl	80033f8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80049c2:	bf00      	nop
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80049c6:	b480      	push	{r7}
 80049c8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80049ca:	bf00      	nop
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 80049d8:	2010      	movs	r0, #16
 80049da:	f000 ffc3 	bl	8005964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80049de:	bf00      	nop
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80049e8:	4802      	ldr	r0, [pc, #8]	@ (80049f4 <DMA1_Channel1_IRQHandler+0x10>)
 80049ea:	f000 fd45 	bl	8005478 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80049ee:	bf00      	nop
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200018b4 	.word	0x200018b4

080049f8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80049fc:	4802      	ldr	r0, [pc, #8]	@ (8004a08 <USB_LP_IRQHandler+0x10>)
 80049fe:	f001 fddb 	bl	80065b8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20002f60 	.word	0x20002f60

08004a0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 8004a10:	2020      	movs	r0, #32
 8004a12:	f000 ffa7 	bl	8005964 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ADS_DRDY_Pin);
 8004a16:	2080      	movs	r0, #128	@ 0x80
 8004a18:	f000 ffa4 	bl	8005964 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004a24:	4802      	ldr	r0, [pc, #8]	@ (8004a30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004a26:	f006 f8a1 	bl	800ab6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004a2a:	bf00      	nop
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	20001788 	.word	0x20001788

08004a34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004a38:	4802      	ldr	r0, [pc, #8]	@ (8004a44 <TIM2_IRQHandler+0x10>)
 8004a3a:	f006 f897 	bl	800ab6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004a3e:	bf00      	nop
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	200017d4 	.word	0x200017d4

08004a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004a4c:	4802      	ldr	r0, [pc, #8]	@ (8004a58 <USART1_IRQHandler+0x10>)
 8004a4e:	f006 fc8f 	bl	800b370 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20001820 	.word	0x20001820

08004a5c <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8004a60:	f010 faa0 	bl	8014fa4 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8004a64:	bf00      	nop
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8004a6c:	f010 fad0 	bl	8015010 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8004a70:	bf00      	nop
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8004a78:	f000 ff8c 	bl	8005994 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8004a7c:	bf00      	nop
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <RNG_IRQHandler>:

/**
  * @brief This function handles RNG global interrupt.
  */
void RNG_IRQHandler(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_IRQn 0 */

  /* USER CODE END RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8004a84:	4802      	ldr	r0, [pc, #8]	@ (8004a90 <RNG_IRQHandler+0x10>)
 8004a86:	f005 f807 	bl	8009a98 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN RNG_IRQn 1 */

  /* USER CODE END RNG_IRQn 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200016ec 	.word	0x200016ec

08004a94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
 8004aa4:	e00a      	b.n	8004abc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004aa6:	f3af 8000 	nop.w
 8004aaa:	4601      	mov	r1, r0
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	1c5a      	adds	r2, r3, #1
 8004ab0:	60ba      	str	r2, [r7, #8]
 8004ab2:	b2ca      	uxtb	r2, r1
 8004ab4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	dbf0      	blt.n	8004aa6 <_read+0x12>
  }

  return len;
 8004ac4:	687b      	ldr	r3, [r7, #4]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3718      	adds	r7, #24
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <_close>:
  }
  return len;
}

int _close(int file)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b083      	sub	sp, #12
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
 8004aee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004af6:	605a      	str	r2, [r3, #4]
  return 0;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <_isatty>:

int _isatty(int file)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004b0e:	2301      	movs	r3, #1
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b085      	sub	sp, #20
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
	...

08004b38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b40:	4a14      	ldr	r2, [pc, #80]	@ (8004b94 <_sbrk+0x5c>)
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <_sbrk+0x60>)
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b4c:	4b13      	ldr	r3, [pc, #76]	@ (8004b9c <_sbrk+0x64>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b54:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <_sbrk+0x64>)
 8004b56:	4a12      	ldr	r2, [pc, #72]	@ (8004ba0 <_sbrk+0x68>)
 8004b58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b5a:	4b10      	ldr	r3, [pc, #64]	@ (8004b9c <_sbrk+0x64>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d207      	bcs.n	8004b78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b68:	f011 fde4 	bl	8016734 <__errno>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	220c      	movs	r2, #12
 8004b70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b72:	f04f 33ff 	mov.w	r3, #4294967295
 8004b76:	e009      	b.n	8004b8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b78:	4b08      	ldr	r3, [pc, #32]	@ (8004b9c <_sbrk+0x64>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b7e:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <_sbrk+0x64>)
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4413      	add	r3, r2
 8004b86:	4a05      	ldr	r2, [pc, #20]	@ (8004b9c <_sbrk+0x64>)
 8004b88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3718      	adds	r7, #24
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20030000 	.word	0x20030000
 8004b98:	00000600 	.word	0x00000600
 8004b9c:	20001914 	.word	0x20001914
 8004ba0:	20003650 	.word	0x20003650

08004ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004ba8:	4b24      	ldr	r3, [pc, #144]	@ (8004c3c <SystemInit+0x98>)
 8004baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bae:	4a23      	ldr	r2, [pc, #140]	@ (8004c3c <SystemInit+0x98>)
 8004bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004bb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bc2:	f043 0301 	orr.w	r3, r3, #1
 8004bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bcc:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004bd0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004bd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004bdc:	4b18      	ldr	r3, [pc, #96]	@ (8004c40 <SystemInit+0x9c>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004be2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004bea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004bee:	f023 0305 	bic.w	r3, r3, #5
 8004bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004bfa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c02:	f023 0301 	bic.w	r3, r3, #1
 8004c06:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004c0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c44 <SystemInit+0xa0>)
 8004c10:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004c12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c16:	4a0b      	ldr	r2, [pc, #44]	@ (8004c44 <SystemInit+0xa0>)
 8004c18:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004c24:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c28:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004c2e:	2200      	movs	r2, #0
 8004c30:	619a      	str	r2, [r3, #24]
}
 8004c32:	bf00      	nop
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	e000ed00 	.word	0xe000ed00
 8004c40:	faf6fefb 	.word	0xfaf6fefb
 8004c44:	22041000 	.word	0x22041000

08004c48 <Timer_Init>:

//------------------------------------------------------------------------------------------//
//                                        Initialisation                                    //
//------------------------------------------------------------------------------------------//
void Timer_Init (void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
	DIAG ("\t\tTimer initialised\r\n");
 8004c4c:	4806      	ldr	r0, [pc, #24]	@ (8004c68 <Timer_Init+0x20>)
 8004c4e:	f7fe f823 	bl	8002c98 <DIAG>
	HAL_Delay (10);
 8004c52:	200a      	movs	r0, #10
 8004c54:	f7fd ff90 	bl	8002b78 <HAL_Delay>
	// Start TIM2 in basic mode
	HAL_TIM_Base_Start_IT(&htim2);
 8004c58:	4804      	ldr	r0, [pc, #16]	@ (8004c6c <Timer_Init+0x24>)
 8004c5a:	f005 ff39 	bl	800aad0 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 8004c5e:	4804      	ldr	r0, [pc, #16]	@ (8004c70 <Timer_Init+0x28>)
 8004c60:	f005 ff36 	bl	800aad0 <HAL_TIM_Base_Start_IT>
}
 8004c64:	bf00      	nop
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	08018abc 	.word	0x08018abc
 8004c6c:	200017d4 	.word	0x200017d4
 8004c70:	20001788 	.word	0x20001788

08004c74 <HAL_TIM_PeriodElapsedCallback>:

//------------------------------------------------------------------------------------------//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

	// Base timer @ 1ms
	if (htim->Instance == TIM2)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c84:	d10b      	bne.n	8004c9e <HAL_TIM_PeriodElapsedCallback+0x2a>
	{

//		tsTimer.bImuFlag = true;
		// Clear the timer interrupt flag
		__HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);		  // Clear the timer interrupt flag
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f06f 0201 	mvn.w	r2, #1
 8004c8e:	611a      	str	r2, [r3, #16]
		tsTimer.u8TimeFlag = true;
 8004c90:	4b22      	ldr	r3, [pc, #136]	@ (8004d1c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004c92:	2201      	movs	r2, #1
 8004c94:	709a      	strb	r2, [r3, #2]
//		tsTimer.bImuFlag = true;
		htim2.Init.Period = Interrupt_ms;
 8004c96:	4b22      	ldr	r3, [pc, #136]	@ (8004d20 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004c98:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004c9c:	60da      	str	r2, [r3, #12]

		//DIAG ("%d\r",  i++);
	}

	// Calculating AFE sampling rate
	if (htim->Instance == TIM1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a20      	ldr	r2, [pc, #128]	@ (8004d24 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d132      	bne.n	8004d0e <HAL_TIM_PeriodElapsedCallback+0x9a>
	{
		tsTimer1.u16Count++;
 8004ca8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d28 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004caa:	891b      	ldrh	r3, [r3, #8]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d28 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004cb4:	811a      	strh	r2, [r3, #8]

		if ( tsTimer1.u16Count > 1999)
 8004cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d28 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004cb8:	891b      	ldrh	r3, [r3, #8]
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8004cc0:	d325      	bcc.n	8004d0e <HAL_TIM_PeriodElapsedCallback+0x9a>
		{
			tsTimer1.u16Count = 0;
 8004cc2:	4b19      	ldr	r3, [pc, #100]	@ (8004d28 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	811a      	strh	r2, [r3, #8]
			AFE.u16SPS = AFE.u16SampleCount;
 8004cc8:	4b18      	ldr	r3, [pc, #96]	@ (8004d2c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004cca:	881b      	ldrh	r3, [r3, #0]
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	4b17      	ldr	r3, [pc, #92]	@ (8004d2c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004cd0:	805a      	strh	r2, [r3, #2]
			AFE.u16SampleCount =0;
 8004cd2:	4b16      	ldr	r3, [pc, #88]	@ (8004d2c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	801a      	strh	r2, [r3, #0]
			tsDebug.u8PacketCount[0]= tsBle.u8PacketCount[0];
 8004cd8:	4b15      	ldr	r3, [pc, #84]	@ (8004d30 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004cda:	799a      	ldrb	r2, [r3, #6]
 8004cdc:	4b15      	ldr	r3, [pc, #84]	@ (8004d34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004cde:	f883 226a 	strb.w	r2, [r3, #618]	@ 0x26a
			tsDebug.u8PacketCount[1]= tsBle.u8PacketCount[1];
 8004ce2:	4b13      	ldr	r3, [pc, #76]	@ (8004d30 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004ce4:	79da      	ldrb	r2, [r3, #7]
 8004ce6:	4b13      	ldr	r3, [pc, #76]	@ (8004d34 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004ce8:	f883 226b 	strb.w	r2, [r3, #619]	@ 0x26b
			tsBle.u8PacketCount[0] = 0;
 8004cec:	4b10      	ldr	r3, [pc, #64]	@ (8004d30 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	719a      	strb	r2, [r3, #6]
			tsBle.u8PacketCount[1] = 0;
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8004d30 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	71da      	strb	r2, [r3, #7]

			IMU.u16SPS = IMU.u16SampleCount;
 8004cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004cfa:	f8b3 31c2 	ldrh.w	r3, [r3, #450]	@ 0x1c2
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	4b0d      	ldr	r3, [pc, #52]	@ (8004d38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004d02:	f8a3 21c4 	strh.w	r2, [r3, #452]	@ 0x1c4
			IMU.u16SampleCount =0;
 8004d06:	4b0c      	ldr	r3, [pc, #48]	@ (8004d38 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f8a3 21c2 	strh.w	r2, [r3, #450]	@ 0x1c2
		}
	}

}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	20001918 	.word	0x20001918
 8004d20:	200017d4 	.word	0x200017d4
 8004d24:	40012c00 	.word	0x40012c00
 8004d28:	20001924 	.word	0x20001924
 8004d2c:	20001930 	.word	0x20001930
 8004d30:	200019d0 	.word	0x200019d0
 8004d34:	2000131c 	.word	0x2000131c
 8004d38:	20000e78 	.word	0x20000e78

08004d3c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004d3c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d3e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d40:	3304      	adds	r3, #4

08004d42 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d42:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d44:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004d46:	d3f9      	bcc.n	8004d3c <CopyDataInit>
  bx lr
 8004d48:	4770      	bx	lr

08004d4a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004d4a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004d4c:	3004      	adds	r0, #4

08004d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004d4e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004d50:	d3fb      	bcc.n	8004d4a <FillZerobss>
  bx lr
 8004d52:	4770      	bx	lr

08004d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d54:	480c      	ldr	r0, [pc, #48]	@ (8004d88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d56:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004d58:	f7ff ff24 	bl	8004ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004d5c:	480b      	ldr	r0, [pc, #44]	@ (8004d8c <LoopForever+0x6>)
 8004d5e:	490c      	ldr	r1, [pc, #48]	@ (8004d90 <LoopForever+0xa>)
 8004d60:	4a0c      	ldr	r2, [pc, #48]	@ (8004d94 <LoopForever+0xe>)
 8004d62:	2300      	movs	r3, #0
 8004d64:	f7ff ffed 	bl	8004d42 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004d68:	480b      	ldr	r0, [pc, #44]	@ (8004d98 <LoopForever+0x12>)
 8004d6a:	490c      	ldr	r1, [pc, #48]	@ (8004d9c <LoopForever+0x16>)
 8004d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8004da0 <LoopForever+0x1a>)
 8004d6e:	2300      	movs	r3, #0
 8004d70:	f7ff ffe7 	bl	8004d42 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004d74:	480b      	ldr	r0, [pc, #44]	@ (8004da4 <LoopForever+0x1e>)
 8004d76:	490c      	ldr	r1, [pc, #48]	@ (8004da8 <LoopForever+0x22>)
 8004d78:	2300      	movs	r3, #0
 8004d7a:	f7ff ffe8 	bl	8004d4e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004d7e:	f011 fcdf 	bl	8016740 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004d82:	f7ff f91f 	bl	8003fc4 <main>

08004d86 <LoopForever>:

LoopForever:
  b LoopForever
 8004d86:	e7fe      	b.n	8004d86 <LoopForever>
  ldr   r0, =_estack
 8004d88:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004d8c:	20000008 	.word	0x20000008
 8004d90:	20000188 	.word	0x20000188
 8004d94:	0801a518 	.word	0x0801a518
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004d98:	200301e4 	.word	0x200301e4
 8004d9c:	20031f57 	.word	0x20031f57
 8004da0:	0801a6de 	.word	0x0801a6de
  INIT_BSS _sbss, _ebss
 8004da4:	200001d8 	.word	0x200001d8
 8004da8:	20003650 	.word	0x20003650

08004dac <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004dac:	e7fe      	b.n	8004dac <ADC1_IRQHandler>
	...

08004db0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004dba:	4b0c      	ldr	r3, [pc, #48]	@ (8004dec <HAL_Init+0x3c>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8004dec <HAL_Init+0x3c>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004dc6:	2003      	movs	r0, #3
 8004dc8:	f000 f9b4 	bl	8005134 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004dcc:	2000      	movs	r0, #0
 8004dce:	f000 f80f 	bl	8004df0 <HAL_InitTick>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d002      	beq.n	8004dde <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	71fb      	strb	r3, [r7, #7]
 8004ddc:	e001      	b.n	8004de2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004dde:	f7ff fc76 	bl	80046ce <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004de2:	79fb      	ldrb	r3, [r7, #7]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3708      	adds	r7, #8
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	58004000 	.word	0x58004000

08004df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004dfc:	4b17      	ldr	r3, [pc, #92]	@ (8004e5c <HAL_InitTick+0x6c>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d024      	beq.n	8004e4e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004e04:	f004 f8c8 	bl	8008f98 <HAL_RCC_GetHCLKFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b14      	ldr	r3, [pc, #80]	@ (8004e5c <HAL_InitTick+0x6c>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	4619      	mov	r1, r3
 8004e10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 f9ca 	bl	80051b6 <HAL_SYSTICK_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10f      	bne.n	8004e48 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b0f      	cmp	r3, #15
 8004e2c:	d809      	bhi.n	8004e42 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e2e:	2200      	movs	r2, #0
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	f04f 30ff 	mov.w	r0, #4294967295
 8004e36:	f000 f988 	bl	800514a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e3a:	4a09      	ldr	r2, [pc, #36]	@ (8004e60 <HAL_InitTick+0x70>)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6013      	str	r3, [r2, #0]
 8004e40:	e007      	b.n	8004e52 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
 8004e46:	e004      	b.n	8004e52 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
 8004e4c:	e001      	b.n	8004e52 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	20000014 	.word	0x20000014
 8004e60:	20000010 	.word	0x20000010

08004e64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004e68:	4b06      	ldr	r3, [pc, #24]	@ (8004e84 <HAL_IncTick+0x20>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	4b06      	ldr	r3, [pc, #24]	@ (8004e88 <HAL_IncTick+0x24>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4413      	add	r3, r2
 8004e74:	4a04      	ldr	r2, [pc, #16]	@ (8004e88 <HAL_IncTick+0x24>)
 8004e76:	6013      	str	r3, [r2, #0]
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000014 	.word	0x20000014
 8004e88:	20001934 	.word	0x20001934

08004e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e90:	4b03      	ldr	r3, [pc, #12]	@ (8004ea0 <HAL_GetTick+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20001934 	.word	0x20001934

08004ea4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004ea8:	4b03      	ldr	r3, [pc, #12]	@ (8004eb8 <HAL_GetTickPrio+0x14>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	20000010 	.word	0x20000010

08004ebc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8004ec0:	4b03      	ldr	r3, [pc, #12]	@ (8004ed0 <HAL_GetTickFreq+0x14>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	20000014 	.word	0x20000014

08004ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <__NVIC_SetPriorityGrouping+0x44>)
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004efc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004f00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f06:	4a04      	ldr	r2, [pc, #16]	@ (8004f18 <__NVIC_SetPriorityGrouping+0x44>)
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	60d3      	str	r3, [r2, #12]
}
 8004f0c:	bf00      	nop
 8004f0e:	3714      	adds	r7, #20
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr
 8004f18:	e000ed00 	.word	0xe000ed00

08004f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f20:	4b04      	ldr	r3, [pc, #16]	@ (8004f34 <__NVIC_GetPriorityGrouping+0x18>)
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	0a1b      	lsrs	r3, r3, #8
 8004f26:	f003 0307 	and.w	r3, r3, #7
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	e000ed00 	.word	0xe000ed00

08004f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	db0b      	blt.n	8004f62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f4a:	79fb      	ldrb	r3, [r7, #7]
 8004f4c:	f003 021f 	and.w	r2, r3, #31
 8004f50:	4907      	ldr	r1, [pc, #28]	@ (8004f70 <__NVIC_EnableIRQ+0x38>)
 8004f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f56:	095b      	lsrs	r3, r3, #5
 8004f58:	2001      	movs	r0, #1
 8004f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8004f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f62:	bf00      	nop
 8004f64:	370c      	adds	r7, #12
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000e100 	.word	0xe000e100

08004f74 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	db12      	blt.n	8004fac <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f86:	79fb      	ldrb	r3, [r7, #7]
 8004f88:	f003 021f 	and.w	r2, r3, #31
 8004f8c:	490a      	ldr	r1, [pc, #40]	@ (8004fb8 <__NVIC_DisableIRQ+0x44>)
 8004f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2001      	movs	r0, #1
 8004f96:	fa00 f202 	lsl.w	r2, r0, r2
 8004f9a:	3320      	adds	r3, #32
 8004f9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8004fa0:	f3bf 8f4f 	dsb	sy
}
 8004fa4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004fa6:	f3bf 8f6f 	isb	sy
}
 8004faa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	e000e100 	.word	0xe000e100

08004fbc <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	db0c      	blt.n	8004fe8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fce:	79fb      	ldrb	r3, [r7, #7]
 8004fd0:	f003 021f 	and.w	r2, r3, #31
 8004fd4:	4907      	ldr	r1, [pc, #28]	@ (8004ff4 <__NVIC_SetPendingIRQ+0x38>)
 8004fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fda:	095b      	lsrs	r3, r3, #5
 8004fdc:	2001      	movs	r0, #1
 8004fde:	fa00 f202 	lsl.w	r2, r0, r2
 8004fe2:	3340      	adds	r3, #64	@ 0x40
 8004fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	e000e100 	.word	0xe000e100

08004ff8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005006:	2b00      	cmp	r3, #0
 8005008:	db0c      	blt.n	8005024 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800500a:	79fb      	ldrb	r3, [r7, #7]
 800500c:	f003 021f 	and.w	r2, r3, #31
 8005010:	4907      	ldr	r1, [pc, #28]	@ (8005030 <__NVIC_ClearPendingIRQ+0x38>)
 8005012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2001      	movs	r0, #1
 800501a:	fa00 f202 	lsl.w	r2, r0, r2
 800501e:	3360      	adds	r3, #96	@ 0x60
 8005020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000e100 	.word	0xe000e100

08005034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
 800503a:	4603      	mov	r3, r0
 800503c:	6039      	str	r1, [r7, #0]
 800503e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005044:	2b00      	cmp	r3, #0
 8005046:	db0a      	blt.n	800505e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	b2da      	uxtb	r2, r3
 800504c:	490c      	ldr	r1, [pc, #48]	@ (8005080 <__NVIC_SetPriority+0x4c>)
 800504e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005052:	0112      	lsls	r2, r2, #4
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	440b      	add	r3, r1
 8005058:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800505c:	e00a      	b.n	8005074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	4908      	ldr	r1, [pc, #32]	@ (8005084 <__NVIC_SetPriority+0x50>)
 8005064:	79fb      	ldrb	r3, [r7, #7]
 8005066:	f003 030f 	and.w	r3, r3, #15
 800506a:	3b04      	subs	r3, #4
 800506c:	0112      	lsls	r2, r2, #4
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	440b      	add	r3, r1
 8005072:	761a      	strb	r2, [r3, #24]
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	e000e100 	.word	0xe000e100
 8005084:	e000ed00 	.word	0xe000ed00

08005088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005088:	b480      	push	{r7}
 800508a:	b089      	sub	sp, #36	@ 0x24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f003 0307 	and.w	r3, r3, #7
 800509a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f1c3 0307 	rsb	r3, r3, #7
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	bf28      	it	cs
 80050a6:	2304      	movcs	r3, #4
 80050a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	3304      	adds	r3, #4
 80050ae:	2b06      	cmp	r3, #6
 80050b0:	d902      	bls.n	80050b8 <NVIC_EncodePriority+0x30>
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	3b03      	subs	r3, #3
 80050b6:	e000      	b.n	80050ba <NVIC_EncodePriority+0x32>
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050bc:	f04f 32ff 	mov.w	r2, #4294967295
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43da      	mvns	r2, r3
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	401a      	ands	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050d0:	f04f 31ff 	mov.w	r1, #4294967295
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	43d9      	mvns	r1, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050e0:	4313      	orrs	r3, r2
         );
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3724      	adds	r7, #36	@ 0x24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
	...

080050f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005100:	d301      	bcc.n	8005106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005102:	2301      	movs	r3, #1
 8005104:	e00f      	b.n	8005126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005106:	4a0a      	ldr	r2, [pc, #40]	@ (8005130 <SysTick_Config+0x40>)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3b01      	subs	r3, #1
 800510c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800510e:	210f      	movs	r1, #15
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	f7ff ff8e 	bl	8005034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <SysTick_Config+0x40>)
 800511a:	2200      	movs	r2, #0
 800511c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800511e:	4b04      	ldr	r3, [pc, #16]	@ (8005130 <SysTick_Config+0x40>)
 8005120:	2207      	movs	r2, #7
 8005122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3708      	adds	r7, #8
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	e000e010 	.word	0xe000e010

08005134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fec9 	bl	8004ed4 <__NVIC_SetPriorityGrouping>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af00      	add	r7, sp, #0
 8005150:	4603      	mov	r3, r0
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005158:	f7ff fee0 	bl	8004f1c <__NVIC_GetPriorityGrouping>
 800515c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800515e:	687a      	ldr	r2, [r7, #4]
 8005160:	68b9      	ldr	r1, [r7, #8]
 8005162:	6978      	ldr	r0, [r7, #20]
 8005164:	f7ff ff90 	bl	8005088 <NVIC_EncodePriority>
 8005168:	4602      	mov	r2, r0
 800516a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800516e:	4611      	mov	r1, r2
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff ff5f 	bl	8005034 <__NVIC_SetPriority>
}
 8005176:	bf00      	nop
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b082      	sub	sp, #8
 8005182:	af00      	add	r7, sp, #0
 8005184:	4603      	mov	r3, r0
 8005186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff fed3 	bl	8004f38 <__NVIC_EnableIRQ>
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800519a:	b580      	push	{r7, lr}
 800519c:	b082      	sub	sp, #8
 800519e:	af00      	add	r7, sp, #0
 80051a0:	4603      	mov	r3, r0
 80051a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff fee3 	bl	8004f74 <__NVIC_DisableIRQ>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff ff96 	bl	80050f0 <SysTick_Config>
 80051c4:	4603      	mov	r3, r0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	4603      	mov	r3, r0
 80051d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80051d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff feed 	bl	8004fbc <__NVIC_SetPendingIRQ>
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80051ea:	b580      	push	{r7, lr}
 80051ec:	b082      	sub	sp, #8
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	4603      	mov	r3, r0
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80051f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f7ff fefd 	bl	8004ff8 <__NVIC_ClearPendingIRQ>
}
 80051fe:	bf00      	nop
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b086      	sub	sp, #24
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	607a      	str	r2, [r7, #4]
 8005212:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_DMA_Start_IT+0x20>
 8005222:	2302      	movs	r3, #2
 8005224:	e066      	b.n	80052f4 <HAL_DMA_Start_IT+0xee>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	d155      	bne.n	80052e6 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2202      	movs	r2, #2
 800523e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f022 0201 	bic.w	r2, r2, #1
 8005256:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f9b9 	bl	80055d6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	d008      	beq.n	800527e <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 020e 	orr.w	r2, r2, #14
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	e00f      	b.n	800529e <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0204 	bic.w	r2, r2, #4
 800528c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 020a 	orr.w	r2, r2, #10
 800529c:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052ba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052d2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e005      	b.n	80052f2 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
 80052f0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e04f      	b.n	80053ae <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005314:	b2db      	uxtb	r3, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d008      	beq.n	800532c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2204      	movs	r2, #4
 800531e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e040      	b.n	80053ae <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 020e 	bic.w	r2, r2, #14
 800533a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005346:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800534a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0201 	bic.w	r2, r2, #1
 800535a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f003 021c 	and.w	r2, r3, #28
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	2101      	movs	r1, #1
 800536a:	fa01 f202 	lsl.w	r2, r1, r2
 800536e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005378:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00c      	beq.n	800539c <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005390:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800539a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	370c      	adds	r7, #12
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d005      	beq.n	80053de <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2204      	movs	r2, #4
 80053d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	73fb      	strb	r3, [r7, #15]
 80053dc:	e047      	b.n	800546e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 020e 	bic.w	r2, r2, #14
 80053ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 0201 	bic.w	r2, r2, #1
 80053fc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005408:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800540c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005412:	f003 021c 	and.w	r2, r3, #28
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800541a:	2101      	movs	r1, #1
 800541c:	fa01 f202 	lsl.w	r2, r1, r2
 8005420:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800542a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00c      	beq.n	800544e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800543e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005442:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800544c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	d003      	beq.n	800546e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	4798      	blx	r3
    }
  }
  return status;
 800546e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005494:	f003 031c 	and.w	r3, r3, #28
 8005498:	2204      	movs	r2, #4
 800549a:	409a      	lsls	r2, r3
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d026      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x7a>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d021      	beq.n	80054f2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d107      	bne.n	80054cc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0204 	bic.w	r2, r2, #4
 80054ca:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d0:	f003 021c 	and.w	r2, r3, #28
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054d8:	2104      	movs	r1, #4
 80054da:	fa01 f202 	lsl.w	r2, r1, r2
 80054de:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d071      	beq.n	80055cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80054f0:	e06c      	b.n	80055cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	f003 031c 	and.w	r3, r3, #28
 80054fa:	2202      	movs	r2, #2
 80054fc:	409a      	lsls	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4013      	ands	r3, r2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d02e      	beq.n	8005564 <HAL_DMA_IRQHandler+0xec>
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d029      	beq.n	8005564 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10b      	bne.n	8005536 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 020a 	bic.w	r2, r2, #10
 800552c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2201      	movs	r2, #1
 8005532:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800553a:	f003 021c 	and.w	r2, r3, #28
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	2102      	movs	r1, #2
 8005544:	fa01 f202 	lsl.w	r2, r1, r2
 8005548:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d038      	beq.n	80055cc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005562:	e033      	b.n	80055cc <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005568:	f003 031c 	and.w	r3, r3, #28
 800556c:	2208      	movs	r2, #8
 800556e:	409a      	lsls	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4013      	ands	r3, r2
 8005574:	2b00      	cmp	r3, #0
 8005576:	d02a      	beq.n	80055ce <HAL_DMA_IRQHandler+0x156>
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b00      	cmp	r3, #0
 8005580:	d025      	beq.n	80055ce <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 020e 	bic.w	r2, r2, #14
 8005590:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005596:	f003 021c 	and.w	r2, r3, #28
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559e:	2101      	movs	r1, #1
 80055a0:	fa01 f202 	lsl.w	r2, r1, r2
 80055a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80055cc:	bf00      	nop
 80055ce:	bf00      	nop
}
 80055d0:	3710      	adds	r7, #16
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b085      	sub	sp, #20
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
 80055e2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80055ec:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d004      	beq.n	8005600 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80055fe:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005604:	f003 021c 	and.w	r2, r3, #28
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560c:	2101      	movs	r1, #1
 800560e:	fa01 f202 	lsl.w	r2, r1, r2
 8005612:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b10      	cmp	r3, #16
 8005622:	d108      	bne.n	8005636 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005634:	e007      	b.n	8005646 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	60da      	str	r2, [r3, #12]
}
 8005646:	bf00      	nop
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005654:	b480      	push	{r7}
 8005656:	b087      	sub	sp, #28
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800565e:	2300      	movs	r3, #0
 8005660:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005662:	e14c      	b.n	80058fe <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	2101      	movs	r1, #1
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	fa01 f303 	lsl.w	r3, r1, r3
 8005670:	4013      	ands	r3, r2
 8005672:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 813e 	beq.w	80058f8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d005      	beq.n	8005694 <HAL_GPIO_Init+0x40>
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 0303 	and.w	r3, r3, #3
 8005690:	2b02      	cmp	r3, #2
 8005692:	d130      	bne.n	80056f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	005b      	lsls	r3, r3, #1
 800569e:	2203      	movs	r2, #3
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	43db      	mvns	r3, r3
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4013      	ands	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	693a      	ldr	r2, [r7, #16]
 80056c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80056ca:	2201      	movs	r2, #1
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43db      	mvns	r3, r3
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4013      	ands	r3, r2
 80056d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f003 0201 	and.w	r2, r3, #1
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	693a      	ldr	r2, [r7, #16]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f003 0303 	and.w	r3, r3, #3
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d017      	beq.n	8005732 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	005b      	lsls	r3, r3, #1
 800570c:	2203      	movs	r2, #3
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	43db      	mvns	r3, r3
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4013      	ands	r3, r2
 8005718:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d123      	bne.n	8005786 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	08da      	lsrs	r2, r3, #3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3208      	adds	r2, #8
 8005746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	220f      	movs	r2, #15
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4013      	ands	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	691a      	ldr	r2, [r3, #16]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	08da      	lsrs	r2, r3, #3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3208      	adds	r2, #8
 8005780:	6939      	ldr	r1, [r7, #16]
 8005782:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	2203      	movs	r2, #3
 8005792:	fa02 f303 	lsl.w	r3, r2, r3
 8005796:	43db      	mvns	r3, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f003 0203 	and.w	r2, r3, #3
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 8098 	beq.w	80058f8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80057c8:	4a54      	ldr	r2, [pc, #336]	@ (800591c <HAL_GPIO_Init+0x2c8>)
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	089b      	lsrs	r3, r3, #2
 80057ce:	3302      	adds	r3, #2
 80057d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80057d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f003 0303 	and.w	r3, r3, #3
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	220f      	movs	r2, #15
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	43db      	mvns	r3, r3
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4013      	ands	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057f2:	d019      	beq.n	8005828 <HAL_GPIO_Init+0x1d4>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a4a      	ldr	r2, [pc, #296]	@ (8005920 <HAL_GPIO_Init+0x2cc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d013      	beq.n	8005824 <HAL_GPIO_Init+0x1d0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a49      	ldr	r2, [pc, #292]	@ (8005924 <HAL_GPIO_Init+0x2d0>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00d      	beq.n	8005820 <HAL_GPIO_Init+0x1cc>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a48      	ldr	r2, [pc, #288]	@ (8005928 <HAL_GPIO_Init+0x2d4>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <HAL_GPIO_Init+0x1c8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a47      	ldr	r2, [pc, #284]	@ (800592c <HAL_GPIO_Init+0x2d8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d101      	bne.n	8005818 <HAL_GPIO_Init+0x1c4>
 8005814:	2304      	movs	r3, #4
 8005816:	e008      	b.n	800582a <HAL_GPIO_Init+0x1d6>
 8005818:	2307      	movs	r3, #7
 800581a:	e006      	b.n	800582a <HAL_GPIO_Init+0x1d6>
 800581c:	2303      	movs	r3, #3
 800581e:	e004      	b.n	800582a <HAL_GPIO_Init+0x1d6>
 8005820:	2302      	movs	r3, #2
 8005822:	e002      	b.n	800582a <HAL_GPIO_Init+0x1d6>
 8005824:	2301      	movs	r3, #1
 8005826:	e000      	b.n	800582a <HAL_GPIO_Init+0x1d6>
 8005828:	2300      	movs	r3, #0
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	f002 0203 	and.w	r2, r2, #3
 8005830:	0092      	lsls	r2, r2, #2
 8005832:	4093      	lsls	r3, r2
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800583a:	4938      	ldr	r1, [pc, #224]	@ (800591c <HAL_GPIO_Init+0x2c8>)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	089b      	lsrs	r3, r3, #2
 8005840:	3302      	adds	r3, #2
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005848:	4b39      	ldr	r3, [pc, #228]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	43db      	mvns	r3, r3
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4013      	ands	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800586c:	4a30      	ldr	r2, [pc, #192]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005872:	4b2f      	ldr	r3, [pc, #188]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	43db      	mvns	r3, r3
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	4013      	ands	r3, r2
 8005880:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005896:	4a26      	ldr	r2, [pc, #152]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800589c:	4b24      	ldr	r3, [pc, #144]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 800589e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	43db      	mvns	r3, r3
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	4013      	ands	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80058ba:	693a      	ldr	r2, [r7, #16]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058c2:	4a1b      	ldr	r2, [pc, #108]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80058ca:	4b19      	ldr	r3, [pc, #100]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 80058cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	43db      	mvns	r3, r3
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4013      	ands	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80058f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005930 <HAL_GPIO_Init+0x2dc>)
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	3301      	adds	r3, #1
 80058fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681a      	ldr	r2, [r3, #0]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	2b00      	cmp	r3, #0
 800590a:	f47f aeab 	bne.w	8005664 <HAL_GPIO_Init+0x10>
  }
}
 800590e:	bf00      	nop
 8005910:	bf00      	nop
 8005912:	371c      	adds	r7, #28
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40010000 	.word	0x40010000
 8005920:	48000400 	.word	0x48000400
 8005924:	48000800 	.word	0x48000800
 8005928:	48000c00 	.word	0x48000c00
 800592c:	48001000 	.word	0x48001000
 8005930:	58000800 	.word	0x58000800

08005934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	807b      	strh	r3, [r7, #2]
 8005940:	4613      	mov	r3, r2
 8005942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005944:	787b      	ldrb	r3, [r7, #1]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800594a:	887a      	ldrh	r2, [r7, #2]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005950:	e002      	b.n	8005958 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005952:	887a      	ldrh	r2, [r7, #2]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800596e:	4b08      	ldr	r3, [pc, #32]	@ (8005990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005970:	68da      	ldr	r2, [r3, #12]
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	4013      	ands	r3, r2
 8005976:	2b00      	cmp	r3, #0
 8005978:	d006      	beq.n	8005988 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800597a:	4a05      	ldr	r2, [pc, #20]	@ (8005990 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	4618      	mov	r0, r3
 8005984:	f7fd f9b6 	bl	8002cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005988:	bf00      	nop
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}
 8005990:	58000800 	.word	0x58000800

08005994 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800599a:	4b0a      	ldr	r3, [pc, #40]	@ (80059c4 <HAL_HSEM_IRQHandler+0x30>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80059a0:	4b08      	ldr	r3, [pc, #32]	@ (80059c4 <HAL_HSEM_IRQHandler+0x30>)
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	43db      	mvns	r3, r3
 80059a8:	4906      	ldr	r1, [pc, #24]	@ (80059c4 <HAL_HSEM_IRQHandler+0x30>)
 80059aa:	4013      	ands	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80059ae:	4a05      	ldr	r2, [pc, #20]	@ (80059c4 <HAL_HSEM_IRQHandler+0x30>)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f807 	bl	80059c8 <HAL_HSEM_FreeCallback>
}
 80059ba:	bf00      	nop
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	58001500 	.word	0x58001500

080059c8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b082      	sub	sp, #8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e08d      	b.n	8005b0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d106      	bne.n	8005a08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7fe fe7c 	bl	8004700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2224      	movs	r2, #36	@ 0x24
 8005a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685a      	ldr	r2, [r3, #4]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005a2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005a3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	68db      	ldr	r3, [r3, #12]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d107      	bne.n	8005a56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a52:	609a      	str	r2, [r3, #8]
 8005a54:	e006      	b.n	8005a64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005a62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d108      	bne.n	8005a7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a7a:	605a      	str	r2, [r3, #4]
 8005a7c:	e007      	b.n	8005a8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005aa0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68da      	ldr	r2, [r3, #12]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ab0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699b      	ldr	r3, [r3, #24]
 8005ac2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	430a      	orrs	r2, r1
 8005aca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	69d9      	ldr	r1, [r3, #28]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1a      	ldr	r2, [r3, #32]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f042 0201 	orr.w	r2, r2, #1
 8005aea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af02      	add	r7, sp, #8
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	607a      	str	r2, [r7, #4]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	460b      	mov	r3, r1
 8005b22:	817b      	strh	r3, [r7, #10]
 8005b24:	4613      	mov	r3, r2
 8005b26:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	2b20      	cmp	r3, #32
 8005b32:	f040 80fd 	bne.w	8005d30 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_I2C_Master_Transmit+0x30>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e0f6      	b.n	8005d32 <HAL_I2C_Master_Transmit+0x21e>
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005b4c:	f7ff f99e 	bl	8004e8c <HAL_GetTick>
 8005b50:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	2319      	movs	r3, #25
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f914 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e0e1      	b.n	8005d32 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2221      	movs	r2, #33	@ 0x21
 8005b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2210      	movs	r2, #16
 8005b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2200      	movs	r2, #0
 8005b82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	893a      	ldrh	r2, [r7, #8]
 8005b8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2bff      	cmp	r3, #255	@ 0xff
 8005b9e:	d906      	bls.n	8005bae <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	22ff      	movs	r2, #255	@ 0xff
 8005ba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005ba6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	e007      	b.n	8005bbe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005bb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005bbc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d024      	beq.n	8005c10 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bca:	781a      	ldrb	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bd6:	1c5a      	adds	r2, r3, #1
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b01      	subs	r3, #1
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	8979      	ldrh	r1, [r7, #10]
 8005c02:	4b4e      	ldr	r3, [pc, #312]	@ (8005d3c <HAL_I2C_Master_Transmit+0x228>)
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 fa83 	bl	8006114 <I2C_TransferConfig>
 8005c0e:	e066      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	8979      	ldrh	r1, [r7, #10]
 8005c18:	4b48      	ldr	r3, [pc, #288]	@ (8005d3c <HAL_I2C_Master_Transmit+0x228>)
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f000 fa78 	bl	8006114 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005c24:	e05b      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	6a39      	ldr	r1, [r7, #32]
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f907 	bl	8005e3e <I2C_WaitOnTXISFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e07b      	b.n	8005d32 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3e:	781a      	ldrb	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c62:	3b01      	subs	r3, #1
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d034      	beq.n	8005cde <HAL_I2C_Master_Transmit+0x1ca>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d130      	bne.n	8005cde <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	2200      	movs	r2, #0
 8005c84:	2180      	movs	r1, #128	@ 0x80
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f000 f880 	bl	8005d8c <I2C_WaitOnFlagUntilTimeout>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e04d      	b.n	8005d32 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2bff      	cmp	r3, #255	@ 0xff
 8005c9e:	d90e      	bls.n	8005cbe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	22ff      	movs	r2, #255	@ 0xff
 8005ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	8979      	ldrh	r1, [r7, #10]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fa2c 	bl	8006114 <I2C_TransferConfig>
 8005cbc:	e00f      	b.n	8005cde <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	8979      	ldrh	r1, [r7, #10]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 fa1b 	bl	8006114 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d19e      	bne.n	8005c26 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	6a39      	ldr	r1, [r7, #32]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f8ed 	bl	8005ecc <I2C_WaitOnSTOPFlagUntilTimeout>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e01a      	b.n	8005d32 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2220      	movs	r2, #32
 8005d02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6859      	ldr	r1, [r3, #4]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <HAL_I2C_Master_Transmit+0x22c>)
 8005d10:	400b      	ands	r3, r1
 8005d12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e000      	b.n	8005d32 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005d30:	2302      	movs	r3, #2
  }
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3718      	adds	r7, #24
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	80002000 	.word	0x80002000
 8005d40:	fe00e800 	.word	0xfe00e800

08005d44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b02      	cmp	r3, #2
 8005d58:	d103      	bne.n	8005d62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d007      	beq.n	8005d80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699a      	ldr	r2, [r3, #24]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	619a      	str	r2, [r3, #24]
  }
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d9c:	e03b      	b.n	8005e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	6839      	ldr	r1, [r7, #0]
 8005da2:	68f8      	ldr	r0, [r7, #12]
 8005da4:	f000 f8d6 	bl	8005f54 <I2C_IsErrorOccurred>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e041      	b.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db8:	d02d      	beq.n	8005e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dba:	f7ff f867 	bl	8004e8c <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	683a      	ldr	r2, [r7, #0]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d302      	bcc.n	8005dd0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d122      	bne.n	8005e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	699a      	ldr	r2, [r3, #24]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	bf0c      	ite	eq
 8005de0:	2301      	moveq	r3, #1
 8005de2:	2300      	movne	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	79fb      	ldrb	r3, [r7, #7]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d113      	bne.n	8005e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e00f      	b.n	8005e36 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	699a      	ldr	r2, [r3, #24]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	bf0c      	ite	eq
 8005e26:	2301      	moveq	r3, #1
 8005e28:	2300      	movne	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d0b4      	beq.n	8005d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3710      	adds	r7, #16
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b084      	sub	sp, #16
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	60f8      	str	r0, [r7, #12]
 8005e46:	60b9      	str	r1, [r7, #8]
 8005e48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e4a:	e033      	b.n	8005eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	68b9      	ldr	r1, [r7, #8]
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 f87f 	bl	8005f54 <I2C_IsErrorOccurred>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e031      	b.n	8005ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e66:	d025      	beq.n	8005eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e68:	f7ff f810 	bl	8004e8c <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d302      	bcc.n	8005e7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d11a      	bne.n	8005eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d013      	beq.n	8005eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e90:	f043 0220 	orr.w	r2, r3, #32
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	e007      	b.n	8005ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	f003 0302 	and.w	r3, r3, #2
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d1c4      	bne.n	8005e4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ed8:	e02f      	b.n	8005f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	68b9      	ldr	r1, [r7, #8]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 f838 	bl	8005f54 <I2C_IsErrorOccurred>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e02d      	b.n	8005f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eee:	f7fe ffcd 	bl	8004e8c <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d302      	bcc.n	8005f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d11a      	bne.n	8005f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	f003 0320 	and.w	r3, r3, #32
 8005f0e:	2b20      	cmp	r3, #32
 8005f10:	d013      	beq.n	8005f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f16:	f043 0220 	orr.w	r2, r3, #32
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e007      	b.n	8005f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	f003 0320 	and.w	r3, r3, #32
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d1c8      	bne.n	8005eda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08a      	sub	sp, #40	@ 0x28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	f003 0310 	and.w	r3, r3, #16
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d068      	beq.n	8006052 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2210      	movs	r2, #16
 8005f86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f88:	e049      	b.n	800601e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f90:	d045      	beq.n	800601e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f92:	f7fe ff7b 	bl	8004e8c <HAL_GetTick>
 8005f96:	4602      	mov	r2, r0
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	1ad3      	subs	r3, r2, r3
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d302      	bcc.n	8005fa8 <I2C_IsErrorOccurred+0x54>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d13a      	bne.n	800601e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005fba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fca:	d121      	bne.n	8006010 <I2C_IsErrorOccurred+0xbc>
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd2:	d01d      	beq.n	8006010 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005fd4:	7cfb      	ldrb	r3, [r7, #19]
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d01a      	beq.n	8006010 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fe8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005fea:	f7fe ff4f 	bl	8004e8c <HAL_GetTick>
 8005fee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ff0:	e00e      	b.n	8006010 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005ff2:	f7fe ff4b 	bl	8004e8c <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	2b19      	cmp	r3, #25
 8005ffe:	d907      	bls.n	8006010 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f043 0320 	orr.w	r3, r3, #32
 8006006:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800600e:	e006      	b.n	800601e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b20      	cmp	r3, #32
 800601c:	d1e9      	bne.n	8005ff2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	f003 0320 	and.w	r3, r3, #32
 8006028:	2b20      	cmp	r3, #32
 800602a:	d003      	beq.n	8006034 <I2C_IsErrorOccurred+0xe0>
 800602c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0aa      	beq.n	8005f8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2220      	movs	r2, #32
 8006042:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	f043 0304 	orr.w	r3, r3, #4
 800604a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00b      	beq.n	800607c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006064:	6a3b      	ldr	r3, [r7, #32]
 8006066:	f043 0301 	orr.w	r3, r3, #1
 800606a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006074:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00b      	beq.n	800609e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	f043 0308 	orr.w	r3, r3, #8
 800608c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006096:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800609e:	69bb      	ldr	r3, [r7, #24]
 80060a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	f043 0302 	orr.w	r3, r3, #2
 80060ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80060c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d01c      	beq.n	8006102 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f7ff fe3b 	bl	8005d44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	6859      	ldr	r1, [r3, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <I2C_IsErrorOccurred+0x1bc>)
 80060da:	400b      	ands	r3, r1
 80060dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80060e2:	6a3b      	ldr	r3, [r7, #32]
 80060e4:	431a      	orrs	r2, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	@ 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	fe00e800 	.word	0xfe00e800

08006114 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006114:	b480      	push	{r7}
 8006116:	b087      	sub	sp, #28
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	607b      	str	r3, [r7, #4]
 800611e:	460b      	mov	r3, r1
 8006120:	817b      	strh	r3, [r7, #10]
 8006122:	4613      	mov	r3, r2
 8006124:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800612c:	7a7b      	ldrb	r3, [r7, #9]
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006134:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	4313      	orrs	r3, r2
 800613e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006142:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	685a      	ldr	r2, [r3, #4]
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	0d5b      	lsrs	r3, r3, #21
 800614e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006152:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <I2C_TransferConfig+0x60>)
 8006154:	430b      	orrs	r3, r1
 8006156:	43db      	mvns	r3, r3
 8006158:	ea02 0103 	and.w	r1, r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006166:	bf00      	nop
 8006168:	371c      	adds	r7, #28
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	03ff63ff 	.word	0x03ff63ff

08006178 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b20      	cmp	r3, #32
 800618c:	d138      	bne.n	8006200 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006194:	2b01      	cmp	r3, #1
 8006196:	d101      	bne.n	800619c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006198:	2302      	movs	r3, #2
 800619a:	e032      	b.n	8006202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2224      	movs	r2, #36	@ 0x24
 80061a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0201 	bic.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80061ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6819      	ldr	r1, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	430a      	orrs	r2, r1
 80061da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80061fc:	2300      	movs	r3, #0
 80061fe:	e000      	b.n	8006202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006200:	2302      	movs	r3, #2
  }
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr

0800620e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800620e:	b480      	push	{r7}
 8006210:	b085      	sub	sp, #20
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b20      	cmp	r3, #32
 8006222:	d139      	bne.n	8006298 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800622a:	2b01      	cmp	r3, #1
 800622c:	d101      	bne.n	8006232 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800622e:	2302      	movs	r3, #2
 8006230:	e033      	b.n	800629a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2224      	movs	r2, #36	@ 0x24
 800623e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0201 	bic.w	r2, r2, #1
 8006250:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006260:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	021b      	lsls	r3, r3, #8
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	4313      	orrs	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
	...

080062a8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80062b0:	4b05      	ldr	r3, [pc, #20]	@ (80062c8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	4904      	ldr	r1, [pc, #16]	@ (80062c8 <HAL_I2CEx_EnableFastModePlus+0x20>)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4313      	orrs	r3, r2
 80062ba:	604b      	str	r3, [r1, #4]
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	40010000 	.word	0x40010000

080062cc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01e      	beq.n	800631c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80062de:	4b13      	ldr	r3, [pc, #76]	@ (800632c <HAL_IPCC_Init+0x60>)
 80062e0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fe fa4e 	bl	8004790 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80062f4:	68b8      	ldr	r0, [r7, #8]
 80062f6:	f000 f85b 	bl	80063b0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f82c 	bl	8006364 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800631a:	e001      	b.n	8006320 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	58000c00 	.word	0x58000c00

08006330 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800634a:	b480      	push	{r7}
 800634c:	b085      	sub	sp, #20
 800634e:	af00      	add	r7, sp, #0
 8006350:	60f8      	str	r0, [r7, #12]
 8006352:	60b9      	str	r1, [r7, #8]
 8006354:	4613      	mov	r3, r2
 8006356:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	3714      	adds	r7, #20
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e00f      	b.n	8006392 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	4a0b      	ldr	r2, [pc, #44]	@ (80063a8 <IPCC_SetDefaultCallbacks+0x44>)
 800637c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3306      	adds	r3, #6
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	4a08      	ldr	r2, [pc, #32]	@ (80063ac <IPCC_SetDefaultCallbacks+0x48>)
 800638a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b05      	cmp	r3, #5
 8006396:	d9ec      	bls.n	8006372 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	08006331 	.word	0x08006331
 80063ac:	0800634b 	.word	0x0800634b

080063b0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2200      	movs	r2, #0
 80063bc:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80063c4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	223f      	movs	r2, #63	@ 0x3f
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e0c0      	b.n	800656c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f00f f946 	bl	8015690 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2203      	movs	r2, #3
 8006408:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4618      	mov	r0, r3
 8006412:	f005 fca9 	bl	800bd68 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	e03e      	b.n	800649a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800641c:	7bfa      	ldrb	r2, [r7, #15]
 800641e:	6879      	ldr	r1, [r7, #4]
 8006420:	4613      	mov	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	440b      	add	r3, r1
 800642a:	3311      	adds	r3, #17
 800642c:	2201      	movs	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006430:	7bfa      	ldrb	r2, [r7, #15]
 8006432:	6879      	ldr	r1, [r7, #4]
 8006434:	4613      	mov	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4413      	add	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	440b      	add	r3, r1
 800643e:	3310      	adds	r3, #16
 8006440:	7bfa      	ldrb	r2, [r7, #15]
 8006442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006444:	7bfa      	ldrb	r2, [r7, #15]
 8006446:	6879      	ldr	r1, [r7, #4]
 8006448:	4613      	mov	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	4413      	add	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	440b      	add	r3, r1
 8006452:	3313      	adds	r3, #19
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006458:	7bfa      	ldrb	r2, [r7, #15]
 800645a:	6879      	ldr	r1, [r7, #4]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	440b      	add	r3, r1
 8006466:	3320      	adds	r3, #32
 8006468:	2200      	movs	r2, #0
 800646a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800646c:	7bfa      	ldrb	r2, [r7, #15]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	4413      	add	r3, r2
 8006476:	00db      	lsls	r3, r3, #3
 8006478:	440b      	add	r3, r1
 800647a:	3324      	adds	r3, #36	@ 0x24
 800647c:	2200      	movs	r2, #0
 800647e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006480:	7bfb      	ldrb	r3, [r7, #15]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	1c5a      	adds	r2, r3, #1
 8006486:	4613      	mov	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	440b      	add	r3, r1
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	3301      	adds	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	791b      	ldrb	r3, [r3, #4]
 800649e:	7bfa      	ldrb	r2, [r7, #15]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3bb      	bcc.n	800641c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064a4:	2300      	movs	r3, #0
 80064a6:	73fb      	strb	r3, [r7, #15]
 80064a8:	e044      	b.n	8006534 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80064aa:	7bfa      	ldrb	r2, [r7, #15]
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	440b      	add	r3, r1
 80064b8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80064bc:	2200      	movs	r2, #0
 80064be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80064c0:	7bfa      	ldrb	r2, [r7, #15]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	440b      	add	r3, r1
 80064ce:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064d2:	7bfa      	ldrb	r2, [r7, #15]
 80064d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064d6:	7bfa      	ldrb	r2, [r7, #15]
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	00db      	lsls	r3, r3, #3
 80064e2:	440b      	add	r3, r1
 80064e4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80064e8:	2200      	movs	r2, #0
 80064ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064ec:	7bfa      	ldrb	r2, [r7, #15]
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	4613      	mov	r3, r2
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	4413      	add	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	440b      	add	r3, r1
 80064fa:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006502:	7bfa      	ldrb	r2, [r7, #15]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	00db      	lsls	r3, r3, #3
 800650e:	440b      	add	r3, r1
 8006510:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006518:	7bfa      	ldrb	r2, [r7, #15]
 800651a:	6879      	ldr	r1, [r7, #4]
 800651c:	4613      	mov	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	440b      	add	r3, r1
 8006526:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	3301      	adds	r3, #1
 8006532:	73fb      	strb	r3, [r7, #15]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	791b      	ldrb	r3, [r3, #4]
 8006538:	7bfa      	ldrb	r2, [r7, #15]
 800653a:	429a      	cmp	r2, r3
 800653c:	d3b5      	bcc.n	80064aa <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6818      	ldr	r0, [r3, #0]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	e893 0006 	ldmia.w	r3, {r1, r2}
 800654a:	f005 fc28 	bl	800bd9e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	7a9b      	ldrb	r3, [r3, #10]
 8006560:	2b01      	cmp	r3, #1
 8006562:	d102      	bne.n	800656a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f001 fc40 	bl	8007dea <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_PCD_Start+0x16>
 8006586:	2302      	movs	r3, #2
 8006588:	e012      	b.n	80065b0 <HAL_PCD_Start+0x3c>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f005 fbcf 	bl	800bd3a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f007 fe90 	bl	800e2c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3708      	adds	r7, #8
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f007 fe95 	bl	800e2f4 <USB_ReadInterrupts>
 80065ca:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fb04 	bl	8006be4 <PCD_EP_ISR_Handler>

    return;
 80065dc:	e110      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d013      	beq.n	8006610 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065fa:	b292      	uxth	r2, r2
 80065fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f00f f8f8 	bl	80157f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006606:	2100      	movs	r1, #0
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f8fc 	bl	8006806 <HAL_PCD_SetAddress>

    return;
 800660e:	e0f7      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00c      	beq.n	8006634 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800662c:	b292      	uxth	r2, r2
 800662e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006632:	e0e5      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00c      	beq.n	8006658 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006646:	b29a      	uxth	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006650:	b292      	uxth	r2, r2
 8006652:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8006656:	e0d3      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d034      	beq.n	80066cc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800666a:	b29a      	uxth	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0204 	bic.w	r2, r2, #4
 8006674:	b292      	uxth	r2, r2
 8006676:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006682:	b29a      	uxth	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f022 0208 	bic.w	r2, r2, #8
 800668c:	b292      	uxth	r2, r2
 800668e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8006698:	2b01      	cmp	r3, #1
 800669a:	d107      	bne.n	80066ac <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80066a4:	2100      	movs	r1, #0
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f00f fa9a 	bl	8015be0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f00f f8db 	bl	8015868 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066c4:	b292      	uxth	r2, r2
 80066c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80066ca:	e099      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d027      	beq.n	8006726 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80066de:	b29a      	uxth	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0208 	orr.w	r2, r2, #8
 80066e8:	b292      	uxth	r2, r2
 80066ea:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80066f6:	b29a      	uxth	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006700:	b292      	uxth	r2, r2
 8006702:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800670e:	b29a      	uxth	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0204 	orr.w	r2, r2, #4
 8006718:	b292      	uxth	r2, r2
 800671a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f00f f888 	bl	8015834 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006724:	e06c      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672c:	2b00      	cmp	r3, #0
 800672e:	d040      	beq.n	80067b2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006738:	b29a      	uxth	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006742:	b292      	uxth	r2, r2
 8006744:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800674e:	2b00      	cmp	r3, #0
 8006750:	d12b      	bne.n	80067aa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800675a:	b29a      	uxth	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f042 0204 	orr.w	r2, r2, #4
 8006764:	b292      	uxth	r2, r2
 8006766:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006772:	b29a      	uxth	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f042 0208 	orr.w	r2, r2, #8
 800677c:	b292      	uxth	r2, r2
 800677e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006792:	b29b      	uxth	r3, r3
 8006794:	089b      	lsrs	r3, r3, #2
 8006796:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80067a0:	2101      	movs	r1, #1
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f00f fa1c 	bl	8015be0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80067a8:	e02a      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f00f f842 	bl	8015834 <HAL_PCD_SuspendCallback>
    return;
 80067b0:	e026      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00f      	beq.n	80067dc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067c4:	b29a      	uxth	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80067ce:	b292      	uxth	r2, r2
 80067d0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	f00f f800 	bl	80157da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80067da:	e011      	b.n	8006800 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00c      	beq.n	8006800 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067f8:	b292      	uxth	r2, r2
 80067fa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80067fe:	bf00      	nop
  }
}
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b082      	sub	sp, #8
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006818:	2b01      	cmp	r3, #1
 800681a:	d101      	bne.n	8006820 <HAL_PCD_SetAddress+0x1a>
 800681c:	2302      	movs	r3, #2
 800681e:	e012      	b.n	8006846 <HAL_PCD_SetAddress+0x40>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	4611      	mov	r1, r2
 8006836:	4618      	mov	r0, r3
 8006838:	f007 fd31 	bl	800e29e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	4608      	mov	r0, r1
 8006858:	4611      	mov	r1, r2
 800685a:	461a      	mov	r2, r3
 800685c:	4603      	mov	r3, r0
 800685e:	70fb      	strb	r3, [r7, #3]
 8006860:	460b      	mov	r3, r1
 8006862:	803b      	strh	r3, [r7, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800686c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006870:	2b00      	cmp	r3, #0
 8006872:	da0e      	bge.n	8006892 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006874:	78fb      	ldrb	r3, [r7, #3]
 8006876:	f003 0207 	and.w	r2, r3, #7
 800687a:	4613      	mov	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4413      	add	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	3310      	adds	r3, #16
 8006884:	687a      	ldr	r2, [r7, #4]
 8006886:	4413      	add	r3, r2
 8006888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	705a      	strb	r2, [r3, #1]
 8006890:	e00e      	b.n	80068b0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	f003 0207 	and.w	r2, r3, #7
 8006898:	4613      	mov	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	00db      	lsls	r3, r3, #3
 80068a0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	4413      	add	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80068b0:	78fb      	ldrb	r3, [r7, #3]
 80068b2:	f003 0307 	and.w	r3, r3, #7
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80068bc:	883a      	ldrh	r2, [r7, #0]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	78ba      	ldrb	r2, [r7, #2]
 80068c6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80068c8:	78bb      	ldrb	r3, [r7, #2]
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d102      	bne.n	80068d4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d101      	bne.n	80068e2 <HAL_PCD_EP_Open+0x94>
 80068de:	2302      	movs	r3, #2
 80068e0:	e00e      	b.n	8006900 <HAL_PCD_EP_Open+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68f9      	ldr	r1, [r7, #12]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f005 fa73 	bl	800bddc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80068fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006918:	2b00      	cmp	r3, #0
 800691a:	da0e      	bge.n	800693a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800691c:	78fb      	ldrb	r3, [r7, #3]
 800691e:	f003 0207 	and.w	r2, r3, #7
 8006922:	4613      	mov	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4413      	add	r3, r2
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	3310      	adds	r3, #16
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4413      	add	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2201      	movs	r2, #1
 8006936:	705a      	strb	r2, [r3, #1]
 8006938:	e00e      	b.n	8006958 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	f003 0207 	and.w	r2, r3, #7
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	4413      	add	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	f003 0307 	and.w	r3, r3, #7
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800696a:	2b01      	cmp	r3, #1
 800696c:	d101      	bne.n	8006972 <HAL_PCD_EP_Close+0x6a>
 800696e:	2302      	movs	r3, #2
 8006970:	e00e      	b.n	8006990 <HAL_PCD_EP_Close+0x88>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	4618      	mov	r0, r3
 8006982:	f005 fdef 	bl	800c564 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	3710      	adds	r7, #16
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	460b      	mov	r3, r1
 80069a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	f003 0207 	and.w	r2, r3, #7
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	00db      	lsls	r3, r3, #3
 80069b6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2200      	movs	r2, #0
 80069d0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	2200      	movs	r2, #0
 80069d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069d8:	7afb      	ldrb	r3, [r7, #11]
 80069da:	f003 0307 	and.w	r3, r3, #7
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6979      	ldr	r1, [r7, #20]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f005 ffa7 	bl	800c93e <USB_EPStartXfer>

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3718      	adds	r7, #24
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}

080069fa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006a06:	78fb      	ldrb	r3, [r7, #3]
 8006a08:	f003 0207 	and.w	r2, r3, #7
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	00db      	lsls	r3, r3, #3
 8006a16:	440b      	add	r3, r1
 8006a18:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8006a1c:	681b      	ldr	r3, [r3, #0]
}
 8006a1e:	4618      	mov	r0, r3
 8006a20:	370c      	adds	r7, #12
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b086      	sub	sp, #24
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	60f8      	str	r0, [r7, #12]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
 8006a36:	460b      	mov	r3, r1
 8006a38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	f003 0207 	and.w	r2, r3, #7
 8006a40:	4613      	mov	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	3310      	adds	r3, #16
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	2201      	movs	r2, #1
 8006a74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a76:	7afb      	ldrb	r3, [r7, #11]
 8006a78:	f003 0307 	and.w	r3, r3, #7
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6979      	ldr	r1, [r7, #20]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f005 ff58 	bl	800c93e <USB_EPStartXfer>

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3718      	adds	r7, #24
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006aa4:	78fb      	ldrb	r3, [r7, #3]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	7912      	ldrb	r2, [r2, #4]
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d901      	bls.n	8006ab6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e03e      	b.n	8006b34 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da0e      	bge.n	8006adc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	f003 0207 	and.w	r2, r3, #7
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4413      	add	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	3310      	adds	r3, #16
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	705a      	strb	r2, [r3, #1]
 8006ada:	e00c      	b.n	8006af6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006adc:	78fa      	ldrb	r2, [r7, #3]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	00db      	lsls	r3, r3, #3
 8006ae6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	4413      	add	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_PCD_EP_SetStall+0x7e>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e00e      	b.n	8006b34 <HAL_PCD_EP_SetStall+0x9c>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68f9      	ldr	r1, [r7, #12]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f007 fabb 	bl	800e0a0 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	f003 030f 	and.w	r3, r3, #15
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	7912      	ldrb	r2, [r2, #4]
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e040      	b.n	8006bdc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da0e      	bge.n	8006b80 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b62:	78fb      	ldrb	r3, [r7, #3]
 8006b64:	f003 0207 	and.w	r2, r3, #7
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	3310      	adds	r3, #16
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	705a      	strb	r2, [r3, #1]
 8006b7e:	e00e      	b.n	8006b9e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	f003 0207 	and.w	r2, r3, #7
 8006b86:	4613      	mov	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	4413      	add	r3, r2
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006b92:	687a      	ldr	r2, [r7, #4]
 8006b94:	4413      	add	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ba4:	78fb      	ldrb	r3, [r7, #3]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	b2da      	uxtb	r2, r3
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d101      	bne.n	8006bbe <HAL_PCD_EP_ClrStall+0x82>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e00e      	b.n	8006bdc <HAL_PCD_EP_ClrStall+0xa0>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f007 fab8 	bl	800e142 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b096      	sub	sp, #88	@ 0x58
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006bec:	e3ad      	b.n	800734a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006bf6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	f003 030f 	and.w	r3, r3, #15
 8006c04:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8006c08:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	f040 816f 	bne.w	8006ef0 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006c12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d14c      	bne.n	8006cb8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	881b      	ldrh	r3, [r3, #0]
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c2e:	81fb      	strh	r3, [r7, #14]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	89fb      	ldrh	r3, [r7, #14]
 8006c36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	3310      	adds	r3, #16
 8006c46:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	461a      	mov	r2, r3
 8006c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	4413      	add	r3, r2
 8006c62:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c72:	695a      	ldr	r2, [r3, #20]
 8006c74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c76:	69db      	ldr	r3, [r3, #28]
 8006c78:	441a      	add	r2, r3
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c7c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006c7e:	2100      	movs	r1, #0
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f00e fd90 	bl	80157a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7b1b      	ldrb	r3, [r3, #12]
 8006c8a:	b2db      	uxtb	r3, r3
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 835c 	beq.w	800734a <PCD_EP_ISR_Handler+0x766>
 8006c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f040 8357 	bne.w	800734a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	7b1b      	ldrb	r3, [r3, #12]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	731a      	strb	r2, [r3, #12]
 8006cb6:	e348      	b.n	800734a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006cbe:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	881b      	ldrh	r3, [r3, #0]
 8006cc6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006cca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d032      	beq.n	8006d3c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4413      	add	r3, r2
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	6812      	ldr	r2, [r2, #0]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006cf4:	881b      	ldrh	r3, [r3, #0]
 8006cf6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006cfc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006d08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d0a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006d0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d0e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006d10:	b29b      	uxth	r3, r3
 8006d12:	f007 fb41 	bl	800e398 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006d22:	4013      	ands	r3, r2
 8006d24:	823b      	strh	r3, [r7, #16]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	8a3a      	ldrh	r2, [r7, #16]
 8006d2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d30:	b292      	uxth	r2, r2
 8006d32:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f00e fd09 	bl	801574c <HAL_PCD_SetupStageCallback>
 8006d3a:	e306      	b.n	800734a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006d3c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f280 8302 	bge.w	800734a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	881b      	ldrh	r3, [r3, #0]
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006d52:	4013      	ands	r3, r2
 8006d54:	83fb      	strh	r3, [r7, #30]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	8bfa      	ldrh	r2, [r7, #30]
 8006d5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006d60:	b292      	uxth	r2, r2
 8006d62:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	461a      	mov	r2, r3
 8006d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4413      	add	r3, r2
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d8a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006d8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d019      	beq.n	8006dc8 <PCD_EP_ISR_Handler+0x1e4>
 8006d94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d015      	beq.n	8006dc8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6818      	ldr	r0, [r3, #0]
 8006da0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da2:	6959      	ldr	r1, [r3, #20]
 8006da4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006da6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006daa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f007 faf3 	bl	800e398 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006db2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db4:	695a      	ldr	r2, [r3, #20]
 8006db6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	441a      	add	r2, r3
 8006dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dbe:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f00e fcd4 	bl	8015770 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006dd2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006dd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 82b5 	bne.w	800734a <PCD_EP_ISR_Handler+0x766>
 8006de0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006de4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006de8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006dec:	f000 82ad 	beq.w	800734a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	61bb      	str	r3, [r7, #24]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dfe:	b29b      	uxth	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	69bb      	ldr	r3, [r7, #24]
 8006e04:	4413      	add	r3, r2
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e0e:	617b      	str	r3, [r7, #20]
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	881b      	ldrh	r3, [r3, #0]
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	801a      	strh	r2, [r3, #0]
 8006e20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e26:	d91d      	bls.n	8006e64 <PCD_EP_ISR_Handler+0x280>
 8006e28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	095b      	lsrs	r3, r3, #5
 8006e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e32:	691b      	ldr	r3, [r3, #16]
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d102      	bne.n	8006e42 <PCD_EP_ISR_Handler+0x25e>
 8006e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e3e:	3b01      	subs	r3, #1
 8006e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	4313      	orrs	r3, r2
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	801a      	strh	r2, [r3, #0]
 8006e62:	e026      	b.n	8006eb2 <PCD_EP_ISR_Handler+0x2ce>
 8006e64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <PCD_EP_ISR_Handler+0x29e>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	881b      	ldrh	r3, [r3, #0]
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7a:	b29a      	uxth	r2, r3
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	801a      	strh	r2, [r3, #0]
 8006e80:	e017      	b.n	8006eb2 <PCD_EP_ISR_Handler+0x2ce>
 8006e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	085b      	lsrs	r3, r3, #1
 8006e88:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d002      	beq.n	8006e9c <PCD_EP_ISR_Handler+0x2b8>
 8006e96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e98:	3301      	adds	r3, #1
 8006e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	881b      	ldrh	r3, [r3, #0]
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	029b      	lsls	r3, r3, #10
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ec2:	827b      	strh	r3, [r7, #18]
 8006ec4:	8a7b      	ldrh	r3, [r7, #18]
 8006ec6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006eca:	827b      	strh	r3, [r7, #18]
 8006ecc:	8a7b      	ldrh	r3, [r7, #18]
 8006ece:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006ed2:	827b      	strh	r3, [r7, #18]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	8a7b      	ldrh	r3, [r7, #18]
 8006eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ee2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	8013      	strh	r3, [r2, #0]
 8006eee:	e22c      	b.n	800734a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	4413      	add	r3, r2
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006f04:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f280 80f6 	bge.w	80070fa <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4413      	add	r3, r2
 8006f1c:	881b      	ldrh	r3, [r3, #0]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006f24:	4013      	ands	r3, r2
 8006f26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8006f3c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f40:	b292      	uxth	r2, r2
 8006f42:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006f44:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006f48:	4613      	mov	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	4413      	add	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f5c:	7b1b      	ldrb	r3, [r3, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d123      	bne.n	8006faa <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	4413      	add	r3, r2
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	6812      	ldr	r2, [r2, #0]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f80:	881b      	ldrh	r3, [r3, #0]
 8006f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f86:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8006f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 808e 	beq.w	80070b0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6818      	ldr	r0, [r3, #0]
 8006f98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f9a:	6959      	ldr	r1, [r3, #20]
 8006f9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f9e:	88da      	ldrh	r2, [r3, #6]
 8006fa0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006fa4:	f007 f9f8 	bl	800e398 <USB_ReadPMA>
 8006fa8:	e082      	b.n	80070b0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fac:	78db      	ldrb	r3, [r3, #3]
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d10a      	bne.n	8006fc8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006fb2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 f9d3 	bl	8007366 <HAL_PCD_EP_DB_Receive>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8006fc6:	e073      	b.n	80070b0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	881b      	ldrh	r3, [r3, #0]
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	461a      	mov	r2, r3
 8006fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	441a      	add	r2, r3
 8006ff4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006ff8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007000:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007004:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007008:	b29b      	uxth	r3, r3
 800700a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	461a      	mov	r2, r3
 8007012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	b29b      	uxth	r3, r3
 800701e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d022      	beq.n	800706c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800702e:	b29b      	uxth	r3, r3
 8007030:	461a      	mov	r2, r3
 8007032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	00db      	lsls	r3, r3, #3
 8007038:	4413      	add	r3, r2
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	6812      	ldr	r2, [r2, #0]
 800703e:	4413      	add	r3, r2
 8007040:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800704a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800704e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007052:	2b00      	cmp	r3, #0
 8007054:	d02c      	beq.n	80070b0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800705c:	6959      	ldr	r1, [r3, #20]
 800705e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007060:	891a      	ldrh	r2, [r3, #8]
 8007062:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007066:	f007 f997 	bl	800e398 <USB_ReadPMA>
 800706a:	e021      	b.n	80070b0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007074:	b29b      	uxth	r3, r3
 8007076:	461a      	mov	r2, r3
 8007078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	00db      	lsls	r3, r3, #3
 800707e:	4413      	add	r3, r2
 8007080:	687a      	ldr	r2, [r7, #4]
 8007082:	6812      	ldr	r2, [r2, #0]
 8007084:	4413      	add	r3, r2
 8007086:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007090:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8007094:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8007098:	2b00      	cmp	r3, #0
 800709a:	d009      	beq.n	80070b0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6818      	ldr	r0, [r3, #0]
 80070a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a2:	6959      	ldr	r1, [r3, #20]
 80070a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070a6:	895a      	ldrh	r2, [r3, #10]
 80070a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80070ac:	f007 f974 	bl	800e398 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80070b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070b2:	69da      	ldr	r2, [r3, #28]
 80070b4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80070b8:	441a      	add	r2, r3
 80070ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80070be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070c0:	695a      	ldr	r2, [r3, #20]
 80070c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80070c6:	441a      	add	r2, r3
 80070c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ca:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80070cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <PCD_EP_ISR_Handler+0x4fc>
 80070d4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80070d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d206      	bcs.n	80070ee <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80070e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	4619      	mov	r1, r3
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f00e fb42 	bl	8015770 <HAL_PCD_DataOutStageCallback>
 80070ec:	e005      	b.n	80070fa <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80070f4:	4618      	mov	r0, r3
 80070f6:	f005 fc22 	bl	800c93e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80070fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80070fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007102:	2b00      	cmp	r3, #0
 8007104:	f000 8121 	beq.w	800734a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8007108:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800710c:	4613      	mov	r3, r2
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	4413      	add	r3, r2
 8007112:	00db      	lsls	r3, r3, #3
 8007114:	3310      	adds	r3, #16
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	4413      	add	r3, r2
 800711a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	461a      	mov	r2, r3
 8007122:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	881b      	ldrh	r3, [r3, #0]
 800712c:	b29b      	uxth	r3, r3
 800712e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8007132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007136:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	461a      	mov	r2, r3
 8007140:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	441a      	add	r2, r3
 8007148:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800714c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007154:	b29b      	uxth	r3, r3
 8007156:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8007158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800715a:	78db      	ldrb	r3, [r3, #3]
 800715c:	2b01      	cmp	r3, #1
 800715e:	f040 80a2 	bne.w	80072a6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8007162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007164:	2200      	movs	r2, #0
 8007166:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8007168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800716a:	7b1b      	ldrb	r3, [r3, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	f000 8093 	beq.w	8007298 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007172:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d046      	beq.n	800720c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800717e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007180:	785b      	ldrb	r3, [r3, #1]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d126      	bne.n	80071d4 <PCD_EP_ISR_Handler+0x5f0>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	627b      	str	r3, [r7, #36]	@ 0x24
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007194:	b29b      	uxth	r3, r3
 8007196:	461a      	mov	r2, r3
 8007198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719a:	4413      	add	r3, r2
 800719c:	627b      	str	r3, [r7, #36]	@ 0x24
 800719e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	00da      	lsls	r2, r3, #3
 80071a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80071ac:	623b      	str	r3, [r7, #32]
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071b8:	b29a      	uxth	r2, r3
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	801a      	strh	r2, [r3, #0]
 80071be:	6a3b      	ldr	r3, [r7, #32]
 80071c0:	881b      	ldrh	r3, [r3, #0]
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	e061      	b.n	8007298 <PCD_EP_ISR_Handler+0x6b4>
 80071d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d15d      	bne.n	8007298 <PCD_EP_ISR_Handler+0x6b4>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	461a      	mov	r2, r3
 80071ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f0:	4413      	add	r3, r2
 80071f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	00da      	lsls	r2, r3, #3
 80071fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fc:	4413      	add	r3, r2
 80071fe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007206:	2200      	movs	r2, #0
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e045      	b.n	8007298 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007212:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007214:	785b      	ldrb	r3, [r3, #1]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d126      	bne.n	8007268 <PCD_EP_ISR_Handler+0x684>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007228:	b29b      	uxth	r3, r3
 800722a:	461a      	mov	r2, r3
 800722c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800722e:	4413      	add	r3, r2
 8007230:	637b      	str	r3, [r7, #52]	@ 0x34
 8007232:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	00da      	lsls	r2, r3, #3
 8007238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723a:	4413      	add	r3, r2
 800723c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007240:	633b      	str	r3, [r7, #48]	@ 0x30
 8007242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007244:	881b      	ldrh	r3, [r3, #0]
 8007246:	b29b      	uxth	r3, r3
 8007248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800724c:	b29a      	uxth	r2, r3
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007260:	b29a      	uxth	r2, r3
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	e017      	b.n	8007298 <PCD_EP_ISR_Handler+0x6b4>
 8007268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800726a:	785b      	ldrb	r3, [r3, #1]
 800726c:	2b01      	cmp	r3, #1
 800726e:	d113      	bne.n	8007298 <PCD_EP_ISR_Handler+0x6b4>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007278:	b29b      	uxth	r3, r3
 800727a:	461a      	mov	r2, r3
 800727c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727e:	4413      	add	r3, r2
 8007280:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	00da      	lsls	r2, r3, #3
 8007288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728a:	4413      	add	r3, r2
 800728c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007294:	2200      	movs	r2, #0
 8007296:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f00e fa81 	bl	80157a6 <HAL_PCD_DataInStageCallback>
 80072a4:	e051      	b.n	800734a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80072a6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80072aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d144      	bne.n	800733c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	461a      	mov	r2, r3
 80072be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	4413      	add	r3, r2
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6812      	ldr	r2, [r2, #0]
 80072ca:	4413      	add	r3, r2
 80072cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80072d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80072da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072dc:	699a      	ldr	r2, [r3, #24]
 80072de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d907      	bls.n	80072f6 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80072e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072ee:	1ad2      	subs	r2, r2, r3
 80072f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f2:	619a      	str	r2, [r3, #24]
 80072f4:	e002      	b.n	80072fc <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80072f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f8:	2200      	movs	r2, #0
 80072fa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80072fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d106      	bne.n	8007312 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007304:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f00e fa4b 	bl	80157a6 <HAL_PCD_DataInStageCallback>
 8007310:	e01b      	b.n	800734a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007314:	695a      	ldr	r2, [r3, #20]
 8007316:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800731a:	441a      	add	r2, r3
 800731c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007322:	69da      	ldr	r2, [r3, #28]
 8007324:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8007328:	441a      	add	r2, r3
 800732a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800732c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007334:	4618      	mov	r0, r3
 8007336:	f005 fb02 	bl	800c93e <USB_EPStartXfer>
 800733a:	e006      	b.n	800734a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800733c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8007340:	461a      	mov	r2, r3
 8007342:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 f917 	bl	8007578 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007352:	b29b      	uxth	r3, r3
 8007354:	b21b      	sxth	r3, r3
 8007356:	2b00      	cmp	r3, #0
 8007358:	f6ff ac49 	blt.w	8006bee <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3758      	adds	r7, #88	@ 0x58
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b088      	sub	sp, #32
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	60b9      	str	r1, [r7, #8]
 8007370:	4613      	mov	r3, r2
 8007372:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007374:	88fb      	ldrh	r3, [r7, #6]
 8007376:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800737a:	2b00      	cmp	r3, #0
 800737c:	d07c      	beq.n	8007478 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007386:	b29b      	uxth	r3, r3
 8007388:	461a      	mov	r2, r3
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	00db      	lsls	r3, r3, #3
 8007390:	4413      	add	r3, r2
 8007392:	68fa      	ldr	r2, [r7, #12]
 8007394:	6812      	ldr	r2, [r2, #0]
 8007396:	4413      	add	r3, r2
 8007398:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	699a      	ldr	r2, [r3, #24]
 80073a8:	8b7b      	ldrh	r3, [r7, #26]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d306      	bcc.n	80073bc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	8b7b      	ldrh	r3, [r7, #26]
 80073b4:	1ad2      	subs	r2, r2, r3
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	619a      	str	r2, [r3, #24]
 80073ba:	e002      	b.n	80073c2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2200      	movs	r2, #0
 80073c0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	699b      	ldr	r3, [r3, #24]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d123      	bne.n	8007412 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4413      	add	r3, r2
 80073d8:	881b      	ldrh	r3, [r3, #0]
 80073da:	b29b      	uxth	r3, r3
 80073dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80073e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073e4:	833b      	strh	r3, [r7, #24]
 80073e6:	8b3b      	ldrh	r3, [r7, #24]
 80073e8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80073ec:	833b      	strh	r3, [r7, #24]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	441a      	add	r2, r3
 80073fc:	8b3b      	ldrh	r3, [r7, #24]
 80073fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007406:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800740a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800740e:	b29b      	uxth	r3, r3
 8007410:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007418:	2b00      	cmp	r3, #0
 800741a:	d01f      	beq.n	800745c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	b29b      	uxth	r3, r3
 800742e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007436:	82fb      	strh	r3, [r7, #22]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	461a      	mov	r2, r3
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	441a      	add	r2, r3
 8007446:	8afb      	ldrh	r3, [r7, #22]
 8007448:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800744c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007450:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007454:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007458:	b29b      	uxth	r3, r3
 800745a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800745c:	8b7b      	ldrh	r3, [r7, #26]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8085 	beq.w	800756e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6818      	ldr	r0, [r3, #0]
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	6959      	ldr	r1, [r3, #20]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	891a      	ldrh	r2, [r3, #8]
 8007470:	8b7b      	ldrh	r3, [r7, #26]
 8007472:	f006 ff91 	bl	800e398 <USB_ReadPMA>
 8007476:	e07a      	b.n	800756e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007480:	b29b      	uxth	r3, r3
 8007482:	461a      	mov	r2, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	781b      	ldrb	r3, [r3, #0]
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	4413      	add	r3, r2
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	6812      	ldr	r2, [r2, #0]
 8007490:	4413      	add	r3, r2
 8007492:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800749c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	699a      	ldr	r2, [r3, #24]
 80074a2:	8b7b      	ldrh	r3, [r7, #26]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d306      	bcc.n	80074b6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	699a      	ldr	r2, [r3, #24]
 80074ac:	8b7b      	ldrh	r3, [r7, #26]
 80074ae:	1ad2      	subs	r2, r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	619a      	str	r2, [r3, #24]
 80074b4:	e002      	b.n	80074bc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2200      	movs	r2, #0
 80074ba:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d123      	bne.n	800750c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	461a      	mov	r2, r3
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4413      	add	r3, r2
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074de:	83fb      	strh	r3, [r7, #30]
 80074e0:	8bfb      	ldrh	r3, [r7, #30]
 80074e2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80074e6:	83fb      	strh	r3, [r7, #30]
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	461a      	mov	r2, r3
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	441a      	add	r2, r3
 80074f6:	8bfb      	ldrh	r3, [r7, #30]
 80074f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007500:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007508:	b29b      	uxth	r3, r3
 800750a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800750c:	88fb      	ldrh	r3, [r7, #6]
 800750e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d11f      	bne.n	8007556 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	461a      	mov	r2, r3
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4413      	add	r3, r2
 8007524:	881b      	ldrh	r3, [r3, #0]
 8007526:	b29b      	uxth	r3, r3
 8007528:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800752c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007530:	83bb      	strh	r3, [r7, #28]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	461a      	mov	r2, r3
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	441a      	add	r2, r3
 8007540:	8bbb      	ldrh	r3, [r7, #28]
 8007542:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007546:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800754a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800754e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007552:	b29b      	uxth	r3, r3
 8007554:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007556:	8b7b      	ldrh	r3, [r7, #26]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d008      	beq.n	800756e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	6959      	ldr	r1, [r3, #20]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	895a      	ldrh	r2, [r3, #10]
 8007568:	8b7b      	ldrh	r3, [r7, #26]
 800756a:	f006 ff15 	bl	800e398 <USB_ReadPMA>
    }
  }

  return count;
 800756e:	8b7b      	ldrh	r3, [r7, #26]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3720      	adds	r7, #32
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b0a4      	sub	sp, #144	@ 0x90
 800757c:	af00      	add	r7, sp, #0
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	4613      	mov	r3, r2
 8007584:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 81db 	beq.w	8007948 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800759a:	b29b      	uxth	r3, r3
 800759c:	461a      	mov	r2, r3
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	4413      	add	r3, r2
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	6812      	ldr	r2, [r2, #0]
 80075aa:	4413      	add	r3, r2
 80075ac:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075b6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d907      	bls.n	80075d6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	699a      	ldr	r2, [r3, #24]
 80075ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80075ce:	1ad2      	subs	r2, r2, r3
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	619a      	str	r2, [r3, #24]
 80075d4:	e002      	b.n	80075dc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2200      	movs	r2, #0
 80075da:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	f040 80b9 	bne.w	8007758 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	785b      	ldrb	r3, [r3, #1]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d126      	bne.n	800763c <HAL_PCD_EP_DB_Transmit+0xc4>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	461a      	mov	r2, r3
 8007600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007602:	4413      	add	r3, r2
 8007604:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	00da      	lsls	r2, r3, #3
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	4413      	add	r3, r2
 8007610:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007614:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007620:	b29a      	uxth	r2, r3
 8007622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007624:	801a      	strh	r2, [r3, #0]
 8007626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007628:	881b      	ldrh	r3, [r3, #0]
 800762a:	b29b      	uxth	r3, r3
 800762c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007634:	b29a      	uxth	r2, r3
 8007636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007638:	801a      	strh	r2, [r3, #0]
 800763a:	e01a      	b.n	8007672 <HAL_PCD_EP_DB_Transmit+0xfa>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d116      	bne.n	8007672 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	637b      	str	r3, [r7, #52]	@ 0x34
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007652:	b29b      	uxth	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007658:	4413      	add	r3, r2
 800765a:	637b      	str	r3, [r7, #52]	@ 0x34
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	00da      	lsls	r2, r3, #3
 8007662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007664:	4413      	add	r3, r2
 8007666:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800766a:	633b      	str	r3, [r7, #48]	@ 0x30
 800766c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766e:	2200      	movs	r2, #0
 8007670:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	627b      	str	r3, [r7, #36]	@ 0x24
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d126      	bne.n	80076ce <HAL_PCD_EP_DB_Transmit+0x156>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	61fb      	str	r3, [r7, #28]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	4413      	add	r3, r2
 8007696:	61fb      	str	r3, [r7, #28]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	00da      	lsls	r2, r3, #3
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076a6:	61bb      	str	r3, [r7, #24]
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	801a      	strh	r2, [r3, #0]
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	b29b      	uxth	r3, r3
 80076be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	69bb      	ldr	r3, [r7, #24]
 80076ca:	801a      	strh	r2, [r3, #0]
 80076cc:	e017      	b.n	80076fe <HAL_PCD_EP_DB_Transmit+0x186>
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	785b      	ldrb	r3, [r3, #1]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d113      	bne.n	80076fe <HAL_PCD_EP_DB_Transmit+0x186>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076de:	b29b      	uxth	r3, r3
 80076e0:	461a      	mov	r2, r3
 80076e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e4:	4413      	add	r3, r2
 80076e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	00da      	lsls	r2, r3, #3
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	4413      	add	r3, r2
 80076f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80076f6:	623b      	str	r3, [r7, #32]
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	2200      	movs	r2, #0
 80076fc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f00e f84e 	bl	80157a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800770a:	88fb      	ldrh	r3, [r7, #6]
 800770c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007710:	2b00      	cmp	r3, #0
 8007712:	f000 82fa 	beq.w	8007d0a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4413      	add	r3, r2
 8007724:	881b      	ldrh	r3, [r3, #0]
 8007726:	b29b      	uxth	r3, r3
 8007728:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800772c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007730:	82fb      	strh	r3, [r7, #22]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	441a      	add	r2, r3
 8007740:	8afb      	ldrh	r3, [r7, #22]
 8007742:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007746:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800774a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800774e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007752:	b29b      	uxth	r3, r3
 8007754:	8013      	strh	r3, [r2, #0]
 8007756:	e2d8      	b.n	8007d0a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d021      	beq.n	80077a6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	781b      	ldrb	r3, [r3, #0]
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4413      	add	r3, r2
 8007770:	881b      	ldrh	r3, [r3, #0]
 8007772:	b29b      	uxth	r3, r3
 8007774:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007778:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800777c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	441a      	add	r2, r3
 800778e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007792:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007796:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800779a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800779e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	f040 82ac 	bne.w	8007d0a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	695a      	ldr	r2, [r3, #20]
 80077b6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80077ba:	441a      	add	r2, r3
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	69da      	ldr	r2, [r3, #28]
 80077c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80077c8:	441a      	add	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	6a1a      	ldr	r2, [r3, #32]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d30b      	bcc.n	80077f2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	6a1a      	ldr	r2, [r3, #32]
 80077e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80077ea:	1ad2      	subs	r2, r2, r3
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	621a      	str	r2, [r3, #32]
 80077f0:	e017      	b.n	8007822 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d108      	bne.n	800780c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80077fa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80077fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2200      	movs	r2, #0
 8007806:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800780a:	e00a      	b.n	8007822 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	6a1b      	ldr	r3, [r3, #32]
 8007818:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	2200      	movs	r2, #0
 8007820:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d165      	bne.n	80078f6 <HAL_PCD_EP_DB_Transmit+0x37e>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007838:	b29b      	uxth	r3, r3
 800783a:	461a      	mov	r2, r3
 800783c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800783e:	4413      	add	r3, r2
 8007840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	00da      	lsls	r2, r3, #3
 8007848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800784a:	4413      	add	r3, r2
 800784c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007850:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007854:	881b      	ldrh	r3, [r3, #0]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800785c:	b29a      	uxth	r2, r3
 800785e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007860:	801a      	strh	r2, [r3, #0]
 8007862:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007866:	2b3e      	cmp	r3, #62	@ 0x3e
 8007868:	d91d      	bls.n	80078a6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800786a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800786e:	095b      	lsrs	r3, r3, #5
 8007870:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007872:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	2b00      	cmp	r3, #0
 800787c:	d102      	bne.n	8007884 <HAL_PCD_EP_DB_Transmit+0x30c>
 800787e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007880:	3b01      	subs	r3, #1
 8007882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007886:	881b      	ldrh	r3, [r3, #0]
 8007888:	b29a      	uxth	r2, r3
 800788a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800788c:	b29b      	uxth	r3, r3
 800788e:	029b      	lsls	r3, r3, #10
 8007890:	b29b      	uxth	r3, r3
 8007892:	4313      	orrs	r3, r2
 8007894:	b29b      	uxth	r3, r3
 8007896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800789a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800789e:	b29a      	uxth	r2, r3
 80078a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078a2:	801a      	strh	r2, [r3, #0]
 80078a4:	e044      	b.n	8007930 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80078a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80078ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078bc:	b29a      	uxth	r2, r3
 80078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078c0:	801a      	strh	r2, [r3, #0]
 80078c2:	e035      	b.n	8007930 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80078c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078c8:	085b      	lsrs	r3, r3, #1
 80078ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <HAL_PCD_EP_DB_Transmit+0x366>
 80078d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078da:	3301      	adds	r3, #1
 80078dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	029b      	lsls	r3, r3, #10
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f2:	801a      	strh	r2, [r3, #0]
 80078f4:	e01c      	b.n	8007930 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b01      	cmp	r3, #1
 80078fc:	d118      	bne.n	8007930 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	647b      	str	r3, [r7, #68]	@ 0x44
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800790c:	b29b      	uxth	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007912:	4413      	add	r3, r2
 8007914:	647b      	str	r3, [r7, #68]	@ 0x44
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	00da      	lsls	r2, r3, #3
 800791c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800791e:	4413      	add	r3, r2
 8007920:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007924:	643b      	str	r3, [r7, #64]	@ 0x40
 8007926:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800792a:	b29a      	uxth	r2, r3
 800792c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800792e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6959      	ldr	r1, [r3, #20]
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	891a      	ldrh	r2, [r3, #8]
 800793c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007940:	b29b      	uxth	r3, r3
 8007942:	f006 fce7 	bl	800e314 <USB_WritePMA>
 8007946:	e1e0      	b.n	8007d0a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007950:	b29b      	uxth	r3, r3
 8007952:	461a      	mov	r2, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	4413      	add	r3, r2
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	4413      	add	r3, r2
 8007962:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007966:	881b      	ldrh	r3, [r3, #0]
 8007968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800796c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	699a      	ldr	r2, [r3, #24]
 8007974:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007978:	429a      	cmp	r2, r3
 800797a:	d307      	bcc.n	800798c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	699a      	ldr	r2, [r3, #24]
 8007980:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007984:	1ad2      	subs	r2, r2, r3
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	619a      	str	r2, [r3, #24]
 800798a:	e002      	b.n	8007992 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2200      	movs	r2, #0
 8007990:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	2b00      	cmp	r3, #0
 8007998:	f040 80c0 	bne.w	8007b1c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d126      	bne.n	80079f2 <HAL_PCD_EP_DB_Transmit+0x47a>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	461a      	mov	r2, r3
 80079b6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079b8:	4413      	add	r3, r2
 80079ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	00da      	lsls	r2, r3, #3
 80079c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80079c4:	4413      	add	r3, r2
 80079c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80079ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80079cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ce:	881b      	ldrh	r3, [r3, #0]
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80079d6:	b29a      	uxth	r2, r3
 80079d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079da:	801a      	strh	r2, [r3, #0]
 80079dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079ea:	b29a      	uxth	r2, r3
 80079ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80079ee:	801a      	strh	r2, [r3, #0]
 80079f0:	e01a      	b.n	8007a28 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d116      	bne.n	8007a28 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a0e:	4413      	add	r3, r2
 8007a10:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	00da      	lsls	r2, r3, #3
 8007a18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8007a20:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a24:	2200      	movs	r2, #0
 8007a26:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	677b      	str	r3, [r7, #116]	@ 0x74
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	785b      	ldrb	r3, [r3, #1]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d12b      	bne.n	8007a8e <HAL_PCD_EP_DB_Transmit+0x516>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	461a      	mov	r2, r3
 8007a48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a4a:	4413      	add	r3, r2
 8007a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	00da      	lsls	r2, r3, #3
 8007a54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a56:	4413      	add	r3, r2
 8007a58:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007a5c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a72:	801a      	strh	r2, [r3, #0]
 8007a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a84:	b29a      	uxth	r2, r3
 8007a86:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a8a:	801a      	strh	r2, [r3, #0]
 8007a8c:	e017      	b.n	8007abe <HAL_PCD_EP_DB_Transmit+0x546>
 8007a8e:	68bb      	ldr	r3, [r7, #8]
 8007a90:	785b      	ldrb	r3, [r3, #1]
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d113      	bne.n	8007abe <HAL_PCD_EP_DB_Transmit+0x546>
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	461a      	mov	r2, r3
 8007aa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007aa4:	4413      	add	r3, r2
 8007aa6:	677b      	str	r3, [r7, #116]	@ 0x74
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	00da      	lsls	r2, r3, #3
 8007aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ab0:	4413      	add	r3, r2
 8007ab2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ab6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ab8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007aba:	2200      	movs	r2, #0
 8007abc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f00d fe6e 	bl	80157a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007aca:	88fb      	ldrh	r3, [r7, #6]
 8007acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f040 811a 	bne.w	8007d0a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007aec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	461a      	mov	r2, r3
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	781b      	ldrb	r3, [r3, #0]
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8007b06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	8013      	strh	r3, [r2, #0]
 8007b1a:	e0f6      	b.n	8007d0a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007b1c:	88fb      	ldrh	r3, [r7, #6]
 8007b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d121      	bne.n	8007b6a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	461a      	mov	r2, r3
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b40:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	461a      	mov	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	441a      	add	r2, r3
 8007b52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8007b56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007b5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007b5e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007b62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	f040 80ca 	bne.w	8007d0a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	695a      	ldr	r2, [r3, #20]
 8007b7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007b7e:	441a      	add	r2, r3
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6a1a      	ldr	r2, [r3, #32]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d30b      	bcc.n	8007bb6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	621a      	str	r2, [r3, #32]
 8007bb4:	e017      	b.n	8007be6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d108      	bne.n	8007bd0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007bbe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8007bc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007bce:	e00a      	b.n	8007be6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	6a1b      	ldr	r3, [r3, #32]
 8007bd4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	657b      	str	r3, [r7, #84]	@ 0x54
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	785b      	ldrb	r3, [r3, #1]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d165      	bne.n	8007cc0 <HAL_PCD_EP_DB_Transmit+0x748>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	461a      	mov	r2, r3
 8007c06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c08:	4413      	add	r3, r2
 8007c0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	00da      	lsls	r2, r3, #3
 8007c12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c14:	4413      	add	r3, r2
 8007c16:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007c1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c1e:	881b      	ldrh	r3, [r3, #0]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c2a:	801a      	strh	r2, [r3, #0]
 8007c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c30:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c32:	d91d      	bls.n	8007c70 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007c34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c40:	f003 031f 	and.w	r3, r3, #31
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007c48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c50:	881b      	ldrh	r3, [r3, #0]
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c56:	b29b      	uxth	r3, r3
 8007c58:	029b      	lsls	r3, r3, #10
 8007c5a:	b29b      	uxth	r3, r3
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c6c:	801a      	strh	r2, [r3, #0]
 8007c6e:	e041      	b.n	8007cf4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007c70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <HAL_PCD_EP_DB_Transmit+0x716>
 8007c78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c7a:	881b      	ldrh	r3, [r3, #0]
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c8a:	801a      	strh	r2, [r3, #0]
 8007c8c:	e032      	b.n	8007cf4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <HAL_PCD_EP_DB_Transmit+0x730>
 8007ca2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ca4:	3301      	adds	r3, #1
 8007ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29a      	uxth	r2, r3
 8007cae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	029b      	lsls	r3, r3, #10
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007cbc:	801a      	strh	r2, [r3, #0]
 8007cbe:	e019      	b.n	8007cf4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d115      	bne.n	8007cf4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007cd6:	4413      	add	r3, r2
 8007cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	781b      	ldrb	r3, [r3, #0]
 8007cde:	00da      	lsls	r2, r3, #3
 8007ce0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007ce8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007cf2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6818      	ldr	r0, [r3, #0]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	6959      	ldr	r1, [r3, #20]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	895a      	ldrh	r2, [r3, #10]
 8007d00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d04:	b29b      	uxth	r3, r3
 8007d06:	f006 fb05 	bl	800e314 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	009b      	lsls	r3, r3, #2
 8007d16:	4413      	add	r3, r2
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d24:	82bb      	strh	r3, [r7, #20]
 8007d26:	8abb      	ldrh	r3, [r7, #20]
 8007d28:	f083 0310 	eor.w	r3, r3, #16
 8007d2c:	82bb      	strh	r3, [r7, #20]
 8007d2e:	8abb      	ldrh	r3, [r7, #20]
 8007d30:	f083 0320 	eor.w	r3, r3, #32
 8007d34:	82bb      	strh	r3, [r7, #20]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	441a      	add	r2, r3
 8007d44:	8abb      	ldrh	r3, [r7, #20]
 8007d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007d5a:	2300      	movs	r3, #0
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3790      	adds	r7, #144	@ 0x90
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}

08007d64 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	607b      	str	r3, [r7, #4]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	817b      	strh	r3, [r7, #10]
 8007d72:	4613      	mov	r3, r2
 8007d74:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007d76:	897b      	ldrh	r3, [r7, #10]
 8007d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00b      	beq.n	8007d9a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d82:	897b      	ldrh	r3, [r7, #10]
 8007d84:	f003 0207 	and.w	r2, r3, #7
 8007d88:	4613      	mov	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4413      	add	r3, r2
 8007d8e:	00db      	lsls	r3, r3, #3
 8007d90:	3310      	adds	r3, #16
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4413      	add	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e009      	b.n	8007dae <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007d9a:	897a      	ldrh	r2, [r7, #10]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4413      	add	r3, r2
 8007dac:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007dae:	893b      	ldrh	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d107      	bne.n	8007dc4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	2200      	movs	r2, #0
 8007db8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	b29a      	uxth	r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	80da      	strh	r2, [r3, #6]
 8007dc2:	e00b      	b.n	8007ddc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	0c1b      	lsrs	r3, r3, #16
 8007dd6:	b29a      	uxth	r2, r3
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b085      	sub	sp, #20
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	f043 0301 	orr.w	r3, r3, #1
 8007e14:	b29a      	uxth	r2, r3
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	b29a      	uxth	r2, r3
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007e30:	2300      	movs	r3, #0
}
 8007e32:	4618      	mov	r0, r3
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
	...

08007e40 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007e40:	b480      	push	{r7}
 8007e42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e44:	4b05      	ldr	r3, [pc, #20]	@ (8007e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a04      	ldr	r2, [pc, #16]	@ (8007e5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007e4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e4e:	6013      	str	r3, [r2, #0]
}
 8007e50:	bf00      	nop
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	58000400 	.word	0x58000400

08007e60 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007e60:	b480      	push	{r7}
 8007e62:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007e64:	4b04      	ldr	r3, [pc, #16]	@ (8007e78 <HAL_PWREx_GetVoltageRange+0x18>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	58000400 	.word	0x58000400

08007e7c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007e80:	4b05      	ldr	r3, [pc, #20]	@ (8007e98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	4a04      	ldr	r2, [pc, #16]	@ (8007e98 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007e86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007e8a:	6053      	str	r3, [r2, #4]
}
 8007e8c:	bf00      	nop
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	58000400 	.word	0x58000400

08007e9c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007eaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007eae:	d101      	bne.n	8007eb4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <LL_RCC_HSE_Enable>:
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8007ec4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ece:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ed2:	6013      	str	r3, [r2, #0]
}
 8007ed4:	bf00      	nop
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr

08007ede <LL_RCC_HSE_Disable>:
{
 8007ede:	b480      	push	{r7}
 8007ee0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8007ee2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ef0:	6013      	str	r3, [r2, #0]
}
 8007ef2:	bf00      	nop
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <LL_RCC_HSE_IsReady>:
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007f00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007f0e:	d101      	bne.n	8007f14 <LL_RCC_HSE_IsReady+0x18>
 8007f10:	2301      	movs	r3, #1
 8007f12:	e000      	b.n	8007f16 <LL_RCC_HSE_IsReady+0x1a>
 8007f14:	2300      	movs	r3, #0
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <LL_RCC_HSI_Enable>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f32:	6013      	str	r3, [r2, #0]
}
 8007f34:	bf00      	nop
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <LL_RCC_HSI_Disable>:
{
 8007f3e:	b480      	push	{r7}
 8007f40:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f50:	6013      	str	r3, [r2, #0]
}
 8007f52:	bf00      	nop
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <LL_RCC_HSI_IsReady>:
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007f60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f6e:	d101      	bne.n	8007f74 <LL_RCC_HSI_IsReady+0x18>
 8007f70:	2301      	movs	r3, #1
 8007f72:	e000      	b.n	8007f76 <LL_RCC_HSI_IsReady+0x1a>
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f8c:	685b      	ldr	r3, [r3, #4]
 8007f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	061b      	lsls	r3, r3, #24
 8007f96:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	604b      	str	r3, [r1, #4]
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <LL_RCC_HSI48_Enable>:
{
 8007faa:	b480      	push	{r7}
 8007fac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007fae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fba:	f043 0301 	orr.w	r3, r3, #1
 8007fbe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007fc2:	bf00      	nop
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <LL_RCC_HSI48_Disable>:
{
 8007fcc:	b480      	push	{r7}
 8007fce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007fd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007fd8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fdc:	f023 0301 	bic.w	r3, r3, #1
 8007fe0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <LL_RCC_HSI48_IsReady>:
{
 8007fee:	b480      	push	{r7}
 8007ff0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8007ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ff6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d101      	bne.n	8008006 <LL_RCC_HSI48_IsReady+0x18>
 8008002:	2301      	movs	r3, #1
 8008004:	e000      	b.n	8008008 <LL_RCC_HSI48_IsReady+0x1a>
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <LL_RCC_LSE_Enable>:
{
 8008012:	b480      	push	{r7}
 8008014:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008016:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800801a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800801e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800802a:	bf00      	nop
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <LL_RCC_LSE_Disable>:
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008044:	f023 0301 	bic.w	r3, r3, #1
 8008048:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800804c:	bf00      	nop
 800804e:	46bd      	mov	sp, r7
 8008050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008054:	4770      	bx	lr

08008056 <LL_RCC_LSE_EnableBypass>:
{
 8008056:	b480      	push	{r7}
 8008058:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800805a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800805e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008062:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008066:	f043 0304 	orr.w	r3, r3, #4
 800806a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800806e:	bf00      	nop
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <LL_RCC_LSE_DisableBypass>:
{
 8008078:	b480      	push	{r7}
 800807a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800807c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008084:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008088:	f023 0304 	bic.w	r3, r3, #4
 800808c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008090:	bf00      	nop
 8008092:	46bd      	mov	sp, r7
 8008094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008098:	4770      	bx	lr

0800809a <LL_RCC_LSE_IsReady>:
{
 800809a:	b480      	push	{r7}
 800809c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800809e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b02      	cmp	r3, #2
 80080ac:	d101      	bne.n	80080b2 <LL_RCC_LSE_IsReady+0x18>
 80080ae:	2301      	movs	r3, #1
 80080b0:	e000      	b.n	80080b4 <LL_RCC_LSE_IsReady+0x1a>
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr

080080be <LL_RCC_LSI1_Enable>:
{
 80080be:	b480      	push	{r7}
 80080c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80080c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080ce:	f043 0301 	orr.w	r3, r3, #1
 80080d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80080d6:	bf00      	nop
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <LL_RCC_LSI1_Disable>:
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80080e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80080ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080f0:	f023 0301 	bic.w	r3, r3, #1
 80080f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80080f8:	bf00      	nop
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <LL_RCC_LSI1_IsReady>:
{
 8008102:	b480      	push	{r7}
 8008104:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8008106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800810a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b02      	cmp	r3, #2
 8008114:	d101      	bne.n	800811a <LL_RCC_LSI1_IsReady+0x18>
 8008116:	2301      	movs	r3, #1
 8008118:	e000      	b.n	800811c <LL_RCC_LSI1_IsReady+0x1a>
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <LL_RCC_LSI2_Enable>:
{
 8008126:	b480      	push	{r7}
 8008128:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800812a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800812e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008132:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008136:	f043 0304 	orr.w	r3, r3, #4
 800813a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800813e:	bf00      	nop
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <LL_RCC_LSI2_Disable>:
{
 8008148:	b480      	push	{r7}
 800814a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800814c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008154:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008158:	f023 0304 	bic.w	r3, r3, #4
 800815c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008160:	bf00      	nop
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr

0800816a <LL_RCC_LSI2_IsReady>:
{
 800816a:	b480      	push	{r7}
 800816c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800816e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008172:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008176:	f003 0308 	and.w	r3, r3, #8
 800817a:	2b08      	cmp	r3, #8
 800817c:	d101      	bne.n	8008182 <LL_RCC_LSI2_IsReady+0x18>
 800817e:	2301      	movs	r3, #1
 8008180:	e000      	b.n	8008184 <LL_RCC_LSI2_IsReady+0x1a>
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr

0800818e <LL_RCC_LSI2_SetTrimming>:
{
 800818e:	b480      	push	{r7}
 8008190:	b083      	sub	sp, #12
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8008196:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800819a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800819e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	021b      	lsls	r3, r3, #8
 80081a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081aa:	4313      	orrs	r3, r2
 80081ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <LL_RCC_MSI_Enable>:
{
 80081bc:	b480      	push	{r7}
 80081be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80081c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081ca:	f043 0301 	orr.w	r3, r3, #1
 80081ce:	6013      	str	r3, [r2, #0]
}
 80081d0:	bf00      	nop
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <LL_RCC_MSI_Disable>:
{
 80081da:	b480      	push	{r7}
 80081dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80081de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80081e8:	f023 0301 	bic.w	r3, r3, #1
 80081ec:	6013      	str	r3, [r2, #0]
}
 80081ee:	bf00      	nop
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <LL_RCC_MSI_IsReady>:
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80081fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b02      	cmp	r3, #2
 8008208:	d101      	bne.n	800820e <LL_RCC_MSI_IsReady+0x16>
 800820a:	2301      	movs	r3, #1
 800820c:	e000      	b.n	8008210 <LL_RCC_MSI_IsReady+0x18>
 800820e:	2300      	movs	r3, #0
}
 8008210:	4618      	mov	r0, r3
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr

0800821a <LL_RCC_MSI_SetRange>:
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008222:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800822c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4313      	orrs	r3, r2
 8008234:	600b      	str	r3, [r1, #0]
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <LL_RCC_MSI_GetRange>:
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8008248:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008252:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2bb0      	cmp	r3, #176	@ 0xb0
 8008258:	d901      	bls.n	800825e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800825a:	23b0      	movs	r3, #176	@ 0xb0
 800825c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800825e:	687b      	ldr	r3, [r7, #4]
}
 8008260:	4618      	mov	r0, r3
 8008262:	370c      	adds	r7, #12
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <LL_RCC_MSI_SetCalibTrimming>:
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8008274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008278:	685b      	ldr	r3, [r3, #4]
 800827a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008286:	4313      	orrs	r3, r2
 8008288:	604b      	str	r3, [r1, #4]
}
 800828a:	bf00      	nop
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <LL_RCC_SetSysClkSource>:
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800829e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f023 0203 	bic.w	r2, r3, #3
 80082a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	608b      	str	r3, [r1, #8]
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr

080082be <LL_RCC_GetSysClkSource>:
{
 80082be:	b480      	push	{r7}
 80082c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80082c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f003 030c 	and.w	r3, r3, #12
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <LL_RCC_SetAHBPrescaler>:
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80082de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80082e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	608b      	str	r3, [r1, #8]
}
 80082f2:	bf00      	nop
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <LL_C2_RCC_SetAHBPrescaler>:
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8008306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800830a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800830e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008312:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4313      	orrs	r3, r2
 800831a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <LL_RCC_SetAHB4Prescaler>:
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008336:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800833a:	f023 020f 	bic.w	r2, r3, #15
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	091b      	lsrs	r3, r3, #4
 8008342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008346:	4313      	orrs	r3, r2
 8008348:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <LL_RCC_SetAPB1Prescaler>:
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008364:	689b      	ldr	r3, [r3, #8]
 8008366:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800836a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4313      	orrs	r3, r2
 8008372:	608b      	str	r3, [r1, #8]
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <LL_RCC_SetAPB2Prescaler>:
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8008388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4313      	orrs	r3, r2
 800839a:	608b      	str	r3, [r1, #8]
}
 800839c:	bf00      	nop
 800839e:	370c      	adds	r7, #12
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <LL_RCC_GetAHBPrescaler>:
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80083ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <LL_RCC_GetAHB4Prescaler>:
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80083c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80083cc:	011b      	lsls	r3, r3, #4
 80083ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <LL_RCC_PLL_Enable>:
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80083e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ee:	6013      	str	r3, [r2, #0]
}
 80083f0:	bf00      	nop
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr

080083fa <LL_RCC_PLL_Disable>:
{
 80083fa:	b480      	push	{r7}
 80083fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80083fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008408:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800840c:	6013      	str	r3, [r2, #0]
}
 800840e:	bf00      	nop
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <LL_RCC_PLL_IsReady>:
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800841c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008426:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800842a:	d101      	bne.n	8008430 <LL_RCC_PLL_IsReady+0x18>
 800842c:	2301      	movs	r3, #1
 800842e:	e000      	b.n	8008432 <LL_RCC_PLL_IsReady+0x1a>
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <LL_RCC_PLL_GetN>:
{
 800843c:	b480      	push	{r7}
 800843e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008440:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	0a1b      	lsrs	r3, r3, #8
 8008448:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800844c:	4618      	mov	r0, r3
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <LL_RCC_PLL_GetR>:
{
 8008456:	b480      	push	{r7}
 8008458:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800845a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800845e:	68db      	ldr	r3, [r3, #12]
 8008460:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8008464:	4618      	mov	r0, r3
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <LL_RCC_PLL_GetDivider>:
{
 800846e:	b480      	push	{r7}
 8008470:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008472:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800847c:	4618      	mov	r0, r3
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <LL_RCC_PLL_GetMainSource>:
{
 8008486:	b480      	push	{r7}
 8008488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800848a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	f003 0303 	and.w	r3, r3, #3
}
 8008494:	4618      	mov	r0, r3
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <LL_RCC_IsActiveFlag_HPRE>:
{
 800849e:	b480      	push	{r7}
 80084a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80084a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b0:	d101      	bne.n	80084b6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80084c2:	b480      	push	{r7}
 80084c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80084c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80084ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80084d6:	d101      	bne.n	80084dc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80084d8:	2301      	movs	r3, #1
 80084da:	e000      	b.n	80084de <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80084ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80084f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80084f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084fc:	d101      	bne.n	8008502 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800850e:	b480      	push	{r7}
 8008510:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800851c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008520:	d101      	bne.n	8008526 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008522:	2301      	movs	r3, #1
 8008524:	e000      	b.n	8008528 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008526:	2300      	movs	r3, #0
}
 8008528:	4618      	mov	r0, r3
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr

08008532 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8008532:	b480      	push	{r7}
 8008534:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008536:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008540:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008544:	d101      	bne.n	800854a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008546:	2301      	movs	r3, #1
 8008548:	e000      	b.n	800854c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
	...

08008558 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008558:	b590      	push	{r4, r7, lr}
 800855a:	b08d      	sub	sp, #52	@ 0x34
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d101      	bne.n	800856a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e363      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f003 0320 	and.w	r3, r3, #32
 8008572:	2b00      	cmp	r3, #0
 8008574:	f000 808d 	beq.w	8008692 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008578:	f7ff fea1 	bl	80082be <LL_RCC_GetSysClkSource>
 800857c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800857e:	f7ff ff82 	bl	8008486 <LL_RCC_PLL_GetMainSource>
 8008582:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008586:	2b00      	cmp	r3, #0
 8008588:	d005      	beq.n	8008596 <HAL_RCC_OscConfig+0x3e>
 800858a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858c:	2b0c      	cmp	r3, #12
 800858e:	d147      	bne.n	8008620 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008592:	2b01      	cmp	r3, #1
 8008594:	d144      	bne.n	8008620 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69db      	ldr	r3, [r3, #28]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d101      	bne.n	80085a2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	e347      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80085a6:	f7ff fe4c 	bl	8008242 <LL_RCC_MSI_GetRange>
 80085aa:	4603      	mov	r3, r0
 80085ac:	429c      	cmp	r4, r3
 80085ae:	d914      	bls.n	80085da <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 fd03 	bl	8008fc0 <RCC_SetFlashLatencyFromMSIRange>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d001      	beq.n	80085c4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e336      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff fe26 	bl	800821a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7ff fe4a 	bl	800826c <LL_RCC_MSI_SetCalibTrimming>
 80085d8:	e013      	b.n	8008602 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085de:	4618      	mov	r0, r3
 80085e0:	f7ff fe1b 	bl	800821a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6a1b      	ldr	r3, [r3, #32]
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7ff fe3f 	bl	800826c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fce4 	bl	8008fc0 <RCC_SetFlashLatencyFromMSIRange>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e317      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008602:	f000 fcc9 	bl	8008f98 <HAL_RCC_GetHCLKFreq>
 8008606:	4603      	mov	r3, r0
 8008608:	4aa4      	ldr	r2, [pc, #656]	@ (800889c <HAL_RCC_OscConfig+0x344>)
 800860a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800860c:	4ba4      	ldr	r3, [pc, #656]	@ (80088a0 <HAL_RCC_OscConfig+0x348>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4618      	mov	r0, r3
 8008612:	f7fc fbed 	bl	8004df0 <HAL_InitTick>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d039      	beq.n	8008690 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	e308      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01e      	beq.n	8008666 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008628:	f7ff fdc8 	bl	80081bc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800862c:	f7fc fc2e 	bl	8004e8c <HAL_GetTick>
 8008630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008632:	e008      	b.n	8008646 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008634:	f7fc fc2a 	bl	8004e8c <HAL_GetTick>
 8008638:	4602      	mov	r2, r0
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	2b02      	cmp	r3, #2
 8008640:	d901      	bls.n	8008646 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e2f5      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008646:	f7ff fdd7 	bl	80081f8 <LL_RCC_MSI_IsReady>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0f1      	beq.n	8008634 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008654:	4618      	mov	r0, r3
 8008656:	f7ff fde0 	bl	800821a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fe04 	bl	800826c <LL_RCC_MSI_SetCalibTrimming>
 8008664:	e015      	b.n	8008692 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008666:	f7ff fdb8 	bl	80081da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800866a:	f7fc fc0f 	bl	8004e8c <HAL_GetTick>
 800866e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008670:	e008      	b.n	8008684 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008672:	f7fc fc0b 	bl	8004e8c <HAL_GetTick>
 8008676:	4602      	mov	r2, r0
 8008678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	2b02      	cmp	r3, #2
 800867e:	d901      	bls.n	8008684 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e2d6      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008684:	f7ff fdb8 	bl	80081f8 <LL_RCC_MSI_IsReady>
 8008688:	4603      	mov	r3, r0
 800868a:	2b00      	cmp	r3, #0
 800868c:	d1f1      	bne.n	8008672 <HAL_RCC_OscConfig+0x11a>
 800868e:	e000      	b.n	8008692 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008690:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0301 	and.w	r3, r3, #1
 800869a:	2b00      	cmp	r3, #0
 800869c:	d047      	beq.n	800872e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800869e:	f7ff fe0e 	bl	80082be <LL_RCC_GetSysClkSource>
 80086a2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80086a4:	f7ff feef 	bl	8008486 <LL_RCC_PLL_GetMainSource>
 80086a8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	2b08      	cmp	r3, #8
 80086ae:	d005      	beq.n	80086bc <HAL_RCC_OscConfig+0x164>
 80086b0:	6a3b      	ldr	r3, [r7, #32]
 80086b2:	2b0c      	cmp	r3, #12
 80086b4:	d108      	bne.n	80086c8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80086b6:	69fb      	ldr	r3, [r7, #28]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d105      	bne.n	80086c8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d134      	bne.n	800872e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e2b4      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80086d0:	d102      	bne.n	80086d8 <HAL_RCC_OscConfig+0x180>
 80086d2:	f7ff fbf5 	bl	8007ec0 <LL_RCC_HSE_Enable>
 80086d6:	e001      	b.n	80086dc <HAL_RCC_OscConfig+0x184>
 80086d8:	f7ff fc01 	bl	8007ede <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d012      	beq.n	800870a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e4:	f7fc fbd2 	bl	8004e8c <HAL_GetTick>
 80086e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80086ea:	e008      	b.n	80086fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80086ec:	f7fc fbce 	bl	8004e8c <HAL_GetTick>
 80086f0:	4602      	mov	r2, r0
 80086f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	2b64      	cmp	r3, #100	@ 0x64
 80086f8:	d901      	bls.n	80086fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e299      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80086fe:	f7ff fbfd 	bl	8007efc <LL_RCC_HSE_IsReady>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0f1      	beq.n	80086ec <HAL_RCC_OscConfig+0x194>
 8008708:	e011      	b.n	800872e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870a:	f7fc fbbf 	bl	8004e8c <HAL_GetTick>
 800870e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008710:	e008      	b.n	8008724 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008712:	f7fc fbbb 	bl	8004e8c <HAL_GetTick>
 8008716:	4602      	mov	r2, r0
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	1ad3      	subs	r3, r2, r3
 800871c:	2b64      	cmp	r3, #100	@ 0x64
 800871e:	d901      	bls.n	8008724 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008720:	2303      	movs	r3, #3
 8008722:	e286      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008724:	f7ff fbea 	bl	8007efc <LL_RCC_HSE_IsReady>
 8008728:	4603      	mov	r3, r0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d1f1      	bne.n	8008712 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0302 	and.w	r3, r3, #2
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04c      	beq.n	80087d4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800873a:	f7ff fdc0 	bl	80082be <LL_RCC_GetSysClkSource>
 800873e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008740:	f7ff fea1 	bl	8008486 <LL_RCC_PLL_GetMainSource>
 8008744:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b04      	cmp	r3, #4
 800874a:	d005      	beq.n	8008758 <HAL_RCC_OscConfig+0x200>
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	2b0c      	cmp	r3, #12
 8008750:	d10e      	bne.n	8008770 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d10b      	bne.n	8008770 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68db      	ldr	r3, [r3, #12]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d101      	bne.n	8008764 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e266      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	4618      	mov	r0, r3
 800876a:	f7ff fc09 	bl	8007f80 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800876e:	e031      	b.n	80087d4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d019      	beq.n	80087ac <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008778:	f7ff fbd2 	bl	8007f20 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800877c:	f7fc fb86 	bl	8004e8c <HAL_GetTick>
 8008780:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008782:	e008      	b.n	8008796 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008784:	f7fc fb82 	bl	8004e8c <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	2b02      	cmp	r3, #2
 8008790:	d901      	bls.n	8008796 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e24d      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008796:	f7ff fbe1 	bl	8007f5c <LL_RCC_HSI_IsReady>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0f1      	beq.n	8008784 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7ff fbeb 	bl	8007f80 <LL_RCC_HSI_SetCalibTrimming>
 80087aa:	e013      	b.n	80087d4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ac:	f7ff fbc7 	bl	8007f3e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b0:	f7fc fb6c 	bl	8004e8c <HAL_GetTick>
 80087b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80087b6:	e008      	b.n	80087ca <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80087b8:	f7fc fb68 	bl	8004e8c <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	2b02      	cmp	r3, #2
 80087c4:	d901      	bls.n	80087ca <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80087c6:	2303      	movs	r3, #3
 80087c8:	e233      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80087ca:	f7ff fbc7 	bl	8007f5c <LL_RCC_HSI_IsReady>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1f1      	bne.n	80087b8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f003 0308 	and.w	r3, r3, #8
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d106      	bne.n	80087ee <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 80a3 	beq.w	8008934 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	695b      	ldr	r3, [r3, #20]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d076      	beq.n	80088e4 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 0310 	and.w	r3, r3, #16
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d046      	beq.n	8008890 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008802:	f7ff fc7e 	bl	8008102 <LL_RCC_LSI1_IsReady>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d113      	bne.n	8008834 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800880c:	f7ff fc57 	bl	80080be <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008810:	f7fc fb3c 	bl	8004e8c <HAL_GetTick>
 8008814:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008816:	e008      	b.n	800882a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008818:	f7fc fb38 	bl	8004e8c <HAL_GetTick>
 800881c:	4602      	mov	r2, r0
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	2b02      	cmp	r3, #2
 8008824:	d901      	bls.n	800882a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e203      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800882a:	f7ff fc6a 	bl	8008102 <LL_RCC_LSI1_IsReady>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d0f1      	beq.n	8008818 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008834:	f7ff fc77 	bl	8008126 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008838:	f7fc fb28 	bl	8004e8c <HAL_GetTick>
 800883c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800883e:	e008      	b.n	8008852 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008840:	f7fc fb24 	bl	8004e8c <HAL_GetTick>
 8008844:	4602      	mov	r2, r0
 8008846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	2b03      	cmp	r3, #3
 800884c:	d901      	bls.n	8008852 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e1ef      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008852:	f7ff fc8a 	bl	800816a <LL_RCC_LSI2_IsReady>
 8008856:	4603      	mov	r3, r0
 8008858:	2b00      	cmp	r3, #0
 800885a:	d0f1      	beq.n	8008840 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	4618      	mov	r0, r3
 8008862:	f7ff fc94 	bl	800818e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008866:	f7ff fc3b 	bl	80080e0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800886a:	f7fc fb0f 	bl	8004e8c <HAL_GetTick>
 800886e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008870:	e008      	b.n	8008884 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008872:	f7fc fb0b 	bl	8004e8c <HAL_GetTick>
 8008876:	4602      	mov	r2, r0
 8008878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887a:	1ad3      	subs	r3, r2, r3
 800887c:	2b02      	cmp	r3, #2
 800887e:	d901      	bls.n	8008884 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e1d6      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008884:	f7ff fc3d 	bl	8008102 <LL_RCC_LSI1_IsReady>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1f1      	bne.n	8008872 <HAL_RCC_OscConfig+0x31a>
 800888e:	e051      	b.n	8008934 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008890:	f7ff fc15 	bl	80080be <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008894:	f7fc fafa 	bl	8004e8c <HAL_GetTick>
 8008898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800889a:	e00c      	b.n	80088b6 <HAL_RCC_OscConfig+0x35e>
 800889c:	2000000c 	.word	0x2000000c
 80088a0:	20000010 	.word	0x20000010
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80088a4:	f7fc faf2 	bl	8004e8c <HAL_GetTick>
 80088a8:	4602      	mov	r2, r0
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e1bd      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80088b6:	f7ff fc24 	bl	8008102 <LL_RCC_LSI1_IsReady>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0f1      	beq.n	80088a4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80088c0:	f7ff fc42 	bl	8008148 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80088c4:	e008      	b.n	80088d8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80088c6:	f7fc fae1 	bl	8004e8c <HAL_GetTick>
 80088ca:	4602      	mov	r2, r0
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	1ad3      	subs	r3, r2, r3
 80088d0:	2b03      	cmp	r3, #3
 80088d2:	d901      	bls.n	80088d8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80088d4:	2303      	movs	r3, #3
 80088d6:	e1ac      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80088d8:	f7ff fc47 	bl	800816a <LL_RCC_LSI2_IsReady>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d1f1      	bne.n	80088c6 <HAL_RCC_OscConfig+0x36e>
 80088e2:	e027      	b.n	8008934 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80088e4:	f7ff fc30 	bl	8008148 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088e8:	f7fc fad0 	bl	8004e8c <HAL_GetTick>
 80088ec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80088ee:	e008      	b.n	8008902 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80088f0:	f7fc facc 	bl	8004e8c <HAL_GetTick>
 80088f4:	4602      	mov	r2, r0
 80088f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d901      	bls.n	8008902 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e197      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008902:	f7ff fc32 	bl	800816a <LL_RCC_LSI2_IsReady>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1f1      	bne.n	80088f0 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800890c:	f7ff fbe8 	bl	80080e0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008910:	f7fc fabc 	bl	8004e8c <HAL_GetTick>
 8008914:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008916:	e008      	b.n	800892a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008918:	f7fc fab8 	bl	8004e8c <HAL_GetTick>
 800891c:	4602      	mov	r2, r0
 800891e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	2b02      	cmp	r3, #2
 8008924:	d901      	bls.n	800892a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e183      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800892a:	f7ff fbea 	bl	8008102 <LL_RCC_LSI1_IsReady>
 800892e:	4603      	mov	r3, r0
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1f1      	bne.n	8008918 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f003 0304 	and.w	r3, r3, #4
 800893c:	2b00      	cmp	r3, #0
 800893e:	d05b      	beq.n	80089f8 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008940:	4ba7      	ldr	r3, [pc, #668]	@ (8008be0 <HAL_RCC_OscConfig+0x688>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008948:	2b00      	cmp	r3, #0
 800894a:	d114      	bne.n	8008976 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800894c:	f7ff fa78 	bl	8007e40 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008950:	f7fc fa9c 	bl	8004e8c <HAL_GetTick>
 8008954:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008956:	e008      	b.n	800896a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008958:	f7fc fa98 	bl	8004e8c <HAL_GetTick>
 800895c:	4602      	mov	r2, r0
 800895e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d901      	bls.n	800896a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008966:	2303      	movs	r3, #3
 8008968:	e163      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800896a:	4b9d      	ldr	r3, [pc, #628]	@ (8008be0 <HAL_RCC_OscConfig+0x688>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008972:	2b00      	cmp	r3, #0
 8008974:	d0f0      	beq.n	8008958 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d102      	bne.n	8008984 <HAL_RCC_OscConfig+0x42c>
 800897e:	f7ff fb48 	bl	8008012 <LL_RCC_LSE_Enable>
 8008982:	e00c      	b.n	800899e <HAL_RCC_OscConfig+0x446>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	2b05      	cmp	r3, #5
 800898a:	d104      	bne.n	8008996 <HAL_RCC_OscConfig+0x43e>
 800898c:	f7ff fb63 	bl	8008056 <LL_RCC_LSE_EnableBypass>
 8008990:	f7ff fb3f 	bl	8008012 <LL_RCC_LSE_Enable>
 8008994:	e003      	b.n	800899e <HAL_RCC_OscConfig+0x446>
 8008996:	f7ff fb4d 	bl	8008034 <LL_RCC_LSE_Disable>
 800899a:	f7ff fb6d 	bl	8008078 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d014      	beq.n	80089d0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089a6:	f7fc fa71 	bl	8004e8c <HAL_GetTick>
 80089aa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80089ac:	e00a      	b.n	80089c4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ae:	f7fc fa6d 	bl	8004e8c <HAL_GetTick>
 80089b2:	4602      	mov	r2, r0
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	1ad3      	subs	r3, r2, r3
 80089b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089bc:	4293      	cmp	r3, r2
 80089be:	d901      	bls.n	80089c4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e136      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80089c4:	f7ff fb69 	bl	800809a <LL_RCC_LSE_IsReady>
 80089c8:	4603      	mov	r3, r0
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d0ef      	beq.n	80089ae <HAL_RCC_OscConfig+0x456>
 80089ce:	e013      	b.n	80089f8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80089d0:	f7fc fa5c 	bl	8004e8c <HAL_GetTick>
 80089d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80089d6:	e00a      	b.n	80089ee <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089d8:	f7fc fa58 	bl	8004e8c <HAL_GetTick>
 80089dc:	4602      	mov	r2, r0
 80089de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e0:	1ad3      	subs	r3, r2, r3
 80089e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d901      	bls.n	80089ee <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80089ea:	2303      	movs	r3, #3
 80089ec:	e121      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80089ee:	f7ff fb54 	bl	800809a <LL_RCC_LSE_IsReady>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1ef      	bne.n	80089d8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d02c      	beq.n	8008a5e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d014      	beq.n	8008a36 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008a0c:	f7ff facd 	bl	8007faa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a10:	f7fc fa3c 	bl	8004e8c <HAL_GetTick>
 8008a14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008a16:	e008      	b.n	8008a2a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a18:	f7fc fa38 	bl	8004e8c <HAL_GetTick>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d901      	bls.n	8008a2a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8008a26:	2303      	movs	r3, #3
 8008a28:	e103      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008a2a:	f7ff fae0 	bl	8007fee <LL_RCC_HSI48_IsReady>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0f1      	beq.n	8008a18 <HAL_RCC_OscConfig+0x4c0>
 8008a34:	e013      	b.n	8008a5e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008a36:	f7ff fac9 	bl	8007fcc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3a:	f7fc fa27 	bl	8004e8c <HAL_GetTick>
 8008a3e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008a40:	e008      	b.n	8008a54 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a42:	f7fc fa23 	bl	8004e8c <HAL_GetTick>
 8008a46:	4602      	mov	r2, r0
 8008a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4a:	1ad3      	subs	r3, r2, r3
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d901      	bls.n	8008a54 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e0ee      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008a54:	f7ff facb 	bl	8007fee <LL_RCC_HSI48_IsReady>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f1      	bne.n	8008a42 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f000 80e4 	beq.w	8008c30 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a68:	f7ff fc29 	bl	80082be <LL_RCC_GetSysClkSource>
 8008a6c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	f040 80b4 	bne.w	8008be8 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 0203 	and.w	r2, r3, #3
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d123      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d11c      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	0a1b      	lsrs	r3, r3, #8
 8008aa0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d114      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008ab6:	429a      	cmp	r2, r3
 8008ab8:	d10d      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d106      	bne.n	8008ad6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d05d      	beq.n	8008b92 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	2b0c      	cmp	r3, #12
 8008ada:	d058      	beq.n	8008b8e <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008adc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e0a1      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008aee:	f7ff fc84 	bl	80083fa <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008af2:	f7fc f9cb 	bl	8004e8c <HAL_GetTick>
 8008af6:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afa:	f7fc f9c7 	bl	8004e8c <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e092      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1ef      	bne.n	8008afa <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b1e:	68da      	ldr	r2, [r3, #12]
 8008b20:	4b30      	ldr	r3, [pc, #192]	@ (8008be4 <HAL_RCC_OscConfig+0x68c>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008b2c:	4311      	orrs	r1, r2
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008b32:	0212      	lsls	r2, r2, #8
 8008b34:	4311      	orrs	r1, r2
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008b3a:	4311      	orrs	r1, r2
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008b40:	4311      	orrs	r1, r2
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008b46:	430a      	orrs	r2, r1
 8008b48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008b50:	f7ff fc44 	bl	80083dc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b64:	f7fc f992 	bl	8004e8c <HAL_GetTick>
 8008b68:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b6a:	e008      	b.n	8008b7e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b6c:	f7fc f98e 	bl	8004e8c <HAL_GetTick>
 8008b70:	4602      	mov	r2, r0
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	1ad3      	subs	r3, r2, r3
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e059      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d0ef      	beq.n	8008b6c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008b8c:	e050      	b.n	8008c30 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e04f      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008b92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d147      	bne.n	8008c30 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008ba0:	f7ff fc1c 	bl	80083dc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008ba4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bb2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008bb4:	f7fc f96a 	bl	8004e8c <HAL_GetTick>
 8008bb8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bba:	e008      	b.n	8008bce <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bbc:	f7fc f966 	bl	8004e8c <HAL_GetTick>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc4:	1ad3      	subs	r3, r2, r3
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d901      	bls.n	8008bce <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e031      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d0ef      	beq.n	8008bbc <HAL_RCC_OscConfig+0x664>
 8008bdc:	e028      	b.n	8008c30 <HAL_RCC_OscConfig+0x6d8>
 8008bde:	bf00      	nop
 8008be0:	58000400 	.word	0x58000400
 8008be4:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	2b0c      	cmp	r3, #12
 8008bec:	d01e      	beq.n	8008c2c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008bee:	f7ff fc04 	bl	80083fa <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bf2:	f7fc f94b 	bl	8004e8c <HAL_GetTick>
 8008bf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008bf8:	e008      	b.n	8008c0c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bfa:	f7fc f947 	bl	8004e8c <HAL_GetTick>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c02:	1ad3      	subs	r3, r2, r3
 8008c04:	2b02      	cmp	r3, #2
 8008c06:	d901      	bls.n	8008c0c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	e012      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008c0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d1ef      	bne.n	8008bfa <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8008c1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c24:	4b05      	ldr	r3, [pc, #20]	@ (8008c3c <HAL_RCC_OscConfig+0x6e4>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	60cb      	str	r3, [r1, #12]
 8008c2a:	e001      	b.n	8008c30 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e000      	b.n	8008c32 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3734      	adds	r7, #52	@ 0x34
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd90      	pop	{r4, r7, pc}
 8008c3a:	bf00      	nop
 8008c3c:	eefefffc 	.word	0xeefefffc

08008c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b084      	sub	sp, #16
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d101      	bne.n	8008c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c50:	2301      	movs	r3, #1
 8008c52:	e12d      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c54:	4b98      	ldr	r3, [pc, #608]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 0307 	and.w	r3, r3, #7
 8008c5c:	683a      	ldr	r2, [r7, #0]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d91b      	bls.n	8008c9a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c62:	4b95      	ldr	r3, [pc, #596]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f023 0207 	bic.w	r2, r3, #7
 8008c6a:	4993      	ldr	r1, [pc, #588]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c72:	f7fc f90b 	bl	8004e8c <HAL_GetTick>
 8008c76:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c78:	e008      	b.n	8008c8c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008c7a:	f7fc f907 	bl	8004e8c <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e111      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c8c:	4b8a      	ldr	r3, [pc, #552]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 0307 	and.w	r3, r3, #7
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d1ef      	bne.n	8008c7a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d016      	beq.n	8008cd4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7ff fb13 	bl	80082d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008cb0:	f7fc f8ec 	bl	8004e8c <HAL_GetTick>
 8008cb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008cb6:	e008      	b.n	8008cca <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008cb8:	f7fc f8e8 	bl	8004e8c <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e0f2      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008cca:	f7ff fbe8 	bl	800849e <LL_RCC_IsActiveFlag_HPRE>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f1      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f003 0320 	and.w	r3, r3, #32
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d016      	beq.n	8008d0e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f7ff fb0a 	bl	80082fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008cea:	f7fc f8cf 	bl	8004e8c <HAL_GetTick>
 8008cee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008cf0:	e008      	b.n	8008d04 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008cf2:	f7fc f8cb 	bl	8004e8c <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	2b02      	cmp	r3, #2
 8008cfe:	d901      	bls.n	8008d04 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008d00:	2303      	movs	r3, #3
 8008d02:	e0d5      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008d04:	f7ff fbdd 	bl	80084c2 <LL_RCC_IsActiveFlag_C2HPRE>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d0f1      	beq.n	8008cf2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d016      	beq.n	8008d48 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fb03 	bl	800832a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d24:	f7fc f8b2 	bl	8004e8c <HAL_GetTick>
 8008d28:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d2c:	f7fc f8ae 	bl	8004e8c <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e0b8      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008d3e:	f7ff fbd3 	bl	80084e8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d0f1      	beq.n	8008d2c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 0304 	and.w	r3, r3, #4
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d016      	beq.n	8008d82 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f7ff fafd 	bl	8008358 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d5e:	f7fc f895 	bl	8004e8c <HAL_GetTick>
 8008d62:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d64:	e008      	b.n	8008d78 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008d66:	f7fc f891 	bl	8004e8c <HAL_GetTick>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d901      	bls.n	8008d78 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008d74:	2303      	movs	r3, #3
 8008d76:	e09b      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008d78:	f7ff fbc9 	bl	800850e <LL_RCC_IsActiveFlag_PPRE1>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f1      	beq.n	8008d66 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f003 0308 	and.w	r3, r3, #8
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d017      	beq.n	8008dbe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	00db      	lsls	r3, r3, #3
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff faf3 	bl	8008380 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008d9a:	f7fc f877 	bl	8004e8c <HAL_GetTick>
 8008d9e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008da0:	e008      	b.n	8008db4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008da2:	f7fc f873 	bl	8004e8c <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	2b02      	cmp	r3, #2
 8008dae:	d901      	bls.n	8008db4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008db0:	2303      	movs	r3, #3
 8008db2:	e07d      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008db4:	f7ff fbbd 	bl	8008532 <LL_RCC_IsActiveFlag_PPRE2>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d0f1      	beq.n	8008da2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0301 	and.w	r3, r3, #1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d043      	beq.n	8008e52 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	685b      	ldr	r3, [r3, #4]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d106      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8008dd2:	f7ff f893 	bl	8007efc <LL_RCC_HSE_IsReady>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d11e      	bne.n	8008e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e067      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	2b03      	cmp	r3, #3
 8008de6:	d106      	bne.n	8008df6 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008de8:	f7ff fb16 	bl	8008418 <LL_RCC_PLL_IsReady>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d113      	bne.n	8008e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e05c      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d106      	bne.n	8008e0c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008dfe:	f7ff f9fb 	bl	80081f8 <LL_RCC_MSI_IsReady>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d108      	bne.n	8008e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e051      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008e0c:	f7ff f8a6 	bl	8007f5c <LL_RCC_HSI_IsReady>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d101      	bne.n	8008e1a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e04a      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7ff fa39 	bl	8008296 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e24:	f7fc f832 	bl	8004e8c <HAL_GetTick>
 8008e28:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e2a:	e00a      	b.n	8008e42 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008e2c:	f7fc f82e 	bl	8004e8c <HAL_GetTick>
 8008e30:	4602      	mov	r2, r0
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d901      	bls.n	8008e42 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	e036      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008e42:	f7ff fa3c 	bl	80082be <LL_RCC_GetSysClkSource>
 8008e46:	4602      	mov	r2, r0
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d1ec      	bne.n	8008e2c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008e52:	4b19      	ldr	r3, [pc, #100]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d21b      	bcs.n	8008e98 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e60:	4b15      	ldr	r3, [pc, #84]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f023 0207 	bic.w	r2, r3, #7
 8008e68:	4913      	ldr	r1, [pc, #76]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e70:	f7fc f80c 	bl	8004e8c <HAL_GetTick>
 8008e74:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008e78:	f7fc f808 	bl	8004e8c <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e012      	b.n	8008eb0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8008eb8 <HAL_RCC_ClockConfig+0x278>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0307 	and.w	r3, r3, #7
 8008e92:	683a      	ldr	r2, [r7, #0]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d1ef      	bne.n	8008e78 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008e98:	f000 f87e 	bl	8008f98 <HAL_RCC_GetHCLKFreq>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	4a07      	ldr	r2, [pc, #28]	@ (8008ebc <HAL_RCC_ClockConfig+0x27c>)
 8008ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8008ea2:	f7fb ffff 	bl	8004ea4 <HAL_GetTickPrio>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fb ffa1 	bl	8004df0 <HAL_InitTick>
 8008eae:	4603      	mov	r3, r0
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	58004000 	.word	0x58004000
 8008ebc:	2000000c 	.word	0x2000000c

08008ec0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ec0:	b590      	push	{r4, r7, lr}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ec6:	f7ff f9fa 	bl	80082be <LL_RCC_GetSysClkSource>
 8008eca:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d10a      	bne.n	8008ee8 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008ed2:	f7ff f9b6 	bl	8008242 <LL_RCC_MSI_GetRange>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	091b      	lsrs	r3, r3, #4
 8008eda:	f003 030f 	and.w	r3, r3, #15
 8008ede:	4a2b      	ldr	r2, [pc, #172]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ee4:	60fb      	str	r3, [r7, #12]
 8008ee6:	e04b      	b.n	8008f80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d102      	bne.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008eee:	4b28      	ldr	r3, [pc, #160]	@ (8008f90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	e045      	b.n	8008f80 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2b08      	cmp	r3, #8
 8008ef8:	d10a      	bne.n	8008f10 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008efa:	f7fe ffcf 	bl	8007e9c <LL_RCC_HSE_IsEnabledDiv2>
 8008efe:	4603      	mov	r3, r0
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d102      	bne.n	8008f0a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008f04:	4b22      	ldr	r3, [pc, #136]	@ (8008f90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	e03a      	b.n	8008f80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008f0a:	4b22      	ldr	r3, [pc, #136]	@ (8008f94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	e037      	b.n	8008f80 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008f10:	f7ff fab9 	bl	8008486 <LL_RCC_PLL_GetMainSource>
 8008f14:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d003      	beq.n	8008f24 <HAL_RCC_GetSysClockFreq+0x64>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	2b03      	cmp	r3, #3
 8008f20:	d003      	beq.n	8008f2a <HAL_RCC_GetSysClockFreq+0x6a>
 8008f22:	e00d      	b.n	8008f40 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008f24:	4b1a      	ldr	r3, [pc, #104]	@ (8008f90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f26:	60bb      	str	r3, [r7, #8]
        break;
 8008f28:	e015      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008f2a:	f7fe ffb7 	bl	8007e9c <LL_RCC_HSE_IsEnabledDiv2>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d102      	bne.n	8008f3a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008f34:	4b16      	ldr	r3, [pc, #88]	@ (8008f90 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008f36:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008f38:	e00d      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008f3a:	4b16      	ldr	r3, [pc, #88]	@ (8008f94 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008f3c:	60bb      	str	r3, [r7, #8]
        break;
 8008f3e:	e00a      	b.n	8008f56 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008f40:	f7ff f97f 	bl	8008242 <LL_RCC_MSI_GetRange>
 8008f44:	4603      	mov	r3, r0
 8008f46:	091b      	lsrs	r3, r3, #4
 8008f48:	f003 030f 	and.w	r3, r3, #15
 8008f4c:	4a0f      	ldr	r2, [pc, #60]	@ (8008f8c <HAL_RCC_GetSysClockFreq+0xcc>)
 8008f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f52:	60bb      	str	r3, [r7, #8]
        break;
 8008f54:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008f56:	f7ff fa71 	bl	800843c <LL_RCC_PLL_GetN>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	fb03 f402 	mul.w	r4, r3, r2
 8008f62:	f7ff fa84 	bl	800846e <LL_RCC_PLL_GetDivider>
 8008f66:	4603      	mov	r3, r0
 8008f68:	091b      	lsrs	r3, r3, #4
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	fbb4 f4f3 	udiv	r4, r4, r3
 8008f70:	f7ff fa71 	bl	8008456 <LL_RCC_PLL_GetR>
 8008f74:	4603      	mov	r3, r0
 8008f76:	0f5b      	lsrs	r3, r3, #29
 8008f78:	3301      	adds	r3, #1
 8008f7a:	fbb4 f3f3 	udiv	r3, r4, r3
 8008f7e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008f80:	68fb      	ldr	r3, [r7, #12]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd90      	pop	{r4, r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	0801a1dc 	.word	0x0801a1dc
 8008f90:	00f42400 	.word	0x00f42400
 8008f94:	01e84800 	.word	0x01e84800

08008f98 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f98:	b598      	push	{r3, r4, r7, lr}
 8008f9a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008f9c:	f7ff ff90 	bl	8008ec0 <HAL_RCC_GetSysClockFreq>
 8008fa0:	4604      	mov	r4, r0
 8008fa2:	f7ff fa01 	bl	80083a8 <LL_RCC_GetAHBPrescaler>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	091b      	lsrs	r3, r3, #4
 8008faa:	f003 030f 	and.w	r3, r3, #15
 8008fae:	4a03      	ldr	r2, [pc, #12]	@ (8008fbc <HAL_RCC_GetHCLKFreq+0x24>)
 8008fb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fb4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	bd98      	pop	{r3, r4, r7, pc}
 8008fbc:	0801a19c 	.word	0x0801a19c

08008fc0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008fc0:	b590      	push	{r4, r7, lr}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2bb0      	cmp	r3, #176	@ 0xb0
 8008fcc:	d903      	bls.n	8008fd6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008fce:	4b15      	ldr	r3, [pc, #84]	@ (8009024 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd2:	60fb      	str	r3, [r7, #12]
 8008fd4:	e007      	b.n	8008fe6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	091b      	lsrs	r3, r3, #4
 8008fda:	f003 030f 	and.w	r3, r3, #15
 8008fde:	4a11      	ldr	r2, [pc, #68]	@ (8009024 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008fe4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008fe6:	f7ff f9eb 	bl	80083c0 <LL_RCC_GetAHB4Prescaler>
 8008fea:	4603      	mov	r3, r0
 8008fec:	091b      	lsrs	r3, r3, #4
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	4a0d      	ldr	r2, [pc, #52]	@ (8009028 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ffe:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	4a0a      	ldr	r2, [pc, #40]	@ (800902c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8009004:	fba2 2303 	umull	r2, r3, r2, r3
 8009008:	0c9c      	lsrs	r4, r3, #18
 800900a:	f7fe ff29 	bl	8007e60 <HAL_PWREx_GetVoltageRange>
 800900e:	4603      	mov	r3, r0
 8009010:	4619      	mov	r1, r3
 8009012:	4620      	mov	r0, r4
 8009014:	f000 f80c 	bl	8009030 <RCC_SetFlashLatency>
 8009018:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	bd90      	pop	{r4, r7, pc}
 8009022:	bf00      	nop
 8009024:	0801a1dc 	.word	0x0801a1dc
 8009028:	0801a19c 	.word	0x0801a19c
 800902c:	431bde83 	.word	0x431bde83

08009030 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b093      	sub	sp, #76	@ 0x4c
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800903a:	4b37      	ldr	r3, [pc, #220]	@ (8009118 <RCC_SetFlashLatency+0xe8>)
 800903c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8009040:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009042:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009046:	4a35      	ldr	r2, [pc, #212]	@ (800911c <RCC_SetFlashLatency+0xec>)
 8009048:	f107 031c 	add.w	r3, r7, #28
 800904c:	ca07      	ldmia	r2, {r0, r1, r2}
 800904e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8009052:	4b33      	ldr	r3, [pc, #204]	@ (8009120 <RCC_SetFlashLatency+0xf0>)
 8009054:	f107 040c 	add.w	r4, r7, #12
 8009058:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800905a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800905e:	2300      	movs	r3, #0
 8009060:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009068:	d11a      	bne.n	80090a0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800906a:	2300      	movs	r3, #0
 800906c:	643b      	str	r3, [r7, #64]	@ 0x40
 800906e:	e013      	b.n	8009098 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009070:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	3348      	adds	r3, #72	@ 0x48
 8009076:	443b      	add	r3, r7
 8009078:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	429a      	cmp	r2, r3
 8009080:	d807      	bhi.n	8009092 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	3348      	adds	r3, #72	@ 0x48
 8009088:	443b      	add	r3, r7
 800908a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800908e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8009090:	e020      	b.n	80090d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009092:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009094:	3301      	adds	r3, #1
 8009096:	643b      	str	r3, [r7, #64]	@ 0x40
 8009098:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800909a:	2b03      	cmp	r3, #3
 800909c:	d9e8      	bls.n	8009070 <RCC_SetFlashLatency+0x40>
 800909e:	e019      	b.n	80090d4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80090a0:	2300      	movs	r3, #0
 80090a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090a4:	e013      	b.n	80090ce <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80090a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	3348      	adds	r3, #72	@ 0x48
 80090ac:	443b      	add	r3, r7
 80090ae:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d807      	bhi.n	80090c8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80090b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ba:	009b      	lsls	r3, r3, #2
 80090bc:	3348      	adds	r3, #72	@ 0x48
 80090be:	443b      	add	r3, r7
 80090c0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80090c4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80090c6:	e005      	b.n	80090d4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80090c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ca:	3301      	adds	r3, #1
 80090cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80090ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090d0:	2b02      	cmp	r3, #2
 80090d2:	d9e8      	bls.n	80090a6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80090d4:	4b13      	ldr	r3, [pc, #76]	@ (8009124 <RCC_SetFlashLatency+0xf4>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f023 0207 	bic.w	r2, r3, #7
 80090dc:	4911      	ldr	r1, [pc, #68]	@ (8009124 <RCC_SetFlashLatency+0xf4>)
 80090de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090e0:	4313      	orrs	r3, r2
 80090e2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80090e4:	f7fb fed2 	bl	8004e8c <HAL_GetTick>
 80090e8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80090ea:	e008      	b.n	80090fe <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80090ec:	f7fb fece 	bl	8004e8c <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d901      	bls.n	80090fe <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e007      	b.n	800910e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80090fe:	4b09      	ldr	r3, [pc, #36]	@ (8009124 <RCC_SetFlashLatency+0xf4>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009108:	429a      	cmp	r2, r3
 800910a:	d1ef      	bne.n	80090ec <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800910c:	2300      	movs	r3, #0
}
 800910e:	4618      	mov	r0, r3
 8009110:	374c      	adds	r7, #76	@ 0x4c
 8009112:	46bd      	mov	sp, r7
 8009114:	bd90      	pop	{r4, r7, pc}
 8009116:	bf00      	nop
 8009118:	08018ad4 	.word	0x08018ad4
 800911c:	08018ae4 	.word	0x08018ae4
 8009120:	08018af0 	.word	0x08018af0
 8009124:	58004000 	.word	0x58004000

08009128 <LL_RCC_LSE_IsEnabled>:
{
 8009128:	b480      	push	{r7}
 800912a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800912c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009134:	f003 0301 	and.w	r3, r3, #1
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <LL_RCC_LSE_IsEnabled+0x18>
 800913c:	2301      	movs	r3, #1
 800913e:	e000      	b.n	8009142 <LL_RCC_LSE_IsEnabled+0x1a>
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <LL_RCC_LSE_IsReady>:
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8009150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b02      	cmp	r3, #2
 800915e:	d101      	bne.n	8009164 <LL_RCC_LSE_IsReady+0x18>
 8009160:	2301      	movs	r3, #1
 8009162:	e000      	b.n	8009166 <LL_RCC_LSE_IsReady+0x1a>
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <LL_RCC_SetRFWKPClockSource>:
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800917c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009180:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009184:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	4313      	orrs	r3, r2
 800918c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <LL_RCC_SetSMPSClockSource>:
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80091a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091aa:	f023 0203 	bic.w	r2, r3, #3
 80091ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80091b8:	bf00      	nop
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <LL_RCC_SetSMPSPrescaler>:
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80091cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091d2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80091d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	4313      	orrs	r3, r2
 80091de:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <LL_RCC_SetUSARTClockSource>:
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80091f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091fc:	f023 0203 	bic.w	r2, r3, #3
 8009200:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4313      	orrs	r3, r2
 8009208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <LL_RCC_SetLPUARTClockSource>:
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8009220:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009228:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800922c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4313      	orrs	r3, r2
 8009234:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <LL_RCC_SetI2CClockSource>:
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800924c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009250:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	091b      	lsrs	r3, r3, #4
 8009258:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800925c:	43db      	mvns	r3, r3
 800925e:	401a      	ands	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009268:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800926c:	4313      	orrs	r3, r2
 800926e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009272:	bf00      	nop
 8009274:	370c      	adds	r7, #12
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <LL_RCC_SetLPTIMClockSource>:
{
 800927e:	b480      	push	{r7}
 8009280:	b083      	sub	sp, #12
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009286:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800928a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	0c1b      	lsrs	r3, r3, #16
 8009292:	041b      	lsls	r3, r3, #16
 8009294:	43db      	mvns	r3, r3
 8009296:	401a      	ands	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	041b      	lsls	r3, r3, #16
 800929c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092a0:	4313      	orrs	r3, r2
 80092a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092a6:	bf00      	nop
 80092a8:	370c      	adds	r7, #12
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr

080092b2 <LL_RCC_SetSAIClockSource>:
{
 80092b2:	b480      	push	{r7}
 80092b4:	b083      	sub	sp, #12
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80092ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092c2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80092c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092d2:	bf00      	nop
 80092d4:	370c      	adds	r7, #12
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr

080092de <LL_RCC_SetRNGClockSource>:
{
 80092de:	b480      	push	{r7}
 80092e0:	b083      	sub	sp, #12
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80092e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80092ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092ee:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80092f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80092fe:	bf00      	nop
 8009300:	370c      	adds	r7, #12
 8009302:	46bd      	mov	sp, r7
 8009304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009308:	4770      	bx	lr

0800930a <LL_RCC_SetCLK48ClockSource>:
{
 800930a:	b480      	push	{r7}
 800930c:	b083      	sub	sp, #12
 800930e:	af00      	add	r7, sp, #0
 8009310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8009312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800931a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800931e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4313      	orrs	r3, r2
 8009326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800932a:	bf00      	nop
 800932c:	370c      	adds	r7, #12
 800932e:	46bd      	mov	sp, r7
 8009330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009334:	4770      	bx	lr

08009336 <LL_RCC_SetUSBClockSource>:
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f7ff ffe3 	bl	800930a <LL_RCC_SetCLK48ClockSource>
}
 8009344:	bf00      	nop
 8009346:	3708      	adds	r7, #8
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <LL_RCC_SetADCClockSource>:
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009354:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800935c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009360:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	4313      	orrs	r3, r2
 8009368:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <LL_RCC_SetRTCClockSource>:
{
 8009378:	b480      	push	{r7}
 800937a:	b083      	sub	sp, #12
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009384:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009388:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800938c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	4313      	orrs	r3, r2
 8009394:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <LL_RCC_GetRTCClockSource>:
{
 80093a4:	b480      	push	{r7}
 80093a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80093a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <LL_RCC_ForceBackupDomainReset>:
{
 80093be:	b480      	push	{r7}
 80093c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80093c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80093d6:	bf00      	nop
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <LL_RCC_ReleaseBackupDomainReset>:
{
 80093e0:	b480      	push	{r7}
 80093e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80093e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80093e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80093f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80093f8:	bf00      	nop
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <LL_RCC_PLLSAI1_Enable>:
{
 8009402:	b480      	push	{r7}
 8009404:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009410:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009414:	6013      	str	r3, [r2, #0]
}
 8009416:	bf00      	nop
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <LL_RCC_PLLSAI1_Disable>:
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800942e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009432:	6013      	str	r3, [r2, #0]
}
 8009434:	bf00      	nop
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <LL_RCC_PLLSAI1_IsReady>:
{
 800943e:	b480      	push	{r7}
 8009440:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009442:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800944c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009450:	d101      	bne.n	8009456 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009452:	2301      	movs	r3, #1
 8009454:	e000      	b.n	8009458 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009456:	2300      	movs	r3, #0
}
 8009458:	4618      	mov	r0, r3
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr

08009462 <LL_APB1_GRP1_ForceReset>:
{
 8009462:	b480      	push	{r7}
 8009464:	b083      	sub	sp, #12
 8009466:	af00      	add	r7, sp, #0
 8009468:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800946a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800946e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	4313      	orrs	r3, r2
 8009478:	638b      	str	r3, [r1, #56]	@ 0x38
}
 800947a:	bf00      	nop
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <LL_APB1_GRP1_ReleaseReset>:
{
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800948e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009492:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	43db      	mvns	r3, r3
 8009498:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800949c:	4013      	ands	r3, r2
 800949e:	638b      	str	r3, [r1, #56]	@ 0x38
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 80094b4:	2300      	movs	r3, #0
 80094b6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80094b8:	2300      	movs	r3, #0
 80094ba:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d034      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80094d0:	d021      	beq.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80094d2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80094d6:	d81b      	bhi.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094dc:	d01d      	beq.n	800951a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 80094de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80094e2:	d815      	bhi.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d00b      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80094e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80094ec:	d110      	bne.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80094ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80094f2:	68db      	ldr	r3, [r3, #12]
 80094f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80094f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80094fc:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80094fe:	e00d      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	3304      	adds	r3, #4
 8009504:	4618      	mov	r0, r3
 8009506:	f000 f981 	bl	800980c <RCCEx_PLLSAI1_ConfigNP>
 800950a:	4603      	mov	r3, r0
 800950c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800950e:	e005      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	77fb      	strb	r3, [r7, #31]
        break;
 8009514:	e002      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009516:	bf00      	nop
 8009518:	e000      	b.n	800951c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800951a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951c:	7ffb      	ldrb	r3, [r7, #31]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d105      	bne.n	800952e <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff fec3 	bl	80092b2 <LL_RCC_SetSAIClockSource>
 800952c:	e001      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952e:	7ffb      	ldrb	r3, [r7, #31]
 8009530:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800953a:	2b00      	cmp	r3, #0
 800953c:	d046      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800953e:	f7ff ff31 	bl	80093a4 <LL_RCC_GetRTCClockSource>
 8009542:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009548:	69ba      	ldr	r2, [r7, #24]
 800954a:	429a      	cmp	r2, r3
 800954c:	d03c      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800954e:	f7fe fc77 	bl	8007e40 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d105      	bne.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800955c:	4618      	mov	r0, r3
 800955e:	f7ff ff0b 	bl	8009378 <LL_RCC_SetRTCClockSource>
 8009562:	e02e      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800956c:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800956e:	f7ff ff26 	bl	80093be <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009572:	f7ff ff35 	bl	80093e0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009580:	4313      	orrs	r3, r2
 8009582:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009584:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800958e:	f7ff fdcb 	bl	8009128 <LL_RCC_LSE_IsEnabled>
 8009592:	4603      	mov	r3, r0
 8009594:	2b01      	cmp	r3, #1
 8009596:	d114      	bne.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009598:	f7fb fc78 	bl	8004e8c <HAL_GetTick>
 800959c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800959e:	e00b      	b.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095a0:	f7fb fc74 	bl	8004e8c <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d902      	bls.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80095b2:	2303      	movs	r3, #3
 80095b4:	77fb      	strb	r3, [r7, #31]
              break;
 80095b6:	e004      	b.n	80095c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 80095b8:	f7ff fdc8 	bl	800914c <LL_RCC_LSE_IsReady>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d1ee      	bne.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 80095c2:	7ffb      	ldrb	r3, [r7, #31]
 80095c4:	77bb      	strb	r3, [r7, #30]
 80095c6:	e001      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095c8:	7ffb      	ldrb	r3, [r7, #31]
 80095ca:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f003 0301 	and.w	r3, r3, #1
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d004      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	4618      	mov	r0, r3
 80095de:	f7ff fe05 	bl	80091ec <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d004      	beq.n	80095f8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	69db      	ldr	r3, [r3, #28]
 80095f2:	4618      	mov	r0, r3
 80095f4:	f7ff fe10 	bl	8009218 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f003 0310 	and.w	r3, r3, #16
 8009600:	2b00      	cmp	r3, #0
 8009602:	d004      	beq.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff fe38 	bl	800927e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fe2d 	bl	800927e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0304 	and.w	r3, r3, #4
 800962c:	2b00      	cmp	r3, #0
 800962e:	d004      	beq.n	800963a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a1b      	ldr	r3, [r3, #32]
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff fe05 	bl	8009244 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f003 0308 	and.w	r3, r3, #8
 8009642:	2b00      	cmp	r3, #0
 8009644:	d004      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800964a:	4618      	mov	r0, r3
 800964c:	f7ff fdfa 	bl	8009244 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009658:	2b00      	cmp	r3, #0
 800965a:	d022      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009660:	4618      	mov	r0, r3
 8009662:	f7ff fe68 	bl	8009336 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800966a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800966e:	d107      	bne.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800967a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800967e:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009684:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009688:	d10b      	bne.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	3304      	adds	r3, #4
 800968e:	4618      	mov	r0, r3
 8009690:	f000 f917 	bl	80098c2 <RCCEx_PLLSAI1_ConfigNQ>
 8009694:	4603      	mov	r3, r0
 8009696:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009698:	7ffb      	ldrb	r3, [r7, #31]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800969e:	7ffb      	ldrb	r3, [r7, #31]
 80096a0:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d02b      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096b6:	d008      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096c0:	d003      	beq.n	80096ca <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d105      	bne.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fe05 	bl	80092de <LL_RCC_SetRNGClockSource>
 80096d4:	e00a      	b.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0x240>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	2000      	movs	r0, #0
 80096e2:	f7ff fdfc 	bl	80092de <LL_RCC_SetRNGClockSource>
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f7ff fe0f 	bl	800930a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096f0:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80096f4:	d107      	bne.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80096f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009700:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009704:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800970e:	2b00      	cmp	r3, #0
 8009710:	d022      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009716:	4618      	mov	r0, r3
 8009718:	f7ff fe18 	bl	800934c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009724:	d107      	bne.n	8009736 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009726:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009730:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009734:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800973e:	d10b      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3304      	adds	r3, #4
 8009744:	4618      	mov	r0, r3
 8009746:	f000 f917 	bl	8009978 <RCCEx_PLLSAI1_ConfigNR>
 800974a:	4603      	mov	r3, r0
 800974c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800974e:	7ffb      	ldrb	r3, [r7, #31]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d001      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009754:	7ffb      	ldrb	r3, [r7, #31]
 8009756:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d004      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009768:	4618      	mov	r0, r3
 800976a:	f7ff fd01 	bl	8009170 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff fd20 	bl	80091c4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009788:	4618      	mov	r0, r3
 800978a:	f7ff fd07 	bl	800919c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800978e:	7fbb      	ldrb	r3, [r7, #30]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3720      	adds	r7, #32
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 80097a0:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80097a4:	f7ff fe5d 	bl	8009462 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_CRS_RELEASE_RESET();
 80097a8:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 80097ac:	f7ff fe6b 	bl	8009486 <LL_APB1_GRP1_ReleaseReset>

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	4313      	orrs	r3, r2
 80097c0:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	4313      	orrs	r3, r2
 80097ca:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	041b      	lsls	r3, r3, #16
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	4313      	orrs	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80097d8:	4a0b      	ldr	r2, [pc, #44]	@ (8009808 <HAL_RCCEx_CRSConfig+0x70>)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 80097de:	4b0a      	ldr	r3, [pc, #40]	@ (8009808 <HAL_RCCEx_CRSConfig+0x70>)
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	695b      	ldr	r3, [r3, #20]
 80097ea:	021b      	lsls	r3, r3, #8
 80097ec:	4906      	ldr	r1, [pc, #24]	@ (8009808 <HAL_RCCEx_CRSConfig+0x70>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80097f2:	4b05      	ldr	r3, [pc, #20]	@ (8009808 <HAL_RCCEx_CRSConfig+0x70>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a04      	ldr	r2, [pc, #16]	@ (8009808 <HAL_RCCEx_CRSConfig+0x70>)
 80097f8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80097fc:	6013      	str	r3, [r2, #0]
}
 80097fe:	bf00      	nop
 8009800:	3710      	adds	r7, #16
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
 8009806:	bf00      	nop
 8009808:	40006000 	.word	0x40006000

0800980c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009818:	f7ff fe02 	bl	8009420 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800981c:	f7fb fb36 	bl	8004e8c <HAL_GetTick>
 8009820:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009822:	e009      	b.n	8009838 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009824:	f7fb fb32 	bl	8004e8c <HAL_GetTick>
 8009828:	4602      	mov	r2, r0
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	1ad3      	subs	r3, r2, r3
 800982e:	2b02      	cmp	r3, #2
 8009830:	d902      	bls.n	8009838 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	73fb      	strb	r3, [r7, #15]
      break;
 8009836:	e004      	b.n	8009842 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009838:	f7ff fe01 	bl	800943e <LL_RCC_PLLSAI1_IsReady>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d1f0      	bne.n	8009824 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009842:	7bfb      	ldrb	r3, [r7, #15]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d137      	bne.n	80098b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	021b      	lsls	r3, r3, #8
 8009858:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800985c:	4313      	orrs	r3, r2
 800985e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009872:	4313      	orrs	r3, r2
 8009874:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009876:	f7ff fdc4 	bl	8009402 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800987a:	f7fb fb07 	bl	8004e8c <HAL_GetTick>
 800987e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009880:	e009      	b.n	8009896 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009882:	f7fb fb03 	bl	8004e8c <HAL_GetTick>
 8009886:	4602      	mov	r2, r0
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	1ad3      	subs	r3, r2, r3
 800988c:	2b02      	cmp	r3, #2
 800988e:	d902      	bls.n	8009896 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009890:	2303      	movs	r3, #3
 8009892:	73fb      	strb	r3, [r7, #15]
        break;
 8009894:	e004      	b.n	80098a0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009896:	f7ff fdd2 	bl	800943e <LL_RCC_PLLSAI1_IsReady>
 800989a:	4603      	mov	r3, r0
 800989c:	2b01      	cmp	r3, #1
 800989e:	d1f0      	bne.n	8009882 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 80098a0:	7bfb      	ldrb	r3, [r7, #15]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d108      	bne.n	80098b8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80098a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098aa:	691a      	ldr	r2, [r3, #16]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80098b4:	4313      	orrs	r3, r2
 80098b6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80098b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b084      	sub	sp, #16
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098ca:	2300      	movs	r3, #0
 80098cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80098ce:	f7ff fda7 	bl	8009420 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80098d2:	f7fb fadb 	bl	8004e8c <HAL_GetTick>
 80098d6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80098d8:	e009      	b.n	80098ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80098da:	f7fb fad7 	bl	8004e8c <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d902      	bls.n	80098ee <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80098e8:	2303      	movs	r3, #3
 80098ea:	73fb      	strb	r3, [r7, #15]
      break;
 80098ec:	e004      	b.n	80098f8 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80098ee:	f7ff fda6 	bl	800943e <LL_RCC_PLLSAI1_IsReady>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d1f0      	bne.n	80098da <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d137      	bne.n	800996e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80098fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	021b      	lsls	r3, r3, #8
 800990e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009912:	4313      	orrs	r3, r2
 8009914:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009928:	4313      	orrs	r3, r2
 800992a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800992c:	f7ff fd69 	bl	8009402 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009930:	f7fb faac 	bl	8004e8c <HAL_GetTick>
 8009934:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009936:	e009      	b.n	800994c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009938:	f7fb faa8 	bl	8004e8c <HAL_GetTick>
 800993c:	4602      	mov	r2, r0
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	1ad3      	subs	r3, r2, r3
 8009942:	2b02      	cmp	r3, #2
 8009944:	d902      	bls.n	800994c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009946:	2303      	movs	r3, #3
 8009948:	73fb      	strb	r3, [r7, #15]
        break;
 800994a:	e004      	b.n	8009956 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800994c:	f7ff fd77 	bl	800943e <LL_RCC_PLLSAI1_IsReady>
 8009950:	4603      	mov	r3, r0
 8009952:	2b01      	cmp	r3, #1
 8009954:	d1f0      	bne.n	8009938 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009956:	7bfb      	ldrb	r3, [r7, #15]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d108      	bne.n	800996e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800995c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009960:	691a      	ldr	r2, [r3, #16]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800996a:	4313      	orrs	r3, r2
 800996c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800996e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3710      	adds	r7, #16
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}

08009978 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009984:	f7ff fd4c 	bl	8009420 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009988:	f7fb fa80 	bl	8004e8c <HAL_GetTick>
 800998c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800998e:	e009      	b.n	80099a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009990:	f7fb fa7c 	bl	8004e8c <HAL_GetTick>
 8009994:	4602      	mov	r2, r0
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	1ad3      	subs	r3, r2, r3
 800999a:	2b02      	cmp	r3, #2
 800999c:	d902      	bls.n	80099a4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	73fb      	strb	r3, [r7, #15]
      break;
 80099a2:	e004      	b.n	80099ae <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80099a4:	f7ff fd4b 	bl	800943e <LL_RCC_PLLSAI1_IsReady>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d1f0      	bne.n	8009990 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d137      	bne.n	8009a24 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80099b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	021b      	lsls	r3, r3, #8
 80099c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099c8:	4313      	orrs	r3, r2
 80099ca:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80099cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	68db      	ldr	r3, [r3, #12]
 80099da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099de:	4313      	orrs	r3, r2
 80099e0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80099e2:	f7ff fd0e 	bl	8009402 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099e6:	f7fb fa51 	bl	8004e8c <HAL_GetTick>
 80099ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80099ec:	e009      	b.n	8009a02 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099ee:	f7fb fa4d 	bl	8004e8c <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	2b02      	cmp	r3, #2
 80099fa:	d902      	bls.n	8009a02 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80099fc:	2303      	movs	r3, #3
 80099fe:	73fb      	strb	r3, [r7, #15]
        break;
 8009a00:	e004      	b.n	8009a0c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009a02:	f7ff fd1c 	bl	800943e <LL_RCC_PLLSAI1_IsReady>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d1f0      	bne.n	80099ee <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d108      	bne.n	8009a24 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a16:	691a      	ldr	r2, [r3, #16]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	691b      	ldr	r3, [r3, #16]
 8009a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a20:	4313      	orrs	r3, r2
 8009a22:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3710      	adds	r7, #16
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	bd80      	pop	{r7, pc}

08009a2e <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009a2e:	b580      	push	{r7, lr}
 8009a30:	b082      	sub	sp, #8
 8009a32:	af00      	add	r7, sp, #0
 8009a34:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e027      	b.n	8009a90 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	7a5b      	ldrb	r3, [r3, #9]
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d105      	bne.n	8009a56 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f7fa fec1 	bl	80047d8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2202      	movs	r2, #2
 8009a5a:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f023 0120 	bic.w	r1, r3, #32
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	430a      	orrs	r2, r1
 8009a70:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f042 0204 	orr.w	r2, r2, #4
 8009a80:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2201      	movs	r2, #1
 8009a86:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f003 0320 	and.w	r3, r3, #32
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d005      	beq.n	8009ac2 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2210      	movs	r2, #16
 8009aba:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009abc:	2301      	movs	r3, #1
 8009abe:	60fb      	str	r3, [r7, #12]
 8009ac0:	e009      	b.n	8009ad6 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d004      	beq.n	8009ad6 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2208      	movs	r2, #8
 8009ad0:	60da      	str	r2, [r3, #12]
    rngclockerror = 1U;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	2b01      	cmp	r3, #1
 8009ada:	d10b      	bne.n	8009af4 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2204      	movs	r2, #4
 8009ae0:	725a      	strb	r2, [r3, #9]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f837 	bl	8009b56 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8009af0:	605a      	str	r2, [r3, #4]

    return;
 8009af2:	e022      	b.n	8009b3a <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d01d      	beq.n	8009b3a <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f022 0208 	bic.w	r2, r2, #8
 8009b0c:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689a      	ldr	r2, [r3, #8]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	611a      	str	r2, [r3, #16]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	7a5b      	ldrb	r3, [r3, #9]
 8009b1c:	b2db      	uxtb	r3, r3
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d00b      	beq.n	8009b3a <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	725a      	strb	r2, [r3, #9]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	691b      	ldr	r3, [r3, #16]
 8009b32:	4619      	mov	r1, r3
 8009b34:	6878      	ldr	r0, [r7, #4]
 8009b36:	f000 f803 	bl	8009b40 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8009b4a:	bf00      	nop
 8009b4c:	370c      	adds	r7, #12
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b083      	sub	sp, #12
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8009b5e:	bf00      	nop
 8009b60:	370c      	adds	r7, #12
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr
	...

08009b6c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d101      	bne.n	8009b7e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e09f      	b.n	8009cbe <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009b84:	b2db      	uxtb	r3, r3
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f7fa fe52 	bl	800483c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009ba0:	4b49      	ldr	r3, [pc, #292]	@ (8009cc8 <HAL_RTC_Init+0x15c>)
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f003 0310 	and.w	r3, r3, #16
 8009ba8:	2b10      	cmp	r3, #16
 8009baa:	d07e      	beq.n	8009caa <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	22ca      	movs	r2, #202	@ 0xca
 8009bb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2253      	movs	r2, #83	@ 0x53
 8009bba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	f000 f8ab 	bl	8009d18 <RTC_EnterInitMode>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d00a      	beq.n	8009bde <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	22ff      	movs	r2, #255	@ 0xff
 8009bce:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2204      	movs	r2, #4
 8009bd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	73fb      	strb	r3, [r7, #15]
 8009bdc:	e067      	b.n	8009cae <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	689b      	ldr	r3, [r3, #8]
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009bf0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	6899      	ldr	r1, [r3, #8]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	699b      	ldr	r3, [r3, #24]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	68d2      	ldr	r2, [r2, #12]
 8009c18:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	6919      	ldr	r1, [r3, #16]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	689b      	ldr	r3, [r3, #8]
 8009c24:	041a      	lsls	r2, r3, #16
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	430a      	orrs	r2, r1
 8009c2c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68da      	ldr	r2, [r3, #12]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009c3c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f022 0203 	bic.w	r2, r2, #3
 8009c4c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	69da      	ldr	r2, [r3, #28]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	695b      	ldr	r3, [r3, #20]
 8009c5c:	431a      	orrs	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f003 0320 	and.w	r3, r3, #32
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d113      	bne.n	8009c9c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 f829 	bl	8009ccc <HAL_RTC_WaitForSynchro>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d00d      	beq.n	8009c9c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	22ff      	movs	r2, #255	@ 0xff
 8009c86:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2204      	movs	r2, #4
 8009c8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e010      	b.n	8009cbe <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	22ff      	movs	r2, #255	@ 0xff
 8009ca2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73fb      	strb	r3, [r7, #15]
 8009ca8:	e001      	b.n	8009cae <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8009caa:	2300      	movs	r3, #0
 8009cac:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009cae:	7bfb      	ldrb	r3, [r7, #15]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d103      	bne.n	8009cbc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	40002800 	.word	0x40002800

08009ccc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68da      	ldr	r2, [r3, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009ce2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009ce4:	f7fb f8d2 	bl	8004e8c <HAL_GetTick>
 8009ce8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009cea:	e009      	b.n	8009d00 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009cec:	f7fb f8ce 	bl	8004e8c <HAL_GetTick>
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1ad3      	subs	r3, r2, r3
 8009cf6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009cfa:	d901      	bls.n	8009d00 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8009cfc:	2303      	movs	r3, #3
 8009cfe:	e007      	b.n	8009d10 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d0ee      	beq.n	8009cec <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68db      	ldr	r3, [r3, #12]
 8009d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d119      	bne.n	8009d62 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f04f 32ff 	mov.w	r2, #4294967295
 8009d36:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009d38:	f7fb f8a8 	bl	8004e8c <HAL_GetTick>
 8009d3c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d3e:	e009      	b.n	8009d54 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009d40:	f7fb f8a4 	bl	8004e8c <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009d4e:	d901      	bls.n	8009d54 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009d50:	2303      	movs	r3, #3
 8009d52:	e007      	b.n	8009d64 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d0ee      	beq.n	8009d40 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009d62:	2300      	movs	r3, #0
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e0a8      	b.n	8009ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2202      	movs	r2, #2
 8009d92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	22ca      	movs	r2, #202	@ 0xca
 8009d9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	2253      	movs	r2, #83	@ 0x53
 8009da4:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d020      	beq.n	8009df6 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009db4:	f7fb f86a 	bl	8004e8c <HAL_GetTick>
 8009db8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009dba:	e015      	b.n	8009de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009dbc:	f7fb f866 	bl	8004e8c <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009dca:	d90d      	bls.n	8009de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	22ff      	movs	r2, #255	@ 0xff
 8009dd2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2203      	movs	r2, #3
 8009dd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	2200      	movs	r2, #0
 8009de0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e077      	b.n	8009ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f003 0304 	and.w	r3, r3, #4
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d1e2      	bne.n	8009dbc <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e04:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8009e16:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009e18:	f7fb f838 	bl	8004e8c <HAL_GetTick>
 8009e1c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009e1e:	e015      	b.n	8009e4c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009e20:	f7fb f834 	bl	8004e8c <HAL_GetTick>
 8009e24:	4602      	mov	r2, r0
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	1ad3      	subs	r3, r2, r3
 8009e2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e2e:	d90d      	bls.n	8009e4c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	22ff      	movs	r2, #255	@ 0xff
 8009e36:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2203      	movs	r2, #3
 8009e3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e045      	b.n	8009ed8 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	f003 0304 	and.w	r3, r3, #4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d0e2      	beq.n	8009e20 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f022 0207 	bic.w	r2, r2, #7
 8009e70:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6899      	ldr	r1, [r3, #8]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	430a      	orrs	r2, r1
 8009e80:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009e82:	4b17      	ldr	r3, [pc, #92]	@ (8009ee0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009e84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e88:	4a15      	ldr	r2, [pc, #84]	@ (8009ee0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009e8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e8e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009e92:	4b13      	ldr	r3, [pc, #76]	@ (8009ee0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a12      	ldr	r2, [pc, #72]	@ (8009ee0 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009e98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e9c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009eac:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009ebc:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	22ff      	movs	r2, #255	@ 0xff
 8009ec4:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009ed6:	2300      	movs	r3, #0
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3718      	adds	r7, #24
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	58000800 	.word	0x58000800

08009ee4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d101      	bne.n	8009ef6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e095      	b.n	800a022 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d108      	bne.n	8009f10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f06:	d009      	beq.n	8009f1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	61da      	str	r2, [r3, #28]
 8009f0e:	e005      	b.n	8009f1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2200      	movs	r2, #0
 8009f14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009f28:	b2db      	uxtb	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d106      	bne.n	8009f3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7fa fcb4 	bl	80048a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2202      	movs	r2, #2
 8009f40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009f52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f5c:	d902      	bls.n	8009f64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]
 8009f62:	e002      	b.n	8009f6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009f72:	d007      	beq.n	8009f84 <HAL_SPI_Init+0xa0>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f7c:	d002      	beq.n	8009f84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009f94:	431a      	orrs	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	f003 0302 	and.w	r3, r3, #2
 8009f9e:	431a      	orrs	r2, r3
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	695b      	ldr	r3, [r3, #20]
 8009fa4:	f003 0301 	and.w	r3, r3, #1
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	699b      	ldr	r3, [r3, #24]
 8009fae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009fbc:	431a      	orrs	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6a1b      	ldr	r3, [r3, #32]
 8009fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fc6:	ea42 0103 	orr.w	r1, r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fce:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	430a      	orrs	r2, r1
 8009fd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	0c1b      	lsrs	r3, r3, #16
 8009fe0:	f003 0204 	and.w	r2, r3, #4
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fe8:	f003 0310 	and.w	r3, r3, #16
 8009fec:	431a      	orrs	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ff2:	f003 0308 	and.w	r3, r3, #8
 8009ff6:	431a      	orrs	r2, r3
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a000:	ea42 0103 	orr.w	r1, r2, r3
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2201      	movs	r2, #1
 800a01c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3710      	adds	r7, #16
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a02a:	b580      	push	{r7, lr}
 800a02c:	b088      	sub	sp, #32
 800a02e:	af00      	add	r7, sp, #0
 800a030:	60f8      	str	r0, [r7, #12]
 800a032:	60b9      	str	r1, [r7, #8]
 800a034:	603b      	str	r3, [r7, #0]
 800a036:	4613      	mov	r3, r2
 800a038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a044:	2b01      	cmp	r3, #1
 800a046:	d101      	bne.n	800a04c <HAL_SPI_Transmit+0x22>
 800a048:	2302      	movs	r3, #2
 800a04a:	e15f      	b.n	800a30c <HAL_SPI_Transmit+0x2e2>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a054:	f7fa ff1a 	bl	8004e8c <HAL_GetTick>
 800a058:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a05a:	88fb      	ldrh	r3, [r7, #6]
 800a05c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a064:	b2db      	uxtb	r3, r3
 800a066:	2b01      	cmp	r3, #1
 800a068:	d002      	beq.n	800a070 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a06a:	2302      	movs	r3, #2
 800a06c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a06e:	e148      	b.n	800a302 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d002      	beq.n	800a07c <HAL_SPI_Transmit+0x52>
 800a076:	88fb      	ldrh	r3, [r7, #6]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d102      	bne.n	800a082 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a07c:	2301      	movs	r3, #1
 800a07e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a080:	e13f      	b.n	800a302 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	2203      	movs	r2, #3
 800a086:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	2200      	movs	r2, #0
 800a08e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	88fa      	ldrh	r2, [r7, #6]
 800a09a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	88fa      	ldrh	r2, [r7, #6]
 800a0a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	689b      	ldr	r3, [r3, #8]
 800a0c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0cc:	d10f      	bne.n	800a0ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a0ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0f8:	2b40      	cmp	r3, #64	@ 0x40
 800a0fa:	d007      	beq.n	800a10c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a10a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	68db      	ldr	r3, [r3, #12]
 800a110:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a114:	d94f      	bls.n	800a1b6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d002      	beq.n	800a124 <HAL_SPI_Transmit+0xfa>
 800a11e:	8afb      	ldrh	r3, [r7, #22]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d142      	bne.n	800a1aa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a128:	881a      	ldrh	r2, [r3, #0]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a134:	1c9a      	adds	r2, r3, #2
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a13e:	b29b      	uxth	r3, r3
 800a140:	3b01      	subs	r3, #1
 800a142:	b29a      	uxth	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a148:	e02f      	b.n	800a1aa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	689b      	ldr	r3, [r3, #8]
 800a150:	f003 0302 	and.w	r3, r3, #2
 800a154:	2b02      	cmp	r3, #2
 800a156:	d112      	bne.n	800a17e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15c:	881a      	ldrh	r2, [r3, #0]
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a168:	1c9a      	adds	r2, r3, #2
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a172:	b29b      	uxth	r3, r3
 800a174:	3b01      	subs	r3, #1
 800a176:	b29a      	uxth	r2, r3
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a17c:	e015      	b.n	800a1aa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a17e:	f7fa fe85 	bl	8004e8c <HAL_GetTick>
 800a182:	4602      	mov	r2, r0
 800a184:	69bb      	ldr	r3, [r7, #24]
 800a186:	1ad3      	subs	r3, r2, r3
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d803      	bhi.n	800a196 <HAL_SPI_Transmit+0x16c>
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a194:	d102      	bne.n	800a19c <HAL_SPI_Transmit+0x172>
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d106      	bne.n	800a1aa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800a19c:	2303      	movs	r3, #3
 800a19e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	2201      	movs	r2, #1
 800a1a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a1a8:	e0ab      	b.n	800a302 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1ca      	bne.n	800a14a <HAL_SPI_Transmit+0x120>
 800a1b4:	e080      	b.n	800a2b8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	685b      	ldr	r3, [r3, #4]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d002      	beq.n	800a1c4 <HAL_SPI_Transmit+0x19a>
 800a1be:	8afb      	ldrh	r3, [r7, #22]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d174      	bne.n	800a2ae <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d912      	bls.n	800a1f4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1d2:	881a      	ldrh	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1de:	1c9a      	adds	r2, r3, #2
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	3b02      	subs	r3, #2
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a1f2:	e05c      	b.n	800a2ae <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	330c      	adds	r3, #12
 800a1fe:	7812      	ldrb	r2, [r2, #0]
 800a200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a210:	b29b      	uxth	r3, r3
 800a212:	3b01      	subs	r3, #1
 800a214:	b29a      	uxth	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800a21a:	e048      	b.n	800a2ae <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f003 0302 	and.w	r3, r3, #2
 800a226:	2b02      	cmp	r3, #2
 800a228:	d12b      	bne.n	800a282 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a22e:	b29b      	uxth	r3, r3
 800a230:	2b01      	cmp	r3, #1
 800a232:	d912      	bls.n	800a25a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a238:	881a      	ldrh	r2, [r3, #0]
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a244:	1c9a      	adds	r2, r3, #2
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a24e:	b29b      	uxth	r3, r3
 800a250:	3b02      	subs	r3, #2
 800a252:	b29a      	uxth	r2, r3
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a258:	e029      	b.n	800a2ae <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	330c      	adds	r3, #12
 800a264:	7812      	ldrb	r2, [r2, #0]
 800a266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a276:	b29b      	uxth	r3, r3
 800a278:	3b01      	subs	r3, #1
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a280:	e015      	b.n	800a2ae <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a282:	f7fa fe03 	bl	8004e8c <HAL_GetTick>
 800a286:	4602      	mov	r2, r0
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	1ad3      	subs	r3, r2, r3
 800a28c:	683a      	ldr	r2, [r7, #0]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d803      	bhi.n	800a29a <HAL_SPI_Transmit+0x270>
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a298:	d102      	bne.n	800a2a0 <HAL_SPI_Transmit+0x276>
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 800a2ac:	e029      	b.n	800a302 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2b2:	b29b      	uxth	r3, r3
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d1b1      	bne.n	800a21c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	68f8      	ldr	r0, [r7, #12]
 800a2be:	f000 fb69 	bl	800a994 <SPI_EndRxTxTransaction>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d10a      	bne.n	800a2ec <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	613b      	str	r3, [r7, #16]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	689b      	ldr	r3, [r3, #8]
 800a2e8:	613b      	str	r3, [r7, #16]
 800a2ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	77fb      	strb	r3, [r7, #31]
 800a2f8:	e003      	b.n	800a302 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	2201      	movs	r2, #1
 800a2fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2200      	movs	r2, #0
 800a306:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a30a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3720      	adds	r7, #32
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b08a      	sub	sp, #40	@ 0x28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	60f8      	str	r0, [r7, #12]
 800a31c:	60b9      	str	r1, [r7, #8]
 800a31e:	607a      	str	r2, [r7, #4]
 800a320:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a322:	2301      	movs	r3, #1
 800a324:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a326:	2300      	movs	r3, #0
 800a328:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800a332:	2b01      	cmp	r3, #1
 800a334:	d101      	bne.n	800a33a <HAL_SPI_TransmitReceive+0x26>
 800a336:	2302      	movs	r3, #2
 800a338:	e20a      	b.n	800a750 <HAL_SPI_TransmitReceive+0x43c>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2201      	movs	r2, #1
 800a33e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a342:	f7fa fda3 	bl	8004e8c <HAL_GetTick>
 800a346:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a34e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a356:	887b      	ldrh	r3, [r7, #2]
 800a358:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a35a:	887b      	ldrh	r3, [r7, #2]
 800a35c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a35e:	7efb      	ldrb	r3, [r7, #27]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d00e      	beq.n	800a382 <HAL_SPI_TransmitReceive+0x6e>
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a36a:	d106      	bne.n	800a37a <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d102      	bne.n	800a37a <HAL_SPI_TransmitReceive+0x66>
 800a374:	7efb      	ldrb	r3, [r7, #27]
 800a376:	2b04      	cmp	r3, #4
 800a378:	d003      	beq.n	800a382 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a37a:	2302      	movs	r3, #2
 800a37c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a380:	e1e0      	b.n	800a744 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d005      	beq.n	800a394 <HAL_SPI_TransmitReceive+0x80>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d002      	beq.n	800a394 <HAL_SPI_TransmitReceive+0x80>
 800a38e:	887b      	ldrh	r3, [r7, #2]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d103      	bne.n	800a39c <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a39a:	e1d3      	b.n	800a744 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a3a2:	b2db      	uxtb	r3, r3
 800a3a4:	2b04      	cmp	r3, #4
 800a3a6:	d003      	beq.n	800a3b0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2205      	movs	r2, #5
 800a3ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	887a      	ldrh	r2, [r7, #2]
 800a3c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	887a      	ldrh	r2, [r7, #2]
 800a3c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	887a      	ldrh	r2, [r7, #2]
 800a3d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	887a      	ldrh	r2, [r7, #2]
 800a3dc:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a3f2:	d802      	bhi.n	800a3fa <HAL_SPI_TransmitReceive+0xe6>
 800a3f4:	8a3b      	ldrh	r3, [r7, #16]
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d908      	bls.n	800a40c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a408:	605a      	str	r2, [r3, #4]
 800a40a:	e007      	b.n	800a41c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685a      	ldr	r2, [r3, #4]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a41a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a426:	2b40      	cmp	r3, #64	@ 0x40
 800a428:	d007      	beq.n	800a43a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a438:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	68db      	ldr	r3, [r3, #12]
 800a43e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a442:	f240 8081 	bls.w	800a548 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_SPI_TransmitReceive+0x140>
 800a44e:	8a7b      	ldrh	r3, [r7, #18]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d16d      	bne.n	800a530 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a458:	881a      	ldrh	r2, [r3, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a464:	1c9a      	adds	r2, r3, #2
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a46e:	b29b      	uxth	r3, r3
 800a470:	3b01      	subs	r3, #1
 800a472:	b29a      	uxth	r2, r3
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a478:	e05a      	b.n	800a530 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b02      	cmp	r3, #2
 800a486:	d11b      	bne.n	800a4c0 <HAL_SPI_TransmitReceive+0x1ac>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d016      	beq.n	800a4c0 <HAL_SPI_TransmitReceive+0x1ac>
 800a492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a494:	2b01      	cmp	r3, #1
 800a496:	d113      	bne.n	800a4c0 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49c:	881a      	ldrh	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4a8:	1c9a      	adds	r2, r3, #2
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a4bc:	2300      	movs	r3, #0
 800a4be:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d11c      	bne.n	800a508 <HAL_SPI_TransmitReceive+0x1f4>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d016      	beq.n	800a508 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68da      	ldr	r2, [r3, #12]
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4e4:	b292      	uxth	r2, r2
 800a4e6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ec:	1c9a      	adds	r2, r3, #2
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a4f8:	b29b      	uxth	r3, r3
 800a4fa:	3b01      	subs	r3, #1
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a504:	2301      	movs	r3, #1
 800a506:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a508:	f7fa fcc0 	bl	8004e8c <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	69fb      	ldr	r3, [r7, #28]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a514:	429a      	cmp	r2, r3
 800a516:	d80b      	bhi.n	800a530 <HAL_SPI_TransmitReceive+0x21c>
 800a518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d007      	beq.n	800a530 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a520:	2303      	movs	r3, #3
 800a522:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a52e:	e109      	b.n	800a744 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a534:	b29b      	uxth	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d19f      	bne.n	800a47a <HAL_SPI_TransmitReceive+0x166>
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a540:	b29b      	uxth	r3, r3
 800a542:	2b00      	cmp	r3, #0
 800a544:	d199      	bne.n	800a47a <HAL_SPI_TransmitReceive+0x166>
 800a546:	e0e3      	b.n	800a710 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d003      	beq.n	800a558 <HAL_SPI_TransmitReceive+0x244>
 800a550:	8a7b      	ldrh	r3, [r7, #18]
 800a552:	2b01      	cmp	r3, #1
 800a554:	f040 80cf 	bne.w	800a6f6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a55c:	b29b      	uxth	r3, r3
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d912      	bls.n	800a588 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a566:	881a      	ldrh	r2, [r3, #0]
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a572:	1c9a      	adds	r2, r3, #2
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a57c:	b29b      	uxth	r3, r3
 800a57e:	3b02      	subs	r3, #2
 800a580:	b29a      	uxth	r2, r3
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a586:	e0b6      	b.n	800a6f6 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	330c      	adds	r3, #12
 800a592:	7812      	ldrb	r2, [r2, #0]
 800a594:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	3b01      	subs	r3, #1
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a5ae:	e0a2      	b.n	800a6f6 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b02      	cmp	r3, #2
 800a5bc:	d134      	bne.n	800a628 <HAL_SPI_TransmitReceive+0x314>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d02f      	beq.n	800a628 <HAL_SPI_TransmitReceive+0x314>
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d12c      	bne.n	800a628 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d912      	bls.n	800a5fe <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5dc:	881a      	ldrh	r2, [r3, #0]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5e8:	1c9a      	adds	r2, r3, #2
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	3b02      	subs	r3, #2
 800a5f6:	b29a      	uxth	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a5fc:	e012      	b.n	800a624 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	330c      	adds	r3, #12
 800a608:	7812      	ldrb	r2, [r2, #0]
 800a60a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a610:	1c5a      	adds	r2, r3, #1
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	3b01      	subs	r3, #1
 800a61e:	b29a      	uxth	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a624:	2300      	movs	r3, #0
 800a626:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f003 0301 	and.w	r3, r3, #1
 800a632:	2b01      	cmp	r3, #1
 800a634:	d148      	bne.n	800a6c8 <HAL_SPI_TransmitReceive+0x3b4>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a63c:	b29b      	uxth	r3, r3
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d042      	beq.n	800a6c8 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d923      	bls.n	800a696 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68da      	ldr	r2, [r3, #12]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a658:	b292      	uxth	r2, r2
 800a65a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a660:	1c9a      	adds	r2, r3, #2
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	3b02      	subs	r3, #2
 800a670:	b29a      	uxth	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a67e:	b29b      	uxth	r3, r3
 800a680:	2b01      	cmp	r3, #1
 800a682:	d81f      	bhi.n	800a6c4 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a692:	605a      	str	r2, [r3, #4]
 800a694:	e016      	b.n	800a6c4 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f103 020c 	add.w	r2, r3, #12
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a2:	7812      	ldrb	r2, [r2, #0]
 800a6a4:	b2d2      	uxtb	r2, r2
 800a6a6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ac:	1c5a      	adds	r2, r3, #1
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a6c8:	f7fa fbe0 	bl	8004e8c <HAL_GetTick>
 800a6cc:	4602      	mov	r2, r0
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d803      	bhi.n	800a6e0 <HAL_SPI_TransmitReceive+0x3cc>
 800a6d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6de:	d102      	bne.n	800a6e6 <HAL_SPI_TransmitReceive+0x3d2>
 800a6e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d107      	bne.n	800a6f6 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	2201      	movs	r2, #1
 800a6f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a6f4:	e026      	b.n	800a744 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a6fa:	b29b      	uxth	r3, r3
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	f47f af57 	bne.w	800a5b0 <HAL_SPI_TransmitReceive+0x29c>
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a708:	b29b      	uxth	r3, r3
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f47f af50 	bne.w	800a5b0 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a714:	68f8      	ldr	r0, [r7, #12]
 800a716:	f000 f93d 	bl	800a994 <SPI_EndRxTxTransaction>
 800a71a:	4603      	mov	r3, r0
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d005      	beq.n	800a72c <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a720:	2301      	movs	r3, #1
 800a722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2220      	movs	r2, #32
 800a72a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a730:	2b00      	cmp	r3, #0
 800a732:	d003      	beq.n	800a73c <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a73a:	e003      	b.n	800a744 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a74c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a750:	4618      	mov	r0, r3
 800a752:	3728      	adds	r7, #40	@ 0x28
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	603b      	str	r3, [r7, #0]
 800a764:	4613      	mov	r3, r2
 800a766:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a768:	f7fa fb90 	bl	8004e8c <HAL_GetTick>
 800a76c:	4602      	mov	r2, r0
 800a76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a770:	1a9b      	subs	r3, r3, r2
 800a772:	683a      	ldr	r2, [r7, #0]
 800a774:	4413      	add	r3, r2
 800a776:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a778:	f7fa fb88 	bl	8004e8c <HAL_GetTick>
 800a77c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a77e:	4b39      	ldr	r3, [pc, #228]	@ (800a864 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	015b      	lsls	r3, r3, #5
 800a784:	0d1b      	lsrs	r3, r3, #20
 800a786:	69fa      	ldr	r2, [r7, #28]
 800a788:	fb02 f303 	mul.w	r3, r2, r3
 800a78c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a78e:	e054      	b.n	800a83a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a796:	d050      	beq.n	800a83a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a798:	f7fa fb78 	bl	8004e8c <HAL_GetTick>
 800a79c:	4602      	mov	r2, r0
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	69fa      	ldr	r2, [r7, #28]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d902      	bls.n	800a7ae <SPI_WaitFlagStateUntilTimeout+0x56>
 800a7a8:	69fb      	ldr	r3, [r7, #28]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d13d      	bne.n	800a82a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a7bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a7c6:	d111      	bne.n	800a7ec <SPI_WaitFlagStateUntilTimeout+0x94>
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7d0:	d004      	beq.n	800a7dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7da:	d107      	bne.n	800a7ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a7ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a7f4:	d10f      	bne.n	800a816 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	681a      	ldr	r2, [r3, #0]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a804:	601a      	str	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a814:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2201      	movs	r2, #1
 800a81a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2200      	movs	r2, #0
 800a822:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a826:	2303      	movs	r3, #3
 800a828:	e017      	b.n	800a85a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a830:	2300      	movs	r3, #0
 800a832:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a834:	697b      	ldr	r3, [r7, #20]
 800a836:	3b01      	subs	r3, #1
 800a838:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	689a      	ldr	r2, [r3, #8]
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4013      	ands	r3, r2
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	429a      	cmp	r2, r3
 800a848:	bf0c      	ite	eq
 800a84a:	2301      	moveq	r3, #1
 800a84c:	2300      	movne	r3, #0
 800a84e:	b2db      	uxtb	r3, r3
 800a850:	461a      	mov	r2, r3
 800a852:	79fb      	ldrb	r3, [r7, #7]
 800a854:	429a      	cmp	r2, r3
 800a856:	d19b      	bne.n	800a790 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a858:	2300      	movs	r3, #0
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	2000000c 	.word	0x2000000c

0800a868 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	@ 0x28
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a87a:	f7fa fb07 	bl	8004e8c <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a882:	1a9b      	subs	r3, r3, r2
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	4413      	add	r3, r2
 800a888:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a88a:	f7fa faff 	bl	8004e8c <HAL_GetTick>
 800a88e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	330c      	adds	r3, #12
 800a896:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a898:	4b3d      	ldr	r3, [pc, #244]	@ (800a990 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	00da      	lsls	r2, r3, #3
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	0d1b      	lsrs	r3, r3, #20
 800a8a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8aa:	fb02 f303 	mul.w	r3, r2, r3
 800a8ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a8b0:	e060      	b.n	800a974 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a8b8:	d107      	bne.n	800a8ca <SPI_WaitFifoStateUntilTimeout+0x62>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d104      	bne.n	800a8ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a8c0:	69fb      	ldr	r3, [r7, #28]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	b2db      	uxtb	r3, r3
 800a8c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d0:	d050      	beq.n	800a974 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a8d2:	f7fa fadb 	bl	8004e8c <HAL_GetTick>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	6a3b      	ldr	r3, [r7, #32]
 800a8da:	1ad3      	subs	r3, r2, r3
 800a8dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d902      	bls.n	800a8e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d13d      	bne.n	800a964 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685a      	ldr	r2, [r3, #4]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a8f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a900:	d111      	bne.n	800a926 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a90a:	d004      	beq.n	800a916 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a914:	d107      	bne.n	800a926 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	681a      	ldr	r2, [r3, #0]
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a924:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a92a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a92e:	d10f      	bne.n	800a950 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a93e:	601a      	str	r2, [r3, #0]
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a94e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	2201      	movs	r2, #1
 800a954:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e010      	b.n	800a986 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a96a:	2300      	movs	r3, #0
 800a96c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	3b01      	subs	r3, #1
 800a972:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689a      	ldr	r2, [r3, #8]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	4013      	ands	r3, r2
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	429a      	cmp	r2, r3
 800a982:	d196      	bne.n	800a8b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3728      	adds	r7, #40	@ 0x28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	2000000c 	.word	0x2000000c

0800a994 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af02      	add	r7, sp, #8
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f7ff ff5b 	bl	800a868 <SPI_WaitFifoStateUntilTimeout>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d007      	beq.n	800a9c8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9bc:	f043 0220 	orr.w	r2, r3, #32
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9c4:	2303      	movs	r3, #3
 800a9c6:	e027      	b.n	800aa18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	2180      	movs	r1, #128	@ 0x80
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f7ff fec0 	bl	800a758 <SPI_WaitFlagStateUntilTimeout>
 800a9d8:	4603      	mov	r3, r0
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a9e2:	f043 0220 	orr.w	r2, r3, #32
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	e014      	b.n	800aa18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	68bb      	ldr	r3, [r7, #8]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff ff34 	bl	800a868 <SPI_WaitFifoStateUntilTimeout>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d007      	beq.n	800aa16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa0a:	f043 0220 	orr.w	r2, r3, #32
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e000      	b.n	800aa18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800aa16:	2300      	movs	r3, #0
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b082      	sub	sp, #8
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa2e:	2301      	movs	r3, #1
 800aa30:	e049      	b.n	800aac6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa38:	b2db      	uxtb	r3, r3
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d106      	bne.n	800aa4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7f9 ff5c 	bl	8004904 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2202      	movs	r2, #2
 800aa50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	4619      	mov	r1, r3
 800aa5e:	4610      	mov	r0, r2
 800aa60:	f000 fa7c 	bl	800af5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2201      	movs	r2, #1
 800aa68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2201      	movs	r2, #1
 800aa70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2201      	movs	r2, #1
 800aa78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2201      	movs	r2, #1
 800aa98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2201      	movs	r2, #1
 800aab0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aac4:	2300      	movs	r3, #0
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3708      	adds	r7, #8
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
	...

0800aad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b085      	sub	sp, #20
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	d001      	beq.n	800aae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e036      	b.n	800ab56 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	68da      	ldr	r2, [r3, #12]
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f042 0201 	orr.w	r2, r2, #1
 800aafe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a17      	ldr	r2, [pc, #92]	@ (800ab64 <HAL_TIM_Base_Start_IT+0x94>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d004      	beq.n	800ab14 <HAL_TIM_Base_Start_IT+0x44>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab12:	d115      	bne.n	800ab40 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689a      	ldr	r2, [r3, #8]
 800ab1a:	4b13      	ldr	r3, [pc, #76]	@ (800ab68 <HAL_TIM_Base_Start_IT+0x98>)
 800ab1c:	4013      	ands	r3, r2
 800ab1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2b06      	cmp	r3, #6
 800ab24:	d015      	beq.n	800ab52 <HAL_TIM_Base_Start_IT+0x82>
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab2c:	d011      	beq.n	800ab52 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0201 	orr.w	r2, r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab3e:	e008      	b.n	800ab52 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	f042 0201 	orr.w	r2, r2, #1
 800ab4e:	601a      	str	r2, [r3, #0]
 800ab50:	e000      	b.n	800ab54 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ab54:	2300      	movs	r3, #0
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3714      	adds	r7, #20
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr
 800ab62:	bf00      	nop
 800ab64:	40012c00 	.word	0x40012c00
 800ab68:	00010007 	.word	0x00010007

0800ab6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
 800ab7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	691b      	ldr	r3, [r3, #16]
 800ab82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d020      	beq.n	800abd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f003 0302 	and.w	r3, r3, #2
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d01b      	beq.n	800abd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f06f 0202 	mvn.w	r2, #2
 800aba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	2201      	movs	r2, #1
 800aba6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	699b      	ldr	r3, [r3, #24]
 800abae:	f003 0303 	and.w	r3, r3, #3
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d003      	beq.n	800abbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f000 f9b2 	bl	800af20 <HAL_TIM_IC_CaptureCallback>
 800abbc:	e005      	b.n	800abca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f9a4 	bl	800af0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abc4:	6878      	ldr	r0, [r7, #4]
 800abc6:	f000 f9b5 	bl	800af34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	f003 0304 	and.w	r3, r3, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d020      	beq.n	800ac1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f003 0304 	and.w	r3, r3, #4
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d01b      	beq.n	800ac1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f06f 0204 	mvn.w	r2, #4
 800abec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2202      	movs	r2, #2
 800abf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d003      	beq.n	800ac0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f98c 	bl	800af20 <HAL_TIM_IC_CaptureCallback>
 800ac08:	e005      	b.n	800ac16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 f97e 	bl	800af0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 f98f 	bl	800af34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	f003 0308 	and.w	r3, r3, #8
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d020      	beq.n	800ac68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f003 0308 	and.w	r3, r3, #8
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01b      	beq.n	800ac68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f06f 0208 	mvn.w	r2, #8
 800ac38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2204      	movs	r2, #4
 800ac3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	69db      	ldr	r3, [r3, #28]
 800ac46:	f003 0303 	and.w	r3, r3, #3
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d003      	beq.n	800ac56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f966 	bl	800af20 <HAL_TIM_IC_CaptureCallback>
 800ac54:	e005      	b.n	800ac62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 f958 	bl	800af0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f969 	bl	800af34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2200      	movs	r2, #0
 800ac66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ac68:	68bb      	ldr	r3, [r7, #8]
 800ac6a:	f003 0310 	and.w	r3, r3, #16
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d020      	beq.n	800acb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f003 0310 	and.w	r3, r3, #16
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d01b      	beq.n	800acb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f06f 0210 	mvn.w	r2, #16
 800ac84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2208      	movs	r2, #8
 800ac8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	69db      	ldr	r3, [r3, #28]
 800ac92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f940 	bl	800af20 <HAL_TIM_IC_CaptureCallback>
 800aca0:	e005      	b.n	800acae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f932 	bl	800af0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f943 	bl	800af34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	2200      	movs	r2, #0
 800acb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	f003 0301 	and.w	r3, r3, #1
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00c      	beq.n	800acd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f003 0301 	and.w	r3, r3, #1
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d007      	beq.n	800acd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f06f 0201 	mvn.w	r2, #1
 800acd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7f9 ffce 	bl	8004c74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d104      	bne.n	800acec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00c      	beq.n	800ad06 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d007      	beq.n	800ad06 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800acfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f000 faa1 	bl	800b248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00c      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d007      	beq.n	800ad2a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800ad22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fa99 	bl	800b25c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00c      	beq.n	800ad4e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d007      	beq.n	800ad4e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800ad46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f000 f8fd 	bl	800af48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f003 0320 	and.w	r3, r3, #32
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00c      	beq.n	800ad72 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f003 0320 	and.w	r3, r3, #32
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d007      	beq.n	800ad72 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	f06f 0220 	mvn.w	r2, #32
 800ad6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa61 	bl	800b234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad72:	bf00      	nop
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b084      	sub	sp, #16
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad84:	2300      	movs	r3, #0
 800ad86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad8e:	2b01      	cmp	r3, #1
 800ad90:	d101      	bne.n	800ad96 <HAL_TIM_ConfigClockSource+0x1c>
 800ad92:	2302      	movs	r3, #2
 800ad94:	e0b6      	b.n	800af04 <HAL_TIM_ConfigClockSource+0x18a>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2202      	movs	r2, #2
 800ada2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800adb4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800adb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800adc0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800add2:	d03e      	beq.n	800ae52 <HAL_TIM_ConfigClockSource+0xd8>
 800add4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800add8:	f200 8087 	bhi.w	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800addc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ade0:	f000 8086 	beq.w	800aef0 <HAL_TIM_ConfigClockSource+0x176>
 800ade4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ade8:	d87f      	bhi.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800adea:	2b70      	cmp	r3, #112	@ 0x70
 800adec:	d01a      	beq.n	800ae24 <HAL_TIM_ConfigClockSource+0xaa>
 800adee:	2b70      	cmp	r3, #112	@ 0x70
 800adf0:	d87b      	bhi.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800adf2:	2b60      	cmp	r3, #96	@ 0x60
 800adf4:	d050      	beq.n	800ae98 <HAL_TIM_ConfigClockSource+0x11e>
 800adf6:	2b60      	cmp	r3, #96	@ 0x60
 800adf8:	d877      	bhi.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800adfa:	2b50      	cmp	r3, #80	@ 0x50
 800adfc:	d03c      	beq.n	800ae78 <HAL_TIM_ConfigClockSource+0xfe>
 800adfe:	2b50      	cmp	r3, #80	@ 0x50
 800ae00:	d873      	bhi.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800ae02:	2b40      	cmp	r3, #64	@ 0x40
 800ae04:	d058      	beq.n	800aeb8 <HAL_TIM_ConfigClockSource+0x13e>
 800ae06:	2b40      	cmp	r3, #64	@ 0x40
 800ae08:	d86f      	bhi.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800ae0a:	2b30      	cmp	r3, #48	@ 0x30
 800ae0c:	d064      	beq.n	800aed8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae0e:	2b30      	cmp	r3, #48	@ 0x30
 800ae10:	d86b      	bhi.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800ae12:	2b20      	cmp	r3, #32
 800ae14:	d060      	beq.n	800aed8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae16:	2b20      	cmp	r3, #32
 800ae18:	d867      	bhi.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d05c      	beq.n	800aed8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae1e:	2b10      	cmp	r3, #16
 800ae20:	d05a      	beq.n	800aed8 <HAL_TIM_ConfigClockSource+0x15e>
 800ae22:	e062      	b.n	800aeea <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae34:	f000 f97e 	bl	800b134 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ae46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68ba      	ldr	r2, [r7, #8]
 800ae4e:	609a      	str	r2, [r3, #8]
      break;
 800ae50:	e04f      	b.n	800aef2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ae62:	f000 f967 	bl	800b134 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ae74:	609a      	str	r2, [r3, #8]
      break;
 800ae76:	e03c      	b.n	800aef2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae84:	461a      	mov	r2, r3
 800ae86:	f000 f8d9 	bl	800b03c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2150      	movs	r1, #80	@ 0x50
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f932 	bl	800b0fa <TIM_ITRx_SetConfig>
      break;
 800ae96:	e02c      	b.n	800aef2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aea4:	461a      	mov	r2, r3
 800aea6:	f000 f8f8 	bl	800b09a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2160      	movs	r1, #96	@ 0x60
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f922 	bl	800b0fa <TIM_ITRx_SetConfig>
      break;
 800aeb6:	e01c      	b.n	800aef2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aec4:	461a      	mov	r2, r3
 800aec6:	f000 f8b9 	bl	800b03c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2140      	movs	r1, #64	@ 0x40
 800aed0:	4618      	mov	r0, r3
 800aed2:	f000 f912 	bl	800b0fa <TIM_ITRx_SetConfig>
      break;
 800aed6:	e00c      	b.n	800aef2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4619      	mov	r1, r3
 800aee2:	4610      	mov	r0, r2
 800aee4:	f000 f909 	bl	800b0fa <TIM_ITRx_SetConfig>
      break;
 800aee8:	e003      	b.n	800aef2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	73fb      	strb	r3, [r7, #15]
      break;
 800aeee:	e000      	b.n	800aef2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800aef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2201      	movs	r2, #1
 800aef6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800af02:	7bfb      	ldrb	r3, [r7, #15]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}

0800af0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b083      	sub	sp, #12
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af14:	bf00      	nop
 800af16:	370c      	adds	r7, #12
 800af18:	46bd      	mov	sp, r7
 800af1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1e:	4770      	bx	lr

0800af20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af28:	bf00      	nop
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a30      	ldr	r2, [pc, #192]	@ (800b030 <TIM_Base_SetConfig+0xd4>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d003      	beq.n	800af7c <TIM_Base_SetConfig+0x20>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af7a:	d108      	bne.n	800af8e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	68fa      	ldr	r2, [r7, #12]
 800af8a:	4313      	orrs	r3, r2
 800af8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	4a27      	ldr	r2, [pc, #156]	@ (800b030 <TIM_Base_SetConfig+0xd4>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d00b      	beq.n	800afae <TIM_Base_SetConfig+0x52>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800af9c:	d007      	beq.n	800afae <TIM_Base_SetConfig+0x52>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	4a24      	ldr	r2, [pc, #144]	@ (800b034 <TIM_Base_SetConfig+0xd8>)
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d003      	beq.n	800afae <TIM_Base_SetConfig+0x52>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	4a23      	ldr	r2, [pc, #140]	@ (800b038 <TIM_Base_SetConfig+0xdc>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d108      	bne.n	800afc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800afb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	4313      	orrs	r3, r2
 800afcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	681a      	ldr	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	4a12      	ldr	r2, [pc, #72]	@ (800b030 <TIM_Base_SetConfig+0xd4>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d007      	beq.n	800affc <TIM_Base_SetConfig+0xa0>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4a11      	ldr	r2, [pc, #68]	@ (800b034 <TIM_Base_SetConfig+0xd8>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d003      	beq.n	800affc <TIM_Base_SetConfig+0xa0>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	4a10      	ldr	r2, [pc, #64]	@ (800b038 <TIM_Base_SetConfig+0xdc>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d103      	bne.n	800b004 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	691a      	ldr	r2, [r3, #16]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2201      	movs	r2, #1
 800b008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b01      	cmp	r3, #1
 800b014:	d105      	bne.n	800b022 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	691b      	ldr	r3, [r3, #16]
 800b01a:	f023 0201 	bic.w	r2, r3, #1
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	611a      	str	r2, [r3, #16]
  }
}
 800b022:	bf00      	nop
 800b024:	3714      	adds	r7, #20
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	40012c00 	.word	0x40012c00
 800b034:	40014400 	.word	0x40014400
 800b038:	40014800 	.word	0x40014800

0800b03c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b087      	sub	sp, #28
 800b040:	af00      	add	r7, sp, #0
 800b042:	60f8      	str	r0, [r7, #12]
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	6a1b      	ldr	r3, [r3, #32]
 800b04c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a1b      	ldr	r3, [r3, #32]
 800b052:	f023 0201 	bic.w	r2, r3, #1
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	699b      	ldr	r3, [r3, #24]
 800b05e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b066:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	011b      	lsls	r3, r3, #4
 800b06c:	693a      	ldr	r2, [r7, #16]
 800b06e:	4313      	orrs	r3, r2
 800b070:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f023 030a 	bic.w	r3, r3, #10
 800b078:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b07a:	697a      	ldr	r2, [r7, #20]
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	4313      	orrs	r3, r2
 800b080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	693a      	ldr	r2, [r7, #16]
 800b086:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	621a      	str	r2, [r3, #32]
}
 800b08e:	bf00      	nop
 800b090:	371c      	adds	r7, #28
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b087      	sub	sp, #28
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	60f8      	str	r0, [r7, #12]
 800b0a2:	60b9      	str	r1, [r7, #8]
 800b0a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	6a1b      	ldr	r3, [r3, #32]
 800b0aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6a1b      	ldr	r3, [r3, #32]
 800b0b0:	f023 0210 	bic.w	r2, r3, #16
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	699b      	ldr	r3, [r3, #24]
 800b0bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b0c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	031b      	lsls	r3, r3, #12
 800b0ca:	693a      	ldr	r2, [r7, #16]
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b0d0:	697b      	ldr	r3, [r7, #20]
 800b0d2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b0d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	011b      	lsls	r3, r3, #4
 800b0dc:	697a      	ldr	r2, [r7, #20]
 800b0de:	4313      	orrs	r3, r2
 800b0e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	693a      	ldr	r2, [r7, #16]
 800b0e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	697a      	ldr	r2, [r7, #20]
 800b0ec:	621a      	str	r2, [r3, #32]
}
 800b0ee:	bf00      	nop
 800b0f0:	371c      	adds	r7, #28
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b085      	sub	sp, #20
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
 800b102:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	689b      	ldr	r3, [r3, #8]
 800b108:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b114:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	f043 0307 	orr.w	r3, r3, #7
 800b120:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	609a      	str	r2, [r3, #8]
}
 800b128:	bf00      	nop
 800b12a:	3714      	adds	r7, #20
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b14e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	021a      	lsls	r2, r3, #8
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	431a      	orrs	r2, r3
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	4313      	orrs	r3, r2
 800b15c:	697a      	ldr	r2, [r7, #20]
 800b15e:	4313      	orrs	r3, r2
 800b160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	697a      	ldr	r2, [r7, #20]
 800b166:	609a      	str	r2, [r3, #8]
}
 800b168:	bf00      	nop
 800b16a:	371c      	adds	r7, #28
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr

0800b174 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b174:	b480      	push	{r7}
 800b176:	b085      	sub	sp, #20
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b184:	2b01      	cmp	r3, #1
 800b186:	d101      	bne.n	800b18c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b188:	2302      	movs	r3, #2
 800b18a:	e04a      	b.n	800b222 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2202      	movs	r2, #2
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689b      	ldr	r3, [r3, #8]
 800b1aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a1f      	ldr	r2, [pc, #124]	@ (800b230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d108      	bne.n	800b1c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b1bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	685b      	ldr	r3, [r3, #4]
 800b1c2:	68fa      	ldr	r2, [r7, #12]
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	68fa      	ldr	r2, [r7, #12]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a12      	ldr	r2, [pc, #72]	@ (800b230 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d004      	beq.n	800b1f6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b1f4:	d10c      	bne.n	800b210 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b1fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	689b      	ldr	r3, [r3, #8]
 800b202:	68ba      	ldr	r2, [r7, #8]
 800b204:	4313      	orrs	r3, r2
 800b206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	68ba      	ldr	r2, [r7, #8]
 800b20e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop
 800b230:	40012c00 	.word	0x40012c00

0800b234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b234:	b480      	push	{r7}
 800b236:	b083      	sub	sp, #12
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b23c:	bf00      	nop
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	4770      	bx	lr

0800b248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b250:	bf00      	nop
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b083      	sub	sp, #12
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b264:	bf00      	nop
 800b266:	370c      	adds	r7, #12
 800b268:	46bd      	mov	sp, r7
 800b26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26e:	4770      	bx	lr

0800b270 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b08a      	sub	sp, #40	@ 0x28
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	4613      	mov	r3, r2
 800b27c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b284:	2b20      	cmp	r3, #32
 800b286:	d167      	bne.n	800b358 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d002      	beq.n	800b294 <HAL_UART_Transmit_DMA+0x24>
 800b28e:	88fb      	ldrh	r3, [r7, #6]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d101      	bne.n	800b298 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e060      	b.n	800b35a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	68ba      	ldr	r2, [r7, #8]
 800b29c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	88fa      	ldrh	r2, [r7, #6]
 800b2a2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	88fa      	ldrh	r2, [r7, #6]
 800b2aa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2221      	movs	r2, #33	@ 0x21
 800b2ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d028      	beq.n	800b318 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2ca:	4a26      	ldr	r2, [pc, #152]	@ (800b364 <HAL_UART_Transmit_DMA+0xf4>)
 800b2cc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2d2:	4a25      	ldr	r2, [pc, #148]	@ (800b368 <HAL_UART_Transmit_DMA+0xf8>)
 800b2d4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2da:	4a24      	ldr	r2, [pc, #144]	@ (800b36c <HAL_UART_Transmit_DMA+0xfc>)
 800b2dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3328      	adds	r3, #40	@ 0x28
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	88fb      	ldrh	r3, [r7, #6]
 800b2fa:	f7f9 ff84 	bl	8005206 <HAL_DMA_Start_IT>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d009      	beq.n	800b318 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2210      	movs	r2, #16
 800b308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2220      	movs	r2, #32
 800b310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800b314:	2301      	movs	r3, #1
 800b316:	e020      	b.n	800b35a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2240      	movs	r2, #64	@ 0x40
 800b31e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	3308      	adds	r3, #8
 800b326:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	e853 3f00 	ldrex	r3, [r3]
 800b32e:	613b      	str	r3, [r7, #16]
   return(result);
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b336:	627b      	str	r3, [r7, #36]	@ 0x24
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	3308      	adds	r3, #8
 800b33e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b340:	623a      	str	r2, [r7, #32]
 800b342:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b344:	69f9      	ldr	r1, [r7, #28]
 800b346:	6a3a      	ldr	r2, [r7, #32]
 800b348:	e841 2300 	strex	r3, r2, [r1]
 800b34c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b34e:	69bb      	ldr	r3, [r7, #24]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d1e5      	bne.n	800b320 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b354:	2300      	movs	r3, #0
 800b356:	e000      	b.n	800b35a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b358:	2302      	movs	r3, #2
  }
}
 800b35a:	4618      	mov	r0, r3
 800b35c:	3728      	adds	r7, #40	@ 0x28
 800b35e:	46bd      	mov	sp, r7
 800b360:	bd80      	pop	{r7, pc}
 800b362:	bf00      	nop
 800b364:	0800bb47 	.word	0x0800bb47
 800b368:	0800bbe1 	.word	0x0800bbe1
 800b36c:	0800bbfd 	.word	0x0800bbfd

0800b370 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b0ba      	sub	sp, #232	@ 0xe8
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	69db      	ldr	r3, [r3, #28]
 800b37e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b396:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b39a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b39e:	4013      	ands	r3, r2
 800b3a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b3a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d11b      	bne.n	800b3e4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3b0:	f003 0320 	and.w	r3, r3, #32
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d015      	beq.n	800b3e4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3bc:	f003 0320 	and.w	r3, r3, #32
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d105      	bne.n	800b3d0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b3c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d009      	beq.n	800b3e4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	f000 82e3 	beq.w	800b9a0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	4798      	blx	r3
      }
      return;
 800b3e2:	e2dd      	b.n	800b9a0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b3e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f000 8123 	beq.w	800b634 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b3ee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b3f2:	4b8d      	ldr	r3, [pc, #564]	@ (800b628 <HAL_UART_IRQHandler+0x2b8>)
 800b3f4:	4013      	ands	r3, r2
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b3fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b3fe:	4b8b      	ldr	r3, [pc, #556]	@ (800b62c <HAL_UART_IRQHandler+0x2bc>)
 800b400:	4013      	ands	r3, r2
 800b402:	2b00      	cmp	r3, #0
 800b404:	f000 8116 	beq.w	800b634 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b40c:	f003 0301 	and.w	r3, r3, #1
 800b410:	2b00      	cmp	r3, #0
 800b412:	d011      	beq.n	800b438 <HAL_UART_IRQHandler+0xc8>
 800b414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b418:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d00b      	beq.n	800b438 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2201      	movs	r2, #1
 800b426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b42e:	f043 0201 	orr.w	r2, r3, #1
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d011      	beq.n	800b468 <HAL_UART_IRQHandler+0xf8>
 800b444:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b448:	f003 0301 	and.w	r3, r3, #1
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00b      	beq.n	800b468 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2202      	movs	r2, #2
 800b456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b45e:	f043 0204 	orr.w	r2, r3, #4
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b46c:	f003 0304 	and.w	r3, r3, #4
 800b470:	2b00      	cmp	r3, #0
 800b472:	d011      	beq.n	800b498 <HAL_UART_IRQHandler+0x128>
 800b474:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00b      	beq.n	800b498 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	2204      	movs	r2, #4
 800b486:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b48e:	f043 0202 	orr.w	r2, r3, #2
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b49c:	f003 0308 	and.w	r3, r3, #8
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d017      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4a8:	f003 0320 	and.w	r3, r3, #32
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d105      	bne.n	800b4bc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4b0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b4b4:	4b5c      	ldr	r3, [pc, #368]	@ (800b628 <HAL_UART_IRQHandler+0x2b8>)
 800b4b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d00b      	beq.n	800b4d4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2208      	movs	r2, #8
 800b4c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ca:	f043 0208 	orr.w	r2, r3, #8
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d012      	beq.n	800b506 <HAL_UART_IRQHandler+0x196>
 800b4e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d00c      	beq.n	800b506 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b4f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4fc:	f043 0220 	orr.w	r2, r3, #32
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	f000 8249 	beq.w	800b9a4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b516:	f003 0320 	and.w	r3, r3, #32
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d013      	beq.n	800b546 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b51e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b522:	f003 0320 	and.w	r3, r3, #32
 800b526:	2b00      	cmp	r3, #0
 800b528:	d105      	bne.n	800b536 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b52a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b52e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b532:	2b00      	cmp	r3, #0
 800b534:	d007      	beq.n	800b546 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d003      	beq.n	800b546 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b54c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b55a:	2b40      	cmp	r3, #64	@ 0x40
 800b55c:	d005      	beq.n	800b56a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b55e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b562:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b566:	2b00      	cmp	r3, #0
 800b568:	d054      	beq.n	800b614 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fa85 	bl	800ba7a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b57a:	2b40      	cmp	r3, #64	@ 0x40
 800b57c:	d146      	bne.n	800b60c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3308      	adds	r3, #8
 800b584:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b588:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b58c:	e853 3f00 	ldrex	r3, [r3]
 800b590:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b594:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b59c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3308      	adds	r3, #8
 800b5a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b5ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b5b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b5ba:	e841 2300 	strex	r3, r2, [r1]
 800b5be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b5c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d1d9      	bne.n	800b57e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d017      	beq.n	800b604 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5da:	4a15      	ldr	r2, [pc, #84]	@ (800b630 <HAL_UART_IRQHandler+0x2c0>)
 800b5dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	f7f9 fee8 	bl	80053ba <HAL_DMA_Abort_IT>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d019      	beq.n	800b624 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b5f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5f8:	687a      	ldr	r2, [r7, #4]
 800b5fa:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b5fe:	4610      	mov	r0, r2
 800b600:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b602:	e00f      	b.n	800b624 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 f9e1 	bl	800b9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b60a:	e00b      	b.n	800b624 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f9dd 	bl	800b9cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b612:	e007      	b.n	800b624 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f000 f9d9 	bl	800b9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b622:	e1bf      	b.n	800b9a4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b624:	bf00      	nop
    return;
 800b626:	e1bd      	b.n	800b9a4 <HAL_UART_IRQHandler+0x634>
 800b628:	10000001 	.word	0x10000001
 800b62c:	04000120 	.word	0x04000120
 800b630:	0800bc7d 	.word	0x0800bc7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b638:	2b01      	cmp	r3, #1
 800b63a:	f040 8153 	bne.w	800b8e4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b63e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b642:	f003 0310 	and.w	r3, r3, #16
 800b646:	2b00      	cmp	r3, #0
 800b648:	f000 814c 	beq.w	800b8e4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b64c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b650:	f003 0310 	and.w	r3, r3, #16
 800b654:	2b00      	cmp	r3, #0
 800b656:	f000 8145 	beq.w	800b8e4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	2210      	movs	r2, #16
 800b660:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	689b      	ldr	r3, [r3, #8]
 800b668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b66c:	2b40      	cmp	r3, #64	@ 0x40
 800b66e:	f040 80bb 	bne.w	800b7e8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b684:	2b00      	cmp	r3, #0
 800b686:	f000 818f 	beq.w	800b9a8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b690:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b694:	429a      	cmp	r2, r3
 800b696:	f080 8187 	bcs.w	800b9a8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b6a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 0320 	and.w	r3, r3, #32
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	f040 8087 	bne.w	800b7c6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b6c4:	e853 3f00 	ldrex	r3, [r3]
 800b6c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b6cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b6d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b6d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	461a      	mov	r2, r3
 800b6de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b6e2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b6e6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b6ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b6f2:	e841 2300 	strex	r3, r2, [r1]
 800b6f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b6fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1da      	bne.n	800b6b8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	3308      	adds	r3, #8
 800b708:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b70a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b70c:	e853 3f00 	ldrex	r3, [r3]
 800b710:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b712:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b714:	f023 0301 	bic.w	r3, r3, #1
 800b718:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3308      	adds	r3, #8
 800b722:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b726:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b72a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b72e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b738:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e1      	bne.n	800b702 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3308      	adds	r3, #8
 800b744:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b746:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b748:	e853 3f00 	ldrex	r3, [r3]
 800b74c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b74e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b750:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b754:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3308      	adds	r3, #8
 800b75e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b762:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b764:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b766:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b768:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b76a:	e841 2300 	strex	r3, r2, [r1]
 800b76e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b770:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b772:	2b00      	cmp	r3, #0
 800b774:	d1e3      	bne.n	800b73e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2220      	movs	r2, #32
 800b77a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b78c:	e853 3f00 	ldrex	r3, [r3]
 800b790:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b794:	f023 0310 	bic.w	r3, r3, #16
 800b798:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	461a      	mov	r2, r3
 800b7a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b7a6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b7a8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b7ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b7ae:	e841 2300 	strex	r3, r2, [r1]
 800b7b2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1e4      	bne.n	800b784 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7f9 fd9b 	bl	80052fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2202      	movs	r2, #2
 800b7ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	b29b      	uxth	r3, r3
 800b7de:	4619      	mov	r1, r3
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f000 f8fd 	bl	800b9e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b7e6:	e0df      	b.n	800b9a8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b802:	b29b      	uxth	r3, r3
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80d1 	beq.w	800b9ac <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b80a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 80cc 	beq.w	800b9ac <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b81c:	e853 3f00 	ldrex	r3, [r3]
 800b820:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b828:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	461a      	mov	r2, r3
 800b832:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b836:	647b      	str	r3, [r7, #68]	@ 0x44
 800b838:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b83a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b83c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b83e:	e841 2300 	strex	r3, r2, [r1]
 800b842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b846:	2b00      	cmp	r3, #0
 800b848:	d1e4      	bne.n	800b814 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	3308      	adds	r3, #8
 800b850:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b854:	e853 3f00 	ldrex	r3, [r3]
 800b858:	623b      	str	r3, [r7, #32]
   return(result);
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b860:	f023 0301 	bic.w	r3, r3, #1
 800b864:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3308      	adds	r3, #8
 800b86e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b872:	633a      	str	r2, [r7, #48]	@ 0x30
 800b874:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b87a:	e841 2300 	strex	r3, r2, [r1]
 800b87e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1e1      	bne.n	800b84a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2220      	movs	r2, #32
 800b88a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	2200      	movs	r2, #0
 800b898:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	e853 3f00 	ldrex	r3, [r3]
 800b8a6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f023 0310 	bic.w	r3, r3, #16
 800b8ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b8bc:	61fb      	str	r3, [r7, #28]
 800b8be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8c0:	69b9      	ldr	r1, [r7, #24]
 800b8c2:	69fa      	ldr	r2, [r7, #28]
 800b8c4:	e841 2300 	strex	r3, r2, [r1]
 800b8c8:	617b      	str	r3, [r7, #20]
   return(result);
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d1e4      	bne.n	800b89a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2202      	movs	r2, #2
 800b8d4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b8da:	4619      	mov	r1, r3
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f87f 	bl	800b9e0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8e2:	e063      	b.n	800b9ac <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b8e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b8e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d00e      	beq.n	800b90e <HAL_UART_IRQHandler+0x59e>
 800b8f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b8f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d008      	beq.n	800b90e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800b904:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f9f9 	bl	800bcfe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b90c:	e051      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b90e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b916:	2b00      	cmp	r3, #0
 800b918:	d014      	beq.n	800b944 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b91a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b91e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b922:	2b00      	cmp	r3, #0
 800b924:	d105      	bne.n	800b932 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b926:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b92a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d008      	beq.n	800b944 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b936:	2b00      	cmp	r3, #0
 800b938:	d03a      	beq.n	800b9b0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	4798      	blx	r3
    }
    return;
 800b942:	e035      	b.n	800b9b0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b944:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b948:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d009      	beq.n	800b964 <HAL_UART_IRQHandler+0x5f4>
 800b950:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f9a3 	bl	800bca8 <UART_EndTransmit_IT>
    return;
 800b962:	e026      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b968:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d009      	beq.n	800b984 <HAL_UART_IRQHandler+0x614>
 800b970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b974:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f9d2 	bl	800bd26 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b982:	e016      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b988:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d010      	beq.n	800b9b2 <HAL_UART_IRQHandler+0x642>
 800b990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b994:	2b00      	cmp	r3, #0
 800b996:	da0c      	bge.n	800b9b2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f000 f9ba 	bl	800bd12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b99e:	e008      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
      return;
 800b9a0:	bf00      	nop
 800b9a2:	e006      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
    return;
 800b9a4:	bf00      	nop
 800b9a6:	e004      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
      return;
 800b9a8:	bf00      	nop
 800b9aa:	e002      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
      return;
 800b9ac:	bf00      	nop
 800b9ae:	e000      	b.n	800b9b2 <HAL_UART_IRQHandler+0x642>
    return;
 800b9b0:	bf00      	nop
  }
}
 800b9b2:	37e8      	adds	r7, #232	@ 0xe8
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bd80      	pop	{r7, pc}

0800b9b8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b083      	sub	sp, #12
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b08f      	sub	sp, #60	@ 0x3c
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	6a3b      	ldr	r3, [r7, #32]
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ba0e:	69fb      	ldr	r3, [r7, #28]
 800ba10:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ba14:	637b      	str	r3, [r7, #52]	@ 0x34
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ba20:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ba24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ba26:	e841 2300 	strex	r3, r2, [r1]
 800ba2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d1e6      	bne.n	800ba00 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	3308      	adds	r3, #8
 800ba38:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	e853 3f00 	ldrex	r3, [r3]
 800ba40:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ba48:	633b      	str	r3, [r7, #48]	@ 0x30
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	3308      	adds	r3, #8
 800ba50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba52:	61ba      	str	r2, [r7, #24]
 800ba54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba56:	6979      	ldr	r1, [r7, #20]
 800ba58:	69ba      	ldr	r2, [r7, #24]
 800ba5a:	e841 2300 	strex	r3, r2, [r1]
 800ba5e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1e5      	bne.n	800ba32 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2220      	movs	r2, #32
 800ba6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ba6e:	bf00      	nop
 800ba70:	373c      	adds	r7, #60	@ 0x3c
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr

0800ba7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b095      	sub	sp, #84	@ 0x54
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ba8a:	e853 3f00 	ldrex	r3, [r3]
 800ba8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ba90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ba96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800baa0:	643b      	str	r3, [r7, #64]	@ 0x40
 800baa2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800baa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800baa8:	e841 2300 	strex	r3, r2, [r1]
 800baac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800baae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1e6      	bne.n	800ba82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	3308      	adds	r3, #8
 800baba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babc:	6a3b      	ldr	r3, [r7, #32]
 800babe:	e853 3f00 	ldrex	r3, [r3]
 800bac2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bac4:	69fb      	ldr	r3, [r7, #28]
 800bac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800baca:	f023 0301 	bic.w	r3, r3, #1
 800bace:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	3308      	adds	r3, #8
 800bad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bad8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bada:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800badc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bae0:	e841 2300 	strex	r3, r2, [r1]
 800bae4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d1e3      	bne.n	800bab4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d118      	bne.n	800bb26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	e853 3f00 	ldrex	r3, [r3]
 800bb00:	60bb      	str	r3, [r7, #8]
   return(result);
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	f023 0310 	bic.w	r3, r3, #16
 800bb08:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	461a      	mov	r2, r3
 800bb10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb12:	61bb      	str	r3, [r7, #24]
 800bb14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb16:	6979      	ldr	r1, [r7, #20]
 800bb18:	69ba      	ldr	r2, [r7, #24]
 800bb1a:	e841 2300 	strex	r3, r2, [r1]
 800bb1e:	613b      	str	r3, [r7, #16]
   return(result);
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d1e6      	bne.n	800baf4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2220      	movs	r2, #32
 800bb2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2200      	movs	r2, #0
 800bb32:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bb3a:	bf00      	nop
 800bb3c:	3754      	adds	r7, #84	@ 0x54
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr

0800bb46 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b090      	sub	sp, #64	@ 0x40
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb52:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d137      	bne.n	800bbd2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	2200      	movs	r2, #0
 800bb66:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	3308      	adds	r3, #8
 800bb70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	623b      	str	r3, [r7, #32]
   return(result);
 800bb7a:	6a3b      	ldr	r3, [r7, #32]
 800bb7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb80:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bb82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	3308      	adds	r3, #8
 800bb88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800bb8a:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e5      	bne.n	800bb6a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	e853 3f00 	ldrex	r3, [r3]
 800bbaa:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	461a      	mov	r2, r3
 800bbba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbbc:	61fb      	str	r3, [r7, #28]
 800bbbe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc0:	69b9      	ldr	r1, [r7, #24]
 800bbc2:	69fa      	ldr	r2, [r7, #28]
 800bbc4:	e841 2300 	strex	r3, r2, [r1]
 800bbc8:	617b      	str	r3, [r7, #20]
   return(result);
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d1e6      	bne.n	800bb9e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbd0:	e002      	b.n	800bbd8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800bbd2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bbd4:	f7f7 ff10 	bl	80039f8 <HAL_UART_TxCpltCallback>
}
 800bbd8:	bf00      	nop
 800bbda:	3740      	adds	r7, #64	@ 0x40
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b084      	sub	sp, #16
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f7ff fee2 	bl	800b9b8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbf4:	bf00      	nop
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bc24:	2b80      	cmp	r3, #128	@ 0x80
 800bc26:	d109      	bne.n	800bc3c <UART_DMAError+0x40>
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	2b21      	cmp	r3, #33	@ 0x21
 800bc2c:	d106      	bne.n	800bc3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	2200      	movs	r2, #0
 800bc32:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800bc36:	6978      	ldr	r0, [r7, #20]
 800bc38:	f7ff fede 	bl	800b9f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	689b      	ldr	r3, [r3, #8]
 800bc42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bc46:	2b40      	cmp	r3, #64	@ 0x40
 800bc48:	d109      	bne.n	800bc5e <UART_DMAError+0x62>
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	2b22      	cmp	r3, #34	@ 0x22
 800bc4e:	d106      	bne.n	800bc5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800bc50:	697b      	ldr	r3, [r7, #20]
 800bc52:	2200      	movs	r2, #0
 800bc54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800bc58:	6978      	ldr	r0, [r7, #20]
 800bc5a:	f7ff ff0e 	bl	800ba7a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc64:	f043 0210 	orr.w	r2, r3, #16
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc6e:	6978      	ldr	r0, [r7, #20]
 800bc70:	f7ff feac 	bl	800b9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc74:	bf00      	nop
 800bc76:	3718      	adds	r7, #24
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff fe96 	bl	800b9cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bca0:	bf00      	nop
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcc4:	61fb      	str	r3, [r7, #28]
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	461a      	mov	r2, r3
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	61bb      	str	r3, [r7, #24]
 800bcd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd2:	6979      	ldr	r1, [r7, #20]
 800bcd4:	69ba      	ldr	r2, [r7, #24]
 800bcd6:	e841 2300 	strex	r3, r2, [r1]
 800bcda:	613b      	str	r3, [r7, #16]
   return(result);
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e6      	bne.n	800bcb0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2220      	movs	r2, #32
 800bce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	2200      	movs	r2, #0
 800bcee:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f7f7 fe81 	bl	80039f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcf6:	bf00      	nop
 800bcf8:	3720      	adds	r7, #32
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}

0800bcfe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bcfe:	b480      	push	{r7}
 800bd00:	b083      	sub	sp, #12
 800bd02:	af00      	add	r7, sp, #0
 800bd04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bd06:	bf00      	nop
 800bd08:	370c      	adds	r7, #12
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bd12:	b480      	push	{r7}
 800bd14:	b083      	sub	sp, #12
 800bd16:	af00      	add	r7, sp, #0
 800bd18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bd1a:	bf00      	nop
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr

0800bd26 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bd26:	b480      	push	{r7}
 800bd28:	b083      	sub	sp, #12
 800bd2a:	af00      	add	r7, sp, #0
 800bd2c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bd2e:	bf00      	nop
 800bd30:	370c      	adds	r7, #12
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr

0800bd3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bd3a:	b480      	push	{r7}
 800bd3c:	b085      	sub	sp, #20
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd4a:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	b29a      	uxth	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3714      	adds	r7, #20
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bd70:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800bd74:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800bd7c:	b29a      	uxth	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	43db      	mvns	r3, r3
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	4013      	ands	r3, r2
 800bd88:	b29a      	uxth	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr

0800bd9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bd9e:	b480      	push	{r7}
 800bda0:	b085      	sub	sp, #20
 800bda2:	af00      	add	r7, sp, #0
 800bda4:	60f8      	str	r0, [r7, #12]
 800bda6:	1d3b      	adds	r3, r7, #4
 800bda8:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	2201      	movs	r2, #1
 800bdb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800bdcc:	2300      	movs	r3, #0
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3714      	adds	r7, #20
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr
	...

0800bddc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bddc:	b480      	push	{r7}
 800bdde:	b09d      	sub	sp, #116	@ 0x74
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4413      	add	r3, r2
 800bdf6:	881b      	ldrh	r3, [r3, #0]
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800bdfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be02:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	78db      	ldrb	r3, [r3, #3]
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d81f      	bhi.n	800be4e <USB_ActivateEndpoint+0x72>
 800be0e:	a201      	add	r2, pc, #4	@ (adr r2, 800be14 <USB_ActivateEndpoint+0x38>)
 800be10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be14:	0800be25 	.word	0x0800be25
 800be18:	0800be41 	.word	0x0800be41
 800be1c:	0800be57 	.word	0x0800be57
 800be20:	0800be33 	.word	0x0800be33
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800be24:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800be2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be30:	e012      	b.n	800be58 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800be32:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be36:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800be3a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be3e:	e00b      	b.n	800be58 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800be40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800be48:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800be4c:	e004      	b.n	800be58 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800be4e:	2301      	movs	r3, #1
 800be50:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800be54:	e000      	b.n	800be58 <USB_ActivateEndpoint+0x7c>
      break;
 800be56:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	441a      	add	r2, r3
 800be62:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800be66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800be6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800be6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800be72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be76:	b29b      	uxth	r3, r3
 800be78:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800be7a:	687a      	ldr	r2, [r7, #4]
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4413      	add	r3, r2
 800be84:	881b      	ldrh	r3, [r3, #0]
 800be86:	b29b      	uxth	r3, r3
 800be88:	b21b      	sxth	r3, r3
 800be8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800be8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800be92:	b21a      	sxth	r2, r3
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	781b      	ldrb	r3, [r3, #0]
 800be98:	b21b      	sxth	r3, r3
 800be9a:	4313      	orrs	r3, r2
 800be9c:	b21b      	sxth	r3, r3
 800be9e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800bea2:	687a      	ldr	r2, [r7, #4]
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	441a      	add	r2, r3
 800beac:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800beb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800beb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800beb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	7b1b      	ldrb	r3, [r3, #12]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	f040 8178 	bne.w	800c1be <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	785b      	ldrb	r3, [r3, #1]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f000 8084 	beq.w	800bfe0 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	61bb      	str	r3, [r7, #24]
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	461a      	mov	r2, r3
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	4413      	add	r3, r2
 800beea:	61bb      	str	r3, [r7, #24]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	00da      	lsls	r2, r3, #3
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	4413      	add	r3, r2
 800bef6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	683b      	ldr	r3, [r7, #0]
 800befe:	88db      	ldrh	r3, [r3, #6]
 800bf00:	085b      	lsrs	r3, r3, #1
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	005b      	lsls	r3, r3, #1
 800bf06:	b29a      	uxth	r2, r3
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bf0c:	687a      	ldr	r2, [r7, #4]
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	827b      	strh	r3, [r7, #18]
 800bf1a:	8a7b      	ldrh	r3, [r7, #18]
 800bf1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d01b      	beq.n	800bf5c <USB_ActivateEndpoint+0x180>
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	881b      	ldrh	r3, [r3, #0]
 800bf30:	b29b      	uxth	r3, r3
 800bf32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bf3a:	823b      	strh	r3, [r7, #16]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	781b      	ldrb	r3, [r3, #0]
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	441a      	add	r2, r3
 800bf46:	8a3b      	ldrh	r3, [r7, #16]
 800bf48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf54:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	78db      	ldrb	r3, [r3, #3]
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d020      	beq.n	800bfa6 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	009b      	lsls	r3, r3, #2
 800bf6c:	4413      	add	r3, r2
 800bf6e:	881b      	ldrh	r3, [r3, #0]
 800bf70:	b29b      	uxth	r3, r3
 800bf72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bf76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf7a:	81bb      	strh	r3, [r7, #12]
 800bf7c:	89bb      	ldrh	r3, [r7, #12]
 800bf7e:	f083 0320 	eor.w	r3, r3, #32
 800bf82:	81bb      	strh	r3, [r7, #12]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	441a      	add	r2, r3
 800bf8e:	89bb      	ldrh	r3, [r7, #12]
 800bf90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bf94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bf98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bf9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	8013      	strh	r3, [r2, #0]
 800bfa4:	e2d5      	b.n	800c552 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	b29b      	uxth	r3, r3
 800bfb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bfb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bfbc:	81fb      	strh	r3, [r7, #14]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	781b      	ldrb	r3, [r3, #0]
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	441a      	add	r2, r3
 800bfc8:	89fb      	ldrh	r3, [r7, #14]
 800bfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	b29b      	uxth	r3, r3
 800bfdc:	8013      	strh	r3, [r2, #0]
 800bfde:	e2b8      	b.n	800c552 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	461a      	mov	r2, r3
 800bfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bff0:	4413      	add	r3, r2
 800bff2:	633b      	str	r3, [r7, #48]	@ 0x30
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	00da      	lsls	r2, r3, #3
 800bffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bffc:	4413      	add	r3, r2
 800bffe:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c002:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	88db      	ldrh	r3, [r3, #6]
 800c008:	085b      	lsrs	r3, r3, #1
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	005b      	lsls	r3, r3, #1
 800c00e:	b29a      	uxth	r2, r3
 800c010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c012:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c01e:	b29b      	uxth	r3, r3
 800c020:	461a      	mov	r2, r3
 800c022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c024:	4413      	add	r3, r2
 800c026:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	00da      	lsls	r2, r3, #3
 800c02e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c030:	4413      	add	r3, r2
 800c032:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c036:	627b      	str	r3, [r7, #36]	@ 0x24
 800c038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c03a:	881b      	ldrh	r3, [r3, #0]
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c042:	b29a      	uxth	r2, r3
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	801a      	strh	r2, [r3, #0]
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	2b3e      	cmp	r3, #62	@ 0x3e
 800c04e:	d91d      	bls.n	800c08c <USB_ActivateEndpoint+0x2b0>
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	691b      	ldr	r3, [r3, #16]
 800c054:	095b      	lsrs	r3, r3, #5
 800c056:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	f003 031f 	and.w	r3, r3, #31
 800c060:	2b00      	cmp	r3, #0
 800c062:	d102      	bne.n	800c06a <USB_ActivateEndpoint+0x28e>
 800c064:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c066:	3b01      	subs	r3, #1
 800c068:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	b29a      	uxth	r2, r3
 800c070:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c072:	b29b      	uxth	r3, r3
 800c074:	029b      	lsls	r3, r3, #10
 800c076:	b29b      	uxth	r3, r3
 800c078:	4313      	orrs	r3, r2
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c084:	b29a      	uxth	r2, r3
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	801a      	strh	r2, [r3, #0]
 800c08a:	e026      	b.n	800c0da <USB_ActivateEndpoint+0x2fe>
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <USB_ActivateEndpoint+0x2ce>
 800c094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c096:	881b      	ldrh	r3, [r3, #0]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c0a2:	b29a      	uxth	r2, r3
 800c0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0a6:	801a      	strh	r2, [r3, #0]
 800c0a8:	e017      	b.n	800c0da <USB_ActivateEndpoint+0x2fe>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	691b      	ldr	r3, [r3, #16]
 800c0ae:	085b      	lsrs	r3, r3, #1
 800c0b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0b2:	683b      	ldr	r3, [r7, #0]
 800c0b4:	691b      	ldr	r3, [r3, #16]
 800c0b6:	f003 0301 	and.w	r3, r3, #1
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d002      	beq.n	800c0c4 <USB_ActivateEndpoint+0x2e8>
 800c0be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0c6:	881b      	ldrh	r3, [r3, #0]
 800c0c8:	b29a      	uxth	r2, r3
 800c0ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	029b      	lsls	r3, r3, #10
 800c0d0:	b29b      	uxth	r3, r3
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0d8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c0da:	687a      	ldr	r2, [r7, #4]
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	4413      	add	r3, r2
 800c0e4:	881b      	ldrh	r3, [r3, #0]
 800c0e6:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c0e8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d01b      	beq.n	800c12a <USB_ActivateEndpoint+0x34e>
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	781b      	ldrb	r3, [r3, #0]
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	b29b      	uxth	r3, r3
 800c100:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c104:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c108:	843b      	strh	r3, [r7, #32]
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	441a      	add	r2, r3
 800c114:	8c3b      	ldrh	r3, [r7, #32]
 800c116:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c11a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c11e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c126:	b29b      	uxth	r3, r3
 800c128:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d124      	bne.n	800c17c <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	781b      	ldrb	r3, [r3, #0]
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	881b      	ldrh	r3, [r3, #0]
 800c13e:	b29b      	uxth	r3, r3
 800c140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c148:	83bb      	strh	r3, [r7, #28]
 800c14a:	8bbb      	ldrh	r3, [r7, #28]
 800c14c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c150:	83bb      	strh	r3, [r7, #28]
 800c152:	8bbb      	ldrh	r3, [r7, #28]
 800c154:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c158:	83bb      	strh	r3, [r7, #28]
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	781b      	ldrb	r3, [r3, #0]
 800c160:	009b      	lsls	r3, r3, #2
 800c162:	441a      	add	r2, r3
 800c164:	8bbb      	ldrh	r3, [r7, #28]
 800c166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c16a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c176:	b29b      	uxth	r3, r3
 800c178:	8013      	strh	r3, [r2, #0]
 800c17a:	e1ea      	b.n	800c552 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c17c:	687a      	ldr	r2, [r7, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	781b      	ldrb	r3, [r3, #0]
 800c182:	009b      	lsls	r3, r3, #2
 800c184:	4413      	add	r3, r2
 800c186:	881b      	ldrh	r3, [r3, #0]
 800c188:	b29b      	uxth	r3, r3
 800c18a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c18e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c192:	83fb      	strh	r3, [r7, #30]
 800c194:	8bfb      	ldrh	r3, [r7, #30]
 800c196:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c19a:	83fb      	strh	r3, [r7, #30]
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	441a      	add	r2, r3
 800c1a6:	8bfb      	ldrh	r3, [r7, #30]
 800c1a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c1b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1b8:	b29b      	uxth	r3, r3
 800c1ba:	8013      	strh	r3, [r2, #0]
 800c1bc:	e1c9      	b.n	800c552 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	78db      	ldrb	r3, [r3, #3]
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d11e      	bne.n	800c204 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c1c6:	687a      	ldr	r2, [r7, #4]
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	781b      	ldrb	r3, [r3, #0]
 800c1cc:	009b      	lsls	r3, r3, #2
 800c1ce:	4413      	add	r3, r2
 800c1d0:	881b      	ldrh	r3, [r3, #0]
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c1d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1dc:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800c1e0:	687a      	ldr	r2, [r7, #4]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	781b      	ldrb	r3, [r3, #0]
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	441a      	add	r2, r3
 800c1ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800c1ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c1f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c1f6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800c1fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	8013      	strh	r3, [r2, #0]
 800c202:	e01d      	b.n	800c240 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	009b      	lsls	r3, r3, #2
 800c20c:	4413      	add	r3, r2
 800c20e:	881b      	ldrh	r3, [r3, #0]
 800c210:	b29b      	uxth	r3, r3
 800c212:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800c216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c21a:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	683b      	ldr	r3, [r7, #0]
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	009b      	lsls	r3, r3, #2
 800c226:	441a      	add	r2, r3
 800c228:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800c22c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c23c:	b29b      	uxth	r3, r3
 800c23e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	461a      	mov	r2, r3
 800c24e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c250:	4413      	add	r3, r2
 800c252:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	00da      	lsls	r2, r3, #3
 800c25a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c25c:	4413      	add	r3, r2
 800c25e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c262:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	891b      	ldrh	r3, [r3, #8]
 800c268:	085b      	lsrs	r3, r3, #1
 800c26a:	b29b      	uxth	r3, r3
 800c26c:	005b      	lsls	r3, r3, #1
 800c26e:	b29a      	uxth	r2, r3
 800c270:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c272:	801a      	strh	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	657b      	str	r3, [r7, #84]	@ 0x54
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c27e:	b29b      	uxth	r3, r3
 800c280:	461a      	mov	r2, r3
 800c282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c284:	4413      	add	r3, r2
 800c286:	657b      	str	r3, [r7, #84]	@ 0x54
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	00da      	lsls	r2, r3, #3
 800c28e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c290:	4413      	add	r3, r2
 800c292:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800c296:	653b      	str	r3, [r7, #80]	@ 0x50
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	895b      	ldrh	r3, [r3, #10]
 800c29c:	085b      	lsrs	r3, r3, #1
 800c29e:	b29b      	uxth	r3, r3
 800c2a0:	005b      	lsls	r3, r3, #1
 800c2a2:	b29a      	uxth	r2, r3
 800c2a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c2a6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	785b      	ldrb	r3, [r3, #1]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	f040 8093 	bne.w	800c3d8 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c2b2:	687a      	ldr	r2, [r7, #4]
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800c2c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800c2c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d01b      	beq.n	800c306 <USB_ActivateEndpoint+0x52a>
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4413      	add	r3, r2
 800c2d8:	881b      	ldrh	r3, [r3, #0]
 800c2da:	b29b      	uxth	r3, r3
 800c2dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c2e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2e4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800c2e6:	687a      	ldr	r2, [r7, #4]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	781b      	ldrb	r3, [r3, #0]
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	441a      	add	r2, r3
 800c2f0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800c2f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c2f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c2fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c302:	b29b      	uxth	r3, r3
 800c304:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	781b      	ldrb	r3, [r3, #0]
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	4413      	add	r3, r2
 800c310:	881b      	ldrh	r3, [r3, #0]
 800c312:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800c314:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800c316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d01b      	beq.n	800c356 <USB_ActivateEndpoint+0x57a>
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	683b      	ldr	r3, [r7, #0]
 800c322:	781b      	ldrb	r3, [r3, #0]
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	881b      	ldrh	r3, [r3, #0]
 800c32a:	b29b      	uxth	r3, r3
 800c32c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c330:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c334:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	781b      	ldrb	r3, [r3, #0]
 800c33c:	009b      	lsls	r3, r3, #2
 800c33e:	441a      	add	r2, r3
 800c340:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c346:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c34a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c34e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c352:	b29b      	uxth	r3, r3
 800c354:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	4413      	add	r3, r2
 800c360:	881b      	ldrh	r3, [r3, #0]
 800c362:	b29b      	uxth	r3, r3
 800c364:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c368:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c36c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c36e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c370:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c374:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c376:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c378:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c37c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	781b      	ldrb	r3, [r3, #0]
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	441a      	add	r2, r3
 800c388:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800c38a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c38e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c396:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4413      	add	r3, r2
 800c3a8:	881b      	ldrh	r3, [r3, #0]
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c3b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c3b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c3b6:	687a      	ldr	r2, [r7, #4]
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	009b      	lsls	r3, r3, #2
 800c3be:	441a      	add	r2, r3
 800c3c0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c3c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	8013      	strh	r3, [r2, #0]
 800c3d6:	e0bc      	b.n	800c552 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	781b      	ldrb	r3, [r3, #0]
 800c3de:	009b      	lsls	r3, r3, #2
 800c3e0:	4413      	add	r3, r2
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800c3e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800c3ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d01d      	beq.n	800c430 <USB_ActivateEndpoint+0x654>
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	4413      	add	r3, r2
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	b29b      	uxth	r3, r3
 800c402:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c40a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	781b      	ldrb	r3, [r3, #0]
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	441a      	add	r2, r3
 800c418:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800c41c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c420:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c424:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c428:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c42c:	b29b      	uxth	r3, r3
 800c42e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	4413      	add	r3, r2
 800c43a:	881b      	ldrh	r3, [r3, #0]
 800c43c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800c440:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800c444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d01d      	beq.n	800c488 <USB_ActivateEndpoint+0x6ac>
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4413      	add	r3, r2
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29b      	uxth	r3, r3
 800c45a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c462:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	441a      	add	r2, r3
 800c470:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800c474:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c478:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c47c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c480:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c484:	b29b      	uxth	r3, r3
 800c486:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	78db      	ldrb	r3, [r3, #3]
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d024      	beq.n	800c4da <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	4413      	add	r3, r2
 800c49a:	881b      	ldrh	r3, [r3, #0]
 800c49c:	b29b      	uxth	r3, r3
 800c49e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4a6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c4aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4ae:	f083 0320 	eor.w	r3, r3, #32
 800c4b2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	441a      	add	r2, r3
 800c4c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800c4c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c4c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c4cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c4d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4d4:	b29b      	uxth	r3, r3
 800c4d6:	8013      	strh	r3, [r2, #0]
 800c4d8:	e01d      	b.n	800c516 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	009b      	lsls	r3, r3, #2
 800c4e2:	4413      	add	r3, r2
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c4ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4f0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	683b      	ldr	r3, [r7, #0]
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	009b      	lsls	r3, r3, #2
 800c4fc:	441a      	add	r2, r3
 800c4fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800c502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c50a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c50e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c512:	b29b      	uxth	r3, r3
 800c514:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	781b      	ldrb	r3, [r3, #0]
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	881b      	ldrh	r3, [r3, #0]
 800c522:	b29b      	uxth	r3, r3
 800c524:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c528:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c52c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800c530:	687a      	ldr	r2, [r7, #4]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	781b      	ldrb	r3, [r3, #0]
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	441a      	add	r2, r3
 800c53a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800c53e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c542:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c546:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c54a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c54e:	b29b      	uxth	r3, r3
 800c550:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c552:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800c556:	4618      	mov	r0, r3
 800c558:	3774      	adds	r7, #116	@ 0x74
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
 800c562:	bf00      	nop

0800c564 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c564:	b480      	push	{r7}
 800c566:	b08d      	sub	sp, #52	@ 0x34
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	7b1b      	ldrb	r3, [r3, #12]
 800c572:	2b00      	cmp	r3, #0
 800c574:	f040 808e 	bne.w	800c694 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	785b      	ldrb	r3, [r3, #1]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d044      	beq.n	800c60a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c580:	687a      	ldr	r2, [r7, #4]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	009b      	lsls	r3, r3, #2
 800c588:	4413      	add	r3, r2
 800c58a:	881b      	ldrh	r3, [r3, #0]
 800c58c:	81bb      	strh	r3, [r7, #12]
 800c58e:	89bb      	ldrh	r3, [r7, #12]
 800c590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01b      	beq.n	800c5d0 <USB_DeactivateEndpoint+0x6c>
 800c598:	687a      	ldr	r2, [r7, #4]
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	009b      	lsls	r3, r3, #2
 800c5a0:	4413      	add	r3, r2
 800c5a2:	881b      	ldrh	r3, [r3, #0]
 800c5a4:	b29b      	uxth	r3, r3
 800c5a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c5ae:	817b      	strh	r3, [r7, #10]
 800c5b0:	687a      	ldr	r2, [r7, #4]
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	441a      	add	r2, r3
 800c5ba:	897b      	ldrh	r3, [r7, #10]
 800c5bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c5c8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	683b      	ldr	r3, [r7, #0]
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	009b      	lsls	r3, r3, #2
 800c5d8:	4413      	add	r3, r2
 800c5da:	881b      	ldrh	r3, [r3, #0]
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c5e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c5e6:	813b      	strh	r3, [r7, #8]
 800c5e8:	687a      	ldr	r2, [r7, #4]
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	009b      	lsls	r3, r3, #2
 800c5f0:	441a      	add	r2, r3
 800c5f2:	893b      	ldrh	r3, [r7, #8]
 800c5f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c5f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c5fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c604:	b29b      	uxth	r3, r3
 800c606:	8013      	strh	r3, [r2, #0]
 800c608:	e192      	b.n	800c930 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	781b      	ldrb	r3, [r3, #0]
 800c610:	009b      	lsls	r3, r3, #2
 800c612:	4413      	add	r3, r2
 800c614:	881b      	ldrh	r3, [r3, #0]
 800c616:	827b      	strh	r3, [r7, #18]
 800c618:	8a7b      	ldrh	r3, [r7, #18]
 800c61a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d01b      	beq.n	800c65a <USB_DeactivateEndpoint+0xf6>
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	683b      	ldr	r3, [r7, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	4413      	add	r3, r2
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	b29b      	uxth	r3, r3
 800c630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c638:	823b      	strh	r3, [r7, #16]
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	441a      	add	r2, r3
 800c644:	8a3b      	ldrh	r3, [r7, #16]
 800c646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c64a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c64e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c656:	b29b      	uxth	r3, r3
 800c658:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	b29b      	uxth	r3, r3
 800c668:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c66c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c670:	81fb      	strh	r3, [r7, #14]
 800c672:	687a      	ldr	r2, [r7, #4]
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	441a      	add	r2, r3
 800c67c:	89fb      	ldrh	r3, [r7, #14]
 800c67e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c682:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c686:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c68a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c68e:	b29b      	uxth	r3, r3
 800c690:	8013      	strh	r3, [r2, #0]
 800c692:	e14d      	b.n	800c930 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	785b      	ldrb	r3, [r3, #1]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	f040 80a5 	bne.w	800c7e8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	781b      	ldrb	r3, [r3, #0]
 800c6a4:	009b      	lsls	r3, r3, #2
 800c6a6:	4413      	add	r3, r2
 800c6a8:	881b      	ldrh	r3, [r3, #0]
 800c6aa:	843b      	strh	r3, [r7, #32]
 800c6ac:	8c3b      	ldrh	r3, [r7, #32]
 800c6ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d01b      	beq.n	800c6ee <USB_DeactivateEndpoint+0x18a>
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	781b      	ldrb	r3, [r3, #0]
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	4413      	add	r3, r2
 800c6c0:	881b      	ldrh	r3, [r3, #0]
 800c6c2:	b29b      	uxth	r3, r3
 800c6c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c6c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6cc:	83fb      	strh	r3, [r7, #30]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	441a      	add	r2, r3
 800c6d8:	8bfb      	ldrh	r3, [r7, #30]
 800c6da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c6de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c6e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c6e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c6ea:	b29b      	uxth	r3, r3
 800c6ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c6ee:	687a      	ldr	r2, [r7, #4]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	009b      	lsls	r3, r3, #2
 800c6f6:	4413      	add	r3, r2
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	83bb      	strh	r3, [r7, #28]
 800c6fc:	8bbb      	ldrh	r3, [r7, #28]
 800c6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c702:	2b00      	cmp	r3, #0
 800c704:	d01b      	beq.n	800c73e <USB_DeactivateEndpoint+0x1da>
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	781b      	ldrb	r3, [r3, #0]
 800c70c:	009b      	lsls	r3, r3, #2
 800c70e:	4413      	add	r3, r2
 800c710:	881b      	ldrh	r3, [r3, #0]
 800c712:	b29b      	uxth	r3, r3
 800c714:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c71c:	837b      	strh	r3, [r7, #26]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	441a      	add	r2, r3
 800c728:	8b7b      	ldrh	r3, [r7, #26]
 800c72a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c72e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c732:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c736:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4413      	add	r3, r2
 800c748:	881b      	ldrh	r3, [r3, #0]
 800c74a:	b29b      	uxth	r3, r3
 800c74c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c750:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c754:	833b      	strh	r3, [r7, #24]
 800c756:	687a      	ldr	r2, [r7, #4]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	781b      	ldrb	r3, [r3, #0]
 800c75c:	009b      	lsls	r3, r3, #2
 800c75e:	441a      	add	r2, r3
 800c760:	8b3b      	ldrh	r3, [r7, #24]
 800c762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c76a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c76e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c772:	b29b      	uxth	r3, r3
 800c774:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4413      	add	r3, r2
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	b29b      	uxth	r3, r3
 800c784:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c788:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c78c:	82fb      	strh	r3, [r7, #22]
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	441a      	add	r2, r3
 800c798:	8afb      	ldrh	r3, [r7, #22]
 800c79a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c79e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7aa:	b29b      	uxth	r3, r3
 800c7ac:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c7ae:	687a      	ldr	r2, [r7, #4]
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4413      	add	r3, r2
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	b29b      	uxth	r3, r3
 800c7bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7c4:	82bb      	strh	r3, [r7, #20]
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	441a      	add	r2, r3
 800c7d0:	8abb      	ldrh	r3, [r7, #20]
 800c7d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	8013      	strh	r3, [r2, #0]
 800c7e6:	e0a3      	b.n	800c930 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	781b      	ldrb	r3, [r3, #0]
 800c7ee:	009b      	lsls	r3, r3, #2
 800c7f0:	4413      	add	r3, r2
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800c7f6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800c7f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d01b      	beq.n	800c838 <USB_DeactivateEndpoint+0x2d4>
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	4413      	add	r3, r2
 800c80a:	881b      	ldrh	r3, [r3, #0]
 800c80c:	b29b      	uxth	r3, r3
 800c80e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c816:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	441a      	add	r2, r3
 800c822:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800c824:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c828:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c82c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c834:	b29b      	uxth	r3, r3
 800c836:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	781b      	ldrb	r3, [r3, #0]
 800c83e:	009b      	lsls	r3, r3, #2
 800c840:	4413      	add	r3, r2
 800c842:	881b      	ldrh	r3, [r3, #0]
 800c844:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800c846:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800c848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d01b      	beq.n	800c888 <USB_DeactivateEndpoint+0x324>
 800c850:	687a      	ldr	r2, [r7, #4]
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	009b      	lsls	r3, r3, #2
 800c858:	4413      	add	r3, r2
 800c85a:	881b      	ldrh	r3, [r3, #0]
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c862:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c866:	853b      	strh	r3, [r7, #40]	@ 0x28
 800c868:	687a      	ldr	r2, [r7, #4]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	009b      	lsls	r3, r3, #2
 800c870:	441a      	add	r2, r3
 800c872:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800c874:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c878:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c87c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c880:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c884:	b29b      	uxth	r3, r3
 800c886:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c888:	687a      	ldr	r2, [r7, #4]
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	009b      	lsls	r3, r3, #2
 800c890:	4413      	add	r3, r2
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	b29b      	uxth	r3, r3
 800c896:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c89a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c89e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	781b      	ldrb	r3, [r3, #0]
 800c8a6:	009b      	lsls	r3, r3, #2
 800c8a8:	441a      	add	r2, r3
 800c8aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c8ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c8b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c8c0:	687a      	ldr	r2, [r7, #4]
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	009b      	lsls	r3, r3, #2
 800c8c8:	4413      	add	r3, r2
 800c8ca:	881b      	ldrh	r3, [r3, #0]
 800c8cc:	b29b      	uxth	r3, r3
 800c8ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800c8d8:	687a      	ldr	r2, [r7, #4]
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	009b      	lsls	r3, r3, #2
 800c8e0:	441a      	add	r2, r3
 800c8e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8f4:	b29b      	uxth	r3, r3
 800c8f6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c8f8:	687a      	ldr	r2, [r7, #4]
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	4413      	add	r3, r2
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	b29b      	uxth	r3, r3
 800c906:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c90a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c90e:	847b      	strh	r3, [r7, #34]	@ 0x22
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	441a      	add	r2, r3
 800c91a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c91c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c920:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c928:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	3734      	adds	r7, #52	@ 0x34
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b0c2      	sub	sp, #264	@ 0x108
 800c942:	af00      	add	r7, sp, #0
 800c944:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c948:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c94c:	6018      	str	r0, [r3, #0]
 800c94e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c952:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c956:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c95c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	785b      	ldrb	r3, [r3, #1]
 800c964:	2b01      	cmp	r3, #1
 800c966:	f040 86b7 	bne.w	800d6d8 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c96a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c96e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c97a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	691b      	ldr	r3, [r3, #16]
 800c982:	429a      	cmp	r2, r3
 800c984:	d908      	bls.n	800c998 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c98a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800c996:	e007      	b.n	800c9a8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c99c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	699b      	ldr	r3, [r3, #24]
 800c9a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c9a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	7b1b      	ldrb	r3, [r3, #12]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d13a      	bne.n	800ca2e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c9b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	6959      	ldr	r1, [r3, #20]
 800c9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	88da      	ldrh	r2, [r3, #6]
 800c9d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800c9da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800c9de:	6800      	ldr	r0, [r0, #0]
 800c9e0:	f001 fc98 	bl	800e314 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c9e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	613b      	str	r3, [r7, #16]
 800c9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c9f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	461a      	mov	r2, r3
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	4413      	add	r3, r2
 800ca06:	613b      	str	r3, [r7, #16]
 800ca08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	00da      	lsls	r2, r3, #3
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ca1e:	60fb      	str	r3, [r7, #12]
 800ca20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca24:	b29a      	uxth	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	801a      	strh	r2, [r3, #0]
 800ca2a:	f000 be1f 	b.w	800d66c <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800ca2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	78db      	ldrb	r3, [r3, #3]
 800ca3a:	2b02      	cmp	r3, #2
 800ca3c:	f040 8462 	bne.w	800d304 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800ca40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6a1a      	ldr	r2, [r3, #32]
 800ca4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	691b      	ldr	r3, [r3, #16]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	f240 83df 	bls.w	800d21c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ca5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca66:	681a      	ldr	r2, [r3, #0]
 800ca68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	009b      	lsls	r3, r3, #2
 800ca76:	4413      	add	r3, r2
 800ca78:	881b      	ldrh	r3, [r3, #0]
 800ca7a:	b29b      	uxth	r3, r3
 800ca7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ca80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca84:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800ca88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ca96:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	781b      	ldrb	r3, [r3, #0]
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	441a      	add	r2, r3
 800caa2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800caa6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800caaa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800caae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800cab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800caba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cabe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	6a1a      	ldr	r2, [r3, #32]
 800cac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caca:	1ad2      	subs	r2, r2, r3
 800cacc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cad8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cadc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cae6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	4413      	add	r3, r2
 800caf2:	881b      	ldrh	r3, [r3, #0]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f000 81c7 	beq.w	800ce8e <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb04:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	785b      	ldrb	r3, [r3, #1]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d177      	bne.n	800cc0c <USB_EPStartXfer+0x2ce>
 800cb1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	461a      	mov	r2, r3
 800cb3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb3c:	4413      	add	r3, r2
 800cb3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cb40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cb44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	00da      	lsls	r2, r3, #3
 800cb4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb50:	4413      	add	r3, r2
 800cb52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cb56:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5a:	881b      	ldrh	r3, [r3, #0]
 800cb5c:	b29b      	uxth	r3, r3
 800cb5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb66:	801a      	strh	r2, [r3, #0]
 800cb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb6c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb6e:	d921      	bls.n	800cbb4 <USB_EPStartXfer+0x276>
 800cb70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb74:	095b      	lsrs	r3, r3, #5
 800cb76:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb7e:	f003 031f 	and.w	r3, r3, #31
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d104      	bne.n	800cb90 <USB_EPStartXfer+0x252>
 800cb86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cb90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb92:	881b      	ldrh	r3, [r3, #0]
 800cb94:	b29a      	uxth	r2, r3
 800cb96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cb9a:	b29b      	uxth	r3, r3
 800cb9c:	029b      	lsls	r3, r3, #10
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	4313      	orrs	r3, r2
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cba8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbac:	b29a      	uxth	r2, r3
 800cbae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb0:	801a      	strh	r2, [r3, #0]
 800cbb2:	e050      	b.n	800cc56 <USB_EPStartXfer+0x318>
 800cbb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10a      	bne.n	800cbd2 <USB_EPStartXfer+0x294>
 800cbbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	b29b      	uxth	r3, r3
 800cbc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cbc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbce:	801a      	strh	r2, [r3, #0]
 800cbd0:	e041      	b.n	800cc56 <USB_EPStartXfer+0x318>
 800cbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbd6:	085b      	lsrs	r3, r3, #1
 800cbd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbe0:	f003 0301 	and.w	r3, r3, #1
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d004      	beq.n	800cbf2 <USB_EPStartXfer+0x2b4>
 800cbe8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbec:	3301      	adds	r3, #1
 800cbee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	881b      	ldrh	r3, [r3, #0]
 800cbf6:	b29a      	uxth	r2, r3
 800cbf8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	029b      	lsls	r3, r3, #10
 800cc00:	b29b      	uxth	r3, r3
 800cc02:	4313      	orrs	r3, r2
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc08:	801a      	strh	r2, [r3, #0]
 800cc0a:	e024      	b.n	800cc56 <USB_EPStartXfer+0x318>
 800cc0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	785b      	ldrb	r3, [r3, #1]
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d11c      	bne.n	800cc56 <USB_EPStartXfer+0x318>
 800cc1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cc2a:	b29b      	uxth	r3, r3
 800cc2c:	461a      	mov	r2, r3
 800cc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc30:	4413      	add	r3, r2
 800cc32:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	781b      	ldrb	r3, [r3, #0]
 800cc40:	00da      	lsls	r2, r3, #3
 800cc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc44:	4413      	add	r3, r2
 800cc46:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800cc4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cc56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	895b      	ldrh	r3, [r3, #10]
 800cc62:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	6959      	ldr	r1, [r3, #20]
 800cc72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800cc7c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800cc80:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800cc84:	6800      	ldr	r0, [r0, #0]
 800cc86:	f001 fb45 	bl	800e314 <USB_WritePMA>
            ep->xfer_buff += len;
 800cc8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cc8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	695a      	ldr	r2, [r3, #20]
 800cc96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc9a:	441a      	add	r2, r3
 800cc9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cca0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	6a1a      	ldr	r2, [r3, #32]
 800ccb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	691b      	ldr	r3, [r3, #16]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d90f      	bls.n	800cce4 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800ccc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	6a1a      	ldr	r2, [r3, #32]
 800ccd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccd4:	1ad2      	subs	r2, r2, r3
 800ccd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	621a      	str	r2, [r3, #32]
 800cce2:	e00e      	b.n	800cd02 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800cce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cce8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	6a1b      	ldr	r3, [r3, #32]
 800ccf0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800ccf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ccf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cd02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	785b      	ldrb	r3, [r3, #1]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d177      	bne.n	800ce02 <USB_EPStartXfer+0x4c4>
 800cd12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	61bb      	str	r3, [r7, #24]
 800cd1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	461a      	mov	r2, r3
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	4413      	add	r3, r2
 800cd34:	61bb      	str	r3, [r7, #24]
 800cd36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cd3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	00da      	lsls	r2, r3, #3
 800cd44:	69bb      	ldr	r3, [r7, #24]
 800cd46:	4413      	add	r3, r2
 800cd48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cd4c:	617b      	str	r3, [r7, #20]
 800cd4e:	697b      	ldr	r3, [r7, #20]
 800cd50:	881b      	ldrh	r3, [r3, #0]
 800cd52:	b29b      	uxth	r3, r3
 800cd54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd58:	b29a      	uxth	r2, r3
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	801a      	strh	r2, [r3, #0]
 800cd5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd62:	2b3e      	cmp	r3, #62	@ 0x3e
 800cd64:	d921      	bls.n	800cdaa <USB_EPStartXfer+0x46c>
 800cd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd6a:	095b      	lsrs	r3, r3, #5
 800cd6c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd74:	f003 031f 	and.w	r3, r3, #31
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d104      	bne.n	800cd86 <USB_EPStartXfer+0x448>
 800cd7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd80:	3b01      	subs	r3, #1
 800cd82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	881b      	ldrh	r3, [r3, #0]
 800cd8a:	b29a      	uxth	r2, r3
 800cd8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cd90:	b29b      	uxth	r3, r3
 800cd92:	029b      	lsls	r3, r3, #10
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	4313      	orrs	r3, r2
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cda2:	b29a      	uxth	r2, r3
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	801a      	strh	r2, [r3, #0]
 800cda8:	e056      	b.n	800ce58 <USB_EPStartXfer+0x51a>
 800cdaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10a      	bne.n	800cdc8 <USB_EPStartXfer+0x48a>
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	b29b      	uxth	r3, r3
 800cdb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cdbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdc0:	b29a      	uxth	r2, r3
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	801a      	strh	r2, [r3, #0]
 800cdc6:	e047      	b.n	800ce58 <USB_EPStartXfer+0x51a>
 800cdc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdcc:	085b      	lsrs	r3, r3, #1
 800cdce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d004      	beq.n	800cde8 <USB_EPStartXfer+0x4aa>
 800cdde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cde2:	3301      	adds	r3, #1
 800cde4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cdf2:	b29b      	uxth	r3, r3
 800cdf4:	029b      	lsls	r3, r3, #10
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	801a      	strh	r2, [r3, #0]
 800ce00:	e02a      	b.n	800ce58 <USB_EPStartXfer+0x51a>
 800ce02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	785b      	ldrb	r3, [r3, #1]
 800ce0e:	2b01      	cmp	r3, #1
 800ce10:	d122      	bne.n	800ce58 <USB_EPStartXfer+0x51a>
 800ce12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	623b      	str	r3, [r7, #32]
 800ce1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	461a      	mov	r2, r3
 800ce30:	6a3b      	ldr	r3, [r7, #32]
 800ce32:	4413      	add	r3, r2
 800ce34:	623b      	str	r3, [r7, #32]
 800ce36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	781b      	ldrb	r3, [r3, #0]
 800ce42:	00da      	lsls	r2, r3, #3
 800ce44:	6a3b      	ldr	r3, [r7, #32]
 800ce46:	4413      	add	r3, r2
 800ce48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ce4c:	61fb      	str	r3, [r7, #28]
 800ce4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce52:	b29a      	uxth	r2, r3
 800ce54:	69fb      	ldr	r3, [r7, #28]
 800ce56:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ce58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	891b      	ldrh	r3, [r3, #8]
 800ce64:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6959      	ldr	r1, [r3, #20]
 800ce74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ce7e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ce82:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ce86:	6800      	ldr	r0, [r0, #0]
 800ce88:	f001 fa44 	bl	800e314 <USB_WritePMA>
 800ce8c:	e3ee      	b.n	800d66c <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ce8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ce92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	785b      	ldrb	r3, [r3, #1]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d177      	bne.n	800cf8e <USB_EPStartXfer+0x650>
 800ce9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cea2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ceaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ceae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ceb8:	b29b      	uxth	r3, r3
 800ceba:	461a      	mov	r2, r3
 800cebc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cebe:	4413      	add	r3, r2
 800cec0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cec6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	00da      	lsls	r2, r3, #3
 800ced0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ced2:	4413      	add	r3, r2
 800ced4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ced8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ceda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cedc:	881b      	ldrh	r3, [r3, #0]
 800cede:	b29b      	uxth	r3, r3
 800cee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cee4:	b29a      	uxth	r2, r3
 800cee6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cee8:	801a      	strh	r2, [r3, #0]
 800ceea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceee:	2b3e      	cmp	r3, #62	@ 0x3e
 800cef0:	d921      	bls.n	800cf36 <USB_EPStartXfer+0x5f8>
 800cef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cef6:	095b      	lsrs	r3, r3, #5
 800cef8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cefc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf00:	f003 031f 	and.w	r3, r3, #31
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d104      	bne.n	800cf12 <USB_EPStartXfer+0x5d4>
 800cf08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf0c:	3b01      	subs	r3, #1
 800cf0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf14:	881b      	ldrh	r3, [r3, #0]
 800cf16:	b29a      	uxth	r2, r3
 800cf18:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	029b      	lsls	r3, r3, #10
 800cf20:	b29b      	uxth	r3, r3
 800cf22:	4313      	orrs	r3, r2
 800cf24:	b29b      	uxth	r3, r3
 800cf26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf2e:	b29a      	uxth	r2, r3
 800cf30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf32:	801a      	strh	r2, [r3, #0]
 800cf34:	e056      	b.n	800cfe4 <USB_EPStartXfer+0x6a6>
 800cf36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10a      	bne.n	800cf54 <USB_EPStartXfer+0x616>
 800cf3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf40:	881b      	ldrh	r3, [r3, #0]
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf4c:	b29a      	uxth	r2, r3
 800cf4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf50:	801a      	strh	r2, [r3, #0]
 800cf52:	e047      	b.n	800cfe4 <USB_EPStartXfer+0x6a6>
 800cf54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf58:	085b      	lsrs	r3, r3, #1
 800cf5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf62:	f003 0301 	and.w	r3, r3, #1
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d004      	beq.n	800cf74 <USB_EPStartXfer+0x636>
 800cf6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf6e:	3301      	adds	r3, #1
 800cf70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800cf74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf76:	881b      	ldrh	r3, [r3, #0]
 800cf78:	b29a      	uxth	r2, r3
 800cf7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	029b      	lsls	r3, r3, #10
 800cf82:	b29b      	uxth	r3, r3
 800cf84:	4313      	orrs	r3, r2
 800cf86:	b29a      	uxth	r2, r3
 800cf88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf8a:	801a      	strh	r2, [r3, #0]
 800cf8c:	e02a      	b.n	800cfe4 <USB_EPStartXfer+0x6a6>
 800cf8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cf92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	785b      	ldrb	r3, [r3, #1]
 800cf9a:	2b01      	cmp	r3, #1
 800cf9c:	d122      	bne.n	800cfe4 <USB_EPStartXfer+0x6a6>
 800cf9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800cfb8:	b29b      	uxth	r3, r3
 800cfba:	461a      	mov	r2, r3
 800cfbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfbe:	4413      	add	r3, r2
 800cfc0:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	00da      	lsls	r2, r3, #3
 800cfd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cfd2:	4413      	add	r3, r2
 800cfd4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800cfd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cfda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfde:	b29a      	uxth	r2, r3
 800cfe0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfe2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cfe4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cfe8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	891b      	ldrh	r3, [r3, #8]
 800cff0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cff4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800cff8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	6959      	ldr	r1, [r3, #20]
 800d000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d004:	b29b      	uxth	r3, r3
 800d006:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d00a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d00e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d012:	6800      	ldr	r0, [r0, #0]
 800d014:	f001 f97e 	bl	800e314 <USB_WritePMA>
            ep->xfer_buff += len;
 800d018:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d01c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	695a      	ldr	r2, [r3, #20]
 800d024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d028:	441a      	add	r2, r3
 800d02a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d02e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800d036:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d03a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	6a1a      	ldr	r2, [r3, #32]
 800d042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	691b      	ldr	r3, [r3, #16]
 800d04e:	429a      	cmp	r2, r3
 800d050:	d90f      	bls.n	800d072 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800d052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6a1a      	ldr	r2, [r3, #32]
 800d05e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d062:	1ad2      	subs	r2, r2, r3
 800d064:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d068:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	621a      	str	r2, [r3, #32]
 800d070:	e00e      	b.n	800d090 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800d072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6a1b      	ldr	r3, [r3, #32]
 800d07e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800d082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2200      	movs	r2, #0
 800d08e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	785b      	ldrb	r3, [r3, #1]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d177      	bne.n	800d19c <USB_EPStartXfer+0x85e>
 800d0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0bc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0cc:	4413      	add	r3, r2
 800d0ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d0d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d0d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	00da      	lsls	r2, r3, #3
 800d0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0e0:	4413      	add	r3, r2
 800d0e2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d0e6:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0ea:	881b      	ldrh	r3, [r3, #0]
 800d0ec:	b29b      	uxth	r3, r3
 800d0ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d0f2:	b29a      	uxth	r2, r3
 800d0f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d0f6:	801a      	strh	r2, [r3, #0]
 800d0f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0fc:	2b3e      	cmp	r3, #62	@ 0x3e
 800d0fe:	d921      	bls.n	800d144 <USB_EPStartXfer+0x806>
 800d100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d104:	095b      	lsrs	r3, r3, #5
 800d106:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d10e:	f003 031f 	and.w	r3, r3, #31
 800d112:	2b00      	cmp	r3, #0
 800d114:	d104      	bne.n	800d120 <USB_EPStartXfer+0x7e2>
 800d116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d11a:	3b01      	subs	r3, #1
 800d11c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d122:	881b      	ldrh	r3, [r3, #0]
 800d124:	b29a      	uxth	r2, r3
 800d126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d12a:	b29b      	uxth	r3, r3
 800d12c:	029b      	lsls	r3, r3, #10
 800d12e:	b29b      	uxth	r3, r3
 800d130:	4313      	orrs	r3, r2
 800d132:	b29b      	uxth	r3, r3
 800d134:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d138:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d13c:	b29a      	uxth	r2, r3
 800d13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d140:	801a      	strh	r2, [r3, #0]
 800d142:	e050      	b.n	800d1e6 <USB_EPStartXfer+0x8a8>
 800d144:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10a      	bne.n	800d162 <USB_EPStartXfer+0x824>
 800d14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d14e:	881b      	ldrh	r3, [r3, #0]
 800d150:	b29b      	uxth	r3, r3
 800d152:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d156:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15e:	801a      	strh	r2, [r3, #0]
 800d160:	e041      	b.n	800d1e6 <USB_EPStartXfer+0x8a8>
 800d162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d166:	085b      	lsrs	r3, r3, #1
 800d168:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d16c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d170:	f003 0301 	and.w	r3, r3, #1
 800d174:	2b00      	cmp	r3, #0
 800d176:	d004      	beq.n	800d182 <USB_EPStartXfer+0x844>
 800d178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d17c:	3301      	adds	r3, #1
 800d17e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d184:	881b      	ldrh	r3, [r3, #0]
 800d186:	b29a      	uxth	r2, r3
 800d188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	029b      	lsls	r3, r3, #10
 800d190:	b29b      	uxth	r3, r3
 800d192:	4313      	orrs	r3, r2
 800d194:	b29a      	uxth	r2, r3
 800d196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d198:	801a      	strh	r2, [r3, #0]
 800d19a:	e024      	b.n	800d1e6 <USB_EPStartXfer+0x8a8>
 800d19c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	785b      	ldrb	r3, [r3, #1]
 800d1a8:	2b01      	cmp	r3, #1
 800d1aa:	d11c      	bne.n	800d1e6 <USB_EPStartXfer+0x8a8>
 800d1ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	461a      	mov	r2, r3
 800d1be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1c0:	4413      	add	r3, r2
 800d1c2:	643b      	str	r3, [r7, #64]	@ 0x40
 800d1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	00da      	lsls	r2, r3, #3
 800d1d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1d4:	4413      	add	r3, r2
 800d1d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1e0:	b29a      	uxth	r2, r3
 800d1e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d1e4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800d1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	895b      	ldrh	r3, [r3, #10]
 800d1f2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d1f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d1fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	6959      	ldr	r1, [r3, #20]
 800d202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d206:	b29b      	uxth	r3, r3
 800d208:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d20c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d210:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d214:	6800      	ldr	r0, [r0, #0]
 800d216:	f001 f87d 	bl	800e314 <USB_WritePMA>
 800d21a:	e227      	b.n	800d66c <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800d21c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	6a1b      	ldr	r3, [r3, #32]
 800d228:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800d22c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d230:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	781b      	ldrb	r3, [r3, #0]
 800d242:	009b      	lsls	r3, r3, #2
 800d244:	4413      	add	r3, r2
 800d246:	881b      	ldrh	r3, [r3, #0]
 800d248:	b29b      	uxth	r3, r3
 800d24a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d24e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d252:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d25a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d25e:	681a      	ldr	r2, [r3, #0]
 800d260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	009b      	lsls	r3, r3, #2
 800d26e:	441a      	add	r2, r3
 800d270:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d27c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d284:	b29b      	uxth	r3, r3
 800d286:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800d288:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d28c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d294:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d298:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	461a      	mov	r2, r3
 800d2a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2a8:	4413      	add	r3, r2
 800d2aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d2ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	00da      	lsls	r2, r3, #3
 800d2ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d2bc:	4413      	add	r3, r2
 800d2be:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d2c2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d2cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	891b      	ldrh	r3, [r3, #8]
 800d2da:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d2de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d2e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	6959      	ldr	r1, [r3, #20]
 800d2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2ee:	b29b      	uxth	r3, r3
 800d2f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d2f4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d2f8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d2fc:	6800      	ldr	r0, [r0, #0]
 800d2fe:	f001 f809 	bl	800e314 <USB_WritePMA>
 800d302:	e1b3      	b.n	800d66c <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800d304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6a1a      	ldr	r2, [r3, #32]
 800d310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d314:	1ad2      	subs	r2, r2, r3
 800d316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800d322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4413      	add	r3, r2
 800d33c:	881b      	ldrh	r3, [r3, #0]
 800d33e:	b29b      	uxth	r3, r3
 800d340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d344:	2b00      	cmp	r3, #0
 800d346:	f000 80c6 	beq.w	800d4d6 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800d34a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d34e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	673b      	str	r3, [r7, #112]	@ 0x70
 800d356:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d35a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	785b      	ldrb	r3, [r3, #1]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d177      	bne.n	800d456 <USB_EPStartXfer+0xb18>
 800d366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d36a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d372:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d376:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d380:	b29b      	uxth	r3, r3
 800d382:	461a      	mov	r2, r3
 800d384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d386:	4413      	add	r3, r2
 800d388:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d38e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	00da      	lsls	r2, r3, #3
 800d398:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d39a:	4413      	add	r3, r2
 800d39c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d3a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800d3a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3a4:	881b      	ldrh	r3, [r3, #0]
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d3ac:	b29a      	uxth	r2, r3
 800d3ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3b0:	801a      	strh	r2, [r3, #0]
 800d3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3b8:	d921      	bls.n	800d3fe <USB_EPStartXfer+0xac0>
 800d3ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3be:	095b      	lsrs	r3, r3, #5
 800d3c0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3c8:	f003 031f 	and.w	r3, r3, #31
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d104      	bne.n	800d3da <USB_EPStartXfer+0xa9c>
 800d3d0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d3da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3dc:	881b      	ldrh	r3, [r3, #0]
 800d3de:	b29a      	uxth	r2, r3
 800d3e0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	029b      	lsls	r3, r3, #10
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	4313      	orrs	r3, r2
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d3f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d3fa:	801a      	strh	r2, [r3, #0]
 800d3fc:	e050      	b.n	800d4a0 <USB_EPStartXfer+0xb62>
 800d3fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d402:	2b00      	cmp	r3, #0
 800d404:	d10a      	bne.n	800d41c <USB_EPStartXfer+0xade>
 800d406:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d408:	881b      	ldrh	r3, [r3, #0]
 800d40a:	b29b      	uxth	r3, r3
 800d40c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d414:	b29a      	uxth	r2, r3
 800d416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d418:	801a      	strh	r2, [r3, #0]
 800d41a:	e041      	b.n	800d4a0 <USB_EPStartXfer+0xb62>
 800d41c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d420:	085b      	lsrs	r3, r3, #1
 800d422:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d426:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d42a:	f003 0301 	and.w	r3, r3, #1
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d004      	beq.n	800d43c <USB_EPStartXfer+0xafe>
 800d432:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d436:	3301      	adds	r3, #1
 800d438:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d43c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	b29a      	uxth	r2, r3
 800d442:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800d446:	b29b      	uxth	r3, r3
 800d448:	029b      	lsls	r3, r3, #10
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	4313      	orrs	r3, r2
 800d44e:	b29a      	uxth	r2, r3
 800d450:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d452:	801a      	strh	r2, [r3, #0]
 800d454:	e024      	b.n	800d4a0 <USB_EPStartXfer+0xb62>
 800d456:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d45a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	785b      	ldrb	r3, [r3, #1]
 800d462:	2b01      	cmp	r3, #1
 800d464:	d11c      	bne.n	800d4a0 <USB_EPStartXfer+0xb62>
 800d466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d46a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d474:	b29b      	uxth	r3, r3
 800d476:	461a      	mov	r2, r3
 800d478:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d47a:	4413      	add	r3, r2
 800d47c:	673b      	str	r3, [r7, #112]	@ 0x70
 800d47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	00da      	lsls	r2, r3, #3
 800d48c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d48e:	4413      	add	r3, r2
 800d490:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d494:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d49a:	b29a      	uxth	r2, r3
 800d49c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d49e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800d4a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	895b      	ldrh	r3, [r3, #10]
 800d4ac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d4b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	6959      	ldr	r1, [r3, #20]
 800d4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4c0:	b29b      	uxth	r3, r3
 800d4c2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d4c6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d4ca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d4ce:	6800      	ldr	r0, [r0, #0]
 800d4d0:	f000 ff20 	bl	800e314 <USB_WritePMA>
 800d4d4:	e0ca      	b.n	800d66c <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800d4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	785b      	ldrb	r3, [r3, #1]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d177      	bne.n	800d5d6 <USB_EPStartXfer+0xc98>
 800d4e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d4f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d4f6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d500:	b29b      	uxth	r3, r3
 800d502:	461a      	mov	r2, r3
 800d504:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d506:	4413      	add	r3, r2
 800d508:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d50e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	00da      	lsls	r2, r3, #3
 800d518:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800d51a:	4413      	add	r3, r2
 800d51c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d520:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d522:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d524:	881b      	ldrh	r3, [r3, #0]
 800d526:	b29b      	uxth	r3, r3
 800d528:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d52c:	b29a      	uxth	r2, r3
 800d52e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d530:	801a      	strh	r2, [r3, #0]
 800d532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d536:	2b3e      	cmp	r3, #62	@ 0x3e
 800d538:	d921      	bls.n	800d57e <USB_EPStartXfer+0xc40>
 800d53a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d53e:	095b      	lsrs	r3, r3, #5
 800d540:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d544:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d548:	f003 031f 	and.w	r3, r3, #31
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d104      	bne.n	800d55a <USB_EPStartXfer+0xc1c>
 800d550:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d554:	3b01      	subs	r3, #1
 800d556:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d55a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d55c:	881b      	ldrh	r3, [r3, #0]
 800d55e:	b29a      	uxth	r2, r3
 800d560:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d564:	b29b      	uxth	r3, r3
 800d566:	029b      	lsls	r3, r3, #10
 800d568:	b29b      	uxth	r3, r3
 800d56a:	4313      	orrs	r3, r2
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d572:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d576:	b29a      	uxth	r2, r3
 800d578:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d57a:	801a      	strh	r2, [r3, #0]
 800d57c:	e05c      	b.n	800d638 <USB_EPStartXfer+0xcfa>
 800d57e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10a      	bne.n	800d59c <USB_EPStartXfer+0xc5e>
 800d586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d594:	b29a      	uxth	r2, r3
 800d596:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d598:	801a      	strh	r2, [r3, #0]
 800d59a:	e04d      	b.n	800d638 <USB_EPStartXfer+0xcfa>
 800d59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5a0:	085b      	lsrs	r3, r3, #1
 800d5a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d5a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d004      	beq.n	800d5bc <USB_EPStartXfer+0xc7e>
 800d5b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d5bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5be:	881b      	ldrh	r3, [r3, #0]
 800d5c0:	b29a      	uxth	r2, r3
 800d5c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800d5c6:	b29b      	uxth	r3, r3
 800d5c8:	029b      	lsls	r3, r3, #10
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	b29a      	uxth	r2, r3
 800d5d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5d2:	801a      	strh	r2, [r3, #0]
 800d5d4:	e030      	b.n	800d638 <USB_EPStartXfer+0xcfa>
 800d5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	785b      	ldrb	r3, [r3, #1]
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d128      	bne.n	800d638 <USB_EPStartXfer+0xcfa>
 800d5e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d5f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d5f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d602:	b29b      	uxth	r3, r3
 800d604:	461a      	mov	r2, r3
 800d606:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d60a:	4413      	add	r3, r2
 800d60c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d614:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	00da      	lsls	r2, r3, #3
 800d61e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d622:	4413      	add	r3, r2
 800d624:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d630:	b29a      	uxth	r2, r3
 800d632:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d636:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d63c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	891b      	ldrh	r3, [r3, #8]
 800d644:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d64c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6959      	ldr	r1, [r3, #20]
 800d654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d658:	b29b      	uxth	r3, r3
 800d65a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800d65e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800d662:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800d666:	6800      	ldr	r0, [r0, #0]
 800d668:	f000 fe54 	bl	800e314 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d670:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d674:	681a      	ldr	r2, [r3, #0]
 800d676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d67a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	009b      	lsls	r3, r3, #2
 800d684:	4413      	add	r3, r2
 800d686:	881b      	ldrh	r3, [r3, #0]
 800d688:	b29b      	uxth	r3, r3
 800d68a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d68e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d692:	817b      	strh	r3, [r7, #10]
 800d694:	897b      	ldrh	r3, [r7, #10]
 800d696:	f083 0310 	eor.w	r3, r3, #16
 800d69a:	817b      	strh	r3, [r7, #10]
 800d69c:	897b      	ldrh	r3, [r7, #10]
 800d69e:	f083 0320 	eor.w	r3, r3, #32
 800d6a2:	817b      	strh	r3, [r7, #10]
 800d6a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d6ac:	681a      	ldr	r2, [r3, #0]
 800d6ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	441a      	add	r2, r3
 800d6be:	897b      	ldrh	r3, [r7, #10]
 800d6c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	8013      	strh	r3, [r2, #0]
 800d6d4:	f000 bcde 	b.w	800e094 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d6d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	7b1b      	ldrb	r3, [r3, #12]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f040 80bb 	bne.w	800d860 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	699a      	ldr	r2, [r3, #24]
 800d6f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d6fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	691b      	ldr	r3, [r3, #16]
 800d702:	429a      	cmp	r2, r3
 800d704:	d917      	bls.n	800d736 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800d706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	691b      	ldr	r3, [r3, #16]
 800d712:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800d716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d71a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	699a      	ldr	r2, [r3, #24]
 800d722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d726:	1ad2      	subs	r2, r2, r3
 800d728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d72c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	619a      	str	r2, [r3, #24]
 800d734:	e00e      	b.n	800d754 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800d736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d73a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800d746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d74a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2200      	movs	r2, #0
 800d752:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d770:	b29b      	uxth	r3, r3
 800d772:	461a      	mov	r2, r3
 800d774:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d778:	4413      	add	r3, r2
 800d77a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	781b      	ldrb	r3, [r3, #0]
 800d78a:	00da      	lsls	r2, r3, #3
 800d78c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800d790:	4413      	add	r3, r2
 800d792:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d79a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d79e:	881b      	ldrh	r3, [r3, #0]
 800d7a0:	b29b      	uxth	r3, r3
 800d7a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7a6:	b29a      	uxth	r2, r3
 800d7a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7ac:	801a      	strh	r2, [r3, #0]
 800d7ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d7b4:	d924      	bls.n	800d800 <USB_EPStartXfer+0xec2>
 800d7b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7ba:	095b      	lsrs	r3, r3, #5
 800d7bc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d7c4:	f003 031f 	and.w	r3, r3, #31
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d104      	bne.n	800d7d6 <USB_EPStartXfer+0xe98>
 800d7cc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d7d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7da:	881b      	ldrh	r3, [r3, #0]
 800d7dc:	b29a      	uxth	r2, r3
 800d7de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	029b      	lsls	r3, r3, #10
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	4313      	orrs	r3, r2
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d7f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d7f4:	b29a      	uxth	r2, r3
 800d7f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d7fa:	801a      	strh	r2, [r3, #0]
 800d7fc:	f000 bc10 	b.w	800e020 <USB_EPStartXfer+0x16e2>
 800d800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10c      	bne.n	800d822 <USB_EPStartXfer+0xee4>
 800d808:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d80c:	881b      	ldrh	r3, [r3, #0]
 800d80e:	b29b      	uxth	r3, r3
 800d810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d818:	b29a      	uxth	r2, r3
 800d81a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d81e:	801a      	strh	r2, [r3, #0]
 800d820:	e3fe      	b.n	800e020 <USB_EPStartXfer+0x16e2>
 800d822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d826:	085b      	lsrs	r3, r3, #1
 800d828:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d004      	beq.n	800d842 <USB_EPStartXfer+0xf04>
 800d838:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d83c:	3301      	adds	r3, #1
 800d83e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d846:	881b      	ldrh	r3, [r3, #0]
 800d848:	b29a      	uxth	r2, r3
 800d84a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800d84e:	b29b      	uxth	r3, r3
 800d850:	029b      	lsls	r3, r3, #10
 800d852:	b29b      	uxth	r3, r3
 800d854:	4313      	orrs	r3, r2
 800d856:	b29a      	uxth	r2, r3
 800d858:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d85c:	801a      	strh	r2, [r3, #0]
 800d85e:	e3df      	b.n	800e020 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	78db      	ldrb	r3, [r3, #3]
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	f040 8218 	bne.w	800dca2 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d872:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d876:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	785b      	ldrb	r3, [r3, #1]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	f040 809d 	bne.w	800d9be <USB_EPStartXfer+0x1080>
 800d884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d888:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d892:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d896:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8a8:	4413      	add	r3, r2
 800d8aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d8ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	00da      	lsls	r2, r3, #3
 800d8bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8c0:	4413      	add	r3, r2
 800d8c2:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800d8c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d8ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8ce:	881b      	ldrh	r3, [r3, #0]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d8dc:	801a      	strh	r2, [r3, #0]
 800d8de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	691b      	ldr	r3, [r3, #16]
 800d8ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800d8ec:	d92b      	bls.n	800d946 <USB_EPStartXfer+0x1008>
 800d8ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d8f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	691b      	ldr	r3, [r3, #16]
 800d8fa:	095b      	lsrs	r3, r3, #5
 800d8fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d904:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	691b      	ldr	r3, [r3, #16]
 800d90c:	f003 031f 	and.w	r3, r3, #31
 800d910:	2b00      	cmp	r3, #0
 800d912:	d104      	bne.n	800d91e <USB_EPStartXfer+0xfe0>
 800d914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d918:	3b01      	subs	r3, #1
 800d91a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d91e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d922:	881b      	ldrh	r3, [r3, #0]
 800d924:	b29a      	uxth	r2, r3
 800d926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	029b      	lsls	r3, r3, #10
 800d92e:	b29b      	uxth	r3, r3
 800d930:	4313      	orrs	r3, r2
 800d932:	b29b      	uxth	r3, r3
 800d934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d93c:	b29a      	uxth	r2, r3
 800d93e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d942:	801a      	strh	r2, [r3, #0]
 800d944:	e070      	b.n	800da28 <USB_EPStartXfer+0x10ea>
 800d946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d94a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	691b      	ldr	r3, [r3, #16]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d10c      	bne.n	800d970 <USB_EPStartXfer+0x1032>
 800d956:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d95a:	881b      	ldrh	r3, [r3, #0]
 800d95c:	b29b      	uxth	r3, r3
 800d95e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d962:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d966:	b29a      	uxth	r2, r3
 800d968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d96c:	801a      	strh	r2, [r3, #0]
 800d96e:	e05b      	b.n	800da28 <USB_EPStartXfer+0x10ea>
 800d970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	691b      	ldr	r3, [r3, #16]
 800d97c:	085b      	lsrs	r3, r3, #1
 800d97e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	691b      	ldr	r3, [r3, #16]
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	2b00      	cmp	r3, #0
 800d994:	d004      	beq.n	800d9a0 <USB_EPStartXfer+0x1062>
 800d996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d99a:	3301      	adds	r3, #1
 800d99c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d9a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9a4:	881b      	ldrh	r3, [r3, #0]
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	029b      	lsls	r3, r3, #10
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9ba:	801a      	strh	r2, [r3, #0]
 800d9bc:	e034      	b.n	800da28 <USB_EPStartXfer+0x10ea>
 800d9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	785b      	ldrb	r3, [r3, #1]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d12c      	bne.n	800da28 <USB_EPStartXfer+0x10ea>
 800d9ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d9dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d9ea:	b29b      	uxth	r3, r3
 800d9ec:	461a      	mov	r2, r3
 800d9ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800d9f2:	4413      	add	r3, r2
 800d9f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d9f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800d9fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	781b      	ldrb	r3, [r3, #0]
 800da04:	00da      	lsls	r2, r3, #3
 800da06:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800da0a:	4413      	add	r3, r2
 800da0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800da10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800da14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	b29a      	uxth	r2, r3
 800da22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800da26:	801a      	strh	r2, [r3, #0]
 800da28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da2c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800da36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	785b      	ldrb	r3, [r3, #1]
 800da42:	2b00      	cmp	r3, #0
 800da44:	f040 809d 	bne.w	800db82 <USB_EPStartXfer+0x1244>
 800da48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da64:	b29b      	uxth	r3, r3
 800da66:	461a      	mov	r2, r3
 800da68:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da6c:	4413      	add	r3, r2
 800da6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800da72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800da76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	00da      	lsls	r2, r3, #3
 800da80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800da84:	4413      	add	r3, r2
 800da86:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800da8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800da8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800da92:	881b      	ldrh	r3, [r3, #0]
 800da94:	b29b      	uxth	r3, r3
 800da96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800daa0:	801a      	strh	r2, [r3, #0]
 800daa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	691b      	ldr	r3, [r3, #16]
 800daae:	2b3e      	cmp	r3, #62	@ 0x3e
 800dab0:	d92b      	bls.n	800db0a <USB_EPStartXfer+0x11cc>
 800dab2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dab6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	691b      	ldr	r3, [r3, #16]
 800dabe:	095b      	lsrs	r3, r3, #5
 800dac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dac4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dac8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	691b      	ldr	r3, [r3, #16]
 800dad0:	f003 031f 	and.w	r3, r3, #31
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d104      	bne.n	800dae2 <USB_EPStartXfer+0x11a4>
 800dad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800dadc:	3b01      	subs	r3, #1
 800dade:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800dae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800dae6:	881b      	ldrh	r3, [r3, #0]
 800dae8:	b29a      	uxth	r2, r3
 800daea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800daee:	b29b      	uxth	r3, r3
 800daf0:	029b      	lsls	r3, r3, #10
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	4313      	orrs	r3, r2
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dafc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db00:	b29a      	uxth	r2, r3
 800db02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db06:	801a      	strh	r2, [r3, #0]
 800db08:	e069      	b.n	800dbde <USB_EPStartXfer+0x12a0>
 800db0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	691b      	ldr	r3, [r3, #16]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d10c      	bne.n	800db34 <USB_EPStartXfer+0x11f6>
 800db1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db1e:	881b      	ldrh	r3, [r3, #0]
 800db20:	b29b      	uxth	r3, r3
 800db22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800db26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800db2a:	b29a      	uxth	r2, r3
 800db2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db30:	801a      	strh	r2, [r3, #0]
 800db32:	e054      	b.n	800dbde <USB_EPStartXfer+0x12a0>
 800db34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	085b      	lsrs	r3, r3, #1
 800db42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	691b      	ldr	r3, [r3, #16]
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	2b00      	cmp	r3, #0
 800db58:	d004      	beq.n	800db64 <USB_EPStartXfer+0x1226>
 800db5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db5e:	3301      	adds	r3, #1
 800db60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800db64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	b29a      	uxth	r2, r3
 800db6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db70:	b29b      	uxth	r3, r3
 800db72:	029b      	lsls	r3, r3, #10
 800db74:	b29b      	uxth	r3, r3
 800db76:	4313      	orrs	r3, r2
 800db78:	b29a      	uxth	r2, r3
 800db7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800db7e:	801a      	strh	r2, [r3, #0]
 800db80:	e02d      	b.n	800dbde <USB_EPStartXfer+0x12a0>
 800db82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	785b      	ldrb	r3, [r3, #1]
 800db8e:	2b01      	cmp	r3, #1
 800db90:	d125      	bne.n	800dbde <USB_EPStartXfer+0x12a0>
 800db92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dba0:	b29b      	uxth	r3, r3
 800dba2:	461a      	mov	r2, r3
 800dba4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dba8:	4413      	add	r3, r2
 800dbaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dbae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	00da      	lsls	r2, r3, #3
 800dbbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dbc0:	4413      	add	r3, r2
 800dbc2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dbc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800dbca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	691b      	ldr	r3, [r3, #16]
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800dbdc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800dbde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbe2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	69db      	ldr	r3, [r3, #28]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 8218 	beq.w	800e020 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800dbf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dbf8:	681a      	ldr	r2, [r3, #0]
 800dbfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4413      	add	r3, r2
 800dc0a:	881b      	ldrh	r3, [r3, #0]
 800dc0c:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dc10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d005      	beq.n	800dc28 <USB_EPStartXfer+0x12ea>
 800dc1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d10d      	bne.n	800dc44 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dc28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f040 81f5 	bne.w	800e020 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800dc36:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800dc3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	f040 81ee 	bne.w	800e020 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800dc44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc4c:	681a      	ldr	r2, [r3, #0]
 800dc4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	881b      	ldrh	r3, [r3, #0]
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc6a:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800dc6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	441a      	add	r2, r3
 800dc88:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800dc8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc98:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dc9c:	b29b      	uxth	r3, r3
 800dc9e:	8013      	strh	r3, [r2, #0]
 800dca0:	e1be      	b.n	800e020 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800dca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	78db      	ldrb	r3, [r3, #3]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	f040 81b4 	bne.w	800e01c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800dcb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	699a      	ldr	r2, [r3, #24]
 800dcc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	691b      	ldr	r3, [r3, #16]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d917      	bls.n	800dd00 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800dcd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	691b      	ldr	r3, [r3, #16]
 800dcdc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800dce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	699a      	ldr	r2, [r3, #24]
 800dcec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dcf0:	1ad2      	subs	r2, r2, r3
 800dcf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	619a      	str	r2, [r3, #24]
 800dcfe:	e00e      	b.n	800dd1e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800dd00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	699b      	ldr	r3, [r3, #24]
 800dd0c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800dd10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800dd1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	785b      	ldrb	r3, [r3, #1]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	f040 8085 	bne.w	800de3a <USB_EPStartXfer+0x14fc>
 800dd30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dd4c:	b29b      	uxth	r3, r3
 800dd4e:	461a      	mov	r2, r3
 800dd50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd54:	4413      	add	r3, r2
 800dd56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800dd5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dd5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	781b      	ldrb	r3, [r3, #0]
 800dd66:	00da      	lsls	r2, r3, #3
 800dd68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800dd6c:	4413      	add	r3, r2
 800dd6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dd72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800dd76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd7a:	881b      	ldrh	r3, [r3, #0]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd82:	b29a      	uxth	r2, r3
 800dd84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dd88:	801a      	strh	r2, [r3, #0]
 800dd8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd90:	d923      	bls.n	800ddda <USB_EPStartXfer+0x149c>
 800dd92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd96:	095b      	lsrs	r3, r3, #5
 800dd98:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800dd9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dda0:	f003 031f 	and.w	r3, r3, #31
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d104      	bne.n	800ddb2 <USB_EPStartXfer+0x1474>
 800dda8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddac:	3b01      	subs	r3, #1
 800ddae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ddb2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddb6:	881b      	ldrh	r3, [r3, #0]
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ddbe:	b29b      	uxth	r3, r3
 800ddc0:	029b      	lsls	r3, r3, #10
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	4313      	orrs	r3, r2
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddd0:	b29a      	uxth	r2, r3
 800ddd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddd6:	801a      	strh	r2, [r3, #0]
 800ddd8:	e060      	b.n	800de9c <USB_EPStartXfer+0x155e>
 800ddda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d10c      	bne.n	800ddfc <USB_EPStartXfer+0x14be>
 800dde2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800dde6:	881b      	ldrh	r3, [r3, #0]
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ddee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ddf8:	801a      	strh	r2, [r3, #0]
 800ddfa:	e04f      	b.n	800de9c <USB_EPStartXfer+0x155e>
 800ddfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de00:	085b      	lsrs	r3, r3, #1
 800de02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de0a:	f003 0301 	and.w	r3, r3, #1
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d004      	beq.n	800de1c <USB_EPStartXfer+0x14de>
 800de12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de16:	3301      	adds	r3, #1
 800de18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800de1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de20:	881b      	ldrh	r3, [r3, #0]
 800de22:	b29a      	uxth	r2, r3
 800de24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800de28:	b29b      	uxth	r3, r3
 800de2a:	029b      	lsls	r3, r3, #10
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	4313      	orrs	r3, r2
 800de30:	b29a      	uxth	r2, r3
 800de32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800de36:	801a      	strh	r2, [r3, #0]
 800de38:	e030      	b.n	800de9c <USB_EPStartXfer+0x155e>
 800de3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	785b      	ldrb	r3, [r3, #1]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d128      	bne.n	800de9c <USB_EPStartXfer+0x155e>
 800de4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800de66:	b29b      	uxth	r3, r3
 800de68:	461a      	mov	r2, r3
 800de6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de6e:	4413      	add	r3, r2
 800de70:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800de74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	00da      	lsls	r2, r3, #3
 800de82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800de86:	4413      	add	r3, r2
 800de88:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800de8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800de90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de94:	b29a      	uxth	r2, r3
 800de96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800de9a:	801a      	strh	r2, [r3, #0]
 800de9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800deaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	785b      	ldrb	r3, [r3, #1]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f040 8085 	bne.w	800dfc6 <USB_EPStartXfer+0x1688>
 800debc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800deca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ded8:	b29b      	uxth	r3, r3
 800deda:	461a      	mov	r2, r3
 800dedc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800dee0:	4413      	add	r3, r2
 800dee2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800dee6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	00da      	lsls	r2, r3, #3
 800def4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800def8:	4413      	add	r3, r2
 800defa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800defe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800df02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df06:	881b      	ldrh	r3, [r3, #0]
 800df08:	b29b      	uxth	r3, r3
 800df0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df0e:	b29a      	uxth	r2, r3
 800df10:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df14:	801a      	strh	r2, [r3, #0]
 800df16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df1a:	2b3e      	cmp	r3, #62	@ 0x3e
 800df1c:	d923      	bls.n	800df66 <USB_EPStartXfer+0x1628>
 800df1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df22:	095b      	lsrs	r3, r3, #5
 800df24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df2c:	f003 031f 	and.w	r3, r3, #31
 800df30:	2b00      	cmp	r3, #0
 800df32:	d104      	bne.n	800df3e <USB_EPStartXfer+0x1600>
 800df34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df38:	3b01      	subs	r3, #1
 800df3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df42:	881b      	ldrh	r3, [r3, #0]
 800df44:	b29a      	uxth	r2, r3
 800df46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	029b      	lsls	r3, r3, #10
 800df4e:	b29b      	uxth	r3, r3
 800df50:	4313      	orrs	r3, r2
 800df52:	b29b      	uxth	r3, r3
 800df54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df5c:	b29a      	uxth	r2, r3
 800df5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df62:	801a      	strh	r2, [r3, #0]
 800df64:	e05c      	b.n	800e020 <USB_EPStartXfer+0x16e2>
 800df66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d10c      	bne.n	800df88 <USB_EPStartXfer+0x164a>
 800df6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df72:	881b      	ldrh	r3, [r3, #0]
 800df74:	b29b      	uxth	r3, r3
 800df76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df7e:	b29a      	uxth	r2, r3
 800df80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800df84:	801a      	strh	r2, [r3, #0]
 800df86:	e04b      	b.n	800e020 <USB_EPStartXfer+0x16e2>
 800df88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df8c:	085b      	lsrs	r3, r3, #1
 800df8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800df92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df96:	f003 0301 	and.w	r3, r3, #1
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d004      	beq.n	800dfa8 <USB_EPStartXfer+0x166a>
 800df9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800dfa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfac:	881b      	ldrh	r3, [r3, #0]
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	029b      	lsls	r3, r3, #10
 800dfb8:	b29b      	uxth	r3, r3
 800dfba:	4313      	orrs	r3, r2
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800dfc2:	801a      	strh	r2, [r3, #0]
 800dfc4:	e02c      	b.n	800e020 <USB_EPStartXfer+0x16e2>
 800dfc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	785b      	ldrb	r3, [r3, #1]
 800dfd2:	2b01      	cmp	r3, #1
 800dfd4:	d124      	bne.n	800e020 <USB_EPStartXfer+0x16e2>
 800dfd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	461a      	mov	r2, r3
 800dfe8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800dfec:	4413      	add	r3, r2
 800dfee:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800dff2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dff6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	00da      	lsls	r2, r3, #3
 800e000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e004:	4413      	add	r3, r2
 800e006:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e00a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800e00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e012:	b29a      	uxth	r2, r3
 800e014:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800e018:	801a      	strh	r2, [r3, #0]
 800e01a:	e001      	b.n	800e020 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800e01c:	2301      	movs	r3, #1
 800e01e:	e03a      	b.n	800e096 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e024:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e028:	681a      	ldr	r2, [r3, #0]
 800e02a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e02e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e046:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e04a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e04e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e052:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e056:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e05a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e05e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800e062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	781b      	ldrb	r3, [r3, #0]
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	441a      	add	r2, r3
 800e07c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800e080:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e084:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e08c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e090:	b29b      	uxth	r3, r3
 800e092:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b085      	sub	sp, #20
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	785b      	ldrb	r3, [r3, #1]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d020      	beq.n	800e0f4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	009b      	lsls	r3, r3, #2
 800e0ba:	4413      	add	r3, r2
 800e0bc:	881b      	ldrh	r3, [r3, #0]
 800e0be:	b29b      	uxth	r3, r3
 800e0c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0c8:	81bb      	strh	r3, [r7, #12]
 800e0ca:	89bb      	ldrh	r3, [r7, #12]
 800e0cc:	f083 0310 	eor.w	r3, r3, #16
 800e0d0:	81bb      	strh	r3, [r7, #12]
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	009b      	lsls	r3, r3, #2
 800e0da:	441a      	add	r2, r3
 800e0dc:	89bb      	ldrh	r3, [r7, #12]
 800e0de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	8013      	strh	r3, [r2, #0]
 800e0f2:	e01f      	b.n	800e134 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800e0f4:	687a      	ldr	r2, [r7, #4]
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	781b      	ldrb	r3, [r3, #0]
 800e0fa:	009b      	lsls	r3, r3, #2
 800e0fc:	4413      	add	r3, r2
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	b29b      	uxth	r3, r3
 800e102:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e10a:	81fb      	strh	r3, [r7, #14]
 800e10c:	89fb      	ldrh	r3, [r7, #14]
 800e10e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e112:	81fb      	strh	r3, [r7, #14]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	009b      	lsls	r3, r3, #2
 800e11c:	441a      	add	r2, r3
 800e11e:	89fb      	ldrh	r3, [r7, #14]
 800e120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e128:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e12c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e130:	b29b      	uxth	r3, r3
 800e132:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800e134:	2300      	movs	r3, #0
}
 800e136:	4618      	mov	r0, r3
 800e138:	3714      	adds	r7, #20
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr

0800e142 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e142:	b480      	push	{r7}
 800e144:	b087      	sub	sp, #28
 800e146:	af00      	add	r7, sp, #0
 800e148:	6078      	str	r0, [r7, #4]
 800e14a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	7b1b      	ldrb	r3, [r3, #12]
 800e150:	2b00      	cmp	r3, #0
 800e152:	f040 809d 	bne.w	800e290 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	785b      	ldrb	r3, [r3, #1]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d04c      	beq.n	800e1f8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e15e:	687a      	ldr	r2, [r7, #4]
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	781b      	ldrb	r3, [r3, #0]
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	4413      	add	r3, r2
 800e168:	881b      	ldrh	r3, [r3, #0]
 800e16a:	823b      	strh	r3, [r7, #16]
 800e16c:	8a3b      	ldrh	r3, [r7, #16]
 800e16e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e172:	2b00      	cmp	r3, #0
 800e174:	d01b      	beq.n	800e1ae <USB_EPClearStall+0x6c>
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	781b      	ldrb	r3, [r3, #0]
 800e17c:	009b      	lsls	r3, r3, #2
 800e17e:	4413      	add	r3, r2
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	b29b      	uxth	r3, r3
 800e184:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e18c:	81fb      	strh	r3, [r7, #14]
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	441a      	add	r2, r3
 800e198:	89fb      	ldrh	r3, [r7, #14]
 800e19a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e19e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	78db      	ldrb	r3, [r3, #3]
 800e1b2:	2b01      	cmp	r3, #1
 800e1b4:	d06c      	beq.n	800e290 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	009b      	lsls	r3, r3, #2
 800e1be:	4413      	add	r3, r2
 800e1c0:	881b      	ldrh	r3, [r3, #0]
 800e1c2:	b29b      	uxth	r3, r3
 800e1c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e1c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e1cc:	81bb      	strh	r3, [r7, #12]
 800e1ce:	89bb      	ldrh	r3, [r7, #12]
 800e1d0:	f083 0320 	eor.w	r3, r3, #32
 800e1d4:	81bb      	strh	r3, [r7, #12]
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	781b      	ldrb	r3, [r3, #0]
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	441a      	add	r2, r3
 800e1e0:	89bb      	ldrh	r3, [r7, #12]
 800e1e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e1e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e1ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e1ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1f2:	b29b      	uxth	r3, r3
 800e1f4:	8013      	strh	r3, [r2, #0]
 800e1f6:	e04b      	b.n	800e290 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	683b      	ldr	r3, [r7, #0]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4413      	add	r3, r2
 800e202:	881b      	ldrh	r3, [r3, #0]
 800e204:	82fb      	strh	r3, [r7, #22]
 800e206:	8afb      	ldrh	r3, [r7, #22]
 800e208:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d01b      	beq.n	800e248 <USB_EPClearStall+0x106>
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	009b      	lsls	r3, r3, #2
 800e218:	4413      	add	r3, r2
 800e21a:	881b      	ldrh	r3, [r3, #0]
 800e21c:	b29b      	uxth	r3, r3
 800e21e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e226:	82bb      	strh	r3, [r7, #20]
 800e228:	687a      	ldr	r2, [r7, #4]
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	441a      	add	r2, r3
 800e232:	8abb      	ldrh	r3, [r7, #20]
 800e234:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e238:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e23c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e240:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e244:	b29b      	uxth	r3, r3
 800e246:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	009b      	lsls	r3, r3, #2
 800e250:	4413      	add	r3, r2
 800e252:	881b      	ldrh	r3, [r3, #0]
 800e254:	b29b      	uxth	r3, r3
 800e256:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e25a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e25e:	827b      	strh	r3, [r7, #18]
 800e260:	8a7b      	ldrh	r3, [r7, #18]
 800e262:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800e266:	827b      	strh	r3, [r7, #18]
 800e268:	8a7b      	ldrh	r3, [r7, #18]
 800e26a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800e26e:	827b      	strh	r3, [r7, #18]
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	009b      	lsls	r3, r3, #2
 800e278:	441a      	add	r2, r3
 800e27a:	8a7b      	ldrh	r3, [r7, #18]
 800e27c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e280:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e284:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	371c      	adds	r7, #28
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800e29e:	b480      	push	{r7}
 800e2a0:	b083      	sub	sp, #12
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800e2aa:	78fb      	ldrb	r3, [r7, #3]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d103      	bne.n	800e2b8 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2280      	movs	r2, #128	@ 0x80
 800e2b4:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800e2b8:	2300      	movs	r3, #0
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	370c      	adds	r7, #12
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c4:	4770      	bx	lr

0800e2c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800e2c6:	b480      	push	{r7}
 800e2c8:	b083      	sub	sp, #12
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800e2d4:	b29b      	uxth	r3, r3
 800e2d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800e2e6:	2300      	movs	r3, #0
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800e2f4:	b480      	push	{r7}
 800e2f6:	b085      	sub	sp, #20
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800e302:	b29b      	uxth	r3, r3
 800e304:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800e306:	68fb      	ldr	r3, [r7, #12]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3714      	adds	r7, #20
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e314:	b480      	push	{r7}
 800e316:	b08b      	sub	sp, #44	@ 0x2c
 800e318:	af00      	add	r7, sp, #0
 800e31a:	60f8      	str	r0, [r7, #12]
 800e31c:	60b9      	str	r1, [r7, #8]
 800e31e:	4611      	mov	r1, r2
 800e320:	461a      	mov	r2, r3
 800e322:	460b      	mov	r3, r1
 800e324:	80fb      	strh	r3, [r7, #6]
 800e326:	4613      	mov	r3, r2
 800e328:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800e32a:	88bb      	ldrh	r3, [r7, #4]
 800e32c:	3301      	adds	r3, #1
 800e32e:	085b      	lsrs	r3, r3, #1
 800e330:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e33a:	88fa      	ldrh	r2, [r7, #6]
 800e33c:	697b      	ldr	r3, [r7, #20]
 800e33e:	4413      	add	r3, r2
 800e340:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e344:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e346:	69bb      	ldr	r3, [r7, #24]
 800e348:	627b      	str	r3, [r7, #36]	@ 0x24
 800e34a:	e01b      	b.n	800e384 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	781b      	ldrb	r3, [r3, #0]
 800e350:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800e352:	69fb      	ldr	r3, [r7, #28]
 800e354:	3301      	adds	r3, #1
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	021b      	lsls	r3, r3, #8
 800e35a:	b21a      	sxth	r2, r3
 800e35c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e360:	4313      	orrs	r3, r2
 800e362:	b21b      	sxth	r3, r3
 800e364:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800e366:	6a3b      	ldr	r3, [r7, #32]
 800e368:	8a7a      	ldrh	r2, [r7, #18]
 800e36a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800e36c:	6a3b      	ldr	r3, [r7, #32]
 800e36e:	3302      	adds	r3, #2
 800e370:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	3301      	adds	r3, #1
 800e376:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800e378:	69fb      	ldr	r3, [r7, #28]
 800e37a:	3301      	adds	r3, #1
 800e37c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e37e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e380:	3b01      	subs	r3, #1
 800e382:	627b      	str	r3, [r7, #36]	@ 0x24
 800e384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1e0      	bne.n	800e34c <USB_WritePMA+0x38>
  }
}
 800e38a:	bf00      	nop
 800e38c:	bf00      	nop
 800e38e:	372c      	adds	r7, #44	@ 0x2c
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800e398:	b480      	push	{r7}
 800e39a:	b08b      	sub	sp, #44	@ 0x2c
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	4611      	mov	r1, r2
 800e3a4:	461a      	mov	r2, r3
 800e3a6:	460b      	mov	r3, r1
 800e3a8:	80fb      	strh	r3, [r7, #6]
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800e3ae:	88bb      	ldrh	r3, [r7, #4]
 800e3b0:	085b      	lsrs	r3, r3, #1
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800e3ba:	68bb      	ldr	r3, [r7, #8]
 800e3bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800e3be:	88fa      	ldrh	r2, [r7, #6]
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e3c8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3ce:	e018      	b.n	800e402 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800e3d0:	6a3b      	ldr	r3, [r7, #32]
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	b29b      	uxth	r3, r3
 800e3d6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800e3d8:	6a3b      	ldr	r3, [r7, #32]
 800e3da:	3302      	adds	r3, #2
 800e3dc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e3de:	693b      	ldr	r3, [r7, #16]
 800e3e0:	b2da      	uxtb	r2, r3
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	0a1b      	lsrs	r3, r3, #8
 800e3f0:	b2da      	uxtb	r2, r3
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800e3f6:	69fb      	ldr	r3, [r7, #28]
 800e3f8:	3301      	adds	r3, #1
 800e3fa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800e3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3fe:	3b01      	subs	r3, #1
 800e400:	627b      	str	r3, [r7, #36]	@ 0x24
 800e402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1e3      	bne.n	800e3d0 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800e408:	88bb      	ldrh	r3, [r7, #4]
 800e40a:	f003 0301 	and.w	r3, r3, #1
 800e40e:	b29b      	uxth	r3, r3
 800e410:	2b00      	cmp	r3, #0
 800e412:	d007      	beq.n	800e424 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800e414:	6a3b      	ldr	r3, [r7, #32]
 800e416:	881b      	ldrh	r3, [r3, #0]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800e41c:	693b      	ldr	r3, [r7, #16]
 800e41e:	b2da      	uxtb	r2, r3
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	701a      	strb	r2, [r3, #0]
  }
}
 800e424:	bf00      	nop
 800e426:	372c      	adds	r7, #44	@ 0x2c
 800e428:	46bd      	mov	sp, r7
 800e42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42e:	4770      	bx	lr

0800e430 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	460b      	mov	r3, r1
 800e43a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e43c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e440:	f007 fc04 	bl	8015c4c <USBD_static_malloc>
 800e444:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d109      	bne.n	800e460 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	32b0      	adds	r2, #176	@ 0xb0
 800e456:	2100      	movs	r1, #0
 800e458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e45c:	2302      	movs	r3, #2
 800e45e:	e0d4      	b.n	800e60a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e460:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e464:	2100      	movs	r1, #0
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f008 f900 	bl	801666c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	32b0      	adds	r2, #176	@ 0xb0
 800e476:	68f9      	ldr	r1, [r7, #12]
 800e478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	32b0      	adds	r2, #176	@ 0xb0
 800e486:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	7c1b      	ldrb	r3, [r3, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d138      	bne.n	800e50a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e498:	4b5e      	ldr	r3, [pc, #376]	@ (800e614 <USBD_CDC_Init+0x1e4>)
 800e49a:	7819      	ldrb	r1, [r3, #0]
 800e49c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4a0:	2202      	movs	r2, #2
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f007 fa79 	bl	801599a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e4a8:	4b5a      	ldr	r3, [pc, #360]	@ (800e614 <USBD_CDC_Init+0x1e4>)
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	f003 020f 	and.w	r2, r3, #15
 800e4b0:	6879      	ldr	r1, [r7, #4]
 800e4b2:	4613      	mov	r3, r2
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	4413      	add	r3, r2
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	440b      	add	r3, r1
 800e4bc:	3324      	adds	r3, #36	@ 0x24
 800e4be:	2201      	movs	r2, #1
 800e4c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e4c2:	4b55      	ldr	r3, [pc, #340]	@ (800e618 <USBD_CDC_Init+0x1e8>)
 800e4c4:	7819      	ldrb	r1, [r3, #0]
 800e4c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e4ca:	2202      	movs	r2, #2
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f007 fa64 	bl	801599a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e4d2:	4b51      	ldr	r3, [pc, #324]	@ (800e618 <USBD_CDC_Init+0x1e8>)
 800e4d4:	781b      	ldrb	r3, [r3, #0]
 800e4d6:	f003 020f 	and.w	r2, r3, #15
 800e4da:	6879      	ldr	r1, [r7, #4]
 800e4dc:	4613      	mov	r3, r2
 800e4de:	009b      	lsls	r3, r3, #2
 800e4e0:	4413      	add	r3, r2
 800e4e2:	009b      	lsls	r3, r3, #2
 800e4e4:	440b      	add	r3, r1
 800e4e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e4ee:	4b4b      	ldr	r3, [pc, #300]	@ (800e61c <USBD_CDC_Init+0x1ec>)
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	f003 020f 	and.w	r2, r3, #15
 800e4f6:	6879      	ldr	r1, [r7, #4]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	440b      	add	r3, r1
 800e502:	3326      	adds	r3, #38	@ 0x26
 800e504:	2210      	movs	r2, #16
 800e506:	801a      	strh	r2, [r3, #0]
 800e508:	e035      	b.n	800e576 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e50a:	4b42      	ldr	r3, [pc, #264]	@ (800e614 <USBD_CDC_Init+0x1e4>)
 800e50c:	7819      	ldrb	r1, [r3, #0]
 800e50e:	2340      	movs	r3, #64	@ 0x40
 800e510:	2202      	movs	r2, #2
 800e512:	6878      	ldr	r0, [r7, #4]
 800e514:	f007 fa41 	bl	801599a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e518:	4b3e      	ldr	r3, [pc, #248]	@ (800e614 <USBD_CDC_Init+0x1e4>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	f003 020f 	and.w	r2, r3, #15
 800e520:	6879      	ldr	r1, [r7, #4]
 800e522:	4613      	mov	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4413      	add	r3, r2
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	440b      	add	r3, r1
 800e52c:	3324      	adds	r3, #36	@ 0x24
 800e52e:	2201      	movs	r2, #1
 800e530:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e532:	4b39      	ldr	r3, [pc, #228]	@ (800e618 <USBD_CDC_Init+0x1e8>)
 800e534:	7819      	ldrb	r1, [r3, #0]
 800e536:	2340      	movs	r3, #64	@ 0x40
 800e538:	2202      	movs	r2, #2
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f007 fa2d 	bl	801599a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e540:	4b35      	ldr	r3, [pc, #212]	@ (800e618 <USBD_CDC_Init+0x1e8>)
 800e542:	781b      	ldrb	r3, [r3, #0]
 800e544:	f003 020f 	and.w	r2, r3, #15
 800e548:	6879      	ldr	r1, [r7, #4]
 800e54a:	4613      	mov	r3, r2
 800e54c:	009b      	lsls	r3, r3, #2
 800e54e:	4413      	add	r3, r2
 800e550:	009b      	lsls	r3, r3, #2
 800e552:	440b      	add	r3, r1
 800e554:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e558:	2201      	movs	r2, #1
 800e55a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e55c:	4b2f      	ldr	r3, [pc, #188]	@ (800e61c <USBD_CDC_Init+0x1ec>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 020f 	and.w	r2, r3, #15
 800e564:	6879      	ldr	r1, [r7, #4]
 800e566:	4613      	mov	r3, r2
 800e568:	009b      	lsls	r3, r3, #2
 800e56a:	4413      	add	r3, r2
 800e56c:	009b      	lsls	r3, r3, #2
 800e56e:	440b      	add	r3, r1
 800e570:	3326      	adds	r3, #38	@ 0x26
 800e572:	2210      	movs	r2, #16
 800e574:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e576:	4b29      	ldr	r3, [pc, #164]	@ (800e61c <USBD_CDC_Init+0x1ec>)
 800e578:	7819      	ldrb	r1, [r3, #0]
 800e57a:	2308      	movs	r3, #8
 800e57c:	2203      	movs	r2, #3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f007 fa0b 	bl	801599a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e584:	4b25      	ldr	r3, [pc, #148]	@ (800e61c <USBD_CDC_Init+0x1ec>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	f003 020f 	and.w	r2, r3, #15
 800e58c:	6879      	ldr	r1, [r7, #4]
 800e58e:	4613      	mov	r3, r2
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	4413      	add	r3, r2
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	440b      	add	r3, r1
 800e598:	3324      	adds	r3, #36	@ 0x24
 800e59a:	2201      	movs	r2, #1
 800e59c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	33b0      	adds	r3, #176	@ 0xb0
 800e5b0:	009b      	lsls	r3, r3, #2
 800e5b2:	4413      	add	r3, r2
 800e5b4:	685b      	ldr	r3, [r3, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	2200      	movs	r2, #0
 800e5be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d101      	bne.n	800e5d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e5d4:	2302      	movs	r3, #2
 800e5d6:	e018      	b.n	800e60a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	7c1b      	ldrb	r3, [r3, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d10a      	bne.n	800e5f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5e0:	4b0d      	ldr	r3, [pc, #52]	@ (800e618 <USBD_CDC_Init+0x1e8>)
 800e5e2:	7819      	ldrb	r1, [r3, #0]
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e5ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f007 fac2 	bl	8015b78 <USBD_LL_PrepareReceive>
 800e5f4:	e008      	b.n	800e608 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e5f6:	4b08      	ldr	r3, [pc, #32]	@ (800e618 <USBD_CDC_Init+0x1e8>)
 800e5f8:	7819      	ldrb	r1, [r3, #0]
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e600:	2340      	movs	r3, #64	@ 0x40
 800e602:	6878      	ldr	r0, [r7, #4]
 800e604:	f007 fab8 	bl	8015b78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e608:	2300      	movs	r3, #0
}
 800e60a:	4618      	mov	r0, r3
 800e60c:	3710      	adds	r7, #16
 800e60e:	46bd      	mov	sp, r7
 800e610:	bd80      	pop	{r7, pc}
 800e612:	bf00      	nop
 800e614:	2000009f 	.word	0x2000009f
 800e618:	200000a0 	.word	0x200000a0
 800e61c:	200000a1 	.word	0x200000a1

0800e620 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b082      	sub	sp, #8
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	460b      	mov	r3, r1
 800e62a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e62c:	4b3a      	ldr	r3, [pc, #232]	@ (800e718 <USBD_CDC_DeInit+0xf8>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	4619      	mov	r1, r3
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f007 f9d7 	bl	80159e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e638:	4b37      	ldr	r3, [pc, #220]	@ (800e718 <USBD_CDC_DeInit+0xf8>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	f003 020f 	and.w	r2, r3, #15
 800e640:	6879      	ldr	r1, [r7, #4]
 800e642:	4613      	mov	r3, r2
 800e644:	009b      	lsls	r3, r3, #2
 800e646:	4413      	add	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	440b      	add	r3, r1
 800e64c:	3324      	adds	r3, #36	@ 0x24
 800e64e:	2200      	movs	r2, #0
 800e650:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e652:	4b32      	ldr	r3, [pc, #200]	@ (800e71c <USBD_CDC_DeInit+0xfc>)
 800e654:	781b      	ldrb	r3, [r3, #0]
 800e656:	4619      	mov	r1, r3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f007 f9c4 	bl	80159e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e65e:	4b2f      	ldr	r3, [pc, #188]	@ (800e71c <USBD_CDC_DeInit+0xfc>)
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	f003 020f 	and.w	r2, r3, #15
 800e666:	6879      	ldr	r1, [r7, #4]
 800e668:	4613      	mov	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	440b      	add	r3, r1
 800e672:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e676:	2200      	movs	r2, #0
 800e678:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e67a:	4b29      	ldr	r3, [pc, #164]	@ (800e720 <USBD_CDC_DeInit+0x100>)
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	4619      	mov	r1, r3
 800e680:	6878      	ldr	r0, [r7, #4]
 800e682:	f007 f9b0 	bl	80159e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e686:	4b26      	ldr	r3, [pc, #152]	@ (800e720 <USBD_CDC_DeInit+0x100>)
 800e688:	781b      	ldrb	r3, [r3, #0]
 800e68a:	f003 020f 	and.w	r2, r3, #15
 800e68e:	6879      	ldr	r1, [r7, #4]
 800e690:	4613      	mov	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	440b      	add	r3, r1
 800e69a:	3324      	adds	r3, #36	@ 0x24
 800e69c:	2200      	movs	r2, #0
 800e69e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e6a0:	4b1f      	ldr	r3, [pc, #124]	@ (800e720 <USBD_CDC_DeInit+0x100>)
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	f003 020f 	and.w	r2, r3, #15
 800e6a8:	6879      	ldr	r1, [r7, #4]
 800e6aa:	4613      	mov	r3, r2
 800e6ac:	009b      	lsls	r3, r3, #2
 800e6ae:	4413      	add	r3, r2
 800e6b0:	009b      	lsls	r3, r3, #2
 800e6b2:	440b      	add	r3, r1
 800e6b4:	3326      	adds	r3, #38	@ 0x26
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	32b0      	adds	r2, #176	@ 0xb0
 800e6c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d01f      	beq.n	800e70c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	33b0      	adds	r3, #176	@ 0xb0
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	4413      	add	r3, r2
 800e6da:	685b      	ldr	r3, [r3, #4]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	32b0      	adds	r2, #176	@ 0xb0
 800e6ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f007 faba 	bl	8015c68 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	32b0      	adds	r2, #176	@ 0xb0
 800e6fe:	2100      	movs	r1, #0
 800e700:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2200      	movs	r2, #0
 800e708:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e70c:	2300      	movs	r3, #0
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	2000009f 	.word	0x2000009f
 800e71c:	200000a0 	.word	0x200000a0
 800e720:	200000a1 	.word	0x200000a1

0800e724 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e724:	b580      	push	{r7, lr}
 800e726:	b086      	sub	sp, #24
 800e728:	af00      	add	r7, sp, #0
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	32b0      	adds	r2, #176	@ 0xb0
 800e738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e73c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e73e:	2300      	movs	r3, #0
 800e740:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e742:	2300      	movs	r3, #0
 800e744:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e746:	2300      	movs	r3, #0
 800e748:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d101      	bne.n	800e754 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e750:	2303      	movs	r3, #3
 800e752:	e0bf      	b.n	800e8d4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d050      	beq.n	800e802 <USBD_CDC_Setup+0xde>
 800e760:	2b20      	cmp	r3, #32
 800e762:	f040 80af 	bne.w	800e8c4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	88db      	ldrh	r3, [r3, #6]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d03a      	beq.n	800e7e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	b25b      	sxtb	r3, r3
 800e774:	2b00      	cmp	r3, #0
 800e776:	da1b      	bge.n	800e7b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e77e:	687a      	ldr	r2, [r7, #4]
 800e780:	33b0      	adds	r3, #176	@ 0xb0
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e78e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	88d2      	ldrh	r2, [r2, #6]
 800e794:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	88db      	ldrh	r3, [r3, #6]
 800e79a:	2b07      	cmp	r3, #7
 800e79c:	bf28      	it	cs
 800e79e:	2307      	movcs	r3, #7
 800e7a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e7a2:	693b      	ldr	r3, [r7, #16]
 800e7a4:	89fa      	ldrh	r2, [r7, #14]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f001 fd1f 	bl	80101ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e7ae:	e090      	b.n	800e8d2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e7b0:	683b      	ldr	r3, [r7, #0]
 800e7b2:	785a      	ldrb	r2, [r3, #1]
 800e7b4:	693b      	ldr	r3, [r7, #16]
 800e7b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	88db      	ldrh	r3, [r3, #6]
 800e7be:	2b3f      	cmp	r3, #63	@ 0x3f
 800e7c0:	d803      	bhi.n	800e7ca <USBD_CDC_Setup+0xa6>
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	88db      	ldrh	r3, [r3, #6]
 800e7c6:	b2da      	uxtb	r2, r3
 800e7c8:	e000      	b.n	800e7cc <USBD_CDC_Setup+0xa8>
 800e7ca:	2240      	movs	r2, #64	@ 0x40
 800e7cc:	693b      	ldr	r3, [r7, #16]
 800e7ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e7d2:	6939      	ldr	r1, [r7, #16]
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e7da:	461a      	mov	r2, r3
 800e7dc:	6878      	ldr	r0, [r7, #4]
 800e7de:	f001 fd31 	bl	8010244 <USBD_CtlPrepareRx>
      break;
 800e7e2:	e076      	b.n	800e8d2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e7ea:	687a      	ldr	r2, [r7, #4]
 800e7ec:	33b0      	adds	r3, #176	@ 0xb0
 800e7ee:	009b      	lsls	r3, r3, #2
 800e7f0:	4413      	add	r3, r2
 800e7f2:	685b      	ldr	r3, [r3, #4]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	7850      	ldrb	r0, [r2, #1]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	6839      	ldr	r1, [r7, #0]
 800e7fe:	4798      	blx	r3
      break;
 800e800:	e067      	b.n	800e8d2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	785b      	ldrb	r3, [r3, #1]
 800e806:	2b0b      	cmp	r3, #11
 800e808:	d851      	bhi.n	800e8ae <USBD_CDC_Setup+0x18a>
 800e80a:	a201      	add	r2, pc, #4	@ (adr r2, 800e810 <USBD_CDC_Setup+0xec>)
 800e80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e810:	0800e841 	.word	0x0800e841
 800e814:	0800e8bd 	.word	0x0800e8bd
 800e818:	0800e8af 	.word	0x0800e8af
 800e81c:	0800e8af 	.word	0x0800e8af
 800e820:	0800e8af 	.word	0x0800e8af
 800e824:	0800e8af 	.word	0x0800e8af
 800e828:	0800e8af 	.word	0x0800e8af
 800e82c:	0800e8af 	.word	0x0800e8af
 800e830:	0800e8af 	.word	0x0800e8af
 800e834:	0800e8af 	.word	0x0800e8af
 800e838:	0800e86b 	.word	0x0800e86b
 800e83c:	0800e895 	.word	0x0800e895
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e846:	b2db      	uxtb	r3, r3
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d107      	bne.n	800e85c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e84c:	f107 030a 	add.w	r3, r7, #10
 800e850:	2202      	movs	r2, #2
 800e852:	4619      	mov	r1, r3
 800e854:	6878      	ldr	r0, [r7, #4]
 800e856:	f001 fcc9 	bl	80101ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e85a:	e032      	b.n	800e8c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e85c:	6839      	ldr	r1, [r7, #0]
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	f001 fc53 	bl	801010a <USBD_CtlError>
            ret = USBD_FAIL;
 800e864:	2303      	movs	r3, #3
 800e866:	75fb      	strb	r3, [r7, #23]
          break;
 800e868:	e02b      	b.n	800e8c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e870:	b2db      	uxtb	r3, r3
 800e872:	2b03      	cmp	r3, #3
 800e874:	d107      	bne.n	800e886 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e876:	f107 030d 	add.w	r3, r7, #13
 800e87a:	2201      	movs	r2, #1
 800e87c:	4619      	mov	r1, r3
 800e87e:	6878      	ldr	r0, [r7, #4]
 800e880:	f001 fcb4 	bl	80101ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e884:	e01d      	b.n	800e8c2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e886:	6839      	ldr	r1, [r7, #0]
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f001 fc3e 	bl	801010a <USBD_CtlError>
            ret = USBD_FAIL;
 800e88e:	2303      	movs	r3, #3
 800e890:	75fb      	strb	r3, [r7, #23]
          break;
 800e892:	e016      	b.n	800e8c2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b03      	cmp	r3, #3
 800e89e:	d00f      	beq.n	800e8c0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e8a0:	6839      	ldr	r1, [r7, #0]
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f001 fc31 	bl	801010a <USBD_CtlError>
            ret = USBD_FAIL;
 800e8a8:	2303      	movs	r3, #3
 800e8aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e8ac:	e008      	b.n	800e8c0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e8ae:	6839      	ldr	r1, [r7, #0]
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f001 fc2a 	bl	801010a <USBD_CtlError>
          ret = USBD_FAIL;
 800e8b6:	2303      	movs	r3, #3
 800e8b8:	75fb      	strb	r3, [r7, #23]
          break;
 800e8ba:	e002      	b.n	800e8c2 <USBD_CDC_Setup+0x19e>
          break;
 800e8bc:	bf00      	nop
 800e8be:	e008      	b.n	800e8d2 <USBD_CDC_Setup+0x1ae>
          break;
 800e8c0:	bf00      	nop
      }
      break;
 800e8c2:	e006      	b.n	800e8d2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f001 fc1f 	bl	801010a <USBD_CtlError>
      ret = USBD_FAIL;
 800e8cc:	2303      	movs	r3, #3
 800e8ce:	75fb      	strb	r3, [r7, #23]
      break;
 800e8d0:	bf00      	nop
  }

  return (uint8_t)ret;
 800e8d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3718      	adds	r7, #24
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8ee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	32b0      	adds	r2, #176	@ 0xb0
 800e8fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d101      	bne.n	800e906 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e902:	2303      	movs	r3, #3
 800e904:	e065      	b.n	800e9d2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	32b0      	adds	r2, #176	@ 0xb0
 800e910:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e914:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e916:	78fb      	ldrb	r3, [r7, #3]
 800e918:	f003 020f 	and.w	r2, r3, #15
 800e91c:	6879      	ldr	r1, [r7, #4]
 800e91e:	4613      	mov	r3, r2
 800e920:	009b      	lsls	r3, r3, #2
 800e922:	4413      	add	r3, r2
 800e924:	009b      	lsls	r3, r3, #2
 800e926:	440b      	add	r3, r1
 800e928:	3318      	adds	r3, #24
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d02f      	beq.n	800e990 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e930:	78fb      	ldrb	r3, [r7, #3]
 800e932:	f003 020f 	and.w	r2, r3, #15
 800e936:	6879      	ldr	r1, [r7, #4]
 800e938:	4613      	mov	r3, r2
 800e93a:	009b      	lsls	r3, r3, #2
 800e93c:	4413      	add	r3, r2
 800e93e:	009b      	lsls	r3, r3, #2
 800e940:	440b      	add	r3, r1
 800e942:	3318      	adds	r3, #24
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	78fb      	ldrb	r3, [r7, #3]
 800e948:	f003 010f 	and.w	r1, r3, #15
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	460b      	mov	r3, r1
 800e950:	009b      	lsls	r3, r3, #2
 800e952:	440b      	add	r3, r1
 800e954:	00db      	lsls	r3, r3, #3
 800e956:	4403      	add	r3, r0
 800e958:	3320      	adds	r3, #32
 800e95a:	681b      	ldr	r3, [r3, #0]
 800e95c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e960:	fb01 f303 	mul.w	r3, r1, r3
 800e964:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e966:	2b00      	cmp	r3, #0
 800e968:	d112      	bne.n	800e990 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e96a:	78fb      	ldrb	r3, [r7, #3]
 800e96c:	f003 020f 	and.w	r2, r3, #15
 800e970:	6879      	ldr	r1, [r7, #4]
 800e972:	4613      	mov	r3, r2
 800e974:	009b      	lsls	r3, r3, #2
 800e976:	4413      	add	r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	440b      	add	r3, r1
 800e97c:	3318      	adds	r3, #24
 800e97e:	2200      	movs	r2, #0
 800e980:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e982:	78f9      	ldrb	r1, [r7, #3]
 800e984:	2300      	movs	r3, #0
 800e986:	2200      	movs	r2, #0
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f007 f8d4 	bl	8015b36 <USBD_LL_Transmit>
 800e98e:	e01f      	b.n	800e9d0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2200      	movs	r2, #0
 800e994:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	33b0      	adds	r3, #176	@ 0xb0
 800e9a2:	009b      	lsls	r3, r3, #2
 800e9a4:	4413      	add	r3, r2
 800e9a6:	685b      	ldr	r3, [r3, #4]
 800e9a8:	691b      	ldr	r3, [r3, #16]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d010      	beq.n	800e9d0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e9b4:	687a      	ldr	r2, [r7, #4]
 800e9b6:	33b0      	adds	r3, #176	@ 0xb0
 800e9b8:	009b      	lsls	r3, r3, #2
 800e9ba:	4413      	add	r3, r2
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	691b      	ldr	r3, [r3, #16]
 800e9c0:	68ba      	ldr	r2, [r7, #8]
 800e9c2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e9cc:	78fa      	ldrb	r2, [r7, #3]
 800e9ce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b084      	sub	sp, #16
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
 800e9e2:	460b      	mov	r3, r1
 800e9e4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	32b0      	adds	r2, #176	@ 0xb0
 800e9f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	32b0      	adds	r2, #176	@ 0xb0
 800ea00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d101      	bne.n	800ea0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ea08:	2303      	movs	r3, #3
 800ea0a:	e01a      	b.n	800ea42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ea0c:	78fb      	ldrb	r3, [r7, #3]
 800ea0e:	4619      	mov	r1, r3
 800ea10:	6878      	ldr	r0, [r7, #4]
 800ea12:	f007 f8d2 	bl	8015bba <USBD_LL_GetRxDataSize>
 800ea16:	4602      	mov	r2, r0
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea24:	687a      	ldr	r2, [r7, #4]
 800ea26:	33b0      	adds	r3, #176	@ 0xb0
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	4413      	add	r3, r2
 800ea2c:	685b      	ldr	r3, [r3, #4]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	68fa      	ldr	r2, [r7, #12]
 800ea32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ea36:	68fa      	ldr	r2, [r7, #12]
 800ea38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ea3c:	4611      	mov	r1, r2
 800ea3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ea40:	2300      	movs	r3, #0
}
 800ea42:	4618      	mov	r0, r3
 800ea44:	3710      	adds	r7, #16
 800ea46:	46bd      	mov	sp, r7
 800ea48:	bd80      	pop	{r7, pc}

0800ea4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ea4a:	b580      	push	{r7, lr}
 800ea4c:	b084      	sub	sp, #16
 800ea4e:	af00      	add	r7, sp, #0
 800ea50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	32b0      	adds	r2, #176	@ 0xb0
 800ea5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d101      	bne.n	800ea6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ea68:	2303      	movs	r3, #3
 800ea6a:	e024      	b.n	800eab6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea72:	687a      	ldr	r2, [r7, #4]
 800ea74:	33b0      	adds	r3, #176	@ 0xb0
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	4413      	add	r3, r2
 800ea7a:	685b      	ldr	r3, [r3, #4]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d019      	beq.n	800eab4 <USBD_CDC_EP0_RxReady+0x6a>
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ea86:	2bff      	cmp	r3, #255	@ 0xff
 800ea88:	d014      	beq.n	800eab4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	33b0      	adds	r3, #176	@ 0xb0
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	4413      	add	r3, r2
 800ea98:	685b      	ldr	r3, [r3, #4]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	68fa      	ldr	r2, [r7, #12]
 800ea9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800eaa2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800eaa4:	68fa      	ldr	r2, [r7, #12]
 800eaa6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800eaaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	22ff      	movs	r2, #255	@ 0xff
 800eab0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800eab4:	2300      	movs	r3, #0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3710      	adds	r7, #16
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
	...

0800eac0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b086      	sub	sp, #24
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eac8:	2182      	movs	r1, #130	@ 0x82
 800eaca:	4818      	ldr	r0, [pc, #96]	@ (800eb2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eacc:	f000 fcbd 	bl	800f44a <USBD_GetEpDesc>
 800ead0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ead2:	2101      	movs	r1, #1
 800ead4:	4815      	ldr	r0, [pc, #84]	@ (800eb2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ead6:	f000 fcb8 	bl	800f44a <USBD_GetEpDesc>
 800eada:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eadc:	2181      	movs	r1, #129	@ 0x81
 800eade:	4813      	ldr	r0, [pc, #76]	@ (800eb2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800eae0:	f000 fcb3 	bl	800f44a <USBD_GetEpDesc>
 800eae4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d002      	beq.n	800eaf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	2210      	movs	r2, #16
 800eaf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eaf2:	693b      	ldr	r3, [r7, #16]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d006      	beq.n	800eb06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	2200      	movs	r2, #0
 800eafc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb00:	711a      	strb	r2, [r3, #4]
 800eb02:	2200      	movs	r2, #0
 800eb04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d006      	beq.n	800eb1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb14:	711a      	strb	r2, [r3, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2243      	movs	r2, #67	@ 0x43
 800eb1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eb20:	4b02      	ldr	r3, [pc, #8]	@ (800eb2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3718      	adds	r7, #24
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	2000005c 	.word	0x2000005c

0800eb30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b086      	sub	sp, #24
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eb38:	2182      	movs	r1, #130	@ 0x82
 800eb3a:	4818      	ldr	r0, [pc, #96]	@ (800eb9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb3c:	f000 fc85 	bl	800f44a <USBD_GetEpDesc>
 800eb40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eb42:	2101      	movs	r1, #1
 800eb44:	4815      	ldr	r0, [pc, #84]	@ (800eb9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb46:	f000 fc80 	bl	800f44a <USBD_GetEpDesc>
 800eb4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eb4c:	2181      	movs	r1, #129	@ 0x81
 800eb4e:	4813      	ldr	r0, [pc, #76]	@ (800eb9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eb50:	f000 fc7b 	bl	800f44a <USBD_GetEpDesc>
 800eb54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d002      	beq.n	800eb62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	2210      	movs	r2, #16
 800eb60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb62:	693b      	ldr	r3, [r7, #16]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d006      	beq.n	800eb76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	711a      	strb	r2, [r3, #4]
 800eb6e:	2200      	movs	r2, #0
 800eb70:	f042 0202 	orr.w	r2, r2, #2
 800eb74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d006      	beq.n	800eb8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2200      	movs	r2, #0
 800eb80:	711a      	strb	r2, [r3, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f042 0202 	orr.w	r2, r2, #2
 800eb88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	2243      	movs	r2, #67	@ 0x43
 800eb8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eb90:	4b02      	ldr	r3, [pc, #8]	@ (800eb9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	bf00      	nop
 800eb9c:	2000005c 	.word	0x2000005c

0800eba0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b086      	sub	sp, #24
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eba8:	2182      	movs	r1, #130	@ 0x82
 800ebaa:	4818      	ldr	r0, [pc, #96]	@ (800ec0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebac:	f000 fc4d 	bl	800f44a <USBD_GetEpDesc>
 800ebb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ebb2:	2101      	movs	r1, #1
 800ebb4:	4815      	ldr	r0, [pc, #84]	@ (800ec0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebb6:	f000 fc48 	bl	800f44a <USBD_GetEpDesc>
 800ebba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ebbc:	2181      	movs	r1, #129	@ 0x81
 800ebbe:	4813      	ldr	r0, [pc, #76]	@ (800ec0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ebc0:	f000 fc43 	bl	800f44a <USBD_GetEpDesc>
 800ebc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d002      	beq.n	800ebd2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2210      	movs	r2, #16
 800ebd0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d006      	beq.n	800ebe6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	2200      	movs	r2, #0
 800ebdc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ebe0:	711a      	strb	r2, [r3, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d006      	beq.n	800ebfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2200      	movs	r2, #0
 800ebf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ebf4:	711a      	strb	r2, [r3, #4]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2243      	movs	r2, #67	@ 0x43
 800ebfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ec00:	4b02      	ldr	r3, [pc, #8]	@ (800ec0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3718      	adds	r7, #24
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	2000005c 	.word	0x2000005c

0800ec10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	220a      	movs	r2, #10
 800ec1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ec1e:	4b03      	ldr	r3, [pc, #12]	@ (800ec2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	370c      	adds	r7, #12
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	20000018 	.word	0x20000018

0800ec30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d101      	bne.n	800ec44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ec40:	2303      	movs	r3, #3
 800ec42:	e009      	b.n	800ec58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ec4a:	687a      	ldr	r2, [r7, #4]
 800ec4c:	33b0      	adds	r3, #176	@ 0xb0
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	4413      	add	r3, r2
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ec56:	2300      	movs	r3, #0
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b087      	sub	sp, #28
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	32b0      	adds	r2, #176	@ 0xb0
 800ec7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ec80:	697b      	ldr	r3, [r7, #20]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ec86:	2303      	movs	r3, #3
 800ec88:	e008      	b.n	800ec9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	68ba      	ldr	r2, [r7, #8]
 800ec8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	687a      	ldr	r2, [r7, #4]
 800ec96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	371c      	adds	r7, #28
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b085      	sub	sp, #20
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	32b0      	adds	r2, #176	@ 0xb0
 800ecbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d101      	bne.n	800eccc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ecc8:	2303      	movs	r3, #3
 800ecca:	e004      	b.n	800ecd6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3714      	adds	r7, #20
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
	...

0800ece4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	32b0      	adds	r2, #176	@ 0xb0
 800ecf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecfa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d101      	bne.n	800ed0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ed06:	2303      	movs	r3, #3
 800ed08:	e025      	b.n	800ed56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d11f      	bne.n	800ed54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ed1c:	4b10      	ldr	r3, [pc, #64]	@ (800ed60 <USBD_CDC_TransmitPacket+0x7c>)
 800ed1e:	781b      	ldrb	r3, [r3, #0]
 800ed20:	f003 020f 	and.w	r2, r3, #15
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	4613      	mov	r3, r2
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4413      	add	r3, r2
 800ed32:	009b      	lsls	r3, r3, #2
 800ed34:	4403      	add	r3, r0
 800ed36:	3318      	adds	r3, #24
 800ed38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ed3a:	4b09      	ldr	r3, [pc, #36]	@ (800ed60 <USBD_CDC_TransmitPacket+0x7c>)
 800ed3c:	7819      	ldrb	r1, [r3, #0]
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f006 fef3 	bl	8015b36 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ed50:	2300      	movs	r3, #0
 800ed52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ed54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	2000009f 	.word	0x2000009f

0800ed64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b084      	sub	sp, #16
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	32b0      	adds	r2, #176	@ 0xb0
 800ed76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	32b0      	adds	r2, #176	@ 0xb0
 800ed86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d101      	bne.n	800ed92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e018      	b.n	800edc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	7c1b      	ldrb	r3, [r3, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d10a      	bne.n	800edb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ed9a:	4b0c      	ldr	r3, [pc, #48]	@ (800edcc <USBD_CDC_ReceivePacket+0x68>)
 800ed9c:	7819      	ldrb	r1, [r3, #0]
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800eda4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f006 fee5 	bl	8015b78 <USBD_LL_PrepareReceive>
 800edae:	e008      	b.n	800edc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800edb0:	4b06      	ldr	r3, [pc, #24]	@ (800edcc <USBD_CDC_ReceivePacket+0x68>)
 800edb2:	7819      	ldrb	r1, [r3, #0]
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800edba:	2340      	movs	r3, #64	@ 0x40
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f006 fedb 	bl	8015b78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	200000a0 	.word	0x200000a0

0800edd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b086      	sub	sp, #24
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	60f8      	str	r0, [r7, #12]
 800edd8:	60b9      	str	r1, [r7, #8]
 800edda:	4613      	mov	r3, r2
 800eddc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d101      	bne.n	800ede8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ede4:	2303      	movs	r3, #3
 800ede6:	e01f      	b.n	800ee28 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2200      	movs	r2, #0
 800edec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	2200      	movs	r2, #0
 800edf4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	2200      	movs	r2, #0
 800edfc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d003      	beq.n	800ee0e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	68ba      	ldr	r2, [r7, #8]
 800ee0a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2201      	movs	r2, #1
 800ee12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	79fa      	ldrb	r2, [r7, #7]
 800ee1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ee1c:	68f8      	ldr	r0, [r7, #12]
 800ee1e:	f006 fd3f 	bl	80158a0 <USBD_LL_Init>
 800ee22:	4603      	mov	r3, r0
 800ee24:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ee26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	3718      	adds	r7, #24
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	bd80      	pop	{r7, pc}

0800ee30 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ee30:	b580      	push	{r7, lr}
 800ee32:	b084      	sub	sp, #16
 800ee34:	af00      	add	r7, sp, #0
 800ee36:	6078      	str	r0, [r7, #4]
 800ee38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e025      	b.n	800ee94 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	683a      	ldr	r2, [r7, #0]
 800ee4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	32ae      	adds	r2, #174	@ 0xae
 800ee5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d00f      	beq.n	800ee84 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	32ae      	adds	r2, #174	@ 0xae
 800ee6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee74:	f107 020e 	add.w	r2, r7, #14
 800ee78:	4610      	mov	r0, r2
 800ee7a:	4798      	blx	r3
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ee8a:	1c5a      	adds	r2, r3, #1
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}

0800ee9c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	b082      	sub	sp, #8
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f006 fd5d 	bl	8015964 <USBD_LL_Start>
 800eeaa:	4603      	mov	r3, r0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3708      	adds	r7, #8
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eebc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	370c      	adds	r7, #12
 800eec2:	46bd      	mov	sp, r7
 800eec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec8:	4770      	bx	lr

0800eeca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	6078      	str	r0, [r7, #4]
 800eed2:	460b      	mov	r3, r1
 800eed4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800eed6:	2300      	movs	r3, #0
 800eed8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d009      	beq.n	800eef8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	78fa      	ldrb	r2, [r7, #3]
 800eeee:	4611      	mov	r1, r2
 800eef0:	6878      	ldr	r0, [r7, #4]
 800eef2:	4798      	blx	r3
 800eef4:	4603      	mov	r3, r0
 800eef6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800eef8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b084      	sub	sp, #16
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	6078      	str	r0, [r7, #4]
 800ef0a:	460b      	mov	r3, r1
 800ef0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef0e:	2300      	movs	r3, #0
 800ef10:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	78fa      	ldrb	r2, [r7, #3]
 800ef1c:	4611      	mov	r1, r2
 800ef1e:	6878      	ldr	r0, [r7, #4]
 800ef20:	4798      	blx	r3
 800ef22:	4603      	mov	r3, r0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d001      	beq.n	800ef2c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ef28:	2303      	movs	r3, #3
 800ef2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ef2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3710      	adds	r7, #16
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ef36:	b580      	push	{r7, lr}
 800ef38:	b084      	sub	sp, #16
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
 800ef3e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef46:	6839      	ldr	r1, [r7, #0]
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f001 f8a4 	bl	8010096 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2201      	movs	r2, #1
 800ef52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ef6a:	f003 031f 	and.w	r3, r3, #31
 800ef6e:	2b02      	cmp	r3, #2
 800ef70:	d01a      	beq.n	800efa8 <USBD_LL_SetupStage+0x72>
 800ef72:	2b02      	cmp	r3, #2
 800ef74:	d822      	bhi.n	800efbc <USBD_LL_SetupStage+0x86>
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d002      	beq.n	800ef80 <USBD_LL_SetupStage+0x4a>
 800ef7a:	2b01      	cmp	r3, #1
 800ef7c:	d00a      	beq.n	800ef94 <USBD_LL_SetupStage+0x5e>
 800ef7e:	e01d      	b.n	800efbc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef86:	4619      	mov	r1, r3
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fad1 	bl	800f530 <USBD_StdDevReq>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	73fb      	strb	r3, [r7, #15]
      break;
 800ef92:	e020      	b.n	800efd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 fb39 	bl	800f614 <USBD_StdItfReq>
 800efa2:	4603      	mov	r3, r0
 800efa4:	73fb      	strb	r3, [r7, #15]
      break;
 800efa6:	e016      	b.n	800efd6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 fb9b 	bl	800f6ec <USBD_StdEPReq>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73fb      	strb	r3, [r7, #15]
      break;
 800efba:	e00c      	b.n	800efd6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800efc2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	4619      	mov	r1, r3
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f006 fd2a 	bl	8015a24 <USBD_LL_StallEP>
 800efd0:	4603      	mov	r3, r0
 800efd2:	73fb      	strb	r3, [r7, #15]
      break;
 800efd4:	bf00      	nop
  }

  return ret;
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	3710      	adds	r7, #16
 800efdc:	46bd      	mov	sp, r7
 800efde:	bd80      	pop	{r7, pc}

0800efe0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b086      	sub	sp, #24
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	60f8      	str	r0, [r7, #12]
 800efe8:	460b      	mov	r3, r1
 800efea:	607a      	str	r2, [r7, #4]
 800efec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800efee:	2300      	movs	r3, #0
 800eff0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800eff2:	7afb      	ldrb	r3, [r7, #11]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d16e      	bne.n	800f0d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800effe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f006:	2b03      	cmp	r3, #3
 800f008:	f040 8098 	bne.w	800f13c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800f00c:	693b      	ldr	r3, [r7, #16]
 800f00e:	689a      	ldr	r2, [r3, #8]
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	68db      	ldr	r3, [r3, #12]
 800f014:	429a      	cmp	r2, r3
 800f016:	d913      	bls.n	800f040 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800f018:	693b      	ldr	r3, [r7, #16]
 800f01a:	689a      	ldr	r2, [r3, #8]
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	68db      	ldr	r3, [r3, #12]
 800f020:	1ad2      	subs	r2, r2, r3
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f026:	693b      	ldr	r3, [r7, #16]
 800f028:	68da      	ldr	r2, [r3, #12]
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	689b      	ldr	r3, [r3, #8]
 800f02e:	4293      	cmp	r3, r2
 800f030:	bf28      	it	cs
 800f032:	4613      	movcs	r3, r2
 800f034:	461a      	mov	r2, r3
 800f036:	6879      	ldr	r1, [r7, #4]
 800f038:	68f8      	ldr	r0, [r7, #12]
 800f03a:	f001 f920 	bl	801027e <USBD_CtlContinueRx>
 800f03e:	e07d      	b.n	800f13c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800f046:	f003 031f 	and.w	r3, r3, #31
 800f04a:	2b02      	cmp	r3, #2
 800f04c:	d014      	beq.n	800f078 <USBD_LL_DataOutStage+0x98>
 800f04e:	2b02      	cmp	r3, #2
 800f050:	d81d      	bhi.n	800f08e <USBD_LL_DataOutStage+0xae>
 800f052:	2b00      	cmp	r3, #0
 800f054:	d002      	beq.n	800f05c <USBD_LL_DataOutStage+0x7c>
 800f056:	2b01      	cmp	r3, #1
 800f058:	d003      	beq.n	800f062 <USBD_LL_DataOutStage+0x82>
 800f05a:	e018      	b.n	800f08e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800f05c:	2300      	movs	r3, #0
 800f05e:	75bb      	strb	r3, [r7, #22]
            break;
 800f060:	e018      	b.n	800f094 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	4619      	mov	r1, r3
 800f06c:	68f8      	ldr	r0, [r7, #12]
 800f06e:	f000 f9d2 	bl	800f416 <USBD_CoreFindIF>
 800f072:	4603      	mov	r3, r0
 800f074:	75bb      	strb	r3, [r7, #22]
            break;
 800f076:	e00d      	b.n	800f094 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	4619      	mov	r1, r3
 800f082:	68f8      	ldr	r0, [r7, #12]
 800f084:	f000 f9d4 	bl	800f430 <USBD_CoreFindEP>
 800f088:	4603      	mov	r3, r0
 800f08a:	75bb      	strb	r3, [r7, #22]
            break;
 800f08c:	e002      	b.n	800f094 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800f08e:	2300      	movs	r3, #0
 800f090:	75bb      	strb	r3, [r7, #22]
            break;
 800f092:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800f094:	7dbb      	ldrb	r3, [r7, #22]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d119      	bne.n	800f0ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0a0:	b2db      	uxtb	r3, r3
 800f0a2:	2b03      	cmp	r3, #3
 800f0a4:	d113      	bne.n	800f0ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f0a6:	7dba      	ldrb	r2, [r7, #22]
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	32ae      	adds	r2, #174	@ 0xae
 800f0ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0b0:	691b      	ldr	r3, [r3, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d00b      	beq.n	800f0ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f0b6:	7dba      	ldrb	r2, [r7, #22]
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f0be:	7dba      	ldrb	r2, [r7, #22]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	32ae      	adds	r2, #174	@ 0xae
 800f0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	68f8      	ldr	r0, [r7, #12]
 800f0cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f001 f8e6 	bl	80102a0 <USBD_CtlSendStatus>
 800f0d4:	e032      	b.n	800f13c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f0d6:	7afb      	ldrb	r3, [r7, #11]
 800f0d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f0dc:	b2db      	uxtb	r3, r3
 800f0de:	4619      	mov	r1, r3
 800f0e0:	68f8      	ldr	r0, [r7, #12]
 800f0e2:	f000 f9a5 	bl	800f430 <USBD_CoreFindEP>
 800f0e6:	4603      	mov	r3, r0
 800f0e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0ea:	7dbb      	ldrb	r3, [r7, #22]
 800f0ec:	2bff      	cmp	r3, #255	@ 0xff
 800f0ee:	d025      	beq.n	800f13c <USBD_LL_DataOutStage+0x15c>
 800f0f0:	7dbb      	ldrb	r3, [r7, #22]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d122      	bne.n	800f13c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f0fc:	b2db      	uxtb	r3, r3
 800f0fe:	2b03      	cmp	r3, #3
 800f100:	d117      	bne.n	800f132 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f102:	7dba      	ldrb	r2, [r7, #22]
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	32ae      	adds	r2, #174	@ 0xae
 800f108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f10c:	699b      	ldr	r3, [r3, #24]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d00f      	beq.n	800f132 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f112:	7dba      	ldrb	r2, [r7, #22]
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f11a:	7dba      	ldrb	r2, [r7, #22]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	32ae      	adds	r2, #174	@ 0xae
 800f120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	7afa      	ldrb	r2, [r7, #11]
 800f128:	4611      	mov	r1, r2
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	4798      	blx	r3
 800f12e:	4603      	mov	r3, r0
 800f130:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f132:	7dfb      	ldrb	r3, [r7, #23]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d001      	beq.n	800f13c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f138:	7dfb      	ldrb	r3, [r7, #23]
 800f13a:	e000      	b.n	800f13e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}

0800f146 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f146:	b580      	push	{r7, lr}
 800f148:	b086      	sub	sp, #24
 800f14a:	af00      	add	r7, sp, #0
 800f14c:	60f8      	str	r0, [r7, #12]
 800f14e:	460b      	mov	r3, r1
 800f150:	607a      	str	r2, [r7, #4]
 800f152:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f154:	7afb      	ldrb	r3, [r7, #11]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d16f      	bne.n	800f23a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	3314      	adds	r3, #20
 800f15e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f166:	2b02      	cmp	r3, #2
 800f168:	d15a      	bne.n	800f220 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	689a      	ldr	r2, [r3, #8]
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	429a      	cmp	r2, r3
 800f174:	d914      	bls.n	800f1a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f176:	693b      	ldr	r3, [r7, #16]
 800f178:	689a      	ldr	r2, [r3, #8]
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	68db      	ldr	r3, [r3, #12]
 800f17e:	1ad2      	subs	r2, r2, r3
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	461a      	mov	r2, r3
 800f18a:	6879      	ldr	r1, [r7, #4]
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f001 f848 	bl	8010222 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f192:	2300      	movs	r3, #0
 800f194:	2200      	movs	r2, #0
 800f196:	2100      	movs	r1, #0
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f006 fced 	bl	8015b78 <USBD_LL_PrepareReceive>
 800f19e:	e03f      	b.n	800f220 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f1a0:	693b      	ldr	r3, [r7, #16]
 800f1a2:	68da      	ldr	r2, [r3, #12]
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	429a      	cmp	r2, r3
 800f1aa:	d11c      	bne.n	800f1e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f1ac:	693b      	ldr	r3, [r7, #16]
 800f1ae:	685a      	ldr	r2, [r3, #4]
 800f1b0:	693b      	ldr	r3, [r7, #16]
 800f1b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d316      	bcc.n	800f1e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	685a      	ldr	r2, [r3, #4]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d20f      	bcs.n	800f1e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	68f8      	ldr	r0, [r7, #12]
 800f1cc:	f001 f829 	bl	8010222 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f1d8:	2300      	movs	r3, #0
 800f1da:	2200      	movs	r2, #0
 800f1dc:	2100      	movs	r1, #0
 800f1de:	68f8      	ldr	r0, [r7, #12]
 800f1e0:	f006 fcca 	bl	8015b78 <USBD_LL_PrepareReceive>
 800f1e4:	e01c      	b.n	800f220 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d10f      	bne.n	800f212 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d009      	beq.n	800f212 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	2200      	movs	r2, #0
 800f202:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f20c:	68db      	ldr	r3, [r3, #12]
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f212:	2180      	movs	r1, #128	@ 0x80
 800f214:	68f8      	ldr	r0, [r7, #12]
 800f216:	f006 fc05 	bl	8015a24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f001 f853 	bl	80102c6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f226:	2b00      	cmp	r3, #0
 800f228:	d03a      	beq.n	800f2a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f22a:	68f8      	ldr	r0, [r7, #12]
 800f22c:	f7ff fe42 	bl	800eeb4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2200      	movs	r2, #0
 800f234:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f238:	e032      	b.n	800f2a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f23a:	7afb      	ldrb	r3, [r7, #11]
 800f23c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f240:	b2db      	uxtb	r3, r3
 800f242:	4619      	mov	r1, r3
 800f244:	68f8      	ldr	r0, [r7, #12]
 800f246:	f000 f8f3 	bl	800f430 <USBD_CoreFindEP>
 800f24a:	4603      	mov	r3, r0
 800f24c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f24e:	7dfb      	ldrb	r3, [r7, #23]
 800f250:	2bff      	cmp	r3, #255	@ 0xff
 800f252:	d025      	beq.n	800f2a0 <USBD_LL_DataInStage+0x15a>
 800f254:	7dfb      	ldrb	r3, [r7, #23]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d122      	bne.n	800f2a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b03      	cmp	r3, #3
 800f264:	d11c      	bne.n	800f2a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f266:	7dfa      	ldrb	r2, [r7, #23]
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	32ae      	adds	r2, #174	@ 0xae
 800f26c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f270:	695b      	ldr	r3, [r3, #20]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d014      	beq.n	800f2a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f276:	7dfa      	ldrb	r2, [r7, #23]
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f27e:	7dfa      	ldrb	r2, [r7, #23]
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	32ae      	adds	r2, #174	@ 0xae
 800f284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f288:	695b      	ldr	r3, [r3, #20]
 800f28a:	7afa      	ldrb	r2, [r7, #11]
 800f28c:	4611      	mov	r1, r2
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	4798      	blx	r3
 800f292:	4603      	mov	r3, r0
 800f294:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f296:	7dbb      	ldrb	r3, [r7, #22]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d001      	beq.n	800f2a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f29c:	7dbb      	ldrb	r3, [r7, #22]
 800f29e:	e000      	b.n	800f2a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3718      	adds	r7, #24
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}

0800f2aa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b084      	sub	sp, #16
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	2201      	movs	r2, #1
 800f2ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d014      	beq.n	800f310 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d00e      	beq.n	800f310 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	6852      	ldr	r2, [r2, #4]
 800f2fe:	b2d2      	uxtb	r2, r2
 800f300:	4611      	mov	r1, r2
 800f302:	6878      	ldr	r0, [r7, #4]
 800f304:	4798      	blx	r3
 800f306:	4603      	mov	r3, r0
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d001      	beq.n	800f310 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f30c:	2303      	movs	r3, #3
 800f30e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f310:	2340      	movs	r3, #64	@ 0x40
 800f312:	2200      	movs	r2, #0
 800f314:	2100      	movs	r1, #0
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f006 fb3f 	bl	801599a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2201      	movs	r2, #1
 800f320:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	2240      	movs	r2, #64	@ 0x40
 800f328:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f32c:	2340      	movs	r3, #64	@ 0x40
 800f32e:	2200      	movs	r2, #0
 800f330:	2180      	movs	r1, #128	@ 0x80
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f006 fb31 	bl	801599a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2201      	movs	r2, #1
 800f33c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	2240      	movs	r2, #64	@ 0x40
 800f342:	621a      	str	r2, [r3, #32]

  return ret;
 800f344:	7bfb      	ldrb	r3, [r7, #15]
}
 800f346:	4618      	mov	r0, r3
 800f348:	3710      	adds	r7, #16
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f34e:	b480      	push	{r7}
 800f350:	b083      	sub	sp, #12
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	460b      	mov	r3, r1
 800f358:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	78fa      	ldrb	r2, [r7, #3]
 800f35e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f360:	2300      	movs	r3, #0
}
 800f362:	4618      	mov	r0, r3
 800f364:	370c      	adds	r7, #12
 800f366:	46bd      	mov	sp, r7
 800f368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36c:	4770      	bx	lr

0800f36e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f36e:	b480      	push	{r7}
 800f370:	b083      	sub	sp, #12
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	2b04      	cmp	r3, #4
 800f380:	d006      	beq.n	800f390 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f388:	b2da      	uxtb	r2, r3
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	2204      	movs	r2, #4
 800f394:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f398:	2300      	movs	r3, #0
}
 800f39a:	4618      	mov	r0, r3
 800f39c:	370c      	adds	r7, #12
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a4:	4770      	bx	lr

0800f3a6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f3a6:	b480      	push	{r7}
 800f3a8:	b083      	sub	sp, #12
 800f3aa:	af00      	add	r7, sp, #0
 800f3ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3b4:	b2db      	uxtb	r3, r3
 800f3b6:	2b04      	cmp	r3, #4
 800f3b8:	d106      	bne.n	800f3c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f3c0:	b2da      	uxtb	r2, r3
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f3c8:	2300      	movs	r3, #0
}
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	370c      	adds	r7, #12
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr

0800f3d6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f3d6:	b580      	push	{r7, lr}
 800f3d8:	b082      	sub	sp, #8
 800f3da:	af00      	add	r7, sp, #0
 800f3dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	2b03      	cmp	r3, #3
 800f3e8:	d110      	bne.n	800f40c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d00b      	beq.n	800f40c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f3fa:	69db      	ldr	r3, [r3, #28]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d005      	beq.n	800f40c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f406:	69db      	ldr	r3, [r3, #28]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f40c:	2300      	movs	r3, #0
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3708      	adds	r7, #8
 800f412:	46bd      	mov	sp, r7
 800f414:	bd80      	pop	{r7, pc}

0800f416 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f416:	b480      	push	{r7}
 800f418:	b083      	sub	sp, #12
 800f41a:	af00      	add	r7, sp, #0
 800f41c:	6078      	str	r0, [r7, #4]
 800f41e:	460b      	mov	r3, r1
 800f420:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f422:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f424:	4618      	mov	r0, r3
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr

0800f430 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f430:	b480      	push	{r7}
 800f432:	b083      	sub	sp, #12
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	460b      	mov	r3, r1
 800f43a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f43c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f43e:	4618      	mov	r0, r3
 800f440:	370c      	adds	r7, #12
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr

0800f44a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f44a:	b580      	push	{r7, lr}
 800f44c:	b086      	sub	sp, #24
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
 800f452:	460b      	mov	r3, r1
 800f454:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f45e:	2300      	movs	r3, #0
 800f460:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	885b      	ldrh	r3, [r3, #2]
 800f466:	b29b      	uxth	r3, r3
 800f468:	68fa      	ldr	r2, [r7, #12]
 800f46a:	7812      	ldrb	r2, [r2, #0]
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d91f      	bls.n	800f4b0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	781b      	ldrb	r3, [r3, #0]
 800f474:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f476:	e013      	b.n	800f4a0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f478:	f107 030a 	add.w	r3, r7, #10
 800f47c:	4619      	mov	r1, r3
 800f47e:	6978      	ldr	r0, [r7, #20]
 800f480:	f000 f81b 	bl	800f4ba <USBD_GetNextDesc>
 800f484:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f486:	697b      	ldr	r3, [r7, #20]
 800f488:	785b      	ldrb	r3, [r3, #1]
 800f48a:	2b05      	cmp	r3, #5
 800f48c:	d108      	bne.n	800f4a0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f492:	693b      	ldr	r3, [r7, #16]
 800f494:	789b      	ldrb	r3, [r3, #2]
 800f496:	78fa      	ldrb	r2, [r7, #3]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d008      	beq.n	800f4ae <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f49c:	2300      	movs	r3, #0
 800f49e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	885b      	ldrh	r3, [r3, #2]
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	897b      	ldrh	r3, [r7, #10]
 800f4a8:	429a      	cmp	r2, r3
 800f4aa:	d8e5      	bhi.n	800f478 <USBD_GetEpDesc+0x2e>
 800f4ac:	e000      	b.n	800f4b0 <USBD_GetEpDesc+0x66>
          break;
 800f4ae:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f4b0:	693b      	ldr	r3, [r7, #16]
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3718      	adds	r7, #24
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}

0800f4ba <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f4ba:	b480      	push	{r7}
 800f4bc:	b085      	sub	sp, #20
 800f4be:	af00      	add	r7, sp, #0
 800f4c0:	6078      	str	r0, [r7, #4]
 800f4c2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f4c8:	683b      	ldr	r3, [r7, #0]
 800f4ca:	881b      	ldrh	r3, [r3, #0]
 800f4cc:	68fa      	ldr	r2, [r7, #12]
 800f4ce:	7812      	ldrb	r2, [r2, #0]
 800f4d0:	4413      	add	r3, r2
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	461a      	mov	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f4e4:	68fb      	ldr	r3, [r7, #12]
}
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f4f2:	b480      	push	{r7}
 800f4f4:	b087      	sub	sp, #28
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f4fe:	697b      	ldr	r3, [r7, #20]
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f504:	697b      	ldr	r3, [r7, #20]
 800f506:	3301      	adds	r3, #1
 800f508:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	781b      	ldrb	r3, [r3, #0]
 800f50e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f510:	8a3b      	ldrh	r3, [r7, #16]
 800f512:	021b      	lsls	r3, r3, #8
 800f514:	b21a      	sxth	r2, r3
 800f516:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f51a:	4313      	orrs	r3, r2
 800f51c:	b21b      	sxth	r3, r3
 800f51e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f520:	89fb      	ldrh	r3, [r7, #14]
}
 800f522:	4618      	mov	r0, r3
 800f524:	371c      	adds	r7, #28
 800f526:	46bd      	mov	sp, r7
 800f528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52c:	4770      	bx	lr
	...

0800f530 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b084      	sub	sp, #16
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f53a:	2300      	movs	r3, #0
 800f53c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	781b      	ldrb	r3, [r3, #0]
 800f542:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f546:	2b40      	cmp	r3, #64	@ 0x40
 800f548:	d005      	beq.n	800f556 <USBD_StdDevReq+0x26>
 800f54a:	2b40      	cmp	r3, #64	@ 0x40
 800f54c:	d857      	bhi.n	800f5fe <USBD_StdDevReq+0xce>
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d00f      	beq.n	800f572 <USBD_StdDevReq+0x42>
 800f552:	2b20      	cmp	r3, #32
 800f554:	d153      	bne.n	800f5fe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	32ae      	adds	r2, #174	@ 0xae
 800f560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f564:	689b      	ldr	r3, [r3, #8]
 800f566:	6839      	ldr	r1, [r7, #0]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	4798      	blx	r3
 800f56c:	4603      	mov	r3, r0
 800f56e:	73fb      	strb	r3, [r7, #15]
      break;
 800f570:	e04a      	b.n	800f608 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	785b      	ldrb	r3, [r3, #1]
 800f576:	2b09      	cmp	r3, #9
 800f578:	d83b      	bhi.n	800f5f2 <USBD_StdDevReq+0xc2>
 800f57a:	a201      	add	r2, pc, #4	@ (adr r2, 800f580 <USBD_StdDevReq+0x50>)
 800f57c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f580:	0800f5d5 	.word	0x0800f5d5
 800f584:	0800f5e9 	.word	0x0800f5e9
 800f588:	0800f5f3 	.word	0x0800f5f3
 800f58c:	0800f5df 	.word	0x0800f5df
 800f590:	0800f5f3 	.word	0x0800f5f3
 800f594:	0800f5b3 	.word	0x0800f5b3
 800f598:	0800f5a9 	.word	0x0800f5a9
 800f59c:	0800f5f3 	.word	0x0800f5f3
 800f5a0:	0800f5cb 	.word	0x0800f5cb
 800f5a4:	0800f5bd 	.word	0x0800f5bd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f5a8:	6839      	ldr	r1, [r7, #0]
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	f000 fa3c 	bl	800fa28 <USBD_GetDescriptor>
          break;
 800f5b0:	e024      	b.n	800f5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f5b2:	6839      	ldr	r1, [r7, #0]
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f000 fbcb 	bl	800fd50 <USBD_SetAddress>
          break;
 800f5ba:	e01f      	b.n	800f5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f5bc:	6839      	ldr	r1, [r7, #0]
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 fc0a 	bl	800fdd8 <USBD_SetConfig>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	73fb      	strb	r3, [r7, #15]
          break;
 800f5c8:	e018      	b.n	800f5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f5ca:	6839      	ldr	r1, [r7, #0]
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 fcad 	bl	800ff2c <USBD_GetConfig>
          break;
 800f5d2:	e013      	b.n	800f5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f5d4:	6839      	ldr	r1, [r7, #0]
 800f5d6:	6878      	ldr	r0, [r7, #4]
 800f5d8:	f000 fcde 	bl	800ff98 <USBD_GetStatus>
          break;
 800f5dc:	e00e      	b.n	800f5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f5de:	6839      	ldr	r1, [r7, #0]
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f000 fd0d 	bl	8010000 <USBD_SetFeature>
          break;
 800f5e6:	e009      	b.n	800f5fc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f5e8:	6839      	ldr	r1, [r7, #0]
 800f5ea:	6878      	ldr	r0, [r7, #4]
 800f5ec:	f000 fd31 	bl	8010052 <USBD_ClrFeature>
          break;
 800f5f0:	e004      	b.n	800f5fc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f5f2:	6839      	ldr	r1, [r7, #0]
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f000 fd88 	bl	801010a <USBD_CtlError>
          break;
 800f5fa:	bf00      	nop
      }
      break;
 800f5fc:	e004      	b.n	800f608 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f5fe:	6839      	ldr	r1, [r7, #0]
 800f600:	6878      	ldr	r0, [r7, #4]
 800f602:	f000 fd82 	bl	801010a <USBD_CtlError>
      break;
 800f606:	bf00      	nop
  }

  return ret;
 800f608:	7bfb      	ldrb	r3, [r7, #15]
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}
 800f612:	bf00      	nop

0800f614 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	6078      	str	r0, [r7, #4]
 800f61c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f622:	683b      	ldr	r3, [r7, #0]
 800f624:	781b      	ldrb	r3, [r3, #0]
 800f626:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f62a:	2b40      	cmp	r3, #64	@ 0x40
 800f62c:	d005      	beq.n	800f63a <USBD_StdItfReq+0x26>
 800f62e:	2b40      	cmp	r3, #64	@ 0x40
 800f630:	d852      	bhi.n	800f6d8 <USBD_StdItfReq+0xc4>
 800f632:	2b00      	cmp	r3, #0
 800f634:	d001      	beq.n	800f63a <USBD_StdItfReq+0x26>
 800f636:	2b20      	cmp	r3, #32
 800f638:	d14e      	bne.n	800f6d8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f640:	b2db      	uxtb	r3, r3
 800f642:	3b01      	subs	r3, #1
 800f644:	2b02      	cmp	r3, #2
 800f646:	d840      	bhi.n	800f6ca <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	889b      	ldrh	r3, [r3, #4]
 800f64c:	b2db      	uxtb	r3, r3
 800f64e:	2b01      	cmp	r3, #1
 800f650:	d836      	bhi.n	800f6c0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f652:	683b      	ldr	r3, [r7, #0]
 800f654:	889b      	ldrh	r3, [r3, #4]
 800f656:	b2db      	uxtb	r3, r3
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7ff fedb 	bl	800f416 <USBD_CoreFindIF>
 800f660:	4603      	mov	r3, r0
 800f662:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f664:	7bbb      	ldrb	r3, [r7, #14]
 800f666:	2bff      	cmp	r3, #255	@ 0xff
 800f668:	d01d      	beq.n	800f6a6 <USBD_StdItfReq+0x92>
 800f66a:	7bbb      	ldrb	r3, [r7, #14]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d11a      	bne.n	800f6a6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f670:	7bba      	ldrb	r2, [r7, #14]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	32ae      	adds	r2, #174	@ 0xae
 800f676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00f      	beq.n	800f6a0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f680:	7bba      	ldrb	r2, [r7, #14]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f688:	7bba      	ldrb	r2, [r7, #14]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	32ae      	adds	r2, #174	@ 0xae
 800f68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f692:	689b      	ldr	r3, [r3, #8]
 800f694:	6839      	ldr	r1, [r7, #0]
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	4798      	blx	r3
 800f69a:	4603      	mov	r3, r0
 800f69c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f69e:	e004      	b.n	800f6aa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f6a0:	2303      	movs	r3, #3
 800f6a2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f6a4:	e001      	b.n	800f6aa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f6a6:	2303      	movs	r3, #3
 800f6a8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	88db      	ldrh	r3, [r3, #6]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d110      	bne.n	800f6d4 <USBD_StdItfReq+0xc0>
 800f6b2:	7bfb      	ldrb	r3, [r7, #15]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d10d      	bne.n	800f6d4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f6b8:	6878      	ldr	r0, [r7, #4]
 800f6ba:	f000 fdf1 	bl	80102a0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f6be:	e009      	b.n	800f6d4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f6c0:	6839      	ldr	r1, [r7, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fd21 	bl	801010a <USBD_CtlError>
          break;
 800f6c8:	e004      	b.n	800f6d4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f6ca:	6839      	ldr	r1, [r7, #0]
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f000 fd1c 	bl	801010a <USBD_CtlError>
          break;
 800f6d2:	e000      	b.n	800f6d6 <USBD_StdItfReq+0xc2>
          break;
 800f6d4:	bf00      	nop
      }
      break;
 800f6d6:	e004      	b.n	800f6e2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f6d8:	6839      	ldr	r1, [r7, #0]
 800f6da:	6878      	ldr	r0, [r7, #4]
 800f6dc:	f000 fd15 	bl	801010a <USBD_CtlError>
      break;
 800f6e0:	bf00      	nop
  }

  return ret;
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3710      	adds	r7, #16
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f6fa:	683b      	ldr	r3, [r7, #0]
 800f6fc:	889b      	ldrh	r3, [r3, #4]
 800f6fe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f708:	2b40      	cmp	r3, #64	@ 0x40
 800f70a:	d007      	beq.n	800f71c <USBD_StdEPReq+0x30>
 800f70c:	2b40      	cmp	r3, #64	@ 0x40
 800f70e:	f200 817f 	bhi.w	800fa10 <USBD_StdEPReq+0x324>
 800f712:	2b00      	cmp	r3, #0
 800f714:	d02a      	beq.n	800f76c <USBD_StdEPReq+0x80>
 800f716:	2b20      	cmp	r3, #32
 800f718:	f040 817a 	bne.w	800fa10 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f71c:	7bbb      	ldrb	r3, [r7, #14]
 800f71e:	4619      	mov	r1, r3
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	f7ff fe85 	bl	800f430 <USBD_CoreFindEP>
 800f726:	4603      	mov	r3, r0
 800f728:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f72a:	7b7b      	ldrb	r3, [r7, #13]
 800f72c:	2bff      	cmp	r3, #255	@ 0xff
 800f72e:	f000 8174 	beq.w	800fa1a <USBD_StdEPReq+0x32e>
 800f732:	7b7b      	ldrb	r3, [r7, #13]
 800f734:	2b00      	cmp	r3, #0
 800f736:	f040 8170 	bne.w	800fa1a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f73a:	7b7a      	ldrb	r2, [r7, #13]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f742:	7b7a      	ldrb	r2, [r7, #13]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	32ae      	adds	r2, #174	@ 0xae
 800f748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f74c:	689b      	ldr	r3, [r3, #8]
 800f74e:	2b00      	cmp	r3, #0
 800f750:	f000 8163 	beq.w	800fa1a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f754:	7b7a      	ldrb	r2, [r7, #13]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	32ae      	adds	r2, #174	@ 0xae
 800f75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f75e:	689b      	ldr	r3, [r3, #8]
 800f760:	6839      	ldr	r1, [r7, #0]
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	4798      	blx	r3
 800f766:	4603      	mov	r3, r0
 800f768:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f76a:	e156      	b.n	800fa1a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	785b      	ldrb	r3, [r3, #1]
 800f770:	2b03      	cmp	r3, #3
 800f772:	d008      	beq.n	800f786 <USBD_StdEPReq+0x9a>
 800f774:	2b03      	cmp	r3, #3
 800f776:	f300 8145 	bgt.w	800fa04 <USBD_StdEPReq+0x318>
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	f000 809b 	beq.w	800f8b6 <USBD_StdEPReq+0x1ca>
 800f780:	2b01      	cmp	r3, #1
 800f782:	d03c      	beq.n	800f7fe <USBD_StdEPReq+0x112>
 800f784:	e13e      	b.n	800fa04 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f78c:	b2db      	uxtb	r3, r3
 800f78e:	2b02      	cmp	r3, #2
 800f790:	d002      	beq.n	800f798 <USBD_StdEPReq+0xac>
 800f792:	2b03      	cmp	r3, #3
 800f794:	d016      	beq.n	800f7c4 <USBD_StdEPReq+0xd8>
 800f796:	e02c      	b.n	800f7f2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f798:	7bbb      	ldrb	r3, [r7, #14]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d00d      	beq.n	800f7ba <USBD_StdEPReq+0xce>
 800f79e:	7bbb      	ldrb	r3, [r7, #14]
 800f7a0:	2b80      	cmp	r3, #128	@ 0x80
 800f7a2:	d00a      	beq.n	800f7ba <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7a4:	7bbb      	ldrb	r3, [r7, #14]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f006 f93b 	bl	8015a24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f7ae:	2180      	movs	r1, #128	@ 0x80
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f006 f937 	bl	8015a24 <USBD_LL_StallEP>
 800f7b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f7b8:	e020      	b.n	800f7fc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f7ba:	6839      	ldr	r1, [r7, #0]
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 fca4 	bl	801010a <USBD_CtlError>
              break;
 800f7c2:	e01b      	b.n	800f7fc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	885b      	ldrh	r3, [r3, #2]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d10e      	bne.n	800f7ea <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f7cc:	7bbb      	ldrb	r3, [r7, #14]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d00b      	beq.n	800f7ea <USBD_StdEPReq+0xfe>
 800f7d2:	7bbb      	ldrb	r3, [r7, #14]
 800f7d4:	2b80      	cmp	r3, #128	@ 0x80
 800f7d6:	d008      	beq.n	800f7ea <USBD_StdEPReq+0xfe>
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	88db      	ldrh	r3, [r3, #6]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d104      	bne.n	800f7ea <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f7e0:	7bbb      	ldrb	r3, [r7, #14]
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f006 f91d 	bl	8015a24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f7ea:	6878      	ldr	r0, [r7, #4]
 800f7ec:	f000 fd58 	bl	80102a0 <USBD_CtlSendStatus>

              break;
 800f7f0:	e004      	b.n	800f7fc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f7f2:	6839      	ldr	r1, [r7, #0]
 800f7f4:	6878      	ldr	r0, [r7, #4]
 800f7f6:	f000 fc88 	bl	801010a <USBD_CtlError>
              break;
 800f7fa:	bf00      	nop
          }
          break;
 800f7fc:	e107      	b.n	800fa0e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f804:	b2db      	uxtb	r3, r3
 800f806:	2b02      	cmp	r3, #2
 800f808:	d002      	beq.n	800f810 <USBD_StdEPReq+0x124>
 800f80a:	2b03      	cmp	r3, #3
 800f80c:	d016      	beq.n	800f83c <USBD_StdEPReq+0x150>
 800f80e:	e04b      	b.n	800f8a8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f810:	7bbb      	ldrb	r3, [r7, #14]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d00d      	beq.n	800f832 <USBD_StdEPReq+0x146>
 800f816:	7bbb      	ldrb	r3, [r7, #14]
 800f818:	2b80      	cmp	r3, #128	@ 0x80
 800f81a:	d00a      	beq.n	800f832 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f81c:	7bbb      	ldrb	r3, [r7, #14]
 800f81e:	4619      	mov	r1, r3
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f006 f8ff 	bl	8015a24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f826:	2180      	movs	r1, #128	@ 0x80
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f006 f8fb 	bl	8015a24 <USBD_LL_StallEP>
 800f82e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f830:	e040      	b.n	800f8b4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f832:	6839      	ldr	r1, [r7, #0]
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f000 fc68 	bl	801010a <USBD_CtlError>
              break;
 800f83a:	e03b      	b.n	800f8b4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f83c:	683b      	ldr	r3, [r7, #0]
 800f83e:	885b      	ldrh	r3, [r3, #2]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d136      	bne.n	800f8b2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f844:	7bbb      	ldrb	r3, [r7, #14]
 800f846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d004      	beq.n	800f858 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f84e:	7bbb      	ldrb	r3, [r7, #14]
 800f850:	4619      	mov	r1, r3
 800f852:	6878      	ldr	r0, [r7, #4]
 800f854:	f006 f905 	bl	8015a62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 fd21 	bl	80102a0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f85e:	7bbb      	ldrb	r3, [r7, #14]
 800f860:	4619      	mov	r1, r3
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7ff fde4 	bl	800f430 <USBD_CoreFindEP>
 800f868:	4603      	mov	r3, r0
 800f86a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f86c:	7b7b      	ldrb	r3, [r7, #13]
 800f86e:	2bff      	cmp	r3, #255	@ 0xff
 800f870:	d01f      	beq.n	800f8b2 <USBD_StdEPReq+0x1c6>
 800f872:	7b7b      	ldrb	r3, [r7, #13]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d11c      	bne.n	800f8b2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f878:	7b7a      	ldrb	r2, [r7, #13]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f880:	7b7a      	ldrb	r2, [r7, #13]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	32ae      	adds	r2, #174	@ 0xae
 800f886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f88a:	689b      	ldr	r3, [r3, #8]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d010      	beq.n	800f8b2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f890:	7b7a      	ldrb	r2, [r7, #13]
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	32ae      	adds	r2, #174	@ 0xae
 800f896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	6839      	ldr	r1, [r7, #0]
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	4798      	blx	r3
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f8a6:	e004      	b.n	800f8b2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f8a8:	6839      	ldr	r1, [r7, #0]
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 fc2d 	bl	801010a <USBD_CtlError>
              break;
 800f8b0:	e000      	b.n	800f8b4 <USBD_StdEPReq+0x1c8>
              break;
 800f8b2:	bf00      	nop
          }
          break;
 800f8b4:	e0ab      	b.n	800fa0e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f8bc:	b2db      	uxtb	r3, r3
 800f8be:	2b02      	cmp	r3, #2
 800f8c0:	d002      	beq.n	800f8c8 <USBD_StdEPReq+0x1dc>
 800f8c2:	2b03      	cmp	r3, #3
 800f8c4:	d032      	beq.n	800f92c <USBD_StdEPReq+0x240>
 800f8c6:	e097      	b.n	800f9f8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f8c8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d007      	beq.n	800f8de <USBD_StdEPReq+0x1f2>
 800f8ce:	7bbb      	ldrb	r3, [r7, #14]
 800f8d0:	2b80      	cmp	r3, #128	@ 0x80
 800f8d2:	d004      	beq.n	800f8de <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f8d4:	6839      	ldr	r1, [r7, #0]
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f000 fc17 	bl	801010a <USBD_CtlError>
                break;
 800f8dc:	e091      	b.n	800fa02 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f8de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	da0b      	bge.n	800f8fe <USBD_StdEPReq+0x212>
 800f8e6:	7bbb      	ldrb	r3, [r7, #14]
 800f8e8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	3310      	adds	r3, #16
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	3304      	adds	r3, #4
 800f8fc:	e00b      	b.n	800f916 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f8fe:	7bbb      	ldrb	r3, [r7, #14]
 800f900:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f904:	4613      	mov	r3, r2
 800f906:	009b      	lsls	r3, r3, #2
 800f908:	4413      	add	r3, r2
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	4413      	add	r3, r2
 800f914:	3304      	adds	r3, #4
 800f916:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2200      	movs	r2, #0
 800f91c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	2202      	movs	r2, #2
 800f922:	4619      	mov	r1, r3
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f000 fc61 	bl	80101ec <USBD_CtlSendData>
              break;
 800f92a:	e06a      	b.n	800fa02 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f92c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f930:	2b00      	cmp	r3, #0
 800f932:	da11      	bge.n	800f958 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f934:	7bbb      	ldrb	r3, [r7, #14]
 800f936:	f003 020f 	and.w	r2, r3, #15
 800f93a:	6879      	ldr	r1, [r7, #4]
 800f93c:	4613      	mov	r3, r2
 800f93e:	009b      	lsls	r3, r3, #2
 800f940:	4413      	add	r3, r2
 800f942:	009b      	lsls	r3, r3, #2
 800f944:	440b      	add	r3, r1
 800f946:	3324      	adds	r3, #36	@ 0x24
 800f948:	881b      	ldrh	r3, [r3, #0]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d117      	bne.n	800f97e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f94e:	6839      	ldr	r1, [r7, #0]
 800f950:	6878      	ldr	r0, [r7, #4]
 800f952:	f000 fbda 	bl	801010a <USBD_CtlError>
                  break;
 800f956:	e054      	b.n	800fa02 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f958:	7bbb      	ldrb	r3, [r7, #14]
 800f95a:	f003 020f 	and.w	r2, r3, #15
 800f95e:	6879      	ldr	r1, [r7, #4]
 800f960:	4613      	mov	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4413      	add	r3, r2
 800f966:	009b      	lsls	r3, r3, #2
 800f968:	440b      	add	r3, r1
 800f96a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f96e:	881b      	ldrh	r3, [r3, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d104      	bne.n	800f97e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f974:	6839      	ldr	r1, [r7, #0]
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 fbc7 	bl	801010a <USBD_CtlError>
                  break;
 800f97c:	e041      	b.n	800fa02 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f97e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f982:	2b00      	cmp	r3, #0
 800f984:	da0b      	bge.n	800f99e <USBD_StdEPReq+0x2b2>
 800f986:	7bbb      	ldrb	r3, [r7, #14]
 800f988:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f98c:	4613      	mov	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4413      	add	r3, r2
 800f992:	009b      	lsls	r3, r3, #2
 800f994:	3310      	adds	r3, #16
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	4413      	add	r3, r2
 800f99a:	3304      	adds	r3, #4
 800f99c:	e00b      	b.n	800f9b6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f99e:	7bbb      	ldrb	r3, [r7, #14]
 800f9a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f9a4:	4613      	mov	r3, r2
 800f9a6:	009b      	lsls	r3, r3, #2
 800f9a8:	4413      	add	r3, r2
 800f9aa:	009b      	lsls	r3, r3, #2
 800f9ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	4413      	add	r3, r2
 800f9b4:	3304      	adds	r3, #4
 800f9b6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d002      	beq.n	800f9c4 <USBD_StdEPReq+0x2d8>
 800f9be:	7bbb      	ldrb	r3, [r7, #14]
 800f9c0:	2b80      	cmp	r3, #128	@ 0x80
 800f9c2:	d103      	bne.n	800f9cc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	e00e      	b.n	800f9ea <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f9cc:	7bbb      	ldrb	r3, [r7, #14]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	f006 f865 	bl	8015aa0 <USBD_LL_IsStallEP>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d003      	beq.n	800f9e4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	601a      	str	r2, [r3, #0]
 800f9e2:	e002      	b.n	800f9ea <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	2202      	movs	r2, #2
 800f9ee:	4619      	mov	r1, r3
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f000 fbfb 	bl	80101ec <USBD_CtlSendData>
              break;
 800f9f6:	e004      	b.n	800fa02 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f9f8:	6839      	ldr	r1, [r7, #0]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fb85 	bl	801010a <USBD_CtlError>
              break;
 800fa00:	bf00      	nop
          }
          break;
 800fa02:	e004      	b.n	800fa0e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fa04:	6839      	ldr	r1, [r7, #0]
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 fb7f 	bl	801010a <USBD_CtlError>
          break;
 800fa0c:	bf00      	nop
      }
      break;
 800fa0e:	e005      	b.n	800fa1c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fa10:	6839      	ldr	r1, [r7, #0]
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 fb79 	bl	801010a <USBD_CtlError>
      break;
 800fa18:	e000      	b.n	800fa1c <USBD_StdEPReq+0x330>
      break;
 800fa1a:	bf00      	nop
  }

  return ret;
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}
	...

0800fa28 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fa32:	2300      	movs	r3, #0
 800fa34:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800fa36:	2300      	movs	r3, #0
 800fa38:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	885b      	ldrh	r3, [r3, #2]
 800fa42:	0a1b      	lsrs	r3, r3, #8
 800fa44:	b29b      	uxth	r3, r3
 800fa46:	3b01      	subs	r3, #1
 800fa48:	2b0e      	cmp	r3, #14
 800fa4a:	f200 8152 	bhi.w	800fcf2 <USBD_GetDescriptor+0x2ca>
 800fa4e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa54 <USBD_GetDescriptor+0x2c>)
 800fa50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa54:	0800fac5 	.word	0x0800fac5
 800fa58:	0800fadd 	.word	0x0800fadd
 800fa5c:	0800fb1d 	.word	0x0800fb1d
 800fa60:	0800fcf3 	.word	0x0800fcf3
 800fa64:	0800fcf3 	.word	0x0800fcf3
 800fa68:	0800fc93 	.word	0x0800fc93
 800fa6c:	0800fcbf 	.word	0x0800fcbf
 800fa70:	0800fcf3 	.word	0x0800fcf3
 800fa74:	0800fcf3 	.word	0x0800fcf3
 800fa78:	0800fcf3 	.word	0x0800fcf3
 800fa7c:	0800fcf3 	.word	0x0800fcf3
 800fa80:	0800fcf3 	.word	0x0800fcf3
 800fa84:	0800fcf3 	.word	0x0800fcf3
 800fa88:	0800fcf3 	.word	0x0800fcf3
 800fa8c:	0800fa91 	.word	0x0800fa91
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fa96:	69db      	ldr	r3, [r3, #28]
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d00b      	beq.n	800fab4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faa2:	69db      	ldr	r3, [r3, #28]
 800faa4:	687a      	ldr	r2, [r7, #4]
 800faa6:	7c12      	ldrb	r2, [r2, #16]
 800faa8:	f107 0108 	add.w	r1, r7, #8
 800faac:	4610      	mov	r0, r2
 800faae:	4798      	blx	r3
 800fab0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fab2:	e126      	b.n	800fd02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fab4:	6839      	ldr	r1, [r7, #0]
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 fb27 	bl	801010a <USBD_CtlError>
        err++;
 800fabc:	7afb      	ldrb	r3, [r7, #11]
 800fabe:	3301      	adds	r3, #1
 800fac0:	72fb      	strb	r3, [r7, #11]
      break;
 800fac2:	e11e      	b.n	800fd02 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	687a      	ldr	r2, [r7, #4]
 800face:	7c12      	ldrb	r2, [r2, #16]
 800fad0:	f107 0108 	add.w	r1, r7, #8
 800fad4:	4610      	mov	r0, r2
 800fad6:	4798      	blx	r3
 800fad8:	60f8      	str	r0, [r7, #12]
      break;
 800fada:	e112      	b.n	800fd02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	7c1b      	ldrb	r3, [r3, #16]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d10d      	bne.n	800fb00 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800faea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800faec:	f107 0208 	add.w	r2, r7, #8
 800faf0:	4610      	mov	r0, r2
 800faf2:	4798      	blx	r3
 800faf4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3301      	adds	r3, #1
 800fafa:	2202      	movs	r2, #2
 800fafc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fafe:	e100      	b.n	800fd02 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb08:	f107 0208 	add.w	r2, r7, #8
 800fb0c:	4610      	mov	r0, r2
 800fb0e:	4798      	blx	r3
 800fb10:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	3301      	adds	r3, #1
 800fb16:	2202      	movs	r2, #2
 800fb18:	701a      	strb	r2, [r3, #0]
      break;
 800fb1a:	e0f2      	b.n	800fd02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	885b      	ldrh	r3, [r3, #2]
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	2b05      	cmp	r3, #5
 800fb24:	f200 80ac 	bhi.w	800fc80 <USBD_GetDescriptor+0x258>
 800fb28:	a201      	add	r2, pc, #4	@ (adr r2, 800fb30 <USBD_GetDescriptor+0x108>)
 800fb2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb2e:	bf00      	nop
 800fb30:	0800fb49 	.word	0x0800fb49
 800fb34:	0800fb7d 	.word	0x0800fb7d
 800fb38:	0800fbb1 	.word	0x0800fbb1
 800fb3c:	0800fbe5 	.word	0x0800fbe5
 800fb40:	0800fc19 	.word	0x0800fc19
 800fb44:	0800fc4d 	.word	0x0800fc4d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00b      	beq.n	800fb6c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	687a      	ldr	r2, [r7, #4]
 800fb5e:	7c12      	ldrb	r2, [r2, #16]
 800fb60:	f107 0108 	add.w	r1, r7, #8
 800fb64:	4610      	mov	r0, r2
 800fb66:	4798      	blx	r3
 800fb68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb6a:	e091      	b.n	800fc90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fb6c:	6839      	ldr	r1, [r7, #0]
 800fb6e:	6878      	ldr	r0, [r7, #4]
 800fb70:	f000 facb 	bl	801010a <USBD_CtlError>
            err++;
 800fb74:	7afb      	ldrb	r3, [r7, #11]
 800fb76:	3301      	adds	r3, #1
 800fb78:	72fb      	strb	r3, [r7, #11]
          break;
 800fb7a:	e089      	b.n	800fc90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb82:	689b      	ldr	r3, [r3, #8]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d00b      	beq.n	800fba0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	687a      	ldr	r2, [r7, #4]
 800fb92:	7c12      	ldrb	r2, [r2, #16]
 800fb94:	f107 0108 	add.w	r1, r7, #8
 800fb98:	4610      	mov	r0, r2
 800fb9a:	4798      	blx	r3
 800fb9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fb9e:	e077      	b.n	800fc90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f000 fab1 	bl	801010a <USBD_CtlError>
            err++;
 800fba8:	7afb      	ldrb	r3, [r7, #11]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	72fb      	strb	r3, [r7, #11]
          break;
 800fbae:	e06f      	b.n	800fc90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbb6:	68db      	ldr	r3, [r3, #12]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00b      	beq.n	800fbd4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbc2:	68db      	ldr	r3, [r3, #12]
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	7c12      	ldrb	r2, [r2, #16]
 800fbc8:	f107 0108 	add.w	r1, r7, #8
 800fbcc:	4610      	mov	r0, r2
 800fbce:	4798      	blx	r3
 800fbd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbd2:	e05d      	b.n	800fc90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbd4:	6839      	ldr	r1, [r7, #0]
 800fbd6:	6878      	ldr	r0, [r7, #4]
 800fbd8:	f000 fa97 	bl	801010a <USBD_CtlError>
            err++;
 800fbdc:	7afb      	ldrb	r3, [r7, #11]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	72fb      	strb	r3, [r7, #11]
          break;
 800fbe2:	e055      	b.n	800fc90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbea:	691b      	ldr	r3, [r3, #16]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d00b      	beq.n	800fc08 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbf6:	691b      	ldr	r3, [r3, #16]
 800fbf8:	687a      	ldr	r2, [r7, #4]
 800fbfa:	7c12      	ldrb	r2, [r2, #16]
 800fbfc:	f107 0108 	add.w	r1, r7, #8
 800fc00:	4610      	mov	r0, r2
 800fc02:	4798      	blx	r3
 800fc04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc06:	e043      	b.n	800fc90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc08:	6839      	ldr	r1, [r7, #0]
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f000 fa7d 	bl	801010a <USBD_CtlError>
            err++;
 800fc10:	7afb      	ldrb	r3, [r7, #11]
 800fc12:	3301      	adds	r3, #1
 800fc14:	72fb      	strb	r3, [r7, #11]
          break;
 800fc16:	e03b      	b.n	800fc90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc1e:	695b      	ldr	r3, [r3, #20]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d00b      	beq.n	800fc3c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc2a:	695b      	ldr	r3, [r3, #20]
 800fc2c:	687a      	ldr	r2, [r7, #4]
 800fc2e:	7c12      	ldrb	r2, [r2, #16]
 800fc30:	f107 0108 	add.w	r1, r7, #8
 800fc34:	4610      	mov	r0, r2
 800fc36:	4798      	blx	r3
 800fc38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc3a:	e029      	b.n	800fc90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc3c:	6839      	ldr	r1, [r7, #0]
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 fa63 	bl	801010a <USBD_CtlError>
            err++;
 800fc44:	7afb      	ldrb	r3, [r7, #11]
 800fc46:	3301      	adds	r3, #1
 800fc48:	72fb      	strb	r3, [r7, #11]
          break;
 800fc4a:	e021      	b.n	800fc90 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc52:	699b      	ldr	r3, [r3, #24]
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d00b      	beq.n	800fc70 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc5e:	699b      	ldr	r3, [r3, #24]
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	7c12      	ldrb	r2, [r2, #16]
 800fc64:	f107 0108 	add.w	r1, r7, #8
 800fc68:	4610      	mov	r0, r2
 800fc6a:	4798      	blx	r3
 800fc6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc6e:	e00f      	b.n	800fc90 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc70:	6839      	ldr	r1, [r7, #0]
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f000 fa49 	bl	801010a <USBD_CtlError>
            err++;
 800fc78:	7afb      	ldrb	r3, [r7, #11]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	72fb      	strb	r3, [r7, #11]
          break;
 800fc7e:	e007      	b.n	800fc90 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fc80:	6839      	ldr	r1, [r7, #0]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f000 fa41 	bl	801010a <USBD_CtlError>
          err++;
 800fc88:	7afb      	ldrb	r3, [r7, #11]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fc8e:	bf00      	nop
      }
      break;
 800fc90:	e037      	b.n	800fd02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	7c1b      	ldrb	r3, [r3, #16]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d109      	bne.n	800fcae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fca0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fca2:	f107 0208 	add.w	r2, r7, #8
 800fca6:	4610      	mov	r0, r2
 800fca8:	4798      	blx	r3
 800fcaa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fcac:	e029      	b.n	800fd02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fcae:	6839      	ldr	r1, [r7, #0]
 800fcb0:	6878      	ldr	r0, [r7, #4]
 800fcb2:	f000 fa2a 	bl	801010a <USBD_CtlError>
        err++;
 800fcb6:	7afb      	ldrb	r3, [r7, #11]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	72fb      	strb	r3, [r7, #11]
      break;
 800fcbc:	e021      	b.n	800fd02 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	7c1b      	ldrb	r3, [r3, #16]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d10d      	bne.n	800fce2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fcce:	f107 0208 	add.w	r2, r7, #8
 800fcd2:	4610      	mov	r0, r2
 800fcd4:	4798      	blx	r3
 800fcd6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	2207      	movs	r2, #7
 800fcde:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fce0:	e00f      	b.n	800fd02 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fce2:	6839      	ldr	r1, [r7, #0]
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 fa10 	bl	801010a <USBD_CtlError>
        err++;
 800fcea:	7afb      	ldrb	r3, [r7, #11]
 800fcec:	3301      	adds	r3, #1
 800fcee:	72fb      	strb	r3, [r7, #11]
      break;
 800fcf0:	e007      	b.n	800fd02 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fcf2:	6839      	ldr	r1, [r7, #0]
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f000 fa08 	bl	801010a <USBD_CtlError>
      err++;
 800fcfa:	7afb      	ldrb	r3, [r7, #11]
 800fcfc:	3301      	adds	r3, #1
 800fcfe:	72fb      	strb	r3, [r7, #11]
      break;
 800fd00:	bf00      	nop
  }

  if (err != 0U)
 800fd02:	7afb      	ldrb	r3, [r7, #11]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d11e      	bne.n	800fd46 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	88db      	ldrh	r3, [r3, #6]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d016      	beq.n	800fd3e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fd10:	893b      	ldrh	r3, [r7, #8]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d00e      	beq.n	800fd34 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	88da      	ldrh	r2, [r3, #6]
 800fd1a:	893b      	ldrh	r3, [r7, #8]
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	bf28      	it	cs
 800fd20:	4613      	movcs	r3, r2
 800fd22:	b29b      	uxth	r3, r3
 800fd24:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fd26:	893b      	ldrh	r3, [r7, #8]
 800fd28:	461a      	mov	r2, r3
 800fd2a:	68f9      	ldr	r1, [r7, #12]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f000 fa5d 	bl	80101ec <USBD_CtlSendData>
 800fd32:	e009      	b.n	800fd48 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fd34:	6839      	ldr	r1, [r7, #0]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 f9e7 	bl	801010a <USBD_CtlError>
 800fd3c:	e004      	b.n	800fd48 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 faae 	bl	80102a0 <USBD_CtlSendStatus>
 800fd44:	e000      	b.n	800fd48 <USBD_GetDescriptor+0x320>
    return;
 800fd46:	bf00      	nop
  }
}
 800fd48:	3710      	adds	r7, #16
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop

0800fd50 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b084      	sub	sp, #16
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
 800fd58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fd5a:	683b      	ldr	r3, [r7, #0]
 800fd5c:	889b      	ldrh	r3, [r3, #4]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d131      	bne.n	800fdc6 <USBD_SetAddress+0x76>
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	88db      	ldrh	r3, [r3, #6]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d12d      	bne.n	800fdc6 <USBD_SetAddress+0x76>
 800fd6a:	683b      	ldr	r3, [r7, #0]
 800fd6c:	885b      	ldrh	r3, [r3, #2]
 800fd6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800fd70:	d829      	bhi.n	800fdc6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fd72:	683b      	ldr	r3, [r7, #0]
 800fd74:	885b      	ldrh	r3, [r3, #2]
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fd84:	b2db      	uxtb	r3, r3
 800fd86:	2b03      	cmp	r3, #3
 800fd88:	d104      	bne.n	800fd94 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fd8a:	6839      	ldr	r1, [r7, #0]
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f000 f9bc 	bl	801010a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fd92:	e01d      	b.n	800fdd0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	7bfa      	ldrb	r2, [r7, #15]
 800fd98:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fd9c:	7bfb      	ldrb	r3, [r7, #15]
 800fd9e:	4619      	mov	r1, r3
 800fda0:	6878      	ldr	r0, [r7, #4]
 800fda2:	f005 fea9 	bl	8015af8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fda6:	6878      	ldr	r0, [r7, #4]
 800fda8:	f000 fa7a 	bl	80102a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fdac:	7bfb      	ldrb	r3, [r7, #15]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d004      	beq.n	800fdbc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	2202      	movs	r2, #2
 800fdb6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdba:	e009      	b.n	800fdd0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	2201      	movs	r2, #1
 800fdc0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fdc4:	e004      	b.n	800fdd0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fdc6:	6839      	ldr	r1, [r7, #0]
 800fdc8:	6878      	ldr	r0, [r7, #4]
 800fdca:	f000 f99e 	bl	801010a <USBD_CtlError>
  }
}
 800fdce:	bf00      	nop
 800fdd0:	bf00      	nop
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b084      	sub	sp, #16
 800fddc:	af00      	add	r7, sp, #0
 800fdde:	6078      	str	r0, [r7, #4]
 800fde0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fde2:	2300      	movs	r3, #0
 800fde4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	885b      	ldrh	r3, [r3, #2]
 800fdea:	b2da      	uxtb	r2, r3
 800fdec:	4b4e      	ldr	r3, [pc, #312]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fdee:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fdf0:	4b4d      	ldr	r3, [pc, #308]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d905      	bls.n	800fe04 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fdf8:	6839      	ldr	r1, [r7, #0]
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f000 f985 	bl	801010a <USBD_CtlError>
    return USBD_FAIL;
 800fe00:	2303      	movs	r3, #3
 800fe02:	e08c      	b.n	800ff1e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	2b02      	cmp	r3, #2
 800fe0e:	d002      	beq.n	800fe16 <USBD_SetConfig+0x3e>
 800fe10:	2b03      	cmp	r3, #3
 800fe12:	d029      	beq.n	800fe68 <USBD_SetConfig+0x90>
 800fe14:	e075      	b.n	800ff02 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fe16:	4b44      	ldr	r3, [pc, #272]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d020      	beq.n	800fe60 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fe1e:	4b42      	ldr	r3, [pc, #264]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fe20:	781b      	ldrb	r3, [r3, #0]
 800fe22:	461a      	mov	r2, r3
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800fe28:	4b3f      	ldr	r3, [pc, #252]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	4619      	mov	r1, r3
 800fe2e:	6878      	ldr	r0, [r7, #4]
 800fe30:	f7ff f84b 	bl	800eeca <USBD_SetClassConfig>
 800fe34:	4603      	mov	r3, r0
 800fe36:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800fe38:	7bfb      	ldrb	r3, [r7, #15]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d008      	beq.n	800fe50 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fe3e:	6839      	ldr	r1, [r7, #0]
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 f962 	bl	801010a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	2202      	movs	r2, #2
 800fe4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe4e:	e065      	b.n	800ff1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 fa25 	bl	80102a0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2203      	movs	r2, #3
 800fe5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fe5e:	e05d      	b.n	800ff1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fe60:	6878      	ldr	r0, [r7, #4]
 800fe62:	f000 fa1d 	bl	80102a0 <USBD_CtlSendStatus>
      break;
 800fe66:	e059      	b.n	800ff1c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800fe68:	4b2f      	ldr	r3, [pc, #188]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d112      	bne.n	800fe96 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	2202      	movs	r2, #2
 800fe74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fe78:	4b2b      	ldr	r3, [pc, #172]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800fe82:	4b29      	ldr	r3, [pc, #164]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	4619      	mov	r1, r3
 800fe88:	6878      	ldr	r0, [r7, #4]
 800fe8a:	f7ff f83a 	bl	800ef02 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f000 fa06 	bl	80102a0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fe94:	e042      	b.n	800ff1c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800fe96:	4b24      	ldr	r3, [pc, #144]	@ (800ff28 <USBD_SetConfig+0x150>)
 800fe98:	781b      	ldrb	r3, [r3, #0]
 800fe9a:	461a      	mov	r2, r3
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	685b      	ldr	r3, [r3, #4]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d02a      	beq.n	800fefa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	685b      	ldr	r3, [r3, #4]
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	4619      	mov	r1, r3
 800feac:	6878      	ldr	r0, [r7, #4]
 800feae:	f7ff f828 	bl	800ef02 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800feb2:	4b1d      	ldr	r3, [pc, #116]	@ (800ff28 <USBD_SetConfig+0x150>)
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	461a      	mov	r2, r3
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800febc:	4b1a      	ldr	r3, [pc, #104]	@ (800ff28 <USBD_SetConfig+0x150>)
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	4619      	mov	r1, r3
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f7ff f801 	bl	800eeca <USBD_SetClassConfig>
 800fec8:	4603      	mov	r3, r0
 800feca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d00f      	beq.n	800fef2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 f918 	bl	801010a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7ff f80d 	bl	800ef02 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2202      	movs	r2, #2
 800feec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fef0:	e014      	b.n	800ff1c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 f9d4 	bl	80102a0 <USBD_CtlSendStatus>
      break;
 800fef8:	e010      	b.n	800ff1c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 f9d0 	bl	80102a0 <USBD_CtlSendStatus>
      break;
 800ff00:	e00c      	b.n	800ff1c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	6878      	ldr	r0, [r7, #4]
 800ff06:	f000 f900 	bl	801010a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff0a:	4b07      	ldr	r3, [pc, #28]	@ (800ff28 <USBD_SetConfig+0x150>)
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	4619      	mov	r1, r3
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f7fe fff6 	bl	800ef02 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff16:	2303      	movs	r3, #3
 800ff18:	73fb      	strb	r3, [r7, #15]
      break;
 800ff1a:	bf00      	nop
  }

  return ret;
 800ff1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	20001938 	.word	0x20001938

0800ff2c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	88db      	ldrh	r3, [r3, #6]
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	d004      	beq.n	800ff48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ff3e:	6839      	ldr	r1, [r7, #0]
 800ff40:	6878      	ldr	r0, [r7, #4]
 800ff42:	f000 f8e2 	bl	801010a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ff46:	e023      	b.n	800ff90 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff4e:	b2db      	uxtb	r3, r3
 800ff50:	2b02      	cmp	r3, #2
 800ff52:	dc02      	bgt.n	800ff5a <USBD_GetConfig+0x2e>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	dc03      	bgt.n	800ff60 <USBD_GetConfig+0x34>
 800ff58:	e015      	b.n	800ff86 <USBD_GetConfig+0x5a>
 800ff5a:	2b03      	cmp	r3, #3
 800ff5c:	d00b      	beq.n	800ff76 <USBD_GetConfig+0x4a>
 800ff5e:	e012      	b.n	800ff86 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2200      	movs	r2, #0
 800ff64:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	3308      	adds	r3, #8
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	4619      	mov	r1, r3
 800ff6e:	6878      	ldr	r0, [r7, #4]
 800ff70:	f000 f93c 	bl	80101ec <USBD_CtlSendData>
        break;
 800ff74:	e00c      	b.n	800ff90 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	3304      	adds	r3, #4
 800ff7a:	2201      	movs	r2, #1
 800ff7c:	4619      	mov	r1, r3
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 f934 	bl	80101ec <USBD_CtlSendData>
        break;
 800ff84:	e004      	b.n	800ff90 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ff86:	6839      	ldr	r1, [r7, #0]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 f8be 	bl	801010a <USBD_CtlError>
        break;
 800ff8e:	bf00      	nop
}
 800ff90:	bf00      	nop
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffa8:	b2db      	uxtb	r3, r3
 800ffaa:	3b01      	subs	r3, #1
 800ffac:	2b02      	cmp	r3, #2
 800ffae:	d81e      	bhi.n	800ffee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	88db      	ldrh	r3, [r3, #6]
 800ffb4:	2b02      	cmp	r3, #2
 800ffb6:	d004      	beq.n	800ffc2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ffb8:	6839      	ldr	r1, [r7, #0]
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 f8a5 	bl	801010a <USBD_CtlError>
        break;
 800ffc0:	e01a      	b.n	800fff8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2201      	movs	r2, #1
 800ffc6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d005      	beq.n	800ffde <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	f043 0202 	orr.w	r2, r3, #2
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	330c      	adds	r3, #12
 800ffe2:	2202      	movs	r2, #2
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f900 	bl	80101ec <USBD_CtlSendData>
      break;
 800ffec:	e004      	b.n	800fff8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ffee:	6839      	ldr	r1, [r7, #0]
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 f88a 	bl	801010a <USBD_CtlError>
      break;
 800fff6:	bf00      	nop
  }
}
 800fff8:	bf00      	nop
 800fffa:	3708      	adds	r7, #8
 800fffc:	46bd      	mov	sp, r7
 800fffe:	bd80      	pop	{r7, pc}

08010000 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b082      	sub	sp, #8
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	885b      	ldrh	r3, [r3, #2]
 801000e:	2b01      	cmp	r3, #1
 8010010:	d107      	bne.n	8010022 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	2201      	movs	r2, #1
 8010016:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 f940 	bl	80102a0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8010020:	e013      	b.n	801004a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8010022:	683b      	ldr	r3, [r7, #0]
 8010024:	885b      	ldrh	r3, [r3, #2]
 8010026:	2b02      	cmp	r3, #2
 8010028:	d10b      	bne.n	8010042 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	889b      	ldrh	r3, [r3, #4]
 801002e:	0a1b      	lsrs	r3, r3, #8
 8010030:	b29b      	uxth	r3, r3
 8010032:	b2da      	uxtb	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f000 f930 	bl	80102a0 <USBD_CtlSendStatus>
}
 8010040:	e003      	b.n	801004a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8010042:	6839      	ldr	r1, [r7, #0]
 8010044:	6878      	ldr	r0, [r7, #4]
 8010046:	f000 f860 	bl	801010a <USBD_CtlError>
}
 801004a:	bf00      	nop
 801004c:	3708      	adds	r7, #8
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010052:	b580      	push	{r7, lr}
 8010054:	b082      	sub	sp, #8
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010062:	b2db      	uxtb	r3, r3
 8010064:	3b01      	subs	r3, #1
 8010066:	2b02      	cmp	r3, #2
 8010068:	d80b      	bhi.n	8010082 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	885b      	ldrh	r3, [r3, #2]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d10c      	bne.n	801008c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2200      	movs	r2, #0
 8010076:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f000 f910 	bl	80102a0 <USBD_CtlSendStatus>
      }
      break;
 8010080:	e004      	b.n	801008c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010082:	6839      	ldr	r1, [r7, #0]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f000 f840 	bl	801010a <USBD_CtlError>
      break;
 801008a:	e000      	b.n	801008e <USBD_ClrFeature+0x3c>
      break;
 801008c:	bf00      	nop
  }
}
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}

08010096 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010096:	b580      	push	{r7, lr}
 8010098:	b084      	sub	sp, #16
 801009a:	af00      	add	r7, sp, #0
 801009c:	6078      	str	r0, [r7, #4]
 801009e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	781a      	ldrb	r2, [r3, #0]
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	3301      	adds	r3, #1
 80100b0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	781a      	ldrb	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	3301      	adds	r3, #1
 80100be:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80100c0:	68f8      	ldr	r0, [r7, #12]
 80100c2:	f7ff fa16 	bl	800f4f2 <SWAPBYTE>
 80100c6:	4603      	mov	r3, r0
 80100c8:	461a      	mov	r2, r3
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	3301      	adds	r3, #1
 80100d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	3301      	adds	r3, #1
 80100d8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80100da:	68f8      	ldr	r0, [r7, #12]
 80100dc:	f7ff fa09 	bl	800f4f2 <SWAPBYTE>
 80100e0:	4603      	mov	r3, r0
 80100e2:	461a      	mov	r2, r3
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	3301      	adds	r3, #1
 80100ec:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	3301      	adds	r3, #1
 80100f2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f7ff f9fc 	bl	800f4f2 <SWAPBYTE>
 80100fa:	4603      	mov	r3, r0
 80100fc:	461a      	mov	r2, r3
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	80da      	strh	r2, [r3, #6]
}
 8010102:	bf00      	nop
 8010104:	3710      	adds	r7, #16
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}

0801010a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801010a:	b580      	push	{r7, lr}
 801010c:	b082      	sub	sp, #8
 801010e:	af00      	add	r7, sp, #0
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010114:	2180      	movs	r1, #128	@ 0x80
 8010116:	6878      	ldr	r0, [r7, #4]
 8010118:	f005 fc84 	bl	8015a24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801011c:	2100      	movs	r1, #0
 801011e:	6878      	ldr	r0, [r7, #4]
 8010120:	f005 fc80 	bl	8015a24 <USBD_LL_StallEP>
}
 8010124:	bf00      	nop
 8010126:	3708      	adds	r7, #8
 8010128:	46bd      	mov	sp, r7
 801012a:	bd80      	pop	{r7, pc}

0801012c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b086      	sub	sp, #24
 8010130:	af00      	add	r7, sp, #0
 8010132:	60f8      	str	r0, [r7, #12]
 8010134:	60b9      	str	r1, [r7, #8]
 8010136:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8010138:	2300      	movs	r3, #0
 801013a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d036      	beq.n	80101b0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010146:	6938      	ldr	r0, [r7, #16]
 8010148:	f000 f836 	bl	80101b8 <USBD_GetLen>
 801014c:	4603      	mov	r3, r0
 801014e:	3301      	adds	r3, #1
 8010150:	b29b      	uxth	r3, r3
 8010152:	005b      	lsls	r3, r3, #1
 8010154:	b29a      	uxth	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801015a:	7dfb      	ldrb	r3, [r7, #23]
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	4413      	add	r3, r2
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	7812      	ldrb	r2, [r2, #0]
 8010164:	701a      	strb	r2, [r3, #0]
  idx++;
 8010166:	7dfb      	ldrb	r3, [r7, #23]
 8010168:	3301      	adds	r3, #1
 801016a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801016c:	7dfb      	ldrb	r3, [r7, #23]
 801016e:	68ba      	ldr	r2, [r7, #8]
 8010170:	4413      	add	r3, r2
 8010172:	2203      	movs	r2, #3
 8010174:	701a      	strb	r2, [r3, #0]
  idx++;
 8010176:	7dfb      	ldrb	r3, [r7, #23]
 8010178:	3301      	adds	r3, #1
 801017a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801017c:	e013      	b.n	80101a6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801017e:	7dfb      	ldrb	r3, [r7, #23]
 8010180:	68ba      	ldr	r2, [r7, #8]
 8010182:	4413      	add	r3, r2
 8010184:	693a      	ldr	r2, [r7, #16]
 8010186:	7812      	ldrb	r2, [r2, #0]
 8010188:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801018a:	693b      	ldr	r3, [r7, #16]
 801018c:	3301      	adds	r3, #1
 801018e:	613b      	str	r3, [r7, #16]
    idx++;
 8010190:	7dfb      	ldrb	r3, [r7, #23]
 8010192:	3301      	adds	r3, #1
 8010194:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010196:	7dfb      	ldrb	r3, [r7, #23]
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	4413      	add	r3, r2
 801019c:	2200      	movs	r2, #0
 801019e:	701a      	strb	r2, [r3, #0]
    idx++;
 80101a0:	7dfb      	ldrb	r3, [r7, #23]
 80101a2:	3301      	adds	r3, #1
 80101a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	781b      	ldrb	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d1e7      	bne.n	801017e <USBD_GetString+0x52>
 80101ae:	e000      	b.n	80101b2 <USBD_GetString+0x86>
    return;
 80101b0:	bf00      	nop
  }
}
 80101b2:	3718      	adds	r7, #24
 80101b4:	46bd      	mov	sp, r7
 80101b6:	bd80      	pop	{r7, pc}

080101b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80101b8:	b480      	push	{r7}
 80101ba:	b085      	sub	sp, #20
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80101c0:	2300      	movs	r3, #0
 80101c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80101c8:	e005      	b.n	80101d6 <USBD_GetLen+0x1e>
  {
    len++;
 80101ca:	7bfb      	ldrb	r3, [r7, #15]
 80101cc:	3301      	adds	r3, #1
 80101ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	3301      	adds	r3, #1
 80101d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	781b      	ldrb	r3, [r3, #0]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d1f5      	bne.n	80101ca <USBD_GetLen+0x12>
  }

  return len;
 80101de:	7bfb      	ldrb	r3, [r7, #15]
}
 80101e0:	4618      	mov	r0, r3
 80101e2:	3714      	adds	r7, #20
 80101e4:	46bd      	mov	sp, r7
 80101e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ea:	4770      	bx	lr

080101ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b084      	sub	sp, #16
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2202      	movs	r2, #2
 80101fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	687a      	ldr	r2, [r7, #4]
 801020a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	68ba      	ldr	r2, [r7, #8]
 8010210:	2100      	movs	r1, #0
 8010212:	68f8      	ldr	r0, [r7, #12]
 8010214:	f005 fc8f 	bl	8015b36 <USBD_LL_Transmit>

  return USBD_OK;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	3710      	adds	r7, #16
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}

08010222 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010222:	b580      	push	{r7, lr}
 8010224:	b084      	sub	sp, #16
 8010226:	af00      	add	r7, sp, #0
 8010228:	60f8      	str	r0, [r7, #12]
 801022a:	60b9      	str	r1, [r7, #8]
 801022c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	68ba      	ldr	r2, [r7, #8]
 8010232:	2100      	movs	r1, #0
 8010234:	68f8      	ldr	r0, [r7, #12]
 8010236:	f005 fc7e 	bl	8015b36 <USBD_LL_Transmit>

  return USBD_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}

08010244 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	b084      	sub	sp, #16
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	2203      	movs	r2, #3
 8010254:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	687a      	ldr	r2, [r7, #4]
 801025c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	68ba      	ldr	r2, [r7, #8]
 801026c:	2100      	movs	r1, #0
 801026e:	68f8      	ldr	r0, [r7, #12]
 8010270:	f005 fc82 	bl	8015b78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010274:	2300      	movs	r3, #0
}
 8010276:	4618      	mov	r0, r3
 8010278:	3710      	adds	r7, #16
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}

0801027e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801027e:	b580      	push	{r7, lr}
 8010280:	b084      	sub	sp, #16
 8010282:	af00      	add	r7, sp, #0
 8010284:	60f8      	str	r0, [r7, #12]
 8010286:	60b9      	str	r1, [r7, #8]
 8010288:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	68ba      	ldr	r2, [r7, #8]
 801028e:	2100      	movs	r1, #0
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f005 fc71 	bl	8015b78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010296:	2300      	movs	r3, #0
}
 8010298:	4618      	mov	r0, r3
 801029a:	3710      	adds	r7, #16
 801029c:	46bd      	mov	sp, r7
 801029e:	bd80      	pop	{r7, pc}

080102a0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b082      	sub	sp, #8
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2204      	movs	r2, #4
 80102ac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80102b0:	2300      	movs	r3, #0
 80102b2:	2200      	movs	r2, #0
 80102b4:	2100      	movs	r1, #0
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f005 fc3d 	bl	8015b36 <USBD_LL_Transmit>

  return USBD_OK;
 80102bc:	2300      	movs	r3, #0
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3708      	adds	r7, #8
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80102c6:	b580      	push	{r7, lr}
 80102c8:	b082      	sub	sp, #8
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2205      	movs	r2, #5
 80102d2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80102d6:	2300      	movs	r3, #0
 80102d8:	2200      	movs	r2, #0
 80102da:	2100      	movs	r1, #0
 80102dc:	6878      	ldr	r0, [r7, #4]
 80102de:	f005 fc4b 	bl	8015b78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80102e2:	2300      	movs	r3, #0
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3708      	adds	r7, #8
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b088      	sub	sp, #32
 80102f0:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80102f6:	f107 0308 	add.w	r3, r7, #8
 80102fa:	2218      	movs	r2, #24
 80102fc:	2100      	movs	r1, #0
 80102fe:	4618      	mov	r0, r3
 8010300:	f001 fa21 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010304:	233f      	movs	r3, #63	@ 0x3f
 8010306:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8010308:	2381      	movs	r3, #129	@ 0x81
 801030a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 801030c:	1dfb      	adds	r3, r7, #7
 801030e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010310:	2301      	movs	r3, #1
 8010312:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010314:	f107 0308 	add.w	r3, r7, #8
 8010318:	2100      	movs	r1, #0
 801031a:	4618      	mov	r0, r3
 801031c:	f001 fc9c 	bl	8011c58 <hci_send_req>
 8010320:	4603      	mov	r3, r0
 8010322:	2b00      	cmp	r3, #0
 8010324:	da01      	bge.n	801032a <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010326:	23ff      	movs	r3, #255	@ 0xff
 8010328:	e000      	b.n	801032c <aci_gap_set_non_discoverable+0x40>
  return status;
 801032a:	79fb      	ldrb	r3, [r7, #7]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3720      	adds	r7, #32
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}

08010334 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 8010334:	b5b0      	push	{r4, r5, r7, lr}
 8010336:	b0ce      	sub	sp, #312	@ 0x138
 8010338:	af00      	add	r7, sp, #0
 801033a:	4605      	mov	r5, r0
 801033c:	460c      	mov	r4, r1
 801033e:	4610      	mov	r0, r2
 8010340:	4619      	mov	r1, r3
 8010342:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010346:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 801034a:	462a      	mov	r2, r5
 801034c:	701a      	strb	r2, [r3, #0]
 801034e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010352:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8010356:	4622      	mov	r2, r4
 8010358:	801a      	strh	r2, [r3, #0]
 801035a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801035e:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 8010362:	4602      	mov	r2, r0
 8010364:	801a      	strh	r2, [r3, #0]
 8010366:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 801036a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 801036e:	460a      	mov	r2, r1
 8010370:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8010372:	f107 0310 	add.w	r3, r7, #16
 8010376:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 801037a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801037e:	3308      	adds	r3, #8
 8010380:	f107 0210 	add.w	r2, r7, #16
 8010384:	4413      	add	r3, r2
 8010386:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 801038a:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801038e:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8010392:	4413      	add	r3, r2
 8010394:	3309      	adds	r3, #9
 8010396:	f107 0210 	add.w	r2, r7, #16
 801039a:	4413      	add	r3, r2
 801039c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80103a0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80103a4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80103a8:	2200      	movs	r2, #0
 80103aa:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80103ac:	2300      	movs	r3, #0
 80103ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 80103b2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80103b6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80103ba:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 80103be:	7812      	ldrb	r2, [r2, #0]
 80103c0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80103c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80103c6:	3301      	adds	r3, #1
 80103c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 80103cc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80103d0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80103d4:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 80103d8:	8812      	ldrh	r2, [r2, #0]
 80103da:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 80103de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80103e2:	3302      	adds	r3, #2
 80103e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 80103e8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80103ec:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 80103f0:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 80103f4:	8812      	ldrh	r2, [r2, #0]
 80103f6:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 80103fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80103fe:	3302      	adds	r3, #2
 8010400:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 8010404:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010408:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 801040c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010410:	7812      	ldrb	r2, [r2, #0]
 8010412:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8010414:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010418:	3301      	adds	r3, #1
 801041a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 801041e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010422:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 8010426:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8010428:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801042c:	3301      	adds	r3, #1
 801042e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8010432:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010436:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 801043a:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 801043c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010440:	3301      	adds	r3, #1
 8010442:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 8010446:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 801044a:	3308      	adds	r3, #8
 801044c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 8010450:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 8010454:	4618      	mov	r0, r3
 8010456:	f001 f966 	bl	8011726 <Osal_MemCpy>
    index_input += Local_Name_Length;
 801045a:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 801045e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010462:	4413      	add	r3, r2
 8010464:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 8010468:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 801046c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010470:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010476:	3301      	adds	r3, #1
 8010478:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 801047c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010480:	3301      	adds	r3, #1
 8010482:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010486:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 801048a:	4618      	mov	r0, r3
 801048c:	f001 f94b 	bl	8011726 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 8010490:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 8010494:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010498:	4413      	add	r3, r2
 801049a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 801049e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104a2:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 80104a6:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80104a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104ac:	3302      	adds	r3, #2
 80104ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 80104b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80104b6:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 80104ba:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 80104bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104c0:	3302      	adds	r3, #2
 80104c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80104c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80104ca:	2218      	movs	r2, #24
 80104cc:	2100      	movs	r1, #0
 80104ce:	4618      	mov	r0, r3
 80104d0:	f001 f939 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 80104d4:	233f      	movs	r3, #63	@ 0x3f
 80104d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 80104da:	2383      	movs	r3, #131	@ 0x83
 80104dc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80104e0:	f107 0310 	add.w	r3, r7, #16
 80104e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80104e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80104ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80104f0:	f107 030f 	add.w	r3, r7, #15
 80104f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80104f8:	2301      	movs	r3, #1
 80104fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80104fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010502:	2100      	movs	r1, #0
 8010504:	4618      	mov	r0, r3
 8010506:	f001 fba7 	bl	8011c58 <hci_send_req>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	da01      	bge.n	8010514 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 8010510:	23ff      	movs	r3, #255	@ 0xff
 8010512:	e004      	b.n	801051e <aci_gap_set_discoverable+0x1ea>
  return status;
 8010514:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010518:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801051c:	781b      	ldrb	r3, [r3, #0]
}
 801051e:	4618      	mov	r0, r3
 8010520:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8010524:	46bd      	mov	sp, r7
 8010526:	bdb0      	pop	{r4, r5, r7, pc}

08010528 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8010528:	b580      	push	{r7, lr}
 801052a:	b0cc      	sub	sp, #304	@ 0x130
 801052c:	af00      	add	r7, sp, #0
 801052e:	4602      	mov	r2, r0
 8010530:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010534:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010538:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 801053a:	f107 0310 	add.w	r3, r7, #16
 801053e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010542:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010546:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801054a:	2200      	movs	r2, #0
 801054c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801054e:	2300      	movs	r3, #0
 8010550:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 8010554:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010558:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801055c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010560:	7812      	ldrb	r2, [r2, #0]
 8010562:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010564:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010568:	3301      	adds	r3, #1
 801056a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801056e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010572:	2218      	movs	r2, #24
 8010574:	2100      	movs	r1, #0
 8010576:	4618      	mov	r0, r3
 8010578:	f001 f8e5 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 801057c:	233f      	movs	r3, #63	@ 0x3f
 801057e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 8010582:	2385      	movs	r3, #133	@ 0x85
 8010584:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010588:	f107 0310 	add.w	r3, r7, #16
 801058c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010590:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010594:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010598:	f107 030f 	add.w	r3, r7, #15
 801059c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80105a0:	2301      	movs	r3, #1
 80105a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80105a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80105aa:	2100      	movs	r1, #0
 80105ac:	4618      	mov	r0, r3
 80105ae:	f001 fb53 	bl	8011c58 <hci_send_req>
 80105b2:	4603      	mov	r3, r0
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	da01      	bge.n	80105bc <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 80105b8:	23ff      	movs	r3, #255	@ 0xff
 80105ba:	e004      	b.n	80105c6 <aci_gap_set_io_capability+0x9e>
  return status;
 80105bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105c0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80105c4:	781b      	ldrb	r3, [r3, #0]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80105cc:	46bd      	mov	sp, r7
 80105ce:	bd80      	pop	{r7, pc}

080105d0 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 80105d0:	b5b0      	push	{r4, r5, r7, lr}
 80105d2:	b0cc      	sub	sp, #304	@ 0x130
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	4605      	mov	r5, r0
 80105d8:	460c      	mov	r4, r1
 80105da:	4610      	mov	r0, r2
 80105dc:	4619      	mov	r1, r3
 80105de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105e2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80105e6:	462a      	mov	r2, r5
 80105e8:	701a      	strb	r2, [r3, #0]
 80105ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80105f2:	4622      	mov	r2, r4
 80105f4:	701a      	strb	r2, [r3, #0]
 80105f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80105fa:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 80105fe:	4602      	mov	r2, r0
 8010600:	701a      	strb	r2, [r3, #0]
 8010602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010606:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801060a:	460a      	mov	r2, r1
 801060c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 801060e:	f107 0310 	add.w	r3, r7, #16
 8010612:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010616:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801061a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801061e:	2200      	movs	r2, #0
 8010620:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010622:	2300      	movs	r3, #0
 8010624:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8010628:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801062c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010630:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010634:	7812      	ldrb	r2, [r2, #0]
 8010636:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010638:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801063c:	3301      	adds	r3, #1
 801063e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 8010642:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010646:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801064a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801064e:	7812      	ldrb	r2, [r2, #0]
 8010650:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8010652:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010656:	3301      	adds	r3, #1
 8010658:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 801065c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010660:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010664:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010668:	7812      	ldrb	r2, [r2, #0]
 801066a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801066c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010670:	3301      	adds	r3, #1
 8010672:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8010676:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801067a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801067e:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010682:	7812      	ldrb	r2, [r2, #0]
 8010684:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 8010686:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801068a:	3301      	adds	r3, #1
 801068c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8010690:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010694:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 8010698:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801069a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801069e:	3301      	adds	r3, #1
 80106a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80106a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106a8:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 80106ac:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80106ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106b2:	3301      	adds	r3, #1
 80106b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80106b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106bc:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 80106c0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80106c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106c6:	3301      	adds	r3, #1
 80106c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80106cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106d0:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80106d4:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80106d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106dc:	3304      	adds	r3, #4
 80106de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80106e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80106e6:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 80106ea:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 80106ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80106f0:	3301      	adds	r3, #1
 80106f2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80106f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80106fa:	2218      	movs	r2, #24
 80106fc:	2100      	movs	r1, #0
 80106fe:	4618      	mov	r0, r3
 8010700:	f001 f821 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010704:	233f      	movs	r3, #63	@ 0x3f
 8010706:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 801070a:	2386      	movs	r3, #134	@ 0x86
 801070c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010710:	f107 0310 	add.w	r3, r7, #16
 8010714:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010718:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801071c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010720:	f107 030f 	add.w	r3, r7, #15
 8010724:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010728:	2301      	movs	r3, #1
 801072a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801072e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010732:	2100      	movs	r1, #0
 8010734:	4618      	mov	r0, r3
 8010736:	f001 fa8f 	bl	8011c58 <hci_send_req>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	da01      	bge.n	8010744 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 8010740:	23ff      	movs	r3, #255	@ 0xff
 8010742:	e004      	b.n	801074e <aci_gap_set_authentication_requirement+0x17e>
  return status;
 8010744:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010748:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801074c:	781b      	ldrb	r3, [r3, #0]
}
 801074e:	4618      	mov	r0, r3
 8010750:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010754:	46bd      	mov	sp, r7
 8010756:	bdb0      	pop	{r4, r5, r7, pc}

08010758 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b0cc      	sub	sp, #304	@ 0x130
 801075c:	af00      	add	r7, sp, #0
 801075e:	4602      	mov	r2, r0
 8010760:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010764:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010768:	6019      	str	r1, [r3, #0]
 801076a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801076e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010772:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 8010774:	f107 0310 	add.w	r3, r7, #16
 8010778:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801077c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010780:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010784:	2200      	movs	r2, #0
 8010786:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 801078e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010792:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010796:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801079a:	8812      	ldrh	r2, [r2, #0]
 801079c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801079e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107a2:	3302      	adds	r3, #2
 80107a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 80107a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80107ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80107b0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 80107b4:	6812      	ldr	r2, [r2, #0]
 80107b6:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 80107ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107be:	3304      	adds	r3, #4
 80107c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80107c4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80107c8:	2218      	movs	r2, #24
 80107ca:	2100      	movs	r1, #0
 80107cc:	4618      	mov	r0, r3
 80107ce:	f000 ffba 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 80107d2:	233f      	movs	r3, #63	@ 0x3f
 80107d4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 80107d8:	2388      	movs	r3, #136	@ 0x88
 80107da:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80107de:	f107 0310 	add.w	r3, r7, #16
 80107e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80107e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80107ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80107ee:	f107 030f 	add.w	r3, r7, #15
 80107f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80107f6:	2301      	movs	r3, #1
 80107f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80107fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010800:	2100      	movs	r1, #0
 8010802:	4618      	mov	r0, r3
 8010804:	f001 fa28 	bl	8011c58 <hci_send_req>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	da01      	bge.n	8010812 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 801080e:	23ff      	movs	r3, #255	@ 0xff
 8010810:	e004      	b.n	801081c <aci_gap_pass_key_resp+0xc4>
  return status;
 8010812:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010816:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801081a:	781b      	ldrb	r3, [r3, #0]
}
 801081c:	4618      	mov	r0, r3
 801081e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}

08010826 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8010826:	b590      	push	{r4, r7, lr}
 8010828:	b0cd      	sub	sp, #308	@ 0x134
 801082a:	af00      	add	r7, sp, #0
 801082c:	4604      	mov	r4, r0
 801082e:	4608      	mov	r0, r1
 8010830:	4611      	mov	r1, r2
 8010832:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010836:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801083a:	6013      	str	r3, [r2, #0]
 801083c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010840:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8010844:	4622      	mov	r2, r4
 8010846:	701a      	strb	r2, [r3, #0]
 8010848:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801084c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010850:	4602      	mov	r2, r0
 8010852:	701a      	strb	r2, [r3, #0]
 8010854:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010858:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801085c:	460a      	mov	r2, r1
 801085e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8010860:	f107 0310 	add.w	r3, r7, #16
 8010864:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010868:	f107 0308 	add.w	r3, r7, #8
 801086c:	2207      	movs	r2, #7
 801086e:	2100      	movs	r1, #0
 8010870:	4618      	mov	r0, r3
 8010872:	f000 ff68 	bl	8011746 <Osal_MemSet>
  int index_input = 0;
 8010876:	2300      	movs	r3, #0
 8010878:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 801087c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010880:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010884:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8010888:	7812      	ldrb	r2, [r2, #0]
 801088a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801088c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010890:	3301      	adds	r3, #1
 8010892:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 8010896:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801089a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801089e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80108a2:	7812      	ldrb	r2, [r2, #0]
 80108a4:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80108a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108aa:	3301      	adds	r3, #1
 80108ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 80108b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80108b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80108b8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 80108bc:	7812      	ldrb	r2, [r2, #0]
 80108be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80108c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108c4:	3301      	adds	r3, #1
 80108c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80108ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80108ce:	2218      	movs	r2, #24
 80108d0:	2100      	movs	r1, #0
 80108d2:	4618      	mov	r0, r3
 80108d4:	f000 ff37 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 80108d8:	233f      	movs	r3, #63	@ 0x3f
 80108da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 80108de:	238a      	movs	r3, #138	@ 0x8a
 80108e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80108e4:	f107 0310 	add.w	r3, r7, #16
 80108e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80108ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80108f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 80108f4:	f107 0308 	add.w	r3, r7, #8
 80108f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 80108fc:	2307      	movs	r3, #7
 80108fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010906:	2100      	movs	r1, #0
 8010908:	4618      	mov	r0, r3
 801090a:	f001 f9a5 	bl	8011c58 <hci_send_req>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	da01      	bge.n	8010918 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8010914:	23ff      	movs	r3, #255	@ 0xff
 8010916:	e02e      	b.n	8010976 <aci_gap_init+0x150>
  if ( resp.Status )
 8010918:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801091c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d005      	beq.n	8010932 <aci_gap_init+0x10c>
    return resp.Status;
 8010926:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801092a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801092e:	781b      	ldrb	r3, [r3, #0]
 8010930:	e021      	b.n	8010976 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 8010932:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010936:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 801093a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801093e:	b29a      	uxth	r2, r3
 8010940:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010944:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 801094c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010950:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010954:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010958:	b29a      	uxth	r2, r3
 801095a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801095e:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8010960:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010964:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8010968:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801096c:	b29a      	uxth	r2, r3
 801096e:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 8010972:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010974:	2300      	movs	r3, #0
}
 8010976:	4618      	mov	r0, r3
 8010978:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 801097c:	46bd      	mov	sp, r7
 801097e:	bd90      	pop	{r4, r7, pc}

08010980 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b0cc      	sub	sp, #304	@ 0x130
 8010984:	af00      	add	r7, sp, #0
 8010986:	4602      	mov	r2, r0
 8010988:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801098c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8010990:	6019      	str	r1, [r3, #0]
 8010992:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010996:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801099a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 801099c:	f107 0310 	add.w	r3, r7, #16
 80109a0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80109a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109a8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80109ac:	2200      	movs	r2, #0
 80109ae:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80109b0:	2300      	movs	r3, #0
 80109b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 80109b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80109be:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 80109c2:	7812      	ldrb	r2, [r2, #0]
 80109c4:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80109c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80109ca:	3301      	adds	r3, #1
 80109cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 80109d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80109d4:	1c58      	adds	r0, r3, #1
 80109d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109da:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80109de:	781a      	ldrb	r2, [r3, #0]
 80109e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109e4:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80109e8:	6819      	ldr	r1, [r3, #0]
 80109ea:	f000 fe9c 	bl	8011726 <Osal_MemCpy>
  index_input += AdvDataLen;
 80109ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80109f2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 80109f6:	781b      	ldrb	r3, [r3, #0]
 80109f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80109fc:	4413      	add	r3, r2
 80109fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a02:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a06:	2218      	movs	r2, #24
 8010a08:	2100      	movs	r1, #0
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f000 fe9b 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010a10:	233f      	movs	r3, #63	@ 0x3f
 8010a12:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 8010a16:	238e      	movs	r3, #142	@ 0x8e
 8010a18:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010a1c:	f107 0310 	add.w	r3, r7, #16
 8010a20:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010a24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010a28:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010a2c:	f107 030f 	add.w	r3, r7, #15
 8010a30:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010a34:	2301      	movs	r3, #1
 8010a36:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010a3e:	2100      	movs	r1, #0
 8010a40:	4618      	mov	r0, r3
 8010a42:	f001 f909 	bl	8011c58 <hci_send_req>
 8010a46:	4603      	mov	r3, r0
 8010a48:	2b00      	cmp	r3, #0
 8010a4a:	da01      	bge.n	8010a50 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 8010a4c:	23ff      	movs	r3, #255	@ 0xff
 8010a4e:	e004      	b.n	8010a5a <aci_gap_update_adv_data+0xda>
  return status;
 8010a50:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010a54:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010a58:	781b      	ldrb	r3, [r3, #0]
}
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010a60:	46bd      	mov	sp, r7
 8010a62:	bd80      	pop	{r7, pc}

08010a64 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b088      	sub	sp, #32
 8010a68:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010a6e:	f107 0308 	add.w	r3, r7, #8
 8010a72:	2218      	movs	r2, #24
 8010a74:	2100      	movs	r1, #0
 8010a76:	4618      	mov	r0, r3
 8010a78:	f000 fe65 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010a7c:	233f      	movs	r3, #63	@ 0x3f
 8010a7e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8010a80:	2392      	movs	r3, #146	@ 0x92
 8010a82:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010a84:	1dfb      	adds	r3, r7, #7
 8010a86:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010a88:	2301      	movs	r3, #1
 8010a8a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010a8c:	f107 0308 	add.w	r3, r7, #8
 8010a90:	2100      	movs	r1, #0
 8010a92:	4618      	mov	r0, r3
 8010a94:	f001 f8e0 	bl	8011c58 <hci_send_req>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	da01      	bge.n	8010aa2 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 8010a9e:	23ff      	movs	r3, #255	@ 0xff
 8010aa0:	e000      	b.n	8010aa4 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	3720      	adds	r7, #32
 8010aa8:	46bd      	mov	sp, r7
 8010aaa:	bd80      	pop	{r7, pc}

08010aac <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b0cc      	sub	sp, #304	@ 0x130
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	4602      	mov	r2, r0
 8010ab4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ab8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010abc:	801a      	strh	r2, [r3, #0]
 8010abe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ac2:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 8010ac6:	460a      	mov	r2, r1
 8010ac8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8010aca:	f107 0310 	add.w	r3, r7, #16
 8010ace:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010ad2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010ad6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010ada:	2200      	movs	r2, #0
 8010adc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8010ae4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ae8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010aec:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010af0:	8812      	ldrh	r2, [r2, #0]
 8010af2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010af4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010af8:	3302      	adds	r3, #2
 8010afa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8010afe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010b02:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010b06:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8010b0a:	7812      	ldrb	r2, [r2, #0]
 8010b0c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010b0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b12:	3301      	adds	r3, #1
 8010b14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b18:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b1c:	2218      	movs	r2, #24
 8010b1e:	2100      	movs	r1, #0
 8010b20:	4618      	mov	r0, r3
 8010b22:	f000 fe10 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010b26:	233f      	movs	r3, #63	@ 0x3f
 8010b28:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 8010b2c:	23a5      	movs	r3, #165	@ 0xa5
 8010b2e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010b32:	f107 0310 	add.w	r3, r7, #16
 8010b36:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010b3e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8010b42:	f107 030f 	add.w	r3, r7, #15
 8010b46:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8010b4a:	2301      	movs	r3, #1
 8010b4c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010b50:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010b54:	2100      	movs	r1, #0
 8010b56:	4618      	mov	r0, r3
 8010b58:	f001 f87e 	bl	8011c58 <hci_send_req>
 8010b5c:	4603      	mov	r3, r0
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	da01      	bge.n	8010b66 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 8010b62:	23ff      	movs	r3, #255	@ 0xff
 8010b64:	e004      	b.n	8010b70 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 8010b66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010b6a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010b6e:	781b      	ldrb	r3, [r3, #0]
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b088      	sub	sp, #32
 8010b7e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8010b80:	2300      	movs	r3, #0
 8010b82:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010b84:	f107 0308 	add.w	r3, r7, #8
 8010b88:	2218      	movs	r2, #24
 8010b8a:	2100      	movs	r1, #0
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f000 fdda 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010b92:	233f      	movs	r3, #63	@ 0x3f
 8010b94:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8010b96:	f240 1301 	movw	r3, #257	@ 0x101
 8010b9a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8010b9c:	1dfb      	adds	r3, r7, #7
 8010b9e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8010ba0:	2301      	movs	r3, #1
 8010ba2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010ba4:	f107 0308 	add.w	r3, r7, #8
 8010ba8:	2100      	movs	r1, #0
 8010baa:	4618      	mov	r0, r3
 8010bac:	f001 f854 	bl	8011c58 <hci_send_req>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	da01      	bge.n	8010bba <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8010bb6:	23ff      	movs	r3, #255	@ 0xff
 8010bb8:	e000      	b.n	8010bbc <aci_gatt_init+0x42>
  return status;
 8010bba:	79fb      	ldrb	r3, [r7, #7]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3720      	adds	r7, #32
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8010bc4:	b590      	push	{r4, r7, lr}
 8010bc6:	b0cf      	sub	sp, #316	@ 0x13c
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	4604      	mov	r4, r0
 8010bcc:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8010bd0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 8010bd4:	6001      	str	r1, [r0, #0]
 8010bd6:	4610      	mov	r0, r2
 8010bd8:	4619      	mov	r1, r3
 8010bda:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bde:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010be2:	4622      	mov	r2, r4
 8010be4:	701a      	strb	r2, [r3, #0]
 8010be6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bea:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010bee:	4602      	mov	r2, r0
 8010bf0:	701a      	strb	r2, [r3, #0]
 8010bf2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010bf6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010bfa:	460a      	mov	r2, r1
 8010bfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8010bfe:	f107 0310 	add.w	r3, r7, #16
 8010c02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8010c06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c0a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010c0e:	781b      	ldrb	r3, [r3, #0]
 8010c10:	2b01      	cmp	r3, #1
 8010c12:	d00a      	beq.n	8010c2a <aci_gatt_add_service+0x66>
 8010c14:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c18:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010c1c:	781b      	ldrb	r3, [r3, #0]
 8010c1e:	2b02      	cmp	r3, #2
 8010c20:	d101      	bne.n	8010c26 <aci_gatt_add_service+0x62>
 8010c22:	2311      	movs	r3, #17
 8010c24:	e002      	b.n	8010c2c <aci_gatt_add_service+0x68>
 8010c26:	2301      	movs	r3, #1
 8010c28:	e000      	b.n	8010c2c <aci_gatt_add_service+0x68>
 8010c2a:	2303      	movs	r3, #3
 8010c2c:	f107 0210 	add.w	r2, r7, #16
 8010c30:	4413      	add	r3, r2
 8010c32:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010c36:	f107 030c 	add.w	r3, r7, #12
 8010c3a:	2203      	movs	r2, #3
 8010c3c:	2100      	movs	r1, #0
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f000 fd81 	bl	8011746 <Osal_MemSet>
  int index_input = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8010c4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010c4e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010c52:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 8010c56:	7812      	ldrb	r2, [r2, #0]
 8010c58:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8010c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010c5e:	3301      	adds	r3, #1
 8010c60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8010c64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c68:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 8010c6c:	781b      	ldrb	r3, [r3, #0]
 8010c6e:	2b01      	cmp	r3, #1
 8010c70:	d002      	beq.n	8010c78 <aci_gatt_add_service+0xb4>
 8010c72:	2b02      	cmp	r3, #2
 8010c74:	d004      	beq.n	8010c80 <aci_gatt_add_service+0xbc>
 8010c76:	e007      	b.n	8010c88 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8010c78:	2302      	movs	r3, #2
 8010c7a:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010c7e:	e005      	b.n	8010c8c <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8010c80:	2310      	movs	r3, #16
 8010c82:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 8010c86:	e001      	b.n	8010c8c <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8010c88:	2397      	movs	r3, #151	@ 0x97
 8010c8a:	e06c      	b.n	8010d66 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8010c8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010c90:	1c58      	adds	r0, r3, #1
 8010c92:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 8010c96:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010c9a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010c9e:	6819      	ldr	r1, [r3, #0]
 8010ca0:	f000 fd41 	bl	8011726 <Osal_MemCpy>
    index_input += size;
 8010ca4:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 8010ca8:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8010cac:	4413      	add	r3, r2
 8010cae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 8010cb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cb6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010cba:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010cbe:	7812      	ldrb	r2, [r2, #0]
 8010cc0:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8010cc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8010ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010cd0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 8010cd4:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010cd8:	7812      	ldrb	r2, [r2, #0]
 8010cda:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8010cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ce6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010cea:	2218      	movs	r2, #24
 8010cec:	2100      	movs	r1, #0
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f000 fd29 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010cf4:	233f      	movs	r3, #63	@ 0x3f
 8010cf6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 8010cfa:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8010cfe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8010d02:	f107 0310 	add.w	r3, r7, #16
 8010d06:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8010d0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010d0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 8010d12:	f107 030c 	add.w	r3, r7, #12
 8010d16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 8010d1a:	2303      	movs	r3, #3
 8010d1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010d20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8010d24:	2100      	movs	r1, #0
 8010d26:	4618      	mov	r0, r3
 8010d28:	f000 ff96 	bl	8011c58 <hci_send_req>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	da01      	bge.n	8010d36 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8010d32:	23ff      	movs	r3, #255	@ 0xff
 8010d34:	e017      	b.n	8010d66 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8010d36:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d3a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d005      	beq.n	8010d50 <aci_gatt_add_service+0x18c>
    return resp.Status;
 8010d44:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d4c:	781b      	ldrb	r3, [r3, #0]
 8010d4e:	e00a      	b.n	8010d66 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8010d50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8010d54:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010d58:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010d5c:	b29a      	uxth	r2, r3
 8010d5e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8010d62:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010d64:	2300      	movs	r3, #0
}
 8010d66:	4618      	mov	r0, r3
 8010d68:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bd90      	pop	{r4, r7, pc}

08010d70 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8010d70:	b590      	push	{r4, r7, lr}
 8010d72:	b0d1      	sub	sp, #324	@ 0x144
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	4604      	mov	r4, r0
 8010d78:	4608      	mov	r0, r1
 8010d7a:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 8010d7e:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 8010d82:	600a      	str	r2, [r1, #0]
 8010d84:	4619      	mov	r1, r3
 8010d86:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010d8a:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 8010d8e:	4622      	mov	r2, r4
 8010d90:	801a      	strh	r2, [r3, #0]
 8010d92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010d96:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010d9a:	4602      	mov	r2, r0
 8010d9c:	701a      	strb	r2, [r3, #0]
 8010d9e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010da2:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 8010da6:	460a      	mov	r2, r1
 8010da8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8010daa:	f107 0318 	add.w	r3, r7, #24
 8010dae:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8010db2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010db6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010dba:	781b      	ldrb	r3, [r3, #0]
 8010dbc:	2b01      	cmp	r3, #1
 8010dbe:	d00a      	beq.n	8010dd6 <aci_gatt_add_char+0x66>
 8010dc0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010dc4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010dc8:	781b      	ldrb	r3, [r3, #0]
 8010dca:	2b02      	cmp	r3, #2
 8010dcc:	d101      	bne.n	8010dd2 <aci_gatt_add_char+0x62>
 8010dce:	2313      	movs	r3, #19
 8010dd0:	e002      	b.n	8010dd8 <aci_gatt_add_char+0x68>
 8010dd2:	2303      	movs	r3, #3
 8010dd4:	e000      	b.n	8010dd8 <aci_gatt_add_char+0x68>
 8010dd6:	2305      	movs	r3, #5
 8010dd8:	f107 0218 	add.w	r2, r7, #24
 8010ddc:	4413      	add	r3, r2
 8010dde:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8010de2:	f107 0314 	add.w	r3, r7, #20
 8010de6:	2203      	movs	r2, #3
 8010de8:	2100      	movs	r1, #0
 8010dea:	4618      	mov	r0, r3
 8010dec:	f000 fcab 	bl	8011746 <Osal_MemSet>
  int index_input = 0;
 8010df0:	2300      	movs	r3, #0
 8010df2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 8010df6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010dfa:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010dfe:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 8010e02:	8812      	ldrh	r2, [r2, #0]
 8010e04:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010e06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010e0a:	3302      	adds	r3, #2
 8010e0c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8010e10:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010e14:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010e18:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 8010e1c:	7812      	ldrb	r2, [r2, #0]
 8010e1e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8010e20:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010e24:	3301      	adds	r3, #1
 8010e26:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8010e2a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010e2e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	2b01      	cmp	r3, #1
 8010e36:	d002      	beq.n	8010e3e <aci_gatt_add_char+0xce>
 8010e38:	2b02      	cmp	r3, #2
 8010e3a:	d004      	beq.n	8010e46 <aci_gatt_add_char+0xd6>
 8010e3c:	e007      	b.n	8010e4e <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8010e3e:	2302      	movs	r3, #2
 8010e40:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8010e44:	e005      	b.n	8010e52 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8010e46:	2310      	movs	r3, #16
 8010e48:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 8010e4c:	e001      	b.n	8010e52 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8010e4e:	2397      	movs	r3, #151	@ 0x97
 8010e50:	e091      	b.n	8010f76 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8010e52:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8010e56:	1cd8      	adds	r0, r3, #3
 8010e58:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 8010e5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010e60:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8010e64:	6819      	ldr	r1, [r3, #0]
 8010e66:	f000 fc5e 	bl	8011726 <Osal_MemCpy>
    index_input += size;
 8010e6a:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 8010e6e:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 8010e72:	4413      	add	r3, r2
 8010e74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8010e78:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010e7c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8010e80:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 8010e84:	8812      	ldrh	r2, [r2, #0]
 8010e86:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8010e88:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010e8c:	3302      	adds	r3, #2
 8010e8e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8010e92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010e96:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 8010e9a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8010e9c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8010ea6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010eaa:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 8010eae:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8010eb0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010eb4:	3301      	adds	r3, #1
 8010eb6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8010eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010ebe:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 8010ec2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8010ec4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010ec8:	3301      	adds	r3, #1
 8010eca:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8010ece:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010ed2:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 8010ed6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8010ed8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010edc:	3301      	adds	r3, #1
 8010ede:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8010ee2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8010ee6:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 8010eea:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8010eec:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010ef0:	3301      	adds	r3, #1
 8010ef2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8010ef6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010efa:	2218      	movs	r2, #24
 8010efc:	2100      	movs	r1, #0
 8010efe:	4618      	mov	r0, r3
 8010f00:	f000 fc21 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8010f04:	233f      	movs	r3, #63	@ 0x3f
 8010f06:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 8010f0a:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8010f0e:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 8010f12:	f107 0318 	add.w	r3, r7, #24
 8010f16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 8010f1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8010f1e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 8010f22:	f107 0314 	add.w	r3, r7, #20
 8010f26:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 8010f2a:	2303      	movs	r3, #3
 8010f2c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8010f30:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8010f34:	2100      	movs	r1, #0
 8010f36:	4618      	mov	r0, r3
 8010f38:	f000 fe8e 	bl	8011c58 <hci_send_req>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	da01      	bge.n	8010f46 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8010f42:	23ff      	movs	r3, #255	@ 0xff
 8010f44:	e017      	b.n	8010f76 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8010f46:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010f4a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f4e:	781b      	ldrb	r3, [r3, #0]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d005      	beq.n	8010f60 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8010f54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010f58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f5c:	781b      	ldrb	r3, [r3, #0]
 8010f5e:	e00a      	b.n	8010f76 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8010f60:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8010f64:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010f68:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8010f72:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8010f74:	2300      	movs	r3, #0
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8010f7c:	46bd      	mov	sp, r7
 8010f7e:	bd90      	pop	{r4, r7, pc}

08010f80 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8010f80:	b5b0      	push	{r4, r5, r7, lr}
 8010f82:	b0cc      	sub	sp, #304	@ 0x130
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	4605      	mov	r5, r0
 8010f88:	460c      	mov	r4, r1
 8010f8a:	4610      	mov	r0, r2
 8010f8c:	4619      	mov	r1, r3
 8010f8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010f92:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 8010f96:	462a      	mov	r2, r5
 8010f98:	801a      	strh	r2, [r3, #0]
 8010f9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010f9e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8010fa2:	4622      	mov	r2, r4
 8010fa4:	801a      	strh	r2, [r3, #0]
 8010fa6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010faa:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 8010fae:	4602      	mov	r2, r0
 8010fb0:	701a      	strb	r2, [r3, #0]
 8010fb2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fb6:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8010fba:	460a      	mov	r2, r1
 8010fbc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8010fbe:	f107 0310 	add.w	r3, r7, #16
 8010fc2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8010fc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8010fca:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8010fce:	2200      	movs	r2, #0
 8010fd0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 8010fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010fdc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010fe0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8010fe4:	8812      	ldrh	r2, [r2, #0]
 8010fe6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8010fe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010fec:	3302      	adds	r3, #2
 8010fee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 8010ff2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8010ff6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8010ffa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8010ffe:	8812      	ldrh	r2, [r2, #0]
 8011000:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8011002:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011006:	3302      	adds	r3, #2
 8011008:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 801100c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011010:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011014:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 8011018:	7812      	ldrb	r2, [r2, #0]
 801101a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 801101c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011020:	3301      	adds	r3, #1
 8011022:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8011026:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801102a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801102e:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8011032:	7812      	ldrb	r2, [r2, #0]
 8011034:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8011036:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801103a:	3301      	adds	r3, #1
 801103c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8011040:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011044:	1d98      	adds	r0, r3, #6
 8011046:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801104a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	461a      	mov	r2, r3
 8011052:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8011056:	f000 fb66 	bl	8011726 <Osal_MemCpy>
  index_input += Char_Value_Length;
 801105a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801105e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8011062:	781b      	ldrb	r3, [r3, #0]
 8011064:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 8011068:	4413      	add	r3, r2
 801106a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801106e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011072:	2218      	movs	r2, #24
 8011074:	2100      	movs	r1, #0
 8011076:	4618      	mov	r0, r3
 8011078:	f000 fb65 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 801107c:	233f      	movs	r3, #63	@ 0x3f
 801107e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 8011082:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8011086:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801108a:	f107 0310 	add.w	r3, r7, #16
 801108e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011092:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011096:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801109a:	f107 030f 	add.w	r3, r7, #15
 801109e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80110a2:	2301      	movs	r3, #1
 80110a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80110a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80110ac:	2100      	movs	r1, #0
 80110ae:	4618      	mov	r0, r3
 80110b0:	f000 fdd2 	bl	8011c58 <hci_send_req>
 80110b4:	4603      	mov	r3, r0
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	da01      	bge.n	80110be <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 80110ba:	23ff      	movs	r3, #255	@ 0xff
 80110bc:	e004      	b.n	80110c8 <aci_gatt_update_char_value+0x148>
  return status;
 80110be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80110c2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80110c6:	781b      	ldrb	r3, [r3, #0]
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bdb0      	pop	{r4, r5, r7, pc}

080110d2 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b0cc      	sub	sp, #304	@ 0x130
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	4602      	mov	r2, r0
 80110da:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80110de:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80110e2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 80110e4:	f107 0310 	add.w	r3, r7, #16
 80110e8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 80110ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80110f0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80110f4:	2200      	movs	r2, #0
 80110f6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80110f8:	2300      	movs	r3, #0
 80110fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80110fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011102:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011106:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801110a:	8812      	ldrh	r2, [r2, #0]
 801110c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801110e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011112:	3302      	adds	r3, #2
 8011114:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011118:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801111c:	2218      	movs	r2, #24
 801111e:	2100      	movs	r1, #0
 8011120:	4618      	mov	r0, r3
 8011122:	f000 fb10 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011126:	233f      	movs	r3, #63	@ 0x3f
 8011128:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 801112c:	f240 1325 	movw	r3, #293	@ 0x125
 8011130:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 8011134:	f107 0310 	add.w	r3, r7, #16
 8011138:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 801113c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011140:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 8011144:	f107 030f 	add.w	r3, r7, #15
 8011148:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 801114c:	2301      	movs	r3, #1
 801114e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011152:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011156:	2100      	movs	r1, #0
 8011158:	4618      	mov	r0, r3
 801115a:	f000 fd7d 	bl	8011c58 <hci_send_req>
 801115e:	4603      	mov	r3, r0
 8011160:	2b00      	cmp	r3, #0
 8011162:	da01      	bge.n	8011168 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 8011164:	23ff      	movs	r3, #255	@ 0xff
 8011166:	e004      	b.n	8011172 <aci_gatt_confirm_indication+0xa0>
  return status;
 8011168:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801116c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011170:	781b      	ldrb	r3, [r3, #0]
}
 8011172:	4618      	mov	r0, r3
 8011174:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b0cc      	sub	sp, #304	@ 0x130
 8011180:	af00      	add	r7, sp, #0
 8011182:	4602      	mov	r2, r0
 8011184:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011188:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801118c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 801118e:	f107 0310 	add.w	r3, r7, #16
 8011192:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011196:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801119a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801119e:	2200      	movs	r2, #0
 80111a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80111a2:	2300      	movs	r3, #0
 80111a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 80111a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80111ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80111b0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 80111b4:	8812      	ldrh	r2, [r2, #0]
 80111b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80111b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80111bc:	3302      	adds	r3, #2
 80111be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80111c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80111c6:	2218      	movs	r2, #24
 80111c8:	2100      	movs	r1, #0
 80111ca:	4618      	mov	r0, r3
 80111cc:	f000 fabb 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 80111d0:	233f      	movs	r3, #63	@ 0x3f
 80111d2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x127;
 80111d6:	f240 1327 	movw	r3, #295	@ 0x127
 80111da:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80111de:	f107 0310 	add.w	r3, r7, #16
 80111e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80111e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80111ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80111ee:	f107 030f 	add.w	r3, r7, #15
 80111f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80111f6:	2301      	movs	r3, #1
 80111f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80111fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011200:	2100      	movs	r1, #0
 8011202:	4618      	mov	r0, r3
 8011204:	f000 fd28 	bl	8011c58 <hci_send_req>
 8011208:	4603      	mov	r3, r0
 801120a:	2b00      	cmp	r3, #0
 801120c:	da01      	bge.n	8011212 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 801120e:	23ff      	movs	r3, #255	@ 0xff
 8011210:	e004      	b.n	801121c <aci_gatt_allow_read+0xa0>
  return status;
 8011212:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011216:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801121a:	781b      	ldrb	r3, [r3, #0]
}
 801121c:	4618      	mov	r0, r3
 801121e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 8011226:	b580      	push	{r7, lr}
 8011228:	b0cc      	sub	sp, #304	@ 0x130
 801122a:	af00      	add	r7, sp, #0
 801122c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011230:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8011234:	601a      	str	r2, [r3, #0]
 8011236:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801123a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 801123e:	4602      	mov	r2, r0
 8011240:	701a      	strb	r2, [r3, #0]
 8011242:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011246:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801124a:	460a      	mov	r2, r1
 801124c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 801124e:	f107 0310 	add.w	r3, r7, #16
 8011252:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011256:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801125a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801125e:	2200      	movs	r2, #0
 8011260:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011262:	2300      	movs	r3, #0
 8011264:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 8011268:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801126c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011270:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8011274:	7812      	ldrb	r2, [r2, #0]
 8011276:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011278:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801127c:	3301      	adds	r3, #1
 801127e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 8011282:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011286:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801128a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801128e:	7812      	ldrb	r2, [r2, #0]
 8011290:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011292:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011296:	3301      	adds	r3, #1
 8011298:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 801129c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80112a0:	1c98      	adds	r0, r3, #2
 80112a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80112a6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80112aa:	781a      	ldrb	r2, [r3, #0]
 80112ac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80112b0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80112b4:	6819      	ldr	r1, [r3, #0]
 80112b6:	f000 fa36 	bl	8011726 <Osal_MemCpy>
  index_input += Length;
 80112ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80112be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80112c2:	781b      	ldrb	r3, [r3, #0]
 80112c4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 80112c8:	4413      	add	r3, r2
 80112ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80112ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80112d2:	2218      	movs	r2, #24
 80112d4:	2100      	movs	r1, #0
 80112d6:	4618      	mov	r0, r3
 80112d8:	f000 fa35 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 80112dc:	233f      	movs	r3, #63	@ 0x3f
 80112de:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 80112e2:	230c      	movs	r3, #12
 80112e4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80112e8:	f107 0310 	add.w	r3, r7, #16
 80112ec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80112f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80112f4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80112f8:	f107 030f 	add.w	r3, r7, #15
 80112fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011300:	2301      	movs	r3, #1
 8011302:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8011306:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801130a:	2100      	movs	r1, #0
 801130c:	4618      	mov	r0, r3
 801130e:	f000 fca3 	bl	8011c58 <hci_send_req>
 8011312:	4603      	mov	r3, r0
 8011314:	2b00      	cmp	r3, #0
 8011316:	da01      	bge.n	801131c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 8011318:	23ff      	movs	r3, #255	@ 0xff
 801131a:	e004      	b.n	8011326 <aci_hal_write_config_data+0x100>
  return status;
 801131c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011320:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011324:	781b      	ldrb	r3, [r3, #0]
}
 8011326:	4618      	mov	r0, r3
 8011328:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b0cc      	sub	sp, #304	@ 0x130
 8011334:	af00      	add	r7, sp, #0
 8011336:	4602      	mov	r2, r0
 8011338:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801133c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8011340:	701a      	strb	r2, [r3, #0]
 8011342:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011346:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801134a:	460a      	mov	r2, r1
 801134c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 801134e:	f107 0310 	add.w	r3, r7, #16
 8011352:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011356:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801135a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801135e:	2200      	movs	r2, #0
 8011360:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011362:	2300      	movs	r3, #0
 8011364:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 8011368:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801136c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011370:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8011374:	7812      	ldrb	r2, [r2, #0]
 8011376:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011378:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801137c:	3301      	adds	r3, #1
 801137e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 8011382:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011386:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801138a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801138e:	7812      	ldrb	r2, [r2, #0]
 8011390:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011392:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011396:	3301      	adds	r3, #1
 8011398:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801139c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80113a0:	2218      	movs	r2, #24
 80113a2:	2100      	movs	r1, #0
 80113a4:	4618      	mov	r0, r3
 80113a6:	f000 f9ce 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 80113aa:	233f      	movs	r3, #63	@ 0x3f
 80113ac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 80113b0:	230f      	movs	r3, #15
 80113b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80113b6:	f107 0310 	add.w	r3, r7, #16
 80113ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80113be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80113c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80113c6:	f107 030f 	add.w	r3, r7, #15
 80113ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80113ce:	2301      	movs	r3, #1
 80113d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80113d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80113d8:	2100      	movs	r1, #0
 80113da:	4618      	mov	r0, r3
 80113dc:	f000 fc3c 	bl	8011c58 <hci_send_req>
 80113e0:	4603      	mov	r3, r0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	da01      	bge.n	80113ea <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 80113e6:	23ff      	movs	r3, #255	@ 0xff
 80113e8:	e004      	b.n	80113f4 <aci_hal_set_tx_power_level+0xc4>
  return status;
 80113ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80113ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80113f2:	781b      	ldrb	r3, [r3, #0]
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}

080113fe <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80113fe:	b580      	push	{r7, lr}
 8011400:	b0cc      	sub	sp, #304	@ 0x130
 8011402:	af00      	add	r7, sp, #0
 8011404:	4602      	mov	r2, r0
 8011406:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801140a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801140e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 8011410:	f107 0310 	add.w	r3, r7, #16
 8011414:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011418:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801141c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011420:	2200      	movs	r2, #0
 8011422:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011424:	2300      	movs	r3, #0
 8011426:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 801142a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801142e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011432:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 8011436:	8812      	ldrh	r2, [r2, #0]
 8011438:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801143a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801143e:	3302      	adds	r3, #2
 8011440:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011444:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011448:	2218      	movs	r2, #24
 801144a:	2100      	movs	r1, #0
 801144c:	4618      	mov	r0, r3
 801144e:	f000 f97a 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 8011452:	233f      	movs	r3, #63	@ 0x3f
 8011454:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 8011458:	2318      	movs	r3, #24
 801145a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 801145e:	f107 0310 	add.w	r3, r7, #16
 8011462:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 8011466:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801146a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 801146e:	f107 030f 	add.w	r3, r7, #15
 8011472:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 8011476:	2301      	movs	r3, #1
 8011478:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801147c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011480:	2100      	movs	r1, #0
 8011482:	4618      	mov	r0, r3
 8011484:	f000 fbe8 	bl	8011c58 <hci_send_req>
 8011488:	4603      	mov	r3, r0
 801148a:	2b00      	cmp	r3, #0
 801148c:	da01      	bge.n	8011492 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 801148e:	23ff      	movs	r3, #255	@ 0xff
 8011490:	e004      	b.n	801149c <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8011492:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011496:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801149a:	781b      	ldrb	r3, [r3, #0]
}
 801149c:	4618      	mov	r0, r3
 801149e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80114a2:	46bd      	mov	sp, r7
 80114a4:	bd80      	pop	{r7, pc}

080114a6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 80114a6:	b580      	push	{r7, lr}
 80114a8:	b088      	sub	sp, #32
 80114aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80114ac:	2300      	movs	r3, #0
 80114ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80114b0:	f107 0308 	add.w	r3, r7, #8
 80114b4:	2218      	movs	r2, #24
 80114b6:	2100      	movs	r1, #0
 80114b8:	4618      	mov	r0, r3
 80114ba:	f000 f944 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x03;
 80114be:	2303      	movs	r3, #3
 80114c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 80114c2:	2303      	movs	r3, #3
 80114c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80114c6:	1dfb      	adds	r3, r7, #7
 80114c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80114ca:	2301      	movs	r3, #1
 80114cc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80114ce:	f107 0308 	add.w	r3, r7, #8
 80114d2:	2100      	movs	r1, #0
 80114d4:	4618      	mov	r0, r3
 80114d6:	f000 fbbf 	bl	8011c58 <hci_send_req>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	da01      	bge.n	80114e4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 80114e0:	23ff      	movs	r3, #255	@ 0xff
 80114e2:	e000      	b.n	80114e6 <hci_reset+0x40>
  return status;
 80114e4:	79fb      	ldrb	r3, [r7, #7]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3720      	adds	r7, #32
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 80114ee:	b590      	push	{r4, r7, lr}
 80114f0:	b0cd      	sub	sp, #308	@ 0x134
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	4604      	mov	r4, r0
 80114f6:	4608      	mov	r0, r1
 80114f8:	4611      	mov	r1, r2
 80114fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80114fe:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 8011502:	4622      	mov	r2, r4
 8011504:	701a      	strb	r2, [r3, #0]
 8011506:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801150a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 801150e:	4602      	mov	r2, r0
 8011510:	701a      	strb	r2, [r3, #0]
 8011512:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011516:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 801151a:	460a      	mov	r2, r1
 801151c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 801151e:	f107 0310 	add.w	r3, r7, #16
 8011522:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 8011526:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801152a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801152e:	2200      	movs	r2, #0
 8011530:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8011532:	2300      	movs	r3, #0
 8011534:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 8011538:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801153c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011540:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 8011544:	7812      	ldrb	r2, [r2, #0]
 8011546:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8011548:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801154c:	3301      	adds	r3, #1
 801154e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 8011552:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011556:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801155a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801155e:	7812      	ldrb	r2, [r2, #0]
 8011560:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8011562:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011566:	3301      	adds	r3, #1
 8011568:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 801156c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011570:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011574:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 8011578:	7812      	ldrb	r2, [r2, #0]
 801157a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801157c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011580:	3301      	adds	r3, #1
 8011582:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8011586:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 801158a:	2218      	movs	r2, #24
 801158c:	2100      	movs	r1, #0
 801158e:	4618      	mov	r0, r3
 8011590:	f000 f8d9 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x08;
 8011594:	2308      	movs	r3, #8
 8011596:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 801159a:	2331      	movs	r3, #49	@ 0x31
 801159c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 80115a0:	f107 0310 	add.w	r3, r7, #16
 80115a4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80115a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80115ac:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80115b0:	f107 030f 	add.w	r3, r7, #15
 80115b4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80115b8:	2301      	movs	r3, #1
 80115ba:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80115be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80115c2:	2100      	movs	r1, #0
 80115c4:	4618      	mov	r0, r3
 80115c6:	f000 fb47 	bl	8011c58 <hci_send_req>
 80115ca:	4603      	mov	r3, r0
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	da01      	bge.n	80115d4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 80115d0:	23ff      	movs	r3, #255	@ 0xff
 80115d2:	e004      	b.n	80115de <hci_le_set_default_phy+0xf0>
  return status;
 80115d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80115d8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80115dc:	781b      	ldrb	r3, [r3, #0]
}
 80115de:	4618      	mov	r0, r3
 80115e0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd90      	pop	{r4, r7, pc}

080115e8 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 80115e8:	b5b0      	push	{r4, r5, r7, lr}
 80115ea:	b0cc      	sub	sp, #304	@ 0x130
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	4605      	mov	r5, r0
 80115f0:	460c      	mov	r4, r1
 80115f2:	4610      	mov	r0, r2
 80115f4:	4619      	mov	r1, r3
 80115f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80115fa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 80115fe:	462a      	mov	r2, r5
 8011600:	801a      	strh	r2, [r3, #0]
 8011602:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011606:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 801160a:	4622      	mov	r2, r4
 801160c:	801a      	strh	r2, [r3, #0]
 801160e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011612:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 8011616:	4602      	mov	r2, r0
 8011618:	801a      	strh	r2, [r3, #0]
 801161a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801161e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8011622:	460a      	mov	r2, r1
 8011624:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 8011626:	f107 0310 	add.w	r3, r7, #16
 801162a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 801162e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011632:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8011636:	2200      	movs	r2, #0
 8011638:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801163a:	2300      	movs	r3, #0
 801163c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 8011640:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011644:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011648:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 801164c:	8812      	ldrh	r2, [r2, #0]
 801164e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8011650:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011654:	3302      	adds	r3, #2
 8011656:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 801165a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 801165e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011662:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 8011666:	8812      	ldrh	r2, [r2, #0]
 8011668:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 801166a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801166e:	3302      	adds	r3, #2
 8011670:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8011674:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011678:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 801167c:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 8011680:	8812      	ldrh	r2, [r2, #0]
 8011682:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8011684:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8011688:	3302      	adds	r3, #2
 801168a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Latency = Latency;
 801168e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8011692:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8011696:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 801169a:	8812      	ldrh	r2, [r2, #0]
 801169c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 801169e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80116a2:	3302      	adds	r3, #2
 80116a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80116a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80116ac:	f8b7 2140 	ldrh.w	r2, [r7, #320]	@ 0x140
 80116b0:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 80116b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80116b6:	3302      	adds	r3, #2
 80116b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80116bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80116c0:	2218      	movs	r2, #24
 80116c2:	2100      	movs	r1, #0
 80116c4:	4618      	mov	r0, r3
 80116c6:	f000 f83e 	bl	8011746 <Osal_MemSet>
  rq.ogf = 0x3f;
 80116ca:	233f      	movs	r3, #63	@ 0x3f
 80116cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x181;
 80116d0:	f240 1381 	movw	r3, #385	@ 0x181
 80116d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.event = 0x0F;
 80116d8:	230f      	movs	r3, #15
 80116da:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  rq.cparam = cmd_buffer;
 80116de:	f107 0310 	add.w	r3, r7, #16
 80116e2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 80116e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80116ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 80116ee:	f107 030f 	add.w	r3, r7, #15
 80116f2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 80116f6:	2301      	movs	r3, #1
 80116f8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80116fc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8011700:	2100      	movs	r1, #0
 8011702:	4618      	mov	r0, r3
 8011704:	f000 faa8 	bl	8011c58 <hci_send_req>
 8011708:	4603      	mov	r3, r0
 801170a:	2b00      	cmp	r3, #0
 801170c:	da01      	bge.n	8011712 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 801170e:	23ff      	movs	r3, #255	@ 0xff
 8011710:	e004      	b.n	801171c <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8011712:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8011716:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 801171a:	781b      	ldrb	r3, [r3, #0]
}
 801171c:	4618      	mov	r0, r3
 801171e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011722:	46bd      	mov	sp, r7
 8011724:	bdb0      	pop	{r4, r5, r7, pc}

08011726 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8011726:	b580      	push	{r7, lr}
 8011728:	b084      	sub	sp, #16
 801172a:	af00      	add	r7, sp, #0
 801172c:	60f8      	str	r0, [r7, #12]
 801172e:	60b9      	str	r1, [r7, #8]
 8011730:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	68b9      	ldr	r1, [r7, #8]
 8011736:	68f8      	ldr	r0, [r7, #12]
 8011738:	f005 f829 	bl	801678e <memcpy>
 801173c:	4603      	mov	r3, r0
}
 801173e:	4618      	mov	r0, r3
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}

08011746 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8011746:	b580      	push	{r7, lr}
 8011748:	b084      	sub	sp, #16
 801174a:	af00      	add	r7, sp, #0
 801174c:	60f8      	str	r0, [r7, #12]
 801174e:	60b9      	str	r1, [r7, #8]
 8011750:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	68b9      	ldr	r1, [r7, #8]
 8011756:	68f8      	ldr	r0, [r7, #12]
 8011758:	f004 ff88 	bl	801666c <memset>
 801175c:	4603      	mov	r3, r0
}
 801175e:	4618      	mov	r0, r3
 8011760:	3710      	adds	r7, #16
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}

08011766 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 8011766:	b480      	push	{r7}
 8011768:	af00      	add	r7, sp, #0
  return;
 801176a:	bf00      	nop
}
 801176c:	46bd      	mov	sp, r7
 801176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011772:	4770      	bx	lr

08011774 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 8011774:	b480      	push	{r7}
 8011776:	af00      	add	r7, sp, #0
  return;
 8011778:	bf00      	nop
}
 801177a:	46bd      	mov	sp, r7
 801177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011780:	4770      	bx	lr

08011782 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 8011782:	b480      	push	{r7}
 8011784:	af00      	add	r7, sp, #0
  return;
 8011786:	bf00      	nop
}
 8011788:	46bd      	mov	sp, r7
 801178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178e:	4770      	bx	lr

08011790 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 8011790:	b480      	push	{r7}
 8011792:	af00      	add	r7, sp, #0
  return;
 8011794:	bf00      	nop
}
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr

0801179e <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 801179e:	b480      	push	{r7}
 80117a0:	af00      	add	r7, sp, #0
  return;
 80117a2:	bf00      	nop
}
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr

080117ac <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80117ac:	b480      	push	{r7}
 80117ae:	af00      	add	r7, sp, #0
  return;
 80117b0:	bf00      	nop
}
 80117b2:	46bd      	mov	sp, r7
 80117b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b8:	4770      	bx	lr

080117ba <HRS_Init>:
__WEAK void HRS_Init( void )
{
 80117ba:	b480      	push	{r7}
 80117bc:	af00      	add	r7, sp, #0
  return;
 80117be:	bf00      	nop
}
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 80117c8:	b480      	push	{r7}
 80117ca:	af00      	add	r7, sp, #0
  return;
 80117cc:	bf00      	nop
}
 80117ce:	46bd      	mov	sp, r7
 80117d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d4:	4770      	bx	lr

080117d6 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 80117d6:	b480      	push	{r7}
 80117d8:	af00      	add	r7, sp, #0
  return;
 80117da:	bf00      	nop
}
 80117dc:	46bd      	mov	sp, r7
 80117de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e2:	4770      	bx	lr

080117e4 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 80117e4:	b480      	push	{r7}
 80117e6:	af00      	add	r7, sp, #0
  return;
 80117e8:	bf00      	nop
}
 80117ea:	46bd      	mov	sp, r7
 80117ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f0:	4770      	bx	lr

080117f2 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 80117f2:	b480      	push	{r7}
 80117f4:	af00      	add	r7, sp, #0
  return;
 80117f6:	bf00      	nop
}
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8011800:	b480      	push	{r7}
 8011802:	af00      	add	r7, sp, #0
  return;
 8011804:	bf00      	nop
}
 8011806:	46bd      	mov	sp, r7
 8011808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801180c:	4770      	bx	lr

0801180e <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 801180e:	b480      	push	{r7}
 8011810:	af00      	add	r7, sp, #0
  return;
 8011812:	bf00      	nop
}
 8011814:	46bd      	mov	sp, r7
 8011816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801181a:	4770      	bx	lr

0801181c <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 801181c:	b480      	push	{r7}
 801181e:	af00      	add	r7, sp, #0
  return;
 8011820:	bf00      	nop
}
 8011822:	46bd      	mov	sp, r7
 8011824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011828:	4770      	bx	lr

0801182a <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 801182a:	b480      	push	{r7}
 801182c:	af00      	add	r7, sp, #0
  return;
 801182e:	bf00      	nop
}
 8011830:	46bd      	mov	sp, r7
 8011832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011836:	4770      	bx	lr

08011838 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 8011838:	b480      	push	{r7}
 801183a:	af00      	add	r7, sp, #0
  return;
 801183c:	bf00      	nop
}
 801183e:	46bd      	mov	sp, r7
 8011840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011844:	4770      	bx	lr

08011846 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 8011846:	b480      	push	{r7}
 8011848:	af00      	add	r7, sp, #0
  return;
 801184a:	bf00      	nop
}
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8011854:	b580      	push	{r7, lr}
 8011856:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8011858:	4b04      	ldr	r3, [pc, #16]	@ (801186c <SVCCTL_Init+0x18>)
 801185a:	2200      	movs	r2, #0
 801185c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 801185e:	4b04      	ldr	r3, [pc, #16]	@ (8011870 <SVCCTL_Init+0x1c>)
 8011860:	2200      	movs	r2, #0
 8011862:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8011864:	f000 f806 	bl	8011874 <SVCCTL_SvcInit>

  return;
 8011868:	bf00      	nop
}
 801186a:	bd80      	pop	{r7, pc}
 801186c:	20000188 	.word	0x20000188
 8011870:	200001a8 	.word	0x200001a8

08011874 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	af00      	add	r7, sp, #0
  BAS_Init();
 8011878:	f7ff ff75 	bl	8011766 <BAS_Init>

  BLS_Init();
 801187c:	f7ff ff7a 	bl	8011774 <BLS_Init>

  CRS_STM_Init();
 8011880:	f7ff ff7f 	bl	8011782 <CRS_STM_Init>

  DIS_Init();
 8011884:	f7ff ff84 	bl	8011790 <DIS_Init>

  EDS_STM_Init();
 8011888:	f7ff ff89 	bl	801179e <EDS_STM_Init>

  HIDS_Init();
 801188c:	f7ff ff8e 	bl	80117ac <HIDS_Init>

  HRS_Init();
 8011890:	f7ff ff93 	bl	80117ba <HRS_Init>

  HTS_Init();
 8011894:	f7ff ff98 	bl	80117c8 <HTS_Init>

  IAS_Init();
 8011898:	f7ff ff9d 	bl	80117d6 <IAS_Init>

  LLS_Init();
 801189c:	f7ff ffa2 	bl	80117e4 <LLS_Init>

  TPS_Init();
 80118a0:	f7ff ffa7 	bl	80117f2 <TPS_Init>

  MOTENV_STM_Init();
 80118a4:	f7ff ffac 	bl	8011800 <MOTENV_STM_Init>

  P2PS_STM_Init();
 80118a8:	f7ff ffb1 	bl	801180e <P2PS_STM_Init>

  ZDD_STM_Init();
 80118ac:	f7ff ffb6 	bl	801181c <ZDD_STM_Init>

  OTAS_STM_Init();
 80118b0:	f7ff ffbb 	bl	801182a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 80118b4:	f7ff ffc7 	bl	8011846 <BVOPUS_STM_Init>

  MESH_Init();
 80118b8:	f7ff ffbe 	bl	8011838 <MESH_Init>

  SVCCTL_InitCustomSvc();
 80118bc:	f002 fec6 	bl	801464c <SVCCTL_InitCustomSvc>
  
  return;
 80118c0:	bf00      	nop
}
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 80118c4:	b480      	push	{r7}
 80118c6:	b083      	sub	sp, #12
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 80118cc:	4b09      	ldr	r3, [pc, #36]	@ (80118f4 <SVCCTL_RegisterSvcHandler+0x30>)
 80118ce:	7f1b      	ldrb	r3, [r3, #28]
 80118d0:	4619      	mov	r1, r3
 80118d2:	4a08      	ldr	r2, [pc, #32]	@ (80118f4 <SVCCTL_RegisterSvcHandler+0x30>)
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 80118da:	4b06      	ldr	r3, [pc, #24]	@ (80118f4 <SVCCTL_RegisterSvcHandler+0x30>)
 80118dc:	7f1b      	ldrb	r3, [r3, #28]
 80118de:	3301      	adds	r3, #1
 80118e0:	b2da      	uxtb	r2, r3
 80118e2:	4b04      	ldr	r3, [pc, #16]	@ (80118f4 <SVCCTL_RegisterSvcHandler+0x30>)
 80118e4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 80118e6:	bf00      	nop
}
 80118e8:	370c      	adds	r7, #12
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr
 80118f2:	bf00      	nop
 80118f4:	20000188 	.word	0x20000188

080118f8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b086      	sub	sp, #24
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	3301      	adds	r3, #1
 8011904:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8011906:	2300      	movs	r3, #0
 8011908:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 801190a:	693b      	ldr	r3, [r7, #16]
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	2bff      	cmp	r3, #255	@ 0xff
 8011910:	d125      	bne.n	801195e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	3302      	adds	r3, #2
 8011916:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	881b      	ldrh	r3, [r3, #0]
 801191c:	b29b      	uxth	r3, r3
 801191e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011922:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011926:	d118      	bne.n	801195a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8011928:	2300      	movs	r3, #0
 801192a:	757b      	strb	r3, [r7, #21]
 801192c:	e00d      	b.n	801194a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 801192e:	7d7b      	ldrb	r3, [r7, #21]
 8011930:	4a1a      	ldr	r2, [pc, #104]	@ (801199c <SVCCTL_UserEvtRx+0xa4>)
 8011932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011936:	6878      	ldr	r0, [r7, #4]
 8011938:	4798      	blx	r3
 801193a:	4603      	mov	r3, r0
 801193c:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 801193e:	7dfb      	ldrb	r3, [r7, #23]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d108      	bne.n	8011956 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8011944:	7d7b      	ldrb	r3, [r7, #21]
 8011946:	3301      	adds	r3, #1
 8011948:	757b      	strb	r3, [r7, #21]
 801194a:	4b14      	ldr	r3, [pc, #80]	@ (801199c <SVCCTL_UserEvtRx+0xa4>)
 801194c:	7f1b      	ldrb	r3, [r3, #28]
 801194e:	7d7a      	ldrb	r2, [r7, #21]
 8011950:	429a      	cmp	r2, r3
 8011952:	d3ec      	bcc.n	801192e <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8011954:	e002      	b.n	801195c <SVCCTL_UserEvtRx+0x64>
              break;
 8011956:	bf00      	nop
          break;
 8011958:	e000      	b.n	801195c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 801195a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 801195c:	e000      	b.n	8011960 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 801195e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8011960:	7dfb      	ldrb	r3, [r7, #23]
 8011962:	2b02      	cmp	r3, #2
 8011964:	d00f      	beq.n	8011986 <SVCCTL_UserEvtRx+0x8e>
 8011966:	2b02      	cmp	r3, #2
 8011968:	dc10      	bgt.n	801198c <SVCCTL_UserEvtRx+0x94>
 801196a:	2b00      	cmp	r3, #0
 801196c:	d002      	beq.n	8011974 <SVCCTL_UserEvtRx+0x7c>
 801196e:	2b01      	cmp	r3, #1
 8011970:	d006      	beq.n	8011980 <SVCCTL_UserEvtRx+0x88>
 8011972:	e00b      	b.n	801198c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f001 fc93 	bl	80132a0 <SVCCTL_App_Notification>
 801197a:	4603      	mov	r3, r0
 801197c:	75bb      	strb	r3, [r7, #22]
      break;
 801197e:	e008      	b.n	8011992 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8011980:	2301      	movs	r3, #1
 8011982:	75bb      	strb	r3, [r7, #22]
      break;
 8011984:	e005      	b.n	8011992 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8011986:	2300      	movs	r3, #0
 8011988:	75bb      	strb	r3, [r7, #22]
      break;
 801198a:	e002      	b.n	8011992 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 801198c:	2301      	movs	r3, #1
 801198e:	75bb      	strb	r3, [r7, #22]
      break;
 8011990:	bf00      	nop
  }

  return (return_status);
 8011992:	7dbb      	ldrb	r3, [r7, #22]
}
 8011994:	4618      	mov	r0, r3
 8011996:	3718      	adds	r7, #24
 8011998:	46bd      	mov	sp, r7
 801199a:	bd80      	pop	{r7, pc}
 801199c:	20000188 	.word	0x20000188

080119a0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b088      	sub	sp, #32
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80119a8:	f107 030c 	add.w	r3, r7, #12
 80119ac:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 80119b4:	69fb      	ldr	r3, [r7, #28]
 80119b6:	212e      	movs	r1, #46	@ 0x2e
 80119b8:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 80119bc:	f000 fae8 	bl	8011f90 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80119c0:	69fb      	ldr	r3, [r7, #28]
 80119c2:	330b      	adds	r3, #11
 80119c4:	78db      	ldrb	r3, [r3, #3]
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3720      	adds	r7, #32
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 80119ce:	b580      	push	{r7, lr}
 80119d0:	b088      	sub	sp, #32
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 80119d6:	f107 030c 	add.w	r3, r7, #12
 80119da:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 80119e2:	69fb      	ldr	r3, [r7, #28]
 80119e4:	210f      	movs	r1, #15
 80119e6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 80119ea:	f000 fad1 	bl	8011f90 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	330b      	adds	r3, #11
 80119f2:	78db      	ldrb	r3, [r3, #3]
}
 80119f4:	4618      	mov	r0, r3
 80119f6:	3720      	adds	r7, #32
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b088      	sub	sp, #32
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8011a04:	f107 030c 	add.w	r3, r7, #12
 8011a08:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	687a      	ldr	r2, [r7, #4]
 8011a0e:	2110      	movs	r1, #16
 8011a10:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 8011a14:	f000 fabc 	bl	8011f90 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8011a18:	69fb      	ldr	r3, [r7, #28]
 8011a1a:	330b      	adds	r3, #11
 8011a1c:	78db      	ldrb	r3, [r3, #3]
}
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3720      	adds	r7, #32
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}
	...

08011a28 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b08b      	sub	sp, #44	@ 0x2c
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8011a30:	2300      	movs	r3, #0
 8011a32:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8011a34:	2300      	movs	r3, #0
 8011a36:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8011a38:	2300      	movs	r3, #0
 8011a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8011a40:	2300      	movs	r3, #0
 8011a42:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8011a44:	2300      	movs	r3, #0
 8011a46:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8011a48:	2300      	movs	r3, #0
 8011a4a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8011a50:	4b4a      	ldr	r3, [pc, #296]	@ (8011b7c <SHCI_GetWirelessFwInfo+0x154>)
 8011a52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011a54:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011a58:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8011a5a:	693b      	ldr	r3, [r7, #16]
 8011a5c:	009b      	lsls	r3, r3, #2
 8011a5e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011a62:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8011a6a:	68bb      	ldr	r3, [r7, #8]
 8011a6c:	681b      	ldr	r3, [r3, #0]
 8011a6e:	4a44      	ldr	r2, [pc, #272]	@ (8011b80 <SHCI_GetWirelessFwInfo+0x158>)
 8011a70:	4293      	cmp	r3, r2
 8011a72:	d10f      	bne.n	8011a94 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	695b      	ldr	r3, [r3, #20]
 8011a78:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	699b      	ldr	r3, [r3, #24]
 8011a7e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8011a80:	68bb      	ldr	r3, [r7, #8]
 8011a82:	69db      	ldr	r3, [r3, #28]
 8011a84:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	68db      	ldr	r3, [r3, #12]
 8011a8a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	691b      	ldr	r3, [r3, #16]
 8011a90:	617b      	str	r3, [r7, #20]
 8011a92:	e01a      	b.n	8011aca <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8011a94:	693b      	ldr	r3, [r7, #16]
 8011a96:	009b      	lsls	r3, r3, #2
 8011a98:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8011a9c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8011aa0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	691b      	ldr	r3, [r3, #16]
 8011aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	695b      	ldr	r3, [r3, #20]
 8011ab0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	699b      	ldr	r3, [r3, #24]
 8011ab8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	681b      	ldr	r3, [r3, #0]
 8011ac6:	689b      	ldr	r3, [r3, #8]
 8011ac8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011acc:	0e1b      	lsrs	r3, r3, #24
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ad6:	0c1b      	lsrs	r3, r3, #16
 8011ad8:	b2da      	uxtb	r2, r3
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ae0:	0a1b      	lsrs	r3, r3, #8
 8011ae2:	b2da      	uxtb	r2, r3
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8011ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aea:	091b      	lsrs	r3, r3, #4
 8011aec:	b2db      	uxtb	r3, r3
 8011aee:	f003 030f 	and.w	r3, r3, #15
 8011af2:	b2da      	uxtb	r2, r3
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8011af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011afa:	b2db      	uxtb	r3, r3
 8011afc:	f003 030f 	and.w	r3, r3, #15
 8011b00:	b2da      	uxtb	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8011b06:	6a3b      	ldr	r3, [r7, #32]
 8011b08:	0e1b      	lsrs	r3, r3, #24
 8011b0a:	b2da      	uxtb	r2, r3
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011b10:	6a3b      	ldr	r3, [r7, #32]
 8011b12:	0c1b      	lsrs	r3, r3, #16
 8011b14:	b2da      	uxtb	r2, r3
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8011b1a:	6a3b      	ldr	r3, [r7, #32]
 8011b1c:	0a1b      	lsrs	r3, r3, #8
 8011b1e:	b2da      	uxtb	r2, r3
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011b24:	6a3b      	ldr	r3, [r7, #32]
 8011b26:	b2da      	uxtb	r2, r3
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8011b2c:	69fb      	ldr	r3, [r7, #28]
 8011b2e:	b2da      	uxtb	r2, r3
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8011b34:	69bb      	ldr	r3, [r7, #24]
 8011b36:	0e1b      	lsrs	r3, r3, #24
 8011b38:	b2da      	uxtb	r2, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8011b3e:	69bb      	ldr	r3, [r7, #24]
 8011b40:	0c1b      	lsrs	r3, r3, #16
 8011b42:	b2da      	uxtb	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8011b48:	69bb      	ldr	r3, [r7, #24]
 8011b4a:	0a1b      	lsrs	r3, r3, #8
 8011b4c:	b2da      	uxtb	r2, r3
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8011b52:	697b      	ldr	r3, [r7, #20]
 8011b54:	0e1b      	lsrs	r3, r3, #24
 8011b56:	b2da      	uxtb	r2, r3
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8011b5c:	697b      	ldr	r3, [r7, #20]
 8011b5e:	0c1b      	lsrs	r3, r3, #16
 8011b60:	b2da      	uxtb	r2, r3
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8011b66:	697b      	ldr	r3, [r7, #20]
 8011b68:	b2da      	uxtb	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8011b6e:	2300      	movs	r3, #0
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	372c      	adds	r7, #44	@ 0x2c
 8011b74:	46bd      	mov	sp, r7
 8011b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7a:	4770      	bx	lr
 8011b7c:	58004000 	.word	0x58004000
 8011b80:	a94656b9 	.word	0xa94656b9

08011b84 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
 8011b8c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011b8e:	683b      	ldr	r3, [r7, #0]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	4a08      	ldr	r2, [pc, #32]	@ (8011bb4 <hci_init+0x30>)
 8011b94:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8011b96:	4a08      	ldr	r2, [pc, #32]	@ (8011bb8 <hci_init+0x34>)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8011b9c:	4806      	ldr	r0, [pc, #24]	@ (8011bb8 <hci_init+0x34>)
 8011b9e:	f000 f979 	bl	8011e94 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	f000 f8da 	bl	8011d60 <TlInit>

  return;
 8011bac:	bf00      	nop
}
 8011bae:	3708      	adds	r7, #8
 8011bb0:	46bd      	mov	sp, r7
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	20001964 	.word	0x20001964
 8011bb8:	2000193c 	.word	0x2000193c

08011bbc <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b084      	sub	sp, #16
 8011bc0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011bc2:	4822      	ldr	r0, [pc, #136]	@ (8011c4c <hci_user_evt_proc+0x90>)
 8011bc4:	f000 fdfa 	bl	80127bc <LST_is_empty>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d12b      	bne.n	8011c26 <hci_user_evt_proc+0x6a>
 8011bce:	4b20      	ldr	r3, [pc, #128]	@ (8011c50 <hci_user_evt_proc+0x94>)
 8011bd0:	781b      	ldrb	r3, [r3, #0]
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d027      	beq.n	8011c26 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011bd6:	f107 030c 	add.w	r3, r7, #12
 8011bda:	4619      	mov	r1, r3
 8011bdc:	481b      	ldr	r0, [pc, #108]	@ (8011c4c <hci_user_evt_proc+0x90>)
 8011bde:	f000 fe7c 	bl	80128da <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8011be2:	4b1c      	ldr	r3, [pc, #112]	@ (8011c54 <hci_user_evt_proc+0x98>)
 8011be4:	69db      	ldr	r3, [r3, #28]
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d00c      	beq.n	8011c04 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011bf2:	4b18      	ldr	r3, [pc, #96]	@ (8011c54 <hci_user_evt_proc+0x98>)
 8011bf4:	69db      	ldr	r3, [r3, #28]
 8011bf6:	1d3a      	adds	r2, r7, #4
 8011bf8:	4610      	mov	r0, r2
 8011bfa:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8011bfc:	793a      	ldrb	r2, [r7, #4]
 8011bfe:	4b14      	ldr	r3, [pc, #80]	@ (8011c50 <hci_user_evt_proc+0x94>)
 8011c00:	701a      	strb	r2, [r3, #0]
 8011c02:	e002      	b.n	8011c0a <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011c04:	4b12      	ldr	r3, [pc, #72]	@ (8011c50 <hci_user_evt_proc+0x94>)
 8011c06:	2201      	movs	r2, #1
 8011c08:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8011c0a:	4b11      	ldr	r3, [pc, #68]	@ (8011c50 <hci_user_evt_proc+0x94>)
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d004      	beq.n	8011c1c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	4618      	mov	r0, r3
 8011c16:	f000 fc0d 	bl	8012434 <TL_MM_EvtDone>
 8011c1a:	e004      	b.n	8011c26 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	4619      	mov	r1, r3
 8011c20:	480a      	ldr	r0, [pc, #40]	@ (8011c4c <hci_user_evt_proc+0x90>)
 8011c22:	f000 fded 	bl	8012800 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8011c26:	4809      	ldr	r0, [pc, #36]	@ (8011c4c <hci_user_evt_proc+0x90>)
 8011c28:	f000 fdc8 	bl	80127bc <LST_is_empty>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d107      	bne.n	8011c42 <hci_user_evt_proc+0x86>
 8011c32:	4b07      	ldr	r3, [pc, #28]	@ (8011c50 <hci_user_evt_proc+0x94>)
 8011c34:	781b      	ldrb	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d003      	beq.n	8011c42 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8011c3a:	4804      	ldr	r0, [pc, #16]	@ (8011c4c <hci_user_evt_proc+0x90>)
 8011c3c:	f002 fadc 	bl	80141f8 <hci_notify_asynch_evt>
  }


  return;
 8011c40:	bf00      	nop
 8011c42:	bf00      	nop
}
 8011c44:	3710      	adds	r7, #16
 8011c46:	46bd      	mov	sp, r7
 8011c48:	bd80      	pop	{r7, pc}
 8011c4a:	bf00      	nop
 8011c4c:	200001b0 	.word	0x200001b0
 8011c50:	200001bc 	.word	0x200001bc
 8011c54:	2000193c 	.word	0x2000193c

08011c58 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b088      	sub	sp, #32
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
 8011c60:	460b      	mov	r3, r1
 8011c62:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8011c64:	2000      	movs	r0, #0
 8011c66:	f000 f8d1 	bl	8011e0c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	885b      	ldrh	r3, [r3, #2]
 8011c72:	b21b      	sxth	r3, r3
 8011c74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011c78:	b21a      	sxth	r2, r3
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	881b      	ldrh	r3, [r3, #0]
 8011c7e:	029b      	lsls	r3, r3, #10
 8011c80:	b21b      	sxth	r3, r3
 8011c82:	4313      	orrs	r3, r2
 8011c84:	b21b      	sxth	r3, r3
 8011c86:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8011c88:	4b33      	ldr	r3, [pc, #204]	@ (8011d58 <hci_send_req+0x100>)
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	68db      	ldr	r3, [r3, #12]
 8011c92:	b2d9      	uxtb	r1, r3
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	689a      	ldr	r2, [r3, #8]
 8011c98:	8bbb      	ldrh	r3, [r7, #28]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f000 f890 	bl	8011dc0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8011ca0:	e04e      	b.n	8011d40 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8011ca2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011ca6:	f002 fabe 	bl	8014226 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011caa:	e043      	b.n	8011d34 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8011cac:	f107 030c 	add.w	r3, r7, #12
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	482a      	ldr	r0, [pc, #168]	@ (8011d5c <hci_send_req+0x104>)
 8011cb4:	f000 fe11 	bl	80128da <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	7a5b      	ldrb	r3, [r3, #9]
 8011cbc:	2b0f      	cmp	r3, #15
 8011cbe:	d114      	bne.n	8011cea <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8011cc0:	68fb      	ldr	r3, [r7, #12]
 8011cc2:	330b      	adds	r3, #11
 8011cc4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	885b      	ldrh	r3, [r3, #2]
 8011cca:	b29b      	uxth	r3, r3
 8011ccc:	8bba      	ldrh	r2, [r7, #28]
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d104      	bne.n	8011cdc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	691b      	ldr	r3, [r3, #16]
 8011cd6:	693a      	ldr	r2, [r7, #16]
 8011cd8:	7812      	ldrb	r2, [r2, #0]
 8011cda:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8011cdc:	693b      	ldr	r3, [r7, #16]
 8011cde:	785b      	ldrb	r3, [r3, #1]
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d027      	beq.n	8011d34 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	77fb      	strb	r3, [r7, #31]
 8011ce8:	e024      	b.n	8011d34 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	330b      	adds	r3, #11
 8011cee:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8011cf0:	69bb      	ldr	r3, [r7, #24]
 8011cf2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	8bba      	ldrh	r2, [r7, #28]
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d114      	bne.n	8011d28 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	7a9b      	ldrb	r3, [r3, #10]
 8011d02:	3b03      	subs	r3, #3
 8011d04:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	695a      	ldr	r2, [r3, #20]
 8011d0a:	7dfb      	ldrb	r3, [r7, #23]
 8011d0c:	429a      	cmp	r2, r3
 8011d0e:	bfa8      	it	ge
 8011d10:	461a      	movge	r2, r3
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6918      	ldr	r0, [r3, #16]
 8011d1a:	69bb      	ldr	r3, [r7, #24]
 8011d1c:	1cd9      	adds	r1, r3, #3
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	695b      	ldr	r3, [r3, #20]
 8011d22:	461a      	mov	r2, r3
 8011d24:	f004 fd33 	bl	801678e <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8011d28:	69bb      	ldr	r3, [r7, #24]
 8011d2a:	781b      	ldrb	r3, [r3, #0]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d001      	beq.n	8011d34 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8011d30:	2301      	movs	r3, #1
 8011d32:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8011d34:	4809      	ldr	r0, [pc, #36]	@ (8011d5c <hci_send_req+0x104>)
 8011d36:	f000 fd41 	bl	80127bc <LST_is_empty>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d0b5      	beq.n	8011cac <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8011d40:	7ffb      	ldrb	r3, [r7, #31]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d0ad      	beq.n	8011ca2 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8011d46:	2001      	movs	r0, #1
 8011d48:	f000 f860 	bl	8011e0c <NotifyCmdStatus>

  return 0;
 8011d4c:	2300      	movs	r3, #0
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3720      	adds	r7, #32
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	20001968 	.word	0x20001968
 8011d5c:	2000195c 	.word	0x2000195c

08011d60 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8011d60:	b580      	push	{r7, lr}
 8011d62:	b086      	sub	sp, #24
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8011d68:	480f      	ldr	r0, [pc, #60]	@ (8011da8 <TlInit+0x48>)
 8011d6a:	f000 fd17 	bl	801279c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8011d6e:	4a0f      	ldr	r2, [pc, #60]	@ (8011dac <TlInit+0x4c>)
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8011d74:	480e      	ldr	r0, [pc, #56]	@ (8011db0 <TlInit+0x50>)
 8011d76:	f000 fd11 	bl	801279c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8011d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8011db4 <TlInit+0x54>)
 8011d7c:	2201      	movs	r2, #1
 8011d7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8011d80:	4b0d      	ldr	r3, [pc, #52]	@ (8011db8 <TlInit+0x58>)
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00a      	beq.n	8011d9e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8011d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8011dbc <TlInit+0x5c>)
 8011d8e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8011d90:	4b09      	ldr	r3, [pc, #36]	@ (8011db8 <TlInit+0x58>)
 8011d92:	681b      	ldr	r3, [r3, #0]
 8011d94:	f107 0208 	add.w	r2, r7, #8
 8011d98:	4610      	mov	r0, r2
 8011d9a:	4798      	blx	r3
  }

  return;
 8011d9c:	bf00      	nop
 8011d9e:	bf00      	nop
}
 8011da0:	3718      	adds	r7, #24
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	2000195c 	.word	0x2000195c
 8011dac:	200001b8 	.word	0x200001b8
 8011db0:	200001b0 	.word	0x200001b0
 8011db4:	200001bc 	.word	0x200001bc
 8011db8:	2000193c 	.word	0x2000193c
 8011dbc:	08011e4d 	.word	0x08011e4d

08011dc0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	603a      	str	r2, [r7, #0]
 8011dca:	80fb      	strh	r3, [r7, #6]
 8011dcc:	460b      	mov	r3, r1
 8011dce:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8011dd0:	4b0c      	ldr	r3, [pc, #48]	@ (8011e04 <SendCmd+0x44>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	88fa      	ldrh	r2, [r7, #6]
 8011dd6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8011dda:	4b0a      	ldr	r3, [pc, #40]	@ (8011e04 <SendCmd+0x44>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	797a      	ldrb	r2, [r7, #5]
 8011de0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8011de2:	4b08      	ldr	r3, [pc, #32]	@ (8011e04 <SendCmd+0x44>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	330c      	adds	r3, #12
 8011de8:	797a      	ldrb	r2, [r7, #5]
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	4618      	mov	r0, r3
 8011dee:	f004 fcce 	bl	801678e <memcpy>

  hciContext.io.Send(0,0);
 8011df2:	4b05      	ldr	r3, [pc, #20]	@ (8011e08 <SendCmd+0x48>)
 8011df4:	691b      	ldr	r3, [r3, #16]
 8011df6:	2100      	movs	r1, #0
 8011df8:	2000      	movs	r0, #0
 8011dfa:	4798      	blx	r3

  return;
 8011dfc:	bf00      	nop
}
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}
 8011e04:	200001b8 	.word	0x200001b8
 8011e08:	2000193c 	.word	0x2000193c

08011e0c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	4603      	mov	r3, r0
 8011e14:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8011e16:	79fb      	ldrb	r3, [r7, #7]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d108      	bne.n	8011e2e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8011e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8011e48 <NotifyCmdStatus+0x3c>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d00d      	beq.n	8011e40 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8011e24:	4b08      	ldr	r3, [pc, #32]	@ (8011e48 <NotifyCmdStatus+0x3c>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	2000      	movs	r0, #0
 8011e2a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8011e2c:	e008      	b.n	8011e40 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8011e2e:	4b06      	ldr	r3, [pc, #24]	@ (8011e48 <NotifyCmdStatus+0x3c>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d004      	beq.n	8011e40 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8011e36:	4b04      	ldr	r3, [pc, #16]	@ (8011e48 <NotifyCmdStatus+0x3c>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2001      	movs	r0, #1
 8011e3c:	4798      	blx	r3
  return;
 8011e3e:	bf00      	nop
 8011e40:	bf00      	nop
}
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	20001964 	.word	0x20001964

08011e4c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b082      	sub	sp, #8
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	7a5b      	ldrb	r3, [r3, #9]
 8011e58:	2b0f      	cmp	r3, #15
 8011e5a:	d003      	beq.n	8011e64 <TlEvtReceived+0x18>
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	7a5b      	ldrb	r3, [r3, #9]
 8011e60:	2b0e      	cmp	r3, #14
 8011e62:	d107      	bne.n	8011e74 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8011e64:	6879      	ldr	r1, [r7, #4]
 8011e66:	4809      	ldr	r0, [pc, #36]	@ (8011e8c <TlEvtReceived+0x40>)
 8011e68:	f000 fcf0 	bl	801284c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8011e6c:	2000      	movs	r0, #0
 8011e6e:	f002 f9cf 	bl	8014210 <hci_cmd_resp_release>
 8011e72:	e006      	b.n	8011e82 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8011e74:	6879      	ldr	r1, [r7, #4]
 8011e76:	4806      	ldr	r0, [pc, #24]	@ (8011e90 <TlEvtReceived+0x44>)
 8011e78:	f000 fce8 	bl	801284c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8011e7c:	4804      	ldr	r0, [pc, #16]	@ (8011e90 <TlEvtReceived+0x44>)
 8011e7e:	f002 f9bb 	bl	80141f8 <hci_notify_asynch_evt>
  }

  return;
 8011e82:	bf00      	nop
}
 8011e84:	3708      	adds	r7, #8
 8011e86:	46bd      	mov	sp, r7
 8011e88:	bd80      	pop	{r7, pc}
 8011e8a:	bf00      	nop
 8011e8c:	2000195c 	.word	0x2000195c
 8011e90:	200001b0 	.word	0x200001b0

08011e94 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8011e94:	b480      	push	{r7}
 8011e96:	b083      	sub	sp, #12
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	4a05      	ldr	r2, [pc, #20]	@ (8011eb4 <hci_register_io_bus+0x20>)
 8011ea0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	4a04      	ldr	r2, [pc, #16]	@ (8011eb8 <hci_register_io_bus+0x24>)
 8011ea6:	611a      	str	r2, [r3, #16]

  return;
 8011ea8:	bf00      	nop
}
 8011eaa:	370c      	adds	r7, #12
 8011eac:	46bd      	mov	sp, r7
 8011eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb2:	4770      	bx	lr
 8011eb4:	080121ad 	.word	0x080121ad
 8011eb8:	08012215 	.word	0x08012215

08011ebc <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8011ebc:	b580      	push	{r7, lr}
 8011ebe:	b082      	sub	sp, #8
 8011ec0:	af00      	add	r7, sp, #0
 8011ec2:	6078      	str	r0, [r7, #4]
 8011ec4:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8011ec6:	683b      	ldr	r3, [r7, #0]
 8011ec8:	685b      	ldr	r3, [r3, #4]
 8011eca:	4a08      	ldr	r2, [pc, #32]	@ (8011eec <shci_init+0x30>)
 8011ecc:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8011ece:	4a08      	ldr	r2, [pc, #32]	@ (8011ef0 <shci_init+0x34>)
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8011ed4:	4806      	ldr	r0, [pc, #24]	@ (8011ef0 <shci_init+0x34>)
 8011ed6:	f000 f915 	bl	8012104 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f000 f898 	bl	8012014 <TlInit>

  return;
 8011ee4:	bf00      	nop
}
 8011ee6:	3708      	adds	r7, #8
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}
 8011eec:	2000198c 	.word	0x2000198c
 8011ef0:	2000196c 	.word	0x2000196c

08011ef4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b084      	sub	sp, #16
 8011ef8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011efa:	4822      	ldr	r0, [pc, #136]	@ (8011f84 <shci_user_evt_proc+0x90>)
 8011efc:	f000 fc5e 	bl	80127bc <LST_is_empty>
 8011f00:	4603      	mov	r3, r0
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d12b      	bne.n	8011f5e <shci_user_evt_proc+0x6a>
 8011f06:	4b20      	ldr	r3, [pc, #128]	@ (8011f88 <shci_user_evt_proc+0x94>)
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d027      	beq.n	8011f5e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8011f0e:	f107 030c 	add.w	r3, r7, #12
 8011f12:	4619      	mov	r1, r3
 8011f14:	481b      	ldr	r0, [pc, #108]	@ (8011f84 <shci_user_evt_proc+0x90>)
 8011f16:	f000 fce0 	bl	80128da <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8011f1a:	4b1c      	ldr	r3, [pc, #112]	@ (8011f8c <shci_user_evt_proc+0x98>)
 8011f1c:	69db      	ldr	r3, [r3, #28]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d00c      	beq.n	8011f3c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8011f26:	2301      	movs	r3, #1
 8011f28:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8011f2a:	4b18      	ldr	r3, [pc, #96]	@ (8011f8c <shci_user_evt_proc+0x98>)
 8011f2c:	69db      	ldr	r3, [r3, #28]
 8011f2e:	1d3a      	adds	r2, r7, #4
 8011f30:	4610      	mov	r0, r2
 8011f32:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8011f34:	793a      	ldrb	r2, [r7, #4]
 8011f36:	4b14      	ldr	r3, [pc, #80]	@ (8011f88 <shci_user_evt_proc+0x94>)
 8011f38:	701a      	strb	r2, [r3, #0]
 8011f3a:	e002      	b.n	8011f42 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8011f3c:	4b12      	ldr	r3, [pc, #72]	@ (8011f88 <shci_user_evt_proc+0x94>)
 8011f3e:	2201      	movs	r2, #1
 8011f40:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8011f42:	4b11      	ldr	r3, [pc, #68]	@ (8011f88 <shci_user_evt_proc+0x94>)
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d004      	beq.n	8011f54 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	f000 fa71 	bl	8012434 <TL_MM_EvtDone>
 8011f52:	e004      	b.n	8011f5e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	4619      	mov	r1, r3
 8011f58:	480a      	ldr	r0, [pc, #40]	@ (8011f84 <shci_user_evt_proc+0x90>)
 8011f5a:	f000 fc51 	bl	8012800 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8011f5e:	4809      	ldr	r0, [pc, #36]	@ (8011f84 <shci_user_evt_proc+0x90>)
 8011f60:	f000 fc2c 	bl	80127bc <LST_is_empty>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d107      	bne.n	8011f7a <shci_user_evt_proc+0x86>
 8011f6a:	4b07      	ldr	r3, [pc, #28]	@ (8011f88 <shci_user_evt_proc+0x94>)
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d003      	beq.n	8011f7a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8011f72:	4804      	ldr	r0, [pc, #16]	@ (8011f84 <shci_user_evt_proc+0x90>)
 8011f74:	f7f0 fe41 	bl	8002bfa <shci_notify_asynch_evt>
  }


  return;
 8011f78:	bf00      	nop
 8011f7a:	bf00      	nop
}
 8011f7c:	3710      	adds	r7, #16
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd80      	pop	{r7, pc}
 8011f82:	bf00      	nop
 8011f84:	200001c0 	.word	0x200001c0
 8011f88:	200001d0 	.word	0x200001d0
 8011f8c:	2000196c 	.word	0x2000196c

08011f90 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	60ba      	str	r2, [r7, #8]
 8011f98:	607b      	str	r3, [r7, #4]
 8011f9a:	4603      	mov	r3, r0
 8011f9c:	81fb      	strh	r3, [r7, #14]
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8011fa2:	2000      	movs	r0, #0
 8011fa4:	f000 f868 	bl	8012078 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8011fa8:	4b17      	ldr	r3, [pc, #92]	@ (8012008 <shci_send+0x78>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	89fa      	ldrh	r2, [r7, #14]
 8011fae:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8011fb2:	4b15      	ldr	r3, [pc, #84]	@ (8012008 <shci_send+0x78>)
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	7b7a      	ldrb	r2, [r7, #13]
 8011fb8:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8011fba:	4b13      	ldr	r3, [pc, #76]	@ (8012008 <shci_send+0x78>)
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	330c      	adds	r3, #12
 8011fc0:	7b7a      	ldrb	r2, [r7, #13]
 8011fc2:	68b9      	ldr	r1, [r7, #8]
 8011fc4:	4618      	mov	r0, r3
 8011fc6:	f004 fbe2 	bl	801678e <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8011fca:	4b10      	ldr	r3, [pc, #64]	@ (801200c <shci_send+0x7c>)
 8011fcc:	2201      	movs	r2, #1
 8011fce:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8011fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8012010 <shci_send+0x80>)
 8011fd2:	691b      	ldr	r3, [r3, #16]
 8011fd4:	2100      	movs	r1, #0
 8011fd6:	2000      	movs	r0, #0
 8011fd8:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8011fda:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8011fde:	f7f0 fe23 	bl	8002c28 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f103 0008 	add.w	r0, r3, #8
 8011fe8:	4b07      	ldr	r3, [pc, #28]	@ (8012008 <shci_send+0x78>)
 8011fea:	6819      	ldr	r1, [r3, #0]
 8011fec:	4b06      	ldr	r3, [pc, #24]	@ (8012008 <shci_send+0x78>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	789b      	ldrb	r3, [r3, #2]
 8011ff2:	3303      	adds	r3, #3
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	f004 fbca 	bl	801678e <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8011ffa:	2001      	movs	r0, #1
 8011ffc:	f000 f83c 	bl	8012078 <Cmd_SetStatus>

  return;
 8012000:	bf00      	nop
}
 8012002:	3710      	adds	r7, #16
 8012004:	46bd      	mov	sp, r7
 8012006:	bd80      	pop	{r7, pc}
 8012008:	200001cc 	.word	0x200001cc
 801200c:	20001990 	.word	0x20001990
 8012010:	2000196c 	.word	0x2000196c

08012014 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b086      	sub	sp, #24
 8012018:	af00      	add	r7, sp, #0
 801201a:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 801201c:	4a10      	ldr	r2, [pc, #64]	@ (8012060 <TlInit+0x4c>)
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8012022:	4810      	ldr	r0, [pc, #64]	@ (8012064 <TlInit+0x50>)
 8012024:	f000 fbba 	bl	801279c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012028:	2001      	movs	r0, #1
 801202a:	f000 f825 	bl	8012078 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801202e:	4b0e      	ldr	r3, [pc, #56]	@ (8012068 <TlInit+0x54>)
 8012030:	2201      	movs	r2, #1
 8012032:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8012034:	4b0d      	ldr	r3, [pc, #52]	@ (801206c <TlInit+0x58>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d00c      	beq.n	8012056 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8012040:	4b0b      	ldr	r3, [pc, #44]	@ (8012070 <TlInit+0x5c>)
 8012042:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8012044:	4b0b      	ldr	r3, [pc, #44]	@ (8012074 <TlInit+0x60>)
 8012046:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8012048:	4b08      	ldr	r3, [pc, #32]	@ (801206c <TlInit+0x58>)
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	f107 020c 	add.w	r2, r7, #12
 8012050:	4610      	mov	r0, r2
 8012052:	4798      	blx	r3
  }

  return;
 8012054:	bf00      	nop
 8012056:	bf00      	nop
}
 8012058:	3718      	adds	r7, #24
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	200001cc 	.word	0x200001cc
 8012064:	200001c0 	.word	0x200001c0
 8012068:	200001d0 	.word	0x200001d0
 801206c:	2000196c 	.word	0x2000196c
 8012070:	080120c9 	.word	0x080120c9
 8012074:	080120e1 	.word	0x080120e1

08012078 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b082      	sub	sp, #8
 801207c:	af00      	add	r7, sp, #0
 801207e:	4603      	mov	r3, r0
 8012080:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8012082:	79fb      	ldrb	r3, [r7, #7]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d10b      	bne.n	80120a0 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8012088:	4b0d      	ldr	r3, [pc, #52]	@ (80120c0 <Cmd_SetStatus+0x48>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d003      	beq.n	8012098 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8012090:	4b0b      	ldr	r3, [pc, #44]	@ (80120c0 <Cmd_SetStatus+0x48>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	2000      	movs	r0, #0
 8012096:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8012098:	4b0a      	ldr	r3, [pc, #40]	@ (80120c4 <Cmd_SetStatus+0x4c>)
 801209a:	2200      	movs	r2, #0
 801209c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801209e:	e00b      	b.n	80120b8 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80120a0:	4b08      	ldr	r3, [pc, #32]	@ (80120c4 <Cmd_SetStatus+0x4c>)
 80120a2:	2201      	movs	r2, #1
 80120a4:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80120a6:	4b06      	ldr	r3, [pc, #24]	@ (80120c0 <Cmd_SetStatus+0x48>)
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d004      	beq.n	80120b8 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80120ae:	4b04      	ldr	r3, [pc, #16]	@ (80120c0 <Cmd_SetStatus+0x48>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	2001      	movs	r0, #1
 80120b4:	4798      	blx	r3
  return;
 80120b6:	bf00      	nop
 80120b8:	bf00      	nop
}
 80120ba:	3708      	adds	r7, #8
 80120bc:	46bd      	mov	sp, r7
 80120be:	bd80      	pop	{r7, pc}
 80120c0:	2000198c 	.word	0x2000198c
 80120c4:	200001c8 	.word	0x200001c8

080120c8 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80120d0:	2000      	movs	r0, #0
 80120d2:	f7f0 fd9e 	bl	8002c12 <shci_cmd_resp_release>

  return;
 80120d6:	bf00      	nop
}
 80120d8:	3708      	adds	r7, #8
 80120da:	46bd      	mov	sp, r7
 80120dc:	bd80      	pop	{r7, pc}
	...

080120e0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80120e8:	6879      	ldr	r1, [r7, #4]
 80120ea:	4805      	ldr	r0, [pc, #20]	@ (8012100 <TlUserEvtReceived+0x20>)
 80120ec:	f000 fbae 	bl	801284c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80120f0:	4803      	ldr	r0, [pc, #12]	@ (8012100 <TlUserEvtReceived+0x20>)
 80120f2:	f7f0 fd82 	bl	8002bfa <shci_notify_asynch_evt>

  return;
 80120f6:	bf00      	nop
}
 80120f8:	3708      	adds	r7, #8
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	200001c0 	.word	0x200001c0

08012104 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	4a05      	ldr	r2, [pc, #20]	@ (8012124 <shci_register_io_bus+0x20>)
 8012110:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4a04      	ldr	r2, [pc, #16]	@ (8012128 <shci_register_io_bus+0x24>)
 8012116:	611a      	str	r2, [r3, #16]

  return;
 8012118:	bf00      	nop
}
 801211a:	370c      	adds	r7, #12
 801211c:	46bd      	mov	sp, r7
 801211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012122:	4770      	bx	lr
 8012124:	080122c1 	.word	0x080122c1
 8012128:	08012315 	.word	0x08012315

0801212c <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 801212c:	b580      	push	{r7, lr}
 801212e:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8012130:	f002 ffa4 	bl	801507c <HW_IPCC_Enable>

  return;
 8012134:	bf00      	nop
}
 8012136:	bd80      	pop	{r7, pc}

08012138 <TL_Init>:


void TL_Init( void )
{
 8012138:	b580      	push	{r7, lr}
 801213a:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 801213c:	4b10      	ldr	r3, [pc, #64]	@ (8012180 <TL_Init+0x48>)
 801213e:	4a11      	ldr	r2, [pc, #68]	@ (8012184 <TL_Init+0x4c>)
 8012140:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8012142:	4b0f      	ldr	r3, [pc, #60]	@ (8012180 <TL_Init+0x48>)
 8012144:	4a10      	ldr	r2, [pc, #64]	@ (8012188 <TL_Init+0x50>)
 8012146:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012148:	4b0d      	ldr	r3, [pc, #52]	@ (8012180 <TL_Init+0x48>)
 801214a:	4a10      	ldr	r2, [pc, #64]	@ (801218c <TL_Init+0x54>)
 801214c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801214e:	4b0c      	ldr	r3, [pc, #48]	@ (8012180 <TL_Init+0x48>)
 8012150:	4a0f      	ldr	r2, [pc, #60]	@ (8012190 <TL_Init+0x58>)
 8012152:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8012154:	4b0a      	ldr	r3, [pc, #40]	@ (8012180 <TL_Init+0x48>)
 8012156:	4a0f      	ldr	r2, [pc, #60]	@ (8012194 <TL_Init+0x5c>)
 8012158:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801215a:	4b09      	ldr	r3, [pc, #36]	@ (8012180 <TL_Init+0x48>)
 801215c:	4a0e      	ldr	r2, [pc, #56]	@ (8012198 <TL_Init+0x60>)
 801215e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012160:	4b07      	ldr	r3, [pc, #28]	@ (8012180 <TL_Init+0x48>)
 8012162:	4a0e      	ldr	r2, [pc, #56]	@ (801219c <TL_Init+0x64>)
 8012164:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8012166:	4b06      	ldr	r3, [pc, #24]	@ (8012180 <TL_Init+0x48>)
 8012168:	4a0d      	ldr	r2, [pc, #52]	@ (80121a0 <TL_Init+0x68>)
 801216a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 801216c:	4b04      	ldr	r3, [pc, #16]	@ (8012180 <TL_Init+0x48>)
 801216e:	4a0d      	ldr	r2, [pc, #52]	@ (80121a4 <TL_Init+0x6c>)
 8012170:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8012172:	4b03      	ldr	r3, [pc, #12]	@ (8012180 <TL_Init+0x48>)
 8012174:	4a0c      	ldr	r2, [pc, #48]	@ (80121a8 <TL_Init+0x70>)
 8012176:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8012178:	f002 ff94 	bl	80150a4 <HW_IPCC_Init>

  return;
 801217c:	bf00      	nop
}
 801217e:	bd80      	pop	{r7, pc}
 8012180:	20030000 	.word	0x20030000
 8012184:	20030028 	.word	0x20030028
 8012188:	20030048 	.word	0x20030048
 801218c:	20030058 	.word	0x20030058
 8012190:	20030068 	.word	0x20030068
 8012194:	20030070 	.word	0x20030070
 8012198:	20030078 	.word	0x20030078
 801219c:	20030080 	.word	0x20030080
 80121a0:	2003009c 	.word	0x2003009c
 80121a4:	200300a0 	.word	0x200300a0
 80121a8:	200300ac 	.word	0x200300ac

080121ac <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b084      	sub	sp, #16
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80121b8:	4811      	ldr	r0, [pc, #68]	@ (8012200 <TL_BLE_Init+0x54>)
 80121ba:	f000 faef 	bl	801279c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 80121be:	4b11      	ldr	r3, [pc, #68]	@ (8012204 <TL_BLE_Init+0x58>)
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	689a      	ldr	r2, [r3, #8]
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	68da      	ldr	r2, [r3, #12]
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80121d4:	68bb      	ldr	r3, [r7, #8]
 80121d6:	4a0c      	ldr	r2, [pc, #48]	@ (8012208 <TL_BLE_Init+0x5c>)
 80121d8:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	4a08      	ldr	r2, [pc, #32]	@ (8012200 <TL_BLE_Init+0x54>)
 80121de:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80121e0:	f002 ff76 	bl	80150d0 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	4a08      	ldr	r2, [pc, #32]	@ (801220c <TL_BLE_Init+0x60>)
 80121ea:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80121ec:	68fb      	ldr	r3, [r7, #12]
 80121ee:	685b      	ldr	r3, [r3, #4]
 80121f0:	4a07      	ldr	r2, [pc, #28]	@ (8012210 <TL_BLE_Init+0x64>)
 80121f2:	6013      	str	r3, [r2, #0]

  return 0;
 80121f4:	2300      	movs	r3, #0
}
 80121f6:	4618      	mov	r0, r3
 80121f8:	3710      	adds	r7, #16
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}
 80121fe:	bf00      	nop
 8012200:	200300c8 	.word	0x200300c8
 8012204:	20030000 	.word	0x20030000
 8012208:	20031f48 	.word	0x20031f48
 801220c:	2000199c 	.word	0x2000199c
 8012210:	200019a0 	.word	0x200019a0

08012214 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012214:	b580      	push	{r7, lr}
 8012216:	b082      	sub	sp, #8
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
 801221c:	460b      	mov	r3, r1
 801221e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8012220:	4b09      	ldr	r3, [pc, #36]	@ (8012248 <TL_BLE_SendCmd+0x34>)
 8012222:	685b      	ldr	r3, [r3, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	2201      	movs	r2, #1
 8012228:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801222a:	4b07      	ldr	r3, [pc, #28]	@ (8012248 <TL_BLE_SendCmd+0x34>)
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	4619      	mov	r1, r3
 8012232:	2001      	movs	r0, #1
 8012234:	f000 f96c 	bl	8012510 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8012238:	f002 ff54 	bl	80150e4 <HW_IPCC_BLE_SendCmd>

  return 0;
 801223c:	2300      	movs	r3, #0
}
 801223e:	4618      	mov	r0, r3
 8012240:	3708      	adds	r7, #8
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
 8012246:	bf00      	nop
 8012248:	20030000 	.word	0x20030000

0801224c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b082      	sub	sp, #8
 8012250:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8012252:	e01c      	b.n	801228e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8012254:	1d3b      	adds	r3, r7, #4
 8012256:	4619      	mov	r1, r3
 8012258:	4812      	ldr	r0, [pc, #72]	@ (80122a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801225a:	f000 fb3e 	bl	80128da <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	7a5b      	ldrb	r3, [r3, #9]
 8012262:	2b0f      	cmp	r3, #15
 8012264:	d003      	beq.n	801226e <HW_IPCC_BLE_RxEvtNot+0x22>
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	7a5b      	ldrb	r3, [r3, #9]
 801226a:	2b0e      	cmp	r3, #14
 801226c:	d105      	bne.n	801227a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	4619      	mov	r1, r3
 8012272:	2002      	movs	r0, #2
 8012274:	f000 f94c 	bl	8012510 <OutputDbgTrace>
 8012278:	e004      	b.n	8012284 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	4619      	mov	r1, r3
 801227e:	2003      	movs	r0, #3
 8012280:	f000 f946 	bl	8012510 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8012284:	4b08      	ldr	r3, [pc, #32]	@ (80122a8 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	687a      	ldr	r2, [r7, #4]
 801228a:	4610      	mov	r0, r2
 801228c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801228e:	4805      	ldr	r0, [pc, #20]	@ (80122a4 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8012290:	f000 fa94 	bl	80127bc <LST_is_empty>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d0dc      	beq.n	8012254 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801229a:	bf00      	nop
}
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	200300c8 	.word	0x200300c8
 80122a8:	2000199c 	.word	0x2000199c

080122ac <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80122b0:	4b02      	ldr	r3, [pc, #8]	@ (80122bc <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	4798      	blx	r3

  return;
 80122b6:	bf00      	nop
}
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	200019a0 	.word	0x200019a0

080122c0 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 80122c0:	b580      	push	{r7, lr}
 80122c2:	b084      	sub	sp, #16
 80122c4:	af00      	add	r7, sp, #0
 80122c6:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80122cc:	480d      	ldr	r0, [pc, #52]	@ (8012304 <TL_SYS_Init+0x44>)
 80122ce:	f000 fa65 	bl	801279c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80122d2:	4b0d      	ldr	r3, [pc, #52]	@ (8012308 <TL_SYS_Init+0x48>)
 80122d4:	68db      	ldr	r3, [r3, #12]
 80122d6:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	689a      	ldr	r2, [r3, #8]
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	4a08      	ldr	r2, [pc, #32]	@ (8012304 <TL_SYS_Init+0x44>)
 80122e4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80122e6:	f002 ff1f 	bl	8015128 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	4a07      	ldr	r2, [pc, #28]	@ (801230c <TL_SYS_Init+0x4c>)
 80122f0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	685b      	ldr	r3, [r3, #4]
 80122f6:	4a06      	ldr	r2, [pc, #24]	@ (8012310 <TL_SYS_Init+0x50>)
 80122f8:	6013      	str	r3, [r2, #0]

  return 0;
 80122fa:	2300      	movs	r3, #0
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	3710      	adds	r7, #16
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	200300d0 	.word	0x200300d0
 8012308:	20030000 	.word	0x20030000
 801230c:	200019a4 	.word	0x200019a4
 8012310:	200019a8 	.word	0x200019a8

08012314 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8012314:	b580      	push	{r7, lr}
 8012316:	b082      	sub	sp, #8
 8012318:	af00      	add	r7, sp, #0
 801231a:	6078      	str	r0, [r7, #4]
 801231c:	460b      	mov	r3, r1
 801231e:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012320:	4b09      	ldr	r3, [pc, #36]	@ (8012348 <TL_SYS_SendCmd+0x34>)
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	2210      	movs	r2, #16
 8012328:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801232a:	4b07      	ldr	r3, [pc, #28]	@ (8012348 <TL_SYS_SendCmd+0x34>)
 801232c:	68db      	ldr	r3, [r3, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	4619      	mov	r1, r3
 8012332:	2004      	movs	r0, #4
 8012334:	f000 f8ec 	bl	8012510 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8012338:	f002 ff00 	bl	801513c <HW_IPCC_SYS_SendCmd>

  return 0;
 801233c:	2300      	movs	r3, #0
}
 801233e:	4618      	mov	r0, r3
 8012340:	3708      	adds	r7, #8
 8012342:	46bd      	mov	sp, r7
 8012344:	bd80      	pop	{r7, pc}
 8012346:	bf00      	nop
 8012348:	20030000 	.word	0x20030000

0801234c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012350:	4b07      	ldr	r3, [pc, #28]	@ (8012370 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012352:	68db      	ldr	r3, [r3, #12]
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	4619      	mov	r1, r3
 8012358:	2005      	movs	r0, #5
 801235a:	f000 f8d9 	bl	8012510 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801235e:	4b05      	ldr	r3, [pc, #20]	@ (8012374 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	4a03      	ldr	r2, [pc, #12]	@ (8012370 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8012364:	68d2      	ldr	r2, [r2, #12]
 8012366:	6812      	ldr	r2, [r2, #0]
 8012368:	4610      	mov	r0, r2
 801236a:	4798      	blx	r3

  return;
 801236c:	bf00      	nop
}
 801236e:	bd80      	pop	{r7, pc}
 8012370:	20030000 	.word	0x20030000
 8012374:	200019a4 	.word	0x200019a4

08012378 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b082      	sub	sp, #8
 801237c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801237e:	e00e      	b.n	801239e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8012380:	1d3b      	adds	r3, r7, #4
 8012382:	4619      	mov	r1, r3
 8012384:	480b      	ldr	r0, [pc, #44]	@ (80123b4 <HW_IPCC_SYS_EvtNot+0x3c>)
 8012386:	f000 faa8 	bl	80128da <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	4619      	mov	r1, r3
 801238e:	2006      	movs	r0, #6
 8012390:	f000 f8be 	bl	8012510 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8012394:	4b08      	ldr	r3, [pc, #32]	@ (80123b8 <HW_IPCC_SYS_EvtNot+0x40>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	687a      	ldr	r2, [r7, #4]
 801239a:	4610      	mov	r0, r2
 801239c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801239e:	4805      	ldr	r0, [pc, #20]	@ (80123b4 <HW_IPCC_SYS_EvtNot+0x3c>)
 80123a0:	f000 fa0c 	bl	80127bc <LST_is_empty>
 80123a4:	4603      	mov	r3, r0
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d0ea      	beq.n	8012380 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80123aa:	bf00      	nop
}
 80123ac:	3708      	adds	r7, #8
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	200300d0 	.word	0x200300d0
 80123b8:	200019a8 	.word	0x200019a8

080123bc <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b082      	sub	sp, #8
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80123c4:	4817      	ldr	r0, [pc, #92]	@ (8012424 <TL_MM_Init+0x68>)
 80123c6:	f000 f9e9 	bl	801279c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80123ca:	4817      	ldr	r0, [pc, #92]	@ (8012428 <TL_MM_Init+0x6c>)
 80123cc:	f000 f9e6 	bl	801279c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80123d0:	4b16      	ldr	r3, [pc, #88]	@ (801242c <TL_MM_Init+0x70>)
 80123d2:	691b      	ldr	r3, [r3, #16]
 80123d4:	4a16      	ldr	r2, [pc, #88]	@ (8012430 <TL_MM_Init+0x74>)
 80123d6:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80123d8:	4b15      	ldr	r3, [pc, #84]	@ (8012430 <TL_MM_Init+0x74>)
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	687a      	ldr	r2, [r7, #4]
 80123de:	6892      	ldr	r2, [r2, #8]
 80123e0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80123e2:	4b13      	ldr	r3, [pc, #76]	@ (8012430 <TL_MM_Init+0x74>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	68d2      	ldr	r2, [r2, #12]
 80123ea:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80123ec:	4b10      	ldr	r3, [pc, #64]	@ (8012430 <TL_MM_Init+0x74>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4a0c      	ldr	r2, [pc, #48]	@ (8012424 <TL_MM_Init+0x68>)
 80123f2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80123f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012430 <TL_MM_Init+0x74>)
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	6812      	ldr	r2, [r2, #0]
 80123fc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80123fe:	4b0c      	ldr	r3, [pc, #48]	@ (8012430 <TL_MM_Init+0x74>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	687a      	ldr	r2, [r7, #4]
 8012404:	6852      	ldr	r2, [r2, #4]
 8012406:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8012408:	4b09      	ldr	r3, [pc, #36]	@ (8012430 <TL_MM_Init+0x74>)
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	687a      	ldr	r2, [r7, #4]
 801240e:	6912      	ldr	r2, [r2, #16]
 8012410:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8012412:	4b07      	ldr	r3, [pc, #28]	@ (8012430 <TL_MM_Init+0x74>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	687a      	ldr	r2, [r7, #4]
 8012418:	6952      	ldr	r2, [r2, #20]
 801241a:	619a      	str	r2, [r3, #24]

  return;
 801241c:	bf00      	nop
}
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}
 8012424:	200300b8 	.word	0x200300b8
 8012428:	20001994 	.word	0x20001994
 801242c:	20030000 	.word	0x20030000
 8012430:	200019ac 	.word	0x200019ac

08012434 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
 801243a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 801243c:	6879      	ldr	r1, [r7, #4]
 801243e:	4807      	ldr	r0, [pc, #28]	@ (801245c <TL_MM_EvtDone+0x28>)
 8012440:	f000 fa04 	bl	801284c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8012444:	6879      	ldr	r1, [r7, #4]
 8012446:	2000      	movs	r0, #0
 8012448:	f000 f862 	bl	8012510 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 801244c:	4804      	ldr	r0, [pc, #16]	@ (8012460 <TL_MM_EvtDone+0x2c>)
 801244e:	f002 fe9b 	bl	8015188 <HW_IPCC_MM_SendFreeBuf>

  return;
 8012452:	bf00      	nop
}
 8012454:	3708      	adds	r7, #8
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}
 801245a:	bf00      	nop
 801245c:	20001994 	.word	0x20001994
 8012460:	08012465 	.word	0x08012465

08012464 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	b082      	sub	sp, #8
 8012468:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801246a:	e00c      	b.n	8012486 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 801246c:	1d3b      	adds	r3, r7, #4
 801246e:	4619      	mov	r1, r3
 8012470:	480a      	ldr	r0, [pc, #40]	@ (801249c <SendFreeBuf+0x38>)
 8012472:	f000 fa32 	bl	80128da <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8012476:	4b0a      	ldr	r3, [pc, #40]	@ (80124a0 <SendFreeBuf+0x3c>)
 8012478:	691b      	ldr	r3, [r3, #16]
 801247a:	691b      	ldr	r3, [r3, #16]
 801247c:	687a      	ldr	r2, [r7, #4]
 801247e:	4611      	mov	r1, r2
 8012480:	4618      	mov	r0, r3
 8012482:	f000 f9e3 	bl	801284c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012486:	4805      	ldr	r0, [pc, #20]	@ (801249c <SendFreeBuf+0x38>)
 8012488:	f000 f998 	bl	80127bc <LST_is_empty>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d0ec      	beq.n	801246c <SendFreeBuf+0x8>
  }

  return;
 8012492:	bf00      	nop
}
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	20001994 	.word	0x20001994
 80124a0:	20030000 	.word	0x20030000

080124a4 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80124a8:	4805      	ldr	r0, [pc, #20]	@ (80124c0 <TL_TRACES_Init+0x1c>)
 80124aa:	f000 f977 	bl	801279c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80124ae:	4b05      	ldr	r3, [pc, #20]	@ (80124c4 <TL_TRACES_Init+0x20>)
 80124b0:	695b      	ldr	r3, [r3, #20]
 80124b2:	4a03      	ldr	r2, [pc, #12]	@ (80124c0 <TL_TRACES_Init+0x1c>)
 80124b4:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80124b6:	f002 fe9d 	bl	80151f4 <HW_IPCC_TRACES_Init>

  return;
 80124ba:	bf00      	nop
}
 80124bc:	bd80      	pop	{r7, pc}
 80124be:	bf00      	nop
 80124c0:	200300c0 	.word	0x200300c0
 80124c4:	20030000 	.word	0x20030000

080124c8 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80124ce:	e008      	b.n	80124e2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80124d0:	1d3b      	adds	r3, r7, #4
 80124d2:	4619      	mov	r1, r3
 80124d4:	4808      	ldr	r0, [pc, #32]	@ (80124f8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80124d6:	f000 fa00 	bl	80128da <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	f000 f80d 	bl	80124fc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80124e2:	4805      	ldr	r0, [pc, #20]	@ (80124f8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80124e4:	f000 f96a 	bl	80127bc <LST_is_empty>
 80124e8:	4603      	mov	r3, r0
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d0f0      	beq.n	80124d0 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80124ee:	bf00      	nop
}
 80124f0:	3708      	adds	r7, #8
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	200300c0 	.word	0x200300c0

080124fc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8012504:	bf00      	nop
 8012506:	370c      	adds	r7, #12
 8012508:	46bd      	mov	sp, r7
 801250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250e:	4770      	bx	lr

08012510 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8012510:	b480      	push	{r7}
 8012512:	b085      	sub	sp, #20
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	6039      	str	r1, [r7, #0]
 801251a:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 801251c:	79fb      	ldrb	r3, [r7, #7]
 801251e:	2b06      	cmp	r3, #6
 8012520:	d845      	bhi.n	80125ae <OutputDbgTrace+0x9e>
 8012522:	a201      	add	r2, pc, #4	@ (adr r2, 8012528 <OutputDbgTrace+0x18>)
 8012524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012528:	08012545 	.word	0x08012545
 801252c:	08012569 	.word	0x08012569
 8012530:	0801256f 	.word	0x0801256f
 8012534:	08012583 	.word	0x08012583
 8012538:	0801258f 	.word	0x0801258f
 801253c:	08012595 	.word	0x08012595
 8012540:	080125a3 	.word	0x080125a3
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	7a5b      	ldrb	r3, [r3, #9]
 801254c:	2bff      	cmp	r3, #255	@ 0xff
 801254e:	d005      	beq.n	801255c <OutputDbgTrace+0x4c>
 8012550:	2bff      	cmp	r3, #255	@ 0xff
 8012552:	dc05      	bgt.n	8012560 <OutputDbgTrace+0x50>
 8012554:	2b0e      	cmp	r3, #14
 8012556:	d005      	beq.n	8012564 <OutputDbgTrace+0x54>
 8012558:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801255a:	e001      	b.n	8012560 <OutputDbgTrace+0x50>
          break;
 801255c:	bf00      	nop
 801255e:	e027      	b.n	80125b0 <OutputDbgTrace+0xa0>
          break;
 8012560:	bf00      	nop
 8012562:	e025      	b.n	80125b0 <OutputDbgTrace+0xa0>
          break;
 8012564:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8012566:	e023      	b.n	80125b0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801256c:	e020      	b.n	80125b0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7a5b      	ldrb	r3, [r3, #9]
 8012576:	2b0e      	cmp	r3, #14
 8012578:	d001      	beq.n	801257e <OutputDbgTrace+0x6e>
 801257a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801257c:	e000      	b.n	8012580 <OutputDbgTrace+0x70>
          break;
 801257e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012580:	e016      	b.n	80125b0 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	7a5b      	ldrb	r3, [r3, #9]
 801258a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801258c:	e010      	b.n	80125b0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8012592:	e00d      	b.n	80125b0 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	7a5b      	ldrb	r3, [r3, #9]
 801259c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801259e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80125a0:	e006      	b.n	80125b0 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	7a5b      	ldrb	r3, [r3, #9]
 80125aa:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80125ac:	e000      	b.n	80125b0 <OutputDbgTrace+0xa0>

    default:
      break;
 80125ae:	bf00      	nop
  }

  return;
 80125b0:	bf00      	nop
}
 80125b2:	3714      	adds	r7, #20
 80125b4:	46bd      	mov	sp, r7
 80125b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ba:	4770      	bx	lr

080125bc <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 80125bc:	b580      	push	{r7, lr}
 80125be:	b084      	sub	sp, #16
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 80125c8:	215c      	movs	r1, #92	@ 0x5c
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f004 f856 	bl	801667c <strrchr>
 80125d0:	4603      	mov	r3, r0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d007      	beq.n	80125e6 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80125d6:	215c      	movs	r1, #92	@ 0x5c
 80125d8:	6878      	ldr	r0, [r7, #4]
 80125da:	f004 f84f 	bl	801667c <strrchr>
 80125de:	4603      	mov	r3, r0
 80125e0:	3301      	adds	r3, #1
 80125e2:	60fb      	str	r3, [r7, #12]
 80125e4:	e00d      	b.n	8012602 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80125e6:	212f      	movs	r1, #47	@ 0x2f
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f004 f847 	bl	801667c <strrchr>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d006      	beq.n	8012602 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80125f4:	212f      	movs	r1, #47	@ 0x2f
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f004 f840 	bl	801667c <strrchr>
 80125fc:	4603      	mov	r3, r0
 80125fe:	3301      	adds	r3, #1
 8012600:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012602:	68fb      	ldr	r3, [r7, #12]
}
 8012604:	4618      	mov	r0, r3
 8012606:	3710      	adds	r7, #16
 8012608:	46bd      	mov	sp, r7
 801260a:	bd80      	pop	{r7, pc}

0801260c <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b086      	sub	sp, #24
 8012610:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012612:	f3ef 8310 	mrs	r3, PRIMASK
 8012616:	60fb      	str	r3, [r7, #12]
  return(result);
 8012618:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 801261a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801261c:	b672      	cpsid	i
}
 801261e:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8012620:	1cbb      	adds	r3, r7, #2
 8012622:	4619      	mov	r1, r3
 8012624:	4812      	ldr	r0, [pc, #72]	@ (8012670 <DbgTrace_TxCpltCallback+0x64>)
 8012626:	f000 fb9d 	bl	8012d64 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 801262a:	1cbb      	adds	r3, r7, #2
 801262c:	4619      	mov	r1, r3
 801262e:	4810      	ldr	r0, [pc, #64]	@ (8012670 <DbgTrace_TxCpltCallback+0x64>)
 8012630:	f000 fc87 	bl	8012f42 <CircularQueue_Sense>
 8012634:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d00c      	beq.n	8012656 <DbgTrace_TxCpltCallback+0x4a>
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	f383 8810 	msr	PRIMASK, r3
}
 8012646:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8012648:	887b      	ldrh	r3, [r7, #2]
 801264a:	4a0a      	ldr	r2, [pc, #40]	@ (8012674 <DbgTrace_TxCpltCallback+0x68>)
 801264c:	4619      	mov	r1, r3
 801264e:	6938      	ldr	r0, [r7, #16]
 8012650:	f7ef fdd0 	bl	80021f4 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8012654:	e008      	b.n	8012668 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8012656:	4b08      	ldr	r3, [pc, #32]	@ (8012678 <DbgTrace_TxCpltCallback+0x6c>)
 8012658:	2201      	movs	r2, #1
 801265a:	701a      	strb	r2, [r3, #0]
 801265c:	697b      	ldr	r3, [r7, #20]
 801265e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f383 8810 	msr	PRIMASK, r3
}
 8012666:	bf00      	nop
}
 8012668:	bf00      	nop
 801266a:	3718      	adds	r7, #24
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	200019b0 	.word	0x200019b0
 8012674:	0801260d 	.word	0x0801260d
 8012678:	200000a2 	.word	0x200000a2

0801267c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	60f8      	str	r0, [r7, #12]
 8012684:	60b9      	str	r1, [r7, #8]
 8012686:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8012688:	687a      	ldr	r2, [r7, #4]
 801268a:	68b9      	ldr	r1, [r7, #8]
 801268c:	68f8      	ldr	r0, [r7, #12]
 801268e:	f000 f805 	bl	801269c <DbgTraceWrite>
 8012692:	4603      	mov	r3, r0
}
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 801269c:	b580      	push	{r7, lr}
 801269e:	b08a      	sub	sp, #40	@ 0x28
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	60f8      	str	r0, [r7, #12]
 80126a4:	60b9      	str	r1, [r7, #8]
 80126a6:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80126a8:	2300      	movs	r3, #0
 80126aa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126ac:	f3ef 8310 	mrs	r3, PRIMASK
 80126b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80126b2:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80126b4:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126bc:	d102      	bne.n	80126c4 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80126be:	2300      	movs	r3, #0
 80126c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80126c2:	e037      	b.n	8012734 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	2b01      	cmp	r3, #1
 80126c8:	d006      	beq.n	80126d8 <DbgTraceWrite+0x3c>
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d003      	beq.n	80126d8 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80126d0:	f04f 33ff 	mov.w	r3, #4294967295
 80126d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80126d6:	e02d      	b.n	8012734 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d02a      	beq.n	8012734 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80126e2:	b672      	cpsid	i
}
 80126e4:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	b29a      	uxth	r2, r3
 80126ea:	2301      	movs	r3, #1
 80126ec:	68b9      	ldr	r1, [r7, #8]
 80126ee:	4814      	ldr	r0, [pc, #80]	@ (8012740 <DbgTraceWrite+0xa4>)
 80126f0:	f000 f912 	bl	8012918 <CircularQueue_Add>
 80126f4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80126f6:	69fb      	ldr	r3, [r7, #28]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d015      	beq.n	8012728 <DbgTraceWrite+0x8c>
 80126fc:	4b11      	ldr	r3, [pc, #68]	@ (8012744 <DbgTraceWrite+0xa8>)
 80126fe:	781b      	ldrb	r3, [r3, #0]
 8012700:	b2db      	uxtb	r3, r3
 8012702:	2b00      	cmp	r3, #0
 8012704:	d010      	beq.n	8012728 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8012706:	4b0f      	ldr	r3, [pc, #60]	@ (8012744 <DbgTraceWrite+0xa8>)
 8012708:	2200      	movs	r2, #0
 801270a:	701a      	strb	r2, [r3, #0]
 801270c:	6a3b      	ldr	r3, [r7, #32]
 801270e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	f383 8810 	msr	PRIMASK, r3
}
 8012716:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	b29b      	uxth	r3, r3
 801271c:	4a0a      	ldr	r2, [pc, #40]	@ (8012748 <DbgTraceWrite+0xac>)
 801271e:	4619      	mov	r1, r3
 8012720:	69f8      	ldr	r0, [r7, #28]
 8012722:	f7ef fd67 	bl	80021f4 <DbgOutputTraces>
 8012726:	e005      	b.n	8012734 <DbgTraceWrite+0x98>
 8012728:	6a3b      	ldr	r3, [r7, #32]
 801272a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801272c:	693b      	ldr	r3, [r7, #16]
 801272e:	f383 8810 	msr	PRIMASK, r3
}
 8012732:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8012734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012736:	4618      	mov	r0, r3
 8012738:	3728      	adds	r7, #40	@ 0x28
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}
 801273e:	bf00      	nop
 8012740:	200019b0 	.word	0x200019b0
 8012744:	200000a2 	.word	0x200000a2
 8012748:	0801260d 	.word	0x0801260d

0801274c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 801274c:	b480      	push	{r7}
 801274e:	b085      	sub	sp, #20
 8012750:	af00      	add	r7, sp, #0
 8012752:	4603      	mov	r3, r0
 8012754:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8012756:	4b0f      	ldr	r3, [pc, #60]	@ (8012794 <OTP_Read+0x48>)
 8012758:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 801275a:	e002      	b.n	8012762 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	3b08      	subs	r3, #8
 8012760:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	3307      	adds	r3, #7
 8012766:	781b      	ldrb	r3, [r3, #0]
 8012768:	79fa      	ldrb	r2, [r7, #7]
 801276a:	429a      	cmp	r2, r3
 801276c:	d003      	beq.n	8012776 <OTP_Read+0x2a>
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	4a09      	ldr	r2, [pc, #36]	@ (8012798 <OTP_Read+0x4c>)
 8012772:	4293      	cmp	r3, r2
 8012774:	d1f2      	bne.n	801275c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3307      	adds	r3, #7
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	79fa      	ldrb	r2, [r7, #7]
 801277e:	429a      	cmp	r2, r3
 8012780:	d001      	beq.n	8012786 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8012782:	2300      	movs	r3, #0
 8012784:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8012786:	68fb      	ldr	r3, [r7, #12]
}
 8012788:	4618      	mov	r0, r3
 801278a:	3714      	adds	r7, #20
 801278c:	46bd      	mov	sp, r7
 801278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012792:	4770      	bx	lr
 8012794:	1fff73f8 	.word	0x1fff73f8
 8012798:	1fff7000 	.word	0x1fff7000

0801279c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 801279c:	b480      	push	{r7}
 801279e:	b083      	sub	sp, #12
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	687a      	ldr	r2, [r7, #4]
 80127a8:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	605a      	str	r2, [r3, #4]
}
 80127b0:	bf00      	nop
 80127b2:	370c      	adds	r7, #12
 80127b4:	46bd      	mov	sp, r7
 80127b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ba:	4770      	bx	lr

080127bc <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80127bc:	b480      	push	{r7}
 80127be:	b087      	sub	sp, #28
 80127c0:	af00      	add	r7, sp, #0
 80127c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127c4:	f3ef 8310 	mrs	r3, PRIMASK
 80127c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80127ca:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80127cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80127ce:	b672      	cpsid	i
}
 80127d0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d102      	bne.n	80127e2 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 80127dc:	2301      	movs	r3, #1
 80127de:	75fb      	strb	r3, [r7, #23]
 80127e0:	e001      	b.n	80127e6 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 80127e2:	2300      	movs	r3, #0
 80127e4:	75fb      	strb	r3, [r7, #23]
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	f383 8810 	msr	PRIMASK, r3
}
 80127f0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80127f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	371c      	adds	r7, #28
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr

08012800 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012800:	b480      	push	{r7}
 8012802:	b087      	sub	sp, #28
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801280a:	f3ef 8310 	mrs	r3, PRIMASK
 801280e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012810:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012812:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012814:	b672      	cpsid	i
}
 8012816:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	681a      	ldr	r2, [r3, #0]
 801281c:	683b      	ldr	r3, [r7, #0]
 801281e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	687a      	ldr	r2, [r7, #4]
 8012824:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	683a      	ldr	r2, [r7, #0]
 801282a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	683a      	ldr	r2, [r7, #0]
 8012832:	605a      	str	r2, [r3, #4]
 8012834:	697b      	ldr	r3, [r7, #20]
 8012836:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012838:	693b      	ldr	r3, [r7, #16]
 801283a:	f383 8810 	msr	PRIMASK, r3
}
 801283e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012840:	bf00      	nop
 8012842:	371c      	adds	r7, #28
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr

0801284c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 801284c:	b480      	push	{r7}
 801284e:	b087      	sub	sp, #28
 8012850:	af00      	add	r7, sp, #0
 8012852:	6078      	str	r0, [r7, #4]
 8012854:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012856:	f3ef 8310 	mrs	r3, PRIMASK
 801285a:	60fb      	str	r3, [r7, #12]
  return(result);
 801285c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801285e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012860:	b672      	cpsid	i
}
 8012862:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012864:	683b      	ldr	r3, [r7, #0]
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	685a      	ldr	r2, [r3, #4]
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	683a      	ldr	r2, [r7, #0]
 8012876:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012878:	683b      	ldr	r3, [r7, #0]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	683a      	ldr	r2, [r7, #0]
 801287e:	601a      	str	r2, [r3, #0]
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012884:	693b      	ldr	r3, [r7, #16]
 8012886:	f383 8810 	msr	PRIMASK, r3
}
 801288a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801288c:	bf00      	nop
 801288e:	371c      	adds	r7, #28
 8012890:	46bd      	mov	sp, r7
 8012892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012896:	4770      	bx	lr

08012898 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8012898:	b480      	push	{r7}
 801289a:	b087      	sub	sp, #28
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128a0:	f3ef 8310 	mrs	r3, PRIMASK
 80128a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80128a6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80128a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128aa:	b672      	cpsid	i
}
 80128ac:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	685b      	ldr	r3, [r3, #4]
 80128b2:	687a      	ldr	r2, [r7, #4]
 80128b4:	6812      	ldr	r2, [r2, #0]
 80128b6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	687a      	ldr	r2, [r7, #4]
 80128be:	6852      	ldr	r2, [r2, #4]
 80128c0:	605a      	str	r2, [r3, #4]
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	f383 8810 	msr	PRIMASK, r3
}
 80128cc:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80128ce:	bf00      	nop
 80128d0:	371c      	adds	r7, #28
 80128d2:	46bd      	mov	sp, r7
 80128d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d8:	4770      	bx	lr

080128da <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80128da:	b580      	push	{r7, lr}
 80128dc:	b086      	sub	sp, #24
 80128de:	af00      	add	r7, sp, #0
 80128e0:	6078      	str	r0, [r7, #4]
 80128e2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128e4:	f3ef 8310 	mrs	r3, PRIMASK
 80128e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80128ea:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80128ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128ee:	b672      	cpsid	i
}
 80128f0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	681a      	ldr	r2, [r3, #0]
 80128f6:	683b      	ldr	r3, [r7, #0]
 80128f8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4618      	mov	r0, r3
 8012900:	f7ff ffca 	bl	8012898 <LST_remove_node>
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012908:	693b      	ldr	r3, [r7, #16]
 801290a:	f383 8810 	msr	PRIMASK, r3
}
 801290e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012910:	bf00      	nop
 8012912:	3718      	adds	r7, #24
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}

08012918 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b08e      	sub	sp, #56	@ 0x38
 801291c:	af00      	add	r7, sp, #0
 801291e:	60f8      	str	r0, [r7, #12]
 8012920:	60b9      	str	r1, [r7, #8]
 8012922:	603b      	str	r3, [r7, #0]
 8012924:	4613      	mov	r3, r2
 8012926:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8012928:	2300      	movs	r3, #0
 801292a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 801292c:	2300      	movs	r3, #0
 801292e:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8012930:	2300      	movs	r3, #0
 8012932:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8012934:	2300      	movs	r3, #0
 8012936:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012938:	2300      	movs	r3, #0
 801293a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 801293c:	2300      	movs	r3, #0
 801293e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8012940:	2300      	movs	r3, #0
 8012942:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	891b      	ldrh	r3, [r3, #8]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d101      	bne.n	8012950 <CircularQueue_Add+0x38>
 801294c:	2302      	movs	r3, #2
 801294e:	e000      	b.n	8012952 <CircularQueue_Add+0x3a>
 8012950:	2300      	movs	r3, #0
 8012952:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	695b      	ldr	r3, [r3, #20]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d029      	beq.n	80129b0 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	891b      	ldrh	r3, [r3, #8]
 8012960:	2b00      	cmp	r3, #0
 8012962:	d122      	bne.n	80129aa <CircularQueue_Add+0x92>
 8012964:	68fb      	ldr	r3, [r7, #12]
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	691b      	ldr	r3, [r3, #16]
 801296c:	4413      	add	r3, r2
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	4618      	mov	r0, r3
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	681a      	ldr	r2, [r3, #0]
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	691b      	ldr	r3, [r3, #16]
 801297a:	1c59      	adds	r1, r3, #1
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	685b      	ldr	r3, [r3, #4]
 8012980:	4299      	cmp	r1, r3
 8012982:	d306      	bcc.n	8012992 <CircularQueue_Add+0x7a>
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	6919      	ldr	r1, [r3, #16]
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	685b      	ldr	r3, [r3, #4]
 801298c:	1acb      	subs	r3, r1, r3
 801298e:	3301      	adds	r3, #1
 8012990:	e002      	b.n	8012998 <CircularQueue_Add+0x80>
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	691b      	ldr	r3, [r3, #16]
 8012996:	3301      	adds	r3, #1
 8012998:	4413      	add	r3, r2
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	021b      	lsls	r3, r3, #8
 801299e:	b29b      	uxth	r3, r3
 80129a0:	4403      	add	r3, r0
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	3302      	adds	r3, #2
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	e001      	b.n	80129ae <CircularQueue_Add+0x96>
 80129aa:	68fb      	ldr	r3, [r7, #12]
 80129ac:	891b      	ldrh	r3, [r3, #8]
 80129ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	891b      	ldrh	r3, [r3, #8]
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d002      	beq.n	80129be <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	891b      	ldrh	r3, [r3, #8]
 80129bc:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	691a      	ldr	r2, [r3, #16]
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	68db      	ldr	r3, [r3, #12]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d307      	bcc.n	80129da <CircularQueue_Add+0xc2>
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	685a      	ldr	r2, [r3, #4]
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	6919      	ldr	r1, [r3, #16]
 80129d2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80129d4:	440b      	add	r3, r1
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	e000      	b.n	80129dc <CircularQueue_Add+0xc4>
 80129da:	2300      	movs	r3, #0
 80129dc:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 80129de:	88fa      	ldrh	r2, [r7, #6]
 80129e0:	7ffb      	ldrb	r3, [r7, #31]
 80129e2:	4413      	add	r3, r2
 80129e4:	461a      	mov	r2, r3
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	fb02 f303 	mul.w	r3, r2, r3
 80129ec:	69ba      	ldr	r2, [r7, #24]
 80129ee:	429a      	cmp	r2, r3
 80129f0:	d80b      	bhi.n	8012a0a <CircularQueue_Add+0xf2>
 80129f2:	88fa      	ldrh	r2, [r7, #6]
 80129f4:	7ffb      	ldrb	r3, [r7, #31]
 80129f6:	4413      	add	r3, r2
 80129f8:	461a      	mov	r2, r3
 80129fa:	69bb      	ldr	r3, [r7, #24]
 80129fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012a00:	fb01 f202 	mul.w	r2, r1, r2
 8012a04:	1a9b      	subs	r3, r3, r2
 8012a06:	b2db      	uxtb	r3, r3
 8012a08:	e000      	b.n	8012a0c <CircularQueue_Add+0xf4>
 8012a0a:	2300      	movs	r3, #0
 8012a0c:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012a0e:	7dfa      	ldrb	r2, [r7, #23]
 8012a10:	7ffb      	ldrb	r3, [r7, #31]
 8012a12:	429a      	cmp	r2, r3
 8012a14:	bf8c      	ite	hi
 8012a16:	2301      	movhi	r3, #1
 8012a18:	2300      	movls	r3, #0
 8012a1a:	b2db      	uxtb	r3, r3
 8012a1c:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012a1e:	7fbb      	ldrb	r3, [r7, #30]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d008      	beq.n	8012a36 <CircularQueue_Add+0x11e>
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	7f1b      	ldrb	r3, [r3, #28]
 8012a28:	f003 0301 	and.w	r3, r3, #1
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d002      	beq.n	8012a36 <CircularQueue_Add+0x11e>
 8012a30:	7dfb      	ldrb	r3, [r7, #23]
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	e000      	b.n	8012a38 <CircularQueue_Add+0x120>
 8012a36:	8bbb      	ldrh	r3, [r7, #28]
 8012a38:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8012a3a:	7fbb      	ldrb	r3, [r7, #30]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d008      	beq.n	8012a52 <CircularQueue_Add+0x13a>
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	7f1b      	ldrb	r3, [r3, #28]
 8012a44:	f003 0302 	and.w	r3, r3, #2
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d002      	beq.n	8012a52 <CircularQueue_Add+0x13a>
 8012a4c:	7ffb      	ldrb	r3, [r7, #31]
 8012a4e:	b29b      	uxth	r3, r3
 8012a50:	e000      	b.n	8012a54 <CircularQueue_Add+0x13c>
 8012a52:	8bbb      	ldrh	r3, [r7, #28]
 8012a54:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8012a56:	88fb      	ldrh	r3, [r7, #6]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 817e 	beq.w	8012d5a <CircularQueue_Add+0x442>
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	695a      	ldr	r2, [r3, #20]
 8012a62:	88f9      	ldrh	r1, [r7, #6]
 8012a64:	7ffb      	ldrb	r3, [r7, #31]
 8012a66:	440b      	add	r3, r1
 8012a68:	4619      	mov	r1, r3
 8012a6a:	683b      	ldr	r3, [r7, #0]
 8012a6c:	fb01 f303 	mul.w	r3, r1, r3
 8012a70:	441a      	add	r2, r3
 8012a72:	8bbb      	ldrh	r3, [r7, #28]
 8012a74:	441a      	add	r2, r3
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	685b      	ldr	r3, [r3, #4]
 8012a7a:	429a      	cmp	r2, r3
 8012a7c:	f200 816d 	bhi.w	8012d5a <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8012a80:	2300      	movs	r3, #0
 8012a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012a84:	e14a      	b.n	8012d1c <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	691a      	ldr	r2, [r3, #16]
 8012a8a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012a8c:	441a      	add	r2, r3
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	d307      	bcc.n	8012aa6 <CircularQueue_Add+0x18e>
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	691a      	ldr	r2, [r3, #16]
 8012a9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012a9c:	441a      	add	r2, r3
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	685b      	ldr	r3, [r3, #4]
 8012aa2:	1ad3      	subs	r3, r2, r3
 8012aa4:	e003      	b.n	8012aae <CircularQueue_Add+0x196>
 8012aa6:	68fb      	ldr	r3, [r7, #12]
 8012aa8:	691a      	ldr	r2, [r3, #16]
 8012aaa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012aac:	4413      	add	r3, r2
 8012aae:	68fa      	ldr	r2, [r7, #12]
 8012ab0:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	691b      	ldr	r3, [r3, #16]
 8012ab6:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	891b      	ldrh	r3, [r3, #8]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d130      	bne.n	8012b22 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012ac0:	68fb      	ldr	r3, [r7, #12]
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ac6:	1c59      	adds	r1, r3, #1
 8012ac8:	6339      	str	r1, [r7, #48]	@ 0x30
 8012aca:	4413      	add	r3, r2
 8012acc:	88fa      	ldrh	r2, [r7, #6]
 8012ace:	b2d2      	uxtb	r2, r2
 8012ad0:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	685b      	ldr	r3, [r3, #4]
 8012ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ad8:	429a      	cmp	r2, r3
 8012ada:	d304      	bcc.n	8012ae6 <CircularQueue_Add+0x1ce>
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	685b      	ldr	r3, [r3, #4]
 8012ae0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012ae2:	1ad3      	subs	r3, r2, r3
 8012ae4:	e000      	b.n	8012ae8 <CircularQueue_Add+0x1d0>
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ae8:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012aea:	88fb      	ldrh	r3, [r7, #6]
 8012aec:	0a1b      	lsrs	r3, r3, #8
 8012aee:	b298      	uxth	r0, r3
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	681a      	ldr	r2, [r3, #0]
 8012af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012af6:	1c59      	adds	r1, r3, #1
 8012af8:	6339      	str	r1, [r7, #48]	@ 0x30
 8012afa:	4413      	add	r3, r2
 8012afc:	b2c2      	uxtb	r2, r0
 8012afe:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	685b      	ldr	r3, [r3, #4]
 8012b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b06:	429a      	cmp	r2, r3
 8012b08:	d304      	bcc.n	8012b14 <CircularQueue_Add+0x1fc>
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012b10:	1ad3      	subs	r3, r2, r3
 8012b12:	e000      	b.n	8012b16 <CircularQueue_Add+0x1fe>
 8012b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b16:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	695b      	ldr	r3, [r3, #20]
 8012b1c:	1c9a      	adds	r2, r3, #2
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012b22:	88fa      	ldrh	r2, [r7, #6]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	6859      	ldr	r1, [r3, #4]
 8012b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b2a:	1acb      	subs	r3, r1, r3
 8012b2c:	4293      	cmp	r3, r2
 8012b2e:	bf28      	it	cs
 8012b30:	4613      	movcs	r3, r2
 8012b32:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8012b34:	88fb      	ldrh	r3, [r7, #6]
 8012b36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	d007      	beq.n	8012b4c <CircularQueue_Add+0x234>
 8012b3c:	88fb      	ldrh	r3, [r7, #6]
 8012b3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b40:	429a      	cmp	r2, r3
 8012b42:	d225      	bcs.n	8012b90 <CircularQueue_Add+0x278>
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	7f1b      	ldrb	r3, [r3, #28]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d121      	bne.n	8012b90 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012b52:	18d0      	adds	r0, r2, r3
 8012b54:	88fb      	ldrh	r3, [r7, #6]
 8012b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012b58:	fb02 f303 	mul.w	r3, r2, r3
 8012b5c:	68ba      	ldr	r2, [r7, #8]
 8012b5e:	4413      	add	r3, r2
 8012b60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012b62:	4619      	mov	r1, r3
 8012b64:	f003 fe13 	bl	801678e <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	695a      	ldr	r2, [r3, #20]
 8012b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b6e:	441a      	add	r2, r3
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8012b74:	2300      	movs	r3, #0
 8012b76:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8012b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b7a:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012b7c:	88fa      	ldrh	r2, [r7, #6]
 8012b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b80:	1ad3      	subs	r3, r2, r3
 8012b82:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8012b84:	7ffb      	ldrb	r3, [r7, #31]
 8012b86:	b29a      	uxth	r2, r3
 8012b88:	88fb      	ldrh	r3, [r7, #6]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012b8e:	e0a4      	b.n	8012cda <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	f000 80a1 	beq.w	8012cda <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	7f1b      	ldrb	r3, [r3, #28]
 8012b9c:	f003 0301 	and.w	r3, r3, #1
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d03a      	beq.n	8012c1a <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	891b      	ldrh	r3, [r3, #8]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d10d      	bne.n	8012bc8 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	681a      	ldr	r2, [r3, #0]
 8012bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bb2:	3b02      	subs	r3, #2
 8012bb4:	4413      	add	r3, r2
 8012bb6:	22ff      	movs	r2, #255	@ 0xff
 8012bb8:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	681a      	ldr	r2, [r3, #0]
 8012bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bc0:	3b01      	subs	r3, #1
 8012bc2:	4413      	add	r3, r2
 8012bc4:	22ff      	movs	r2, #255	@ 0xff
 8012bc6:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	695a      	ldr	r2, [r3, #20]
 8012bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bce:	441a      	add	r2, r3
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012bd8:	88fb      	ldrh	r3, [r7, #6]
 8012bda:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012bdc:	2300      	movs	r3, #0
 8012bde:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	891b      	ldrh	r3, [r3, #8]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d16f      	bne.n	8012cc8 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	681a      	ldr	r2, [r3, #0]
 8012bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bee:	1c59      	adds	r1, r3, #1
 8012bf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8012bf2:	4413      	add	r3, r2
 8012bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012bf6:	b2d2      	uxtb	r2, r2
 8012bf8:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bfc:	0a18      	lsrs	r0, r3, #8
 8012bfe:	68fb      	ldr	r3, [r7, #12]
 8012c00:	681a      	ldr	r2, [r3, #0]
 8012c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c04:	1c59      	adds	r1, r3, #1
 8012c06:	6339      	str	r1, [r7, #48]	@ 0x30
 8012c08:	4413      	add	r3, r2
 8012c0a:	b2c2      	uxtb	r2, r0
 8012c0c:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	695b      	ldr	r3, [r3, #20]
 8012c12:	1c9a      	adds	r2, r3, #2
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	615a      	str	r2, [r3, #20]
 8012c18:	e056      	b.n	8012cc8 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	7f1b      	ldrb	r3, [r3, #28]
 8012c1e:	f003 0302 	and.w	r3, r3, #2
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d050      	beq.n	8012cc8 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	891b      	ldrh	r3, [r3, #8]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d14a      	bne.n	8012cc4 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c34:	3b02      	subs	r3, #2
 8012c36:	4413      	add	r3, r2
 8012c38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c3a:	b2d2      	uxtb	r2, r2
 8012c3c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c40:	0a19      	lsrs	r1, r3, #8
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c48:	3b01      	subs	r3, #1
 8012c4a:	4413      	add	r3, r2
 8012c4c:	b2ca      	uxtb	r2, r1
 8012c4e:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	681a      	ldr	r2, [r3, #0]
 8012c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c56:	18d0      	adds	r0, r2, r3
 8012c58:	88fb      	ldrh	r3, [r7, #6]
 8012c5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012c5c:	fb02 f303 	mul.w	r3, r2, r3
 8012c60:	68ba      	ldr	r2, [r7, #8]
 8012c62:	4413      	add	r3, r2
 8012c64:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012c66:	4619      	mov	r1, r3
 8012c68:	f003 fd91 	bl	801678e <memcpy>
             q->byteCount += NbBytesToCopy; 
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	695a      	ldr	r2, [r3, #20]
 8012c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c72:	441a      	add	r2, r3
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8012c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c7a:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8012c7c:	88fa      	ldrh	r2, [r7, #6]
 8012c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c80:	1ad3      	subs	r3, r2, r3
 8012c82:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	699b      	ldr	r3, [r3, #24]
 8012c88:	1c5a      	adds	r2, r3, #1
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8012c8e:	2300      	movs	r3, #0
 8012c90:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c98:	1c59      	adds	r1, r3, #1
 8012c9a:	6339      	str	r1, [r7, #48]	@ 0x30
 8012c9c:	4413      	add	r3, r2
 8012c9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ca0:	b2d2      	uxtb	r2, r2
 8012ca2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca6:	0a18      	lsrs	r0, r3, #8
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012cae:	1c59      	adds	r1, r3, #1
 8012cb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8012cb2:	4413      	add	r3, r2
 8012cb4:	b2c2      	uxtb	r2, r0
 8012cb6:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	695b      	ldr	r3, [r3, #20]
 8012cbc:	1c9a      	adds	r2, r3, #2
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	615a      	str	r2, [r3, #20]
 8012cc2:	e001      	b.n	8012cc8 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	e049      	b.n	8012d5c <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8012cc8:	7ffb      	ldrb	r3, [r7, #31]
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	4413      	add	r3, r2
 8012cd2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8012cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d015      	beq.n	8012d0c <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	681a      	ldr	r2, [r3, #0]
 8012ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ce6:	18d0      	adds	r0, r2, r3
 8012ce8:	88fb      	ldrh	r3, [r7, #6]
 8012cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012cec:	fb03 f202 	mul.w	r2, r3, r2
 8012cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf2:	4413      	add	r3, r2
 8012cf4:	68ba      	ldr	r2, [r7, #8]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	f003 fd47 	bl	801678e <memcpy>
        q->byteCount += NbBytesToCopy;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	695a      	ldr	r2, [r3, #20]
 8012d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d06:	441a      	add	r2, r3
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	699b      	ldr	r3, [r3, #24]
 8012d10:	1c5a      	adds	r2, r3, #1
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8012d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d18:	3301      	adds	r3, #1
 8012d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d1e:	683b      	ldr	r3, [r7, #0]
 8012d20:	429a      	cmp	r2, r3
 8012d22:	f4ff aeb0 	bcc.w	8012a86 <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	6919      	ldr	r1, [r3, #16]
 8012d2e:	7ffb      	ldrb	r3, [r7, #31]
 8012d30:	4419      	add	r1, r3
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	4299      	cmp	r1, r3
 8012d38:	d307      	bcc.n	8012d4a <CircularQueue_Add+0x432>
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	6919      	ldr	r1, [r3, #16]
 8012d3e:	7ffb      	ldrb	r3, [r7, #31]
 8012d40:	4419      	add	r1, r3
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	685b      	ldr	r3, [r3, #4]
 8012d46:	1acb      	subs	r3, r1, r3
 8012d48:	e003      	b.n	8012d52 <CircularQueue_Add+0x43a>
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	6919      	ldr	r1, [r3, #16]
 8012d4e:	7ffb      	ldrb	r3, [r7, #31]
 8012d50:	440b      	add	r3, r1
 8012d52:	4413      	add	r3, r2
 8012d54:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8012d56:	6a3b      	ldr	r3, [r7, #32]
 8012d58:	e000      	b.n	8012d5c <CircularQueue_Add+0x444>
    return NULL;
 8012d5a:	2300      	movs	r3, #0
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	3738      	adds	r7, #56	@ 0x38
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 8012d72:	2300      	movs	r3, #0
 8012d74:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	891b      	ldrh	r3, [r3, #8]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d101      	bne.n	8012d82 <CircularQueue_Remove+0x1e>
 8012d7e:	2302      	movs	r3, #2
 8012d80:	e000      	b.n	8012d84 <CircularQueue_Remove+0x20>
 8012d82:	2300      	movs	r3, #0
 8012d84:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 8012d86:	2300      	movs	r3, #0
 8012d88:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	695b      	ldr	r3, [r3, #20]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	f000 80ca 	beq.w	8012f28 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	891b      	ldrh	r3, [r3, #8]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d120      	bne.n	8012dde <CircularQueue_Remove+0x7a>
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	681a      	ldr	r2, [r3, #0]
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	68db      	ldr	r3, [r3, #12]
 8012da4:	4413      	add	r3, r2
 8012da6:	781b      	ldrb	r3, [r3, #0]
 8012da8:	4618      	mov	r0, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	681a      	ldr	r2, [r3, #0]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	68db      	ldr	r3, [r3, #12]
 8012db2:	1c59      	adds	r1, r3, #1
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	4299      	cmp	r1, r3
 8012dba:	d306      	bcc.n	8012dca <CircularQueue_Remove+0x66>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	68d9      	ldr	r1, [r3, #12]
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	1acb      	subs	r3, r1, r3
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	e002      	b.n	8012dd0 <CircularQueue_Remove+0x6c>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	68db      	ldr	r3, [r3, #12]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	4413      	add	r3, r2
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	021b      	lsls	r3, r3, #8
 8012dd6:	b29b      	uxth	r3, r3
 8012dd8:	4403      	add	r3, r0
 8012dda:	b29b      	uxth	r3, r3
 8012ddc:	e001      	b.n	8012de2 <CircularQueue_Remove+0x7e>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	891b      	ldrh	r3, [r3, #8]
 8012de2:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	7f1b      	ldrb	r3, [r3, #28]
 8012de8:	f003 0301 	and.w	r3, r3, #1
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d056      	beq.n	8012e9e <CircularQueue_Remove+0x13a>
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	7f1b      	ldrb	r3, [r3, #28]
 8012df4:	f003 0302 	and.w	r3, r3, #2
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d150      	bne.n	8012e9e <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012dfc:	897b      	ldrh	r3, [r7, #10]
 8012dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d103      	bne.n	8012e0e <CircularQueue_Remove+0xaa>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	891b      	ldrh	r3, [r3, #8]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d012      	beq.n	8012e34 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	68da      	ldr	r2, [r3, #12]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012e16:	429a      	cmp	r2, r3
 8012e18:	d941      	bls.n	8012e9e <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	891b      	ldrh	r3, [r3, #8]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d03d      	beq.n	8012e9e <CircularQueue_Remove+0x13a>
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	685a      	ldr	r2, [r3, #4]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	68db      	ldr	r3, [r3, #12]
 8012e2a:	1ad3      	subs	r3, r2, r3
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	8912      	ldrh	r2, [r2, #8]
 8012e30:	4293      	cmp	r3, r2
 8012e32:	d234      	bcs.n	8012e9e <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	695a      	ldr	r2, [r3, #20]
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	68d9      	ldr	r1, [r3, #12]
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	1acb      	subs	r3, r1, r3
 8012e42:	441a      	add	r2, r3
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2200      	movs	r2, #0
 8012e4c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	891b      	ldrh	r3, [r3, #8]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d120      	bne.n	8012e98 <CircularQueue_Remove+0x134>
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	68db      	ldr	r3, [r3, #12]
 8012e5e:	4413      	add	r3, r2
 8012e60:	781b      	ldrb	r3, [r3, #0]
 8012e62:	4618      	mov	r0, r3
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	681a      	ldr	r2, [r3, #0]
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	68db      	ldr	r3, [r3, #12]
 8012e6c:	1c59      	adds	r1, r3, #1
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	685b      	ldr	r3, [r3, #4]
 8012e72:	4299      	cmp	r1, r3
 8012e74:	d306      	bcc.n	8012e84 <CircularQueue_Remove+0x120>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	68d9      	ldr	r1, [r3, #12]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	685b      	ldr	r3, [r3, #4]
 8012e7e:	1acb      	subs	r3, r1, r3
 8012e80:	3301      	adds	r3, #1
 8012e82:	e002      	b.n	8012e8a <CircularQueue_Remove+0x126>
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	68db      	ldr	r3, [r3, #12]
 8012e88:	3301      	adds	r3, #1
 8012e8a:	4413      	add	r3, r2
 8012e8c:	781b      	ldrb	r3, [r3, #0]
 8012e8e:	021b      	lsls	r3, r3, #8
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	4403      	add	r3, r0
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	e001      	b.n	8012e9c <CircularQueue_Remove+0x138>
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	891b      	ldrh	r3, [r3, #8]
 8012e9c:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	681a      	ldr	r2, [r3, #0]
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	68d9      	ldr	r1, [r3, #12]
 8012ea6:	7a7b      	ldrb	r3, [r7, #9]
 8012ea8:	4419      	add	r1, r3
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	4299      	cmp	r1, r3
 8012eb0:	d307      	bcc.n	8012ec2 <CircularQueue_Remove+0x15e>
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	68d9      	ldr	r1, [r3, #12]
 8012eb6:	7a7b      	ldrb	r3, [r7, #9]
 8012eb8:	4419      	add	r1, r3
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	685b      	ldr	r3, [r3, #4]
 8012ebe:	1acb      	subs	r3, r1, r3
 8012ec0:	e003      	b.n	8012eca <CircularQueue_Remove+0x166>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	68d9      	ldr	r1, [r3, #12]
 8012ec6:	7a7b      	ldrb	r3, [r7, #9]
 8012ec8:	440b      	add	r3, r1
 8012eca:	4413      	add	r3, r2
 8012ecc:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	695b      	ldr	r3, [r3, #20]
 8012ed2:	8979      	ldrh	r1, [r7, #10]
 8012ed4:	7a7a      	ldrb	r2, [r7, #9]
 8012ed6:	440a      	add	r2, r1
 8012ed8:	1a9a      	subs	r2, r3, r2
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	695b      	ldr	r3, [r3, #20]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d01b      	beq.n	8012f1e <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	68da      	ldr	r2, [r3, #12]
 8012eea:	897b      	ldrh	r3, [r7, #10]
 8012eec:	441a      	add	r2, r3
 8012eee:	7a7b      	ldrb	r3, [r7, #9]
 8012ef0:	441a      	add	r2, r3
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	685b      	ldr	r3, [r3, #4]
 8012ef6:	429a      	cmp	r2, r3
 8012ef8:	d309      	bcc.n	8012f0e <CircularQueue_Remove+0x1aa>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	68da      	ldr	r2, [r3, #12]
 8012efe:	897b      	ldrh	r3, [r7, #10]
 8012f00:	441a      	add	r2, r3
 8012f02:	7a7b      	ldrb	r3, [r7, #9]
 8012f04:	441a      	add	r2, r3
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	1ad3      	subs	r3, r2, r3
 8012f0c:	e005      	b.n	8012f1a <CircularQueue_Remove+0x1b6>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	68da      	ldr	r2, [r3, #12]
 8012f12:	897b      	ldrh	r3, [r7, #10]
 8012f14:	441a      	add	r2, r3
 8012f16:	7a7b      	ldrb	r3, [r7, #9]
 8012f18:	4413      	add	r3, r2
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	699b      	ldr	r3, [r3, #24]
 8012f22:	1e5a      	subs	r2, r3, #1
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8012f28:	683b      	ldr	r3, [r7, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d002      	beq.n	8012f34 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8012f2e:	683b      	ldr	r3, [r7, #0]
 8012f30:	897a      	ldrh	r2, [r7, #10]
 8012f32:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8012f34:	68fb      	ldr	r3, [r7, #12]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3714      	adds	r7, #20
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f40:	4770      	bx	lr

08012f42 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8012f42:	b480      	push	{r7}
 8012f44:	b087      	sub	sp, #28
 8012f46:	af00      	add	r7, sp, #0
 8012f48:	6078      	str	r0, [r7, #4]
 8012f4a:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8012f4c:	2300      	movs	r3, #0
 8012f4e:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8012f50:	2300      	movs	r3, #0
 8012f52:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	891b      	ldrh	r3, [r3, #8]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d101      	bne.n	8012f60 <CircularQueue_Sense+0x1e>
 8012f5c:	2302      	movs	r3, #2
 8012f5e:	e000      	b.n	8012f62 <CircularQueue_Sense+0x20>
 8012f60:	2300      	movs	r3, #0
 8012f62:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 8012f64:	2300      	movs	r3, #0
 8012f66:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	695b      	ldr	r3, [r3, #20]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	f000 808e 	beq.w	8013092 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	68db      	ldr	r3, [r3, #12]
 8012f7a:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	891b      	ldrh	r3, [r3, #8]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d120      	bne.n	8012fc6 <CircularQueue_Sense+0x84>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	68db      	ldr	r3, [r3, #12]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	4618      	mov	r0, r3
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	68db      	ldr	r3, [r3, #12]
 8012f9a:	1c59      	adds	r1, r3, #1
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	4299      	cmp	r1, r3
 8012fa2:	d306      	bcc.n	8012fb2 <CircularQueue_Sense+0x70>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	68d9      	ldr	r1, [r3, #12]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	685b      	ldr	r3, [r3, #4]
 8012fac:	1acb      	subs	r3, r1, r3
 8012fae:	3301      	adds	r3, #1
 8012fb0:	e002      	b.n	8012fb8 <CircularQueue_Sense+0x76>
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	68db      	ldr	r3, [r3, #12]
 8012fb6:	3301      	adds	r3, #1
 8012fb8:	4413      	add	r3, r2
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	021b      	lsls	r3, r3, #8
 8012fbe:	b29b      	uxth	r3, r3
 8012fc0:	4403      	add	r3, r0
 8012fc2:	b29b      	uxth	r3, r3
 8012fc4:	e001      	b.n	8012fca <CircularQueue_Sense+0x88>
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	891b      	ldrh	r3, [r3, #8]
 8012fca:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	7f1b      	ldrb	r3, [r3, #28]
 8012fd0:	f003 0301 	and.w	r3, r3, #1
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d047      	beq.n	8013068 <CircularQueue_Sense+0x126>
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	7f1b      	ldrb	r3, [r3, #28]
 8012fdc:	f003 0302 	and.w	r3, r3, #2
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d141      	bne.n	8013068 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012fe4:	8a7b      	ldrh	r3, [r7, #18]
 8012fe6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012fea:	4293      	cmp	r3, r2
 8012fec:	d103      	bne.n	8012ff6 <CircularQueue_Sense+0xb4>
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	891b      	ldrh	r3, [r3, #8]
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d012      	beq.n	801301c <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	68da      	ldr	r2, [r3, #12]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8012ffe:	429a      	cmp	r2, r3
 8013000:	d932      	bls.n	8013068 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	891b      	ldrh	r3, [r3, #8]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d02e      	beq.n	8013068 <CircularQueue_Sense+0x126>
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	685a      	ldr	r2, [r3, #4]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	8912      	ldrh	r2, [r2, #8]
 8013018:	4293      	cmp	r3, r2
 801301a:	d225      	bcs.n	8013068 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 801301c:	2300      	movs	r3, #0
 801301e:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	891b      	ldrh	r3, [r3, #8]
 8013024:	2b00      	cmp	r3, #0
 8013026:	d11c      	bne.n	8013062 <CircularQueue_Sense+0x120>
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	681a      	ldr	r2, [r3, #0]
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	4413      	add	r3, r2
 8013030:	781b      	ldrb	r3, [r3, #0]
 8013032:	4618      	mov	r0, r3
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681a      	ldr	r2, [r3, #0]
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	1c59      	adds	r1, r3, #1
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	685b      	ldr	r3, [r3, #4]
 8013040:	4299      	cmp	r1, r3
 8013042:	d305      	bcc.n	8013050 <CircularQueue_Sense+0x10e>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	685b      	ldr	r3, [r3, #4]
 8013048:	68f9      	ldr	r1, [r7, #12]
 801304a:	1acb      	subs	r3, r1, r3
 801304c:	3301      	adds	r3, #1
 801304e:	e001      	b.n	8013054 <CircularQueue_Sense+0x112>
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	3301      	adds	r3, #1
 8013054:	4413      	add	r3, r2
 8013056:	781b      	ldrb	r3, [r3, #0]
 8013058:	021b      	lsls	r3, r3, #8
 801305a:	b29b      	uxth	r3, r3
 801305c:	4403      	add	r3, r0
 801305e:	b29b      	uxth	r3, r3
 8013060:	e001      	b.n	8013066 <CircularQueue_Sense+0x124>
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	891b      	ldrh	r3, [r3, #8]
 8013066:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	7af9      	ldrb	r1, [r7, #11]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	4419      	add	r1, r3
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	685b      	ldr	r3, [r3, #4]
 8013076:	4299      	cmp	r1, r3
 8013078:	d306      	bcc.n	8013088 <CircularQueue_Sense+0x146>
 801307a:	7af9      	ldrb	r1, [r7, #11]
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	4419      	add	r1, r3
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	685b      	ldr	r3, [r3, #4]
 8013084:	1acb      	subs	r3, r1, r3
 8013086:	e002      	b.n	801308e <CircularQueue_Sense+0x14c>
 8013088:	7af9      	ldrb	r1, [r7, #11]
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	440b      	add	r3, r1
 801308e:	4413      	add	r3, r2
 8013090:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	2b00      	cmp	r3, #0
 8013096:	d002      	beq.n	801309e <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8013098:	683b      	ldr	r3, [r7, #0]
 801309a:	8a7a      	ldrh	r2, [r7, #18]
 801309c:	801a      	strh	r2, [r3, #0]
  }
  return x;
 801309e:	697b      	ldr	r3, [r7, #20]
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	371c      	adds	r7, #28
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr

080130ac <__NVIC_SystemReset>:
{
 80130ac:	b480      	push	{r7}
 80130ae:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80130b0:	f3bf 8f4f 	dsb	sy
}
 80130b4:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80130b6:	4b06      	ldr	r3, [pc, #24]	@ (80130d0 <__NVIC_SystemReset+0x24>)
 80130b8:	68db      	ldr	r3, [r3, #12]
 80130ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80130be:	4904      	ldr	r1, [pc, #16]	@ (80130d0 <__NVIC_SystemReset+0x24>)
 80130c0:	4b04      	ldr	r3, [pc, #16]	@ (80130d4 <__NVIC_SystemReset+0x28>)
 80130c2:	4313      	orrs	r3, r2
 80130c4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80130c6:	f3bf 8f4f 	dsb	sy
}
 80130ca:	bf00      	nop
    __NOP();
 80130cc:	bf00      	nop
 80130ce:	e7fd      	b.n	80130cc <__NVIC_SystemReset+0x20>
 80130d0:	e000ed00 	.word	0xe000ed00
 80130d4:	05fa0004 	.word	0x05fa0004

080130d8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80130d8:	b480      	push	{r7}
 80130da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80130dc:	4b03      	ldr	r3, [pc, #12]	@ (80130ec <LL_FLASH_GetUDN+0x14>)
 80130de:	681b      	ldr	r3, [r3, #0]
}
 80130e0:	4618      	mov	r0, r3
 80130e2:	46bd      	mov	sp, r7
 80130e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e8:	4770      	bx	lr
 80130ea:	bf00      	nop
 80130ec:	1fff7580 	.word	0x1fff7580

080130f0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80130f0:	b480      	push	{r7}
 80130f2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80130f4:	4b03      	ldr	r3, [pc, #12]	@ (8013104 <LL_FLASH_GetDeviceID+0x14>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	b2db      	uxtb	r3, r3
}
 80130fa:	4618      	mov	r0, r3
 80130fc:	46bd      	mov	sp, r7
 80130fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013102:	4770      	bx	lr
 8013104:	1fff7584 	.word	0x1fff7584

08013108 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8013108:	b480      	push	{r7}
 801310a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 801310c:	4b03      	ldr	r3, [pc, #12]	@ (801311c <LL_FLASH_GetSTCompanyID+0x14>)
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	0a1b      	lsrs	r3, r3, #8
}
 8013112:	4618      	mov	r0, r3
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr
 801311c:	1fff7584 	.word	0x1fff7584

08013120 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8013120:	b5b0      	push	{r4, r5, r7, lr}
 8013122:	b090      	sub	sp, #64	@ 0x40
 8013124:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013126:	2392      	movs	r3, #146	@ 0x92
 8013128:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ALL_TASK, UTIL_SEQ_RFU, ALL_SENs_Task);
 801312c:	4a4d      	ldr	r2, [pc, #308]	@ (8013264 <APP_BLE_Init+0x144>)
 801312e:	2100      	movs	r1, #0
 8013130:	2020      	movs	r0, #32
 8013132:	f002 ff13 	bl	8015f5c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ALL_TASK, CFG_SCH_PRIO_0);

  UTIL_SEQ_RegTask( 1 << CFG_TASK_ACC_TASK, UTIL_SEQ_RFU, ACCEL_Task);
 8013136:	4a4c      	ldr	r2, [pc, #304]	@ (8013268 <APP_BLE_Init+0x148>)
 8013138:	2100      	movs	r1, #0
 801313a:	2008      	movs	r0, #8
 801313c:	f002 ff0e 	bl	8015f5c <UTIL_SEQ_RegTask>
  //UTIL_SEQ_SetTask( 1 << CFG_TASK_ACC_TASK, CFG_SCH_PRIO_1);

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8013140:	4b4a      	ldr	r3, [pc, #296]	@ (801326c <APP_BLE_Init+0x14c>)
 8013142:	1d3c      	adds	r4, r7, #4
 8013144:	461d      	mov	r5, r3
 8013146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801314a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801314c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801314e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013152:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8013156:	c403      	stmia	r4!, {r0, r1}
 8013158:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801315a:	f000 fbab 	bl	80138b4 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 801315e:	2101      	movs	r1, #1
 8013160:	2002      	movs	r0, #2
 8013162:	f002 fdcf 	bl	8015d04 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8013166:	4a42      	ldr	r2, [pc, #264]	@ (8013270 <APP_BLE_Init+0x150>)
 8013168:	2100      	movs	r1, #0
 801316a:	2004      	movs	r0, #4
 801316c:	f002 fef6 	bl	8015f5c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8013170:	1d3b      	adds	r3, r7, #4
 8013172:	4618      	mov	r0, r3
 8013174:	f7fe fc14 	bl	80119a0 <SHCI_C2_BLE_Init>
 8013178:	4603      	mov	r3, r0
 801317a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 801317e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8013182:	2b00      	cmp	r3, #0
 8013184:	d012      	beq.n	80131ac <APP_BLE_Init+0x8c>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8013186:	483b      	ldr	r0, [pc, #236]	@ (8013274 <APP_BLE_Init+0x154>)
 8013188:	f7ff fa18 	bl	80125bc <DbgTraceGetFileName>
 801318c:	4601      	mov	r1, r0
 801318e:	f240 1375 	movw	r3, #373	@ 0x175
 8013192:	4a39      	ldr	r2, [pc, #228]	@ (8013278 <APP_BLE_Init+0x158>)
 8013194:	4839      	ldr	r0, [pc, #228]	@ (801327c <APP_BLE_Init+0x15c>)
 8013196:	f003 f8e1 	bl	801635c <iprintf>
 801319a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801319e:	4619      	mov	r1, r3
 80131a0:	4837      	ldr	r0, [pc, #220]	@ (8013280 <APP_BLE_Init+0x160>)
 80131a2:	f003 f8db 	bl	801635c <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80131a6:	f7f1 fa05 	bl	80045b4 <Error_Handler>
 80131aa:	e00c      	b.n	80131c6 <APP_BLE_Init+0xa6>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80131ac:	4831      	ldr	r0, [pc, #196]	@ (8013274 <APP_BLE_Init+0x154>)
 80131ae:	f7ff fa05 	bl	80125bc <DbgTraceGetFileName>
 80131b2:	4601      	mov	r1, r0
 80131b4:	f240 137b 	movw	r3, #379	@ 0x17b
 80131b8:	4a2f      	ldr	r2, [pc, #188]	@ (8013278 <APP_BLE_Init+0x158>)
 80131ba:	4830      	ldr	r0, [pc, #192]	@ (801327c <APP_BLE_Init+0x15c>)
 80131bc:	f003 f8ce 	bl	801635c <iprintf>
 80131c0:	4830      	ldr	r0, [pc, #192]	@ (8013284 <APP_BLE_Init+0x164>)
 80131c2:	f003 f8cb 	bl	801635c <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 80131c6:	f000 fb8b 	bl	80138e0 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80131ca:	f7fe fb43 	bl	8011854 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80131ce:	4b2e      	ldr	r3, [pc, #184]	@ (8013288 <APP_BLE_Init+0x168>)
 80131d0:	2200      	movs	r2, #0
 80131d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 80131d6:	4b2c      	ldr	r3, [pc, #176]	@ (8013288 <APP_BLE_Init+0x168>)
 80131d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80131dc:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 80131de:	4a2b      	ldr	r2, [pc, #172]	@ (801328c <APP_BLE_Init+0x16c>)
 80131e0:	2100      	movs	r1, #0
 80131e2:	2001      	movs	r0, #1
 80131e4:	f002 feba 	bl	8015f5c <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80131e8:	2006      	movs	r0, #6
 80131ea:	f7fe f908 	bl	80113fe <aci_hal_set_radio_activity_mask>
 80131ee:	4603      	mov	r3, r0
 80131f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80131f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d010      	beq.n	801321e <APP_BLE_Init+0xfe>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80131fc:	481d      	ldr	r0, [pc, #116]	@ (8013274 <APP_BLE_Init+0x154>)
 80131fe:	f7ff f9dd 	bl	80125bc <DbgTraceGetFileName>
 8013202:	4601      	mov	r1, r0
 8013204:	f240 139f 	movw	r3, #415	@ 0x19f
 8013208:	4a1b      	ldr	r2, [pc, #108]	@ (8013278 <APP_BLE_Init+0x158>)
 801320a:	481c      	ldr	r0, [pc, #112]	@ (801327c <APP_BLE_Init+0x15c>)
 801320c:	f003 f8a6 	bl	801635c <iprintf>
 8013210:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8013214:	4619      	mov	r1, r3
 8013216:	481e      	ldr	r0, [pc, #120]	@ (8013290 <APP_BLE_Init+0x170>)
 8013218:	f003 f8a0 	bl	801635c <iprintf>
 801321c:	e00c      	b.n	8013238 <APP_BLE_Init+0x118>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 801321e:	4815      	ldr	r0, [pc, #84]	@ (8013274 <APP_BLE_Init+0x154>)
 8013220:	f7ff f9cc 	bl	80125bc <DbgTraceGetFileName>
 8013224:	4601      	mov	r1, r0
 8013226:	f240 13a3 	movw	r3, #419	@ 0x1a3
 801322a:	4a13      	ldr	r2, [pc, #76]	@ (8013278 <APP_BLE_Init+0x158>)
 801322c:	4813      	ldr	r0, [pc, #76]	@ (801327c <APP_BLE_Init+0x15c>)
 801322e:	f003 f895 	bl	801635c <iprintf>
 8013232:	4818      	ldr	r0, [pc, #96]	@ (8013294 <APP_BLE_Init+0x174>)
 8013234:	f003 f892 	bl	801635c <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8013238:	4b17      	ldr	r3, [pc, #92]	@ (8013298 <APP_BLE_Init+0x178>)
 801323a:	2200      	movs	r2, #0
 801323c:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 801323e:	4b17      	ldr	r3, [pc, #92]	@ (801329c <APP_BLE_Init+0x17c>)
 8013240:	2201      	movs	r2, #1
 8013242:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8013244:	f001 f8c6 	bl	80143d4 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8013248:	4b0f      	ldr	r3, [pc, #60]	@ (8013288 <APP_BLE_Init+0x168>)
 801324a:	2200      	movs	r2, #0
 801324c:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 801324e:	4b0e      	ldr	r3, [pc, #56]	@ (8013288 <APP_BLE_Init+0x168>)
 8013250:	2200      	movs	r2, #0
 8013252:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8013254:	2001      	movs	r0, #1
 8013256:	f000 fdd7 	bl	8013e08 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 801325a:	bf00      	nop
}
 801325c:	3740      	adds	r7, #64	@ 0x40
 801325e:	46bd      	mov	sp, r7
 8013260:	bdb0      	pop	{r4, r5, r7, pc}
 8013262:	bf00      	nop
 8013264:	080142ad 	.word	0x080142ad
 8013268:	080142e1 	.word	0x080142e1
 801326c:	08018c0c 	.word	0x08018c0c
 8013270:	08011bbd 	.word	0x08011bbd
 8013274:	08018b00 	.word	0x08018b00
 8013278:	0801a244 	.word	0x0801a244
 801327c:	08018b1c 	.word	0x08018b1c
 8013280:	08018b30 	.word	0x08018b30
 8013284:	08018b68 	.word	0x08018b68
 8013288:	200019e8 	.word	0x200019e8
 801328c:	08013f8d 	.word	0x08013f8d
 8013290:	08018b90 	.word	0x08018b90
 8013294:	08018bd4 	.word	0x08018bd4
 8013298:	20001a70 	.word	0x20001a70
 801329c:	20001a71 	.word	0x20001a71

080132a0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80132a0:	b5b0      	push	{r4, r5, r7, lr}
 80132a2:	b08e      	sub	sp, #56	@ 0x38
 80132a4:	af04      	add	r7, sp, #16
 80132a6:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80132a8:	2392      	movs	r3, #146	@ 0x92
 80132aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	3301      	adds	r3, #1
 80132b2:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 80132b4:	6a3b      	ldr	r3, [r7, #32]
 80132b6:	781b      	ldrb	r3, [r3, #0]
 80132b8:	2bff      	cmp	r3, #255	@ 0xff
 80132ba:	f000 817b 	beq.w	80135b4 <SVCCTL_App_Notification+0x314>
 80132be:	2bff      	cmp	r3, #255	@ 0xff
 80132c0:	f300 82c8 	bgt.w	8013854 <SVCCTL_App_Notification+0x5b4>
 80132c4:	2b05      	cmp	r3, #5
 80132c6:	d002      	beq.n	80132ce <SVCCTL_App_Notification+0x2e>
 80132c8:	2b3e      	cmp	r3, #62	@ 0x3e
 80132ca:	d04f      	beq.n	801336c <SVCCTL_App_Notification+0xcc>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 80132cc:	e2c2      	b.n	8013854 <SVCCTL_App_Notification+0x5b4>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 80132ce:	6a3b      	ldr	r3, [r7, #32]
 80132d0:	3302      	adds	r3, #2
 80132d2:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 80132d4:	68bb      	ldr	r3, [r7, #8]
 80132d6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80132da:	b29a      	uxth	r2, r3
 80132dc:	4ba5      	ldr	r3, [pc, #660]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 80132de:	8adb      	ldrh	r3, [r3, #22]
 80132e0:	429a      	cmp	r2, r3
 80132e2:	d132      	bne.n	801334a <SVCCTL_App_Notification+0xaa>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 80132e4:	4ba3      	ldr	r3, [pc, #652]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 80132e6:	2200      	movs	r2, #0
 80132e8:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80132ea:	4ba2      	ldr	r3, [pc, #648]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 80132ec:	2200      	movs	r2, #0
 80132ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 80132f2:	48a1      	ldr	r0, [pc, #644]	@ (8013578 <SVCCTL_App_Notification+0x2d8>)
 80132f4:	f7ff f962 	bl	80125bc <DbgTraceGetFileName>
 80132f8:	4601      	mov	r1, r0
 80132fa:	f240 13e7 	movw	r3, #487	@ 0x1e7
 80132fe:	4a9f      	ldr	r2, [pc, #636]	@ (801357c <SVCCTL_App_Notification+0x2dc>)
 8013300:	489f      	ldr	r0, [pc, #636]	@ (8013580 <SVCCTL_App_Notification+0x2e0>)
 8013302:	f003 f82b 	bl	801635c <iprintf>
 8013306:	489f      	ldr	r0, [pc, #636]	@ (8013584 <SVCCTL_App_Notification+0x2e4>)
 8013308:	f003 f898 	bl	801643c <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 801330c:	489a      	ldr	r0, [pc, #616]	@ (8013578 <SVCCTL_App_Notification+0x2d8>)
 801330e:	f7ff f955 	bl	80125bc <DbgTraceGetFileName>
 8013312:	4601      	mov	r1, r0
 8013314:	f44f 73f4 	mov.w	r3, #488	@ 0x1e8
 8013318:	4a98      	ldr	r2, [pc, #608]	@ (801357c <SVCCTL_App_Notification+0x2dc>)
 801331a:	4899      	ldr	r0, [pc, #612]	@ (8013580 <SVCCTL_App_Notification+0x2e0>)
 801331c:	f003 f81e 	bl	801635c <iprintf>
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013326:	b29b      	uxth	r3, r3
 8013328:	4619      	mov	r1, r3
 801332a:	68bb      	ldr	r3, [r7, #8]
 801332c:	78db      	ldrb	r3, [r3, #3]
 801332e:	461a      	mov	r2, r3
 8013330:	4895      	ldr	r0, [pc, #596]	@ (8013588 <SVCCTL_App_Notification+0x2e8>)
 8013332:	f003 f813 	bl	801635c <iprintf>
        tsBle.Connected = false;
 8013336:	4b95      	ldr	r3, [pc, #596]	@ (801358c <SVCCTL_App_Notification+0x2ec>)
 8013338:	2200      	movs	r2, #0
 801333a:	701a      	strb	r2, [r3, #0]
			APP_BLE_Init();
 801333c:	f7ff fef0 	bl	8013120 <APP_BLE_Init>
			HAL_Delay(250);
 8013340:	20fa      	movs	r0, #250	@ 0xfa
 8013342:	f7ef fc19 	bl	8002b78 <HAL_Delay>
			NVIC_SystemReset();
 8013346:	f7ff feb1 	bl	80130ac <__NVIC_SystemReset>
      Adv_Request(APP_BLE_FAST_ADV);
 801334a:	2001      	movs	r0, #1
 801334c:	f000 fd5c 	bl	8013e08 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8013350:	4b8f      	ldr	r3, [pc, #572]	@ (8013590 <SVCCTL_App_Notification+0x2f0>)
 8013352:	2201      	movs	r2, #1
 8013354:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8013356:	4b87      	ldr	r3, [pc, #540]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 8013358:	8ada      	ldrh	r2, [r3, #22]
 801335a:	4b8d      	ldr	r3, [pc, #564]	@ (8013590 <SVCCTL_App_Notification+0x2f0>)
 801335c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 801335e:	488c      	ldr	r0, [pc, #560]	@ (8013590 <SVCCTL_App_Notification+0x2f0>)
 8013360:	f001 f824 	bl	80143ac <Custom_APP_Notification>
      tsCmd.LED = false;
 8013364:	4b8b      	ldr	r3, [pc, #556]	@ (8013594 <SVCCTL_App_Notification+0x2f4>)
 8013366:	2200      	movs	r2, #0
 8013368:	75da      	strb	r2, [r3, #23]
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 801336a:	e276      	b.n	801385a <SVCCTL_App_Notification+0x5ba>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 801336c:	6a3b      	ldr	r3, [r7, #32]
 801336e:	3302      	adds	r3, #2
 8013370:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8013372:	697b      	ldr	r3, [r7, #20]
 8013374:	781b      	ldrb	r3, [r3, #0]
 8013376:	2b01      	cmp	r3, #1
 8013378:	d06a      	beq.n	8013450 <SVCCTL_App_Notification+0x1b0>
 801337a:	2b03      	cmp	r3, #3
 801337c:	f040 80f7 	bne.w	801356e <SVCCTL_App_Notification+0x2ce>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	3301      	adds	r3, #1
 8013384:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8013386:	487c      	ldr	r0, [pc, #496]	@ (8013578 <SVCCTL_App_Notification+0x2d8>)
 8013388:	f7ff f918 	bl	80125bc <DbgTraceGetFileName>
 801338c:	4601      	mov	r1, r0
 801338e:	f240 231f 	movw	r3, #543	@ 0x21f
 8013392:	4a7a      	ldr	r2, [pc, #488]	@ (801357c <SVCCTL_App_Notification+0x2dc>)
 8013394:	487a      	ldr	r0, [pc, #488]	@ (8013580 <SVCCTL_App_Notification+0x2e0>)
 8013396:	f002 ffe1 	bl	801635c <iprintf>
 801339a:	487f      	ldr	r0, [pc, #508]	@ (8013598 <SVCCTL_App_Notification+0x2f8>)
 801339c:	f003 f84e 	bl	801643c <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80133a0:	4875      	ldr	r0, [pc, #468]	@ (8013578 <SVCCTL_App_Notification+0x2d8>)
 80133a2:	f7ff f90b 	bl	80125bc <DbgTraceGetFileName>
 80133a6:	4601      	mov	r1, r0
 80133a8:	f44f 7308 	mov.w	r3, #544	@ 0x220
 80133ac:	4a73      	ldr	r2, [pc, #460]	@ (801357c <SVCCTL_App_Notification+0x2dc>)
 80133ae:	4874      	ldr	r0, [pc, #464]	@ (8013580 <SVCCTL_App_Notification+0x2e0>)
 80133b0:	f002 ffd4 	bl	801635c <iprintf>
 80133b4:	693b      	ldr	r3, [r7, #16]
 80133b6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80133ba:	b29b      	uxth	r3, r3
 80133bc:	4618      	mov	r0, r3
 80133be:	f7ed f889 	bl	80004d4 <__aeabi_i2d>
 80133c2:	f04f 0200 	mov.w	r2, #0
 80133c6:	4b75      	ldr	r3, [pc, #468]	@ (801359c <SVCCTL_App_Notification+0x2fc>)
 80133c8:	f7ed f8ee 	bl	80005a8 <__aeabi_dmul>
 80133cc:	4602      	mov	r2, r0
 80133ce:	460b      	mov	r3, r1
 80133d0:	4610      	mov	r0, r2
 80133d2:	4619      	mov	r1, r3
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80133da:	b29b      	uxth	r3, r3
 80133dc:	461c      	mov	r4, r3
 80133de:	693b      	ldr	r3, [r7, #16]
 80133e0:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	461a      	mov	r2, r3
 80133e8:	4613      	mov	r3, r2
 80133ea:	009b      	lsls	r3, r3, #2
 80133ec:	4413      	add	r3, r2
 80133ee:	005b      	lsls	r3, r3, #1
 80133f0:	9301      	str	r3, [sp, #4]
 80133f2:	9400      	str	r4, [sp, #0]
 80133f4:	4602      	mov	r2, r0
 80133f6:	460b      	mov	r3, r1
 80133f8:	4869      	ldr	r0, [pc, #420]	@ (80135a0 <SVCCTL_App_Notification+0x300>)
 80133fa:	f002 ffaf 	bl	801635c <iprintf>
          DIAG(" BLE Debug ->\t>>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80133fe:	4869      	ldr	r0, [pc, #420]	@ (80135a4 <SVCCTL_App_Notification+0x304>)
 8013400:	f7ef fc4a 	bl	8002c98 <DIAG>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 8013404:	693b      	ldr	r3, [r7, #16]
 8013406:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 801340a:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801340c:	4618      	mov	r0, r3
 801340e:	f7ed f861 	bl	80004d4 <__aeabi_i2d>
 8013412:	f04f 0200 	mov.w	r2, #0
 8013416:	4b61      	ldr	r3, [pc, #388]	@ (801359c <SVCCTL_App_Notification+0x2fc>)
 8013418:	f7ed f8c6 	bl	80005a8 <__aeabi_dmul>
 801341c:	4602      	mov	r2, r0
 801341e:	460b      	mov	r3, r1
 8013420:	4610      	mov	r0, r2
 8013422:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 801342a:	b29b      	uxth	r3, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 801342c:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 801342e:	693b      	ldr	r3, [r7, #16]
 8013430:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8013434:	b29b      	uxth	r3, r3
 8013436:	461a      	mov	r2, r3
          DIAG("\t\t- Connection Interval:   %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8013438:	4613      	mov	r3, r2
 801343a:	009b      	lsls	r3, r3, #2
 801343c:	4413      	add	r3, r2
 801343e:	005b      	lsls	r3, r3, #1
 8013440:	9301      	str	r3, [sp, #4]
 8013442:	9400      	str	r4, [sp, #0]
 8013444:	4602      	mov	r2, r0
 8013446:	460b      	mov	r3, r1
 8013448:	4857      	ldr	r0, [pc, #348]	@ (80135a8 <SVCCTL_App_Notification+0x308>)
 801344a:	f7ef fc25 	bl	8002c98 <DIAG>
          break;
 801344e:	e08f      	b.n	8013570 <SVCCTL_App_Notification+0x2d0>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	3301      	adds	r3, #1
 8013454:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8013456:	4848      	ldr	r0, [pc, #288]	@ (8013578 <SVCCTL_App_Notification+0x2d8>)
 8013458:	f7ff f8b0 	bl	80125bc <DbgTraceGetFileName>
 801345c:	4601      	mov	r1, r0
 801345e:	f240 233d 	movw	r3, #573	@ 0x23d
 8013462:	4a46      	ldr	r2, [pc, #280]	@ (801357c <SVCCTL_App_Notification+0x2dc>)
 8013464:	4846      	ldr	r0, [pc, #280]	@ (8013580 <SVCCTL_App_Notification+0x2e0>)
 8013466:	f002 ff79 	bl	801635c <iprintf>
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013470:	b29b      	uxth	r3, r3
 8013472:	4619      	mov	r1, r3
 8013474:	484d      	ldr	r0, [pc, #308]	@ (80135ac <SVCCTL_App_Notification+0x30c>)
 8013476:	f002 ff71 	bl	801635c <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 801347a:	483f      	ldr	r0, [pc, #252]	@ (8013578 <SVCCTL_App_Notification+0x2d8>)
 801347c:	f7ff f89e 	bl	80125bc <DbgTraceGetFileName>
 8013480:	4601      	mov	r1, r0
 8013482:	f240 233e 	movw	r3, #574	@ 0x23e
 8013486:	4a3d      	ldr	r2, [pc, #244]	@ (801357c <SVCCTL_App_Notification+0x2dc>)
 8013488:	483d      	ldr	r0, [pc, #244]	@ (8013580 <SVCCTL_App_Notification+0x2e0>)
 801348a:	f002 ff67 	bl	801635c <iprintf>
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	7a9b      	ldrb	r3, [r3, #10]
 8013492:	4618      	mov	r0, r3
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	7a5b      	ldrb	r3, [r3, #9]
 8013498:	461c      	mov	r4, r3
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	7a1b      	ldrb	r3, [r3, #8]
 801349e:	461d      	mov	r5, r3
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	79db      	ldrb	r3, [r3, #7]
 80134a4:	461a      	mov	r2, r3
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	799b      	ldrb	r3, [r3, #6]
 80134aa:	4619      	mov	r1, r3
 80134ac:	68fb      	ldr	r3, [r7, #12]
 80134ae:	795b      	ldrb	r3, [r3, #5]
 80134b0:	9302      	str	r3, [sp, #8]
 80134b2:	9101      	str	r1, [sp, #4]
 80134b4:	9200      	str	r2, [sp, #0]
 80134b6:	462b      	mov	r3, r5
 80134b8:	4622      	mov	r2, r4
 80134ba:	4601      	mov	r1, r0
 80134bc:	483c      	ldr	r0, [pc, #240]	@ (80135b0 <SVCCTL_App_Notification+0x310>)
 80134be:	f002 ff4d 	bl	801635c <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80134c2:	482d      	ldr	r0, [pc, #180]	@ (8013578 <SVCCTL_App_Notification+0x2d8>)
 80134c4:	f7ff f87a 	bl	80125bc <DbgTraceGetFileName>
 80134c8:	4601      	mov	r1, r0
 80134ca:	f240 2345 	movw	r3, #581	@ 0x245
 80134ce:	4a2b      	ldr	r2, [pc, #172]	@ (801357c <SVCCTL_App_Notification+0x2dc>)
 80134d0:	482b      	ldr	r0, [pc, #172]	@ (8013580 <SVCCTL_App_Notification+0x2e0>)
 80134d2:	f002 ff43 	bl	801635c <iprintf>
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80134dc:	b29b      	uxth	r3, r3
 80134de:	4618      	mov	r0, r3
 80134e0:	f7ec fff8 	bl	80004d4 <__aeabi_i2d>
 80134e4:	f04f 0200 	mov.w	r2, #0
 80134e8:	4b2c      	ldr	r3, [pc, #176]	@ (801359c <SVCCTL_App_Notification+0x2fc>)
 80134ea:	f7ed f85d 	bl	80005a8 <__aeabi_dmul>
 80134ee:	4602      	mov	r2, r0
 80134f0:	460b      	mov	r3, r1
 80134f2:	4610      	mov	r0, r2
 80134f4:	4619      	mov	r1, r3
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	461c      	mov	r4, r3
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8013506:	b29b      	uxth	r3, r3
 8013508:	461a      	mov	r2, r3
 801350a:	4613      	mov	r3, r2
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	4413      	add	r3, r2
 8013510:	005b      	lsls	r3, r3, #1
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	9400      	str	r4, [sp, #0]
 8013516:	4602      	mov	r2, r0
 8013518:	460b      	mov	r3, r1
 801351a:	4821      	ldr	r0, [pc, #132]	@ (80135a0 <SVCCTL_App_Notification+0x300>)
 801351c:	f002 ff1e 	bl	801635c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8013520:	4b14      	ldr	r3, [pc, #80]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 8013522:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013526:	2b04      	cmp	r3, #4
 8013528:	d104      	bne.n	8013534 <SVCCTL_App_Notification+0x294>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801352a:	4b12      	ldr	r3, [pc, #72]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 801352c:	2206      	movs	r2, #6
 801352e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8013532:	e003      	b.n	801353c <SVCCTL_App_Notification+0x29c>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8013534:	4b0f      	ldr	r3, [pc, #60]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 8013536:	2205      	movs	r2, #5
 8013538:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8013542:	b29a      	uxth	r2, r3
 8013544:	4b0b      	ldr	r3, [pc, #44]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 8013546:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8013548:	4b11      	ldr	r3, [pc, #68]	@ (8013590 <SVCCTL_App_Notification+0x2f0>)
 801354a:	2200      	movs	r2, #0
 801354c:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 801354e:	4b09      	ldr	r3, [pc, #36]	@ (8013574 <SVCCTL_App_Notification+0x2d4>)
 8013550:	8ada      	ldrh	r2, [r3, #22]
 8013552:	4b0f      	ldr	r3, [pc, #60]	@ (8013590 <SVCCTL_App_Notification+0x2f0>)
 8013554:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8013556:	480e      	ldr	r0, [pc, #56]	@ (8013590 <SVCCTL_App_Notification+0x2f0>)
 8013558:	f000 ff28 	bl	80143ac <Custom_APP_Notification>
          tsBle.Connected = true;
 801355c:	4b0b      	ldr	r3, [pc, #44]	@ (801358c <SVCCTL_App_Notification+0x2ec>)
 801355e:	2201      	movs	r2, #1
 8013560:	701a      	strb	r2, [r3, #0]
		          HAL_Delay (250);
 8013562:	20fa      	movs	r0, #250	@ 0xfa
 8013564:	f7ef fb08 	bl	8002b78 <HAL_Delay>
		          Connection_Interval_Update_Req();
 8013568:	f000 fe30 	bl	80141cc <Connection_Interval_Update_Req>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 801356c:	e000      	b.n	8013570 <SVCCTL_App_Notification+0x2d0>
          break;
 801356e:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8013570:	e173      	b.n	801385a <SVCCTL_App_Notification+0x5ba>
 8013572:	bf00      	nop
 8013574:	200019e8 	.word	0x200019e8
 8013578:	08018b00 	.word	0x08018b00
 801357c:	0801a254 	.word	0x0801a254
 8013580:	08018b1c 	.word	0x08018b1c
 8013584:	08018c48 	.word	0x08018c48
 8013588:	08018c74 	.word	0x08018c74
 801358c:	200019d0 	.word	0x200019d0
 8013590:	20001a6c 	.word	0x20001a6c
 8013594:	20001630 	.word	0x20001630
 8013598:	08018cb0 	.word	0x08018cb0
 801359c:	3ff40000 	.word	0x3ff40000
 80135a0:	08018ce4 	.word	0x08018ce4
 80135a4:	08018d50 	.word	0x08018d50
 80135a8:	08018d94 	.word	0x08018d94
 80135ac:	08018df4 	.word	0x08018df4
 80135b0:	08018e3c 	.word	0x08018e3c
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80135b4:	6a3b      	ldr	r3, [r7, #32]
 80135b6:	3302      	adds	r3, #2
 80135b8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80135ba:	69fb      	ldr	r3, [r7, #28]
 80135bc:	881b      	ldrh	r3, [r3, #0]
 80135be:	b29b      	uxth	r3, r3
 80135c0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80135c4:	4293      	cmp	r3, r2
 80135c6:	f000 8130 	beq.w	801382a <SVCCTL_App_Notification+0x58a>
 80135ca:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80135ce:	4293      	cmp	r3, r2
 80135d0:	f300 8142 	bgt.w	8013858 <SVCCTL_App_Notification+0x5b8>
 80135d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80135d8:	d02e      	beq.n	8013638 <SVCCTL_App_Notification+0x398>
 80135da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80135de:	f300 813b 	bgt.w	8013858 <SVCCTL_App_Notification+0x5b8>
 80135e2:	2b04      	cmp	r3, #4
 80135e4:	f000 8134 	beq.w	8013850 <SVCCTL_App_Notification+0x5b0>
 80135e8:	2b04      	cmp	r3, #4
 80135ea:	f2c0 8135 	blt.w	8013858 <SVCCTL_App_Notification+0x5b8>
 80135ee:	f240 420a 	movw	r2, #1034	@ 0x40a
 80135f2:	4293      	cmp	r3, r2
 80135f4:	f300 8130 	bgt.w	8013858 <SVCCTL_App_Notification+0x5b8>
 80135f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80135fc:	f340 812c 	ble.w	8013858 <SVCCTL_App_Notification+0x5b8>
 8013600:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8013604:	2b09      	cmp	r3, #9
 8013606:	f200 8127 	bhi.w	8013858 <SVCCTL_App_Notification+0x5b8>
 801360a:	a201      	add	r2, pc, #4	@ (adr r2, 8013610 <SVCCTL_App_Notification+0x370>)
 801360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013610:	080137a5 	.word	0x080137a5
 8013614:	08013679 	.word	0x08013679
 8013618:	08013859 	.word	0x08013859
 801361c:	08013859 	.word	0x08013859
 8013620:	08013859 	.word	0x08013859
 8013624:	08013859 	.word	0x08013859
 8013628:	08013641 	.word	0x08013641
 801362c:	08013859 	.word	0x08013859
 8013630:	080136eb 	.word	0x080136eb
 8013634:	0801365d 	.word	0x0801365d
          mutex = 1;
 8013638:	4b8a      	ldr	r3, [pc, #552]	@ (8013864 <SVCCTL_App_Notification+0x5c4>)
 801363a:	2201      	movs	r2, #1
 801363c:	701a      	strb	r2, [r3, #0]
          break;
 801363e:	e108      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8013640:	4889      	ldr	r0, [pc, #548]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 8013642:	f7fe ffbb 	bl	80125bc <DbgTraceGetFileName>
 8013646:	4601      	mov	r1, r0
 8013648:	f240 23a1 	movw	r3, #673	@ 0x2a1
 801364c:	4a87      	ldr	r2, [pc, #540]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 801364e:	4888      	ldr	r0, [pc, #544]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 8013650:	f002 fe84 	bl	801635c <iprintf>
 8013654:	4887      	ldr	r0, [pc, #540]	@ (8013874 <SVCCTL_App_Notification+0x5d4>)
 8013656:	f002 fe81 	bl	801635c <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801365a:	e0fa      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 801365c:	4882      	ldr	r0, [pc, #520]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 801365e:	f7fe ffad 	bl	80125bc <DbgTraceGetFileName>
 8013662:	4601      	mov	r1, r0
 8013664:	f240 23b1 	movw	r3, #689	@ 0x2b1
 8013668:	4a80      	ldr	r2, [pc, #512]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 801366a:	4881      	ldr	r0, [pc, #516]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 801366c:	f002 fe76 	bl	801635c <iprintf>
 8013670:	4881      	ldr	r0, [pc, #516]	@ (8013878 <SVCCTL_App_Notification+0x5d8>)
 8013672:	f002 fee3 	bl	801643c <puts>
          break;
 8013676:	e0ec      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8013678:	487b      	ldr	r0, [pc, #492]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 801367a:	f7fe ff9f 	bl	80125bc <DbgTraceGetFileName>
 801367e:	4601      	mov	r1, r0
 8013680:	f44f 732e 	mov.w	r3, #696	@ 0x2b8
 8013684:	4a79      	ldr	r2, [pc, #484]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 8013686:	487a      	ldr	r0, [pc, #488]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 8013688:	f002 fe68 	bl	801635c <iprintf>
 801368c:	487b      	ldr	r0, [pc, #492]	@ (801387c <SVCCTL_App_Notification+0x5dc>)
 801368e:	f002 fed5 	bl	801643c <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8013692:	4b7b      	ldr	r3, [pc, #492]	@ (8013880 <SVCCTL_App_Notification+0x5e0>)
 8013694:	8adb      	ldrh	r3, [r3, #22]
 8013696:	497b      	ldr	r1, [pc, #492]	@ (8013884 <SVCCTL_App_Notification+0x5e4>)
 8013698:	4618      	mov	r0, r3
 801369a:	f7fd f85d 	bl	8010758 <aci_gap_pass_key_resp>
 801369e:	4603      	mov	r3, r0
 80136a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80136a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d010      	beq.n	80136ce <SVCCTL_App_Notification+0x42e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 80136ac:	486e      	ldr	r0, [pc, #440]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 80136ae:	f7fe ff85 	bl	80125bc <DbgTraceGetFileName>
 80136b2:	4601      	mov	r1, r0
 80136b4:	f240 23bd 	movw	r3, #701	@ 0x2bd
 80136b8:	4a6c      	ldr	r2, [pc, #432]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 80136ba:	486d      	ldr	r0, [pc, #436]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 80136bc:	f002 fe4e 	bl	801635c <iprintf>
 80136c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136c4:	4619      	mov	r1, r3
 80136c6:	4870      	ldr	r0, [pc, #448]	@ (8013888 <SVCCTL_App_Notification+0x5e8>)
 80136c8:	f002 fe48 	bl	801635c <iprintf>
          break;
 80136cc:	e0c1      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 80136ce:	4866      	ldr	r0, [pc, #408]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 80136d0:	f7fe ff74 	bl	80125bc <DbgTraceGetFileName>
 80136d4:	4601      	mov	r1, r0
 80136d6:	f240 23c1 	movw	r3, #705	@ 0x2c1
 80136da:	4a64      	ldr	r2, [pc, #400]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 80136dc:	4864      	ldr	r0, [pc, #400]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 80136de:	f002 fe3d 	bl	801635c <iprintf>
 80136e2:	486a      	ldr	r0, [pc, #424]	@ (801388c <SVCCTL_App_Notification+0x5ec>)
 80136e4:	f002 feaa 	bl	801643c <puts>
          break;
 80136e8:	e0b3      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80136ea:	485f      	ldr	r0, [pc, #380]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 80136ec:	f7fe ff66 	bl	80125bc <DbgTraceGetFileName>
 80136f0:	4601      	mov	r1, r0
 80136f2:	f240 23c9 	movw	r3, #713	@ 0x2c9
 80136f6:	4a5d      	ldr	r2, [pc, #372]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 80136f8:	485d      	ldr	r0, [pc, #372]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 80136fa:	f002 fe2f 	bl	801635c <iprintf>
 80136fe:	4864      	ldr	r0, [pc, #400]	@ (8013890 <SVCCTL_App_Notification+0x5f0>)
 8013700:	f002 fe9c 	bl	801643c <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8013704:	4858      	ldr	r0, [pc, #352]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 8013706:	f7fe ff59 	bl	80125bc <DbgTraceGetFileName>
 801370a:	4601      	mov	r1, r0
 801370c:	f240 23ca 	movw	r3, #714	@ 0x2ca
 8013710:	4a56      	ldr	r2, [pc, #344]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 8013712:	4857      	ldr	r0, [pc, #348]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 8013714:	f002 fe22 	bl	801635c <iprintf>
 8013718:	69fb      	ldr	r3, [r7, #28]
 801371a:	3302      	adds	r3, #2
 801371c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8013720:	4619      	mov	r1, r3
 8013722:	485c      	ldr	r0, [pc, #368]	@ (8013894 <SVCCTL_App_Notification+0x5f4>)
 8013724:	f002 fe1a 	bl	801635c <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8013728:	484f      	ldr	r0, [pc, #316]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 801372a:	f7fe ff47 	bl	80125bc <DbgTraceGetFileName>
 801372e:	4601      	mov	r1, r0
 8013730:	f44f 7333 	mov.w	r3, #716	@ 0x2cc
 8013734:	4a4d      	ldr	r2, [pc, #308]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 8013736:	484e      	ldr	r0, [pc, #312]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 8013738:	f002 fe10 	bl	801635c <iprintf>
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	3302      	adds	r3, #2
 8013740:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8013744:	4619      	mov	r1, r3
 8013746:	4854      	ldr	r0, [pc, #336]	@ (8013898 <SVCCTL_App_Notification+0x5f8>)
 8013748:	f002 fe08 	bl	801635c <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 801374c:	4b4c      	ldr	r3, [pc, #304]	@ (8013880 <SVCCTL_App_Notification+0x5e0>)
 801374e:	8adb      	ldrh	r3, [r3, #22]
 8013750:	2101      	movs	r1, #1
 8013752:	4618      	mov	r0, r3
 8013754:	f7fd f9aa 	bl	8010aac <aci_gap_numeric_comparison_value_confirm_yesno>
 8013758:	4603      	mov	r3, r0
 801375a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 801375e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013762:	2b00      	cmp	r3, #0
 8013764:	d010      	beq.n	8013788 <SVCCTL_App_Notification+0x4e8>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8013766:	4840      	ldr	r0, [pc, #256]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 8013768:	f7fe ff28 	bl	80125bc <DbgTraceGetFileName>
 801376c:	4601      	mov	r1, r0
 801376e:	f240 23d1 	movw	r3, #721	@ 0x2d1
 8013772:	4a3e      	ldr	r2, [pc, #248]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 8013774:	483e      	ldr	r0, [pc, #248]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 8013776:	f002 fdf1 	bl	801635c <iprintf>
 801377a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801377e:	4619      	mov	r1, r3
 8013780:	4846      	ldr	r0, [pc, #280]	@ (801389c <SVCCTL_App_Notification+0x5fc>)
 8013782:	f002 fdeb 	bl	801635c <iprintf>
          break;
 8013786:	e064      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8013788:	4837      	ldr	r0, [pc, #220]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 801378a:	f7fe ff17 	bl	80125bc <DbgTraceGetFileName>
 801378e:	4601      	mov	r1, r0
 8013790:	f240 23d5 	movw	r3, #725	@ 0x2d5
 8013794:	4a35      	ldr	r2, [pc, #212]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 8013796:	4836      	ldr	r0, [pc, #216]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 8013798:	f002 fde0 	bl	801635c <iprintf>
 801379c:	4840      	ldr	r0, [pc, #256]	@ (80138a0 <SVCCTL_App_Notification+0x600>)
 801379e:	f002 fe4d 	bl	801643c <puts>
          break;
 80137a2:	e056      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	3302      	adds	r3, #2
 80137a8:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80137aa:	482f      	ldr	r0, [pc, #188]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 80137ac:	f7fe ff06 	bl	80125bc <DbgTraceGetFileName>
 80137b0:	4601      	mov	r1, r0
 80137b2:	f240 23df 	movw	r3, #735	@ 0x2df
 80137b6:	4a2d      	ldr	r2, [pc, #180]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 80137b8:	482d      	ldr	r0, [pc, #180]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 80137ba:	f002 fdcf 	bl	801635c <iprintf>
 80137be:	4839      	ldr	r0, [pc, #228]	@ (80138a4 <SVCCTL_App_Notification+0x604>)
 80137c0:	f002 fe3c 	bl	801643c <puts>
          if (p_pairing_complete->Status != 0)
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	789b      	ldrb	r3, [r3, #2]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d013      	beq.n	80137f4 <SVCCTL_App_Notification+0x554>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 80137cc:	4826      	ldr	r0, [pc, #152]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 80137ce:	f7fe fef5 	bl	80125bc <DbgTraceGetFileName>
 80137d2:	4601      	mov	r1, r0
 80137d4:	f240 23e2 	movw	r3, #738	@ 0x2e2
 80137d8:	4a24      	ldr	r2, [pc, #144]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 80137da:	4825      	ldr	r0, [pc, #148]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 80137dc:	f002 fdbe 	bl	801635c <iprintf>
 80137e0:	69bb      	ldr	r3, [r7, #24]
 80137e2:	789b      	ldrb	r3, [r3, #2]
 80137e4:	4619      	mov	r1, r3
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	78db      	ldrb	r3, [r3, #3]
 80137ea:	461a      	mov	r2, r3
 80137ec:	482e      	ldr	r0, [pc, #184]	@ (80138a8 <SVCCTL_App_Notification+0x608>)
 80137ee:	f002 fdb5 	bl	801635c <iprintf>
 80137f2:	e00c      	b.n	801380e <SVCCTL_App_Notification+0x56e>
            APP_DBG_MSG("     - Pairing Success\n");
 80137f4:	481c      	ldr	r0, [pc, #112]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 80137f6:	f7fe fee1 	bl	80125bc <DbgTraceGetFileName>
 80137fa:	4601      	mov	r1, r0
 80137fc:	f240 23e6 	movw	r3, #742	@ 0x2e6
 8013800:	4a1a      	ldr	r2, [pc, #104]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 8013802:	481b      	ldr	r0, [pc, #108]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 8013804:	f002 fdaa 	bl	801635c <iprintf>
 8013808:	4828      	ldr	r0, [pc, #160]	@ (80138ac <SVCCTL_App_Notification+0x60c>)
 801380a:	f002 fe17 	bl	801643c <puts>
          APP_DBG_MSG("\n");
 801380e:	4816      	ldr	r0, [pc, #88]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 8013810:	f7fe fed4 	bl	80125bc <DbgTraceGetFileName>
 8013814:	4601      	mov	r1, r0
 8013816:	f44f 733a 	mov.w	r3, #744	@ 0x2e8
 801381a:	4a14      	ldr	r2, [pc, #80]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 801381c:	4814      	ldr	r0, [pc, #80]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 801381e:	f002 fd9d 	bl	801635c <iprintf>
 8013822:	200a      	movs	r0, #10
 8013824:	f002 fdac 	bl	8016380 <putchar>
          break;
 8013828:	e013      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 801382a:	480f      	ldr	r0, [pc, #60]	@ (8013868 <SVCCTL_App_Notification+0x5c8>)
 801382c:	f7fe fec6 	bl	80125bc <DbgTraceGetFileName>
 8013830:	4601      	mov	r1, r0
 8013832:	f240 23f1 	movw	r3, #753	@ 0x2f1
 8013836:	4a0d      	ldr	r2, [pc, #52]	@ (801386c <SVCCTL_App_Notification+0x5cc>)
 8013838:	480d      	ldr	r0, [pc, #52]	@ (8013870 <SVCCTL_App_Notification+0x5d0>)
 801383a:	f002 fd8f 	bl	801635c <iprintf>
 801383e:	481c      	ldr	r0, [pc, #112]	@ (80138b0 <SVCCTL_App_Notification+0x610>)
 8013840:	f002 fd8c 	bl	801635c <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8013844:	4b0e      	ldr	r3, [pc, #56]	@ (8013880 <SVCCTL_App_Notification+0x5e0>)
 8013846:	8adb      	ldrh	r3, [r3, #22]
 8013848:	4618      	mov	r0, r3
 801384a:	f7fd fc42 	bl	80110d2 <aci_gatt_confirm_indication>
        break;
 801384e:	e000      	b.n	8013852 <SVCCTL_App_Notification+0x5b2>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8013850:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013852:	e001      	b.n	8013858 <SVCCTL_App_Notification+0x5b8>
      break;
 8013854:	bf00      	nop
 8013856:	e000      	b.n	801385a <SVCCTL_App_Notification+0x5ba>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8013858:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 801385a:	2301      	movs	r3, #1
}
 801385c:	4618      	mov	r0, r3
 801385e:	3728      	adds	r7, #40	@ 0x28
 8013860:	46bd      	mov	sp, r7
 8013862:	bdb0      	pop	{r4, r5, r7, pc}
 8013864:	20001a71 	.word	0x20001a71
 8013868:	08018b00 	.word	0x08018b00
 801386c:	0801a254 	.word	0x0801a254
 8013870:	08018b1c 	.word	0x08018b1c
 8013874:	08018e8c 	.word	0x08018e8c
 8013878:	08018eb4 	.word	0x08018eb4
 801387c:	08018ee4 	.word	0x08018ee4
 8013880:	200019e8 	.word	0x200019e8
 8013884:	0001b207 	.word	0x0001b207
 8013888:	08018f0c 	.word	0x08018f0c
 801388c:	08018f40 	.word	0x08018f40
 8013890:	08018f68 	.word	0x08018f68
 8013894:	08018f9c 	.word	0x08018f9c
 8013898:	08018fb8 	.word	0x08018fb8
 801389c:	08018fd0 	.word	0x08018fd0
 80138a0:	08019020 	.word	0x08019020
 80138a4:	08019068 	.word	0x08019068
 80138a8:	08019094 	.word	0x08019094
 80138ac:	080190d0 	.word	0x080190d0
 80138b0:	080190e8 	.word	0x080190e8

080138b4 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 80138ba:	4b06      	ldr	r3, [pc, #24]	@ (80138d4 <Ble_Tl_Init+0x20>)
 80138bc:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 80138be:	4b06      	ldr	r3, [pc, #24]	@ (80138d8 <Ble_Tl_Init+0x24>)
 80138c0:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 80138c2:	463b      	mov	r3, r7
 80138c4:	4619      	mov	r1, r3
 80138c6:	4805      	ldr	r0, [pc, #20]	@ (80138dc <Ble_Tl_Init+0x28>)
 80138c8:	f7fe f95c 	bl	8011b84 <hci_init>

  return;
 80138cc:	bf00      	nop
}
 80138ce:	3708      	adds	r7, #8
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}
 80138d4:	200300d8 	.word	0x200300d8
 80138d8:	08014275 	.word	0x08014275
 80138dc:	0801423d 	.word	0x0801423d

080138e0 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 80138e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138e2:	b08d      	sub	sp, #52	@ 0x34
 80138e4:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 80138e6:	2300      	movs	r3, #0
 80138e8:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80138ea:	2392      	movs	r3, #146	@ 0x92
 80138ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 80138ee:	48a3      	ldr	r0, [pc, #652]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80138f0:	f7fe fe64 	bl	80125bc <DbgTraceGetFileName>
 80138f4:	4601      	mov	r1, r0
 80138f6:	f240 332e 	movw	r3, #814	@ 0x32e
 80138fa:	4aa1      	ldr	r2, [pc, #644]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80138fc:	48a1      	ldr	r0, [pc, #644]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80138fe:	f002 fd2d 	bl	801635c <iprintf>
 8013902:	48a1      	ldr	r0, [pc, #644]	@ (8013b88 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8013904:	f002 fd9a 	bl	801643c <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8013908:	f7fd fdcd 	bl	80114a6 <hci_reset>
 801390c:	4603      	mov	r3, r0
 801390e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013910:	7dfb      	ldrb	r3, [r7, #23]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d00f      	beq.n	8013936 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8013916:	4899      	ldr	r0, [pc, #612]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013918:	f7fe fe50 	bl	80125bc <DbgTraceGetFileName>
 801391c:	4601      	mov	r1, r0
 801391e:	f240 3337 	movw	r3, #823	@ 0x337
 8013922:	4a97      	ldr	r2, [pc, #604]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013924:	4897      	ldr	r0, [pc, #604]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013926:	f002 fd19 	bl	801635c <iprintf>
 801392a:	7dfb      	ldrb	r3, [r7, #23]
 801392c:	4619      	mov	r1, r3
 801392e:	4897      	ldr	r0, [pc, #604]	@ (8013b8c <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8013930:	f002 fd14 	bl	801635c <iprintf>
 8013934:	e00c      	b.n	8013950 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8013936:	4891      	ldr	r0, [pc, #580]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013938:	f7fe fe40 	bl	80125bc <DbgTraceGetFileName>
 801393c:	4601      	mov	r1, r0
 801393e:	f240 333b 	movw	r3, #827	@ 0x33b
 8013942:	4a8f      	ldr	r2, [pc, #572]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013944:	488f      	ldr	r0, [pc, #572]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013946:	f002 fd09 	bl	801635c <iprintf>
 801394a:	4891      	ldr	r0, [pc, #580]	@ (8013b90 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 801394c:	f002 fd76 	bl	801643c <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8013950:	f000 fad8 	bl	8013f04 <BleGetBdAddress>
 8013954:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8013956:	693a      	ldr	r2, [r7, #16]
 8013958:	2106      	movs	r1, #6
 801395a:	2000      	movs	r0, #0
 801395c:	f7fd fc63 	bl	8011226 <aci_hal_write_config_data>
 8013960:	4603      	mov	r3, r0
 8013962:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013964:	7dfb      	ldrb	r3, [r7, #23]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d00f      	beq.n	801398a <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 801396a:	4884      	ldr	r0, [pc, #528]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801396c:	f7fe fe26 	bl	80125bc <DbgTraceGetFileName>
 8013970:	4601      	mov	r1, r0
 8013972:	f240 3345 	movw	r3, #837	@ 0x345
 8013976:	4a82      	ldr	r2, [pc, #520]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013978:	4882      	ldr	r0, [pc, #520]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801397a:	f002 fcef 	bl	801635c <iprintf>
 801397e:	7dfb      	ldrb	r3, [r7, #23]
 8013980:	4619      	mov	r1, r3
 8013982:	4884      	ldr	r0, [pc, #528]	@ (8013b94 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8013984:	f002 fcea 	bl	801635c <iprintf>
 8013988:	e035      	b.n	80139f6 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 801398a:	487c      	ldr	r0, [pc, #496]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801398c:	f7fe fe16 	bl	80125bc <DbgTraceGetFileName>
 8013990:	4601      	mov	r1, r0
 8013992:	f240 3349 	movw	r3, #841	@ 0x349
 8013996:	4a7a      	ldr	r2, [pc, #488]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013998:	487a      	ldr	r0, [pc, #488]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 801399a:	f002 fcdf 	bl	801635c <iprintf>
 801399e:	487e      	ldr	r0, [pc, #504]	@ (8013b98 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 80139a0:	f002 fd4c 	bl	801643c <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80139a4:	4875      	ldr	r0, [pc, #468]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80139a6:	f7fe fe09 	bl	80125bc <DbgTraceGetFileName>
 80139aa:	4601      	mov	r1, r0
 80139ac:	f240 334a 	movw	r3, #842	@ 0x34a
 80139b0:	4a73      	ldr	r2, [pc, #460]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80139b2:	4874      	ldr	r0, [pc, #464]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80139b4:	f002 fcd2 	bl	801635c <iprintf>
 80139b8:	693b      	ldr	r3, [r7, #16]
 80139ba:	3305      	adds	r3, #5
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	4618      	mov	r0, r3
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	3304      	adds	r3, #4
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	461c      	mov	r4, r3
 80139c8:	693b      	ldr	r3, [r7, #16]
 80139ca:	3303      	adds	r3, #3
 80139cc:	781b      	ldrb	r3, [r3, #0]
 80139ce:	461d      	mov	r5, r3
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	3302      	adds	r3, #2
 80139d4:	781b      	ldrb	r3, [r3, #0]
 80139d6:	461a      	mov	r2, r3
 80139d8:	693b      	ldr	r3, [r7, #16]
 80139da:	3301      	adds	r3, #1
 80139dc:	781b      	ldrb	r3, [r3, #0]
 80139de:	4619      	mov	r1, r3
 80139e0:	693b      	ldr	r3, [r7, #16]
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	9302      	str	r3, [sp, #8]
 80139e6:	9101      	str	r1, [sp, #4]
 80139e8:	9200      	str	r2, [sp, #0]
 80139ea:	462b      	mov	r3, r5
 80139ec:	4622      	mov	r2, r4
 80139ee:	4601      	mov	r1, r0
 80139f0:	486a      	ldr	r0, [pc, #424]	@ (8013b9c <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 80139f2:	f002 fcb3 	bl	801635c <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80139f6:	4a6a      	ldr	r2, [pc, #424]	@ (8013ba0 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80139f8:	2110      	movs	r1, #16
 80139fa:	2018      	movs	r0, #24
 80139fc:	f7fd fc13 	bl	8011226 <aci_hal_write_config_data>
 8013a00:	4603      	mov	r3, r0
 8013a02:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013a04:	7dfb      	ldrb	r3, [r7, #23]
 8013a06:	2b00      	cmp	r3, #0
 8013a08:	d00f      	beq.n	8013a2a <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8013a0a:	485c      	ldr	r0, [pc, #368]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a0c:	f7fe fdd6 	bl	80125bc <DbgTraceGetFileName>
 8013a10:	4601      	mov	r1, r0
 8013a12:	f44f 7365 	mov.w	r3, #916	@ 0x394
 8013a16:	4a5a      	ldr	r2, [pc, #360]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a18:	485a      	ldr	r0, [pc, #360]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a1a:	f002 fc9f 	bl	801635c <iprintf>
 8013a1e:	7dfb      	ldrb	r3, [r7, #23]
 8013a20:	4619      	mov	r1, r3
 8013a22:	4860      	ldr	r0, [pc, #384]	@ (8013ba4 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8013a24:	f002 fc9a 	bl	801635c <iprintf>
 8013a28:	e00c      	b.n	8013a44 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8013a2a:	4854      	ldr	r0, [pc, #336]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a2c:	f7fe fdc6 	bl	80125bc <DbgTraceGetFileName>
 8013a30:	4601      	mov	r1, r0
 8013a32:	f44f 7366 	mov.w	r3, #920	@ 0x398
 8013a36:	4a52      	ldr	r2, [pc, #328]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a38:	4852      	ldr	r0, [pc, #328]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a3a:	f002 fc8f 	bl	801635c <iprintf>
 8013a3e:	485a      	ldr	r0, [pc, #360]	@ (8013ba8 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8013a40:	f002 fcfc 	bl	801643c <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8013a44:	4a59      	ldr	r2, [pc, #356]	@ (8013bac <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8013a46:	2110      	movs	r1, #16
 8013a48:	2008      	movs	r0, #8
 8013a4a:	f7fd fbec 	bl	8011226 <aci_hal_write_config_data>
 8013a4e:	4603      	mov	r3, r0
 8013a50:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013a52:	7dfb      	ldrb	r3, [r7, #23]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d00f      	beq.n	8013a78 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8013a58:	4848      	ldr	r0, [pc, #288]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a5a:	f7fe fdaf 	bl	80125bc <DbgTraceGetFileName>
 8013a5e:	4601      	mov	r1, r0
 8013a60:	f240 33a1 	movw	r3, #929	@ 0x3a1
 8013a64:	4a46      	ldr	r2, [pc, #280]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a66:	4847      	ldr	r0, [pc, #284]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a68:	f002 fc78 	bl	801635c <iprintf>
 8013a6c:	7dfb      	ldrb	r3, [r7, #23]
 8013a6e:	4619      	mov	r1, r3
 8013a70:	484f      	ldr	r0, [pc, #316]	@ (8013bb0 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8013a72:	f002 fc73 	bl	801635c <iprintf>
 8013a76:	e00c      	b.n	8013a92 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8013a78:	4840      	ldr	r0, [pc, #256]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013a7a:	f7fe fd9f 	bl	80125bc <DbgTraceGetFileName>
 8013a7e:	4601      	mov	r1, r0
 8013a80:	f240 33a5 	movw	r3, #933	@ 0x3a5
 8013a84:	4a3e      	ldr	r2, [pc, #248]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013a86:	483f      	ldr	r0, [pc, #252]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013a88:	f002 fc68 	bl	801635c <iprintf>
 8013a8c:	4849      	ldr	r0, [pc, #292]	@ (8013bb4 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8013a8e:	f002 fcd5 	bl	801643c <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8013a92:	211c      	movs	r1, #28
 8013a94:	2001      	movs	r0, #1
 8013a96:	f7fd fc4b 	bl	8011330 <aci_hal_set_tx_power_level>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013a9e:	7dfb      	ldrb	r3, [r7, #23]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d00f      	beq.n	8013ac4 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8013aa4:	4835      	ldr	r0, [pc, #212]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013aa6:	f7fe fd89 	bl	80125bc <DbgTraceGetFileName>
 8013aaa:	4601      	mov	r1, r0
 8013aac:	f240 33ae 	movw	r3, #942	@ 0x3ae
 8013ab0:	4a33      	ldr	r2, [pc, #204]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013ab2:	4834      	ldr	r0, [pc, #208]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013ab4:	f002 fc52 	bl	801635c <iprintf>
 8013ab8:	7dfb      	ldrb	r3, [r7, #23]
 8013aba:	4619      	mov	r1, r3
 8013abc:	483e      	ldr	r0, [pc, #248]	@ (8013bb8 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8013abe:	f002 fc4d 	bl	801635c <iprintf>
 8013ac2:	e00c      	b.n	8013ade <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8013ac4:	482d      	ldr	r0, [pc, #180]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013ac6:	f7fe fd79 	bl	80125bc <DbgTraceGetFileName>
 8013aca:	4601      	mov	r1, r0
 8013acc:	f240 33b2 	movw	r3, #946	@ 0x3b2
 8013ad0:	4a2b      	ldr	r2, [pc, #172]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013ad2:	482c      	ldr	r0, [pc, #176]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013ad4:	f002 fc42 	bl	801635c <iprintf>
 8013ad8:	4838      	ldr	r0, [pc, #224]	@ (8013bbc <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8013ada:	f002 fcaf 	bl	801643c <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8013ade:	f7fd f84c 	bl	8010b7a <aci_gatt_init>
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013ae6:	7dfb      	ldrb	r3, [r7, #23]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d00f      	beq.n	8013b0c <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8013aec:	4823      	ldr	r0, [pc, #140]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013aee:	f7fe fd65 	bl	80125bc <DbgTraceGetFileName>
 8013af2:	4601      	mov	r1, r0
 8013af4:	f240 33bb 	movw	r3, #955	@ 0x3bb
 8013af8:	4a21      	ldr	r2, [pc, #132]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013afa:	4822      	ldr	r0, [pc, #136]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013afc:	f002 fc2e 	bl	801635c <iprintf>
 8013b00:	7dfb      	ldrb	r3, [r7, #23]
 8013b02:	4619      	mov	r1, r3
 8013b04:	482e      	ldr	r0, [pc, #184]	@ (8013bc0 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8013b06:	f002 fc29 	bl	801635c <iprintf>
 8013b0a:	e00c      	b.n	8013b26 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8013b0c:	481b      	ldr	r0, [pc, #108]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013b0e:	f7fe fd55 	bl	80125bc <DbgTraceGetFileName>
 8013b12:	4601      	mov	r1, r0
 8013b14:	f240 33bf 	movw	r3, #959	@ 0x3bf
 8013b18:	4a19      	ldr	r2, [pc, #100]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013b1a:	481a      	ldr	r0, [pc, #104]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013b1c:	f002 fc1e 	bl	801635c <iprintf>
 8013b20:	4828      	ldr	r0, [pc, #160]	@ (8013bc4 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8013b22:	f002 fc8b 	bl	801643c <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8013b26:	2300      	movs	r3, #0
 8013b28:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8013b2a:	7bfb      	ldrb	r3, [r7, #15]
 8013b2c:	f043 0301 	orr.w	r3, r3, #1
 8013b30:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8013b32:	7bfb      	ldrb	r3, [r7, #15]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d069      	beq.n	8013c0c <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8013b38:	4b23      	ldr	r3, [pc, #140]	@ (8013bc8 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8013b3a:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8013b3c:	1dba      	adds	r2, r7, #6
 8013b3e:	7bf8      	ldrb	r0, [r7, #15]
 8013b40:	1cbb      	adds	r3, r7, #2
 8013b42:	9301      	str	r3, [sp, #4]
 8013b44:	1d3b      	adds	r3, r7, #4
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	4613      	mov	r3, r2
 8013b4a:	2209      	movs	r2, #9
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	f7fc fe6a 	bl	8010826 <aci_gap_init>
 8013b52:	4603      	mov	r3, r0
 8013b54:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8013b56:	7dfb      	ldrb	r3, [r7, #23]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d039      	beq.n	8013bd0 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8013b5c:	4807      	ldr	r0, [pc, #28]	@ (8013b7c <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8013b5e:	f7fe fd2d 	bl	80125bc <DbgTraceGetFileName>
 8013b62:	4601      	mov	r1, r0
 8013b64:	f240 33df 	movw	r3, #991	@ 0x3df
 8013b68:	4a05      	ldr	r2, [pc, #20]	@ (8013b80 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8013b6a:	4806      	ldr	r0, [pc, #24]	@ (8013b84 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8013b6c:	f002 fbf6 	bl	801635c <iprintf>
 8013b70:	7dfb      	ldrb	r3, [r7, #23]
 8013b72:	4619      	mov	r1, r3
 8013b74:	4815      	ldr	r0, [pc, #84]	@ (8013bcc <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8013b76:	f002 fbf1 	bl	801635c <iprintf>
 8013b7a:	e036      	b.n	8013bea <Ble_Hci_Gap_Gatt_Init+0x30a>
 8013b7c:	08018b00 	.word	0x08018b00
 8013b80:	0801a26c 	.word	0x0801a26c
 8013b84:	08018b1c 	.word	0x08018b1c
 8013b88:	08019110 	.word	0x08019110
 8013b8c:	0801913c 	.word	0x0801913c
 8013b90:	0801916c 	.word	0x0801916c
 8013b94:	0801918c 	.word	0x0801918c
 8013b98:	080191e8 	.word	0x080191e8
 8013b9c:	08019234 	.word	0x08019234
 8013ba0:	0801a224 	.word	0x0801a224
 8013ba4:	08019270 	.word	0x08019270
 8013ba8:	080192c8 	.word	0x080192c8
 8013bac:	0801a234 	.word	0x0801a234
 8013bb0:	08019310 	.word	0x08019310
 8013bb4:	08019368 	.word	0x08019368
 8013bb8:	080193b0 	.word	0x080193b0
 8013bbc:	080193f0 	.word	0x080193f0
 8013bc0:	08019420 	.word	0x08019420
 8013bc4:	08019454 	.word	0x08019454
 8013bc8:	08019478 	.word	0x08019478
 8013bcc:	08019484 	.word	0x08019484
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8013bd0:	487e      	ldr	r0, [pc, #504]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013bd2:	f7fe fcf3 	bl	80125bc <DbgTraceGetFileName>
 8013bd6:	4601      	mov	r1, r0
 8013bd8:	f240 33e3 	movw	r3, #995	@ 0x3e3
 8013bdc:	4a7c      	ldr	r2, [pc, #496]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013bde:	487d      	ldr	r0, [pc, #500]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013be0:	f002 fbbc 	bl	801635c <iprintf>
 8013be4:	487c      	ldr	r0, [pc, #496]	@ (8013dd8 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8013be6:	f002 fc29 	bl	801643c <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8013bea:	88fc      	ldrh	r4, [r7, #6]
 8013bec:	88bd      	ldrh	r5, [r7, #4]
 8013bee:	68b8      	ldr	r0, [r7, #8]
 8013bf0:	f7ec fac6 	bl	8000180 <strlen>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	b2da      	uxtb	r2, r3
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	9300      	str	r3, [sp, #0]
 8013bfc:	4613      	mov	r3, r2
 8013bfe:	2200      	movs	r2, #0
 8013c00:	4629      	mov	r1, r5
 8013c02:	4620      	mov	r0, r4
 8013c04:	f7fd f9bc 	bl	8010f80 <aci_gatt_update_char_value>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8013c0c:	88f8      	ldrh	r0, [r7, #6]
 8013c0e:	8879      	ldrh	r1, [r7, #2]
 8013c10:	463b      	mov	r3, r7
 8013c12:	9300      	str	r3, [sp, #0]
 8013c14:	2302      	movs	r3, #2
 8013c16:	2200      	movs	r2, #0
 8013c18:	f7fd f9b2 	bl	8010f80 <aci_gatt_update_char_value>
 8013c1c:	4603      	mov	r3, r0
 8013c1e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8013c20:	2202      	movs	r2, #2
 8013c22:	2102      	movs	r1, #2
 8013c24:	2000      	movs	r0, #0
 8013c26:	f7fd fc62 	bl	80114ee <hci_le_set_default_phy>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013c2e:	7dfb      	ldrb	r3, [r7, #23]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d00f      	beq.n	8013c54 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8013c34:	4865      	ldr	r0, [pc, #404]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013c36:	f7fe fcc1 	bl	80125bc <DbgTraceGetFileName>
 8013c3a:	4601      	mov	r1, r0
 8013c3c:	f240 4305 	movw	r3, #1029	@ 0x405
 8013c40:	4a63      	ldr	r2, [pc, #396]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013c42:	4864      	ldr	r0, [pc, #400]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013c44:	f002 fb8a 	bl	801635c <iprintf>
 8013c48:	7dfb      	ldrb	r3, [r7, #23]
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	4863      	ldr	r0, [pc, #396]	@ (8013ddc <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8013c4e:	f002 fb85 	bl	801635c <iprintf>
 8013c52:	e00c      	b.n	8013c6e <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8013c54:	485d      	ldr	r0, [pc, #372]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013c56:	f7fe fcb1 	bl	80125bc <DbgTraceGetFileName>
 8013c5a:	4601      	mov	r1, r0
 8013c5c:	f240 4309 	movw	r3, #1033	@ 0x409
 8013c60:	4a5b      	ldr	r2, [pc, #364]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013c62:	485c      	ldr	r0, [pc, #368]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013c64:	f002 fb7a 	bl	801635c <iprintf>
 8013c68:	485d      	ldr	r0, [pc, #372]	@ (8013de0 <Ble_Hci_Gap_Gatt_Init+0x500>)
 8013c6a:	f002 fbe7 	bl	801643c <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8013c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013c70:	2201      	movs	r2, #1
 8013c72:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8013c74:	4b5b      	ldr	r3, [pc, #364]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f7fc fc55 	bl	8010528 <aci_gap_set_io_capability>
 8013c7e:	4603      	mov	r3, r0
 8013c80:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8013c82:	7dfb      	ldrb	r3, [r7, #23]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d00f      	beq.n	8013ca8 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8013c88:	4850      	ldr	r0, [pc, #320]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013c8a:	f7fe fc97 	bl	80125bc <DbgTraceGetFileName>
 8013c8e:	4601      	mov	r1, r0
 8013c90:	f240 4313 	movw	r3, #1043	@ 0x413
 8013c94:	4a4e      	ldr	r2, [pc, #312]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013c96:	484f      	ldr	r0, [pc, #316]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013c98:	f002 fb60 	bl	801635c <iprintf>
 8013c9c:	7dfb      	ldrb	r3, [r7, #23]
 8013c9e:	4619      	mov	r1, r3
 8013ca0:	4851      	ldr	r0, [pc, #324]	@ (8013de8 <Ble_Hci_Gap_Gatt_Init+0x508>)
 8013ca2:	f002 fb5b 	bl	801635c <iprintf>
 8013ca6:	e00c      	b.n	8013cc2 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8013ca8:	4848      	ldr	r0, [pc, #288]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013caa:	f7fe fc87 	bl	80125bc <DbgTraceGetFileName>
 8013cae:	4601      	mov	r1, r0
 8013cb0:	f240 4317 	movw	r3, #1047	@ 0x417
 8013cb4:	4a46      	ldr	r2, [pc, #280]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013cb6:	4847      	ldr	r0, [pc, #284]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013cb8:	f002 fb50 	bl	801635c <iprintf>
 8013cbc:	484b      	ldr	r0, [pc, #300]	@ (8013dec <Ble_Hci_Gap_Gatt_Init+0x50c>)
 8013cbe:	f002 fbbd 	bl	801643c <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8013cc2:	4b48      	ldr	r3, [pc, #288]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cc4:	2201      	movs	r2, #1
 8013cc6:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8013cc8:	4b46      	ldr	r3, [pc, #280]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cca:	2208      	movs	r2, #8
 8013ccc:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8013cce:	4b45      	ldr	r3, [pc, #276]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cd0:	2210      	movs	r2, #16
 8013cd2:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8013cd4:	4b43      	ldr	r3, [pc, #268]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8013cda:	4b42      	ldr	r3, [pc, #264]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cdc:	4a44      	ldr	r2, [pc, #272]	@ (8013df0 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8013cde:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8013ce0:	4b40      	ldr	r3, [pc, #256]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8013ce6:	4b3f      	ldr	r3, [pc, #252]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013ce8:	789c      	ldrb	r4, [r3, #2]
 8013cea:	4b3e      	ldr	r3, [pc, #248]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cec:	785d      	ldrb	r5, [r3, #1]
 8013cee:	4b3d      	ldr	r3, [pc, #244]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cf0:	791b      	ldrb	r3, [r3, #4]
 8013cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cf4:	7952      	ldrb	r2, [r2, #5]
 8013cf6:	493b      	ldr	r1, [pc, #236]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cf8:	78c9      	ldrb	r1, [r1, #3]
 8013cfa:	483a      	ldr	r0, [pc, #232]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013cfc:	6880      	ldr	r0, [r0, #8]
 8013cfe:	2600      	movs	r6, #0
 8013d00:	9604      	str	r6, [sp, #16]
 8013d02:	9003      	str	r0, [sp, #12]
 8013d04:	9102      	str	r1, [sp, #8]
 8013d06:	9201      	str	r2, [sp, #4]
 8013d08:	9300      	str	r3, [sp, #0]
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	4629      	mov	r1, r5
 8013d10:	4620      	mov	r0, r4
 8013d12:	f7fc fc5d 	bl	80105d0 <aci_gap_set_authentication_requirement>
 8013d16:	4603      	mov	r3, r0
 8013d18:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8013d1a:	7dfb      	ldrb	r3, [r7, #23]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d00f      	beq.n	8013d40 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8013d20:	482a      	ldr	r0, [pc, #168]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d22:	f7fe fc4b 	bl	80125bc <DbgTraceGetFileName>
 8013d26:	4601      	mov	r1, r0
 8013d28:	f240 4332 	movw	r3, #1074	@ 0x432
 8013d2c:	4a28      	ldr	r2, [pc, #160]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d2e:	4829      	ldr	r0, [pc, #164]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d30:	f002 fb14 	bl	801635c <iprintf>
 8013d34:	7dfb      	ldrb	r3, [r7, #23]
 8013d36:	4619      	mov	r1, r3
 8013d38:	482e      	ldr	r0, [pc, #184]	@ (8013df4 <Ble_Hci_Gap_Gatt_Init+0x514>)
 8013d3a:	f002 fb0f 	bl	801635c <iprintf>
 8013d3e:	e00c      	b.n	8013d5a <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8013d40:	4822      	ldr	r0, [pc, #136]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d42:	f7fe fc3b 	bl	80125bc <DbgTraceGetFileName>
 8013d46:	4601      	mov	r1, r0
 8013d48:	f240 4336 	movw	r3, #1078	@ 0x436
 8013d4c:	4a20      	ldr	r2, [pc, #128]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d4e:	4821      	ldr	r0, [pc, #132]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d50:	f002 fb04 	bl	801635c <iprintf>
 8013d54:	4828      	ldr	r0, [pc, #160]	@ (8013df8 <Ble_Hci_Gap_Gatt_Init+0x518>)
 8013d56:	f002 fb71 	bl	801643c <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8013d5a:	4b22      	ldr	r3, [pc, #136]	@ (8013de4 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8013d5c:	789b      	ldrb	r3, [r3, #2]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d023      	beq.n	8013daa <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 8013d62:	f7fc fe7f 	bl	8010a64 <aci_gap_configure_filter_accept_list>
 8013d66:	4603      	mov	r3, r0
 8013d68:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8013d6a:	7dfb      	ldrb	r3, [r7, #23]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d00f      	beq.n	8013d90 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8013d70:	4816      	ldr	r0, [pc, #88]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d72:	f7fe fc23 	bl	80125bc <DbgTraceGetFileName>
 8013d76:	4601      	mov	r1, r0
 8013d78:	f240 4341 	movw	r3, #1089	@ 0x441
 8013d7c:	4a14      	ldr	r2, [pc, #80]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d7e:	4815      	ldr	r0, [pc, #84]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013d80:	f002 faec 	bl	801635c <iprintf>
 8013d84:	7dfb      	ldrb	r3, [r7, #23]
 8013d86:	4619      	mov	r1, r3
 8013d88:	481c      	ldr	r0, [pc, #112]	@ (8013dfc <Ble_Hci_Gap_Gatt_Init+0x51c>)
 8013d8a:	f002 fae7 	bl	801635c <iprintf>
 8013d8e:	e00c      	b.n	8013daa <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8013d90:	480e      	ldr	r0, [pc, #56]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013d92:	f7fe fc13 	bl	80125bc <DbgTraceGetFileName>
 8013d96:	4601      	mov	r1, r0
 8013d98:	f240 4345 	movw	r3, #1093	@ 0x445
 8013d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013d9e:	480d      	ldr	r0, [pc, #52]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013da0:	f002 fadc 	bl	801635c <iprintf>
 8013da4:	4816      	ldr	r0, [pc, #88]	@ (8013e00 <Ble_Hci_Gap_Gatt_Init+0x520>)
 8013da6:	f002 fb49 	bl	801643c <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8013daa:	4808      	ldr	r0, [pc, #32]	@ (8013dcc <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8013dac:	f7fe fc06 	bl	80125bc <DbgTraceGetFileName>
 8013db0:	4601      	mov	r1, r0
 8013db2:	f44f 6389 	mov.w	r3, #1096	@ 0x448
 8013db6:	4a06      	ldr	r2, [pc, #24]	@ (8013dd0 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8013db8:	4806      	ldr	r0, [pc, #24]	@ (8013dd4 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8013dba:	f002 facf 	bl	801635c <iprintf>
 8013dbe:	4811      	ldr	r0, [pc, #68]	@ (8013e04 <Ble_Hci_Gap_Gatt_Init+0x524>)
 8013dc0:	f002 facc 	bl	801635c <iprintf>
}
 8013dc4:	bf00      	nop
 8013dc6:	371c      	adds	r7, #28
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dcc:	08018b00 	.word	0x08018b00
 8013dd0:	0801a26c 	.word	0x0801a26c
 8013dd4:	08018b1c 	.word	0x08018b1c
 8013dd8:	080194b4 	.word	0x080194b4
 8013ddc:	080194d4 	.word	0x080194d4
 8013de0:	08019510 	.word	0x08019510
 8013de4:	200019e8 	.word	0x200019e8
 8013de8:	0801953c 	.word	0x0801953c
 8013dec:	0801957c 	.word	0x0801957c
 8013df0:	0001b207 	.word	0x0001b207
 8013df4:	080195ac 	.word	0x080195ac
 8013df8:	080195f8 	.word	0x080195f8
 8013dfc:	08019634 	.word	0x08019634
 8013e00:	08019674 	.word	0x08019674
 8013e04:	080196a4 	.word	0x080196a4

08013e08 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b08c      	sub	sp, #48	@ 0x30
 8013e0c:	af08      	add	r7, sp, #32
 8013e0e:	4603      	mov	r3, r0
 8013e10:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013e12:	2392      	movs	r3, #146	@ 0x92
 8013e14:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8013e16:	4a32      	ldr	r2, [pc, #200]	@ (8013ee0 <Adv_Request+0xd8>)
 8013e18:	79fb      	ldrb	r3, [r7, #7]
 8013e1a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 8013e1e:	2300      	movs	r3, #0
 8013e20:	9306      	str	r3, [sp, #24]
 8013e22:	2300      	movs	r3, #0
 8013e24:	9305      	str	r3, [sp, #20]
 8013e26:	2300      	movs	r3, #0
 8013e28:	9304      	str	r3, [sp, #16]
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	9303      	str	r3, [sp, #12]
 8013e2e:	2300      	movs	r3, #0
 8013e30:	9302      	str	r3, [sp, #8]
 8013e32:	2300      	movs	r3, #0
 8013e34:	9301      	str	r3, [sp, #4]
 8013e36:	2300      	movs	r3, #0
 8013e38:	9300      	str	r3, [sp, #0]
 8013e3a:	2300      	movs	r3, #0
 8013e3c:	22a0      	movs	r2, #160	@ 0xa0
 8013e3e:	2180      	movs	r1, #128	@ 0x80
 8013e40:	2000      	movs	r0, #0
 8013e42:	f7fc fa77 	bl	8010334 <aci_gap_set_discoverable>
 8013e46:	4603      	mov	r3, r0
 8013e48:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 8013e4a:	7bfb      	ldrb	r3, [r7, #15]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d00f      	beq.n	8013e70 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8013e50:	4824      	ldr	r0, [pc, #144]	@ (8013ee4 <Adv_Request+0xdc>)
 8013e52:	f7fe fbb3 	bl	80125bc <DbgTraceGetFileName>
 8013e56:	4601      	mov	r1, r0
 8013e58:	f240 435e 	movw	r3, #1118	@ 0x45e
 8013e5c:	4a22      	ldr	r2, [pc, #136]	@ (8013ee8 <Adv_Request+0xe0>)
 8013e5e:	4823      	ldr	r0, [pc, #140]	@ (8013eec <Adv_Request+0xe4>)
 8013e60:	f002 fa7c 	bl	801635c <iprintf>
 8013e64:	7bfb      	ldrb	r3, [r7, #15]
 8013e66:	4619      	mov	r1, r3
 8013e68:	4821      	ldr	r0, [pc, #132]	@ (8013ef0 <Adv_Request+0xe8>)
 8013e6a:	f002 fa77 	bl	801635c <iprintf>
 8013e6e:	e00c      	b.n	8013e8a <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8013e70:	481c      	ldr	r0, [pc, #112]	@ (8013ee4 <Adv_Request+0xdc>)
 8013e72:	f7fe fba3 	bl	80125bc <DbgTraceGetFileName>
 8013e76:	4601      	mov	r1, r0
 8013e78:	f240 4362 	movw	r3, #1122	@ 0x462
 8013e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8013ee8 <Adv_Request+0xe0>)
 8013e7e:	481b      	ldr	r0, [pc, #108]	@ (8013eec <Adv_Request+0xe4>)
 8013e80:	f002 fa6c 	bl	801635c <iprintf>
 8013e84:	481b      	ldr	r0, [pc, #108]	@ (8013ef4 <Adv_Request+0xec>)
 8013e86:	f002 fad9 	bl	801643c <puts>
#endif

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8013e8a:	491b      	ldr	r1, [pc, #108]	@ (8013ef8 <Adv_Request+0xf0>)
 8013e8c:	2013      	movs	r0, #19
 8013e8e:	f7fc fd77 	bl	8010980 <aci_gap_update_adv_data>
 8013e92:	4603      	mov	r3, r0
 8013e94:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8013e96:	7bfb      	ldrb	r3, [r7, #15]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d00f      	beq.n	8013ebc <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8013e9c:	4811      	ldr	r0, [pc, #68]	@ (8013ee4 <Adv_Request+0xdc>)
 8013e9e:	f7fe fb8d 	bl	80125bc <DbgTraceGetFileName>
 8013ea2:	4601      	mov	r1, r0
 8013ea4:	f240 4371 	movw	r3, #1137	@ 0x471
 8013ea8:	4a0f      	ldr	r2, [pc, #60]	@ (8013ee8 <Adv_Request+0xe0>)
 8013eaa:	4810      	ldr	r0, [pc, #64]	@ (8013eec <Adv_Request+0xe4>)
 8013eac:	f002 fa56 	bl	801635c <iprintf>
 8013eb0:	7bfb      	ldrb	r3, [r7, #15]
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	4811      	ldr	r0, [pc, #68]	@ (8013efc <Adv_Request+0xf4>)
 8013eb6:	f002 fa51 	bl	801635c <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8013eba:	e00d      	b.n	8013ed8 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8013ebc:	4809      	ldr	r0, [pc, #36]	@ (8013ee4 <Adv_Request+0xdc>)
 8013ebe:	f7fe fb7d 	bl	80125bc <DbgTraceGetFileName>
 8013ec2:	4601      	mov	r1, r0
 8013ec4:	f240 4375 	movw	r3, #1141	@ 0x475
 8013ec8:	4a07      	ldr	r2, [pc, #28]	@ (8013ee8 <Adv_Request+0xe0>)
 8013eca:	4808      	ldr	r0, [pc, #32]	@ (8013eec <Adv_Request+0xe4>)
 8013ecc:	f002 fa46 	bl	801635c <iprintf>
 8013ed0:	480b      	ldr	r0, [pc, #44]	@ (8013f00 <Adv_Request+0xf8>)
 8013ed2:	f002 fa43 	bl	801635c <iprintf>
  return;
 8013ed6:	bf00      	nop
}
 8013ed8:	3710      	adds	r7, #16
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
 8013ede:	bf00      	nop
 8013ee0:	200019e8 	.word	0x200019e8
 8013ee4:	08018b00 	.word	0x08018b00
 8013ee8:	0801a284 	.word	0x0801a284
 8013eec:	08018b1c 	.word	0x08018b1c
 8013ef0:	080196d0 	.word	0x080196d0
 8013ef4:	08019708 	.word	0x08019708
 8013ef8:	200000a4 	.word	0x200000a4
 8013efc:	08019730 	.word	0x08019730
 8013f00:	08019764 	.word	0x08019764

08013f04 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b086      	sub	sp, #24
 8013f08:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8013f0a:	f7ff f8e5 	bl	80130d8 <LL_FLASH_GetUDN>
 8013f0e:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f16:	d023      	beq.n	8013f60 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8013f18:	f7ff f8f6 	bl	8013108 <LL_FLASH_GetSTCompanyID>
 8013f1c:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8013f1e:	f7ff f8e7 	bl	80130f0 <LL_FLASH_GetDeviceID>
 8013f22:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8013f24:	693b      	ldr	r3, [r7, #16]
 8013f26:	b2da      	uxtb	r2, r3
 8013f28:	4b16      	ldr	r3, [pc, #88]	@ (8013f84 <BleGetBdAddress+0x80>)
 8013f2a:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8013f2c:	693b      	ldr	r3, [r7, #16]
 8013f2e:	0a1b      	lsrs	r3, r3, #8
 8013f30:	b2da      	uxtb	r2, r3
 8013f32:	4b14      	ldr	r3, [pc, #80]	@ (8013f84 <BleGetBdAddress+0x80>)
 8013f34:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	b2da      	uxtb	r2, r3
 8013f3a:	4b12      	ldr	r3, [pc, #72]	@ (8013f84 <BleGetBdAddress+0x80>)
 8013f3c:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8013f3e:	68bb      	ldr	r3, [r7, #8]
 8013f40:	b2da      	uxtb	r2, r3
 8013f42:	4b10      	ldr	r3, [pc, #64]	@ (8013f84 <BleGetBdAddress+0x80>)
 8013f44:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	0a1b      	lsrs	r3, r3, #8
 8013f4a:	b2da      	uxtb	r2, r3
 8013f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8013f84 <BleGetBdAddress+0x80>)
 8013f4e:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8013f50:	68bb      	ldr	r3, [r7, #8]
 8013f52:	0c1b      	lsrs	r3, r3, #16
 8013f54:	b2da      	uxtb	r2, r3
 8013f56:	4b0b      	ldr	r3, [pc, #44]	@ (8013f84 <BleGetBdAddress+0x80>)
 8013f58:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8013f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8013f84 <BleGetBdAddress+0x80>)
 8013f5c:	617b      	str	r3, [r7, #20]
 8013f5e:	e00b      	b.n	8013f78 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8013f60:	2000      	movs	r0, #0
 8013f62:	f7fe fbf3 	bl	801274c <OTP_Read>
 8013f66:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8013f68:	68fb      	ldr	r3, [r7, #12]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d002      	beq.n	8013f74 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	617b      	str	r3, [r7, #20]
 8013f72:	e001      	b.n	8013f78 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8013f74:	4b04      	ldr	r3, [pc, #16]	@ (8013f88 <BleGetBdAddress+0x84>)
 8013f76:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8013f78:	697b      	ldr	r3, [r7, #20]
}
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	3718      	adds	r7, #24
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}
 8013f82:	bf00      	nop
 8013f84:	200019e0 	.word	0x200019e0
 8013f88:	0801a21c 	.word	0x0801a21c

08013f8c <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8013f8c:	b580      	push	{r7, lr}
 8013f8e:	b082      	sub	sp, #8
 8013f90:	af00      	add	r7, sp, #0
	  DIAG (" BLE Debug ->\tAdvertising cancelled\n\r" );
#endif

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8013f92:	4b1f      	ldr	r3, [pc, #124]	@ (8014010 <Adv_Cancel+0x84>)
 8013f94:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013f98:	2b05      	cmp	r3, #5
 8013f9a:	d035      	beq.n	8014008 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8013f9c:	2392      	movs	r3, #146	@ 0x92
 8013f9e:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8013fa0:	f7fc f9a4 	bl	80102ec <aci_gap_set_non_discoverable>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8013fa8:	4b19      	ldr	r3, [pc, #100]	@ (8014010 <Adv_Cancel+0x84>)
 8013faa:	2200      	movs	r2, #0
 8013fac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8013fb0:	79fb      	ldrb	r3, [r7, #7]
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d00d      	beq.n	8013fd2 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8013fb6:	4817      	ldr	r0, [pc, #92]	@ (8014014 <Adv_Cancel+0x88>)
 8013fb8:	f7fe fb00 	bl	80125bc <DbgTraceGetFileName>
 8013fbc:	4601      	mov	r1, r0
 8013fbe:	f240 43c7 	movw	r3, #1223	@ 0x4c7
 8013fc2:	4a15      	ldr	r2, [pc, #84]	@ (8014018 <Adv_Cancel+0x8c>)
 8013fc4:	4815      	ldr	r0, [pc, #84]	@ (801401c <Adv_Cancel+0x90>)
 8013fc6:	f002 f9c9 	bl	801635c <iprintf>
 8013fca:	4815      	ldr	r0, [pc, #84]	@ (8014020 <Adv_Cancel+0x94>)
 8013fcc:	f002 f9c6 	bl	801635c <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8013fd0:	e01a      	b.n	8014008 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8013fd2:	4810      	ldr	r0, [pc, #64]	@ (8014014 <Adv_Cancel+0x88>)
 8013fd4:	f7fe faf2 	bl	80125bc <DbgTraceGetFileName>
 8013fd8:	4601      	mov	r1, r0
 8013fda:	f240 43cb 	movw	r3, #1227	@ 0x4cb
 8013fde:	4a0e      	ldr	r2, [pc, #56]	@ (8014018 <Adv_Cancel+0x8c>)
 8013fe0:	480e      	ldr	r0, [pc, #56]	@ (801401c <Adv_Cancel+0x90>)
 8013fe2:	f002 f9bb 	bl	801635c <iprintf>
 8013fe6:	480f      	ldr	r0, [pc, #60]	@ (8014024 <Adv_Cancel+0x98>)
 8013fe8:	f002 f9b8 	bl	801635c <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8013fec:	4809      	ldr	r0, [pc, #36]	@ (8014014 <Adv_Cancel+0x88>)
 8013fee:	f7fe fae5 	bl	80125bc <DbgTraceGetFileName>
 8013ff2:	4601      	mov	r1, r0
 8013ff4:	f240 43cc 	movw	r3, #1228	@ 0x4cc
 8013ff8:	4a07      	ldr	r2, [pc, #28]	@ (8014018 <Adv_Cancel+0x8c>)
 8013ffa:	4808      	ldr	r0, [pc, #32]	@ (801401c <Adv_Cancel+0x90>)
 8013ffc:	f002 f9ae 	bl	801635c <iprintf>
 8014000:	4809      	ldr	r0, [pc, #36]	@ (8014028 <Adv_Cancel+0x9c>)
 8014002:	f002 f9ab 	bl	801635c <iprintf>
  return;
 8014006:	bf00      	nop
 8014008:	bf00      	nop
}
 801400a:	3708      	adds	r7, #8
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	200019e8 	.word	0x200019e8
 8014014:	08018b00 	.word	0x08018b00
 8014018:	0801a290 	.word	0x0801a290
 801401c:	08018b1c 	.word	0x08018b1c
 8014020:	0801978c 	.word	0x0801978c
 8014024:	080197b0 	.word	0x080197b0
 8014028:	080197b8 	.word	0x080197b8

0801402c <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 801402c:	b590      	push	{r4, r7, lr}
 801402e:	b08d      	sub	sp, #52	@ 0x34
 8014030:	af02      	add	r7, sp, #8
 8014032:	4603      	mov	r3, r0
 8014034:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

	float a_ConnInterval[SIZE_TAB_CONN_INT] = {_min_interval, _max_interval}; /* ms */
 8014036:	4a59      	ldr	r2, [pc, #356]	@ (801419c <BLE_SVC_L2CAP_Conn_Update+0x170>)
 8014038:	f107 030c 	add.w	r3, r7, #12
 801403c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014040:	e883 0003 	stmia.w	r3, {r0, r1}


    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8014044:	4b56      	ldr	r3, [pc, #344]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	3301      	adds	r3, #1
 801404a:	2b00      	cmp	r3, #0
 801404c:	f003 0301 	and.w	r3, r3, #1
 8014050:	bfb8      	it	lt
 8014052:	425b      	neglt	r3, r3
 8014054:	b2da      	uxtb	r2, r3
 8014056:	4b52      	ldr	r3, [pc, #328]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 8014058:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 801405a:	4b51      	ldr	r3, [pc, #324]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801405c:	781b      	ldrb	r3, [r3, #0]
 801405e:	009b      	lsls	r3, r3, #2
 8014060:	3328      	adds	r3, #40	@ 0x28
 8014062:	443b      	add	r3, r7
 8014064:	3b1c      	subs	r3, #28
 8014066:	ed93 7a00 	vldr	s14, [r3]
 801406a:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 801406e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014072:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014076:	ee17 3a90 	vmov	r3, s15
 801407a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 801407c:	4b48      	ldr	r3, [pc, #288]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 801407e:	781b      	ldrb	r3, [r3, #0]
 8014080:	009b      	lsls	r3, r3, #2
 8014082:	3328      	adds	r3, #40	@ 0x28
 8014084:	443b      	add	r3, r7
 8014086:	3b1c      	subs	r3, #28
 8014088:	ed93 7a00 	vldr	s14, [r3]
 801408c:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8014090:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014098:	ee17 3a90 	vmov	r3, s15
 801409c:	84bb      	strh	r3, [r7, #36]	@ 0x24
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 801409e:	2300      	movs	r3, #0
 80140a0:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 80140a2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80140a6:	843b      	strh	r3, [r7, #32]



  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 80140a8:	4b3e      	ldr	r3, [pc, #248]	@ (80141a4 <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d15e      	bne.n	801416e <BLE_SVC_L2CAP_Conn_Update+0x142>
  {
    mutex = 0;
 80140b0:	4b3c      	ldr	r3, [pc, #240]	@ (80141a4 <BLE_SVC_L2CAP_Conn_Update+0x178>)
 80140b2:	2200      	movs	r2, #0
 80140b4:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80140b6:	4b3a      	ldr	r3, [pc, #232]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80140b8:	781b      	ldrb	r3, [r3, #0]
 80140ba:	3301      	adds	r3, #1
 80140bc:	2b00      	cmp	r3, #0
 80140be:	f003 0301 	and.w	r3, r3, #1
 80140c2:	bfb8      	it	lt
 80140c4:	425b      	neglt	r3, r3
 80140c6:	b2da      	uxtb	r2, r3
 80140c8:	4b35      	ldr	r3, [pc, #212]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80140ca:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80140cc:	4b34      	ldr	r3, [pc, #208]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	009b      	lsls	r3, r3, #2
 80140d2:	3328      	adds	r3, #40	@ 0x28
 80140d4:	443b      	add	r3, r7
 80140d6:	3b1c      	subs	r3, #28
 80140d8:	ed93 7a00 	vldr	s14, [r3]
 80140dc:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 80140e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80140e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80140e8:	ee17 3a90 	vmov	r3, s15
 80140ec:	83fb      	strh	r3, [r7, #30]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 80140ee:	4b2c      	ldr	r3, [pc, #176]	@ (80141a0 <BLE_SVC_L2CAP_Conn_Update+0x174>)
 80140f0:	781b      	ldrb	r3, [r3, #0]
 80140f2:	009b      	lsls	r3, r3, #2
 80140f4:	3328      	adds	r3, #40	@ 0x28
 80140f6:	443b      	add	r3, r7
 80140f8:	3b1c      	subs	r3, #28
 80140fa:	ed93 7a00 	vldr	s14, [r3]
 80140fe:	eef7 6a04 	vmov.f32	s13, #116	@ 0x3fa00000  1.250
 8014102:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8014106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801410a:	ee17 3a90 	vmov	r3, s15
 801410e:	83bb      	strh	r3, [r7, #28]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8014110:	2300      	movs	r3, #0
 8014112:	837b      	strh	r3, [r7, #26]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8014114:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8014118:	833b      	strh	r3, [r7, #24]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 801411a:	4b23      	ldr	r3, [pc, #140]	@ (80141a8 <BLE_SVC_L2CAP_Conn_Update+0x17c>)
 801411c:	8ad8      	ldrh	r0, [r3, #22]
 801411e:	8b7c      	ldrh	r4, [r7, #26]
 8014120:	8bba      	ldrh	r2, [r7, #28]
 8014122:	8bf9      	ldrh	r1, [r7, #30]
 8014124:	8b3b      	ldrh	r3, [r7, #24]
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	4623      	mov	r3, r4
 801412a:	f7fd fa5d 	bl	80115e8 <aci_l2cap_connection_parameter_update_req>
 801412e:	4603      	mov	r3, r0
 8014130:	75fb      	strb	r3, [r7, #23]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8014132:	7dfb      	ldrb	r3, [r7, #23]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d00d      	beq.n	8014154 <BLE_SVC_L2CAP_Conn_Update+0x128>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8014138:	481c      	ldr	r0, [pc, #112]	@ (80141ac <BLE_SVC_L2CAP_Conn_Update+0x180>)
 801413a:	f7fe fa3f 	bl	80125bc <DbgTraceGetFileName>
 801413e:	4601      	mov	r1, r0
 8014140:	f240 43f9 	movw	r3, #1273	@ 0x4f9
 8014144:	4a1a      	ldr	r2, [pc, #104]	@ (80141b0 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 8014146:	481b      	ldr	r0, [pc, #108]	@ (80141b4 <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8014148:	f002 f908 	bl	801635c <iprintf>
 801414c:	481a      	ldr	r0, [pc, #104]	@ (80141b8 <BLE_SVC_L2CAP_Conn_Update+0x18c>)
 801414e:	f002 f905 	bl	801635c <iprintf>
 8014152:	e00c      	b.n	801416e <BLE_SVC_L2CAP_Conn_Update+0x142>
    }
    else
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8014154:	4815      	ldr	r0, [pc, #84]	@ (80141ac <BLE_SVC_L2CAP_Conn_Update+0x180>)
 8014156:	f7fe fa31 	bl	80125bc <DbgTraceGetFileName>
 801415a:	4601      	mov	r1, r0
 801415c:	f240 43fd 	movw	r3, #1277	@ 0x4fd
 8014160:	4a13      	ldr	r2, [pc, #76]	@ (80141b0 <BLE_SVC_L2CAP_Conn_Update+0x184>)
 8014162:	4814      	ldr	r0, [pc, #80]	@ (80141b4 <BLE_SVC_L2CAP_Conn_Update+0x188>)
 8014164:	f002 f8fa 	bl	801635c <iprintf>
 8014168:	4814      	ldr	r0, [pc, #80]	@ (80141bc <BLE_SVC_L2CAP_Conn_Update+0x190>)
 801416a:	f002 f8f7 	bl	801635c <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */



  if (ret != BLE_STATUS_SUCCESS)
 801416e:	7dbb      	ldrb	r3, [r7, #22]
 8014170:	2b00      	cmp	r3, #0
 8014172:	d003      	beq.n	801417c <BLE_SVC_L2CAP_Conn_Update+0x150>
  {
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8014174:	4812      	ldr	r0, [pc, #72]	@ (80141c0 <BLE_SVC_L2CAP_Conn_Update+0x194>)
 8014176:	f7ee fd8f 	bl	8002c98 <DIAG>
  }


  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 801417a:	e00c      	b.n	8014196 <BLE_SVC_L2CAP_Conn_Update+0x16a>
    DIAG(" BLE Debug ->\tBLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 801417c:	4811      	ldr	r0, [pc, #68]	@ (80141c4 <BLE_SVC_L2CAP_Conn_Update+0x198>)
 801417e:	f7ee fd8b 	bl	8002c98 <DIAG>
    DIAG("\t\t- Connection Interval:   %d - %d ms\n\t\t- Connection latency:    %d\n\t\t- Supervision Timeout: %d ms\n\r",
 8014182:	8cf9      	ldrh	r1, [r7, #38]	@ 0x26
 8014184:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8014186:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8014188:	8c3b      	ldrh	r3, [r7, #32]
 801418a:	9300      	str	r3, [sp, #0]
 801418c:	4603      	mov	r3, r0
 801418e:	480e      	ldr	r0, [pc, #56]	@ (80141c8 <BLE_SVC_L2CAP_Conn_Update+0x19c>)
 8014190:	f7ee fd82 	bl	8002c98 <DIAG>
  return;
 8014194:	bf00      	nop
}
 8014196:	372c      	adds	r7, #44	@ 0x2c
 8014198:	46bd      	mov	sp, r7
 801419a:	bd90      	pop	{r4, r7, pc}
 801419c:	08019908 	.word	0x08019908
 80141a0:	20001a70 	.word	0x20001a70
 80141a4:	20001a71 	.word	0x20001a71
 80141a8:	200019e8 	.word	0x200019e8
 80141ac:	08018b00 	.word	0x08018b00
 80141b0:	0801a29c 	.word	0x0801a29c
 80141b4:	08018b1c 	.word	0x08018b1c
 80141b8:	080197d4 	.word	0x080197d4
 80141bc:	080197fc 	.word	0x080197fc
 80141c0:	0801982c 	.word	0x0801982c
 80141c4:	08019864 	.word	0x08019864
 80141c8:	080198a0 	.word	0x080198a0

080141cc <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 80141cc:	b580      	push	{r7, lr}
 80141ce:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 80141d0:	4b08      	ldr	r3, [pc, #32]	@ (80141f4 <Connection_Interval_Update_Req+0x28>)
 80141d2:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80141d6:	2b01      	cmp	r3, #1
 80141d8:	d00a      	beq.n	80141f0 <Connection_Interval_Update_Req+0x24>
 80141da:	4b06      	ldr	r3, [pc, #24]	@ (80141f4 <Connection_Interval_Update_Req+0x28>)
 80141dc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d005      	beq.n	80141f0 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80141e4:	4b03      	ldr	r3, [pc, #12]	@ (80141f4 <Connection_Interval_Update_Req+0x28>)
 80141e6:	8adb      	ldrh	r3, [r3, #22]
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7ff ff1f 	bl	801402c <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 80141ee:	bf00      	nop
 80141f0:	bf00      	nop
}
 80141f2:	bd80      	pop	{r7, pc}
 80141f4:	200019e8 	.word	0x200019e8

080141f8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8014200:	2100      	movs	r1, #0
 8014202:	2004      	movs	r0, #4
 8014204:	f001 fecc 	bl	8015fa0 <UTIL_SEQ_SetTask>

  return;
 8014208:	bf00      	nop
}
 801420a:	3708      	adds	r7, #8
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}

08014210 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8014210:	b580      	push	{r7, lr}
 8014212:	b082      	sub	sp, #8
 8014214:	af00      	add	r7, sp, #0
 8014216:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8014218:	2001      	movs	r0, #1
 801421a:	f001 ff2d 	bl	8016078 <UTIL_SEQ_SetEvt>

  return;
 801421e:	bf00      	nop
}
 8014220:	3708      	adds	r7, #8
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}

08014226 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b082      	sub	sp, #8
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801422e:	2001      	movs	r0, #1
 8014230:	f001 ff42 	bl	80160b8 <UTIL_SEQ_WaitEvt>

  return;
 8014234:	bf00      	nop
}
 8014236:	3708      	adds	r7, #8
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}

0801423c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 801423c:	b580      	push	{r7, lr}
 801423e:	b084      	sub	sp, #16
 8014240:	af00      	add	r7, sp, #0
 8014242:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	3308      	adds	r3, #8
 801424e:	4618      	mov	r0, r3
 8014250:	f7fd fb52 	bl	80118f8 <SVCCTL_UserEvtRx>
 8014254:	4603      	mov	r3, r0
 8014256:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8014258:	7afb      	ldrb	r3, [r7, #11]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d003      	beq.n	8014266 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	2201      	movs	r2, #1
 8014262:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8014264:	e003      	b.n	801426e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	701a      	strb	r2, [r3, #0]
  return;
 801426c:	bf00      	nop
}
 801426e:	3710      	adds	r7, #16
 8014270:	46bd      	mov	sp, r7
 8014272:	bd80      	pop	{r7, pc}

08014274 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b084      	sub	sp, #16
 8014278:	af00      	add	r7, sp, #0
 801427a:	4603      	mov	r3, r0
 801427c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801427e:	79fb      	ldrb	r3, [r7, #7]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d002      	beq.n	801428a <BLE_StatusNot+0x16>
 8014284:	2b01      	cmp	r3, #1
 8014286:	d006      	beq.n	8014296 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8014288:	e00b      	b.n	80142a2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801428a:	233f      	movs	r3, #63	@ 0x3f
 801428c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 801428e:	68f8      	ldr	r0, [r7, #12]
 8014290:	f001 feb2 	bl	8015ff8 <UTIL_SEQ_PauseTask>
      break;
 8014294:	e005      	b.n	80142a2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8014296:	233f      	movs	r3, #63	@ 0x3f
 8014298:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801429a:	68f8      	ldr	r0, [r7, #12]
 801429c:	f001 fecc 	bl	8016038 <UTIL_SEQ_ResumeTask>
      break;
 80142a0:	bf00      	nop
  }

  return;
 80142a2:	bf00      	nop
}
 80142a4:	3710      	adds	r7, #16
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
	...

080142ac <ALL_SENs_Task>:

/* USER CODE BEGIN PFP */


void ALL_SENs_Task (void)
{
 80142ac:	b580      	push	{r7, lr}
 80142ae:	af00      	add	r7, sp, #0
	if ( tsBle.App.AfeSetTask )
 80142b0:	4b09      	ldr	r3, [pc, #36]	@ (80142d8 <ALL_SENs_Task+0x2c>)
 80142b2:	7adb      	ldrb	r3, [r3, #11]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d00c      	beq.n	80142d2 <ALL_SENs_Task+0x26>
	{
		tsBle.App.AfeSetTask = false;
 80142b8:	4b07      	ldr	r3, [pc, #28]	@ (80142d8 <ALL_SENs_Task+0x2c>)
 80142ba:	2200      	movs	r2, #0
 80142bc:	72da      	strb	r2, [r3, #11]
		Custom_STM_App_Update_Char(CUSTOM_STM_ALL_SENS, (uint8_t*)(tsStreamAFE.u8TxData));
 80142be:	4907      	ldr	r1, [pc, #28]	@ (80142dc <ALL_SENs_Task+0x30>)
 80142c0:	2003      	movs	r0, #3
 80142c2:	f000 fc13 	bl	8014aec <Custom_STM_App_Update_Char>
		tsBle.u8PacketCount[0]++;
 80142c6:	4b04      	ldr	r3, [pc, #16]	@ (80142d8 <ALL_SENs_Task+0x2c>)
 80142c8:	799b      	ldrb	r3, [r3, #6]
 80142ca:	3301      	adds	r3, #1
 80142cc:	b2da      	uxtb	r2, r3
 80142ce:	4b02      	ldr	r3, [pc, #8]	@ (80142d8 <ALL_SENs_Task+0x2c>)
 80142d0:	719a      	strb	r2, [r3, #6]
	}
}
 80142d2:	bf00      	nop
 80142d4:	bd80      	pop	{r7, pc}
 80142d6:	bf00      	nop
 80142d8:	200019d0 	.word	0x200019d0
 80142dc:	20000b22 	.word	0x20000b22

080142e0 <ACCEL_Task>:
//--------------------------------------------------------------------------------------------

void ACCEL_Task(void)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	af00      	add	r7, sp, #0
	if ( tsBle.App.AccelSetTask )
 80142e4:	4b09      	ldr	r3, [pc, #36]	@ (801430c <ACCEL_Task+0x2c>)
 80142e6:	7b1b      	ldrb	r3, [r3, #12]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d00c      	beq.n	8014306 <ACCEL_Task+0x26>
	{
		tsBle.App.AccelSetTask = false;
 80142ec:	4b07      	ldr	r3, [pc, #28]	@ (801430c <ACCEL_Task+0x2c>)
 80142ee:	2200      	movs	r2, #0
 80142f0:	731a      	strb	r2, [r3, #12]
		Custom_STM_App_Update_Char(CUSTOM_STM_ACCEL_S, (uint8_t*)(tsStreamIMU.u8TxData));
 80142f2:	4907      	ldr	r1, [pc, #28]	@ (8014310 <ACCEL_Task+0x30>)
 80142f4:	2000      	movs	r0, #0
 80142f6:	f000 fbf9 	bl	8014aec <Custom_STM_App_Update_Char>
		tsBle.u8PacketCount[1]++;
 80142fa:	4b04      	ldr	r3, [pc, #16]	@ (801430c <ACCEL_Task+0x2c>)
 80142fc:	79db      	ldrb	r3, [r3, #7]
 80142fe:	3301      	adds	r3, #1
 8014300:	b2da      	uxtb	r2, r3
 8014302:	4b02      	ldr	r3, [pc, #8]	@ (801430c <ACCEL_Task+0x2c>)
 8014304:	71da      	strb	r2, [r3, #7]
	}
}
 8014306:	bf00      	nop
 8014308:	bd80      	pop	{r7, pc}
 801430a:	bf00      	nop
 801430c:	200019d0 	.word	0x200019d0
 8014310:	20001046 	.word	0x20001046

08014314 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	2b08      	cmp	r3, #8
 8014322:	d834      	bhi.n	801438e <Custom_STM_App_Notification+0x7a>
 8014324:	a201      	add	r2, pc, #4	@ (adr r2, 801432c <Custom_STM_App_Notification+0x18>)
 8014326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801432a:	bf00      	nop
 801432c:	08014351 	.word	0x08014351
 8014330:	08014365 	.word	0x08014365
 8014334:	0801438f 	.word	0x0801438f
 8014338:	0801438f 	.word	0x0801438f
 801433c:	0801438f 	.word	0x0801438f
 8014340:	08014373 	.word	0x08014373
 8014344:	08014381 	.word	0x08014381
 8014348:	0801438f 	.word	0x0801438f
 801434c:	0801438f 	.word	0x0801438f

    /* SENSOR_DATA */
    case CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */

    	tsBle.App.AfeNotification = true;
 8014350:	4b11      	ldr	r3, [pc, #68]	@ (8014398 <Custom_STM_App_Notification+0x84>)
 8014352:	2201      	movs	r2, #1
 8014354:	721a      	strb	r2, [r3, #8]
    	tsBle.App.AccelNotification = true;
 8014356:	4b10      	ldr	r3, [pc, #64]	@ (8014398 <Custom_STM_App_Notification+0x84>)
 8014358:	2201      	movs	r2, #1
 801435a:	725a      	strb	r2, [r3, #9]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Enabled ]\n\r");
 801435c:	480f      	ldr	r0, [pc, #60]	@ (801439c <Custom_STM_App_Notification+0x88>)
 801435e:	f7ee fc9b 	bl	8002c98 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT */
      break;
 8014362:	e015      	b.n	8014390 <Custom_STM_App_Notification+0x7c>

    case CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */


    	tsBle.App.AccelNotification = false;
 8014364:	4b0c      	ldr	r3, [pc, #48]	@ (8014398 <Custom_STM_App_Notification+0x84>)
 8014366:	2200      	movs	r2, #0
 8014368:	725a      	strb	r2, [r3, #9]
    	DIAG (" BLE Debug ->\tAccel. Notification\t[ Disabled ]\n\r");
 801436a:	480d      	ldr	r0, [pc, #52]	@ (80143a0 <Custom_STM_App_Notification+0x8c>)
 801436c:	f7ee fc94 	bl	8002c98 <DIAG>

      /* USER CODE END CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT */
      break;
 8014370:	e00e      	b.n	8014390 <Custom_STM_App_Notification+0x7c>
      break;

    case CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */

    	tsBle.App.AfeNotification = true;
 8014372:	4b09      	ldr	r3, [pc, #36]	@ (8014398 <Custom_STM_App_Notification+0x84>)
 8014374:	2201      	movs	r2, #1
 8014376:	721a      	strb	r2, [r3, #8]
//    	tsBle.App.McgNotification = true;
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Enabled ]\n\r");
 8014378:	480a      	ldr	r0, [pc, #40]	@ (80143a4 <Custom_STM_App_Notification+0x90>)
 801437a:	f7ee fc8d 	bl	8002c98 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT */
      break;
 801437e:	e007      	b.n	8014390 <Custom_STM_App_Notification+0x7c>

    case CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */

    	tsBle.App.AfeNotification = false;
 8014380:	4b05      	ldr	r3, [pc, #20]	@ (8014398 <Custom_STM_App_Notification+0x84>)
 8014382:	2200      	movs	r2, #0
 8014384:	721a      	strb	r2, [r3, #8]
    	DIAG (" BLE Debug ->\tMCG Notification\t[ Disabled ]\n\r");
 8014386:	4808      	ldr	r0, [pc, #32]	@ (80143a8 <Custom_STM_App_Notification+0x94>)
 8014388:	f7ee fc86 	bl	8002c98 <DIAG>

      /* USER CODE END CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT */
      break;
 801438c:	e000      	b.n	8014390 <Custom_STM_App_Notification+0x7c>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 801438e:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8014390:	bf00      	nop
}
 8014392:	3708      	adds	r7, #8
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}
 8014398:	200019d0 	.word	0x200019d0
 801439c:	08019910 	.word	0x08019910
 80143a0:	08019940 	.word	0x08019940
 80143a4:	08019974 	.word	0x08019974
 80143a8:	080199a4 	.word	0x080199a4

080143ac <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d002      	beq.n	80143c2 <Custom_APP_Notification+0x16>
 80143bc:	2b01      	cmp	r3, #1
 80143be:	d002      	beq.n	80143c6 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80143c0:	e002      	b.n	80143c8 <Custom_APP_Notification+0x1c>
      break;
 80143c2:	bf00      	nop
 80143c4:	e000      	b.n	80143c8 <Custom_APP_Notification+0x1c>
      break;
 80143c6:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80143c8:	bf00      	nop
}
 80143ca:	370c      	adds	r7, #12
 80143cc:	46bd      	mov	sp, r7
 80143ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d2:	4770      	bx	lr

080143d4 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80143d4:	b480      	push	{r7}
 80143d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80143d8:	bf00      	nop
}
 80143da:	46bd      	mov	sp, r7
 80143dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e0:	4770      	bx	lr
	...

080143e4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b090      	sub	sp, #64	@ 0x40
 80143e8:	af02      	add	r7, sp, #8
 80143ea:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80143ec:	2300      	movs	r3, #0
 80143ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	3301      	adds	r3, #1
 80143f6:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (event_pckt->evt)
 80143f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	2bff      	cmp	r3, #255	@ 0xff
 80143fe:	f040 8113 	bne.w	8014628 <Custom_STM_Event_Handler+0x244>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8014402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014404:	3302      	adds	r3, #2
 8014406:	62fb      	str	r3, [r7, #44]	@ 0x2c
      switch (blecore_evt->ecode)
 8014408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801440a:	881b      	ldrh	r3, [r3, #0]
 801440c:	b29b      	uxth	r3, r3
 801440e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8014412:	2b1a      	cmp	r3, #26
 8014414:	f200 8102 	bhi.w	801461c <Custom_STM_Event_Handler+0x238>
 8014418:	a201      	add	r2, pc, #4	@ (adr r2, 8014420 <Custom_STM_Event_Handler+0x3c>)
 801441a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801441e:	bf00      	nop
 8014420:	0801448d 	.word	0x0801448d
 8014424:	0801461d 	.word	0x0801461d
 8014428:	0801461d 	.word	0x0801461d
 801442c:	0801461d 	.word	0x0801461d
 8014430:	0801461d 	.word	0x0801461d
 8014434:	0801461d 	.word	0x0801461d
 8014438:	0801461d 	.word	0x0801461d
 801443c:	0801461d 	.word	0x0801461d
 8014440:	0801461d 	.word	0x0801461d
 8014444:	0801461d 	.word	0x0801461d
 8014448:	0801461d 	.word	0x0801461d
 801444c:	0801461d 	.word	0x0801461d
 8014450:	0801461d 	.word	0x0801461d
 8014454:	0801461d 	.word	0x0801461d
 8014458:	0801461d 	.word	0x0801461d
 801445c:	0801461d 	.word	0x0801461d
 8014460:	0801461d 	.word	0x0801461d
 8014464:	0801461d 	.word	0x0801461d
 8014468:	0801461d 	.word	0x0801461d
 801446c:	080145bf 	.word	0x080145bf
 8014470:	0801461d 	.word	0x0801461d
 8014474:	0801461d 	.word	0x0801461d
 8014478:	0801461d 	.word	0x0801461d
 801447c:	0801461d 	.word	0x0801461d
 8014480:	0801461d 	.word	0x0801461d
 8014484:	0801461d 	.word	0x0801461d
 8014488:	080145ff 	.word	0x080145ff
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 801448c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801448e:	3302      	adds	r3, #2
 8014490:	623b      	str	r3, [r7, #32]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8014492:	6a3b      	ldr	r3, [r7, #32]
 8014494:	885b      	ldrh	r3, [r3, #2]
 8014496:	b29b      	uxth	r3, r3
 8014498:	461a      	mov	r2, r3
 801449a:	4b67      	ldr	r3, [pc, #412]	@ (8014638 <Custom_STM_Event_Handler+0x254>)
 801449c:	885b      	ldrh	r3, [r3, #2]
 801449e:	3302      	adds	r3, #2
 80144a0:	429a      	cmp	r2, r3
 80144a2:	d119      	bne.n	80144d8 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80144a4:	2301      	movs	r3, #1
 80144a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 80144aa:	6a3b      	ldr	r3, [r7, #32]
 80144ac:	7a1b      	ldrb	r3, [r3, #8]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d002      	beq.n	80144b8 <Custom_STM_Event_Handler+0xd4>
 80144b2:	2b01      	cmp	r3, #1
 80144b4:	d008      	beq.n	80144c8 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 80144b6:	e081      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_DISABLED_EVT;
 80144b8:	2301      	movs	r3, #1
 80144ba:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80144bc:	f107 030c 	add.w	r3, r7, #12
 80144c0:	4618      	mov	r0, r3
 80144c2:	f7ff ff27 	bl	8014314 <Custom_STM_App_Notification>
                break;
 80144c6:	e079      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ACCEL_S_NOTIFY_ENABLED_EVT;
 80144c8:	2300      	movs	r3, #0
 80144ca:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 80144cc:	f107 030c 	add.w	r3, r7, #12
 80144d0:	4618      	mov	r0, r3
 80144d2:	f7ff ff1f 	bl	8014314 <Custom_STM_App_Notification>
                break;
 80144d6:	e071      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAccel_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80144d8:	6a3b      	ldr	r3, [r7, #32]
 80144da:	885b      	ldrh	r3, [r3, #2]
 80144dc:	b29b      	uxth	r3, r3
 80144de:	461a      	mov	r2, r3
 80144e0:	4b55      	ldr	r3, [pc, #340]	@ (8014638 <Custom_STM_Event_Handler+0x254>)
 80144e2:	889b      	ldrh	r3, [r3, #4]
 80144e4:	3302      	adds	r3, #2
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d119      	bne.n	801451e <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80144ea:	2301      	movs	r3, #1
 80144ec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80144f0:	6a3b      	ldr	r3, [r7, #32]
 80144f2:	7a1b      	ldrb	r3, [r3, #8]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d002      	beq.n	80144fe <Custom_STM_Event_Handler+0x11a>
 80144f8:	2b01      	cmp	r3, #1
 80144fa:	d008      	beq.n	801450e <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 80144fc:	e05e      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_DISABLED_EVT;
 80144fe:	2303      	movs	r3, #3
 8014500:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014502:	f107 030c 	add.w	r3, r7, #12
 8014506:	4618      	mov	r0, r3
 8014508:	f7ff ff04 	bl	8014314 <Custom_STM_App_Notification>
                break;
 801450c:	e056      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ECG_S_NOTIFY_ENABLED_EVT;
 801450e:	2302      	movs	r3, #2
 8014510:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014512:	f107 030c 	add.w	r3, r7, #12
 8014516:	4618      	mov	r0, r3
 8014518:	f7ff fefc 	bl	8014314 <Custom_STM_App_Notification>
                break;
 801451c:	e04e      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomEcg_SHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801451e:	6a3b      	ldr	r3, [r7, #32]
 8014520:	885b      	ldrh	r3, [r3, #2]
 8014522:	b29b      	uxth	r3, r3
 8014524:	461a      	mov	r2, r3
 8014526:	4b44      	ldr	r3, [pc, #272]	@ (8014638 <Custom_STM_Event_Handler+0x254>)
 8014528:	891b      	ldrh	r3, [r3, #8]
 801452a:	3302      	adds	r3, #2
 801452c:	429a      	cmp	r2, r3
 801452e:	d119      	bne.n	8014564 <Custom_STM_Event_Handler+0x180>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8014530:	2301      	movs	r3, #1
 8014532:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_4 */
            switch (attribute_modified->Attr_Data[0])
 8014536:	6a3b      	ldr	r3, [r7, #32]
 8014538:	7a1b      	ldrb	r3, [r3, #8]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d002      	beq.n	8014544 <Custom_STM_Event_Handler+0x160>
 801453e:	2b01      	cmp	r3, #1
 8014540:	d008      	beq.n	8014554 <Custom_STM_Event_Handler+0x170>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_4_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_4_default */
              break;
 8014542:	e03b      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_DISABLED_EVT;
 8014544:	2306      	movs	r3, #6
 8014546:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014548:	f107 030c 	add.w	r3, r7, #12
 801454c:	4618      	mov	r0, r3
 801454e:	f7ff fee1 	bl	8014314 <Custom_STM_App_Notification>
                break;
 8014552:	e033      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_ALL_SENS_NOTIFY_ENABLED_EVT;
 8014554:	2305      	movs	r3, #5
 8014556:	733b      	strb	r3, [r7, #12]
                Custom_STM_App_Notification(&Notification);
 8014558:	f107 030c 	add.w	r3, r7, #12
 801455c:	4618      	mov	r0, r3
 801455e:	f7ff fed9 	bl	8014314 <Custom_STM_App_Notification>
                break;
 8014562:	e02b      	b.n	80145bc <Custom_STM_Event_Handler+0x1d8>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAll_SensHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8014564:	6a3b      	ldr	r3, [r7, #32]
 8014566:	885b      	ldrh	r3, [r3, #2]
 8014568:	b29b      	uxth	r3, r3
 801456a:	461a      	mov	r2, r3
 801456c:	4b32      	ldr	r3, [pc, #200]	@ (8014638 <Custom_STM_Event_Handler+0x254>)
 801456e:	88db      	ldrh	r3, [r3, #6]
 8014570:	3301      	adds	r3, #1
 8014572:	429a      	cmp	r2, r3
 8014574:	d154      	bne.n	8014620 <Custom_STM_Event_Handler+0x23c>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8014576:	2301      	movs	r3, #1
 8014578:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */



            memcpy (tsCmd.u8RxCmd, attribute_modified->Attr_Data, 10);
 801457c:	6a3b      	ldr	r3, [r7, #32]
 801457e:	f103 0208 	add.w	r2, r3, #8
 8014582:	4b2e      	ldr	r3, [pc, #184]	@ (801463c <Custom_STM_Event_Handler+0x258>)
 8014584:	3301      	adds	r3, #1
 8014586:	6810      	ldr	r0, [r2, #0]
 8014588:	6851      	ldr	r1, [r2, #4]
 801458a:	6018      	str	r0, [r3, #0]
 801458c:	6059      	str	r1, [r3, #4]
 801458e:	8912      	ldrh	r2, [r2, #8]
 8014590:	811a      	strh	r2, [r3, #8]
            printf (tsCmd.c8RxCmd, tsCmd.u8RxCmd, 10);
 8014592:	220a      	movs	r2, #10
 8014594:	492a      	ldr	r1, [pc, #168]	@ (8014640 <Custom_STM_Event_Handler+0x25c>)
 8014596:	482b      	ldr	r0, [pc, #172]	@ (8014644 <Custom_STM_Event_Handler+0x260>)
 8014598:	f001 fee0 	bl	801635c <iprintf>
        	//DIAG( "CMD In -> %c%c%c%c%c%c%d%c %d%d\r\n", tsCmd.u8RxCmd[0], tsCmd.u8RxCmd[1], tsCmd.u8RxCmd[2], tsCmd.u8RxCmd[3], tsCmd.u8RxCmd[4], tsCmd.u8RxCmd[5], tsCmd.u8RxCmd[6], tsCmd.u8RxCmd[7], tsCmd.u8RxCmd[8], tsCmd.u8RxCmd[9] );

            char str[]="";
 801459c:	2300      	movs	r3, #0
 801459e:	723b      	strb	r3, [r7, #8]
            for (uint8_t i=0 ; i < 10 ; i++)
 80145a0:	2300      	movs	r3, #0
 80145a2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80145a6:	e004      	b.n	80145b2 <Custom_STM_Event_Handler+0x1ce>
 80145a8:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80145ac:	3301      	adds	r3, #1
 80145ae:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 80145b2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80145b6:	2b09      	cmp	r3, #9
 80145b8:	d9f6      	bls.n	80145a8 <Custom_STM_Event_Handler+0x1c4>
            /* USER CODE END CUSTOM_STM_Service_1_Char_3_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomCmdHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80145ba:	e031      	b.n	8014620 <Custom_STM_Event_Handler+0x23c>
 80145bc:	e030      	b.n	8014620 <Custom_STM_Event_Handler+0x23c>

        case ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE :
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_BEGIN */
          read_req = (aci_gatt_read_permit_req_event_rp0*)blecore_evt->data;
 80145be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145c0:	3302      	adds	r3, #2
 80145c2:	627b      	str	r3, [r7, #36]	@ 0x24
          if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80145c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145c6:	885b      	ldrh	r3, [r3, #2]
 80145c8:	b29b      	uxth	r3, r3
 80145ca:	461a      	mov	r2, r3
 80145cc:	4b1a      	ldr	r3, [pc, #104]	@ (8014638 <Custom_STM_Event_Handler+0x254>)
 80145ce:	895b      	ldrh	r3, [r3, #10]
 80145d0:	3301      	adds	r3, #1
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d126      	bne.n	8014624 <Custom_STM_Event_Handler+0x240>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80145d6:	2301      	movs	r3, #1
 80145d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1 */

            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_1*/
            aci_gatt_allow_read(read_req->Connection_Handle);
 80145dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145de:	881b      	ldrh	r3, [r3, #0]
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fc fdca 	bl	801117c <aci_gatt_allow_read>
            /*USER CODE BEGIN CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2 */


 			aci_gatt_update_char_value(	CustomContext.CustomS_DataHdle,
 80145e8:	4b13      	ldr	r3, [pc, #76]	@ (8014638 <Custom_STM_Event_Handler+0x254>)
 80145ea:	8818      	ldrh	r0, [r3, #0]
 80145ec:	4b12      	ldr	r3, [pc, #72]	@ (8014638 <Custom_STM_Event_Handler+0x254>)
 80145ee:	8959      	ldrh	r1, [r3, #10]
 80145f0:	4b15      	ldr	r3, [pc, #84]	@ (8014648 <Custom_STM_Event_Handler+0x264>)
 80145f2:	9300      	str	r3, [sp, #0]
 80145f4:	2314      	movs	r3, #20
 80145f6:	2200      	movs	r2, #0
 80145f8:	f7fc fcc2 	bl	8010f80 <aci_gatt_update_char_value>
            /*USER CODE END CUSTOM_STM_Service_1_Char_5_ACI_GATT_READ_PERMIT_REQ_VSEVT_CODE_2*/
          } /* if (read_req->Attribute_Handle == (CustomContext.CustomDevice_InfoHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_READ_PERMIT_REQ_END */

          /* USER CODE END EVT_BLUE_GATT_READ_PERMIT_REQ_END */
          break;
 80145fc:	e012      	b.n	8014624 <Custom_STM_Event_Handler+0x240>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80145fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014600:	3302      	adds	r3, #2
 8014602:	62bb      	str	r3, [r7, #40]	@ 0x28
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8014604:	2308      	movs	r3, #8
 8014606:	733b      	strb	r3, [r7, #12]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8014608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	b29b      	uxth	r3, r3
 801460e:	83bb      	strh	r3, [r7, #28]
          Custom_STM_App_Notification(&Notification);
 8014610:	f107 030c 	add.w	r3, r7, #12
 8014614:	4618      	mov	r0, r3
 8014616:	f7ff fe7d 	bl	8014314 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 801461a:	e004      	b.n	8014626 <Custom_STM_Event_Handler+0x242>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801461c:	bf00      	nop
 801461e:	e004      	b.n	801462a <Custom_STM_Event_Handler+0x246>
          break;
 8014620:	bf00      	nop
 8014622:	e002      	b.n	801462a <Custom_STM_Event_Handler+0x246>
          break;
 8014624:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8014626:	e000      	b.n	801462a <Custom_STM_Event_Handler+0x246>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8014628:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 801462a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}/* end Custom_STM_Event_Handler */
 801462e:	4618      	mov	r0, r3
 8014630:	3738      	adds	r7, #56	@ 0x38
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	20001a74 	.word	0x20001a74
 801463c:	20001630 	.word	0x20001630
 8014640:	20001631 	.word	0x20001631
 8014644:	2000163b 	.word	0x2000163b
 8014648:	080199dc 	.word	0x080199dc

0801464c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08c      	sub	sp, #48	@ 0x30
 8014650:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014652:	2392      	movs	r3, #146	@ 0x92
 8014654:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8014656:	48a5      	ldr	r0, [pc, #660]	@ (80148ec <SVCCTL_InitCustomSvc+0x2a0>)
 8014658:	f7fd f934 	bl	80118c4 <SVCCTL_RegisterSvcHandler>
   *                              = 14
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 14;
 801465c:	230e      	movs	r3, #14
 801465e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SENSOR_DATA_UUID(uuid.Char_UUID_128);
 8014660:	238f      	movs	r3, #143	@ 0x8f
 8014662:	713b      	strb	r3, [r7, #4]
 8014664:	23e5      	movs	r3, #229	@ 0xe5
 8014666:	717b      	strb	r3, [r7, #5]
 8014668:	23b3      	movs	r3, #179	@ 0xb3
 801466a:	71bb      	strb	r3, [r7, #6]
 801466c:	23d5      	movs	r3, #213	@ 0xd5
 801466e:	71fb      	strb	r3, [r7, #7]
 8014670:	232e      	movs	r3, #46	@ 0x2e
 8014672:	723b      	strb	r3, [r7, #8]
 8014674:	237f      	movs	r3, #127	@ 0x7f
 8014676:	727b      	strb	r3, [r7, #9]
 8014678:	234a      	movs	r3, #74	@ 0x4a
 801467a:	72bb      	strb	r3, [r7, #10]
 801467c:	2398      	movs	r3, #152	@ 0x98
 801467e:	72fb      	strb	r3, [r7, #11]
 8014680:	232a      	movs	r3, #42	@ 0x2a
 8014682:	733b      	strb	r3, [r7, #12]
 8014684:	2348      	movs	r3, #72	@ 0x48
 8014686:	737b      	strb	r3, [r7, #13]
 8014688:	237a      	movs	r3, #122	@ 0x7a
 801468a:	73bb      	strb	r3, [r7, #14]
 801468c:	23cc      	movs	r3, #204	@ 0xcc
 801468e:	73fb      	strb	r3, [r7, #15]
 8014690:	2300      	movs	r3, #0
 8014692:	743b      	strb	r3, [r7, #16]
 8014694:	2300      	movs	r3, #0
 8014696:	747b      	strb	r3, [r7, #17]
 8014698:	2300      	movs	r3, #0
 801469a:	74bb      	strb	r3, [r7, #18]
 801469c:	2300      	movs	r3, #0
 801469e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80146a0:	7dbb      	ldrb	r3, [r7, #22]
 80146a2:	1d39      	adds	r1, r7, #4
 80146a4:	4a92      	ldr	r2, [pc, #584]	@ (80148f0 <SVCCTL_InitCustomSvc+0x2a4>)
 80146a6:	9200      	str	r2, [sp, #0]
 80146a8:	2201      	movs	r2, #1
 80146aa:	2002      	movs	r0, #2
 80146ac:	f7fc fa8a 	bl	8010bc4 <aci_gatt_add_service>
 80146b0:	4603      	mov	r3, r0
 80146b2:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomS_DataHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80146b4:	7dfb      	ldrb	r3, [r7, #23]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d00f      	beq.n	80146da <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: S_DATA, error code: 0x%x \n\r", ret);
 80146ba:	488e      	ldr	r0, [pc, #568]	@ (80148f4 <SVCCTL_InitCustomSvc+0x2a8>)
 80146bc:	f7fd ff7e 	bl	80125bc <DbgTraceGetFileName>
 80146c0:	4601      	mov	r1, r0
 80146c2:	f44f 73fd 	mov.w	r3, #506	@ 0x1fa
 80146c6:	4a8c      	ldr	r2, [pc, #560]	@ (80148f8 <SVCCTL_InitCustomSvc+0x2ac>)
 80146c8:	488c      	ldr	r0, [pc, #560]	@ (80148fc <SVCCTL_InitCustomSvc+0x2b0>)
 80146ca:	f001 fe47 	bl	801635c <iprintf>
 80146ce:	7dfb      	ldrb	r3, [r7, #23]
 80146d0:	4619      	mov	r1, r3
 80146d2:	488b      	ldr	r0, [pc, #556]	@ (8014900 <SVCCTL_InitCustomSvc+0x2b4>)
 80146d4:	f001 fe42 	bl	801635c <iprintf>
 80146d8:	e00c      	b.n	80146f4 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: S_DATA \n\r");
 80146da:	4886      	ldr	r0, [pc, #536]	@ (80148f4 <SVCCTL_InitCustomSvc+0x2a8>)
 80146dc:	f7fd ff6e 	bl	80125bc <DbgTraceGetFileName>
 80146e0:	4601      	mov	r1, r0
 80146e2:	f44f 73ff 	mov.w	r3, #510	@ 0x1fe
 80146e6:	4a84      	ldr	r2, [pc, #528]	@ (80148f8 <SVCCTL_InitCustomSvc+0x2ac>)
 80146e8:	4884      	ldr	r0, [pc, #528]	@ (80148fc <SVCCTL_InitCustomSvc+0x2b0>)
 80146ea:	f001 fe37 	bl	801635c <iprintf>
 80146ee:	4885      	ldr	r0, [pc, #532]	@ (8014904 <SVCCTL_InitCustomSvc+0x2b8>)
 80146f0:	f001 fe34 	bl	801635c <iprintf>
  }

  /**
   *  IMU_ACCEL
   */
  COPY_IMU_ACCEL_UUID(uuid.Char_UUID_128);
 80146f4:	2319      	movs	r3, #25
 80146f6:	713b      	strb	r3, [r7, #4]
 80146f8:	23ed      	movs	r3, #237	@ 0xed
 80146fa:	717b      	strb	r3, [r7, #5]
 80146fc:	2382      	movs	r3, #130	@ 0x82
 80146fe:	71bb      	strb	r3, [r7, #6]
 8014700:	23ae      	movs	r3, #174	@ 0xae
 8014702:	71fb      	strb	r3, [r7, #7]
 8014704:	23ed      	movs	r3, #237	@ 0xed
 8014706:	723b      	strb	r3, [r7, #8]
 8014708:	2321      	movs	r3, #33	@ 0x21
 801470a:	727b      	strb	r3, [r7, #9]
 801470c:	234c      	movs	r3, #76	@ 0x4c
 801470e:	72bb      	strb	r3, [r7, #10]
 8014710:	239d      	movs	r3, #157	@ 0x9d
 8014712:	72fb      	strb	r3, [r7, #11]
 8014714:	2341      	movs	r3, #65	@ 0x41
 8014716:	733b      	strb	r3, [r7, #12]
 8014718:	2345      	movs	r3, #69	@ 0x45
 801471a:	737b      	strb	r3, [r7, #13]
 801471c:	2322      	movs	r3, #34	@ 0x22
 801471e:	73bb      	strb	r3, [r7, #14]
 8014720:	238e      	movs	r3, #142	@ 0x8e
 8014722:	73fb      	strb	r3, [r7, #15]
 8014724:	2336      	movs	r3, #54	@ 0x36
 8014726:	743b      	strb	r3, [r7, #16]
 8014728:	232a      	movs	r3, #42	@ 0x2a
 801472a:	747b      	strb	r3, [r7, #17]
 801472c:	2300      	movs	r3, #0
 801472e:	74bb      	strb	r3, [r7, #18]
 8014730:	2300      	movs	r3, #0
 8014732:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014734:	4b6e      	ldr	r3, [pc, #440]	@ (80148f0 <SVCCTL_InitCustomSvc+0x2a4>)
 8014736:	8818      	ldrh	r0, [r3, #0]
 8014738:	4b73      	ldr	r3, [pc, #460]	@ (8014908 <SVCCTL_InitCustomSvc+0x2bc>)
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	4619      	mov	r1, r3
 801473e:	1d3a      	adds	r2, r7, #4
 8014740:	4b72      	ldr	r3, [pc, #456]	@ (801490c <SVCCTL_InitCustomSvc+0x2c0>)
 8014742:	9305      	str	r3, [sp, #20]
 8014744:	2300      	movs	r3, #0
 8014746:	9304      	str	r3, [sp, #16]
 8014748:	2310      	movs	r3, #16
 801474a:	9303      	str	r3, [sp, #12]
 801474c:	2307      	movs	r3, #7
 801474e:	9302      	str	r3, [sp, #8]
 8014750:	2300      	movs	r3, #0
 8014752:	9301      	str	r3, [sp, #4]
 8014754:	2310      	movs	r3, #16
 8014756:	9300      	str	r3, [sp, #0]
 8014758:	460b      	mov	r3, r1
 801475a:	2102      	movs	r1, #2
 801475c:	f7fc fb08 	bl	8010d70 <aci_gatt_add_char>
 8014760:	4603      	mov	r3, r0
 8014762:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAccel_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014764:	7dfb      	ldrb	r3, [r7, #23]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d00f      	beq.n	801478a <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ACCEL_S, error code: 0x%x \n\r", ret);
 801476a:	4862      	ldr	r0, [pc, #392]	@ (80148f4 <SVCCTL_InitCustomSvc+0x2a8>)
 801476c:	f7fd ff26 	bl	80125bc <DbgTraceGetFileName>
 8014770:	4601      	mov	r1, r0
 8014772:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8014776:	4a60      	ldr	r2, [pc, #384]	@ (80148f8 <SVCCTL_InitCustomSvc+0x2ac>)
 8014778:	4860      	ldr	r0, [pc, #384]	@ (80148fc <SVCCTL_InitCustomSvc+0x2b0>)
 801477a:	f001 fdef 	bl	801635c <iprintf>
 801477e:	7dfb      	ldrb	r3, [r7, #23]
 8014780:	4619      	mov	r1, r3
 8014782:	4863      	ldr	r0, [pc, #396]	@ (8014910 <SVCCTL_InitCustomSvc+0x2c4>)
 8014784:	f001 fdea 	bl	801635c <iprintf>
 8014788:	e00c      	b.n	80147a4 <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ACCEL_S \n\r");
 801478a:	485a      	ldr	r0, [pc, #360]	@ (80148f4 <SVCCTL_InitCustomSvc+0x2a8>)
 801478c:	f7fd ff16 	bl	80125bc <DbgTraceGetFileName>
 8014790:	4601      	mov	r1, r0
 8014792:	f44f 7305 	mov.w	r3, #532	@ 0x214
 8014796:	4a58      	ldr	r2, [pc, #352]	@ (80148f8 <SVCCTL_InitCustomSvc+0x2ac>)
 8014798:	4858      	ldr	r0, [pc, #352]	@ (80148fc <SVCCTL_InitCustomSvc+0x2b0>)
 801479a:	f001 fddf 	bl	801635c <iprintf>
 801479e:	485d      	ldr	r0, [pc, #372]	@ (8014914 <SVCCTL_InitCustomSvc+0x2c8>)
 80147a0:	f001 fddc 	bl	801635c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  ECG_SENSOR
   */
  COPY_ECG_SENSOR_UUID(uuid.Char_UUID_128);
 80147a4:	2319      	movs	r3, #25
 80147a6:	713b      	strb	r3, [r7, #4]
 80147a8:	23ed      	movs	r3, #237	@ 0xed
 80147aa:	717b      	strb	r3, [r7, #5]
 80147ac:	2382      	movs	r3, #130	@ 0x82
 80147ae:	71bb      	strb	r3, [r7, #6]
 80147b0:	23ae      	movs	r3, #174	@ 0xae
 80147b2:	71fb      	strb	r3, [r7, #7]
 80147b4:	23ed      	movs	r3, #237	@ 0xed
 80147b6:	723b      	strb	r3, [r7, #8]
 80147b8:	2321      	movs	r3, #33	@ 0x21
 80147ba:	727b      	strb	r3, [r7, #9]
 80147bc:	234c      	movs	r3, #76	@ 0x4c
 80147be:	72bb      	strb	r3, [r7, #10]
 80147c0:	239d      	movs	r3, #157	@ 0x9d
 80147c2:	72fb      	strb	r3, [r7, #11]
 80147c4:	2341      	movs	r3, #65	@ 0x41
 80147c6:	733b      	strb	r3, [r7, #12]
 80147c8:	2345      	movs	r3, #69	@ 0x45
 80147ca:	737b      	strb	r3, [r7, #13]
 80147cc:	2322      	movs	r3, #34	@ 0x22
 80147ce:	73bb      	strb	r3, [r7, #14]
 80147d0:	238e      	movs	r3, #142	@ 0x8e
 80147d2:	73fb      	strb	r3, [r7, #15]
 80147d4:	2337      	movs	r3, #55	@ 0x37
 80147d6:	743b      	strb	r3, [r7, #16]
 80147d8:	232a      	movs	r3, #42	@ 0x2a
 80147da:	747b      	strb	r3, [r7, #17]
 80147dc:	2300      	movs	r3, #0
 80147de:	74bb      	strb	r3, [r7, #18]
 80147e0:	2300      	movs	r3, #0
 80147e2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 80147e4:	4b42      	ldr	r3, [pc, #264]	@ (80148f0 <SVCCTL_InitCustomSvc+0x2a4>)
 80147e6:	8818      	ldrh	r0, [r3, #0]
 80147e8:	4b4b      	ldr	r3, [pc, #300]	@ (8014918 <SVCCTL_InitCustomSvc+0x2cc>)
 80147ea:	781b      	ldrb	r3, [r3, #0]
 80147ec:	4619      	mov	r1, r3
 80147ee:	1d3a      	adds	r2, r7, #4
 80147f0:	4b4a      	ldr	r3, [pc, #296]	@ (801491c <SVCCTL_InitCustomSvc+0x2d0>)
 80147f2:	9305      	str	r3, [sp, #20]
 80147f4:	2300      	movs	r3, #0
 80147f6:	9304      	str	r3, [sp, #16]
 80147f8:	2310      	movs	r3, #16
 80147fa:	9303      	str	r3, [sp, #12]
 80147fc:	2307      	movs	r3, #7
 80147fe:	9302      	str	r3, [sp, #8]
 8014800:	2300      	movs	r3, #0
 8014802:	9301      	str	r3, [sp, #4]
 8014804:	2310      	movs	r3, #16
 8014806:	9300      	str	r3, [sp, #0]
 8014808:	460b      	mov	r3, r1
 801480a:	2102      	movs	r1, #2
 801480c:	f7fc fab0 	bl	8010d70 <aci_gatt_add_char>
 8014810:	4603      	mov	r3, r0
 8014812:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomEcg_SHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014814:	7dfb      	ldrb	r3, [r7, #23]
 8014816:	2b00      	cmp	r3, #0
 8014818:	d00f      	beq.n	801483a <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ECG_S, error code: 0x%x \n\r", ret);
 801481a:	4836      	ldr	r0, [pc, #216]	@ (80148f4 <SVCCTL_InitCustomSvc+0x2a8>)
 801481c:	f7fd fece 	bl	80125bc <DbgTraceGetFileName>
 8014820:	4601      	mov	r1, r0
 8014822:	f240 232a 	movw	r3, #554	@ 0x22a
 8014826:	4a34      	ldr	r2, [pc, #208]	@ (80148f8 <SVCCTL_InitCustomSvc+0x2ac>)
 8014828:	4834      	ldr	r0, [pc, #208]	@ (80148fc <SVCCTL_InitCustomSvc+0x2b0>)
 801482a:	f001 fd97 	bl	801635c <iprintf>
 801482e:	7dfb      	ldrb	r3, [r7, #23]
 8014830:	4619      	mov	r1, r3
 8014832:	483b      	ldr	r0, [pc, #236]	@ (8014920 <SVCCTL_InitCustomSvc+0x2d4>)
 8014834:	f001 fd92 	bl	801635c <iprintf>
 8014838:	e00c      	b.n	8014854 <SVCCTL_InitCustomSvc+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ECG_S \n\r");
 801483a:	482e      	ldr	r0, [pc, #184]	@ (80148f4 <SVCCTL_InitCustomSvc+0x2a8>)
 801483c:	f7fd febe 	bl	80125bc <DbgTraceGetFileName>
 8014840:	4601      	mov	r1, r0
 8014842:	f240 232e 	movw	r3, #558	@ 0x22e
 8014846:	4a2c      	ldr	r2, [pc, #176]	@ (80148f8 <SVCCTL_InitCustomSvc+0x2ac>)
 8014848:	482c      	ldr	r0, [pc, #176]	@ (80148fc <SVCCTL_InitCustomSvc+0x2b0>)
 801484a:	f001 fd87 	bl	801635c <iprintf>
 801484e:	4835      	ldr	r0, [pc, #212]	@ (8014924 <SVCCTL_InitCustomSvc+0x2d8>)
 8014850:	f001 fd84 	bl	801635c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  COMMAND
   */
  COPY_COMMAND_UUID(uuid.Char_UUID_128);
 8014854:	2319      	movs	r3, #25
 8014856:	713b      	strb	r3, [r7, #4]
 8014858:	23ed      	movs	r3, #237	@ 0xed
 801485a:	717b      	strb	r3, [r7, #5]
 801485c:	2382      	movs	r3, #130	@ 0x82
 801485e:	71bb      	strb	r3, [r7, #6]
 8014860:	23ae      	movs	r3, #174	@ 0xae
 8014862:	71fb      	strb	r3, [r7, #7]
 8014864:	23ed      	movs	r3, #237	@ 0xed
 8014866:	723b      	strb	r3, [r7, #8]
 8014868:	2321      	movs	r3, #33	@ 0x21
 801486a:	727b      	strb	r3, [r7, #9]
 801486c:	234c      	movs	r3, #76	@ 0x4c
 801486e:	72bb      	strb	r3, [r7, #10]
 8014870:	239d      	movs	r3, #157	@ 0x9d
 8014872:	72fb      	strb	r3, [r7, #11]
 8014874:	2341      	movs	r3, #65	@ 0x41
 8014876:	733b      	strb	r3, [r7, #12]
 8014878:	2345      	movs	r3, #69	@ 0x45
 801487a:	737b      	strb	r3, [r7, #13]
 801487c:	2322      	movs	r3, #34	@ 0x22
 801487e:	73bb      	strb	r3, [r7, #14]
 8014880:	238e      	movs	r3, #142	@ 0x8e
 8014882:	73fb      	strb	r3, [r7, #15]
 8014884:	2338      	movs	r3, #56	@ 0x38
 8014886:	743b      	strb	r3, [r7, #16]
 8014888:	232a      	movs	r3, #42	@ 0x2a
 801488a:	747b      	strb	r3, [r7, #17]
 801488c:	2300      	movs	r3, #0
 801488e:	74bb      	strb	r3, [r7, #18]
 8014890:	2300      	movs	r3, #0
 8014892:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014894:	4b16      	ldr	r3, [pc, #88]	@ (80148f0 <SVCCTL_InitCustomSvc+0x2a4>)
 8014896:	8818      	ldrh	r0, [r3, #0]
 8014898:	4b23      	ldr	r3, [pc, #140]	@ (8014928 <SVCCTL_InitCustomSvc+0x2dc>)
 801489a:	781b      	ldrb	r3, [r3, #0]
 801489c:	4619      	mov	r1, r3
 801489e:	1d3a      	adds	r2, r7, #4
 80148a0:	4b22      	ldr	r3, [pc, #136]	@ (801492c <SVCCTL_InitCustomSvc+0x2e0>)
 80148a2:	9305      	str	r3, [sp, #20]
 80148a4:	2300      	movs	r3, #0
 80148a6:	9304      	str	r3, [sp, #16]
 80148a8:	2310      	movs	r3, #16
 80148aa:	9303      	str	r3, [sp, #12]
 80148ac:	2301      	movs	r3, #1
 80148ae:	9302      	str	r3, [sp, #8]
 80148b0:	2300      	movs	r3, #0
 80148b2:	9301      	str	r3, [sp, #4]
 80148b4:	2308      	movs	r3, #8
 80148b6:	9300      	str	r3, [sp, #0]
 80148b8:	460b      	mov	r3, r1
 80148ba:	2102      	movs	r1, #2
 80148bc:	f7fc fa58 	bl	8010d70 <aci_gatt_add_char>
 80148c0:	4603      	mov	r3, r0
 80148c2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomCmdHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80148c4:	7dfb      	ldrb	r3, [r7, #23]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d034      	beq.n	8014934 <SVCCTL_InitCustomSvc+0x2e8>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : CMD, error code: 0x%x \n\r", ret);
 80148ca:	480a      	ldr	r0, [pc, #40]	@ (80148f4 <SVCCTL_InitCustomSvc+0x2a8>)
 80148cc:	f7fd fe76 	bl	80125bc <DbgTraceGetFileName>
 80148d0:	4601      	mov	r1, r0
 80148d2:	f44f 7311 	mov.w	r3, #580	@ 0x244
 80148d6:	4a08      	ldr	r2, [pc, #32]	@ (80148f8 <SVCCTL_InitCustomSvc+0x2ac>)
 80148d8:	4808      	ldr	r0, [pc, #32]	@ (80148fc <SVCCTL_InitCustomSvc+0x2b0>)
 80148da:	f001 fd3f 	bl	801635c <iprintf>
 80148de:	7dfb      	ldrb	r3, [r7, #23]
 80148e0:	4619      	mov	r1, r3
 80148e2:	4813      	ldr	r0, [pc, #76]	@ (8014930 <SVCCTL_InitCustomSvc+0x2e4>)
 80148e4:	f001 fd3a 	bl	801635c <iprintf>
 80148e8:	e031      	b.n	801494e <SVCCTL_InitCustomSvc+0x302>
 80148ea:	bf00      	nop
 80148ec:	080143e5 	.word	0x080143e5
 80148f0:	20001a74 	.word	0x20001a74
 80148f4:	080199f0 	.word	0x080199f0
 80148f8:	0801a2b8 	.word	0x0801a2b8
 80148fc:	08019a10 	.word	0x08019a10
 8014900:	08019a24 	.word	0x08019a24
 8014904:	08019a6c 	.word	0x08019a6c
 8014908:	200000b7 	.word	0x200000b7
 801490c:	20001a76 	.word	0x20001a76
 8014910:	08019aa0 	.word	0x08019aa0
 8014914:	08019ae8 	.word	0x08019ae8
 8014918:	200000b8 	.word	0x200000b8
 801491c:	20001a78 	.word	0x20001a78
 8014920:	08019b1c 	.word	0x08019b1c
 8014924:	08019b60 	.word	0x08019b60
 8014928:	200000b9 	.word	0x200000b9
 801492c:	20001a7a 	.word	0x20001a7a
 8014930:	08019b94 	.word	0x08019b94
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : CMD \n\r");
 8014934:	4860      	ldr	r0, [pc, #384]	@ (8014ab8 <SVCCTL_InitCustomSvc+0x46c>)
 8014936:	f7fd fe41 	bl	80125bc <DbgTraceGetFileName>
 801493a:	4601      	mov	r1, r0
 801493c:	f44f 7312 	mov.w	r3, #584	@ 0x248
 8014940:	4a5e      	ldr	r2, [pc, #376]	@ (8014abc <SVCCTL_InitCustomSvc+0x470>)
 8014942:	485f      	ldr	r0, [pc, #380]	@ (8014ac0 <SVCCTL_InitCustomSvc+0x474>)
 8014944:	f001 fd0a 	bl	801635c <iprintf>
 8014948:	485e      	ldr	r0, [pc, #376]	@ (8014ac4 <SVCCTL_InitCustomSvc+0x478>)
 801494a:	f001 fd07 	bl	801635c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char3 */
  /**
   *  ALL_SENSOR
   */
  COPY_ALL_SENSOR_UUID(uuid.Char_UUID_128);
 801494e:	2319      	movs	r3, #25
 8014950:	713b      	strb	r3, [r7, #4]
 8014952:	23ed      	movs	r3, #237	@ 0xed
 8014954:	717b      	strb	r3, [r7, #5]
 8014956:	2382      	movs	r3, #130	@ 0x82
 8014958:	71bb      	strb	r3, [r7, #6]
 801495a:	23ae      	movs	r3, #174	@ 0xae
 801495c:	71fb      	strb	r3, [r7, #7]
 801495e:	23ed      	movs	r3, #237	@ 0xed
 8014960:	723b      	strb	r3, [r7, #8]
 8014962:	2321      	movs	r3, #33	@ 0x21
 8014964:	727b      	strb	r3, [r7, #9]
 8014966:	234c      	movs	r3, #76	@ 0x4c
 8014968:	72bb      	strb	r3, [r7, #10]
 801496a:	239d      	movs	r3, #157	@ 0x9d
 801496c:	72fb      	strb	r3, [r7, #11]
 801496e:	2341      	movs	r3, #65	@ 0x41
 8014970:	733b      	strb	r3, [r7, #12]
 8014972:	2345      	movs	r3, #69	@ 0x45
 8014974:	737b      	strb	r3, [r7, #13]
 8014976:	2322      	movs	r3, #34	@ 0x22
 8014978:	73bb      	strb	r3, [r7, #14]
 801497a:	238e      	movs	r3, #142	@ 0x8e
 801497c:	73fb      	strb	r3, [r7, #15]
 801497e:	2339      	movs	r3, #57	@ 0x39
 8014980:	743b      	strb	r3, [r7, #16]
 8014982:	232a      	movs	r3, #42	@ 0x2a
 8014984:	747b      	strb	r3, [r7, #17]
 8014986:	2300      	movs	r3, #0
 8014988:	74bb      	strb	r3, [r7, #18]
 801498a:	2300      	movs	r3, #0
 801498c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 801498e:	4b4e      	ldr	r3, [pc, #312]	@ (8014ac8 <SVCCTL_InitCustomSvc+0x47c>)
 8014990:	8818      	ldrh	r0, [r3, #0]
 8014992:	4b4e      	ldr	r3, [pc, #312]	@ (8014acc <SVCCTL_InitCustomSvc+0x480>)
 8014994:	781b      	ldrb	r3, [r3, #0]
 8014996:	4619      	mov	r1, r3
 8014998:	1d3a      	adds	r2, r7, #4
 801499a:	4b4d      	ldr	r3, [pc, #308]	@ (8014ad0 <SVCCTL_InitCustomSvc+0x484>)
 801499c:	9305      	str	r3, [sp, #20]
 801499e:	2300      	movs	r3, #0
 80149a0:	9304      	str	r3, [sp, #16]
 80149a2:	2310      	movs	r3, #16
 80149a4:	9303      	str	r3, [sp, #12]
 80149a6:	2307      	movs	r3, #7
 80149a8:	9302      	str	r3, [sp, #8]
 80149aa:	2300      	movs	r3, #0
 80149ac:	9301      	str	r3, [sp, #4]
 80149ae:	2310      	movs	r3, #16
 80149b0:	9300      	str	r3, [sp, #0]
 80149b2:	460b      	mov	r3, r1
 80149b4:	2102      	movs	r1, #2
 80149b6:	f7fc f9db 	bl	8010d70 <aci_gatt_add_char>
 80149ba:	4603      	mov	r3, r0
 80149bc:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE | GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP | GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomAll_SensHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80149be:	7dfb      	ldrb	r3, [r7, #23]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d00f      	beq.n	80149e4 <SVCCTL_InitCustomSvc+0x398>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : ALL_SENS, error code: 0x%x \n\r", ret);
 80149c4:	483c      	ldr	r0, [pc, #240]	@ (8014ab8 <SVCCTL_InitCustomSvc+0x46c>)
 80149c6:	f7fd fdf9 	bl	80125bc <DbgTraceGetFileName>
 80149ca:	4601      	mov	r1, r0
 80149cc:	f240 235e 	movw	r3, #606	@ 0x25e
 80149d0:	4a3a      	ldr	r2, [pc, #232]	@ (8014abc <SVCCTL_InitCustomSvc+0x470>)
 80149d2:	483b      	ldr	r0, [pc, #236]	@ (8014ac0 <SVCCTL_InitCustomSvc+0x474>)
 80149d4:	f001 fcc2 	bl	801635c <iprintf>
 80149d8:	7dfb      	ldrb	r3, [r7, #23]
 80149da:	4619      	mov	r1, r3
 80149dc:	483d      	ldr	r0, [pc, #244]	@ (8014ad4 <SVCCTL_InitCustomSvc+0x488>)
 80149de:	f001 fcbd 	bl	801635c <iprintf>
 80149e2:	e00c      	b.n	80149fe <SVCCTL_InitCustomSvc+0x3b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : ALL_SENS \n\r");
 80149e4:	4834      	ldr	r0, [pc, #208]	@ (8014ab8 <SVCCTL_InitCustomSvc+0x46c>)
 80149e6:	f7fd fde9 	bl	80125bc <DbgTraceGetFileName>
 80149ea:	4601      	mov	r1, r0
 80149ec:	f240 2362 	movw	r3, #610	@ 0x262
 80149f0:	4a32      	ldr	r2, [pc, #200]	@ (8014abc <SVCCTL_InitCustomSvc+0x470>)
 80149f2:	4833      	ldr	r0, [pc, #204]	@ (8014ac0 <SVCCTL_InitCustomSvc+0x474>)
 80149f4:	f001 fcb2 	bl	801635c <iprintf>
 80149f8:	4837      	ldr	r0, [pc, #220]	@ (8014ad8 <SVCCTL_InitCustomSvc+0x48c>)
 80149fa:	f001 fcaf 	bl	801635c <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char4 */
  /**
   *  READ_DEVICE_INFO
   */
  COPY_READ_DEVICE_INFO_UUID(uuid.Char_UUID_128);
 80149fe:	2319      	movs	r3, #25
 8014a00:	713b      	strb	r3, [r7, #4]
 8014a02:	23ed      	movs	r3, #237	@ 0xed
 8014a04:	717b      	strb	r3, [r7, #5]
 8014a06:	2382      	movs	r3, #130	@ 0x82
 8014a08:	71bb      	strb	r3, [r7, #6]
 8014a0a:	23ae      	movs	r3, #174	@ 0xae
 8014a0c:	71fb      	strb	r3, [r7, #7]
 8014a0e:	23ed      	movs	r3, #237	@ 0xed
 8014a10:	723b      	strb	r3, [r7, #8]
 8014a12:	2321      	movs	r3, #33	@ 0x21
 8014a14:	727b      	strb	r3, [r7, #9]
 8014a16:	234c      	movs	r3, #76	@ 0x4c
 8014a18:	72bb      	strb	r3, [r7, #10]
 8014a1a:	239d      	movs	r3, #157	@ 0x9d
 8014a1c:	72fb      	strb	r3, [r7, #11]
 8014a1e:	2341      	movs	r3, #65	@ 0x41
 8014a20:	733b      	strb	r3, [r7, #12]
 8014a22:	2345      	movs	r3, #69	@ 0x45
 8014a24:	737b      	strb	r3, [r7, #13]
 8014a26:	2322      	movs	r3, #34	@ 0x22
 8014a28:	73bb      	strb	r3, [r7, #14]
 8014a2a:	238e      	movs	r3, #142	@ 0x8e
 8014a2c:	73fb      	strb	r3, [r7, #15]
 8014a2e:	2340      	movs	r3, #64	@ 0x40
 8014a30:	743b      	strb	r3, [r7, #16]
 8014a32:	232a      	movs	r3, #42	@ 0x2a
 8014a34:	747b      	strb	r3, [r7, #17]
 8014a36:	2300      	movs	r3, #0
 8014a38:	74bb      	strb	r3, [r7, #18]
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomS_DataHdle,
 8014a3e:	4b22      	ldr	r3, [pc, #136]	@ (8014ac8 <SVCCTL_InitCustomSvc+0x47c>)
 8014a40:	8818      	ldrh	r0, [r3, #0]
 8014a42:	4b26      	ldr	r3, [pc, #152]	@ (8014adc <SVCCTL_InitCustomSvc+0x490>)
 8014a44:	781b      	ldrb	r3, [r3, #0]
 8014a46:	4619      	mov	r1, r3
 8014a48:	1d3a      	adds	r2, r7, #4
 8014a4a:	4b25      	ldr	r3, [pc, #148]	@ (8014ae0 <SVCCTL_InitCustomSvc+0x494>)
 8014a4c:	9305      	str	r3, [sp, #20]
 8014a4e:	2300      	movs	r3, #0
 8014a50:	9304      	str	r3, [sp, #16]
 8014a52:	2310      	movs	r3, #16
 8014a54:	9303      	str	r3, [sp, #12]
 8014a56:	2304      	movs	r3, #4
 8014a58:	9302      	str	r3, [sp, #8]
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	9301      	str	r3, [sp, #4]
 8014a5e:	2302      	movs	r3, #2
 8014a60:	9300      	str	r3, [sp, #0]
 8014a62:	460b      	mov	r3, r1
 8014a64:	2102      	movs	r1, #2
 8014a66:	f7fc f983 	bl	8010d70 <aci_gatt_add_char>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomDevice_InfoHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8014a6e:	7dfb      	ldrb	r3, [r7, #23]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d00f      	beq.n	8014a94 <SVCCTL_InitCustomSvc+0x448>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : DEVICE_INFO, error code: 0x%x \n\r", ret);
 8014a74:	4810      	ldr	r0, [pc, #64]	@ (8014ab8 <SVCCTL_InitCustomSvc+0x46c>)
 8014a76:	f7fd fda1 	bl	80125bc <DbgTraceGetFileName>
 8014a7a:	4601      	mov	r1, r0
 8014a7c:	f44f 731e 	mov.w	r3, #632	@ 0x278
 8014a80:	4a0e      	ldr	r2, [pc, #56]	@ (8014abc <SVCCTL_InitCustomSvc+0x470>)
 8014a82:	480f      	ldr	r0, [pc, #60]	@ (8014ac0 <SVCCTL_InitCustomSvc+0x474>)
 8014a84:	f001 fc6a 	bl	801635c <iprintf>
 8014a88:	7dfb      	ldrb	r3, [r7, #23]
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	4815      	ldr	r0, [pc, #84]	@ (8014ae4 <SVCCTL_InitCustomSvc+0x498>)
 8014a8e:	f001 fc65 	bl	801635c <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8014a92:	e00d      	b.n	8014ab0 <SVCCTL_InitCustomSvc+0x464>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : DEVICE_INFO \n\r");
 8014a94:	4808      	ldr	r0, [pc, #32]	@ (8014ab8 <SVCCTL_InitCustomSvc+0x46c>)
 8014a96:	f7fd fd91 	bl	80125bc <DbgTraceGetFileName>
 8014a9a:	4601      	mov	r1, r0
 8014a9c:	f44f 731f 	mov.w	r3, #636	@ 0x27c
 8014aa0:	4a06      	ldr	r2, [pc, #24]	@ (8014abc <SVCCTL_InitCustomSvc+0x470>)
 8014aa2:	4807      	ldr	r0, [pc, #28]	@ (8014ac0 <SVCCTL_InitCustomSvc+0x474>)
 8014aa4:	f001 fc5a 	bl	801635c <iprintf>
 8014aa8:	480f      	ldr	r0, [pc, #60]	@ (8014ae8 <SVCCTL_InitCustomSvc+0x49c>)
 8014aaa:	f001 fc57 	bl	801635c <iprintf>
  return;
 8014aae:	bf00      	nop
}
 8014ab0:	3718      	adds	r7, #24
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	080199f0 	.word	0x080199f0
 8014abc:	0801a2b8 	.word	0x0801a2b8
 8014ac0:	08019a10 	.word	0x08019a10
 8014ac4:	08019bd8 	.word	0x08019bd8
 8014ac8:	20001a74 	.word	0x20001a74
 8014acc:	200000ba 	.word	0x200000ba
 8014ad0:	20001a7c 	.word	0x20001a7c
 8014ad4:	08019c08 	.word	0x08019c08
 8014ad8:	08019c50 	.word	0x08019c50
 8014adc:	200000bb 	.word	0x200000bb
 8014ae0:	20001a7e 	.word	0x20001a7e
 8014ae4:	08019c88 	.word	0x08019c88
 8014ae8:	08019cd4 	.word	0x08019cd4

08014aec <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b086      	sub	sp, #24
 8014af0:	af02      	add	r7, sp, #8
 8014af2:	4603      	mov	r3, r0
 8014af4:	6039      	str	r1, [r7, #0]
 8014af6:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8014af8:	2392      	movs	r3, #146	@ 0x92
 8014afa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8014afc:	79fb      	ldrb	r3, [r7, #7]
 8014afe:	2b04      	cmp	r3, #4
 8014b00:	f200 8115 	bhi.w	8014d2e <Custom_STM_App_Update_Char+0x242>
 8014b04:	a201      	add	r2, pc, #4	@ (adr r2, 8014b0c <Custom_STM_App_Update_Char+0x20>)
 8014b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b0a:	bf00      	nop
 8014b0c:	08014b21 	.word	0x08014b21
 8014b10:	08014b8d 	.word	0x08014b8d
 8014b14:	08014beb 	.word	0x08014beb
 8014b18:	08014c49 	.word	0x08014c49
 8014b1c:	08014cd1 	.word	0x08014cd1
  {

    case CUSTOM_STM_ACCEL_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014b20:	4b87      	ldr	r3, [pc, #540]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014b22:	8818      	ldrh	r0, [r3, #0]
 8014b24:	4b86      	ldr	r3, [pc, #536]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014b26:	8859      	ldrh	r1, [r3, #2]
 8014b28:	4b86      	ldr	r3, [pc, #536]	@ (8014d44 <Custom_STM_App_Update_Char+0x258>)
 8014b2a:	781a      	ldrb	r2, [r3, #0]
 8014b2c:	683b      	ldr	r3, [r7, #0]
 8014b2e:	9300      	str	r3, [sp, #0]
 8014b30:	4613      	mov	r3, r2
 8014b32:	2200      	movs	r2, #0
 8014b34:	f7fc fa24 	bl	8010f80 <aci_gatt_update_char_value>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAccel_SHdle,
                                       0, /* charValOffset */
                                       SizeAccel_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014b3c:	7bfb      	ldrb	r3, [r7, #15]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d00f      	beq.n	8014b62 <Custom_STM_App_Update_Char+0x76>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ACCEL_S command, result : 0x%x \n\r", ret);
 8014b42:	4881      	ldr	r0, [pc, #516]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014b44:	f7fd fd3a 	bl	80125bc <DbgTraceGetFileName>
 8014b48:	4601      	mov	r1, r0
 8014b4a:	f240 23a3 	movw	r3, #675	@ 0x2a3
 8014b4e:	4a7f      	ldr	r2, [pc, #508]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014b50:	487f      	ldr	r0, [pc, #508]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014b52:	f001 fc03 	bl	801635c <iprintf>
 8014b56:	7bfb      	ldrb	r3, [r7, #15]
 8014b58:	4619      	mov	r1, r3
 8014b5a:	487e      	ldr	r0, [pc, #504]	@ (8014d54 <Custom_STM_App_Update_Char+0x268>)
 8014b5c:	f001 fbfe 	bl	801635c <iprintf>
 8014b60:	e00c      	b.n	8014b7c <Custom_STM_App_Update_Char+0x90>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ACCEL_S command\n\r");
 8014b62:	4879      	ldr	r0, [pc, #484]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014b64:	f7fd fd2a 	bl	80125bc <DbgTraceGetFileName>
 8014b68:	4601      	mov	r1, r0
 8014b6a:	f240 23a7 	movw	r3, #679	@ 0x2a7
 8014b6e:	4a77      	ldr	r2, [pc, #476]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014b70:	4877      	ldr	r0, [pc, #476]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014b72:	f001 fbf3 	bl	801635c <iprintf>
 8014b76:	4878      	ldr	r0, [pc, #480]	@ (8014d58 <Custom_STM_App_Update_Char+0x26c>)
 8014b78:	f001 fbf0 	bl	801635c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_1*/

      if (ret == BLE_STATUS_SUCCESS)
 8014b7c:	7bfb      	ldrb	r3, [r7, #15]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f040 80d7 	bne.w	8014d32 <Custom_STM_App_Update_Char+0x246>
      {
    	  tsBle.ACCEL_XferComplete = true;
 8014b84:	4b75      	ldr	r3, [pc, #468]	@ (8014d5c <Custom_STM_App_Update_Char+0x270>)
 8014b86:	2201      	movs	r2, #1
 8014b88:	70da      	strb	r2, [r3, #3]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_1*/
      break;
 8014b8a:	e0d2      	b.n	8014d32 <Custom_STM_App_Update_Char+0x246>

    case CUSTOM_STM_ECG_S:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014b8e:	8818      	ldrh	r0, [r3, #0]
 8014b90:	4b6b      	ldr	r3, [pc, #428]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014b92:	8899      	ldrh	r1, [r3, #4]
 8014b94:	4b72      	ldr	r3, [pc, #456]	@ (8014d60 <Custom_STM_App_Update_Char+0x274>)
 8014b96:	781a      	ldrb	r2, [r3, #0]
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	9300      	str	r3, [sp, #0]
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	f7fc f9ee 	bl	8010f80 <aci_gatt_update_char_value>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomEcg_SHdle,
                                       0, /* charValOffset */
                                       SizeEcg_S, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014ba8:	7bfb      	ldrb	r3, [r7, #15]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d00f      	beq.n	8014bce <Custom_STM_App_Update_Char+0xe2>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ECG_S command, result : 0x%x \n\r", ret);
 8014bae:	4866      	ldr	r0, [pc, #408]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014bb0:	f7fd fd04 	bl	80125bc <DbgTraceGetFileName>
 8014bb4:	4601      	mov	r1, r0
 8014bb6:	f240 23c5 	movw	r3, #709	@ 0x2c5
 8014bba:	4a64      	ldr	r2, [pc, #400]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014bbc:	4864      	ldr	r0, [pc, #400]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014bbe:	f001 fbcd 	bl	801635c <iprintf>
 8014bc2:	7bfb      	ldrb	r3, [r7, #15]
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	4867      	ldr	r0, [pc, #412]	@ (8014d64 <Custom_STM_App_Update_Char+0x278>)
 8014bc8:	f001 fbc8 	bl	801635c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_2*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;
 8014bcc:	e0b2      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ECG_S command\n\r");
 8014bce:	485e      	ldr	r0, [pc, #376]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014bd0:	f7fd fcf4 	bl	80125bc <DbgTraceGetFileName>
 8014bd4:	4601      	mov	r1, r0
 8014bd6:	f240 23c9 	movw	r3, #713	@ 0x2c9
 8014bda:	4a5c      	ldr	r2, [pc, #368]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014bdc:	485c      	ldr	r0, [pc, #368]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014bde:	f001 fbbd 	bl	801635c <iprintf>
 8014be2:	4861      	ldr	r0, [pc, #388]	@ (8014d68 <Custom_STM_App_Update_Char+0x27c>)
 8014be4:	f001 fbba 	bl	801635c <iprintf>
      break;
 8014be8:	e0a4      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_CMD:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014bea:	4b55      	ldr	r3, [pc, #340]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014bec:	8818      	ldrh	r0, [r3, #0]
 8014bee:	4b54      	ldr	r3, [pc, #336]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014bf0:	88d9      	ldrh	r1, [r3, #6]
 8014bf2:	4b5e      	ldr	r3, [pc, #376]	@ (8014d6c <Custom_STM_App_Update_Char+0x280>)
 8014bf4:	781a      	ldrb	r2, [r3, #0]
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	4613      	mov	r3, r2
 8014bfc:	2200      	movs	r2, #0
 8014bfe:	f7fc f9bf 	bl	8010f80 <aci_gatt_update_char_value>
 8014c02:	4603      	mov	r3, r0
 8014c04:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomCmdHdle,
                                       0, /* charValOffset */
                                       SizeCmd, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014c06:	7bfb      	ldrb	r3, [r7, #15]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d00f      	beq.n	8014c2c <Custom_STM_App_Update_Char+0x140>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value CMD command, result : 0x%x \n\r", ret);
 8014c0c:	484e      	ldr	r0, [pc, #312]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014c0e:	f7fd fcd5 	bl	80125bc <DbgTraceGetFileName>
 8014c12:	4601      	mov	r1, r0
 8014c14:	f44f 7336 	mov.w	r3, #728	@ 0x2d8
 8014c18:	4a4c      	ldr	r2, [pc, #304]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014c1a:	484d      	ldr	r0, [pc, #308]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014c1c:	f001 fb9e 	bl	801635c <iprintf>
 8014c20:	7bfb      	ldrb	r3, [r7, #15]
 8014c22:	4619      	mov	r1, r3
 8014c24:	4852      	ldr	r0, [pc, #328]	@ (8014d70 <Custom_STM_App_Update_Char+0x284>)
 8014c26:	f001 fb99 	bl	801635c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_3*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;
 8014c2a:	e083      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value CMD command\n\r");
 8014c2c:	4846      	ldr	r0, [pc, #280]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014c2e:	f7fd fcc5 	bl	80125bc <DbgTraceGetFileName>
 8014c32:	4601      	mov	r1, r0
 8014c34:	f44f 7337 	mov.w	r3, #732	@ 0x2dc
 8014c38:	4a44      	ldr	r2, [pc, #272]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014c3a:	4845      	ldr	r0, [pc, #276]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014c3c:	f001 fb8e 	bl	801635c <iprintf>
 8014c40:	484c      	ldr	r0, [pc, #304]	@ (8014d74 <Custom_STM_App_Update_Char+0x288>)
 8014c42:	f001 fb8b 	bl	801635c <iprintf>
      break;
 8014c46:	e075      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_ALL_SENS:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014c48:	4b3d      	ldr	r3, [pc, #244]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014c4a:	8818      	ldrh	r0, [r3, #0]
 8014c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014c4e:	8919      	ldrh	r1, [r3, #8]
 8014c50:	4b49      	ldr	r3, [pc, #292]	@ (8014d78 <Custom_STM_App_Update_Char+0x28c>)
 8014c52:	781a      	ldrb	r2, [r3, #0]
 8014c54:	683b      	ldr	r3, [r7, #0]
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	4613      	mov	r3, r2
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	f7fc f990 	bl	8010f80 <aci_gatt_update_char_value>
 8014c60:	4603      	mov	r3, r0
 8014c62:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomAll_SensHdle,
                                       0, /* charValOffset */
                                       SizeAll_Sens, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014c64:	7bfb      	ldrb	r3, [r7, #15]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d00f      	beq.n	8014c8a <Custom_STM_App_Update_Char+0x19e>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value ALL_SENS command, result : 0x%x \n\r", ret);
 8014c6a:	4837      	ldr	r0, [pc, #220]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014c6c:	f7fd fca6 	bl	80125bc <DbgTraceGetFileName>
 8014c70:	4601      	mov	r1, r0
 8014c72:	f240 23eb 	movw	r3, #747	@ 0x2eb
 8014c76:	4a35      	ldr	r2, [pc, #212]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014c78:	4835      	ldr	r0, [pc, #212]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014c7a:	f001 fb6f 	bl	801635c <iprintf>
 8014c7e:	7bfb      	ldrb	r3, [r7, #15]
 8014c80:	4619      	mov	r1, r3
 8014c82:	483e      	ldr	r0, [pc, #248]	@ (8014d7c <Custom_STM_App_Update_Char+0x290>)
 8014c84:	f001 fb6a 	bl	801635c <iprintf>
 8014c88:	e00c      	b.n	8014ca4 <Custom_STM_App_Update_Char+0x1b8>
      }
      else
      {
        APP_DBG_MSG("  Success: aci_gatt_update_char_value ALL_SENS command\n\r");
 8014c8a:	482f      	ldr	r0, [pc, #188]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014c8c:	f7fd fc96 	bl	80125bc <DbgTraceGetFileName>
 8014c90:	4601      	mov	r1, r0
 8014c92:	f240 23ef 	movw	r3, #751	@ 0x2ef
 8014c96:	4a2d      	ldr	r2, [pc, #180]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014c98:	482d      	ldr	r0, [pc, #180]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014c9a:	f001 fb5f 	bl	801635c <iprintf>
 8014c9e:	4838      	ldr	r0, [pc, #224]	@ (8014d80 <Custom_STM_App_Update_Char+0x294>)
 8014ca0:	f001 fb5c 	bl	801635c <iprintf>
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_4*/


      if (ret == BLE_STATUS_SUCCESS)
 8014ca4:	7bfb      	ldrb	r3, [r7, #15]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d103      	bne.n	8014cb2 <Custom_STM_App_Update_Char+0x1c6>
      {
    	  tsBle.AFE_XferComplete = true;
 8014caa:	4b2c      	ldr	r3, [pc, #176]	@ (8014d5c <Custom_STM_App_Update_Char+0x270>)
 8014cac:	2201      	movs	r2, #1
 8014cae:	709a      	strb	r2, [r3, #2]
			#endif
      }


      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_4*/
      break;
 8014cb0:	e040      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>
			      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014cb2:	4b23      	ldr	r3, [pc, #140]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014cb4:	8818      	ldrh	r0, [r3, #0]
 8014cb6:	4b22      	ldr	r3, [pc, #136]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014cb8:	8919      	ldrh	r1, [r3, #8]
 8014cba:	4b2f      	ldr	r3, [pc, #188]	@ (8014d78 <Custom_STM_App_Update_Char+0x28c>)
 8014cbc:	781a      	ldrb	r2, [r3, #0]
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	4613      	mov	r3, r2
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	f7fc f95b 	bl	8010f80 <aci_gatt_update_char_value>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8014cce:	e031      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>

    case CUSTOM_STM_DEVICE_INFO:
      ret = aci_gatt_update_char_value(CustomContext.CustomS_DataHdle,
 8014cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014cd2:	8818      	ldrh	r0, [r3, #0]
 8014cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8014d40 <Custom_STM_App_Update_Char+0x254>)
 8014cd6:	8959      	ldrh	r1, [r3, #10]
 8014cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8014d84 <Custom_STM_App_Update_Char+0x298>)
 8014cda:	781a      	ldrb	r2, [r3, #0]
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	4613      	mov	r3, r2
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	f7fc f94c 	bl	8010f80 <aci_gatt_update_char_value>
 8014ce8:	4603      	mov	r3, r0
 8014cea:	73fb      	strb	r3, [r7, #15]
                                       CustomContext.CustomDevice_InfoHdle,
                                       0, /* charValOffset */
                                       SizeDevice_Info, /* charValueLen */
                                       (uint8_t *)  pPayload);
      if (ret != BLE_STATUS_SUCCESS)
 8014cec:	7bfb      	ldrb	r3, [r7, #15]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d00f      	beq.n	8014d12 <Custom_STM_App_Update_Char+0x226>
      {
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value DEVICE_INFO command, result : 0x%x \n\r", ret);
 8014cf2:	4815      	ldr	r0, [pc, #84]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014cf4:	f7fd fc62 	bl	80125bc <DbgTraceGetFileName>
 8014cf8:	4601      	mov	r1, r0
 8014cfa:	f240 3317 	movw	r3, #791	@ 0x317
 8014cfe:	4a13      	ldr	r2, [pc, #76]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014d00:	4813      	ldr	r0, [pc, #76]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014d02:	f001 fb2b 	bl	801635c <iprintf>
 8014d06:	7bfb      	ldrb	r3, [r7, #15]
 8014d08:	4619      	mov	r1, r3
 8014d0a:	481f      	ldr	r0, [pc, #124]	@ (8014d88 <Custom_STM_App_Update_Char+0x29c>)
 8014d0c:	f001 fb26 	bl	801635c <iprintf>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
      }
      /* USER CODE BEGIN CUSTOM_STM_App_Update_Service_1_Char_5*/

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_5*/
      break;
 8014d10:	e010      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value DEVICE_INFO command\n\r");
 8014d12:	480d      	ldr	r0, [pc, #52]	@ (8014d48 <Custom_STM_App_Update_Char+0x25c>)
 8014d14:	f7fd fc52 	bl	80125bc <DbgTraceGetFileName>
 8014d18:	4601      	mov	r1, r0
 8014d1a:	f240 331b 	movw	r3, #795	@ 0x31b
 8014d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8014d4c <Custom_STM_App_Update_Char+0x260>)
 8014d20:	480b      	ldr	r0, [pc, #44]	@ (8014d50 <Custom_STM_App_Update_Char+0x264>)
 8014d22:	f001 fb1b 	bl	801635c <iprintf>
 8014d26:	4819      	ldr	r0, [pc, #100]	@ (8014d8c <Custom_STM_App_Update_Char+0x2a0>)
 8014d28:	f001 fb18 	bl	801635c <iprintf>
      break;
 8014d2c:	e002      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>

    default:
      break;
 8014d2e:	bf00      	nop
 8014d30:	e000      	b.n	8014d34 <Custom_STM_App_Update_Char+0x248>
      break;
 8014d32:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8014d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d36:	4618      	mov	r0, r3
 8014d38:	3710      	adds	r7, #16
 8014d3a:	46bd      	mov	sp, r7
 8014d3c:	bd80      	pop	{r7, pc}
 8014d3e:	bf00      	nop
 8014d40:	20001a74 	.word	0x20001a74
 8014d44:	200000b7 	.word	0x200000b7
 8014d48:	080199f0 	.word	0x080199f0
 8014d4c:	0801a2d0 	.word	0x0801a2d0
 8014d50:	08019a10 	.word	0x08019a10
 8014d54:	08019d0c 	.word	0x08019d0c
 8014d58:	08019d54 	.word	0x08019d54
 8014d5c:	200019d0 	.word	0x200019d0
 8014d60:	200000b8 	.word	0x200000b8
 8014d64:	08019d8c 	.word	0x08019d8c
 8014d68:	08019dd4 	.word	0x08019dd4
 8014d6c:	200000b9 	.word	0x200000b9
 8014d70:	08019e0c 	.word	0x08019e0c
 8014d74:	08019e50 	.word	0x08019e50
 8014d78:	200000ba 	.word	0x200000ba
 8014d7c:	08019e84 	.word	0x08019e84
 8014d80:	08019ed0 	.word	0x08019ed0
 8014d84:	200000bb 	.word	0x200000bb
 8014d88:	08019f0c 	.word	0x08019f0c
 8014d8c:	08019f58 	.word	0x08019f58

08014d90 <LL_PWR_EnableBootC2>:
{
 8014d90:	b480      	push	{r7}
 8014d92:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8014d94:	4b05      	ldr	r3, [pc, #20]	@ (8014dac <LL_PWR_EnableBootC2+0x1c>)
 8014d96:	68db      	ldr	r3, [r3, #12]
 8014d98:	4a04      	ldr	r2, [pc, #16]	@ (8014dac <LL_PWR_EnableBootC2+0x1c>)
 8014d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8014d9e:	60d3      	str	r3, [r2, #12]
}
 8014da0:	bf00      	nop
 8014da2:	46bd      	mov	sp, r7
 8014da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014da8:	4770      	bx	lr
 8014daa:	bf00      	nop
 8014dac:	58000400 	.word	0x58000400

08014db0 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8014db0:	b480      	push	{r7}
 8014db2:	b083      	sub	sp, #12
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8014db8:	4b06      	ldr	r3, [pc, #24]	@ (8014dd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014dba:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8014dbe:	4905      	ldr	r1, [pc, #20]	@ (8014dd4 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	4313      	orrs	r3, r2
 8014dc4:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8014dc8:	bf00      	nop
 8014dca:	370c      	adds	r7, #12
 8014dcc:	46bd      	mov	sp, r7
 8014dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dd2:	4770      	bx	lr
 8014dd4:	58000800 	.word	0x58000800

08014dd8 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b083      	sub	sp, #12
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8014de0:	4b05      	ldr	r3, [pc, #20]	@ (8014df8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014de2:	6a1a      	ldr	r2, [r3, #32]
 8014de4:	4904      	ldr	r1, [pc, #16]	@ (8014df8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	4313      	orrs	r3, r2
 8014dea:	620b      	str	r3, [r1, #32]
}
 8014dec:	bf00      	nop
 8014dee:	370c      	adds	r7, #12
 8014df0:	46bd      	mov	sp, r7
 8014df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df6:	4770      	bx	lr
 8014df8:	58000800 	.word	0x58000800

08014dfc <LL_AHB3_GRP1_EnableClock>:
{
 8014dfc:	b480      	push	{r7}
 8014dfe:	b085      	sub	sp, #20
 8014e00:	af00      	add	r7, sp, #0
 8014e02:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8014e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	4313      	orrs	r3, r2
 8014e12:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8014e14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4013      	ands	r3, r2
 8014e1e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014e20:	68fb      	ldr	r3, [r7, #12]
}
 8014e22:	bf00      	nop
 8014e24:	3714      	adds	r7, #20
 8014e26:	46bd      	mov	sp, r7
 8014e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2c:	4770      	bx	lr

08014e2e <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8014e2e:	b480      	push	{r7}
 8014e30:	b085      	sub	sp, #20
 8014e32:	af00      	add	r7, sp, #0
 8014e34:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8014e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e3a:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014e3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	4313      	orrs	r3, r2
 8014e46:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8014e4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8014e4e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	4013      	ands	r3, r2
 8014e56:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014e58:	68fb      	ldr	r3, [r7, #12]
}
 8014e5a:	bf00      	nop
 8014e5c:	3714      	adds	r7, #20
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e64:	4770      	bx	lr

08014e66 <LL_C1_IPCC_EnableIT_TXF>:
{
 8014e66:	b480      	push	{r7}
 8014e68:	b083      	sub	sp, #12
 8014e6a:	af00      	add	r7, sp, #0
 8014e6c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	601a      	str	r2, [r3, #0]
}
 8014e7a:	bf00      	nop
 8014e7c:	370c      	adds	r7, #12
 8014e7e:	46bd      	mov	sp, r7
 8014e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e84:	4770      	bx	lr

08014e86 <LL_C1_IPCC_EnableIT_RXO>:
{
 8014e86:	b480      	push	{r7}
 8014e88:	b083      	sub	sp, #12
 8014e8a:	af00      	add	r7, sp, #0
 8014e8c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	f043 0201 	orr.w	r2, r3, #1
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	601a      	str	r2, [r3, #0]
}
 8014e9a:	bf00      	nop
 8014e9c:	370c      	adds	r7, #12
 8014e9e:	46bd      	mov	sp, r7
 8014ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ea4:	4770      	bx	lr

08014ea6 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8014ea6:	b480      	push	{r7}
 8014ea8:	b083      	sub	sp, #12
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	6078      	str	r0, [r7, #4]
 8014eae:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	685a      	ldr	r2, [r3, #4]
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	041b      	lsls	r3, r3, #16
 8014eb8:	43db      	mvns	r3, r3
 8014eba:	401a      	ands	r2, r3
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	605a      	str	r2, [r3, #4]
}
 8014ec0:	bf00      	nop
 8014ec2:	370c      	adds	r7, #12
 8014ec4:	46bd      	mov	sp, r7
 8014ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eca:	4770      	bx	lr

08014ecc <LL_C1_IPCC_DisableTransmitChannel>:
{
 8014ecc:	b480      	push	{r7}
 8014ece:	b083      	sub	sp, #12
 8014ed0:	af00      	add	r7, sp, #0
 8014ed2:	6078      	str	r0, [r7, #4]
 8014ed4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	685a      	ldr	r2, [r3, #4]
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	041b      	lsls	r3, r3, #16
 8014ede:	431a      	orrs	r2, r3
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	605a      	str	r2, [r3, #4]
}
 8014ee4:	bf00      	nop
 8014ee6:	370c      	adds	r7, #12
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eee:	4770      	bx	lr

08014ef0 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8014ef0:	b480      	push	{r7}
 8014ef2:	b083      	sub	sp, #12
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	685a      	ldr	r2, [r3, #4]
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	43db      	mvns	r3, r3
 8014f02:	401a      	ands	r2, r3
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	605a      	str	r2, [r3, #4]
}
 8014f08:	bf00      	nop
 8014f0a:	370c      	adds	r7, #12
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f12:	4770      	bx	lr

08014f14 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8014f14:	b480      	push	{r7}
 8014f16:	b083      	sub	sp, #12
 8014f18:	af00      	add	r7, sp, #0
 8014f1a:	6078      	str	r0, [r7, #4]
 8014f1c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	683a      	ldr	r2, [r7, #0]
 8014f22:	609a      	str	r2, [r3, #8]
}
 8014f24:	bf00      	nop
 8014f26:	370c      	adds	r7, #12
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2e:	4770      	bx	lr

08014f30 <LL_C1_IPCC_SetFlag_CHx>:
{
 8014f30:	b480      	push	{r7}
 8014f32:	b083      	sub	sp, #12
 8014f34:	af00      	add	r7, sp, #0
 8014f36:	6078      	str	r0, [r7, #4]
 8014f38:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8014f3a:	683b      	ldr	r3, [r7, #0]
 8014f3c:	041a      	lsls	r2, r3, #16
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	609a      	str	r2, [r3, #8]
}
 8014f42:	bf00      	nop
 8014f44:	370c      	adds	r7, #12
 8014f46:	46bd      	mov	sp, r7
 8014f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f4c:	4770      	bx	lr

08014f4e <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8014f4e:	b480      	push	{r7}
 8014f50:	b083      	sub	sp, #12
 8014f52:	af00      	add	r7, sp, #0
 8014f54:	6078      	str	r0, [r7, #4]
 8014f56:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	68da      	ldr	r2, [r3, #12]
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	4013      	ands	r3, r2
 8014f60:	683a      	ldr	r2, [r7, #0]
 8014f62:	429a      	cmp	r2, r3
 8014f64:	d101      	bne.n	8014f6a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8014f66:	2301      	movs	r3, #1
 8014f68:	e000      	b.n	8014f6c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8014f6a:	2300      	movs	r3, #0
}
 8014f6c:	4618      	mov	r0, r3
 8014f6e:	370c      	adds	r7, #12
 8014f70:	46bd      	mov	sp, r7
 8014f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f76:	4770      	bx	lr

08014f78 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8014f78:	b480      	push	{r7}
 8014f7a:	b083      	sub	sp, #12
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
 8014f80:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	69da      	ldr	r2, [r3, #28]
 8014f86:	683b      	ldr	r3, [r7, #0]
 8014f88:	4013      	ands	r3, r2
 8014f8a:	683a      	ldr	r2, [r7, #0]
 8014f8c:	429a      	cmp	r2, r3
 8014f8e:	d101      	bne.n	8014f94 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8014f90:	2301      	movs	r3, #1
 8014f92:	e000      	b.n	8014f96 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8014f94:	2300      	movs	r3, #0
}
 8014f96:	4618      	mov	r0, r3
 8014f98:	370c      	adds	r7, #12
 8014f9a:	46bd      	mov	sp, r7
 8014f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fa0:	4770      	bx	lr
	...

08014fa4 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8014fa4:	b580      	push	{r7, lr}
 8014fa6:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8014fa8:	2102      	movs	r1, #2
 8014faa:	4818      	ldr	r0, [pc, #96]	@ (801500c <HW_IPCC_Rx_Handler+0x68>)
 8014fac:	f7ff ffe4 	bl	8014f78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014fb0:	4603      	mov	r3, r0
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d008      	beq.n	8014fc8 <HW_IPCC_Rx_Handler+0x24>
 8014fb6:	4b15      	ldr	r3, [pc, #84]	@ (801500c <HW_IPCC_Rx_Handler+0x68>)
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	f003 0302 	and.w	r3, r3, #2
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d102      	bne.n	8014fc8 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8014fc2:	f000 f8d5 	bl	8015170 <HW_IPCC_SYS_EvtHandler>
 8014fc6:	e01e      	b.n	8015006 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8014fc8:	2101      	movs	r1, #1
 8014fca:	4810      	ldr	r0, [pc, #64]	@ (801500c <HW_IPCC_Rx_Handler+0x68>)
 8014fcc:	f7ff ffd4 	bl	8014f78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d008      	beq.n	8014fe8 <HW_IPCC_Rx_Handler+0x44>
 8014fd6:	4b0d      	ldr	r3, [pc, #52]	@ (801500c <HW_IPCC_Rx_Handler+0x68>)
 8014fd8:	685b      	ldr	r3, [r3, #4]
 8014fda:	f003 0301 	and.w	r3, r3, #1
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d102      	bne.n	8014fe8 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8014fe2:	f000 f889 	bl	80150f8 <HW_IPCC_BLE_EvtHandler>
 8014fe6:	e00e      	b.n	8015006 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8014fe8:	2108      	movs	r1, #8
 8014fea:	4808      	ldr	r0, [pc, #32]	@ (801500c <HW_IPCC_Rx_Handler+0x68>)
 8014fec:	f7ff ffc4 	bl	8014f78 <LL_C2_IPCC_IsActiveFlag_CHx>
 8014ff0:	4603      	mov	r3, r0
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d008      	beq.n	8015008 <HW_IPCC_Rx_Handler+0x64>
 8014ff6:	4b05      	ldr	r3, [pc, #20]	@ (801500c <HW_IPCC_Rx_Handler+0x68>)
 8014ff8:	685b      	ldr	r3, [r3, #4]
 8014ffa:	f003 0308 	and.w	r3, r3, #8
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d102      	bne.n	8015008 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8015002:	f000 f901 	bl	8015208 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8015006:	bf00      	nop
 8015008:	bf00      	nop
}
 801500a:	bd80      	pop	{r7, pc}
 801500c:	58000c00 	.word	0x58000c00

08015010 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8015010:	b580      	push	{r7, lr}
 8015012:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8015014:	2102      	movs	r1, #2
 8015016:	4818      	ldr	r0, [pc, #96]	@ (8015078 <HW_IPCC_Tx_Handler+0x68>)
 8015018:	f7ff ff99 	bl	8014f4e <LL_C1_IPCC_IsActiveFlag_CHx>
 801501c:	4603      	mov	r3, r0
 801501e:	2b00      	cmp	r3, #0
 8015020:	d108      	bne.n	8015034 <HW_IPCC_Tx_Handler+0x24>
 8015022:	4b15      	ldr	r3, [pc, #84]	@ (8015078 <HW_IPCC_Tx_Handler+0x68>)
 8015024:	685b      	ldr	r3, [r3, #4]
 8015026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801502a:	2b00      	cmp	r3, #0
 801502c:	d102      	bne.n	8015034 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 801502e:	f000 f893 	bl	8015158 <HW_IPCC_SYS_CmdEvtHandler>
 8015032:	e01e      	b.n	8015072 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8015034:	2108      	movs	r1, #8
 8015036:	4810      	ldr	r0, [pc, #64]	@ (8015078 <HW_IPCC_Tx_Handler+0x68>)
 8015038:	f7ff ff89 	bl	8014f4e <LL_C1_IPCC_IsActiveFlag_CHx>
 801503c:	4603      	mov	r3, r0
 801503e:	2b00      	cmp	r3, #0
 8015040:	d108      	bne.n	8015054 <HW_IPCC_Tx_Handler+0x44>
 8015042:	4b0d      	ldr	r3, [pc, #52]	@ (8015078 <HW_IPCC_Tx_Handler+0x68>)
 8015044:	685b      	ldr	r3, [r3, #4]
 8015046:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801504a:	2b00      	cmp	r3, #0
 801504c:	d102      	bne.n	8015054 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 801504e:	f000 f8bd 	bl	80151cc <HW_IPCC_MM_FreeBufHandler>
 8015052:	e00e      	b.n	8015072 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8015054:	2120      	movs	r1, #32
 8015056:	4808      	ldr	r0, [pc, #32]	@ (8015078 <HW_IPCC_Tx_Handler+0x68>)
 8015058:	f7ff ff79 	bl	8014f4e <LL_C1_IPCC_IsActiveFlag_CHx>
 801505c:	4603      	mov	r3, r0
 801505e:	2b00      	cmp	r3, #0
 8015060:	d108      	bne.n	8015074 <HW_IPCC_Tx_Handler+0x64>
 8015062:	4b05      	ldr	r3, [pc, #20]	@ (8015078 <HW_IPCC_Tx_Handler+0x68>)
 8015064:	685b      	ldr	r3, [r3, #4]
 8015066:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801506a:	2b00      	cmp	r3, #0
 801506c:	d102      	bne.n	8015074 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 801506e:	f000 f84f 	bl	8015110 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8015072:	bf00      	nop
 8015074:	bf00      	nop
}
 8015076:	bd80      	pop	{r7, pc}
 8015078:	58000c00 	.word	0x58000c00

0801507c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801507c:	b580      	push	{r7, lr}
 801507e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8015080:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8015084:	f7ff fed3 	bl	8014e2e <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8015088:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801508c:	f7ff fea4 	bl	8014dd8 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8015090:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8015094:	f7ff fe8c 	bl	8014db0 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8015098:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801509a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801509c:	f7ff fe78 	bl	8014d90 <LL_PWR_EnableBootC2>

  return;
 80150a0:	bf00      	nop
}
 80150a2:	bd80      	pop	{r7, pc}

080150a4 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80150a4:	b580      	push	{r7, lr}
 80150a6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80150a8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80150ac:	f7ff fea6 	bl	8014dfc <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80150b0:	4806      	ldr	r0, [pc, #24]	@ (80150cc <HW_IPCC_Init+0x28>)
 80150b2:	f7ff fee8 	bl	8014e86 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80150b6:	4805      	ldr	r0, [pc, #20]	@ (80150cc <HW_IPCC_Init+0x28>)
 80150b8:	f7ff fed5 	bl	8014e66 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80150bc:	202c      	movs	r0, #44	@ 0x2c
 80150be:	f7f0 f85e 	bl	800517e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80150c2:	202d      	movs	r0, #45	@ 0x2d
 80150c4:	f7f0 f85b 	bl	800517e <HAL_NVIC_EnableIRQ>

  return;
 80150c8:	bf00      	nop
}
 80150ca:	bd80      	pop	{r7, pc}
 80150cc:	58000c00 	.word	0x58000c00

080150d0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80150d0:	b580      	push	{r7, lr}
 80150d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80150d4:	2101      	movs	r1, #1
 80150d6:	4802      	ldr	r0, [pc, #8]	@ (80150e0 <HW_IPCC_BLE_Init+0x10>)
 80150d8:	f7ff ff0a 	bl	8014ef0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80150dc:	bf00      	nop
}
 80150de:	bd80      	pop	{r7, pc}
 80150e0:	58000c00 	.word	0x58000c00

080150e4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80150e4:	b580      	push	{r7, lr}
 80150e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80150e8:	2101      	movs	r1, #1
 80150ea:	4802      	ldr	r0, [pc, #8]	@ (80150f4 <HW_IPCC_BLE_SendCmd+0x10>)
 80150ec:	f7ff ff20 	bl	8014f30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80150f0:	bf00      	nop
}
 80150f2:	bd80      	pop	{r7, pc}
 80150f4:	58000c00 	.word	0x58000c00

080150f8 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80150fc:	f7fd f8a6 	bl	801224c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8015100:	2101      	movs	r1, #1
 8015102:	4802      	ldr	r0, [pc, #8]	@ (801510c <HW_IPCC_BLE_EvtHandler+0x14>)
 8015104:	f7ff ff06 	bl	8014f14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015108:	bf00      	nop
}
 801510a:	bd80      	pop	{r7, pc}
 801510c:	58000c00 	.word	0x58000c00

08015110 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8015110:	b580      	push	{r7, lr}
 8015112:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8015114:	2120      	movs	r1, #32
 8015116:	4803      	ldr	r0, [pc, #12]	@ (8015124 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8015118:	f7ff fed8 	bl	8014ecc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 801511c:	f7fd f8c6 	bl	80122ac <HW_IPCC_BLE_AclDataAckNot>

  return;
 8015120:	bf00      	nop
}
 8015122:	bd80      	pop	{r7, pc}
 8015124:	58000c00 	.word	0x58000c00

08015128 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8015128:	b580      	push	{r7, lr}
 801512a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 801512c:	2102      	movs	r1, #2
 801512e:	4802      	ldr	r0, [pc, #8]	@ (8015138 <HW_IPCC_SYS_Init+0x10>)
 8015130:	f7ff fede 	bl	8014ef0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015134:	bf00      	nop
}
 8015136:	bd80      	pop	{r7, pc}
 8015138:	58000c00 	.word	0x58000c00

0801513c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 801513c:	b580      	push	{r7, lr}
 801513e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015140:	2102      	movs	r1, #2
 8015142:	4804      	ldr	r0, [pc, #16]	@ (8015154 <HW_IPCC_SYS_SendCmd+0x18>)
 8015144:	f7ff fef4 	bl	8014f30 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8015148:	2102      	movs	r1, #2
 801514a:	4802      	ldr	r0, [pc, #8]	@ (8015154 <HW_IPCC_SYS_SendCmd+0x18>)
 801514c:	f7ff feab 	bl	8014ea6 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8015150:	bf00      	nop
}
 8015152:	bd80      	pop	{r7, pc}
 8015154:	58000c00 	.word	0x58000c00

08015158 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8015158:	b580      	push	{r7, lr}
 801515a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801515c:	2102      	movs	r1, #2
 801515e:	4803      	ldr	r0, [pc, #12]	@ (801516c <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8015160:	f7ff feb4 	bl	8014ecc <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8015164:	f7fd f8f2 	bl	801234c <HW_IPCC_SYS_CmdEvtNot>

  return;
 8015168:	bf00      	nop
}
 801516a:	bd80      	pop	{r7, pc}
 801516c:	58000c00 	.word	0x58000c00

08015170 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8015170:	b580      	push	{r7, lr}
 8015172:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8015174:	f7fd f900 	bl	8012378 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8015178:	2102      	movs	r1, #2
 801517a:	4802      	ldr	r0, [pc, #8]	@ (8015184 <HW_IPCC_SYS_EvtHandler+0x14>)
 801517c:	f7ff feca 	bl	8014f14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015180:	bf00      	nop
}
 8015182:	bd80      	pop	{r7, pc}
 8015184:	58000c00 	.word	0x58000c00

08015188 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
 801518e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8015190:	2108      	movs	r1, #8
 8015192:	480c      	ldr	r0, [pc, #48]	@ (80151c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8015194:	f7ff fedb 	bl	8014f4e <LL_C1_IPCC_IsActiveFlag_CHx>
 8015198:	4603      	mov	r3, r0
 801519a:	2b00      	cmp	r3, #0
 801519c:	d007      	beq.n	80151ae <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 801519e:	4a0a      	ldr	r2, [pc, #40]	@ (80151c8 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80151a4:	2108      	movs	r1, #8
 80151a6:	4807      	ldr	r0, [pc, #28]	@ (80151c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80151a8:	f7ff fe7d 	bl	8014ea6 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80151ac:	e006      	b.n	80151bc <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80151b2:	2108      	movs	r1, #8
 80151b4:	4803      	ldr	r0, [pc, #12]	@ (80151c4 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80151b6:	f7ff febb 	bl	8014f30 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80151ba:	bf00      	nop
}
 80151bc:	3708      	adds	r7, #8
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}
 80151c2:	bf00      	nop
 80151c4:	58000c00 	.word	0x58000c00
 80151c8:	20001a80 	.word	0x20001a80

080151cc <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80151d0:	2108      	movs	r1, #8
 80151d2:	4806      	ldr	r0, [pc, #24]	@ (80151ec <HW_IPCC_MM_FreeBufHandler+0x20>)
 80151d4:	f7ff fe7a 	bl	8014ecc <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80151d8:	4b05      	ldr	r3, [pc, #20]	@ (80151f0 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80151da:	681b      	ldr	r3, [r3, #0]
 80151dc:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80151de:	2108      	movs	r1, #8
 80151e0:	4802      	ldr	r0, [pc, #8]	@ (80151ec <HW_IPCC_MM_FreeBufHandler+0x20>)
 80151e2:	f7ff fea5 	bl	8014f30 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80151e6:	bf00      	nop
}
 80151e8:	bd80      	pop	{r7, pc}
 80151ea:	bf00      	nop
 80151ec:	58000c00 	.word	0x58000c00
 80151f0:	20001a80 	.word	0x20001a80

080151f4 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80151f8:	2108      	movs	r1, #8
 80151fa:	4802      	ldr	r0, [pc, #8]	@ (8015204 <HW_IPCC_TRACES_Init+0x10>)
 80151fc:	f7ff fe78 	bl	8014ef0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8015200:	bf00      	nop
}
 8015202:	bd80      	pop	{r7, pc}
 8015204:	58000c00 	.word	0x58000c00

08015208 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8015208:	b580      	push	{r7, lr}
 801520a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 801520c:	f7fd f95c 	bl	80124c8 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8015210:	2108      	movs	r1, #8
 8015212:	4802      	ldr	r0, [pc, #8]	@ (801521c <HW_IPCC_TRACES_EvtHandler+0x14>)
 8015214:	f7ff fe7e 	bl	8014f14 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8015218:	bf00      	nop
}
 801521a:	bd80      	pop	{r7, pc}
 801521c:	58000c00 	.word	0x58000c00

08015220 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8015220:	b580      	push	{r7, lr}
 8015222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8015224:	2200      	movs	r2, #0
 8015226:	4912      	ldr	r1, [pc, #72]	@ (8015270 <MX_USB_Device_Init+0x50>)
 8015228:	4812      	ldr	r0, [pc, #72]	@ (8015274 <MX_USB_Device_Init+0x54>)
 801522a:	f7f9 fdd1 	bl	800edd0 <USBD_Init>
 801522e:	4603      	mov	r3, r0
 8015230:	2b00      	cmp	r3, #0
 8015232:	d001      	beq.n	8015238 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8015234:	f7ef f9be 	bl	80045b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015238:	490f      	ldr	r1, [pc, #60]	@ (8015278 <MX_USB_Device_Init+0x58>)
 801523a:	480e      	ldr	r0, [pc, #56]	@ (8015274 <MX_USB_Device_Init+0x54>)
 801523c:	f7f9 fdf8 	bl	800ee30 <USBD_RegisterClass>
 8015240:	4603      	mov	r3, r0
 8015242:	2b00      	cmp	r3, #0
 8015244:	d001      	beq.n	801524a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8015246:	f7ef f9b5 	bl	80045b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 801524a:	490c      	ldr	r1, [pc, #48]	@ (801527c <MX_USB_Device_Init+0x5c>)
 801524c:	4809      	ldr	r0, [pc, #36]	@ (8015274 <MX_USB_Device_Init+0x54>)
 801524e:	f7f9 fcef 	bl	800ec30 <USBD_CDC_RegisterInterface>
 8015252:	4603      	mov	r3, r0
 8015254:	2b00      	cmp	r3, #0
 8015256:	d001      	beq.n	801525c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015258:	f7ef f9ac 	bl	80045b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 801525c:	4805      	ldr	r0, [pc, #20]	@ (8015274 <MX_USB_Device_Init+0x54>)
 801525e:	f7f9 fe1d 	bl	800ee9c <USBD_Start>
 8015262:	4603      	mov	r3, r0
 8015264:	2b00      	cmp	r3, #0
 8015266:	d001      	beq.n	801526c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015268:	f7ef f9a4 	bl	80045b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 801526c:	bf00      	nop
 801526e:	bd80      	pop	{r7, pc}
 8015270:	200000d0 	.word	0x200000d0
 8015274:	20001a84 	.word	0x20001a84
 8015278:	20000024 	.word	0x20000024
 801527c:	200000bc 	.word	0x200000bc

08015280 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015284:	2200      	movs	r2, #0
 8015286:	4905      	ldr	r1, [pc, #20]	@ (801529c <CDC_Init_FS+0x1c>)
 8015288:	4805      	ldr	r0, [pc, #20]	@ (80152a0 <CDC_Init_FS+0x20>)
 801528a:	f7f9 fceb 	bl	800ec64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801528e:	4905      	ldr	r1, [pc, #20]	@ (80152a4 <CDC_Init_FS+0x24>)
 8015290:	4803      	ldr	r0, [pc, #12]	@ (80152a0 <CDC_Init_FS+0x20>)
 8015292:	f7f9 fd09 	bl	800eca8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015296:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015298:	4618      	mov	r0, r3
 801529a:	bd80      	pop	{r7, pc}
 801529c:	20002560 	.word	0x20002560
 80152a0:	20001a84 	.word	0x20001a84
 80152a4:	20001d60 	.word	0x20001d60

080152a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80152a8:	b480      	push	{r7}
 80152aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80152ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80152ae:	4618      	mov	r0, r3
 80152b0:	46bd      	mov	sp, r7
 80152b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b6:	4770      	bx	lr

080152b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80152b8:	b480      	push	{r7}
 80152ba:	b083      	sub	sp, #12
 80152bc:	af00      	add	r7, sp, #0
 80152be:	4603      	mov	r3, r0
 80152c0:	6039      	str	r1, [r7, #0]
 80152c2:	71fb      	strb	r3, [r7, #7]
 80152c4:	4613      	mov	r3, r2
 80152c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80152c8:	79fb      	ldrb	r3, [r7, #7]
 80152ca:	2b23      	cmp	r3, #35	@ 0x23
 80152cc:	d84a      	bhi.n	8015364 <CDC_Control_FS+0xac>
 80152ce:	a201      	add	r2, pc, #4	@ (adr r2, 80152d4 <CDC_Control_FS+0x1c>)
 80152d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152d4:	08015365 	.word	0x08015365
 80152d8:	08015365 	.word	0x08015365
 80152dc:	08015365 	.word	0x08015365
 80152e0:	08015365 	.word	0x08015365
 80152e4:	08015365 	.word	0x08015365
 80152e8:	08015365 	.word	0x08015365
 80152ec:	08015365 	.word	0x08015365
 80152f0:	08015365 	.word	0x08015365
 80152f4:	08015365 	.word	0x08015365
 80152f8:	08015365 	.word	0x08015365
 80152fc:	08015365 	.word	0x08015365
 8015300:	08015365 	.word	0x08015365
 8015304:	08015365 	.word	0x08015365
 8015308:	08015365 	.word	0x08015365
 801530c:	08015365 	.word	0x08015365
 8015310:	08015365 	.word	0x08015365
 8015314:	08015365 	.word	0x08015365
 8015318:	08015365 	.word	0x08015365
 801531c:	08015365 	.word	0x08015365
 8015320:	08015365 	.word	0x08015365
 8015324:	08015365 	.word	0x08015365
 8015328:	08015365 	.word	0x08015365
 801532c:	08015365 	.word	0x08015365
 8015330:	08015365 	.word	0x08015365
 8015334:	08015365 	.word	0x08015365
 8015338:	08015365 	.word	0x08015365
 801533c:	08015365 	.word	0x08015365
 8015340:	08015365 	.word	0x08015365
 8015344:	08015365 	.word	0x08015365
 8015348:	08015365 	.word	0x08015365
 801534c:	08015365 	.word	0x08015365
 8015350:	08015365 	.word	0x08015365
 8015354:	08015365 	.word	0x08015365
 8015358:	08015365 	.word	0x08015365
 801535c:	08015365 	.word	0x08015365
 8015360:	08015365 	.word	0x08015365
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015364:	bf00      	nop
  }

  return (USBD_OK);
 8015366:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015368:	4618      	mov	r0, r3
 801536a:	370c      	adds	r7, #12
 801536c:	46bd      	mov	sp, r7
 801536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015372:	4770      	bx	lr

08015374 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
 801537c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801537e:	6879      	ldr	r1, [r7, #4]
 8015380:	4805      	ldr	r0, [pc, #20]	@ (8015398 <CDC_Receive_FS+0x24>)
 8015382:	f7f9 fc91 	bl	800eca8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015386:	4804      	ldr	r0, [pc, #16]	@ (8015398 <CDC_Receive_FS+0x24>)
 8015388:	f7f9 fcec 	bl	800ed64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801538c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801538e:	4618      	mov	r0, r3
 8015390:	3708      	adds	r7, #8
 8015392:	46bd      	mov	sp, r7
 8015394:	bd80      	pop	{r7, pc}
 8015396:	bf00      	nop
 8015398:	20001a84 	.word	0x20001a84

0801539c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801539c:	b580      	push	{r7, lr}
 801539e:	b084      	sub	sp, #16
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	460b      	mov	r3, r1
 80153a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80153a8:	2300      	movs	r3, #0
 80153aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80153ac:	4b0d      	ldr	r3, [pc, #52]	@ (80153e4 <CDC_Transmit_FS+0x48>)
 80153ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80153b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d001      	beq.n	80153c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80153be:	2301      	movs	r3, #1
 80153c0:	e00b      	b.n	80153da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80153c2:	887b      	ldrh	r3, [r7, #2]
 80153c4:	461a      	mov	r2, r3
 80153c6:	6879      	ldr	r1, [r7, #4]
 80153c8:	4806      	ldr	r0, [pc, #24]	@ (80153e4 <CDC_Transmit_FS+0x48>)
 80153ca:	f7f9 fc4b 	bl	800ec64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80153ce:	4805      	ldr	r0, [pc, #20]	@ (80153e4 <CDC_Transmit_FS+0x48>)
 80153d0:	f7f9 fc88 	bl	800ece4 <USBD_CDC_TransmitPacket>
 80153d4:	4603      	mov	r3, r0
 80153d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80153d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80153da:	4618      	mov	r0, r3
 80153dc:	3710      	adds	r7, #16
 80153de:	46bd      	mov	sp, r7
 80153e0:	bd80      	pop	{r7, pc}
 80153e2:	bf00      	nop
 80153e4:	20001a84 	.word	0x20001a84

080153e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80153e8:	b480      	push	{r7}
 80153ea:	b087      	sub	sp, #28
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	60f8      	str	r0, [r7, #12]
 80153f0:	60b9      	str	r1, [r7, #8]
 80153f2:	4613      	mov	r3, r2
 80153f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80153f6:	2300      	movs	r3, #0
 80153f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80153fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80153fe:	4618      	mov	r0, r3
 8015400:	371c      	adds	r7, #28
 8015402:	46bd      	mov	sp, r7
 8015404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015408:	4770      	bx	lr
	...

0801540c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801540c:	b480      	push	{r7}
 801540e:	b083      	sub	sp, #12
 8015410:	af00      	add	r7, sp, #0
 8015412:	4603      	mov	r3, r0
 8015414:	6039      	str	r1, [r7, #0]
 8015416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8015418:	683b      	ldr	r3, [r7, #0]
 801541a:	2212      	movs	r2, #18
 801541c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 801541e:	4b03      	ldr	r3, [pc, #12]	@ (801542c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8015420:	4618      	mov	r0, r3
 8015422:	370c      	adds	r7, #12
 8015424:	46bd      	mov	sp, r7
 8015426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542a:	4770      	bx	lr
 801542c:	200000f0 	.word	0x200000f0

08015430 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015430:	b480      	push	{r7}
 8015432:	b083      	sub	sp, #12
 8015434:	af00      	add	r7, sp, #0
 8015436:	4603      	mov	r3, r0
 8015438:	6039      	str	r1, [r7, #0]
 801543a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	2204      	movs	r2, #4
 8015440:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015442:	4b03      	ldr	r3, [pc, #12]	@ (8015450 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8015444:	4618      	mov	r0, r3
 8015446:	370c      	adds	r7, #12
 8015448:	46bd      	mov	sp, r7
 801544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801544e:	4770      	bx	lr
 8015450:	20000104 	.word	0x20000104

08015454 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015454:	b580      	push	{r7, lr}
 8015456:	b082      	sub	sp, #8
 8015458:	af00      	add	r7, sp, #0
 801545a:	4603      	mov	r3, r0
 801545c:	6039      	str	r1, [r7, #0]
 801545e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015460:	79fb      	ldrb	r3, [r7, #7]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d105      	bne.n	8015472 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015466:	683a      	ldr	r2, [r7, #0]
 8015468:	4907      	ldr	r1, [pc, #28]	@ (8015488 <USBD_CDC_ProductStrDescriptor+0x34>)
 801546a:	4808      	ldr	r0, [pc, #32]	@ (801548c <USBD_CDC_ProductStrDescriptor+0x38>)
 801546c:	f7fa fe5e 	bl	801012c <USBD_GetString>
 8015470:	e004      	b.n	801547c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8015472:	683a      	ldr	r2, [r7, #0]
 8015474:	4904      	ldr	r1, [pc, #16]	@ (8015488 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015476:	4805      	ldr	r0, [pc, #20]	@ (801548c <USBD_CDC_ProductStrDescriptor+0x38>)
 8015478:	f7fa fe58 	bl	801012c <USBD_GetString>
  }
  return USBD_StrDesc;
 801547c:	4b02      	ldr	r3, [pc, #8]	@ (8015488 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801547e:	4618      	mov	r0, r3
 8015480:	3708      	adds	r7, #8
 8015482:	46bd      	mov	sp, r7
 8015484:	bd80      	pop	{r7, pc}
 8015486:	bf00      	nop
 8015488:	20002d60 	.word	0x20002d60
 801548c:	08019f94 	.word	0x08019f94

08015490 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	4603      	mov	r3, r0
 8015498:	6039      	str	r1, [r7, #0]
 801549a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801549c:	683a      	ldr	r2, [r7, #0]
 801549e:	4904      	ldr	r1, [pc, #16]	@ (80154b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80154a0:	4804      	ldr	r0, [pc, #16]	@ (80154b4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80154a2:	f7fa fe43 	bl	801012c <USBD_GetString>
  return USBD_StrDesc;
 80154a6:	4b02      	ldr	r3, [pc, #8]	@ (80154b0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80154a8:	4618      	mov	r0, r3
 80154aa:	3708      	adds	r7, #8
 80154ac:	46bd      	mov	sp, r7
 80154ae:	bd80      	pop	{r7, pc}
 80154b0:	20002d60 	.word	0x20002d60
 80154b4:	08019fb0 	.word	0x08019fb0

080154b8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b082      	sub	sp, #8
 80154bc:	af00      	add	r7, sp, #0
 80154be:	4603      	mov	r3, r0
 80154c0:	6039      	str	r1, [r7, #0]
 80154c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80154c4:	683b      	ldr	r3, [r7, #0]
 80154c6:	221a      	movs	r2, #26
 80154c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80154ca:	f000 f843 	bl	8015554 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80154ce:	4b02      	ldr	r3, [pc, #8]	@ (80154d8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80154d0:	4618      	mov	r0, r3
 80154d2:	3708      	adds	r7, #8
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	20000108 	.word	0x20000108

080154dc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b082      	sub	sp, #8
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	4603      	mov	r3, r0
 80154e4:	6039      	str	r1, [r7, #0]
 80154e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80154e8:	79fb      	ldrb	r3, [r7, #7]
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d105      	bne.n	80154fa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80154ee:	683a      	ldr	r2, [r7, #0]
 80154f0:	4907      	ldr	r1, [pc, #28]	@ (8015510 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80154f2:	4808      	ldr	r0, [pc, #32]	@ (8015514 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80154f4:	f7fa fe1a 	bl	801012c <USBD_GetString>
 80154f8:	e004      	b.n	8015504 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80154fa:	683a      	ldr	r2, [r7, #0]
 80154fc:	4904      	ldr	r1, [pc, #16]	@ (8015510 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80154fe:	4805      	ldr	r0, [pc, #20]	@ (8015514 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8015500:	f7fa fe14 	bl	801012c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015504:	4b02      	ldr	r3, [pc, #8]	@ (8015510 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8015506:	4618      	mov	r0, r3
 8015508:	3708      	adds	r7, #8
 801550a:	46bd      	mov	sp, r7
 801550c:	bd80      	pop	{r7, pc}
 801550e:	bf00      	nop
 8015510:	20002d60 	.word	0x20002d60
 8015514:	08019fbc 	.word	0x08019fbc

08015518 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b082      	sub	sp, #8
 801551c:	af00      	add	r7, sp, #0
 801551e:	4603      	mov	r3, r0
 8015520:	6039      	str	r1, [r7, #0]
 8015522:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015524:	79fb      	ldrb	r3, [r7, #7]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d105      	bne.n	8015536 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801552a:	683a      	ldr	r2, [r7, #0]
 801552c:	4907      	ldr	r1, [pc, #28]	@ (801554c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801552e:	4808      	ldr	r0, [pc, #32]	@ (8015550 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015530:	f7fa fdfc 	bl	801012c <USBD_GetString>
 8015534:	e004      	b.n	8015540 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015536:	683a      	ldr	r2, [r7, #0]
 8015538:	4904      	ldr	r1, [pc, #16]	@ (801554c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801553a:	4805      	ldr	r0, [pc, #20]	@ (8015550 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801553c:	f7fa fdf6 	bl	801012c <USBD_GetString>
  }
  return USBD_StrDesc;
 8015540:	4b02      	ldr	r3, [pc, #8]	@ (801554c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8015542:	4618      	mov	r0, r3
 8015544:	3708      	adds	r7, #8
 8015546:	46bd      	mov	sp, r7
 8015548:	bd80      	pop	{r7, pc}
 801554a:	bf00      	nop
 801554c:	20002d60 	.word	0x20002d60
 8015550:	08019fc8 	.word	0x08019fc8

08015554 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015554:	b580      	push	{r7, lr}
 8015556:	b084      	sub	sp, #16
 8015558:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801555a:	4b0f      	ldr	r3, [pc, #60]	@ (8015598 <Get_SerialNum+0x44>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015560:	4b0e      	ldr	r3, [pc, #56]	@ (801559c <Get_SerialNum+0x48>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015566:	4b0e      	ldr	r3, [pc, #56]	@ (80155a0 <Get_SerialNum+0x4c>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801556c:	68fa      	ldr	r2, [r7, #12]
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	4413      	add	r3, r2
 8015572:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d009      	beq.n	801558e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801557a:	2208      	movs	r2, #8
 801557c:	4909      	ldr	r1, [pc, #36]	@ (80155a4 <Get_SerialNum+0x50>)
 801557e:	68f8      	ldr	r0, [r7, #12]
 8015580:	f000 f814 	bl	80155ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015584:	2204      	movs	r2, #4
 8015586:	4908      	ldr	r1, [pc, #32]	@ (80155a8 <Get_SerialNum+0x54>)
 8015588:	68b8      	ldr	r0, [r7, #8]
 801558a:	f000 f80f 	bl	80155ac <IntToUnicode>
  }
}
 801558e:	bf00      	nop
 8015590:	3710      	adds	r7, #16
 8015592:	46bd      	mov	sp, r7
 8015594:	bd80      	pop	{r7, pc}
 8015596:	bf00      	nop
 8015598:	1fff7590 	.word	0x1fff7590
 801559c:	1fff7594 	.word	0x1fff7594
 80155a0:	1fff7598 	.word	0x1fff7598
 80155a4:	2000010a 	.word	0x2000010a
 80155a8:	2000011a 	.word	0x2000011a

080155ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80155ac:	b480      	push	{r7}
 80155ae:	b087      	sub	sp, #28
 80155b0:	af00      	add	r7, sp, #0
 80155b2:	60f8      	str	r0, [r7, #12]
 80155b4:	60b9      	str	r1, [r7, #8]
 80155b6:	4613      	mov	r3, r2
 80155b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80155ba:	2300      	movs	r3, #0
 80155bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80155be:	2300      	movs	r3, #0
 80155c0:	75fb      	strb	r3, [r7, #23]
 80155c2:	e027      	b.n	8015614 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	0f1b      	lsrs	r3, r3, #28
 80155c8:	2b09      	cmp	r3, #9
 80155ca:	d80b      	bhi.n	80155e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	0f1b      	lsrs	r3, r3, #28
 80155d0:	b2da      	uxtb	r2, r3
 80155d2:	7dfb      	ldrb	r3, [r7, #23]
 80155d4:	005b      	lsls	r3, r3, #1
 80155d6:	4619      	mov	r1, r3
 80155d8:	68bb      	ldr	r3, [r7, #8]
 80155da:	440b      	add	r3, r1
 80155dc:	3230      	adds	r2, #48	@ 0x30
 80155de:	b2d2      	uxtb	r2, r2
 80155e0:	701a      	strb	r2, [r3, #0]
 80155e2:	e00a      	b.n	80155fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	0f1b      	lsrs	r3, r3, #28
 80155e8:	b2da      	uxtb	r2, r3
 80155ea:	7dfb      	ldrb	r3, [r7, #23]
 80155ec:	005b      	lsls	r3, r3, #1
 80155ee:	4619      	mov	r1, r3
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	440b      	add	r3, r1
 80155f4:	3237      	adds	r2, #55	@ 0x37
 80155f6:	b2d2      	uxtb	r2, r2
 80155f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	011b      	lsls	r3, r3, #4
 80155fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015600:	7dfb      	ldrb	r3, [r7, #23]
 8015602:	005b      	lsls	r3, r3, #1
 8015604:	3301      	adds	r3, #1
 8015606:	68ba      	ldr	r2, [r7, #8]
 8015608:	4413      	add	r3, r2
 801560a:	2200      	movs	r2, #0
 801560c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801560e:	7dfb      	ldrb	r3, [r7, #23]
 8015610:	3301      	adds	r3, #1
 8015612:	75fb      	strb	r3, [r7, #23]
 8015614:	7dfa      	ldrb	r2, [r7, #23]
 8015616:	79fb      	ldrb	r3, [r7, #7]
 8015618:	429a      	cmp	r2, r3
 801561a:	d3d3      	bcc.n	80155c4 <IntToUnicode+0x18>
  }
}
 801561c:	bf00      	nop
 801561e:	bf00      	nop
 8015620:	371c      	adds	r7, #28
 8015622:	46bd      	mov	sp, r7
 8015624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015628:	4770      	bx	lr

0801562a <LL_AHB2_GRP1_EnableClock>:
{
 801562a:	b480      	push	{r7}
 801562c:	b085      	sub	sp, #20
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8015632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	4313      	orrs	r3, r2
 8015640:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8015642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	4013      	ands	r3, r2
 801564c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801564e:	68fb      	ldr	r3, [r7, #12]
}
 8015650:	bf00      	nop
 8015652:	3714      	adds	r7, #20
 8015654:	46bd      	mov	sp, r7
 8015656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565a:	4770      	bx	lr

0801565c <LL_APB1_GRP1_EnableClock>:
{
 801565c:	b480      	push	{r7}
 801565e:	b085      	sub	sp, #20
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8015664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015668:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801566a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	4313      	orrs	r3, r2
 8015672:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8015674:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8015678:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	4013      	ands	r3, r2
 801567e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8015680:	68fb      	ldr	r3, [r7, #12]
}
 8015682:	bf00      	nop
 8015684:	3714      	adds	r7, #20
 8015686:	46bd      	mov	sp, r7
 8015688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568c:	4770      	bx	lr
	...

08015690 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b09c      	sub	sp, #112	@ 0x70
 8015694:	af00      	add	r7, sp, #0
 8015696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015698:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801569c:	2200      	movs	r2, #0
 801569e:	601a      	str	r2, [r3, #0]
 80156a0:	605a      	str	r2, [r3, #4]
 80156a2:	609a      	str	r2, [r3, #8]
 80156a4:	60da      	str	r2, [r3, #12]
 80156a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80156a8:	f107 030c 	add.w	r3, r7, #12
 80156ac:	2250      	movs	r2, #80	@ 0x50
 80156ae:	2100      	movs	r1, #0
 80156b0:	4618      	mov	r0, r3
 80156b2:	f000 ffdb 	bl	801666c <memset>
  if(pcdHandle->Instance==USB)
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	4a23      	ldr	r2, [pc, #140]	@ (8015748 <HAL_PCD_MspInit+0xb8>)
 80156bc:	4293      	cmp	r3, r2
 80156be:	d13e      	bne.n	801573e <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80156c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80156c4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80156c6:	2306      	movs	r3, #6
 80156c8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80156ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80156ce:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80156d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80156d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80156d6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80156da:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 80156dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80156e0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80156e2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80156e6:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80156e8:	f107 030c 	add.w	r3, r7, #12
 80156ec:	4618      	mov	r0, r3
 80156ee:	f7f3 fedd 	bl	80094ac <HAL_RCCEx_PeriphCLKConfig>
 80156f2:	4603      	mov	r3, r0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d001      	beq.n	80156fc <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 80156f8:	f7ee ff5c 	bl	80045b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80156fc:	2001      	movs	r0, #1
 80156fe:	f7ff ff94 	bl	801562a <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8015702:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8015706:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015708:	2302      	movs	r3, #2
 801570a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801570c:	2300      	movs	r3, #0
 801570e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015710:	2300      	movs	r3, #0
 8015712:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8015714:	230a      	movs	r3, #10
 8015716:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015718:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 801571c:	4619      	mov	r1, r3
 801571e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8015722:	f7ef ff97 	bl	8005654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015726:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 801572a:	f7ff ff97 	bl	801565c <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 801572e:	2200      	movs	r2, #0
 8015730:	2105      	movs	r1, #5
 8015732:	2014      	movs	r0, #20
 8015734:	f7ef fd09 	bl	800514a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015738:	2014      	movs	r0, #20
 801573a:	f7ef fd20 	bl	800517e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801573e:	bf00      	nop
 8015740:	3770      	adds	r7, #112	@ 0x70
 8015742:	46bd      	mov	sp, r7
 8015744:	bd80      	pop	{r7, pc}
 8015746:	bf00      	nop
 8015748:	40006800 	.word	0x40006800

0801574c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8015760:	4619      	mov	r1, r3
 8015762:	4610      	mov	r0, r2
 8015764:	f7f9 fbe7 	bl	800ef36 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015768:	bf00      	nop
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}

08015770 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b082      	sub	sp, #8
 8015774:	af00      	add	r7, sp, #0
 8015776:	6078      	str	r0, [r7, #4]
 8015778:	460b      	mov	r3, r1
 801577a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8015782:	78fa      	ldrb	r2, [r7, #3]
 8015784:	6879      	ldr	r1, [r7, #4]
 8015786:	4613      	mov	r3, r2
 8015788:	009b      	lsls	r3, r3, #2
 801578a:	4413      	add	r3, r2
 801578c:	00db      	lsls	r3, r3, #3
 801578e:	440b      	add	r3, r1
 8015790:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8015794:	681a      	ldr	r2, [r3, #0]
 8015796:	78fb      	ldrb	r3, [r7, #3]
 8015798:	4619      	mov	r1, r3
 801579a:	f7f9 fc21 	bl	800efe0 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801579e:	bf00      	nop
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b082      	sub	sp, #8
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
 80157ae:	460b      	mov	r3, r1
 80157b0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 80157b8:	78fa      	ldrb	r2, [r7, #3]
 80157ba:	6879      	ldr	r1, [r7, #4]
 80157bc:	4613      	mov	r3, r2
 80157be:	009b      	lsls	r3, r3, #2
 80157c0:	4413      	add	r3, r2
 80157c2:	00db      	lsls	r3, r3, #3
 80157c4:	440b      	add	r3, r1
 80157c6:	3324      	adds	r3, #36	@ 0x24
 80157c8:	681a      	ldr	r2, [r3, #0]
 80157ca:	78fb      	ldrb	r3, [r7, #3]
 80157cc:	4619      	mov	r1, r3
 80157ce:	f7f9 fcba 	bl	800f146 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80157d2:	bf00      	nop
 80157d4:	3708      	adds	r7, #8
 80157d6:	46bd      	mov	sp, r7
 80157d8:	bd80      	pop	{r7, pc}

080157da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157da:	b580      	push	{r7, lr}
 80157dc:	b082      	sub	sp, #8
 80157de:	af00      	add	r7, sp, #0
 80157e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80157e8:	4618      	mov	r0, r3
 80157ea:	f7f9 fdf4 	bl	800f3d6 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80157ee:	bf00      	nop
 80157f0:	3708      	adds	r7, #8
 80157f2:	46bd      	mov	sp, r7
 80157f4:	bd80      	pop	{r7, pc}

080157f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80157f6:	b580      	push	{r7, lr}
 80157f8:	b084      	sub	sp, #16
 80157fa:	af00      	add	r7, sp, #0
 80157fc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80157fe:	2301      	movs	r3, #1
 8015800:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	795b      	ldrb	r3, [r3, #5]
 8015806:	2b02      	cmp	r3, #2
 8015808:	d001      	beq.n	801580e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801580a:	f7ee fed3 	bl	80045b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015814:	7bfa      	ldrb	r2, [r7, #15]
 8015816:	4611      	mov	r1, r2
 8015818:	4618      	mov	r0, r3
 801581a:	f7f9 fd98 	bl	800f34e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015824:	4618      	mov	r0, r3
 8015826:	f7f9 fd40 	bl	800f2aa <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 801582a:	bf00      	nop
 801582c:	3710      	adds	r7, #16
 801582e:	46bd      	mov	sp, r7
 8015830:	bd80      	pop	{r7, pc}
	...

08015834 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b082      	sub	sp, #8
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015842:	4618      	mov	r0, r3
 8015844:	f7f9 fd93 	bl	800f36e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	7a5b      	ldrb	r3, [r3, #9]
 801584c:	2b00      	cmp	r3, #0
 801584e:	d005      	beq.n	801585c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015850:	4b04      	ldr	r3, [pc, #16]	@ (8015864 <HAL_PCD_SuspendCallback+0x30>)
 8015852:	691b      	ldr	r3, [r3, #16]
 8015854:	4a03      	ldr	r2, [pc, #12]	@ (8015864 <HAL_PCD_SuspendCallback+0x30>)
 8015856:	f043 0306 	orr.w	r3, r3, #6
 801585a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 801585c:	bf00      	nop
 801585e:	3708      	adds	r7, #8
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	e000ed00 	.word	0xe000ed00

08015868 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	7a5b      	ldrb	r3, [r3, #9]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d007      	beq.n	8015888 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015878:	4b08      	ldr	r3, [pc, #32]	@ (801589c <HAL_PCD_ResumeCallback+0x34>)
 801587a:	691b      	ldr	r3, [r3, #16]
 801587c:	4a07      	ldr	r2, [pc, #28]	@ (801589c <HAL_PCD_ResumeCallback+0x34>)
 801587e:	f023 0306 	bic.w	r3, r3, #6
 8015882:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015884:	f000 f9fa 	bl	8015c7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801588e:	4618      	mov	r0, r3
 8015890:	f7f9 fd89 	bl	800f3a6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015894:	bf00      	nop
 8015896:	3708      	adds	r7, #8
 8015898:	46bd      	mov	sp, r7
 801589a:	bd80      	pop	{r7, pc}
 801589c:	e000ed00 	.word	0xe000ed00

080158a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b082      	sub	sp, #8
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80158a8:	4a2c      	ldr	r2, [pc, #176]	@ (801595c <USBD_LL_Init+0xbc>)
 80158aa:	687b      	ldr	r3, [r7, #4]
 80158ac:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	4a2a      	ldr	r2, [pc, #168]	@ (801595c <USBD_LL_Init+0xbc>)
 80158b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80158b8:	f7f2 fae0 	bl	8007e7c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80158bc:	4b27      	ldr	r3, [pc, #156]	@ (801595c <USBD_LL_Init+0xbc>)
 80158be:	4a28      	ldr	r2, [pc, #160]	@ (8015960 <USBD_LL_Init+0xc0>)
 80158c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80158c2:	4b26      	ldr	r3, [pc, #152]	@ (801595c <USBD_LL_Init+0xbc>)
 80158c4:	2208      	movs	r2, #8
 80158c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80158c8:	4b24      	ldr	r3, [pc, #144]	@ (801595c <USBD_LL_Init+0xbc>)
 80158ca:	2202      	movs	r2, #2
 80158cc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80158ce:	4b23      	ldr	r3, [pc, #140]	@ (801595c <USBD_LL_Init+0xbc>)
 80158d0:	2202      	movs	r2, #2
 80158d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80158d4:	4b21      	ldr	r3, [pc, #132]	@ (801595c <USBD_LL_Init+0xbc>)
 80158d6:	2200      	movs	r2, #0
 80158d8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80158da:	4b20      	ldr	r3, [pc, #128]	@ (801595c <USBD_LL_Init+0xbc>)
 80158dc:	2200      	movs	r2, #0
 80158de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80158e0:	4b1e      	ldr	r3, [pc, #120]	@ (801595c <USBD_LL_Init+0xbc>)
 80158e2:	2200      	movs	r2, #0
 80158e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80158e6:	4b1d      	ldr	r3, [pc, #116]	@ (801595c <USBD_LL_Init+0xbc>)
 80158e8:	2200      	movs	r2, #0
 80158ea:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80158ec:	481b      	ldr	r0, [pc, #108]	@ (801595c <USBD_LL_Init+0xbc>)
 80158ee:	f7f0 fd73 	bl	80063d8 <HAL_PCD_Init>
 80158f2:	4603      	mov	r3, r0
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d001      	beq.n	80158fc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80158f8:	f7ee fe5c 	bl	80045b4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015902:	2318      	movs	r3, #24
 8015904:	2200      	movs	r2, #0
 8015906:	2100      	movs	r1, #0
 8015908:	f7f2 fa2c 	bl	8007d64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015912:	2358      	movs	r3, #88	@ 0x58
 8015914:	2200      	movs	r2, #0
 8015916:	2180      	movs	r1, #128	@ 0x80
 8015918:	f7f2 fa24 	bl	8007d64 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015922:	23c0      	movs	r3, #192	@ 0xc0
 8015924:	2200      	movs	r2, #0
 8015926:	2181      	movs	r1, #129	@ 0x81
 8015928:	f7f2 fa1c 	bl	8007d64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015932:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8015936:	2200      	movs	r2, #0
 8015938:	2101      	movs	r1, #1
 801593a:	f7f2 fa13 	bl	8007d64 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015944:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015948:	2200      	movs	r2, #0
 801594a:	2182      	movs	r1, #130	@ 0x82
 801594c:	f7f2 fa0a 	bl	8007d64 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015950:	2300      	movs	r3, #0
}
 8015952:	4618      	mov	r0, r3
 8015954:	3708      	adds	r7, #8
 8015956:	46bd      	mov	sp, r7
 8015958:	bd80      	pop	{r7, pc}
 801595a:	bf00      	nop
 801595c:	20002f60 	.word	0x20002f60
 8015960:	40006800 	.word	0x40006800

08015964 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015964:	b580      	push	{r7, lr}
 8015966:	b084      	sub	sp, #16
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801596c:	2300      	movs	r3, #0
 801596e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015970:	2300      	movs	r3, #0
 8015972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801597a:	4618      	mov	r0, r3
 801597c:	f7f0 fdfa 	bl	8006574 <HAL_PCD_Start>
 8015980:	4603      	mov	r3, r0
 8015982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015984:	7bfb      	ldrb	r3, [r7, #15]
 8015986:	4618      	mov	r0, r3
 8015988:	f000 f97e 	bl	8015c88 <USBD_Get_USB_Status>
 801598c:	4603      	mov	r3, r0
 801598e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015990:	7bbb      	ldrb	r3, [r7, #14]
}
 8015992:	4618      	mov	r0, r3
 8015994:	3710      	adds	r7, #16
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}

0801599a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801599a:	b580      	push	{r7, lr}
 801599c:	b084      	sub	sp, #16
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
 80159a2:	4608      	mov	r0, r1
 80159a4:	4611      	mov	r1, r2
 80159a6:	461a      	mov	r2, r3
 80159a8:	4603      	mov	r3, r0
 80159aa:	70fb      	strb	r3, [r7, #3]
 80159ac:	460b      	mov	r3, r1
 80159ae:	70bb      	strb	r3, [r7, #2]
 80159b0:	4613      	mov	r3, r2
 80159b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159b4:	2300      	movs	r3, #0
 80159b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159b8:	2300      	movs	r3, #0
 80159ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80159c2:	78bb      	ldrb	r3, [r7, #2]
 80159c4:	883a      	ldrh	r2, [r7, #0]
 80159c6:	78f9      	ldrb	r1, [r7, #3]
 80159c8:	f7f0 ff41 	bl	800684e <HAL_PCD_EP_Open>
 80159cc:	4603      	mov	r3, r0
 80159ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80159d0:	7bfb      	ldrb	r3, [r7, #15]
 80159d2:	4618      	mov	r0, r3
 80159d4:	f000 f958 	bl	8015c88 <USBD_Get_USB_Status>
 80159d8:	4603      	mov	r3, r0
 80159da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80159dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80159de:	4618      	mov	r0, r3
 80159e0:	3710      	adds	r7, #16
 80159e2:	46bd      	mov	sp, r7
 80159e4:	bd80      	pop	{r7, pc}

080159e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159e6:	b580      	push	{r7, lr}
 80159e8:	b084      	sub	sp, #16
 80159ea:	af00      	add	r7, sp, #0
 80159ec:	6078      	str	r0, [r7, #4]
 80159ee:	460b      	mov	r3, r1
 80159f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80159f2:	2300      	movs	r3, #0
 80159f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80159f6:	2300      	movs	r3, #0
 80159f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a00:	78fa      	ldrb	r2, [r7, #3]
 8015a02:	4611      	mov	r1, r2
 8015a04:	4618      	mov	r0, r3
 8015a06:	f7f0 ff7f 	bl	8006908 <HAL_PCD_EP_Close>
 8015a0a:	4603      	mov	r3, r0
 8015a0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a0e:	7bfb      	ldrb	r3, [r7, #15]
 8015a10:	4618      	mov	r0, r3
 8015a12:	f000 f939 	bl	8015c88 <USBD_Get_USB_Status>
 8015a16:	4603      	mov	r3, r0
 8015a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a1c:	4618      	mov	r0, r3
 8015a1e:	3710      	adds	r7, #16
 8015a20:	46bd      	mov	sp, r7
 8015a22:	bd80      	pop	{r7, pc}

08015a24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b084      	sub	sp, #16
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
 8015a2c:	460b      	mov	r3, r1
 8015a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a30:	2300      	movs	r3, #0
 8015a32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a34:	2300      	movs	r3, #0
 8015a36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a3e:	78fa      	ldrb	r2, [r7, #3]
 8015a40:	4611      	mov	r1, r2
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7f1 f828 	bl	8006a98 <HAL_PCD_EP_SetStall>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a4c:	7bfb      	ldrb	r3, [r7, #15]
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f000 f91a 	bl	8015c88 <USBD_Get_USB_Status>
 8015a54:	4603      	mov	r3, r0
 8015a56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a58:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	3710      	adds	r7, #16
 8015a5e:	46bd      	mov	sp, r7
 8015a60:	bd80      	pop	{r7, pc}

08015a62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015a62:	b580      	push	{r7, lr}
 8015a64:	b084      	sub	sp, #16
 8015a66:	af00      	add	r7, sp, #0
 8015a68:	6078      	str	r0, [r7, #4]
 8015a6a:	460b      	mov	r3, r1
 8015a6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a72:	2300      	movs	r3, #0
 8015a74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015a7c:	78fa      	ldrb	r2, [r7, #3]
 8015a7e:	4611      	mov	r1, r2
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7f1 f85b 	bl	8006b3c <HAL_PCD_EP_ClrStall>
 8015a86:	4603      	mov	r3, r0
 8015a88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a8a:	7bfb      	ldrb	r3, [r7, #15]
 8015a8c:	4618      	mov	r0, r3
 8015a8e:	f000 f8fb 	bl	8015c88 <USBD_Get_USB_Status>
 8015a92:	4603      	mov	r3, r0
 8015a94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015a96:	7bbb      	ldrb	r3, [r7, #14]
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	3710      	adds	r7, #16
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b085      	sub	sp, #20
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015ab2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	da0b      	bge.n	8015ad4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015abc:	78fb      	ldrb	r3, [r7, #3]
 8015abe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015ac2:	68f9      	ldr	r1, [r7, #12]
 8015ac4:	4613      	mov	r3, r2
 8015ac6:	009b      	lsls	r3, r3, #2
 8015ac8:	4413      	add	r3, r2
 8015aca:	00db      	lsls	r3, r3, #3
 8015acc:	440b      	add	r3, r1
 8015ace:	3312      	adds	r3, #18
 8015ad0:	781b      	ldrb	r3, [r3, #0]
 8015ad2:	e00b      	b.n	8015aec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015ad4:	78fb      	ldrb	r3, [r7, #3]
 8015ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8015ada:	68f9      	ldr	r1, [r7, #12]
 8015adc:	4613      	mov	r3, r2
 8015ade:	009b      	lsls	r3, r3, #2
 8015ae0:	4413      	add	r3, r2
 8015ae2:	00db      	lsls	r3, r3, #3
 8015ae4:	440b      	add	r3, r1
 8015ae6:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8015aea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015aec:	4618      	mov	r0, r3
 8015aee:	3714      	adds	r7, #20
 8015af0:	46bd      	mov	sp, r7
 8015af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015af6:	4770      	bx	lr

08015af8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015af8:	b580      	push	{r7, lr}
 8015afa:	b084      	sub	sp, #16
 8015afc:	af00      	add	r7, sp, #0
 8015afe:	6078      	str	r0, [r7, #4]
 8015b00:	460b      	mov	r3, r1
 8015b02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b04:	2300      	movs	r3, #0
 8015b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b08:	2300      	movs	r3, #0
 8015b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015b12:	78fa      	ldrb	r2, [r7, #3]
 8015b14:	4611      	mov	r1, r2
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7f0 fe75 	bl	8006806 <HAL_PCD_SetAddress>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b20:	7bfb      	ldrb	r3, [r7, #15]
 8015b22:	4618      	mov	r0, r3
 8015b24:	f000 f8b0 	bl	8015c88 <USBD_Get_USB_Status>
 8015b28:	4603      	mov	r3, r0
 8015b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}

08015b36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b086      	sub	sp, #24
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	60f8      	str	r0, [r7, #12]
 8015b3e:	607a      	str	r2, [r7, #4]
 8015b40:	603b      	str	r3, [r7, #0]
 8015b42:	460b      	mov	r3, r1
 8015b44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b46:	2300      	movs	r3, #0
 8015b48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015b54:	7af9      	ldrb	r1, [r7, #11]
 8015b56:	683b      	ldr	r3, [r7, #0]
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	f7f0 ff66 	bl	8006a2a <HAL_PCD_EP_Transmit>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b62:	7dfb      	ldrb	r3, [r7, #23]
 8015b64:	4618      	mov	r0, r3
 8015b66:	f000 f88f 	bl	8015c88 <USBD_Get_USB_Status>
 8015b6a:	4603      	mov	r3, r0
 8015b6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015b6e:	7dbb      	ldrb	r3, [r7, #22]
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3718      	adds	r7, #24
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b086      	sub	sp, #24
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	60f8      	str	r0, [r7, #12]
 8015b80:	607a      	str	r2, [r7, #4]
 8015b82:	603b      	str	r3, [r7, #0]
 8015b84:	460b      	mov	r3, r1
 8015b86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8015b96:	7af9      	ldrb	r1, [r7, #11]
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	f7f0 fefc 	bl	8006998 <HAL_PCD_EP_Receive>
 8015ba0:	4603      	mov	r3, r0
 8015ba2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ba4:	7dfb      	ldrb	r3, [r7, #23]
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f000 f86e 	bl	8015c88 <USBD_Get_USB_Status>
 8015bac:	4603      	mov	r3, r0
 8015bae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015bb0:	7dbb      	ldrb	r3, [r7, #22]
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	3718      	adds	r7, #24
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	bd80      	pop	{r7, pc}

08015bba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015bba:	b580      	push	{r7, lr}
 8015bbc:	b082      	sub	sp, #8
 8015bbe:	af00      	add	r7, sp, #0
 8015bc0:	6078      	str	r0, [r7, #4]
 8015bc2:	460b      	mov	r3, r1
 8015bc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8015bcc:	78fa      	ldrb	r2, [r7, #3]
 8015bce:	4611      	mov	r1, r2
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7f0 ff12 	bl	80069fa <HAL_PCD_EP_GetRxCount>
 8015bd6:	4603      	mov	r3, r0
}
 8015bd8:	4618      	mov	r0, r3
 8015bda:	3708      	adds	r7, #8
 8015bdc:	46bd      	mov	sp, r7
 8015bde:	bd80      	pop	{r7, pc}

08015be0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b082      	sub	sp, #8
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	460b      	mov	r3, r1
 8015bea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015bec:	78fb      	ldrb	r3, [r7, #3]
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d002      	beq.n	8015bf8 <HAL_PCDEx_LPM_Callback+0x18>
 8015bf2:	2b01      	cmp	r3, #1
 8015bf4:	d013      	beq.n	8015c1e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015bf6:	e023      	b.n	8015c40 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	7a5b      	ldrb	r3, [r3, #9]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d007      	beq.n	8015c10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015c00:	f000 f83c 	bl	8015c7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c04:	4b10      	ldr	r3, [pc, #64]	@ (8015c48 <HAL_PCDEx_LPM_Callback+0x68>)
 8015c06:	691b      	ldr	r3, [r3, #16]
 8015c08:	4a0f      	ldr	r2, [pc, #60]	@ (8015c48 <HAL_PCDEx_LPM_Callback+0x68>)
 8015c0a:	f023 0306 	bic.w	r3, r3, #6
 8015c0e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015c16:	4618      	mov	r0, r3
 8015c18:	f7f9 fbc5 	bl	800f3a6 <USBD_LL_Resume>
    break;
 8015c1c:	e010      	b.n	8015c40 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8015c24:	4618      	mov	r0, r3
 8015c26:	f7f9 fba2 	bl	800f36e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	7a5b      	ldrb	r3, [r3, #9]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d005      	beq.n	8015c3e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015c32:	4b05      	ldr	r3, [pc, #20]	@ (8015c48 <HAL_PCDEx_LPM_Callback+0x68>)
 8015c34:	691b      	ldr	r3, [r3, #16]
 8015c36:	4a04      	ldr	r2, [pc, #16]	@ (8015c48 <HAL_PCDEx_LPM_Callback+0x68>)
 8015c38:	f043 0306 	orr.w	r3, r3, #6
 8015c3c:	6113      	str	r3, [r2, #16]
    break;
 8015c3e:	bf00      	nop
}
 8015c40:	bf00      	nop
 8015c42:	3708      	adds	r7, #8
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}
 8015c48:	e000ed00 	.word	0xe000ed00

08015c4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015c4c:	b480      	push	{r7}
 8015c4e:	b083      	sub	sp, #12
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015c54:	4b03      	ldr	r3, [pc, #12]	@ (8015c64 <USBD_static_malloc+0x18>)
}
 8015c56:	4618      	mov	r0, r3
 8015c58:	370c      	adds	r7, #12
 8015c5a:	46bd      	mov	sp, r7
 8015c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c60:	4770      	bx	lr
 8015c62:	bf00      	nop
 8015c64:	2000323c 	.word	0x2000323c

08015c68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015c68:	b480      	push	{r7}
 8015c6a:	b083      	sub	sp, #12
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8015c70:	bf00      	nop
 8015c72:	370c      	adds	r7, #12
 8015c74:	46bd      	mov	sp, r7
 8015c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7a:	4770      	bx	lr

08015c7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015c80:	f7ee f9cc 	bl	800401c <SystemClock_Config>
}
 8015c84:	bf00      	nop
 8015c86:	bd80      	pop	{r7, pc}

08015c88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015c88:	b480      	push	{r7}
 8015c8a:	b085      	sub	sp, #20
 8015c8c:	af00      	add	r7, sp, #0
 8015c8e:	4603      	mov	r3, r0
 8015c90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c92:	2300      	movs	r3, #0
 8015c94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015c96:	79fb      	ldrb	r3, [r7, #7]
 8015c98:	2b03      	cmp	r3, #3
 8015c9a:	d817      	bhi.n	8015ccc <USBD_Get_USB_Status+0x44>
 8015c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8015ca4 <USBD_Get_USB_Status+0x1c>)
 8015c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ca2:	bf00      	nop
 8015ca4:	08015cb5 	.word	0x08015cb5
 8015ca8:	08015cbb 	.word	0x08015cbb
 8015cac:	08015cc1 	.word	0x08015cc1
 8015cb0:	08015cc7 	.word	0x08015cc7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8015cb8:	e00b      	b.n	8015cd2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015cba:	2303      	movs	r3, #3
 8015cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8015cbe:	e008      	b.n	8015cd2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015cc0:	2301      	movs	r3, #1
 8015cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8015cc4:	e005      	b.n	8015cd2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015cc6:	2303      	movs	r3, #3
 8015cc8:	73fb      	strb	r3, [r7, #15]
    break;
 8015cca:	e002      	b.n	8015cd2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ccc:	2303      	movs	r3, #3
 8015cce:	73fb      	strb	r3, [r7, #15]
    break;
 8015cd0:	bf00      	nop
  }
  return usb_status;
 8015cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	3714      	adds	r7, #20
 8015cd8:	46bd      	mov	sp, r7
 8015cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cde:	4770      	bx	lr

08015ce0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8015ce0:	b480      	push	{r7}
 8015ce2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8015ce4:	4b05      	ldr	r3, [pc, #20]	@ (8015cfc <UTIL_LPM_Init+0x1c>)
 8015ce6:	2200      	movs	r2, #0
 8015ce8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8015cea:	4b05      	ldr	r3, [pc, #20]	@ (8015d00 <UTIL_LPM_Init+0x20>)
 8015cec:	2200      	movs	r2, #0
 8015cee:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8015cf0:	bf00      	nop
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cf8:	4770      	bx	lr
 8015cfa:	bf00      	nop
 8015cfc:	2000345c 	.word	0x2000345c
 8015d00:	20003460 	.word	0x20003460

08015d04 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8015d04:	b480      	push	{r7}
 8015d06:	b087      	sub	sp, #28
 8015d08:	af00      	add	r7, sp, #0
 8015d0a:	6078      	str	r0, [r7, #4]
 8015d0c:	460b      	mov	r3, r1
 8015d0e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d10:	f3ef 8310 	mrs	r3, PRIMASK
 8015d14:	613b      	str	r3, [r7, #16]
  return(result);
 8015d16:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8015d18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015d1a:	b672      	cpsid	i
}
 8015d1c:	bf00      	nop
  
  switch(state)
 8015d1e:	78fb      	ldrb	r3, [r7, #3]
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	d008      	beq.n	8015d36 <UTIL_LPM_SetOffMode+0x32>
 8015d24:	2b01      	cmp	r3, #1
 8015d26:	d10e      	bne.n	8015d46 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8015d28:	4b0d      	ldr	r3, [pc, #52]	@ (8015d60 <UTIL_LPM_SetOffMode+0x5c>)
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	4313      	orrs	r3, r2
 8015d30:	4a0b      	ldr	r2, [pc, #44]	@ (8015d60 <UTIL_LPM_SetOffMode+0x5c>)
 8015d32:	6013      	str	r3, [r2, #0]
      break;
 8015d34:	e008      	b.n	8015d48 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	43da      	mvns	r2, r3
 8015d3a:	4b09      	ldr	r3, [pc, #36]	@ (8015d60 <UTIL_LPM_SetOffMode+0x5c>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	4013      	ands	r3, r2
 8015d40:	4a07      	ldr	r2, [pc, #28]	@ (8015d60 <UTIL_LPM_SetOffMode+0x5c>)
 8015d42:	6013      	str	r3, [r2, #0]
      break;
 8015d44:	e000      	b.n	8015d48 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8015d46:	bf00      	nop
 8015d48:	697b      	ldr	r3, [r7, #20]
 8015d4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015d4c:	68fb      	ldr	r3, [r7, #12]
 8015d4e:	f383 8810 	msr	PRIMASK, r3
}
 8015d52:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8015d54:	bf00      	nop
 8015d56:	371c      	adds	r7, #28
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d5e:	4770      	bx	lr
 8015d60:	20003460 	.word	0x20003460

08015d64 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b090      	sub	sp, #64	@ 0x40
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8015d6c:	4b73      	ldr	r3, [pc, #460]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8015d72:	4b72      	ldr	r3, [pc, #456]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015d74:	681a      	ldr	r2, [r3, #0]
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	4013      	ands	r3, r2
 8015d7a:	4a70      	ldr	r2, [pc, #448]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015d7c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8015d7e:	4b70      	ldr	r3, [pc, #448]	@ (8015f40 <UTIL_SEQ_Run+0x1dc>)
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015d84:	4b6f      	ldr	r3, [pc, #444]	@ (8015f44 <UTIL_SEQ_Run+0x1e0>)
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015d8a:	4b6f      	ldr	r3, [pc, #444]	@ (8015f48 <UTIL_SEQ_Run+0x1e4>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8015d90:	4b6e      	ldr	r3, [pc, #440]	@ (8015f4c <UTIL_SEQ_Run+0x1e8>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015d96:	e08d      	b.n	8015eb4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8015d98:	2300      	movs	r3, #0
 8015d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015d9c:	e002      	b.n	8015da4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8015d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015da0:	3301      	adds	r3, #1
 8015da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8015da4:	4a6a      	ldr	r2, [pc, #424]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015da6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015da8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dae:	401a      	ands	r2, r3
 8015db0:	4b62      	ldr	r3, [pc, #392]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	4013      	ands	r3, r2
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d0f1      	beq.n	8015d9e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8015dba:	4a65      	ldr	r2, [pc, #404]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015dbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015dbe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015dc4:	401a      	ands	r2, r3
 8015dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015dc8:	681b      	ldr	r3, [r3, #0]
 8015dca:	4013      	ands	r3, r2
 8015dcc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8015dce:	4a60      	ldr	r2, [pc, #384]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015dd2:	00db      	lsls	r3, r3, #3
 8015dd4:	4413      	add	r3, r2
 8015dd6:	685a      	ldr	r2, [r3, #4]
 8015dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dda:	4013      	ands	r3, r2
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d106      	bne.n	8015dee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8015de0:	4a5b      	ldr	r2, [pc, #364]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015de4:	00db      	lsls	r3, r3, #3
 8015de6:	4413      	add	r3, r2
 8015de8:	f04f 32ff 	mov.w	r2, #4294967295
 8015dec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8015dee:	4a58      	ldr	r2, [pc, #352]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015df2:	00db      	lsls	r3, r3, #3
 8015df4:	4413      	add	r3, r2
 8015df6:	685a      	ldr	r2, [r3, #4]
 8015df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dfa:	4013      	ands	r3, r2
 8015dfc:	4618      	mov	r0, r3
 8015dfe:	f000 f9b3 	bl	8016168 <SEQ_BitPosition>
 8015e02:	4603      	mov	r3, r0
 8015e04:	461a      	mov	r2, r3
 8015e06:	4b53      	ldr	r3, [pc, #332]	@ (8015f54 <UTIL_SEQ_Run+0x1f0>)
 8015e08:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8015e0a:	4a51      	ldr	r2, [pc, #324]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e0e:	00db      	lsls	r3, r3, #3
 8015e10:	4413      	add	r3, r2
 8015e12:	685a      	ldr	r2, [r3, #4]
 8015e14:	4b4f      	ldr	r3, [pc, #316]	@ (8015f54 <UTIL_SEQ_Run+0x1f0>)
 8015e16:	681b      	ldr	r3, [r3, #0]
 8015e18:	2101      	movs	r1, #1
 8015e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8015e1e:	43db      	mvns	r3, r3
 8015e20:	401a      	ands	r2, r3
 8015e22:	494b      	ldr	r1, [pc, #300]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e26:	00db      	lsls	r3, r3, #3
 8015e28:	440b      	add	r3, r1
 8015e2a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e2c:	f3ef 8310 	mrs	r3, PRIMASK
 8015e30:	61bb      	str	r3, [r7, #24]
  return(result);
 8015e32:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015e34:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e36:	b672      	cpsid	i
}
 8015e38:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8015e3a:	4b46      	ldr	r3, [pc, #280]	@ (8015f54 <UTIL_SEQ_Run+0x1f0>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	2201      	movs	r2, #1
 8015e40:	fa02 f303 	lsl.w	r3, r2, r3
 8015e44:	43da      	mvns	r2, r3
 8015e46:	4b3e      	ldr	r3, [pc, #248]	@ (8015f40 <UTIL_SEQ_Run+0x1dc>)
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	4013      	ands	r3, r2
 8015e4c:	4a3c      	ldr	r2, [pc, #240]	@ (8015f40 <UTIL_SEQ_Run+0x1dc>)
 8015e4e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015e50:	2302      	movs	r3, #2
 8015e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015e54:	e013      	b.n	8015e7e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8015e56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e58:	3b01      	subs	r3, #1
 8015e5a:	4a3d      	ldr	r2, [pc, #244]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015e5c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8015e60:	4b3c      	ldr	r3, [pc, #240]	@ (8015f54 <UTIL_SEQ_Run+0x1f0>)
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2201      	movs	r2, #1
 8015e66:	fa02 f303 	lsl.w	r3, r2, r3
 8015e6a:	43da      	mvns	r2, r3
 8015e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e6e:	3b01      	subs	r3, #1
 8015e70:	400a      	ands	r2, r1
 8015e72:	4937      	ldr	r1, [pc, #220]	@ (8015f50 <UTIL_SEQ_Run+0x1ec>)
 8015e74:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8015e78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e7a:	3b01      	subs	r3, #1
 8015e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015e7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d1e8      	bne.n	8015e56 <UTIL_SEQ_Run+0xf2>
 8015e84:	6a3b      	ldr	r3, [r7, #32]
 8015e86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e88:	697b      	ldr	r3, [r7, #20]
 8015e8a:	f383 8810 	msr	PRIMASK, r3
}
 8015e8e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8015e90:	4b30      	ldr	r3, [pc, #192]	@ (8015f54 <UTIL_SEQ_Run+0x1f0>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	4a30      	ldr	r2, [pc, #192]	@ (8015f58 <UTIL_SEQ_Run+0x1f4>)
 8015e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e9a:	4798      	blx	r3

    local_taskset = TaskSet;
 8015e9c:	4b28      	ldr	r3, [pc, #160]	@ (8015f40 <UTIL_SEQ_Run+0x1dc>)
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8015ea2:	4b28      	ldr	r3, [pc, #160]	@ (8015f44 <UTIL_SEQ_Run+0x1e0>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8015ea8:	4b27      	ldr	r3, [pc, #156]	@ (8015f48 <UTIL_SEQ_Run+0x1e4>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8015eae:	4b27      	ldr	r3, [pc, #156]	@ (8015f4c <UTIL_SEQ_Run+0x1e8>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8015eb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015eb8:	401a      	ands	r2, r3
 8015eba:	4b20      	ldr	r3, [pc, #128]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	4013      	ands	r3, r2
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d005      	beq.n	8015ed0 <UTIL_SEQ_Run+0x16c>
 8015ec4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ec8:	4013      	ands	r3, r2
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	f43f af64 	beq.w	8015d98 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8015ed0:	4b20      	ldr	r3, [pc, #128]	@ (8015f54 <UTIL_SEQ_Run+0x1f0>)
 8015ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8015ed6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8015ed8:	f000 f938 	bl	801614c <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015edc:	f3ef 8310 	mrs	r3, PRIMASK
 8015ee0:	613b      	str	r3, [r7, #16]
  return(result);
 8015ee2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8015ee4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015ee6:	b672      	cpsid	i
}
 8015ee8:	bf00      	nop
  local_taskset = TaskSet;
 8015eea:	4b15      	ldr	r3, [pc, #84]	@ (8015f40 <UTIL_SEQ_Run+0x1dc>)
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8015ef0:	4b14      	ldr	r3, [pc, #80]	@ (8015f44 <UTIL_SEQ_Run+0x1e0>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8015ef6:	4b14      	ldr	r3, [pc, #80]	@ (8015f48 <UTIL_SEQ_Run+0x1e4>)
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8015efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f00:	401a      	ands	r2, r3
 8015f02:	4b0e      	ldr	r3, [pc, #56]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4013      	ands	r3, r2
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d107      	bne.n	8015f1c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8015f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8015f4c <UTIL_SEQ_Run+0x1e8>)
 8015f0e:	681a      	ldr	r2, [r3, #0]
 8015f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f12:	4013      	ands	r3, r2
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d101      	bne.n	8015f1c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8015f18:	f7ec fe5b 	bl	8002bd2 <UTIL_SEQ_Idle>
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	f383 8810 	msr	PRIMASK, r3
}
 8015f26:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8015f28:	f000 f917 	bl	801615a <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8015f2c:	4a03      	ldr	r2, [pc, #12]	@ (8015f3c <UTIL_SEQ_Run+0x1d8>)
 8015f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015f30:	6013      	str	r3, [r2, #0]

  return;
 8015f32:	bf00      	nop
}
 8015f34:	3740      	adds	r7, #64	@ 0x40
 8015f36:	46bd      	mov	sp, r7
 8015f38:	bd80      	pop	{r7, pc}
 8015f3a:	bf00      	nop
 8015f3c:	20000128 	.word	0x20000128
 8015f40:	20003464 	.word	0x20003464
 8015f44:	20003468 	.word	0x20003468
 8015f48:	20000124 	.word	0x20000124
 8015f4c:	2000346c 	.word	0x2000346c
 8015f50:	200034f4 	.word	0x200034f4
 8015f54:	20003470 	.word	0x20003470
 8015f58:	20003474 	.word	0x20003474

08015f5c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b088      	sub	sp, #32
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	60f8      	str	r0, [r7, #12]
 8015f64:	60b9      	str	r1, [r7, #8]
 8015f66:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f68:	f3ef 8310 	mrs	r3, PRIMASK
 8015f6c:	617b      	str	r3, [r7, #20]
  return(result);
 8015f6e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8015f70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8015f72:	b672      	cpsid	i
}
 8015f74:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8015f76:	68f8      	ldr	r0, [r7, #12]
 8015f78:	f000 f8f6 	bl	8016168 <SEQ_BitPosition>
 8015f7c:	4603      	mov	r3, r0
 8015f7e:	4619      	mov	r1, r3
 8015f80:	4a06      	ldr	r2, [pc, #24]	@ (8015f9c <UTIL_SEQ_RegTask+0x40>)
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8015f88:	69fb      	ldr	r3, [r7, #28]
 8015f8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015f8c:	69bb      	ldr	r3, [r7, #24]
 8015f8e:	f383 8810 	msr	PRIMASK, r3
}
 8015f92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8015f94:	bf00      	nop
}
 8015f96:	3720      	adds	r7, #32
 8015f98:	46bd      	mov	sp, r7
 8015f9a:	bd80      	pop	{r7, pc}
 8015f9c:	20003474 	.word	0x20003474

08015fa0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8015fa0:	b480      	push	{r7}
 8015fa2:	b087      	sub	sp, #28
 8015fa4:	af00      	add	r7, sp, #0
 8015fa6:	6078      	str	r0, [r7, #4]
 8015fa8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015faa:	f3ef 8310 	mrs	r3, PRIMASK
 8015fae:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fb0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8015fb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8015fb4:	b672      	cpsid	i
}
 8015fb6:	bf00      	nop

  TaskSet |= TaskId_bm;
 8015fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8015ff0 <UTIL_SEQ_SetTask+0x50>)
 8015fba:	681a      	ldr	r2, [r3, #0]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	4313      	orrs	r3, r2
 8015fc0:	4a0b      	ldr	r2, [pc, #44]	@ (8015ff0 <UTIL_SEQ_SetTask+0x50>)
 8015fc2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8015fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8015ff4 <UTIL_SEQ_SetTask+0x54>)
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	431a      	orrs	r2, r3
 8015fd0:	4908      	ldr	r1, [pc, #32]	@ (8015ff4 <UTIL_SEQ_SetTask+0x54>)
 8015fd2:	683b      	ldr	r3, [r7, #0]
 8015fd4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8015fd8:	697b      	ldr	r3, [r7, #20]
 8015fda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015fdc:	693b      	ldr	r3, [r7, #16]
 8015fde:	f383 8810 	msr	PRIMASK, r3
}
 8015fe2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8015fe4:	bf00      	nop
}
 8015fe6:	371c      	adds	r7, #28
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fee:	4770      	bx	lr
 8015ff0:	20003464 	.word	0x20003464
 8015ff4:	200034f4 	.word	0x200034f4

08015ff8 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b087      	sub	sp, #28
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016000:	f3ef 8310 	mrs	r3, PRIMASK
 8016004:	60fb      	str	r3, [r7, #12]
  return(result);
 8016006:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016008:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801600a:	b672      	cpsid	i
}
 801600c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	43da      	mvns	r2, r3
 8016012:	4b08      	ldr	r3, [pc, #32]	@ (8016034 <UTIL_SEQ_PauseTask+0x3c>)
 8016014:	681b      	ldr	r3, [r3, #0]
 8016016:	4013      	ands	r3, r2
 8016018:	4a06      	ldr	r2, [pc, #24]	@ (8016034 <UTIL_SEQ_PauseTask+0x3c>)
 801601a:	6013      	str	r3, [r2, #0]
 801601c:	697b      	ldr	r3, [r7, #20]
 801601e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016020:	693b      	ldr	r3, [r7, #16]
 8016022:	f383 8810 	msr	PRIMASK, r3
}
 8016026:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016028:	bf00      	nop
}
 801602a:	371c      	adds	r7, #28
 801602c:	46bd      	mov	sp, r7
 801602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016032:	4770      	bx	lr
 8016034:	20000124 	.word	0x20000124

08016038 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016038:	b480      	push	{r7}
 801603a:	b087      	sub	sp, #28
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016040:	f3ef 8310 	mrs	r3, PRIMASK
 8016044:	60fb      	str	r3, [r7, #12]
  return(result);
 8016046:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016048:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801604a:	b672      	cpsid	i
}
 801604c:	bf00      	nop

  TaskMask |= TaskId_bm;
 801604e:	4b09      	ldr	r3, [pc, #36]	@ (8016074 <UTIL_SEQ_ResumeTask+0x3c>)
 8016050:	681a      	ldr	r2, [r3, #0]
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	4313      	orrs	r3, r2
 8016056:	4a07      	ldr	r2, [pc, #28]	@ (8016074 <UTIL_SEQ_ResumeTask+0x3c>)
 8016058:	6013      	str	r3, [r2, #0]
 801605a:	697b      	ldr	r3, [r7, #20]
 801605c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801605e:	693b      	ldr	r3, [r7, #16]
 8016060:	f383 8810 	msr	PRIMASK, r3
}
 8016064:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016066:	bf00      	nop
}
 8016068:	371c      	adds	r7, #28
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr
 8016072:	bf00      	nop
 8016074:	20000124 	.word	0x20000124

08016078 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016078:	b480      	push	{r7}
 801607a:	b087      	sub	sp, #28
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016080:	f3ef 8310 	mrs	r3, PRIMASK
 8016084:	60fb      	str	r3, [r7, #12]
  return(result);
 8016086:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016088:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801608a:	b672      	cpsid	i
}
 801608c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801608e:	4b09      	ldr	r3, [pc, #36]	@ (80160b4 <UTIL_SEQ_SetEvt+0x3c>)
 8016090:	681a      	ldr	r2, [r3, #0]
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	4313      	orrs	r3, r2
 8016096:	4a07      	ldr	r2, [pc, #28]	@ (80160b4 <UTIL_SEQ_SetEvt+0x3c>)
 8016098:	6013      	str	r3, [r2, #0]
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801609e:	693b      	ldr	r3, [r7, #16]
 80160a0:	f383 8810 	msr	PRIMASK, r3
}
 80160a4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80160a6:	bf00      	nop
}
 80160a8:	371c      	adds	r7, #28
 80160aa:	46bd      	mov	sp, r7
 80160ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160b0:	4770      	bx	lr
 80160b2:	bf00      	nop
 80160b4:	20003468 	.word	0x20003468

080160b8 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80160b8:	b580      	push	{r7, lr}
 80160ba:	b088      	sub	sp, #32
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80160c0:	4b1f      	ldr	r3, [pc, #124]	@ (8016140 <UTIL_SEQ_WaitEvt+0x88>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80160c6:	4b1e      	ldr	r3, [pc, #120]	@ (8016140 <UTIL_SEQ_WaitEvt+0x88>)
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160ce:	d102      	bne.n	80160d6 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80160d0:	2300      	movs	r3, #0
 80160d2:	61fb      	str	r3, [r7, #28]
 80160d4:	e005      	b.n	80160e2 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80160d6:	4b1a      	ldr	r3, [pc, #104]	@ (8016140 <UTIL_SEQ_WaitEvt+0x88>)
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2201      	movs	r2, #1
 80160dc:	fa02 f303 	lsl.w	r3, r2, r3
 80160e0:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80160e2:	4b18      	ldr	r3, [pc, #96]	@ (8016144 <UTIL_SEQ_WaitEvt+0x8c>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 80160e8:	4a16      	ldr	r2, [pc, #88]	@ (8016144 <UTIL_SEQ_WaitEvt+0x8c>)
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 80160ee:	e003      	b.n	80160f8 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 80160f0:	6879      	ldr	r1, [r7, #4]
 80160f2:	69f8      	ldr	r0, [r7, #28]
 80160f4:	f7ec fd74 	bl	8002be0 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80160f8:	4b13      	ldr	r3, [pc, #76]	@ (8016148 <UTIL_SEQ_WaitEvt+0x90>)
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	4013      	ands	r3, r2
 8016100:	2b00      	cmp	r3, #0
 8016102:	d0f5      	beq.n	80160f0 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8016104:	4a0e      	ldr	r2, [pc, #56]	@ (8016140 <UTIL_SEQ_WaitEvt+0x88>)
 8016106:	69bb      	ldr	r3, [r7, #24]
 8016108:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801610a:	f3ef 8310 	mrs	r3, PRIMASK
 801610e:	60bb      	str	r3, [r7, #8]
  return(result);
 8016110:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016112:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016114:	b672      	cpsid	i
}
 8016116:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	43da      	mvns	r2, r3
 801611c:	4b0a      	ldr	r3, [pc, #40]	@ (8016148 <UTIL_SEQ_WaitEvt+0x90>)
 801611e:	681b      	ldr	r3, [r3, #0]
 8016120:	4013      	ands	r3, r2
 8016122:	4a09      	ldr	r2, [pc, #36]	@ (8016148 <UTIL_SEQ_WaitEvt+0x90>)
 8016124:	6013      	str	r3, [r2, #0]
 8016126:	693b      	ldr	r3, [r7, #16]
 8016128:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	f383 8810 	msr	PRIMASK, r3
}
 8016130:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8016132:	4a04      	ldr	r2, [pc, #16]	@ (8016144 <UTIL_SEQ_WaitEvt+0x8c>)
 8016134:	697b      	ldr	r3, [r7, #20]
 8016136:	6013      	str	r3, [r2, #0]
  return;
 8016138:	bf00      	nop
}
 801613a:	3720      	adds	r7, #32
 801613c:	46bd      	mov	sp, r7
 801613e:	bd80      	pop	{r7, pc}
 8016140:	20003470 	.word	0x20003470
 8016144:	2000346c 	.word	0x2000346c
 8016148:	20003468 	.word	0x20003468

0801614c <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801614c:	b480      	push	{r7}
 801614e:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016150:	bf00      	nop
}
 8016152:	46bd      	mov	sp, r7
 8016154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016158:	4770      	bx	lr

0801615a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801615a:	b480      	push	{r7}
 801615c:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801615e:	bf00      	nop
}
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr

08016168 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016168:	b480      	push	{r7}
 801616a:	b085      	sub	sp, #20
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8016170:	2300      	movs	r3, #0
 8016172:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801617e:	d204      	bcs.n	801618a <SEQ_BitPosition+0x22>
 8016180:	2310      	movs	r3, #16
 8016182:	73fb      	strb	r3, [r7, #15]
 8016184:	68bb      	ldr	r3, [r7, #8]
 8016186:	041b      	lsls	r3, r3, #16
 8016188:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801618a:	68bb      	ldr	r3, [r7, #8]
 801618c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8016190:	d205      	bcs.n	801619e <SEQ_BitPosition+0x36>
 8016192:	7bfb      	ldrb	r3, [r7, #15]
 8016194:	3308      	adds	r3, #8
 8016196:	73fb      	strb	r3, [r7, #15]
 8016198:	68bb      	ldr	r3, [r7, #8]
 801619a:	021b      	lsls	r3, r3, #8
 801619c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801619e:	68bb      	ldr	r3, [r7, #8]
 80161a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80161a4:	d205      	bcs.n	80161b2 <SEQ_BitPosition+0x4a>
 80161a6:	7bfb      	ldrb	r3, [r7, #15]
 80161a8:	3304      	adds	r3, #4
 80161aa:	73fb      	strb	r3, [r7, #15]
 80161ac:	68bb      	ldr	r3, [r7, #8]
 80161ae:	011b      	lsls	r3, r3, #4
 80161b0:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80161b2:	68bb      	ldr	r3, [r7, #8]
 80161b4:	0f1b      	lsrs	r3, r3, #28
 80161b6:	4a07      	ldr	r2, [pc, #28]	@ (80161d4 <SEQ_BitPosition+0x6c>)
 80161b8:	5cd2      	ldrb	r2, [r2, r3]
 80161ba:	7bfb      	ldrb	r3, [r7, #15]
 80161bc:	4413      	add	r3, r2
 80161be:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80161c0:	7bfb      	ldrb	r3, [r7, #15]
 80161c2:	f1c3 031f 	rsb	r3, r3, #31
 80161c6:	b2db      	uxtb	r3, r3
}
 80161c8:	4618      	mov	r0, r3
 80161ca:	3714      	adds	r7, #20
 80161cc:	46bd      	mov	sp, r7
 80161ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d2:	4770      	bx	lr
 80161d4:	0801a2ec 	.word	0x0801a2ec

080161d8 <std>:
 80161d8:	2300      	movs	r3, #0
 80161da:	b510      	push	{r4, lr}
 80161dc:	4604      	mov	r4, r0
 80161de:	e9c0 3300 	strd	r3, r3, [r0]
 80161e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80161e6:	6083      	str	r3, [r0, #8]
 80161e8:	8181      	strh	r1, [r0, #12]
 80161ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80161ec:	81c2      	strh	r2, [r0, #14]
 80161ee:	6183      	str	r3, [r0, #24]
 80161f0:	4619      	mov	r1, r3
 80161f2:	2208      	movs	r2, #8
 80161f4:	305c      	adds	r0, #92	@ 0x5c
 80161f6:	f000 fa39 	bl	801666c <memset>
 80161fa:	4b0d      	ldr	r3, [pc, #52]	@ (8016230 <std+0x58>)
 80161fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80161fe:	4b0d      	ldr	r3, [pc, #52]	@ (8016234 <std+0x5c>)
 8016200:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016202:	4b0d      	ldr	r3, [pc, #52]	@ (8016238 <std+0x60>)
 8016204:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016206:	4b0d      	ldr	r3, [pc, #52]	@ (801623c <std+0x64>)
 8016208:	6323      	str	r3, [r4, #48]	@ 0x30
 801620a:	4b0d      	ldr	r3, [pc, #52]	@ (8016240 <std+0x68>)
 801620c:	6224      	str	r4, [r4, #32]
 801620e:	429c      	cmp	r4, r3
 8016210:	d006      	beq.n	8016220 <std+0x48>
 8016212:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016216:	4294      	cmp	r4, r2
 8016218:	d002      	beq.n	8016220 <std+0x48>
 801621a:	33d0      	adds	r3, #208	@ 0xd0
 801621c:	429c      	cmp	r4, r3
 801621e:	d105      	bne.n	801622c <std+0x54>
 8016220:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016228:	f000 baae 	b.w	8016788 <__retarget_lock_init_recursive>
 801622c:	bd10      	pop	{r4, pc}
 801622e:	bf00      	nop
 8016230:	0801644d 	.word	0x0801644d
 8016234:	0801646f 	.word	0x0801646f
 8016238:	080164a7 	.word	0x080164a7
 801623c:	080164cb 	.word	0x080164cb
 8016240:	20003504 	.word	0x20003504

08016244 <stdio_exit_handler>:
 8016244:	4a02      	ldr	r2, [pc, #8]	@ (8016250 <stdio_exit_handler+0xc>)
 8016246:	4903      	ldr	r1, [pc, #12]	@ (8016254 <stdio_exit_handler+0x10>)
 8016248:	4803      	ldr	r0, [pc, #12]	@ (8016258 <stdio_exit_handler+0x14>)
 801624a:	f000 b869 	b.w	8016320 <_fwalk_sglue>
 801624e:	bf00      	nop
 8016250:	2000012c 	.word	0x2000012c
 8016254:	080172f5 	.word	0x080172f5
 8016258:	2000013c 	.word	0x2000013c

0801625c <cleanup_stdio>:
 801625c:	6841      	ldr	r1, [r0, #4]
 801625e:	4b0c      	ldr	r3, [pc, #48]	@ (8016290 <cleanup_stdio+0x34>)
 8016260:	4299      	cmp	r1, r3
 8016262:	b510      	push	{r4, lr}
 8016264:	4604      	mov	r4, r0
 8016266:	d001      	beq.n	801626c <cleanup_stdio+0x10>
 8016268:	f001 f844 	bl	80172f4 <_fflush_r>
 801626c:	68a1      	ldr	r1, [r4, #8]
 801626e:	4b09      	ldr	r3, [pc, #36]	@ (8016294 <cleanup_stdio+0x38>)
 8016270:	4299      	cmp	r1, r3
 8016272:	d002      	beq.n	801627a <cleanup_stdio+0x1e>
 8016274:	4620      	mov	r0, r4
 8016276:	f001 f83d 	bl	80172f4 <_fflush_r>
 801627a:	68e1      	ldr	r1, [r4, #12]
 801627c:	4b06      	ldr	r3, [pc, #24]	@ (8016298 <cleanup_stdio+0x3c>)
 801627e:	4299      	cmp	r1, r3
 8016280:	d004      	beq.n	801628c <cleanup_stdio+0x30>
 8016282:	4620      	mov	r0, r4
 8016284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016288:	f001 b834 	b.w	80172f4 <_fflush_r>
 801628c:	bd10      	pop	{r4, pc}
 801628e:	bf00      	nop
 8016290:	20003504 	.word	0x20003504
 8016294:	2000356c 	.word	0x2000356c
 8016298:	200035d4 	.word	0x200035d4

0801629c <global_stdio_init.part.0>:
 801629c:	b510      	push	{r4, lr}
 801629e:	4b0b      	ldr	r3, [pc, #44]	@ (80162cc <global_stdio_init.part.0+0x30>)
 80162a0:	4c0b      	ldr	r4, [pc, #44]	@ (80162d0 <global_stdio_init.part.0+0x34>)
 80162a2:	4a0c      	ldr	r2, [pc, #48]	@ (80162d4 <global_stdio_init.part.0+0x38>)
 80162a4:	601a      	str	r2, [r3, #0]
 80162a6:	4620      	mov	r0, r4
 80162a8:	2200      	movs	r2, #0
 80162aa:	2104      	movs	r1, #4
 80162ac:	f7ff ff94 	bl	80161d8 <std>
 80162b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80162b4:	2201      	movs	r2, #1
 80162b6:	2109      	movs	r1, #9
 80162b8:	f7ff ff8e 	bl	80161d8 <std>
 80162bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80162c0:	2202      	movs	r2, #2
 80162c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162c6:	2112      	movs	r1, #18
 80162c8:	f7ff bf86 	b.w	80161d8 <std>
 80162cc:	2000363c 	.word	0x2000363c
 80162d0:	20003504 	.word	0x20003504
 80162d4:	08016245 	.word	0x08016245

080162d8 <__sfp_lock_acquire>:
 80162d8:	4801      	ldr	r0, [pc, #4]	@ (80162e0 <__sfp_lock_acquire+0x8>)
 80162da:	f000 ba56 	b.w	801678a <__retarget_lock_acquire_recursive>
 80162de:	bf00      	nop
 80162e0:	20003645 	.word	0x20003645

080162e4 <__sfp_lock_release>:
 80162e4:	4801      	ldr	r0, [pc, #4]	@ (80162ec <__sfp_lock_release+0x8>)
 80162e6:	f000 ba51 	b.w	801678c <__retarget_lock_release_recursive>
 80162ea:	bf00      	nop
 80162ec:	20003645 	.word	0x20003645

080162f0 <__sinit>:
 80162f0:	b510      	push	{r4, lr}
 80162f2:	4604      	mov	r4, r0
 80162f4:	f7ff fff0 	bl	80162d8 <__sfp_lock_acquire>
 80162f8:	6a23      	ldr	r3, [r4, #32]
 80162fa:	b11b      	cbz	r3, 8016304 <__sinit+0x14>
 80162fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016300:	f7ff bff0 	b.w	80162e4 <__sfp_lock_release>
 8016304:	4b04      	ldr	r3, [pc, #16]	@ (8016318 <__sinit+0x28>)
 8016306:	6223      	str	r3, [r4, #32]
 8016308:	4b04      	ldr	r3, [pc, #16]	@ (801631c <__sinit+0x2c>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d1f5      	bne.n	80162fc <__sinit+0xc>
 8016310:	f7ff ffc4 	bl	801629c <global_stdio_init.part.0>
 8016314:	e7f2      	b.n	80162fc <__sinit+0xc>
 8016316:	bf00      	nop
 8016318:	0801625d 	.word	0x0801625d
 801631c:	2000363c 	.word	0x2000363c

08016320 <_fwalk_sglue>:
 8016320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016324:	4607      	mov	r7, r0
 8016326:	4688      	mov	r8, r1
 8016328:	4614      	mov	r4, r2
 801632a:	2600      	movs	r6, #0
 801632c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016330:	f1b9 0901 	subs.w	r9, r9, #1
 8016334:	d505      	bpl.n	8016342 <_fwalk_sglue+0x22>
 8016336:	6824      	ldr	r4, [r4, #0]
 8016338:	2c00      	cmp	r4, #0
 801633a:	d1f7      	bne.n	801632c <_fwalk_sglue+0xc>
 801633c:	4630      	mov	r0, r6
 801633e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016342:	89ab      	ldrh	r3, [r5, #12]
 8016344:	2b01      	cmp	r3, #1
 8016346:	d907      	bls.n	8016358 <_fwalk_sglue+0x38>
 8016348:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801634c:	3301      	adds	r3, #1
 801634e:	d003      	beq.n	8016358 <_fwalk_sglue+0x38>
 8016350:	4629      	mov	r1, r5
 8016352:	4638      	mov	r0, r7
 8016354:	47c0      	blx	r8
 8016356:	4306      	orrs	r6, r0
 8016358:	3568      	adds	r5, #104	@ 0x68
 801635a:	e7e9      	b.n	8016330 <_fwalk_sglue+0x10>

0801635c <iprintf>:
 801635c:	b40f      	push	{r0, r1, r2, r3}
 801635e:	b507      	push	{r0, r1, r2, lr}
 8016360:	4906      	ldr	r1, [pc, #24]	@ (801637c <iprintf+0x20>)
 8016362:	ab04      	add	r3, sp, #16
 8016364:	6808      	ldr	r0, [r1, #0]
 8016366:	f853 2b04 	ldr.w	r2, [r3], #4
 801636a:	6881      	ldr	r1, [r0, #8]
 801636c:	9301      	str	r3, [sp, #4]
 801636e:	f000 fc97 	bl	8016ca0 <_vfiprintf_r>
 8016372:	b003      	add	sp, #12
 8016374:	f85d eb04 	ldr.w	lr, [sp], #4
 8016378:	b004      	add	sp, #16
 801637a:	4770      	bx	lr
 801637c:	20000138 	.word	0x20000138

08016380 <putchar>:
 8016380:	4b02      	ldr	r3, [pc, #8]	@ (801638c <putchar+0xc>)
 8016382:	4601      	mov	r1, r0
 8016384:	6818      	ldr	r0, [r3, #0]
 8016386:	6882      	ldr	r2, [r0, #8]
 8016388:	f001 b83e 	b.w	8017408 <_putc_r>
 801638c:	20000138 	.word	0x20000138

08016390 <_puts_r>:
 8016390:	6a03      	ldr	r3, [r0, #32]
 8016392:	b570      	push	{r4, r5, r6, lr}
 8016394:	6884      	ldr	r4, [r0, #8]
 8016396:	4605      	mov	r5, r0
 8016398:	460e      	mov	r6, r1
 801639a:	b90b      	cbnz	r3, 80163a0 <_puts_r+0x10>
 801639c:	f7ff ffa8 	bl	80162f0 <__sinit>
 80163a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80163a2:	07db      	lsls	r3, r3, #31
 80163a4:	d405      	bmi.n	80163b2 <_puts_r+0x22>
 80163a6:	89a3      	ldrh	r3, [r4, #12]
 80163a8:	0598      	lsls	r0, r3, #22
 80163aa:	d402      	bmi.n	80163b2 <_puts_r+0x22>
 80163ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80163ae:	f000 f9ec 	bl	801678a <__retarget_lock_acquire_recursive>
 80163b2:	89a3      	ldrh	r3, [r4, #12]
 80163b4:	0719      	lsls	r1, r3, #28
 80163b6:	d502      	bpl.n	80163be <_puts_r+0x2e>
 80163b8:	6923      	ldr	r3, [r4, #16]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d135      	bne.n	801642a <_puts_r+0x9a>
 80163be:	4621      	mov	r1, r4
 80163c0:	4628      	mov	r0, r5
 80163c2:	f000 f8fd 	bl	80165c0 <__swsetup_r>
 80163c6:	b380      	cbz	r0, 801642a <_puts_r+0x9a>
 80163c8:	f04f 35ff 	mov.w	r5, #4294967295
 80163cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80163ce:	07da      	lsls	r2, r3, #31
 80163d0:	d405      	bmi.n	80163de <_puts_r+0x4e>
 80163d2:	89a3      	ldrh	r3, [r4, #12]
 80163d4:	059b      	lsls	r3, r3, #22
 80163d6:	d402      	bmi.n	80163de <_puts_r+0x4e>
 80163d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80163da:	f000 f9d7 	bl	801678c <__retarget_lock_release_recursive>
 80163de:	4628      	mov	r0, r5
 80163e0:	bd70      	pop	{r4, r5, r6, pc}
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	da04      	bge.n	80163f0 <_puts_r+0x60>
 80163e6:	69a2      	ldr	r2, [r4, #24]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	dc17      	bgt.n	801641c <_puts_r+0x8c>
 80163ec:	290a      	cmp	r1, #10
 80163ee:	d015      	beq.n	801641c <_puts_r+0x8c>
 80163f0:	6823      	ldr	r3, [r4, #0]
 80163f2:	1c5a      	adds	r2, r3, #1
 80163f4:	6022      	str	r2, [r4, #0]
 80163f6:	7019      	strb	r1, [r3, #0]
 80163f8:	68a3      	ldr	r3, [r4, #8]
 80163fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80163fe:	3b01      	subs	r3, #1
 8016400:	60a3      	str	r3, [r4, #8]
 8016402:	2900      	cmp	r1, #0
 8016404:	d1ed      	bne.n	80163e2 <_puts_r+0x52>
 8016406:	2b00      	cmp	r3, #0
 8016408:	da11      	bge.n	801642e <_puts_r+0x9e>
 801640a:	4622      	mov	r2, r4
 801640c:	210a      	movs	r1, #10
 801640e:	4628      	mov	r0, r5
 8016410:	f000 f898 	bl	8016544 <__swbuf_r>
 8016414:	3001      	adds	r0, #1
 8016416:	d0d7      	beq.n	80163c8 <_puts_r+0x38>
 8016418:	250a      	movs	r5, #10
 801641a:	e7d7      	b.n	80163cc <_puts_r+0x3c>
 801641c:	4622      	mov	r2, r4
 801641e:	4628      	mov	r0, r5
 8016420:	f000 f890 	bl	8016544 <__swbuf_r>
 8016424:	3001      	adds	r0, #1
 8016426:	d1e7      	bne.n	80163f8 <_puts_r+0x68>
 8016428:	e7ce      	b.n	80163c8 <_puts_r+0x38>
 801642a:	3e01      	subs	r6, #1
 801642c:	e7e4      	b.n	80163f8 <_puts_r+0x68>
 801642e:	6823      	ldr	r3, [r4, #0]
 8016430:	1c5a      	adds	r2, r3, #1
 8016432:	6022      	str	r2, [r4, #0]
 8016434:	220a      	movs	r2, #10
 8016436:	701a      	strb	r2, [r3, #0]
 8016438:	e7ee      	b.n	8016418 <_puts_r+0x88>
	...

0801643c <puts>:
 801643c:	4b02      	ldr	r3, [pc, #8]	@ (8016448 <puts+0xc>)
 801643e:	4601      	mov	r1, r0
 8016440:	6818      	ldr	r0, [r3, #0]
 8016442:	f7ff bfa5 	b.w	8016390 <_puts_r>
 8016446:	bf00      	nop
 8016448:	20000138 	.word	0x20000138

0801644c <__sread>:
 801644c:	b510      	push	{r4, lr}
 801644e:	460c      	mov	r4, r1
 8016450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016454:	f000 f94a 	bl	80166ec <_read_r>
 8016458:	2800      	cmp	r0, #0
 801645a:	bfab      	itete	ge
 801645c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801645e:	89a3      	ldrhlt	r3, [r4, #12]
 8016460:	181b      	addge	r3, r3, r0
 8016462:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016466:	bfac      	ite	ge
 8016468:	6563      	strge	r3, [r4, #84]	@ 0x54
 801646a:	81a3      	strhlt	r3, [r4, #12]
 801646c:	bd10      	pop	{r4, pc}

0801646e <__swrite>:
 801646e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016472:	461f      	mov	r7, r3
 8016474:	898b      	ldrh	r3, [r1, #12]
 8016476:	05db      	lsls	r3, r3, #23
 8016478:	4605      	mov	r5, r0
 801647a:	460c      	mov	r4, r1
 801647c:	4616      	mov	r6, r2
 801647e:	d505      	bpl.n	801648c <__swrite+0x1e>
 8016480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016484:	2302      	movs	r3, #2
 8016486:	2200      	movs	r2, #0
 8016488:	f000 f91e 	bl	80166c8 <_lseek_r>
 801648c:	89a3      	ldrh	r3, [r4, #12]
 801648e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016492:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016496:	81a3      	strh	r3, [r4, #12]
 8016498:	4632      	mov	r2, r6
 801649a:	463b      	mov	r3, r7
 801649c:	4628      	mov	r0, r5
 801649e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80164a2:	f000 b935 	b.w	8016710 <_write_r>

080164a6 <__sseek>:
 80164a6:	b510      	push	{r4, lr}
 80164a8:	460c      	mov	r4, r1
 80164aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164ae:	f000 f90b 	bl	80166c8 <_lseek_r>
 80164b2:	1c43      	adds	r3, r0, #1
 80164b4:	89a3      	ldrh	r3, [r4, #12]
 80164b6:	bf15      	itete	ne
 80164b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80164ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80164be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80164c2:	81a3      	strheq	r3, [r4, #12]
 80164c4:	bf18      	it	ne
 80164c6:	81a3      	strhne	r3, [r4, #12]
 80164c8:	bd10      	pop	{r4, pc}

080164ca <__sclose>:
 80164ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80164ce:	f000 b8eb 	b.w	80166a8 <_close_r>

080164d2 <_vsniprintf_r>:
 80164d2:	b530      	push	{r4, r5, lr}
 80164d4:	4614      	mov	r4, r2
 80164d6:	2c00      	cmp	r4, #0
 80164d8:	b09b      	sub	sp, #108	@ 0x6c
 80164da:	4605      	mov	r5, r0
 80164dc:	461a      	mov	r2, r3
 80164de:	da05      	bge.n	80164ec <_vsniprintf_r+0x1a>
 80164e0:	238b      	movs	r3, #139	@ 0x8b
 80164e2:	6003      	str	r3, [r0, #0]
 80164e4:	f04f 30ff 	mov.w	r0, #4294967295
 80164e8:	b01b      	add	sp, #108	@ 0x6c
 80164ea:	bd30      	pop	{r4, r5, pc}
 80164ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80164f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80164f4:	bf14      	ite	ne
 80164f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80164fa:	4623      	moveq	r3, r4
 80164fc:	9302      	str	r3, [sp, #8]
 80164fe:	9305      	str	r3, [sp, #20]
 8016500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016504:	9100      	str	r1, [sp, #0]
 8016506:	9104      	str	r1, [sp, #16]
 8016508:	f8ad 300e 	strh.w	r3, [sp, #14]
 801650c:	4669      	mov	r1, sp
 801650e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016510:	f000 faa0 	bl	8016a54 <_svfiprintf_r>
 8016514:	1c43      	adds	r3, r0, #1
 8016516:	bfbc      	itt	lt
 8016518:	238b      	movlt	r3, #139	@ 0x8b
 801651a:	602b      	strlt	r3, [r5, #0]
 801651c:	2c00      	cmp	r4, #0
 801651e:	d0e3      	beq.n	80164e8 <_vsniprintf_r+0x16>
 8016520:	9b00      	ldr	r3, [sp, #0]
 8016522:	2200      	movs	r2, #0
 8016524:	701a      	strb	r2, [r3, #0]
 8016526:	e7df      	b.n	80164e8 <_vsniprintf_r+0x16>

08016528 <vsniprintf>:
 8016528:	b507      	push	{r0, r1, r2, lr}
 801652a:	9300      	str	r3, [sp, #0]
 801652c:	4613      	mov	r3, r2
 801652e:	460a      	mov	r2, r1
 8016530:	4601      	mov	r1, r0
 8016532:	4803      	ldr	r0, [pc, #12]	@ (8016540 <vsniprintf+0x18>)
 8016534:	6800      	ldr	r0, [r0, #0]
 8016536:	f7ff ffcc 	bl	80164d2 <_vsniprintf_r>
 801653a:	b003      	add	sp, #12
 801653c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016540:	20000138 	.word	0x20000138

08016544 <__swbuf_r>:
 8016544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016546:	460e      	mov	r6, r1
 8016548:	4614      	mov	r4, r2
 801654a:	4605      	mov	r5, r0
 801654c:	b118      	cbz	r0, 8016556 <__swbuf_r+0x12>
 801654e:	6a03      	ldr	r3, [r0, #32]
 8016550:	b90b      	cbnz	r3, 8016556 <__swbuf_r+0x12>
 8016552:	f7ff fecd 	bl	80162f0 <__sinit>
 8016556:	69a3      	ldr	r3, [r4, #24]
 8016558:	60a3      	str	r3, [r4, #8]
 801655a:	89a3      	ldrh	r3, [r4, #12]
 801655c:	071a      	lsls	r2, r3, #28
 801655e:	d501      	bpl.n	8016564 <__swbuf_r+0x20>
 8016560:	6923      	ldr	r3, [r4, #16]
 8016562:	b943      	cbnz	r3, 8016576 <__swbuf_r+0x32>
 8016564:	4621      	mov	r1, r4
 8016566:	4628      	mov	r0, r5
 8016568:	f000 f82a 	bl	80165c0 <__swsetup_r>
 801656c:	b118      	cbz	r0, 8016576 <__swbuf_r+0x32>
 801656e:	f04f 37ff 	mov.w	r7, #4294967295
 8016572:	4638      	mov	r0, r7
 8016574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016576:	6823      	ldr	r3, [r4, #0]
 8016578:	6922      	ldr	r2, [r4, #16]
 801657a:	1a98      	subs	r0, r3, r2
 801657c:	6963      	ldr	r3, [r4, #20]
 801657e:	b2f6      	uxtb	r6, r6
 8016580:	4283      	cmp	r3, r0
 8016582:	4637      	mov	r7, r6
 8016584:	dc05      	bgt.n	8016592 <__swbuf_r+0x4e>
 8016586:	4621      	mov	r1, r4
 8016588:	4628      	mov	r0, r5
 801658a:	f000 feb3 	bl	80172f4 <_fflush_r>
 801658e:	2800      	cmp	r0, #0
 8016590:	d1ed      	bne.n	801656e <__swbuf_r+0x2a>
 8016592:	68a3      	ldr	r3, [r4, #8]
 8016594:	3b01      	subs	r3, #1
 8016596:	60a3      	str	r3, [r4, #8]
 8016598:	6823      	ldr	r3, [r4, #0]
 801659a:	1c5a      	adds	r2, r3, #1
 801659c:	6022      	str	r2, [r4, #0]
 801659e:	701e      	strb	r6, [r3, #0]
 80165a0:	6962      	ldr	r2, [r4, #20]
 80165a2:	1c43      	adds	r3, r0, #1
 80165a4:	429a      	cmp	r2, r3
 80165a6:	d004      	beq.n	80165b2 <__swbuf_r+0x6e>
 80165a8:	89a3      	ldrh	r3, [r4, #12]
 80165aa:	07db      	lsls	r3, r3, #31
 80165ac:	d5e1      	bpl.n	8016572 <__swbuf_r+0x2e>
 80165ae:	2e0a      	cmp	r6, #10
 80165b0:	d1df      	bne.n	8016572 <__swbuf_r+0x2e>
 80165b2:	4621      	mov	r1, r4
 80165b4:	4628      	mov	r0, r5
 80165b6:	f000 fe9d 	bl	80172f4 <_fflush_r>
 80165ba:	2800      	cmp	r0, #0
 80165bc:	d0d9      	beq.n	8016572 <__swbuf_r+0x2e>
 80165be:	e7d6      	b.n	801656e <__swbuf_r+0x2a>

080165c0 <__swsetup_r>:
 80165c0:	b538      	push	{r3, r4, r5, lr}
 80165c2:	4b29      	ldr	r3, [pc, #164]	@ (8016668 <__swsetup_r+0xa8>)
 80165c4:	4605      	mov	r5, r0
 80165c6:	6818      	ldr	r0, [r3, #0]
 80165c8:	460c      	mov	r4, r1
 80165ca:	b118      	cbz	r0, 80165d4 <__swsetup_r+0x14>
 80165cc:	6a03      	ldr	r3, [r0, #32]
 80165ce:	b90b      	cbnz	r3, 80165d4 <__swsetup_r+0x14>
 80165d0:	f7ff fe8e 	bl	80162f0 <__sinit>
 80165d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80165d8:	0719      	lsls	r1, r3, #28
 80165da:	d422      	bmi.n	8016622 <__swsetup_r+0x62>
 80165dc:	06da      	lsls	r2, r3, #27
 80165de:	d407      	bmi.n	80165f0 <__swsetup_r+0x30>
 80165e0:	2209      	movs	r2, #9
 80165e2:	602a      	str	r2, [r5, #0]
 80165e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80165e8:	81a3      	strh	r3, [r4, #12]
 80165ea:	f04f 30ff 	mov.w	r0, #4294967295
 80165ee:	e033      	b.n	8016658 <__swsetup_r+0x98>
 80165f0:	0758      	lsls	r0, r3, #29
 80165f2:	d512      	bpl.n	801661a <__swsetup_r+0x5a>
 80165f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80165f6:	b141      	cbz	r1, 801660a <__swsetup_r+0x4a>
 80165f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80165fc:	4299      	cmp	r1, r3
 80165fe:	d002      	beq.n	8016606 <__swsetup_r+0x46>
 8016600:	4628      	mov	r0, r5
 8016602:	f000 f8d3 	bl	80167ac <_free_r>
 8016606:	2300      	movs	r3, #0
 8016608:	6363      	str	r3, [r4, #52]	@ 0x34
 801660a:	89a3      	ldrh	r3, [r4, #12]
 801660c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8016610:	81a3      	strh	r3, [r4, #12]
 8016612:	2300      	movs	r3, #0
 8016614:	6063      	str	r3, [r4, #4]
 8016616:	6923      	ldr	r3, [r4, #16]
 8016618:	6023      	str	r3, [r4, #0]
 801661a:	89a3      	ldrh	r3, [r4, #12]
 801661c:	f043 0308 	orr.w	r3, r3, #8
 8016620:	81a3      	strh	r3, [r4, #12]
 8016622:	6923      	ldr	r3, [r4, #16]
 8016624:	b94b      	cbnz	r3, 801663a <__swsetup_r+0x7a>
 8016626:	89a3      	ldrh	r3, [r4, #12]
 8016628:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801662c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016630:	d003      	beq.n	801663a <__swsetup_r+0x7a>
 8016632:	4621      	mov	r1, r4
 8016634:	4628      	mov	r0, r5
 8016636:	f000 feab 	bl	8017390 <__smakebuf_r>
 801663a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801663e:	f013 0201 	ands.w	r2, r3, #1
 8016642:	d00a      	beq.n	801665a <__swsetup_r+0x9a>
 8016644:	2200      	movs	r2, #0
 8016646:	60a2      	str	r2, [r4, #8]
 8016648:	6962      	ldr	r2, [r4, #20]
 801664a:	4252      	negs	r2, r2
 801664c:	61a2      	str	r2, [r4, #24]
 801664e:	6922      	ldr	r2, [r4, #16]
 8016650:	b942      	cbnz	r2, 8016664 <__swsetup_r+0xa4>
 8016652:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8016656:	d1c5      	bne.n	80165e4 <__swsetup_r+0x24>
 8016658:	bd38      	pop	{r3, r4, r5, pc}
 801665a:	0799      	lsls	r1, r3, #30
 801665c:	bf58      	it	pl
 801665e:	6962      	ldrpl	r2, [r4, #20]
 8016660:	60a2      	str	r2, [r4, #8]
 8016662:	e7f4      	b.n	801664e <__swsetup_r+0x8e>
 8016664:	2000      	movs	r0, #0
 8016666:	e7f7      	b.n	8016658 <__swsetup_r+0x98>
 8016668:	20000138 	.word	0x20000138

0801666c <memset>:
 801666c:	4402      	add	r2, r0
 801666e:	4603      	mov	r3, r0
 8016670:	4293      	cmp	r3, r2
 8016672:	d100      	bne.n	8016676 <memset+0xa>
 8016674:	4770      	bx	lr
 8016676:	f803 1b01 	strb.w	r1, [r3], #1
 801667a:	e7f9      	b.n	8016670 <memset+0x4>

0801667c <strrchr>:
 801667c:	b538      	push	{r3, r4, r5, lr}
 801667e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8016682:	4603      	mov	r3, r0
 8016684:	d10e      	bne.n	80166a4 <strrchr+0x28>
 8016686:	4621      	mov	r1, r4
 8016688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801668c:	f000 bf0a 	b.w	80174a4 <strchr>
 8016690:	1c43      	adds	r3, r0, #1
 8016692:	4605      	mov	r5, r0
 8016694:	4621      	mov	r1, r4
 8016696:	4618      	mov	r0, r3
 8016698:	f000 ff04 	bl	80174a4 <strchr>
 801669c:	2800      	cmp	r0, #0
 801669e:	d1f7      	bne.n	8016690 <strrchr+0x14>
 80166a0:	4628      	mov	r0, r5
 80166a2:	bd38      	pop	{r3, r4, r5, pc}
 80166a4:	2500      	movs	r5, #0
 80166a6:	e7f5      	b.n	8016694 <strrchr+0x18>

080166a8 <_close_r>:
 80166a8:	b538      	push	{r3, r4, r5, lr}
 80166aa:	4d06      	ldr	r5, [pc, #24]	@ (80166c4 <_close_r+0x1c>)
 80166ac:	2300      	movs	r3, #0
 80166ae:	4604      	mov	r4, r0
 80166b0:	4608      	mov	r0, r1
 80166b2:	602b      	str	r3, [r5, #0]
 80166b4:	f7ee fa0b 	bl	8004ace <_close>
 80166b8:	1c43      	adds	r3, r0, #1
 80166ba:	d102      	bne.n	80166c2 <_close_r+0x1a>
 80166bc:	682b      	ldr	r3, [r5, #0]
 80166be:	b103      	cbz	r3, 80166c2 <_close_r+0x1a>
 80166c0:	6023      	str	r3, [r4, #0]
 80166c2:	bd38      	pop	{r3, r4, r5, pc}
 80166c4:	20003640 	.word	0x20003640

080166c8 <_lseek_r>:
 80166c8:	b538      	push	{r3, r4, r5, lr}
 80166ca:	4d07      	ldr	r5, [pc, #28]	@ (80166e8 <_lseek_r+0x20>)
 80166cc:	4604      	mov	r4, r0
 80166ce:	4608      	mov	r0, r1
 80166d0:	4611      	mov	r1, r2
 80166d2:	2200      	movs	r2, #0
 80166d4:	602a      	str	r2, [r5, #0]
 80166d6:	461a      	mov	r2, r3
 80166d8:	f7ee fa20 	bl	8004b1c <_lseek>
 80166dc:	1c43      	adds	r3, r0, #1
 80166de:	d102      	bne.n	80166e6 <_lseek_r+0x1e>
 80166e0:	682b      	ldr	r3, [r5, #0]
 80166e2:	b103      	cbz	r3, 80166e6 <_lseek_r+0x1e>
 80166e4:	6023      	str	r3, [r4, #0]
 80166e6:	bd38      	pop	{r3, r4, r5, pc}
 80166e8:	20003640 	.word	0x20003640

080166ec <_read_r>:
 80166ec:	b538      	push	{r3, r4, r5, lr}
 80166ee:	4d07      	ldr	r5, [pc, #28]	@ (801670c <_read_r+0x20>)
 80166f0:	4604      	mov	r4, r0
 80166f2:	4608      	mov	r0, r1
 80166f4:	4611      	mov	r1, r2
 80166f6:	2200      	movs	r2, #0
 80166f8:	602a      	str	r2, [r5, #0]
 80166fa:	461a      	mov	r2, r3
 80166fc:	f7ee f9ca 	bl	8004a94 <_read>
 8016700:	1c43      	adds	r3, r0, #1
 8016702:	d102      	bne.n	801670a <_read_r+0x1e>
 8016704:	682b      	ldr	r3, [r5, #0]
 8016706:	b103      	cbz	r3, 801670a <_read_r+0x1e>
 8016708:	6023      	str	r3, [r4, #0]
 801670a:	bd38      	pop	{r3, r4, r5, pc}
 801670c:	20003640 	.word	0x20003640

08016710 <_write_r>:
 8016710:	b538      	push	{r3, r4, r5, lr}
 8016712:	4d07      	ldr	r5, [pc, #28]	@ (8016730 <_write_r+0x20>)
 8016714:	4604      	mov	r4, r0
 8016716:	4608      	mov	r0, r1
 8016718:	4611      	mov	r1, r2
 801671a:	2200      	movs	r2, #0
 801671c:	602a      	str	r2, [r5, #0]
 801671e:	461a      	mov	r2, r3
 8016720:	f7fb ffac 	bl	801267c <_write>
 8016724:	1c43      	adds	r3, r0, #1
 8016726:	d102      	bne.n	801672e <_write_r+0x1e>
 8016728:	682b      	ldr	r3, [r5, #0]
 801672a:	b103      	cbz	r3, 801672e <_write_r+0x1e>
 801672c:	6023      	str	r3, [r4, #0]
 801672e:	bd38      	pop	{r3, r4, r5, pc}
 8016730:	20003640 	.word	0x20003640

08016734 <__errno>:
 8016734:	4b01      	ldr	r3, [pc, #4]	@ (801673c <__errno+0x8>)
 8016736:	6818      	ldr	r0, [r3, #0]
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop
 801673c:	20000138 	.word	0x20000138

08016740 <__libc_init_array>:
 8016740:	b570      	push	{r4, r5, r6, lr}
 8016742:	4d0d      	ldr	r5, [pc, #52]	@ (8016778 <__libc_init_array+0x38>)
 8016744:	4c0d      	ldr	r4, [pc, #52]	@ (801677c <__libc_init_array+0x3c>)
 8016746:	1b64      	subs	r4, r4, r5
 8016748:	10a4      	asrs	r4, r4, #2
 801674a:	2600      	movs	r6, #0
 801674c:	42a6      	cmp	r6, r4
 801674e:	d109      	bne.n	8016764 <__libc_init_array+0x24>
 8016750:	4d0b      	ldr	r5, [pc, #44]	@ (8016780 <__libc_init_array+0x40>)
 8016752:	4c0c      	ldr	r4, [pc, #48]	@ (8016784 <__libc_init_array+0x44>)
 8016754:	f001 ff4c 	bl	80185f0 <_init>
 8016758:	1b64      	subs	r4, r4, r5
 801675a:	10a4      	asrs	r4, r4, #2
 801675c:	2600      	movs	r6, #0
 801675e:	42a6      	cmp	r6, r4
 8016760:	d105      	bne.n	801676e <__libc_init_array+0x2e>
 8016762:	bd70      	pop	{r4, r5, r6, pc}
 8016764:	f855 3b04 	ldr.w	r3, [r5], #4
 8016768:	4798      	blx	r3
 801676a:	3601      	adds	r6, #1
 801676c:	e7ee      	b.n	801674c <__libc_init_array+0xc>
 801676e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016772:	4798      	blx	r3
 8016774:	3601      	adds	r6, #1
 8016776:	e7f2      	b.n	801675e <__libc_init_array+0x1e>
 8016778:	0801a510 	.word	0x0801a510
 801677c:	0801a510 	.word	0x0801a510
 8016780:	0801a510 	.word	0x0801a510
 8016784:	0801a514 	.word	0x0801a514

08016788 <__retarget_lock_init_recursive>:
 8016788:	4770      	bx	lr

0801678a <__retarget_lock_acquire_recursive>:
 801678a:	4770      	bx	lr

0801678c <__retarget_lock_release_recursive>:
 801678c:	4770      	bx	lr

0801678e <memcpy>:
 801678e:	440a      	add	r2, r1
 8016790:	4291      	cmp	r1, r2
 8016792:	f100 33ff 	add.w	r3, r0, #4294967295
 8016796:	d100      	bne.n	801679a <memcpy+0xc>
 8016798:	4770      	bx	lr
 801679a:	b510      	push	{r4, lr}
 801679c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80167a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80167a4:	4291      	cmp	r1, r2
 80167a6:	d1f9      	bne.n	801679c <memcpy+0xe>
 80167a8:	bd10      	pop	{r4, pc}
	...

080167ac <_free_r>:
 80167ac:	b538      	push	{r3, r4, r5, lr}
 80167ae:	4605      	mov	r5, r0
 80167b0:	2900      	cmp	r1, #0
 80167b2:	d041      	beq.n	8016838 <_free_r+0x8c>
 80167b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80167b8:	1f0c      	subs	r4, r1, #4
 80167ba:	2b00      	cmp	r3, #0
 80167bc:	bfb8      	it	lt
 80167be:	18e4      	addlt	r4, r4, r3
 80167c0:	f000 f8e0 	bl	8016984 <__malloc_lock>
 80167c4:	4a1d      	ldr	r2, [pc, #116]	@ (801683c <_free_r+0x90>)
 80167c6:	6813      	ldr	r3, [r2, #0]
 80167c8:	b933      	cbnz	r3, 80167d8 <_free_r+0x2c>
 80167ca:	6063      	str	r3, [r4, #4]
 80167cc:	6014      	str	r4, [r2, #0]
 80167ce:	4628      	mov	r0, r5
 80167d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80167d4:	f000 b8dc 	b.w	8016990 <__malloc_unlock>
 80167d8:	42a3      	cmp	r3, r4
 80167da:	d908      	bls.n	80167ee <_free_r+0x42>
 80167dc:	6820      	ldr	r0, [r4, #0]
 80167de:	1821      	adds	r1, r4, r0
 80167e0:	428b      	cmp	r3, r1
 80167e2:	bf01      	itttt	eq
 80167e4:	6819      	ldreq	r1, [r3, #0]
 80167e6:	685b      	ldreq	r3, [r3, #4]
 80167e8:	1809      	addeq	r1, r1, r0
 80167ea:	6021      	streq	r1, [r4, #0]
 80167ec:	e7ed      	b.n	80167ca <_free_r+0x1e>
 80167ee:	461a      	mov	r2, r3
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	b10b      	cbz	r3, 80167f8 <_free_r+0x4c>
 80167f4:	42a3      	cmp	r3, r4
 80167f6:	d9fa      	bls.n	80167ee <_free_r+0x42>
 80167f8:	6811      	ldr	r1, [r2, #0]
 80167fa:	1850      	adds	r0, r2, r1
 80167fc:	42a0      	cmp	r0, r4
 80167fe:	d10b      	bne.n	8016818 <_free_r+0x6c>
 8016800:	6820      	ldr	r0, [r4, #0]
 8016802:	4401      	add	r1, r0
 8016804:	1850      	adds	r0, r2, r1
 8016806:	4283      	cmp	r3, r0
 8016808:	6011      	str	r1, [r2, #0]
 801680a:	d1e0      	bne.n	80167ce <_free_r+0x22>
 801680c:	6818      	ldr	r0, [r3, #0]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	6053      	str	r3, [r2, #4]
 8016812:	4408      	add	r0, r1
 8016814:	6010      	str	r0, [r2, #0]
 8016816:	e7da      	b.n	80167ce <_free_r+0x22>
 8016818:	d902      	bls.n	8016820 <_free_r+0x74>
 801681a:	230c      	movs	r3, #12
 801681c:	602b      	str	r3, [r5, #0]
 801681e:	e7d6      	b.n	80167ce <_free_r+0x22>
 8016820:	6820      	ldr	r0, [r4, #0]
 8016822:	1821      	adds	r1, r4, r0
 8016824:	428b      	cmp	r3, r1
 8016826:	bf04      	itt	eq
 8016828:	6819      	ldreq	r1, [r3, #0]
 801682a:	685b      	ldreq	r3, [r3, #4]
 801682c:	6063      	str	r3, [r4, #4]
 801682e:	bf04      	itt	eq
 8016830:	1809      	addeq	r1, r1, r0
 8016832:	6021      	streq	r1, [r4, #0]
 8016834:	6054      	str	r4, [r2, #4]
 8016836:	e7ca      	b.n	80167ce <_free_r+0x22>
 8016838:	bd38      	pop	{r3, r4, r5, pc}
 801683a:	bf00      	nop
 801683c:	2000364c 	.word	0x2000364c

08016840 <sbrk_aligned>:
 8016840:	b570      	push	{r4, r5, r6, lr}
 8016842:	4e0f      	ldr	r6, [pc, #60]	@ (8016880 <sbrk_aligned+0x40>)
 8016844:	460c      	mov	r4, r1
 8016846:	6831      	ldr	r1, [r6, #0]
 8016848:	4605      	mov	r5, r0
 801684a:	b911      	cbnz	r1, 8016852 <sbrk_aligned+0x12>
 801684c:	f000 fe5a 	bl	8017504 <_sbrk_r>
 8016850:	6030      	str	r0, [r6, #0]
 8016852:	4621      	mov	r1, r4
 8016854:	4628      	mov	r0, r5
 8016856:	f000 fe55 	bl	8017504 <_sbrk_r>
 801685a:	1c43      	adds	r3, r0, #1
 801685c:	d103      	bne.n	8016866 <sbrk_aligned+0x26>
 801685e:	f04f 34ff 	mov.w	r4, #4294967295
 8016862:	4620      	mov	r0, r4
 8016864:	bd70      	pop	{r4, r5, r6, pc}
 8016866:	1cc4      	adds	r4, r0, #3
 8016868:	f024 0403 	bic.w	r4, r4, #3
 801686c:	42a0      	cmp	r0, r4
 801686e:	d0f8      	beq.n	8016862 <sbrk_aligned+0x22>
 8016870:	1a21      	subs	r1, r4, r0
 8016872:	4628      	mov	r0, r5
 8016874:	f000 fe46 	bl	8017504 <_sbrk_r>
 8016878:	3001      	adds	r0, #1
 801687a:	d1f2      	bne.n	8016862 <sbrk_aligned+0x22>
 801687c:	e7ef      	b.n	801685e <sbrk_aligned+0x1e>
 801687e:	bf00      	nop
 8016880:	20003648 	.word	0x20003648

08016884 <_malloc_r>:
 8016884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016888:	1ccd      	adds	r5, r1, #3
 801688a:	f025 0503 	bic.w	r5, r5, #3
 801688e:	3508      	adds	r5, #8
 8016890:	2d0c      	cmp	r5, #12
 8016892:	bf38      	it	cc
 8016894:	250c      	movcc	r5, #12
 8016896:	2d00      	cmp	r5, #0
 8016898:	4606      	mov	r6, r0
 801689a:	db01      	blt.n	80168a0 <_malloc_r+0x1c>
 801689c:	42a9      	cmp	r1, r5
 801689e:	d904      	bls.n	80168aa <_malloc_r+0x26>
 80168a0:	230c      	movs	r3, #12
 80168a2:	6033      	str	r3, [r6, #0]
 80168a4:	2000      	movs	r0, #0
 80168a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016980 <_malloc_r+0xfc>
 80168ae:	f000 f869 	bl	8016984 <__malloc_lock>
 80168b2:	f8d8 3000 	ldr.w	r3, [r8]
 80168b6:	461c      	mov	r4, r3
 80168b8:	bb44      	cbnz	r4, 801690c <_malloc_r+0x88>
 80168ba:	4629      	mov	r1, r5
 80168bc:	4630      	mov	r0, r6
 80168be:	f7ff ffbf 	bl	8016840 <sbrk_aligned>
 80168c2:	1c43      	adds	r3, r0, #1
 80168c4:	4604      	mov	r4, r0
 80168c6:	d158      	bne.n	801697a <_malloc_r+0xf6>
 80168c8:	f8d8 4000 	ldr.w	r4, [r8]
 80168cc:	4627      	mov	r7, r4
 80168ce:	2f00      	cmp	r7, #0
 80168d0:	d143      	bne.n	801695a <_malloc_r+0xd6>
 80168d2:	2c00      	cmp	r4, #0
 80168d4:	d04b      	beq.n	801696e <_malloc_r+0xea>
 80168d6:	6823      	ldr	r3, [r4, #0]
 80168d8:	4639      	mov	r1, r7
 80168da:	4630      	mov	r0, r6
 80168dc:	eb04 0903 	add.w	r9, r4, r3
 80168e0:	f000 fe10 	bl	8017504 <_sbrk_r>
 80168e4:	4581      	cmp	r9, r0
 80168e6:	d142      	bne.n	801696e <_malloc_r+0xea>
 80168e8:	6821      	ldr	r1, [r4, #0]
 80168ea:	1a6d      	subs	r5, r5, r1
 80168ec:	4629      	mov	r1, r5
 80168ee:	4630      	mov	r0, r6
 80168f0:	f7ff ffa6 	bl	8016840 <sbrk_aligned>
 80168f4:	3001      	adds	r0, #1
 80168f6:	d03a      	beq.n	801696e <_malloc_r+0xea>
 80168f8:	6823      	ldr	r3, [r4, #0]
 80168fa:	442b      	add	r3, r5
 80168fc:	6023      	str	r3, [r4, #0]
 80168fe:	f8d8 3000 	ldr.w	r3, [r8]
 8016902:	685a      	ldr	r2, [r3, #4]
 8016904:	bb62      	cbnz	r2, 8016960 <_malloc_r+0xdc>
 8016906:	f8c8 7000 	str.w	r7, [r8]
 801690a:	e00f      	b.n	801692c <_malloc_r+0xa8>
 801690c:	6822      	ldr	r2, [r4, #0]
 801690e:	1b52      	subs	r2, r2, r5
 8016910:	d420      	bmi.n	8016954 <_malloc_r+0xd0>
 8016912:	2a0b      	cmp	r2, #11
 8016914:	d917      	bls.n	8016946 <_malloc_r+0xc2>
 8016916:	1961      	adds	r1, r4, r5
 8016918:	42a3      	cmp	r3, r4
 801691a:	6025      	str	r5, [r4, #0]
 801691c:	bf18      	it	ne
 801691e:	6059      	strne	r1, [r3, #4]
 8016920:	6863      	ldr	r3, [r4, #4]
 8016922:	bf08      	it	eq
 8016924:	f8c8 1000 	streq.w	r1, [r8]
 8016928:	5162      	str	r2, [r4, r5]
 801692a:	604b      	str	r3, [r1, #4]
 801692c:	4630      	mov	r0, r6
 801692e:	f000 f82f 	bl	8016990 <__malloc_unlock>
 8016932:	f104 000b 	add.w	r0, r4, #11
 8016936:	1d23      	adds	r3, r4, #4
 8016938:	f020 0007 	bic.w	r0, r0, #7
 801693c:	1ac2      	subs	r2, r0, r3
 801693e:	bf1c      	itt	ne
 8016940:	1a1b      	subne	r3, r3, r0
 8016942:	50a3      	strne	r3, [r4, r2]
 8016944:	e7af      	b.n	80168a6 <_malloc_r+0x22>
 8016946:	6862      	ldr	r2, [r4, #4]
 8016948:	42a3      	cmp	r3, r4
 801694a:	bf0c      	ite	eq
 801694c:	f8c8 2000 	streq.w	r2, [r8]
 8016950:	605a      	strne	r2, [r3, #4]
 8016952:	e7eb      	b.n	801692c <_malloc_r+0xa8>
 8016954:	4623      	mov	r3, r4
 8016956:	6864      	ldr	r4, [r4, #4]
 8016958:	e7ae      	b.n	80168b8 <_malloc_r+0x34>
 801695a:	463c      	mov	r4, r7
 801695c:	687f      	ldr	r7, [r7, #4]
 801695e:	e7b6      	b.n	80168ce <_malloc_r+0x4a>
 8016960:	461a      	mov	r2, r3
 8016962:	685b      	ldr	r3, [r3, #4]
 8016964:	42a3      	cmp	r3, r4
 8016966:	d1fb      	bne.n	8016960 <_malloc_r+0xdc>
 8016968:	2300      	movs	r3, #0
 801696a:	6053      	str	r3, [r2, #4]
 801696c:	e7de      	b.n	801692c <_malloc_r+0xa8>
 801696e:	230c      	movs	r3, #12
 8016970:	6033      	str	r3, [r6, #0]
 8016972:	4630      	mov	r0, r6
 8016974:	f000 f80c 	bl	8016990 <__malloc_unlock>
 8016978:	e794      	b.n	80168a4 <_malloc_r+0x20>
 801697a:	6005      	str	r5, [r0, #0]
 801697c:	e7d6      	b.n	801692c <_malloc_r+0xa8>
 801697e:	bf00      	nop
 8016980:	2000364c 	.word	0x2000364c

08016984 <__malloc_lock>:
 8016984:	4801      	ldr	r0, [pc, #4]	@ (801698c <__malloc_lock+0x8>)
 8016986:	f7ff bf00 	b.w	801678a <__retarget_lock_acquire_recursive>
 801698a:	bf00      	nop
 801698c:	20003644 	.word	0x20003644

08016990 <__malloc_unlock>:
 8016990:	4801      	ldr	r0, [pc, #4]	@ (8016998 <__malloc_unlock+0x8>)
 8016992:	f7ff befb 	b.w	801678c <__retarget_lock_release_recursive>
 8016996:	bf00      	nop
 8016998:	20003644 	.word	0x20003644

0801699c <__ssputs_r>:
 801699c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169a0:	688e      	ldr	r6, [r1, #8]
 80169a2:	461f      	mov	r7, r3
 80169a4:	42be      	cmp	r6, r7
 80169a6:	680b      	ldr	r3, [r1, #0]
 80169a8:	4682      	mov	sl, r0
 80169aa:	460c      	mov	r4, r1
 80169ac:	4690      	mov	r8, r2
 80169ae:	d82d      	bhi.n	8016a0c <__ssputs_r+0x70>
 80169b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80169b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80169b8:	d026      	beq.n	8016a08 <__ssputs_r+0x6c>
 80169ba:	6965      	ldr	r5, [r4, #20]
 80169bc:	6909      	ldr	r1, [r1, #16]
 80169be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169c2:	eba3 0901 	sub.w	r9, r3, r1
 80169c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80169ca:	1c7b      	adds	r3, r7, #1
 80169cc:	444b      	add	r3, r9
 80169ce:	106d      	asrs	r5, r5, #1
 80169d0:	429d      	cmp	r5, r3
 80169d2:	bf38      	it	cc
 80169d4:	461d      	movcc	r5, r3
 80169d6:	0553      	lsls	r3, r2, #21
 80169d8:	d527      	bpl.n	8016a2a <__ssputs_r+0x8e>
 80169da:	4629      	mov	r1, r5
 80169dc:	f7ff ff52 	bl	8016884 <_malloc_r>
 80169e0:	4606      	mov	r6, r0
 80169e2:	b360      	cbz	r0, 8016a3e <__ssputs_r+0xa2>
 80169e4:	6921      	ldr	r1, [r4, #16]
 80169e6:	464a      	mov	r2, r9
 80169e8:	f7ff fed1 	bl	801678e <memcpy>
 80169ec:	89a3      	ldrh	r3, [r4, #12]
 80169ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80169f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80169f6:	81a3      	strh	r3, [r4, #12]
 80169f8:	6126      	str	r6, [r4, #16]
 80169fa:	6165      	str	r5, [r4, #20]
 80169fc:	444e      	add	r6, r9
 80169fe:	eba5 0509 	sub.w	r5, r5, r9
 8016a02:	6026      	str	r6, [r4, #0]
 8016a04:	60a5      	str	r5, [r4, #8]
 8016a06:	463e      	mov	r6, r7
 8016a08:	42be      	cmp	r6, r7
 8016a0a:	d900      	bls.n	8016a0e <__ssputs_r+0x72>
 8016a0c:	463e      	mov	r6, r7
 8016a0e:	6820      	ldr	r0, [r4, #0]
 8016a10:	4632      	mov	r2, r6
 8016a12:	4641      	mov	r1, r8
 8016a14:	f000 fd2c 	bl	8017470 <memmove>
 8016a18:	68a3      	ldr	r3, [r4, #8]
 8016a1a:	1b9b      	subs	r3, r3, r6
 8016a1c:	60a3      	str	r3, [r4, #8]
 8016a1e:	6823      	ldr	r3, [r4, #0]
 8016a20:	4433      	add	r3, r6
 8016a22:	6023      	str	r3, [r4, #0]
 8016a24:	2000      	movs	r0, #0
 8016a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a2a:	462a      	mov	r2, r5
 8016a2c:	f000 fd7a 	bl	8017524 <_realloc_r>
 8016a30:	4606      	mov	r6, r0
 8016a32:	2800      	cmp	r0, #0
 8016a34:	d1e0      	bne.n	80169f8 <__ssputs_r+0x5c>
 8016a36:	6921      	ldr	r1, [r4, #16]
 8016a38:	4650      	mov	r0, sl
 8016a3a:	f7ff feb7 	bl	80167ac <_free_r>
 8016a3e:	230c      	movs	r3, #12
 8016a40:	f8ca 3000 	str.w	r3, [sl]
 8016a44:	89a3      	ldrh	r3, [r4, #12]
 8016a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016a4a:	81a3      	strh	r3, [r4, #12]
 8016a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a50:	e7e9      	b.n	8016a26 <__ssputs_r+0x8a>
	...

08016a54 <_svfiprintf_r>:
 8016a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a58:	4698      	mov	r8, r3
 8016a5a:	898b      	ldrh	r3, [r1, #12]
 8016a5c:	061b      	lsls	r3, r3, #24
 8016a5e:	b09d      	sub	sp, #116	@ 0x74
 8016a60:	4607      	mov	r7, r0
 8016a62:	460d      	mov	r5, r1
 8016a64:	4614      	mov	r4, r2
 8016a66:	d510      	bpl.n	8016a8a <_svfiprintf_r+0x36>
 8016a68:	690b      	ldr	r3, [r1, #16]
 8016a6a:	b973      	cbnz	r3, 8016a8a <_svfiprintf_r+0x36>
 8016a6c:	2140      	movs	r1, #64	@ 0x40
 8016a6e:	f7ff ff09 	bl	8016884 <_malloc_r>
 8016a72:	6028      	str	r0, [r5, #0]
 8016a74:	6128      	str	r0, [r5, #16]
 8016a76:	b930      	cbnz	r0, 8016a86 <_svfiprintf_r+0x32>
 8016a78:	230c      	movs	r3, #12
 8016a7a:	603b      	str	r3, [r7, #0]
 8016a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016a80:	b01d      	add	sp, #116	@ 0x74
 8016a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a86:	2340      	movs	r3, #64	@ 0x40
 8016a88:	616b      	str	r3, [r5, #20]
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8016a8e:	2320      	movs	r3, #32
 8016a90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8016a98:	2330      	movs	r3, #48	@ 0x30
 8016a9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8016c38 <_svfiprintf_r+0x1e4>
 8016a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016aa2:	f04f 0901 	mov.w	r9, #1
 8016aa6:	4623      	mov	r3, r4
 8016aa8:	469a      	mov	sl, r3
 8016aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016aae:	b10a      	cbz	r2, 8016ab4 <_svfiprintf_r+0x60>
 8016ab0:	2a25      	cmp	r2, #37	@ 0x25
 8016ab2:	d1f9      	bne.n	8016aa8 <_svfiprintf_r+0x54>
 8016ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8016ab8:	d00b      	beq.n	8016ad2 <_svfiprintf_r+0x7e>
 8016aba:	465b      	mov	r3, fp
 8016abc:	4622      	mov	r2, r4
 8016abe:	4629      	mov	r1, r5
 8016ac0:	4638      	mov	r0, r7
 8016ac2:	f7ff ff6b 	bl	801699c <__ssputs_r>
 8016ac6:	3001      	adds	r0, #1
 8016ac8:	f000 80a7 	beq.w	8016c1a <_svfiprintf_r+0x1c6>
 8016acc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016ace:	445a      	add	r2, fp
 8016ad0:	9209      	str	r2, [sp, #36]	@ 0x24
 8016ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	f000 809f 	beq.w	8016c1a <_svfiprintf_r+0x1c6>
 8016adc:	2300      	movs	r3, #0
 8016ade:	f04f 32ff 	mov.w	r2, #4294967295
 8016ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ae6:	f10a 0a01 	add.w	sl, sl, #1
 8016aea:	9304      	str	r3, [sp, #16]
 8016aec:	9307      	str	r3, [sp, #28]
 8016aee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016af2:	931a      	str	r3, [sp, #104]	@ 0x68
 8016af4:	4654      	mov	r4, sl
 8016af6:	2205      	movs	r2, #5
 8016af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016afc:	484e      	ldr	r0, [pc, #312]	@ (8016c38 <_svfiprintf_r+0x1e4>)
 8016afe:	f7e9 fb47 	bl	8000190 <memchr>
 8016b02:	9a04      	ldr	r2, [sp, #16]
 8016b04:	b9d8      	cbnz	r0, 8016b3e <_svfiprintf_r+0xea>
 8016b06:	06d0      	lsls	r0, r2, #27
 8016b08:	bf44      	itt	mi
 8016b0a:	2320      	movmi	r3, #32
 8016b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b10:	0711      	lsls	r1, r2, #28
 8016b12:	bf44      	itt	mi
 8016b14:	232b      	movmi	r3, #43	@ 0x2b
 8016b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8016b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b20:	d015      	beq.n	8016b4e <_svfiprintf_r+0xfa>
 8016b22:	9a07      	ldr	r2, [sp, #28]
 8016b24:	4654      	mov	r4, sl
 8016b26:	2000      	movs	r0, #0
 8016b28:	f04f 0c0a 	mov.w	ip, #10
 8016b2c:	4621      	mov	r1, r4
 8016b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016b32:	3b30      	subs	r3, #48	@ 0x30
 8016b34:	2b09      	cmp	r3, #9
 8016b36:	d94b      	bls.n	8016bd0 <_svfiprintf_r+0x17c>
 8016b38:	b1b0      	cbz	r0, 8016b68 <_svfiprintf_r+0x114>
 8016b3a:	9207      	str	r2, [sp, #28]
 8016b3c:	e014      	b.n	8016b68 <_svfiprintf_r+0x114>
 8016b3e:	eba0 0308 	sub.w	r3, r0, r8
 8016b42:	fa09 f303 	lsl.w	r3, r9, r3
 8016b46:	4313      	orrs	r3, r2
 8016b48:	9304      	str	r3, [sp, #16]
 8016b4a:	46a2      	mov	sl, r4
 8016b4c:	e7d2      	b.n	8016af4 <_svfiprintf_r+0xa0>
 8016b4e:	9b03      	ldr	r3, [sp, #12]
 8016b50:	1d19      	adds	r1, r3, #4
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	9103      	str	r1, [sp, #12]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	bfbb      	ittet	lt
 8016b5a:	425b      	neglt	r3, r3
 8016b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8016b60:	9307      	strge	r3, [sp, #28]
 8016b62:	9307      	strlt	r3, [sp, #28]
 8016b64:	bfb8      	it	lt
 8016b66:	9204      	strlt	r2, [sp, #16]
 8016b68:	7823      	ldrb	r3, [r4, #0]
 8016b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8016b6c:	d10a      	bne.n	8016b84 <_svfiprintf_r+0x130>
 8016b6e:	7863      	ldrb	r3, [r4, #1]
 8016b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8016b72:	d132      	bne.n	8016bda <_svfiprintf_r+0x186>
 8016b74:	9b03      	ldr	r3, [sp, #12]
 8016b76:	1d1a      	adds	r2, r3, #4
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	9203      	str	r2, [sp, #12]
 8016b7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016b80:	3402      	adds	r4, #2
 8016b82:	9305      	str	r3, [sp, #20]
 8016b84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8016c48 <_svfiprintf_r+0x1f4>
 8016b88:	7821      	ldrb	r1, [r4, #0]
 8016b8a:	2203      	movs	r2, #3
 8016b8c:	4650      	mov	r0, sl
 8016b8e:	f7e9 faff 	bl	8000190 <memchr>
 8016b92:	b138      	cbz	r0, 8016ba4 <_svfiprintf_r+0x150>
 8016b94:	9b04      	ldr	r3, [sp, #16]
 8016b96:	eba0 000a 	sub.w	r0, r0, sl
 8016b9a:	2240      	movs	r2, #64	@ 0x40
 8016b9c:	4082      	lsls	r2, r0
 8016b9e:	4313      	orrs	r3, r2
 8016ba0:	3401      	adds	r4, #1
 8016ba2:	9304      	str	r3, [sp, #16]
 8016ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ba8:	4824      	ldr	r0, [pc, #144]	@ (8016c3c <_svfiprintf_r+0x1e8>)
 8016baa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016bae:	2206      	movs	r2, #6
 8016bb0:	f7e9 faee 	bl	8000190 <memchr>
 8016bb4:	2800      	cmp	r0, #0
 8016bb6:	d036      	beq.n	8016c26 <_svfiprintf_r+0x1d2>
 8016bb8:	4b21      	ldr	r3, [pc, #132]	@ (8016c40 <_svfiprintf_r+0x1ec>)
 8016bba:	bb1b      	cbnz	r3, 8016c04 <_svfiprintf_r+0x1b0>
 8016bbc:	9b03      	ldr	r3, [sp, #12]
 8016bbe:	3307      	adds	r3, #7
 8016bc0:	f023 0307 	bic.w	r3, r3, #7
 8016bc4:	3308      	adds	r3, #8
 8016bc6:	9303      	str	r3, [sp, #12]
 8016bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016bca:	4433      	add	r3, r6
 8016bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8016bce:	e76a      	b.n	8016aa6 <_svfiprintf_r+0x52>
 8016bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8016bd4:	460c      	mov	r4, r1
 8016bd6:	2001      	movs	r0, #1
 8016bd8:	e7a8      	b.n	8016b2c <_svfiprintf_r+0xd8>
 8016bda:	2300      	movs	r3, #0
 8016bdc:	3401      	adds	r4, #1
 8016bde:	9305      	str	r3, [sp, #20]
 8016be0:	4619      	mov	r1, r3
 8016be2:	f04f 0c0a 	mov.w	ip, #10
 8016be6:	4620      	mov	r0, r4
 8016be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016bec:	3a30      	subs	r2, #48	@ 0x30
 8016bee:	2a09      	cmp	r2, #9
 8016bf0:	d903      	bls.n	8016bfa <_svfiprintf_r+0x1a6>
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d0c6      	beq.n	8016b84 <_svfiprintf_r+0x130>
 8016bf6:	9105      	str	r1, [sp, #20]
 8016bf8:	e7c4      	b.n	8016b84 <_svfiprintf_r+0x130>
 8016bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8016bfe:	4604      	mov	r4, r0
 8016c00:	2301      	movs	r3, #1
 8016c02:	e7f0      	b.n	8016be6 <_svfiprintf_r+0x192>
 8016c04:	ab03      	add	r3, sp, #12
 8016c06:	9300      	str	r3, [sp, #0]
 8016c08:	462a      	mov	r2, r5
 8016c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8016c44 <_svfiprintf_r+0x1f0>)
 8016c0c:	a904      	add	r1, sp, #16
 8016c0e:	4638      	mov	r0, r7
 8016c10:	f3af 8000 	nop.w
 8016c14:	1c42      	adds	r2, r0, #1
 8016c16:	4606      	mov	r6, r0
 8016c18:	d1d6      	bne.n	8016bc8 <_svfiprintf_r+0x174>
 8016c1a:	89ab      	ldrh	r3, [r5, #12]
 8016c1c:	065b      	lsls	r3, r3, #25
 8016c1e:	f53f af2d 	bmi.w	8016a7c <_svfiprintf_r+0x28>
 8016c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016c24:	e72c      	b.n	8016a80 <_svfiprintf_r+0x2c>
 8016c26:	ab03      	add	r3, sp, #12
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	462a      	mov	r2, r5
 8016c2c:	4b05      	ldr	r3, [pc, #20]	@ (8016c44 <_svfiprintf_r+0x1f0>)
 8016c2e:	a904      	add	r1, sp, #16
 8016c30:	4638      	mov	r0, r7
 8016c32:	f000 f9bb 	bl	8016fac <_printf_i>
 8016c36:	e7ed      	b.n	8016c14 <_svfiprintf_r+0x1c0>
 8016c38:	0801a2fc 	.word	0x0801a2fc
 8016c3c:	0801a306 	.word	0x0801a306
 8016c40:	00000000 	.word	0x00000000
 8016c44:	0801699d 	.word	0x0801699d
 8016c48:	0801a302 	.word	0x0801a302

08016c4c <__sfputc_r>:
 8016c4c:	6893      	ldr	r3, [r2, #8]
 8016c4e:	3b01      	subs	r3, #1
 8016c50:	2b00      	cmp	r3, #0
 8016c52:	b410      	push	{r4}
 8016c54:	6093      	str	r3, [r2, #8]
 8016c56:	da08      	bge.n	8016c6a <__sfputc_r+0x1e>
 8016c58:	6994      	ldr	r4, [r2, #24]
 8016c5a:	42a3      	cmp	r3, r4
 8016c5c:	db01      	blt.n	8016c62 <__sfputc_r+0x16>
 8016c5e:	290a      	cmp	r1, #10
 8016c60:	d103      	bne.n	8016c6a <__sfputc_r+0x1e>
 8016c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c66:	f7ff bc6d 	b.w	8016544 <__swbuf_r>
 8016c6a:	6813      	ldr	r3, [r2, #0]
 8016c6c:	1c58      	adds	r0, r3, #1
 8016c6e:	6010      	str	r0, [r2, #0]
 8016c70:	7019      	strb	r1, [r3, #0]
 8016c72:	4608      	mov	r0, r1
 8016c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c78:	4770      	bx	lr

08016c7a <__sfputs_r>:
 8016c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c7c:	4606      	mov	r6, r0
 8016c7e:	460f      	mov	r7, r1
 8016c80:	4614      	mov	r4, r2
 8016c82:	18d5      	adds	r5, r2, r3
 8016c84:	42ac      	cmp	r4, r5
 8016c86:	d101      	bne.n	8016c8c <__sfputs_r+0x12>
 8016c88:	2000      	movs	r0, #0
 8016c8a:	e007      	b.n	8016c9c <__sfputs_r+0x22>
 8016c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c90:	463a      	mov	r2, r7
 8016c92:	4630      	mov	r0, r6
 8016c94:	f7ff ffda 	bl	8016c4c <__sfputc_r>
 8016c98:	1c43      	adds	r3, r0, #1
 8016c9a:	d1f3      	bne.n	8016c84 <__sfputs_r+0xa>
 8016c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016ca0 <_vfiprintf_r>:
 8016ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ca4:	460d      	mov	r5, r1
 8016ca6:	b09d      	sub	sp, #116	@ 0x74
 8016ca8:	4614      	mov	r4, r2
 8016caa:	4698      	mov	r8, r3
 8016cac:	4606      	mov	r6, r0
 8016cae:	b118      	cbz	r0, 8016cb8 <_vfiprintf_r+0x18>
 8016cb0:	6a03      	ldr	r3, [r0, #32]
 8016cb2:	b90b      	cbnz	r3, 8016cb8 <_vfiprintf_r+0x18>
 8016cb4:	f7ff fb1c 	bl	80162f0 <__sinit>
 8016cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016cba:	07d9      	lsls	r1, r3, #31
 8016cbc:	d405      	bmi.n	8016cca <_vfiprintf_r+0x2a>
 8016cbe:	89ab      	ldrh	r3, [r5, #12]
 8016cc0:	059a      	lsls	r2, r3, #22
 8016cc2:	d402      	bmi.n	8016cca <_vfiprintf_r+0x2a>
 8016cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cc6:	f7ff fd60 	bl	801678a <__retarget_lock_acquire_recursive>
 8016cca:	89ab      	ldrh	r3, [r5, #12]
 8016ccc:	071b      	lsls	r3, r3, #28
 8016cce:	d501      	bpl.n	8016cd4 <_vfiprintf_r+0x34>
 8016cd0:	692b      	ldr	r3, [r5, #16]
 8016cd2:	b99b      	cbnz	r3, 8016cfc <_vfiprintf_r+0x5c>
 8016cd4:	4629      	mov	r1, r5
 8016cd6:	4630      	mov	r0, r6
 8016cd8:	f7ff fc72 	bl	80165c0 <__swsetup_r>
 8016cdc:	b170      	cbz	r0, 8016cfc <_vfiprintf_r+0x5c>
 8016cde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016ce0:	07dc      	lsls	r4, r3, #31
 8016ce2:	d504      	bpl.n	8016cee <_vfiprintf_r+0x4e>
 8016ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8016ce8:	b01d      	add	sp, #116	@ 0x74
 8016cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cee:	89ab      	ldrh	r3, [r5, #12]
 8016cf0:	0598      	lsls	r0, r3, #22
 8016cf2:	d4f7      	bmi.n	8016ce4 <_vfiprintf_r+0x44>
 8016cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016cf6:	f7ff fd49 	bl	801678c <__retarget_lock_release_recursive>
 8016cfa:	e7f3      	b.n	8016ce4 <_vfiprintf_r+0x44>
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d00:	2320      	movs	r3, #32
 8016d02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8016d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d0a:	2330      	movs	r3, #48	@ 0x30
 8016d0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8016ebc <_vfiprintf_r+0x21c>
 8016d10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8016d14:	f04f 0901 	mov.w	r9, #1
 8016d18:	4623      	mov	r3, r4
 8016d1a:	469a      	mov	sl, r3
 8016d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d20:	b10a      	cbz	r2, 8016d26 <_vfiprintf_r+0x86>
 8016d22:	2a25      	cmp	r2, #37	@ 0x25
 8016d24:	d1f9      	bne.n	8016d1a <_vfiprintf_r+0x7a>
 8016d26:	ebba 0b04 	subs.w	fp, sl, r4
 8016d2a:	d00b      	beq.n	8016d44 <_vfiprintf_r+0xa4>
 8016d2c:	465b      	mov	r3, fp
 8016d2e:	4622      	mov	r2, r4
 8016d30:	4629      	mov	r1, r5
 8016d32:	4630      	mov	r0, r6
 8016d34:	f7ff ffa1 	bl	8016c7a <__sfputs_r>
 8016d38:	3001      	adds	r0, #1
 8016d3a:	f000 80a7 	beq.w	8016e8c <_vfiprintf_r+0x1ec>
 8016d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d40:	445a      	add	r2, fp
 8016d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8016d44:	f89a 3000 	ldrb.w	r3, [sl]
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	f000 809f 	beq.w	8016e8c <_vfiprintf_r+0x1ec>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	f04f 32ff 	mov.w	r2, #4294967295
 8016d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d58:	f10a 0a01 	add.w	sl, sl, #1
 8016d5c:	9304      	str	r3, [sp, #16]
 8016d5e:	9307      	str	r3, [sp, #28]
 8016d60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8016d64:	931a      	str	r3, [sp, #104]	@ 0x68
 8016d66:	4654      	mov	r4, sl
 8016d68:	2205      	movs	r2, #5
 8016d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d6e:	4853      	ldr	r0, [pc, #332]	@ (8016ebc <_vfiprintf_r+0x21c>)
 8016d70:	f7e9 fa0e 	bl	8000190 <memchr>
 8016d74:	9a04      	ldr	r2, [sp, #16]
 8016d76:	b9d8      	cbnz	r0, 8016db0 <_vfiprintf_r+0x110>
 8016d78:	06d1      	lsls	r1, r2, #27
 8016d7a:	bf44      	itt	mi
 8016d7c:	2320      	movmi	r3, #32
 8016d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d82:	0713      	lsls	r3, r2, #28
 8016d84:	bf44      	itt	mi
 8016d86:	232b      	movmi	r3, #43	@ 0x2b
 8016d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8016d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8016d92:	d015      	beq.n	8016dc0 <_vfiprintf_r+0x120>
 8016d94:	9a07      	ldr	r2, [sp, #28]
 8016d96:	4654      	mov	r4, sl
 8016d98:	2000      	movs	r0, #0
 8016d9a:	f04f 0c0a 	mov.w	ip, #10
 8016d9e:	4621      	mov	r1, r4
 8016da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016da4:	3b30      	subs	r3, #48	@ 0x30
 8016da6:	2b09      	cmp	r3, #9
 8016da8:	d94b      	bls.n	8016e42 <_vfiprintf_r+0x1a2>
 8016daa:	b1b0      	cbz	r0, 8016dda <_vfiprintf_r+0x13a>
 8016dac:	9207      	str	r2, [sp, #28]
 8016dae:	e014      	b.n	8016dda <_vfiprintf_r+0x13a>
 8016db0:	eba0 0308 	sub.w	r3, r0, r8
 8016db4:	fa09 f303 	lsl.w	r3, r9, r3
 8016db8:	4313      	orrs	r3, r2
 8016dba:	9304      	str	r3, [sp, #16]
 8016dbc:	46a2      	mov	sl, r4
 8016dbe:	e7d2      	b.n	8016d66 <_vfiprintf_r+0xc6>
 8016dc0:	9b03      	ldr	r3, [sp, #12]
 8016dc2:	1d19      	adds	r1, r3, #4
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	9103      	str	r1, [sp, #12]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	bfbb      	ittet	lt
 8016dcc:	425b      	neglt	r3, r3
 8016dce:	f042 0202 	orrlt.w	r2, r2, #2
 8016dd2:	9307      	strge	r3, [sp, #28]
 8016dd4:	9307      	strlt	r3, [sp, #28]
 8016dd6:	bfb8      	it	lt
 8016dd8:	9204      	strlt	r2, [sp, #16]
 8016dda:	7823      	ldrb	r3, [r4, #0]
 8016ddc:	2b2e      	cmp	r3, #46	@ 0x2e
 8016dde:	d10a      	bne.n	8016df6 <_vfiprintf_r+0x156>
 8016de0:	7863      	ldrb	r3, [r4, #1]
 8016de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8016de4:	d132      	bne.n	8016e4c <_vfiprintf_r+0x1ac>
 8016de6:	9b03      	ldr	r3, [sp, #12]
 8016de8:	1d1a      	adds	r2, r3, #4
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	9203      	str	r2, [sp, #12]
 8016dee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8016df2:	3402      	adds	r4, #2
 8016df4:	9305      	str	r3, [sp, #20]
 8016df6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8016ecc <_vfiprintf_r+0x22c>
 8016dfa:	7821      	ldrb	r1, [r4, #0]
 8016dfc:	2203      	movs	r2, #3
 8016dfe:	4650      	mov	r0, sl
 8016e00:	f7e9 f9c6 	bl	8000190 <memchr>
 8016e04:	b138      	cbz	r0, 8016e16 <_vfiprintf_r+0x176>
 8016e06:	9b04      	ldr	r3, [sp, #16]
 8016e08:	eba0 000a 	sub.w	r0, r0, sl
 8016e0c:	2240      	movs	r2, #64	@ 0x40
 8016e0e:	4082      	lsls	r2, r0
 8016e10:	4313      	orrs	r3, r2
 8016e12:	3401      	adds	r4, #1
 8016e14:	9304      	str	r3, [sp, #16]
 8016e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e1a:	4829      	ldr	r0, [pc, #164]	@ (8016ec0 <_vfiprintf_r+0x220>)
 8016e1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8016e20:	2206      	movs	r2, #6
 8016e22:	f7e9 f9b5 	bl	8000190 <memchr>
 8016e26:	2800      	cmp	r0, #0
 8016e28:	d03f      	beq.n	8016eaa <_vfiprintf_r+0x20a>
 8016e2a:	4b26      	ldr	r3, [pc, #152]	@ (8016ec4 <_vfiprintf_r+0x224>)
 8016e2c:	bb1b      	cbnz	r3, 8016e76 <_vfiprintf_r+0x1d6>
 8016e2e:	9b03      	ldr	r3, [sp, #12]
 8016e30:	3307      	adds	r3, #7
 8016e32:	f023 0307 	bic.w	r3, r3, #7
 8016e36:	3308      	adds	r3, #8
 8016e38:	9303      	str	r3, [sp, #12]
 8016e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e3c:	443b      	add	r3, r7
 8016e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8016e40:	e76a      	b.n	8016d18 <_vfiprintf_r+0x78>
 8016e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e46:	460c      	mov	r4, r1
 8016e48:	2001      	movs	r0, #1
 8016e4a:	e7a8      	b.n	8016d9e <_vfiprintf_r+0xfe>
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	3401      	adds	r4, #1
 8016e50:	9305      	str	r3, [sp, #20]
 8016e52:	4619      	mov	r1, r3
 8016e54:	f04f 0c0a 	mov.w	ip, #10
 8016e58:	4620      	mov	r0, r4
 8016e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e5e:	3a30      	subs	r2, #48	@ 0x30
 8016e60:	2a09      	cmp	r2, #9
 8016e62:	d903      	bls.n	8016e6c <_vfiprintf_r+0x1cc>
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d0c6      	beq.n	8016df6 <_vfiprintf_r+0x156>
 8016e68:	9105      	str	r1, [sp, #20]
 8016e6a:	e7c4      	b.n	8016df6 <_vfiprintf_r+0x156>
 8016e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e70:	4604      	mov	r4, r0
 8016e72:	2301      	movs	r3, #1
 8016e74:	e7f0      	b.n	8016e58 <_vfiprintf_r+0x1b8>
 8016e76:	ab03      	add	r3, sp, #12
 8016e78:	9300      	str	r3, [sp, #0]
 8016e7a:	462a      	mov	r2, r5
 8016e7c:	4b12      	ldr	r3, [pc, #72]	@ (8016ec8 <_vfiprintf_r+0x228>)
 8016e7e:	a904      	add	r1, sp, #16
 8016e80:	4630      	mov	r0, r6
 8016e82:	f3af 8000 	nop.w
 8016e86:	4607      	mov	r7, r0
 8016e88:	1c78      	adds	r0, r7, #1
 8016e8a:	d1d6      	bne.n	8016e3a <_vfiprintf_r+0x19a>
 8016e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8016e8e:	07d9      	lsls	r1, r3, #31
 8016e90:	d405      	bmi.n	8016e9e <_vfiprintf_r+0x1fe>
 8016e92:	89ab      	ldrh	r3, [r5, #12]
 8016e94:	059a      	lsls	r2, r3, #22
 8016e96:	d402      	bmi.n	8016e9e <_vfiprintf_r+0x1fe>
 8016e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8016e9a:	f7ff fc77 	bl	801678c <__retarget_lock_release_recursive>
 8016e9e:	89ab      	ldrh	r3, [r5, #12]
 8016ea0:	065b      	lsls	r3, r3, #25
 8016ea2:	f53f af1f 	bmi.w	8016ce4 <_vfiprintf_r+0x44>
 8016ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016ea8:	e71e      	b.n	8016ce8 <_vfiprintf_r+0x48>
 8016eaa:	ab03      	add	r3, sp, #12
 8016eac:	9300      	str	r3, [sp, #0]
 8016eae:	462a      	mov	r2, r5
 8016eb0:	4b05      	ldr	r3, [pc, #20]	@ (8016ec8 <_vfiprintf_r+0x228>)
 8016eb2:	a904      	add	r1, sp, #16
 8016eb4:	4630      	mov	r0, r6
 8016eb6:	f000 f879 	bl	8016fac <_printf_i>
 8016eba:	e7e4      	b.n	8016e86 <_vfiprintf_r+0x1e6>
 8016ebc:	0801a2fc 	.word	0x0801a2fc
 8016ec0:	0801a306 	.word	0x0801a306
 8016ec4:	00000000 	.word	0x00000000
 8016ec8:	08016c7b 	.word	0x08016c7b
 8016ecc:	0801a302 	.word	0x0801a302

08016ed0 <_printf_common>:
 8016ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ed4:	4616      	mov	r6, r2
 8016ed6:	4698      	mov	r8, r3
 8016ed8:	688a      	ldr	r2, [r1, #8]
 8016eda:	690b      	ldr	r3, [r1, #16]
 8016edc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8016ee0:	4293      	cmp	r3, r2
 8016ee2:	bfb8      	it	lt
 8016ee4:	4613      	movlt	r3, r2
 8016ee6:	6033      	str	r3, [r6, #0]
 8016ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8016eec:	4607      	mov	r7, r0
 8016eee:	460c      	mov	r4, r1
 8016ef0:	b10a      	cbz	r2, 8016ef6 <_printf_common+0x26>
 8016ef2:	3301      	adds	r3, #1
 8016ef4:	6033      	str	r3, [r6, #0]
 8016ef6:	6823      	ldr	r3, [r4, #0]
 8016ef8:	0699      	lsls	r1, r3, #26
 8016efa:	bf42      	ittt	mi
 8016efc:	6833      	ldrmi	r3, [r6, #0]
 8016efe:	3302      	addmi	r3, #2
 8016f00:	6033      	strmi	r3, [r6, #0]
 8016f02:	6825      	ldr	r5, [r4, #0]
 8016f04:	f015 0506 	ands.w	r5, r5, #6
 8016f08:	d106      	bne.n	8016f18 <_printf_common+0x48>
 8016f0a:	f104 0a19 	add.w	sl, r4, #25
 8016f0e:	68e3      	ldr	r3, [r4, #12]
 8016f10:	6832      	ldr	r2, [r6, #0]
 8016f12:	1a9b      	subs	r3, r3, r2
 8016f14:	42ab      	cmp	r3, r5
 8016f16:	dc26      	bgt.n	8016f66 <_printf_common+0x96>
 8016f18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8016f1c:	6822      	ldr	r2, [r4, #0]
 8016f1e:	3b00      	subs	r3, #0
 8016f20:	bf18      	it	ne
 8016f22:	2301      	movne	r3, #1
 8016f24:	0692      	lsls	r2, r2, #26
 8016f26:	d42b      	bmi.n	8016f80 <_printf_common+0xb0>
 8016f28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8016f2c:	4641      	mov	r1, r8
 8016f2e:	4638      	mov	r0, r7
 8016f30:	47c8      	blx	r9
 8016f32:	3001      	adds	r0, #1
 8016f34:	d01e      	beq.n	8016f74 <_printf_common+0xa4>
 8016f36:	6823      	ldr	r3, [r4, #0]
 8016f38:	6922      	ldr	r2, [r4, #16]
 8016f3a:	f003 0306 	and.w	r3, r3, #6
 8016f3e:	2b04      	cmp	r3, #4
 8016f40:	bf02      	ittt	eq
 8016f42:	68e5      	ldreq	r5, [r4, #12]
 8016f44:	6833      	ldreq	r3, [r6, #0]
 8016f46:	1aed      	subeq	r5, r5, r3
 8016f48:	68a3      	ldr	r3, [r4, #8]
 8016f4a:	bf0c      	ite	eq
 8016f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016f50:	2500      	movne	r5, #0
 8016f52:	4293      	cmp	r3, r2
 8016f54:	bfc4      	itt	gt
 8016f56:	1a9b      	subgt	r3, r3, r2
 8016f58:	18ed      	addgt	r5, r5, r3
 8016f5a:	2600      	movs	r6, #0
 8016f5c:	341a      	adds	r4, #26
 8016f5e:	42b5      	cmp	r5, r6
 8016f60:	d11a      	bne.n	8016f98 <_printf_common+0xc8>
 8016f62:	2000      	movs	r0, #0
 8016f64:	e008      	b.n	8016f78 <_printf_common+0xa8>
 8016f66:	2301      	movs	r3, #1
 8016f68:	4652      	mov	r2, sl
 8016f6a:	4641      	mov	r1, r8
 8016f6c:	4638      	mov	r0, r7
 8016f6e:	47c8      	blx	r9
 8016f70:	3001      	adds	r0, #1
 8016f72:	d103      	bne.n	8016f7c <_printf_common+0xac>
 8016f74:	f04f 30ff 	mov.w	r0, #4294967295
 8016f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016f7c:	3501      	adds	r5, #1
 8016f7e:	e7c6      	b.n	8016f0e <_printf_common+0x3e>
 8016f80:	18e1      	adds	r1, r4, r3
 8016f82:	1c5a      	adds	r2, r3, #1
 8016f84:	2030      	movs	r0, #48	@ 0x30
 8016f86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8016f8a:	4422      	add	r2, r4
 8016f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8016f90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8016f94:	3302      	adds	r3, #2
 8016f96:	e7c7      	b.n	8016f28 <_printf_common+0x58>
 8016f98:	2301      	movs	r3, #1
 8016f9a:	4622      	mov	r2, r4
 8016f9c:	4641      	mov	r1, r8
 8016f9e:	4638      	mov	r0, r7
 8016fa0:	47c8      	blx	r9
 8016fa2:	3001      	adds	r0, #1
 8016fa4:	d0e6      	beq.n	8016f74 <_printf_common+0xa4>
 8016fa6:	3601      	adds	r6, #1
 8016fa8:	e7d9      	b.n	8016f5e <_printf_common+0x8e>
	...

08016fac <_printf_i>:
 8016fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016fb0:	7e0f      	ldrb	r7, [r1, #24]
 8016fb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016fb4:	2f78      	cmp	r7, #120	@ 0x78
 8016fb6:	4691      	mov	r9, r2
 8016fb8:	4680      	mov	r8, r0
 8016fba:	460c      	mov	r4, r1
 8016fbc:	469a      	mov	sl, r3
 8016fbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8016fc2:	d807      	bhi.n	8016fd4 <_printf_i+0x28>
 8016fc4:	2f62      	cmp	r7, #98	@ 0x62
 8016fc6:	d80a      	bhi.n	8016fde <_printf_i+0x32>
 8016fc8:	2f00      	cmp	r7, #0
 8016fca:	f000 80d2 	beq.w	8017172 <_printf_i+0x1c6>
 8016fce:	2f58      	cmp	r7, #88	@ 0x58
 8016fd0:	f000 80b9 	beq.w	8017146 <_printf_i+0x19a>
 8016fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8016fd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8016fdc:	e03a      	b.n	8017054 <_printf_i+0xa8>
 8016fde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8016fe2:	2b15      	cmp	r3, #21
 8016fe4:	d8f6      	bhi.n	8016fd4 <_printf_i+0x28>
 8016fe6:	a101      	add	r1, pc, #4	@ (adr r1, 8016fec <_printf_i+0x40>)
 8016fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016fec:	08017045 	.word	0x08017045
 8016ff0:	08017059 	.word	0x08017059
 8016ff4:	08016fd5 	.word	0x08016fd5
 8016ff8:	08016fd5 	.word	0x08016fd5
 8016ffc:	08016fd5 	.word	0x08016fd5
 8017000:	08016fd5 	.word	0x08016fd5
 8017004:	08017059 	.word	0x08017059
 8017008:	08016fd5 	.word	0x08016fd5
 801700c:	08016fd5 	.word	0x08016fd5
 8017010:	08016fd5 	.word	0x08016fd5
 8017014:	08016fd5 	.word	0x08016fd5
 8017018:	08017159 	.word	0x08017159
 801701c:	08017083 	.word	0x08017083
 8017020:	08017113 	.word	0x08017113
 8017024:	08016fd5 	.word	0x08016fd5
 8017028:	08016fd5 	.word	0x08016fd5
 801702c:	0801717b 	.word	0x0801717b
 8017030:	08016fd5 	.word	0x08016fd5
 8017034:	08017083 	.word	0x08017083
 8017038:	08016fd5 	.word	0x08016fd5
 801703c:	08016fd5 	.word	0x08016fd5
 8017040:	0801711b 	.word	0x0801711b
 8017044:	6833      	ldr	r3, [r6, #0]
 8017046:	1d1a      	adds	r2, r3, #4
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	6032      	str	r2, [r6, #0]
 801704c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017050:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017054:	2301      	movs	r3, #1
 8017056:	e09d      	b.n	8017194 <_printf_i+0x1e8>
 8017058:	6833      	ldr	r3, [r6, #0]
 801705a:	6820      	ldr	r0, [r4, #0]
 801705c:	1d19      	adds	r1, r3, #4
 801705e:	6031      	str	r1, [r6, #0]
 8017060:	0606      	lsls	r6, r0, #24
 8017062:	d501      	bpl.n	8017068 <_printf_i+0xbc>
 8017064:	681d      	ldr	r5, [r3, #0]
 8017066:	e003      	b.n	8017070 <_printf_i+0xc4>
 8017068:	0645      	lsls	r5, r0, #25
 801706a:	d5fb      	bpl.n	8017064 <_printf_i+0xb8>
 801706c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017070:	2d00      	cmp	r5, #0
 8017072:	da03      	bge.n	801707c <_printf_i+0xd0>
 8017074:	232d      	movs	r3, #45	@ 0x2d
 8017076:	426d      	negs	r5, r5
 8017078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801707c:	4859      	ldr	r0, [pc, #356]	@ (80171e4 <_printf_i+0x238>)
 801707e:	230a      	movs	r3, #10
 8017080:	e011      	b.n	80170a6 <_printf_i+0xfa>
 8017082:	6821      	ldr	r1, [r4, #0]
 8017084:	6833      	ldr	r3, [r6, #0]
 8017086:	0608      	lsls	r0, r1, #24
 8017088:	f853 5b04 	ldr.w	r5, [r3], #4
 801708c:	d402      	bmi.n	8017094 <_printf_i+0xe8>
 801708e:	0649      	lsls	r1, r1, #25
 8017090:	bf48      	it	mi
 8017092:	b2ad      	uxthmi	r5, r5
 8017094:	2f6f      	cmp	r7, #111	@ 0x6f
 8017096:	4853      	ldr	r0, [pc, #332]	@ (80171e4 <_printf_i+0x238>)
 8017098:	6033      	str	r3, [r6, #0]
 801709a:	bf14      	ite	ne
 801709c:	230a      	movne	r3, #10
 801709e:	2308      	moveq	r3, #8
 80170a0:	2100      	movs	r1, #0
 80170a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80170a6:	6866      	ldr	r6, [r4, #4]
 80170a8:	60a6      	str	r6, [r4, #8]
 80170aa:	2e00      	cmp	r6, #0
 80170ac:	bfa2      	ittt	ge
 80170ae:	6821      	ldrge	r1, [r4, #0]
 80170b0:	f021 0104 	bicge.w	r1, r1, #4
 80170b4:	6021      	strge	r1, [r4, #0]
 80170b6:	b90d      	cbnz	r5, 80170bc <_printf_i+0x110>
 80170b8:	2e00      	cmp	r6, #0
 80170ba:	d04b      	beq.n	8017154 <_printf_i+0x1a8>
 80170bc:	4616      	mov	r6, r2
 80170be:	fbb5 f1f3 	udiv	r1, r5, r3
 80170c2:	fb03 5711 	mls	r7, r3, r1, r5
 80170c6:	5dc7      	ldrb	r7, [r0, r7]
 80170c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80170cc:	462f      	mov	r7, r5
 80170ce:	42bb      	cmp	r3, r7
 80170d0:	460d      	mov	r5, r1
 80170d2:	d9f4      	bls.n	80170be <_printf_i+0x112>
 80170d4:	2b08      	cmp	r3, #8
 80170d6:	d10b      	bne.n	80170f0 <_printf_i+0x144>
 80170d8:	6823      	ldr	r3, [r4, #0]
 80170da:	07df      	lsls	r7, r3, #31
 80170dc:	d508      	bpl.n	80170f0 <_printf_i+0x144>
 80170de:	6923      	ldr	r3, [r4, #16]
 80170e0:	6861      	ldr	r1, [r4, #4]
 80170e2:	4299      	cmp	r1, r3
 80170e4:	bfde      	ittt	le
 80170e6:	2330      	movle	r3, #48	@ 0x30
 80170e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80170ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80170f0:	1b92      	subs	r2, r2, r6
 80170f2:	6122      	str	r2, [r4, #16]
 80170f4:	f8cd a000 	str.w	sl, [sp]
 80170f8:	464b      	mov	r3, r9
 80170fa:	aa03      	add	r2, sp, #12
 80170fc:	4621      	mov	r1, r4
 80170fe:	4640      	mov	r0, r8
 8017100:	f7ff fee6 	bl	8016ed0 <_printf_common>
 8017104:	3001      	adds	r0, #1
 8017106:	d14a      	bne.n	801719e <_printf_i+0x1f2>
 8017108:	f04f 30ff 	mov.w	r0, #4294967295
 801710c:	b004      	add	sp, #16
 801710e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017112:	6823      	ldr	r3, [r4, #0]
 8017114:	f043 0320 	orr.w	r3, r3, #32
 8017118:	6023      	str	r3, [r4, #0]
 801711a:	4833      	ldr	r0, [pc, #204]	@ (80171e8 <_printf_i+0x23c>)
 801711c:	2778      	movs	r7, #120	@ 0x78
 801711e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8017122:	6823      	ldr	r3, [r4, #0]
 8017124:	6831      	ldr	r1, [r6, #0]
 8017126:	061f      	lsls	r7, r3, #24
 8017128:	f851 5b04 	ldr.w	r5, [r1], #4
 801712c:	d402      	bmi.n	8017134 <_printf_i+0x188>
 801712e:	065f      	lsls	r7, r3, #25
 8017130:	bf48      	it	mi
 8017132:	b2ad      	uxthmi	r5, r5
 8017134:	6031      	str	r1, [r6, #0]
 8017136:	07d9      	lsls	r1, r3, #31
 8017138:	bf44      	itt	mi
 801713a:	f043 0320 	orrmi.w	r3, r3, #32
 801713e:	6023      	strmi	r3, [r4, #0]
 8017140:	b11d      	cbz	r5, 801714a <_printf_i+0x19e>
 8017142:	2310      	movs	r3, #16
 8017144:	e7ac      	b.n	80170a0 <_printf_i+0xf4>
 8017146:	4827      	ldr	r0, [pc, #156]	@ (80171e4 <_printf_i+0x238>)
 8017148:	e7e9      	b.n	801711e <_printf_i+0x172>
 801714a:	6823      	ldr	r3, [r4, #0]
 801714c:	f023 0320 	bic.w	r3, r3, #32
 8017150:	6023      	str	r3, [r4, #0]
 8017152:	e7f6      	b.n	8017142 <_printf_i+0x196>
 8017154:	4616      	mov	r6, r2
 8017156:	e7bd      	b.n	80170d4 <_printf_i+0x128>
 8017158:	6833      	ldr	r3, [r6, #0]
 801715a:	6825      	ldr	r5, [r4, #0]
 801715c:	6961      	ldr	r1, [r4, #20]
 801715e:	1d18      	adds	r0, r3, #4
 8017160:	6030      	str	r0, [r6, #0]
 8017162:	062e      	lsls	r6, r5, #24
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	d501      	bpl.n	801716c <_printf_i+0x1c0>
 8017168:	6019      	str	r1, [r3, #0]
 801716a:	e002      	b.n	8017172 <_printf_i+0x1c6>
 801716c:	0668      	lsls	r0, r5, #25
 801716e:	d5fb      	bpl.n	8017168 <_printf_i+0x1bc>
 8017170:	8019      	strh	r1, [r3, #0]
 8017172:	2300      	movs	r3, #0
 8017174:	6123      	str	r3, [r4, #16]
 8017176:	4616      	mov	r6, r2
 8017178:	e7bc      	b.n	80170f4 <_printf_i+0x148>
 801717a:	6833      	ldr	r3, [r6, #0]
 801717c:	1d1a      	adds	r2, r3, #4
 801717e:	6032      	str	r2, [r6, #0]
 8017180:	681e      	ldr	r6, [r3, #0]
 8017182:	6862      	ldr	r2, [r4, #4]
 8017184:	2100      	movs	r1, #0
 8017186:	4630      	mov	r0, r6
 8017188:	f7e9 f802 	bl	8000190 <memchr>
 801718c:	b108      	cbz	r0, 8017192 <_printf_i+0x1e6>
 801718e:	1b80      	subs	r0, r0, r6
 8017190:	6060      	str	r0, [r4, #4]
 8017192:	6863      	ldr	r3, [r4, #4]
 8017194:	6123      	str	r3, [r4, #16]
 8017196:	2300      	movs	r3, #0
 8017198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801719c:	e7aa      	b.n	80170f4 <_printf_i+0x148>
 801719e:	6923      	ldr	r3, [r4, #16]
 80171a0:	4632      	mov	r2, r6
 80171a2:	4649      	mov	r1, r9
 80171a4:	4640      	mov	r0, r8
 80171a6:	47d0      	blx	sl
 80171a8:	3001      	adds	r0, #1
 80171aa:	d0ad      	beq.n	8017108 <_printf_i+0x15c>
 80171ac:	6823      	ldr	r3, [r4, #0]
 80171ae:	079b      	lsls	r3, r3, #30
 80171b0:	d413      	bmi.n	80171da <_printf_i+0x22e>
 80171b2:	68e0      	ldr	r0, [r4, #12]
 80171b4:	9b03      	ldr	r3, [sp, #12]
 80171b6:	4298      	cmp	r0, r3
 80171b8:	bfb8      	it	lt
 80171ba:	4618      	movlt	r0, r3
 80171bc:	e7a6      	b.n	801710c <_printf_i+0x160>
 80171be:	2301      	movs	r3, #1
 80171c0:	4632      	mov	r2, r6
 80171c2:	4649      	mov	r1, r9
 80171c4:	4640      	mov	r0, r8
 80171c6:	47d0      	blx	sl
 80171c8:	3001      	adds	r0, #1
 80171ca:	d09d      	beq.n	8017108 <_printf_i+0x15c>
 80171cc:	3501      	adds	r5, #1
 80171ce:	68e3      	ldr	r3, [r4, #12]
 80171d0:	9903      	ldr	r1, [sp, #12]
 80171d2:	1a5b      	subs	r3, r3, r1
 80171d4:	42ab      	cmp	r3, r5
 80171d6:	dcf2      	bgt.n	80171be <_printf_i+0x212>
 80171d8:	e7eb      	b.n	80171b2 <_printf_i+0x206>
 80171da:	2500      	movs	r5, #0
 80171dc:	f104 0619 	add.w	r6, r4, #25
 80171e0:	e7f5      	b.n	80171ce <_printf_i+0x222>
 80171e2:	bf00      	nop
 80171e4:	0801a30d 	.word	0x0801a30d
 80171e8:	0801a31e 	.word	0x0801a31e

080171ec <__sflush_r>:
 80171ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80171f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171f4:	0716      	lsls	r6, r2, #28
 80171f6:	4605      	mov	r5, r0
 80171f8:	460c      	mov	r4, r1
 80171fa:	d454      	bmi.n	80172a6 <__sflush_r+0xba>
 80171fc:	684b      	ldr	r3, [r1, #4]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	dc02      	bgt.n	8017208 <__sflush_r+0x1c>
 8017202:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017204:	2b00      	cmp	r3, #0
 8017206:	dd48      	ble.n	801729a <__sflush_r+0xae>
 8017208:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801720a:	2e00      	cmp	r6, #0
 801720c:	d045      	beq.n	801729a <__sflush_r+0xae>
 801720e:	2300      	movs	r3, #0
 8017210:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017214:	682f      	ldr	r7, [r5, #0]
 8017216:	6a21      	ldr	r1, [r4, #32]
 8017218:	602b      	str	r3, [r5, #0]
 801721a:	d030      	beq.n	801727e <__sflush_r+0x92>
 801721c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801721e:	89a3      	ldrh	r3, [r4, #12]
 8017220:	0759      	lsls	r1, r3, #29
 8017222:	d505      	bpl.n	8017230 <__sflush_r+0x44>
 8017224:	6863      	ldr	r3, [r4, #4]
 8017226:	1ad2      	subs	r2, r2, r3
 8017228:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801722a:	b10b      	cbz	r3, 8017230 <__sflush_r+0x44>
 801722c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801722e:	1ad2      	subs	r2, r2, r3
 8017230:	2300      	movs	r3, #0
 8017232:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017234:	6a21      	ldr	r1, [r4, #32]
 8017236:	4628      	mov	r0, r5
 8017238:	47b0      	blx	r6
 801723a:	1c43      	adds	r3, r0, #1
 801723c:	89a3      	ldrh	r3, [r4, #12]
 801723e:	d106      	bne.n	801724e <__sflush_r+0x62>
 8017240:	6829      	ldr	r1, [r5, #0]
 8017242:	291d      	cmp	r1, #29
 8017244:	d82b      	bhi.n	801729e <__sflush_r+0xb2>
 8017246:	4a2a      	ldr	r2, [pc, #168]	@ (80172f0 <__sflush_r+0x104>)
 8017248:	410a      	asrs	r2, r1
 801724a:	07d6      	lsls	r6, r2, #31
 801724c:	d427      	bmi.n	801729e <__sflush_r+0xb2>
 801724e:	2200      	movs	r2, #0
 8017250:	6062      	str	r2, [r4, #4]
 8017252:	04d9      	lsls	r1, r3, #19
 8017254:	6922      	ldr	r2, [r4, #16]
 8017256:	6022      	str	r2, [r4, #0]
 8017258:	d504      	bpl.n	8017264 <__sflush_r+0x78>
 801725a:	1c42      	adds	r2, r0, #1
 801725c:	d101      	bne.n	8017262 <__sflush_r+0x76>
 801725e:	682b      	ldr	r3, [r5, #0]
 8017260:	b903      	cbnz	r3, 8017264 <__sflush_r+0x78>
 8017262:	6560      	str	r0, [r4, #84]	@ 0x54
 8017264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017266:	602f      	str	r7, [r5, #0]
 8017268:	b1b9      	cbz	r1, 801729a <__sflush_r+0xae>
 801726a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801726e:	4299      	cmp	r1, r3
 8017270:	d002      	beq.n	8017278 <__sflush_r+0x8c>
 8017272:	4628      	mov	r0, r5
 8017274:	f7ff fa9a 	bl	80167ac <_free_r>
 8017278:	2300      	movs	r3, #0
 801727a:	6363      	str	r3, [r4, #52]	@ 0x34
 801727c:	e00d      	b.n	801729a <__sflush_r+0xae>
 801727e:	2301      	movs	r3, #1
 8017280:	4628      	mov	r0, r5
 8017282:	47b0      	blx	r6
 8017284:	4602      	mov	r2, r0
 8017286:	1c50      	adds	r0, r2, #1
 8017288:	d1c9      	bne.n	801721e <__sflush_r+0x32>
 801728a:	682b      	ldr	r3, [r5, #0]
 801728c:	2b00      	cmp	r3, #0
 801728e:	d0c6      	beq.n	801721e <__sflush_r+0x32>
 8017290:	2b1d      	cmp	r3, #29
 8017292:	d001      	beq.n	8017298 <__sflush_r+0xac>
 8017294:	2b16      	cmp	r3, #22
 8017296:	d11e      	bne.n	80172d6 <__sflush_r+0xea>
 8017298:	602f      	str	r7, [r5, #0]
 801729a:	2000      	movs	r0, #0
 801729c:	e022      	b.n	80172e4 <__sflush_r+0xf8>
 801729e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172a2:	b21b      	sxth	r3, r3
 80172a4:	e01b      	b.n	80172de <__sflush_r+0xf2>
 80172a6:	690f      	ldr	r7, [r1, #16]
 80172a8:	2f00      	cmp	r7, #0
 80172aa:	d0f6      	beq.n	801729a <__sflush_r+0xae>
 80172ac:	0793      	lsls	r3, r2, #30
 80172ae:	680e      	ldr	r6, [r1, #0]
 80172b0:	bf08      	it	eq
 80172b2:	694b      	ldreq	r3, [r1, #20]
 80172b4:	600f      	str	r7, [r1, #0]
 80172b6:	bf18      	it	ne
 80172b8:	2300      	movne	r3, #0
 80172ba:	eba6 0807 	sub.w	r8, r6, r7
 80172be:	608b      	str	r3, [r1, #8]
 80172c0:	f1b8 0f00 	cmp.w	r8, #0
 80172c4:	dde9      	ble.n	801729a <__sflush_r+0xae>
 80172c6:	6a21      	ldr	r1, [r4, #32]
 80172c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80172ca:	4643      	mov	r3, r8
 80172cc:	463a      	mov	r2, r7
 80172ce:	4628      	mov	r0, r5
 80172d0:	47b0      	blx	r6
 80172d2:	2800      	cmp	r0, #0
 80172d4:	dc08      	bgt.n	80172e8 <__sflush_r+0xfc>
 80172d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172de:	81a3      	strh	r3, [r4, #12]
 80172e0:	f04f 30ff 	mov.w	r0, #4294967295
 80172e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80172e8:	4407      	add	r7, r0
 80172ea:	eba8 0800 	sub.w	r8, r8, r0
 80172ee:	e7e7      	b.n	80172c0 <__sflush_r+0xd4>
 80172f0:	dfbffffe 	.word	0xdfbffffe

080172f4 <_fflush_r>:
 80172f4:	b538      	push	{r3, r4, r5, lr}
 80172f6:	690b      	ldr	r3, [r1, #16]
 80172f8:	4605      	mov	r5, r0
 80172fa:	460c      	mov	r4, r1
 80172fc:	b913      	cbnz	r3, 8017304 <_fflush_r+0x10>
 80172fe:	2500      	movs	r5, #0
 8017300:	4628      	mov	r0, r5
 8017302:	bd38      	pop	{r3, r4, r5, pc}
 8017304:	b118      	cbz	r0, 801730e <_fflush_r+0x1a>
 8017306:	6a03      	ldr	r3, [r0, #32]
 8017308:	b90b      	cbnz	r3, 801730e <_fflush_r+0x1a>
 801730a:	f7fe fff1 	bl	80162f0 <__sinit>
 801730e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017312:	2b00      	cmp	r3, #0
 8017314:	d0f3      	beq.n	80172fe <_fflush_r+0xa>
 8017316:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017318:	07d0      	lsls	r0, r2, #31
 801731a:	d404      	bmi.n	8017326 <_fflush_r+0x32>
 801731c:	0599      	lsls	r1, r3, #22
 801731e:	d402      	bmi.n	8017326 <_fflush_r+0x32>
 8017320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017322:	f7ff fa32 	bl	801678a <__retarget_lock_acquire_recursive>
 8017326:	4628      	mov	r0, r5
 8017328:	4621      	mov	r1, r4
 801732a:	f7ff ff5f 	bl	80171ec <__sflush_r>
 801732e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017330:	07da      	lsls	r2, r3, #31
 8017332:	4605      	mov	r5, r0
 8017334:	d4e4      	bmi.n	8017300 <_fflush_r+0xc>
 8017336:	89a3      	ldrh	r3, [r4, #12]
 8017338:	059b      	lsls	r3, r3, #22
 801733a:	d4e1      	bmi.n	8017300 <_fflush_r+0xc>
 801733c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801733e:	f7ff fa25 	bl	801678c <__retarget_lock_release_recursive>
 8017342:	e7dd      	b.n	8017300 <_fflush_r+0xc>

08017344 <__swhatbuf_r>:
 8017344:	b570      	push	{r4, r5, r6, lr}
 8017346:	460c      	mov	r4, r1
 8017348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801734c:	2900      	cmp	r1, #0
 801734e:	b096      	sub	sp, #88	@ 0x58
 8017350:	4615      	mov	r5, r2
 8017352:	461e      	mov	r6, r3
 8017354:	da0d      	bge.n	8017372 <__swhatbuf_r+0x2e>
 8017356:	89a3      	ldrh	r3, [r4, #12]
 8017358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801735c:	f04f 0100 	mov.w	r1, #0
 8017360:	bf14      	ite	ne
 8017362:	2340      	movne	r3, #64	@ 0x40
 8017364:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017368:	2000      	movs	r0, #0
 801736a:	6031      	str	r1, [r6, #0]
 801736c:	602b      	str	r3, [r5, #0]
 801736e:	b016      	add	sp, #88	@ 0x58
 8017370:	bd70      	pop	{r4, r5, r6, pc}
 8017372:	466a      	mov	r2, sp
 8017374:	f000 f8a4 	bl	80174c0 <_fstat_r>
 8017378:	2800      	cmp	r0, #0
 801737a:	dbec      	blt.n	8017356 <__swhatbuf_r+0x12>
 801737c:	9901      	ldr	r1, [sp, #4]
 801737e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017382:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017386:	4259      	negs	r1, r3
 8017388:	4159      	adcs	r1, r3
 801738a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801738e:	e7eb      	b.n	8017368 <__swhatbuf_r+0x24>

08017390 <__smakebuf_r>:
 8017390:	898b      	ldrh	r3, [r1, #12]
 8017392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017394:	079d      	lsls	r5, r3, #30
 8017396:	4606      	mov	r6, r0
 8017398:	460c      	mov	r4, r1
 801739a:	d507      	bpl.n	80173ac <__smakebuf_r+0x1c>
 801739c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80173a0:	6023      	str	r3, [r4, #0]
 80173a2:	6123      	str	r3, [r4, #16]
 80173a4:	2301      	movs	r3, #1
 80173a6:	6163      	str	r3, [r4, #20]
 80173a8:	b003      	add	sp, #12
 80173aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173ac:	ab01      	add	r3, sp, #4
 80173ae:	466a      	mov	r2, sp
 80173b0:	f7ff ffc8 	bl	8017344 <__swhatbuf_r>
 80173b4:	9f00      	ldr	r7, [sp, #0]
 80173b6:	4605      	mov	r5, r0
 80173b8:	4639      	mov	r1, r7
 80173ba:	4630      	mov	r0, r6
 80173bc:	f7ff fa62 	bl	8016884 <_malloc_r>
 80173c0:	b948      	cbnz	r0, 80173d6 <__smakebuf_r+0x46>
 80173c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80173c6:	059a      	lsls	r2, r3, #22
 80173c8:	d4ee      	bmi.n	80173a8 <__smakebuf_r+0x18>
 80173ca:	f023 0303 	bic.w	r3, r3, #3
 80173ce:	f043 0302 	orr.w	r3, r3, #2
 80173d2:	81a3      	strh	r3, [r4, #12]
 80173d4:	e7e2      	b.n	801739c <__smakebuf_r+0xc>
 80173d6:	89a3      	ldrh	r3, [r4, #12]
 80173d8:	6020      	str	r0, [r4, #0]
 80173da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80173de:	81a3      	strh	r3, [r4, #12]
 80173e0:	9b01      	ldr	r3, [sp, #4]
 80173e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80173e6:	b15b      	cbz	r3, 8017400 <__smakebuf_r+0x70>
 80173e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80173ec:	4630      	mov	r0, r6
 80173ee:	f000 f879 	bl	80174e4 <_isatty_r>
 80173f2:	b128      	cbz	r0, 8017400 <__smakebuf_r+0x70>
 80173f4:	89a3      	ldrh	r3, [r4, #12]
 80173f6:	f023 0303 	bic.w	r3, r3, #3
 80173fa:	f043 0301 	orr.w	r3, r3, #1
 80173fe:	81a3      	strh	r3, [r4, #12]
 8017400:	89a3      	ldrh	r3, [r4, #12]
 8017402:	431d      	orrs	r5, r3
 8017404:	81a5      	strh	r5, [r4, #12]
 8017406:	e7cf      	b.n	80173a8 <__smakebuf_r+0x18>

08017408 <_putc_r>:
 8017408:	b570      	push	{r4, r5, r6, lr}
 801740a:	460d      	mov	r5, r1
 801740c:	4614      	mov	r4, r2
 801740e:	4606      	mov	r6, r0
 8017410:	b118      	cbz	r0, 801741a <_putc_r+0x12>
 8017412:	6a03      	ldr	r3, [r0, #32]
 8017414:	b90b      	cbnz	r3, 801741a <_putc_r+0x12>
 8017416:	f7fe ff6b 	bl	80162f0 <__sinit>
 801741a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801741c:	07d8      	lsls	r0, r3, #31
 801741e:	d405      	bmi.n	801742c <_putc_r+0x24>
 8017420:	89a3      	ldrh	r3, [r4, #12]
 8017422:	0599      	lsls	r1, r3, #22
 8017424:	d402      	bmi.n	801742c <_putc_r+0x24>
 8017426:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017428:	f7ff f9af 	bl	801678a <__retarget_lock_acquire_recursive>
 801742c:	68a3      	ldr	r3, [r4, #8]
 801742e:	3b01      	subs	r3, #1
 8017430:	2b00      	cmp	r3, #0
 8017432:	60a3      	str	r3, [r4, #8]
 8017434:	da05      	bge.n	8017442 <_putc_r+0x3a>
 8017436:	69a2      	ldr	r2, [r4, #24]
 8017438:	4293      	cmp	r3, r2
 801743a:	db12      	blt.n	8017462 <_putc_r+0x5a>
 801743c:	b2eb      	uxtb	r3, r5
 801743e:	2b0a      	cmp	r3, #10
 8017440:	d00f      	beq.n	8017462 <_putc_r+0x5a>
 8017442:	6823      	ldr	r3, [r4, #0]
 8017444:	1c5a      	adds	r2, r3, #1
 8017446:	6022      	str	r2, [r4, #0]
 8017448:	701d      	strb	r5, [r3, #0]
 801744a:	b2ed      	uxtb	r5, r5
 801744c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801744e:	07da      	lsls	r2, r3, #31
 8017450:	d405      	bmi.n	801745e <_putc_r+0x56>
 8017452:	89a3      	ldrh	r3, [r4, #12]
 8017454:	059b      	lsls	r3, r3, #22
 8017456:	d402      	bmi.n	801745e <_putc_r+0x56>
 8017458:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801745a:	f7ff f997 	bl	801678c <__retarget_lock_release_recursive>
 801745e:	4628      	mov	r0, r5
 8017460:	bd70      	pop	{r4, r5, r6, pc}
 8017462:	4629      	mov	r1, r5
 8017464:	4622      	mov	r2, r4
 8017466:	4630      	mov	r0, r6
 8017468:	f7ff f86c 	bl	8016544 <__swbuf_r>
 801746c:	4605      	mov	r5, r0
 801746e:	e7ed      	b.n	801744c <_putc_r+0x44>

08017470 <memmove>:
 8017470:	4288      	cmp	r0, r1
 8017472:	b510      	push	{r4, lr}
 8017474:	eb01 0402 	add.w	r4, r1, r2
 8017478:	d902      	bls.n	8017480 <memmove+0x10>
 801747a:	4284      	cmp	r4, r0
 801747c:	4623      	mov	r3, r4
 801747e:	d807      	bhi.n	8017490 <memmove+0x20>
 8017480:	1e43      	subs	r3, r0, #1
 8017482:	42a1      	cmp	r1, r4
 8017484:	d008      	beq.n	8017498 <memmove+0x28>
 8017486:	f811 2b01 	ldrb.w	r2, [r1], #1
 801748a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801748e:	e7f8      	b.n	8017482 <memmove+0x12>
 8017490:	4402      	add	r2, r0
 8017492:	4601      	mov	r1, r0
 8017494:	428a      	cmp	r2, r1
 8017496:	d100      	bne.n	801749a <memmove+0x2a>
 8017498:	bd10      	pop	{r4, pc}
 801749a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801749e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80174a2:	e7f7      	b.n	8017494 <memmove+0x24>

080174a4 <strchr>:
 80174a4:	b2c9      	uxtb	r1, r1
 80174a6:	4603      	mov	r3, r0
 80174a8:	4618      	mov	r0, r3
 80174aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174ae:	b112      	cbz	r2, 80174b6 <strchr+0x12>
 80174b0:	428a      	cmp	r2, r1
 80174b2:	d1f9      	bne.n	80174a8 <strchr+0x4>
 80174b4:	4770      	bx	lr
 80174b6:	2900      	cmp	r1, #0
 80174b8:	bf18      	it	ne
 80174ba:	2000      	movne	r0, #0
 80174bc:	4770      	bx	lr
	...

080174c0 <_fstat_r>:
 80174c0:	b538      	push	{r3, r4, r5, lr}
 80174c2:	4d07      	ldr	r5, [pc, #28]	@ (80174e0 <_fstat_r+0x20>)
 80174c4:	2300      	movs	r3, #0
 80174c6:	4604      	mov	r4, r0
 80174c8:	4608      	mov	r0, r1
 80174ca:	4611      	mov	r1, r2
 80174cc:	602b      	str	r3, [r5, #0]
 80174ce:	f7ed fb0a 	bl	8004ae6 <_fstat>
 80174d2:	1c43      	adds	r3, r0, #1
 80174d4:	d102      	bne.n	80174dc <_fstat_r+0x1c>
 80174d6:	682b      	ldr	r3, [r5, #0]
 80174d8:	b103      	cbz	r3, 80174dc <_fstat_r+0x1c>
 80174da:	6023      	str	r3, [r4, #0]
 80174dc:	bd38      	pop	{r3, r4, r5, pc}
 80174de:	bf00      	nop
 80174e0:	20003640 	.word	0x20003640

080174e4 <_isatty_r>:
 80174e4:	b538      	push	{r3, r4, r5, lr}
 80174e6:	4d06      	ldr	r5, [pc, #24]	@ (8017500 <_isatty_r+0x1c>)
 80174e8:	2300      	movs	r3, #0
 80174ea:	4604      	mov	r4, r0
 80174ec:	4608      	mov	r0, r1
 80174ee:	602b      	str	r3, [r5, #0]
 80174f0:	f7ed fb09 	bl	8004b06 <_isatty>
 80174f4:	1c43      	adds	r3, r0, #1
 80174f6:	d102      	bne.n	80174fe <_isatty_r+0x1a>
 80174f8:	682b      	ldr	r3, [r5, #0]
 80174fa:	b103      	cbz	r3, 80174fe <_isatty_r+0x1a>
 80174fc:	6023      	str	r3, [r4, #0]
 80174fe:	bd38      	pop	{r3, r4, r5, pc}
 8017500:	20003640 	.word	0x20003640

08017504 <_sbrk_r>:
 8017504:	b538      	push	{r3, r4, r5, lr}
 8017506:	4d06      	ldr	r5, [pc, #24]	@ (8017520 <_sbrk_r+0x1c>)
 8017508:	2300      	movs	r3, #0
 801750a:	4604      	mov	r4, r0
 801750c:	4608      	mov	r0, r1
 801750e:	602b      	str	r3, [r5, #0]
 8017510:	f7ed fb12 	bl	8004b38 <_sbrk>
 8017514:	1c43      	adds	r3, r0, #1
 8017516:	d102      	bne.n	801751e <_sbrk_r+0x1a>
 8017518:	682b      	ldr	r3, [r5, #0]
 801751a:	b103      	cbz	r3, 801751e <_sbrk_r+0x1a>
 801751c:	6023      	str	r3, [r4, #0]
 801751e:	bd38      	pop	{r3, r4, r5, pc}
 8017520:	20003640 	.word	0x20003640

08017524 <_realloc_r>:
 8017524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017528:	4680      	mov	r8, r0
 801752a:	4615      	mov	r5, r2
 801752c:	460c      	mov	r4, r1
 801752e:	b921      	cbnz	r1, 801753a <_realloc_r+0x16>
 8017530:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017534:	4611      	mov	r1, r2
 8017536:	f7ff b9a5 	b.w	8016884 <_malloc_r>
 801753a:	b92a      	cbnz	r2, 8017548 <_realloc_r+0x24>
 801753c:	f7ff f936 	bl	80167ac <_free_r>
 8017540:	2400      	movs	r4, #0
 8017542:	4620      	mov	r0, r4
 8017544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017548:	f000 f81a 	bl	8017580 <_malloc_usable_size_r>
 801754c:	4285      	cmp	r5, r0
 801754e:	4606      	mov	r6, r0
 8017550:	d802      	bhi.n	8017558 <_realloc_r+0x34>
 8017552:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017556:	d8f4      	bhi.n	8017542 <_realloc_r+0x1e>
 8017558:	4629      	mov	r1, r5
 801755a:	4640      	mov	r0, r8
 801755c:	f7ff f992 	bl	8016884 <_malloc_r>
 8017560:	4607      	mov	r7, r0
 8017562:	2800      	cmp	r0, #0
 8017564:	d0ec      	beq.n	8017540 <_realloc_r+0x1c>
 8017566:	42b5      	cmp	r5, r6
 8017568:	462a      	mov	r2, r5
 801756a:	4621      	mov	r1, r4
 801756c:	bf28      	it	cs
 801756e:	4632      	movcs	r2, r6
 8017570:	f7ff f90d 	bl	801678e <memcpy>
 8017574:	4621      	mov	r1, r4
 8017576:	4640      	mov	r0, r8
 8017578:	f7ff f918 	bl	80167ac <_free_r>
 801757c:	463c      	mov	r4, r7
 801757e:	e7e0      	b.n	8017542 <_realloc_r+0x1e>

08017580 <_malloc_usable_size_r>:
 8017580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017584:	1f18      	subs	r0, r3, #4
 8017586:	2b00      	cmp	r3, #0
 8017588:	bfbc      	itt	lt
 801758a:	580b      	ldrlt	r3, [r1, r0]
 801758c:	18c0      	addlt	r0, r0, r3
 801758e:	4770      	bx	lr

08017590 <cos>:
 8017590:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017592:	ec53 2b10 	vmov	r2, r3, d0
 8017596:	4826      	ldr	r0, [pc, #152]	@ (8017630 <cos+0xa0>)
 8017598:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801759c:	4281      	cmp	r1, r0
 801759e:	d806      	bhi.n	80175ae <cos+0x1e>
 80175a0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8017628 <cos+0x98>
 80175a4:	b005      	add	sp, #20
 80175a6:	f85d eb04 	ldr.w	lr, [sp], #4
 80175aa:	f000 b845 	b.w	8017638 <__kernel_cos>
 80175ae:	4821      	ldr	r0, [pc, #132]	@ (8017634 <cos+0xa4>)
 80175b0:	4281      	cmp	r1, r0
 80175b2:	d908      	bls.n	80175c6 <cos+0x36>
 80175b4:	4610      	mov	r0, r2
 80175b6:	4619      	mov	r1, r3
 80175b8:	f7e8 fe3e 	bl	8000238 <__aeabi_dsub>
 80175bc:	ec41 0b10 	vmov	d0, r0, r1
 80175c0:	b005      	add	sp, #20
 80175c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80175c6:	4668      	mov	r0, sp
 80175c8:	f000 f9ba 	bl	8017940 <__ieee754_rem_pio2>
 80175cc:	f000 0003 	and.w	r0, r0, #3
 80175d0:	2801      	cmp	r0, #1
 80175d2:	d00b      	beq.n	80175ec <cos+0x5c>
 80175d4:	2802      	cmp	r0, #2
 80175d6:	d015      	beq.n	8017604 <cos+0x74>
 80175d8:	b9d8      	cbnz	r0, 8017612 <cos+0x82>
 80175da:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175de:	ed9d 0b00 	vldr	d0, [sp]
 80175e2:	f000 f829 	bl	8017638 <__kernel_cos>
 80175e6:	ec51 0b10 	vmov	r0, r1, d0
 80175ea:	e7e7      	b.n	80175bc <cos+0x2c>
 80175ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80175f0:	ed9d 0b00 	vldr	d0, [sp]
 80175f4:	f000 f8e8 	bl	80177c8 <__kernel_sin>
 80175f8:	ec53 2b10 	vmov	r2, r3, d0
 80175fc:	4610      	mov	r0, r2
 80175fe:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8017602:	e7db      	b.n	80175bc <cos+0x2c>
 8017604:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017608:	ed9d 0b00 	vldr	d0, [sp]
 801760c:	f000 f814 	bl	8017638 <__kernel_cos>
 8017610:	e7f2      	b.n	80175f8 <cos+0x68>
 8017612:	ed9d 1b02 	vldr	d1, [sp, #8]
 8017616:	ed9d 0b00 	vldr	d0, [sp]
 801761a:	2001      	movs	r0, #1
 801761c:	f000 f8d4 	bl	80177c8 <__kernel_sin>
 8017620:	e7e1      	b.n	80175e6 <cos+0x56>
 8017622:	bf00      	nop
 8017624:	f3af 8000 	nop.w
	...
 8017630:	3fe921fb 	.word	0x3fe921fb
 8017634:	7fefffff 	.word	0x7fefffff

08017638 <__kernel_cos>:
 8017638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801763c:	ec57 6b10 	vmov	r6, r7, d0
 8017640:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017644:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8017648:	ed8d 1b00 	vstr	d1, [sp]
 801764c:	d206      	bcs.n	801765c <__kernel_cos+0x24>
 801764e:	4630      	mov	r0, r6
 8017650:	4639      	mov	r1, r7
 8017652:	f7e9 fa43 	bl	8000adc <__aeabi_d2iz>
 8017656:	2800      	cmp	r0, #0
 8017658:	f000 8088 	beq.w	801776c <__kernel_cos+0x134>
 801765c:	4632      	mov	r2, r6
 801765e:	463b      	mov	r3, r7
 8017660:	4630      	mov	r0, r6
 8017662:	4639      	mov	r1, r7
 8017664:	f7e8 ffa0 	bl	80005a8 <__aeabi_dmul>
 8017668:	4b51      	ldr	r3, [pc, #324]	@ (80177b0 <__kernel_cos+0x178>)
 801766a:	2200      	movs	r2, #0
 801766c:	4604      	mov	r4, r0
 801766e:	460d      	mov	r5, r1
 8017670:	f7e8 ff9a 	bl	80005a8 <__aeabi_dmul>
 8017674:	a340      	add	r3, pc, #256	@ (adr r3, 8017778 <__kernel_cos+0x140>)
 8017676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801767a:	4682      	mov	sl, r0
 801767c:	468b      	mov	fp, r1
 801767e:	4620      	mov	r0, r4
 8017680:	4629      	mov	r1, r5
 8017682:	f7e8 ff91 	bl	80005a8 <__aeabi_dmul>
 8017686:	a33e      	add	r3, pc, #248	@ (adr r3, 8017780 <__kernel_cos+0x148>)
 8017688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801768c:	f7e8 fdd6 	bl	800023c <__adddf3>
 8017690:	4622      	mov	r2, r4
 8017692:	462b      	mov	r3, r5
 8017694:	f7e8 ff88 	bl	80005a8 <__aeabi_dmul>
 8017698:	a33b      	add	r3, pc, #236	@ (adr r3, 8017788 <__kernel_cos+0x150>)
 801769a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801769e:	f7e8 fdcb 	bl	8000238 <__aeabi_dsub>
 80176a2:	4622      	mov	r2, r4
 80176a4:	462b      	mov	r3, r5
 80176a6:	f7e8 ff7f 	bl	80005a8 <__aeabi_dmul>
 80176aa:	a339      	add	r3, pc, #228	@ (adr r3, 8017790 <__kernel_cos+0x158>)
 80176ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b0:	f7e8 fdc4 	bl	800023c <__adddf3>
 80176b4:	4622      	mov	r2, r4
 80176b6:	462b      	mov	r3, r5
 80176b8:	f7e8 ff76 	bl	80005a8 <__aeabi_dmul>
 80176bc:	a336      	add	r3, pc, #216	@ (adr r3, 8017798 <__kernel_cos+0x160>)
 80176be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176c2:	f7e8 fdb9 	bl	8000238 <__aeabi_dsub>
 80176c6:	4622      	mov	r2, r4
 80176c8:	462b      	mov	r3, r5
 80176ca:	f7e8 ff6d 	bl	80005a8 <__aeabi_dmul>
 80176ce:	a334      	add	r3, pc, #208	@ (adr r3, 80177a0 <__kernel_cos+0x168>)
 80176d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176d4:	f7e8 fdb2 	bl	800023c <__adddf3>
 80176d8:	4622      	mov	r2, r4
 80176da:	462b      	mov	r3, r5
 80176dc:	f7e8 ff64 	bl	80005a8 <__aeabi_dmul>
 80176e0:	4622      	mov	r2, r4
 80176e2:	462b      	mov	r3, r5
 80176e4:	f7e8 ff60 	bl	80005a8 <__aeabi_dmul>
 80176e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176ec:	4604      	mov	r4, r0
 80176ee:	460d      	mov	r5, r1
 80176f0:	4630      	mov	r0, r6
 80176f2:	4639      	mov	r1, r7
 80176f4:	f7e8 ff58 	bl	80005a8 <__aeabi_dmul>
 80176f8:	460b      	mov	r3, r1
 80176fa:	4602      	mov	r2, r0
 80176fc:	4629      	mov	r1, r5
 80176fe:	4620      	mov	r0, r4
 8017700:	f7e8 fd9a 	bl	8000238 <__aeabi_dsub>
 8017704:	4b2b      	ldr	r3, [pc, #172]	@ (80177b4 <__kernel_cos+0x17c>)
 8017706:	4598      	cmp	r8, r3
 8017708:	4606      	mov	r6, r0
 801770a:	460f      	mov	r7, r1
 801770c:	d810      	bhi.n	8017730 <__kernel_cos+0xf8>
 801770e:	4602      	mov	r2, r0
 8017710:	460b      	mov	r3, r1
 8017712:	4650      	mov	r0, sl
 8017714:	4659      	mov	r1, fp
 8017716:	f7e8 fd8f 	bl	8000238 <__aeabi_dsub>
 801771a:	460b      	mov	r3, r1
 801771c:	4926      	ldr	r1, [pc, #152]	@ (80177b8 <__kernel_cos+0x180>)
 801771e:	4602      	mov	r2, r0
 8017720:	2000      	movs	r0, #0
 8017722:	f7e8 fd89 	bl	8000238 <__aeabi_dsub>
 8017726:	ec41 0b10 	vmov	d0, r0, r1
 801772a:	b003      	add	sp, #12
 801772c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017730:	4b22      	ldr	r3, [pc, #136]	@ (80177bc <__kernel_cos+0x184>)
 8017732:	4921      	ldr	r1, [pc, #132]	@ (80177b8 <__kernel_cos+0x180>)
 8017734:	4598      	cmp	r8, r3
 8017736:	bf8c      	ite	hi
 8017738:	4d21      	ldrhi	r5, [pc, #132]	@ (80177c0 <__kernel_cos+0x188>)
 801773a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 801773e:	2400      	movs	r4, #0
 8017740:	4622      	mov	r2, r4
 8017742:	462b      	mov	r3, r5
 8017744:	2000      	movs	r0, #0
 8017746:	f7e8 fd77 	bl	8000238 <__aeabi_dsub>
 801774a:	4622      	mov	r2, r4
 801774c:	4680      	mov	r8, r0
 801774e:	4689      	mov	r9, r1
 8017750:	462b      	mov	r3, r5
 8017752:	4650      	mov	r0, sl
 8017754:	4659      	mov	r1, fp
 8017756:	f7e8 fd6f 	bl	8000238 <__aeabi_dsub>
 801775a:	4632      	mov	r2, r6
 801775c:	463b      	mov	r3, r7
 801775e:	f7e8 fd6b 	bl	8000238 <__aeabi_dsub>
 8017762:	4602      	mov	r2, r0
 8017764:	460b      	mov	r3, r1
 8017766:	4640      	mov	r0, r8
 8017768:	4649      	mov	r1, r9
 801776a:	e7da      	b.n	8017722 <__kernel_cos+0xea>
 801776c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80177a8 <__kernel_cos+0x170>
 8017770:	e7db      	b.n	801772a <__kernel_cos+0xf2>
 8017772:	bf00      	nop
 8017774:	f3af 8000 	nop.w
 8017778:	be8838d4 	.word	0xbe8838d4
 801777c:	bda8fae9 	.word	0xbda8fae9
 8017780:	bdb4b1c4 	.word	0xbdb4b1c4
 8017784:	3e21ee9e 	.word	0x3e21ee9e
 8017788:	809c52ad 	.word	0x809c52ad
 801778c:	3e927e4f 	.word	0x3e927e4f
 8017790:	19cb1590 	.word	0x19cb1590
 8017794:	3efa01a0 	.word	0x3efa01a0
 8017798:	16c15177 	.word	0x16c15177
 801779c:	3f56c16c 	.word	0x3f56c16c
 80177a0:	5555554c 	.word	0x5555554c
 80177a4:	3fa55555 	.word	0x3fa55555
 80177a8:	00000000 	.word	0x00000000
 80177ac:	3ff00000 	.word	0x3ff00000
 80177b0:	3fe00000 	.word	0x3fe00000
 80177b4:	3fd33332 	.word	0x3fd33332
 80177b8:	3ff00000 	.word	0x3ff00000
 80177bc:	3fe90000 	.word	0x3fe90000
 80177c0:	3fd20000 	.word	0x3fd20000
 80177c4:	00000000 	.word	0x00000000

080177c8 <__kernel_sin>:
 80177c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177cc:	ec55 4b10 	vmov	r4, r5, d0
 80177d0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80177d4:	b085      	sub	sp, #20
 80177d6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 80177da:	ed8d 1b02 	vstr	d1, [sp, #8]
 80177de:	4680      	mov	r8, r0
 80177e0:	d205      	bcs.n	80177ee <__kernel_sin+0x26>
 80177e2:	4620      	mov	r0, r4
 80177e4:	4629      	mov	r1, r5
 80177e6:	f7e9 f979 	bl	8000adc <__aeabi_d2iz>
 80177ea:	2800      	cmp	r0, #0
 80177ec:	d052      	beq.n	8017894 <__kernel_sin+0xcc>
 80177ee:	4622      	mov	r2, r4
 80177f0:	462b      	mov	r3, r5
 80177f2:	4620      	mov	r0, r4
 80177f4:	4629      	mov	r1, r5
 80177f6:	f7e8 fed7 	bl	80005a8 <__aeabi_dmul>
 80177fa:	4682      	mov	sl, r0
 80177fc:	468b      	mov	fp, r1
 80177fe:	4602      	mov	r2, r0
 8017800:	460b      	mov	r3, r1
 8017802:	4620      	mov	r0, r4
 8017804:	4629      	mov	r1, r5
 8017806:	f7e8 fecf 	bl	80005a8 <__aeabi_dmul>
 801780a:	a342      	add	r3, pc, #264	@ (adr r3, 8017914 <__kernel_sin+0x14c>)
 801780c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017810:	e9cd 0100 	strd	r0, r1, [sp]
 8017814:	4650      	mov	r0, sl
 8017816:	4659      	mov	r1, fp
 8017818:	f7e8 fec6 	bl	80005a8 <__aeabi_dmul>
 801781c:	a33f      	add	r3, pc, #252	@ (adr r3, 801791c <__kernel_sin+0x154>)
 801781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017822:	f7e8 fd09 	bl	8000238 <__aeabi_dsub>
 8017826:	4652      	mov	r2, sl
 8017828:	465b      	mov	r3, fp
 801782a:	f7e8 febd 	bl	80005a8 <__aeabi_dmul>
 801782e:	a33d      	add	r3, pc, #244	@ (adr r3, 8017924 <__kernel_sin+0x15c>)
 8017830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017834:	f7e8 fd02 	bl	800023c <__adddf3>
 8017838:	4652      	mov	r2, sl
 801783a:	465b      	mov	r3, fp
 801783c:	f7e8 feb4 	bl	80005a8 <__aeabi_dmul>
 8017840:	a33a      	add	r3, pc, #232	@ (adr r3, 801792c <__kernel_sin+0x164>)
 8017842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017846:	f7e8 fcf7 	bl	8000238 <__aeabi_dsub>
 801784a:	4652      	mov	r2, sl
 801784c:	465b      	mov	r3, fp
 801784e:	f7e8 feab 	bl	80005a8 <__aeabi_dmul>
 8017852:	a338      	add	r3, pc, #224	@ (adr r3, 8017934 <__kernel_sin+0x16c>)
 8017854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017858:	f7e8 fcf0 	bl	800023c <__adddf3>
 801785c:	4606      	mov	r6, r0
 801785e:	460f      	mov	r7, r1
 8017860:	f1b8 0f00 	cmp.w	r8, #0
 8017864:	d11b      	bne.n	801789e <__kernel_sin+0xd6>
 8017866:	4602      	mov	r2, r0
 8017868:	460b      	mov	r3, r1
 801786a:	4650      	mov	r0, sl
 801786c:	4659      	mov	r1, fp
 801786e:	f7e8 fe9b 	bl	80005a8 <__aeabi_dmul>
 8017872:	a325      	add	r3, pc, #148	@ (adr r3, 8017908 <__kernel_sin+0x140>)
 8017874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017878:	f7e8 fcde 	bl	8000238 <__aeabi_dsub>
 801787c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017880:	f7e8 fe92 	bl	80005a8 <__aeabi_dmul>
 8017884:	4602      	mov	r2, r0
 8017886:	460b      	mov	r3, r1
 8017888:	4620      	mov	r0, r4
 801788a:	4629      	mov	r1, r5
 801788c:	f7e8 fcd6 	bl	800023c <__adddf3>
 8017890:	4604      	mov	r4, r0
 8017892:	460d      	mov	r5, r1
 8017894:	ec45 4b10 	vmov	d0, r4, r5
 8017898:	b005      	add	sp, #20
 801789a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801789e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80178a2:	4b1b      	ldr	r3, [pc, #108]	@ (8017910 <__kernel_sin+0x148>)
 80178a4:	2200      	movs	r2, #0
 80178a6:	f7e8 fe7f 	bl	80005a8 <__aeabi_dmul>
 80178aa:	4632      	mov	r2, r6
 80178ac:	4680      	mov	r8, r0
 80178ae:	4689      	mov	r9, r1
 80178b0:	463b      	mov	r3, r7
 80178b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178b6:	f7e8 fe77 	bl	80005a8 <__aeabi_dmul>
 80178ba:	4602      	mov	r2, r0
 80178bc:	460b      	mov	r3, r1
 80178be:	4640      	mov	r0, r8
 80178c0:	4649      	mov	r1, r9
 80178c2:	f7e8 fcb9 	bl	8000238 <__aeabi_dsub>
 80178c6:	4652      	mov	r2, sl
 80178c8:	465b      	mov	r3, fp
 80178ca:	f7e8 fe6d 	bl	80005a8 <__aeabi_dmul>
 80178ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80178d2:	f7e8 fcb1 	bl	8000238 <__aeabi_dsub>
 80178d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8017908 <__kernel_sin+0x140>)
 80178d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178dc:	4606      	mov	r6, r0
 80178de:	460f      	mov	r7, r1
 80178e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178e4:	f7e8 fe60 	bl	80005a8 <__aeabi_dmul>
 80178e8:	4602      	mov	r2, r0
 80178ea:	460b      	mov	r3, r1
 80178ec:	4630      	mov	r0, r6
 80178ee:	4639      	mov	r1, r7
 80178f0:	f7e8 fca4 	bl	800023c <__adddf3>
 80178f4:	4602      	mov	r2, r0
 80178f6:	460b      	mov	r3, r1
 80178f8:	4620      	mov	r0, r4
 80178fa:	4629      	mov	r1, r5
 80178fc:	f7e8 fc9c 	bl	8000238 <__aeabi_dsub>
 8017900:	e7c6      	b.n	8017890 <__kernel_sin+0xc8>
 8017902:	bf00      	nop
 8017904:	f3af 8000 	nop.w
 8017908:	55555549 	.word	0x55555549
 801790c:	3fc55555 	.word	0x3fc55555
 8017910:	3fe00000 	.word	0x3fe00000
 8017914:	5acfd57c 	.word	0x5acfd57c
 8017918:	3de5d93a 	.word	0x3de5d93a
 801791c:	8a2b9ceb 	.word	0x8a2b9ceb
 8017920:	3e5ae5e6 	.word	0x3e5ae5e6
 8017924:	57b1fe7d 	.word	0x57b1fe7d
 8017928:	3ec71de3 	.word	0x3ec71de3
 801792c:	19c161d5 	.word	0x19c161d5
 8017930:	3f2a01a0 	.word	0x3f2a01a0
 8017934:	1110f8a6 	.word	0x1110f8a6
 8017938:	3f811111 	.word	0x3f811111
 801793c:	00000000 	.word	0x00000000

08017940 <__ieee754_rem_pio2>:
 8017940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017944:	ec57 6b10 	vmov	r6, r7, d0
 8017948:	4bc5      	ldr	r3, [pc, #788]	@ (8017c60 <__ieee754_rem_pio2+0x320>)
 801794a:	b08d      	sub	sp, #52	@ 0x34
 801794c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8017950:	4598      	cmp	r8, r3
 8017952:	4604      	mov	r4, r0
 8017954:	9704      	str	r7, [sp, #16]
 8017956:	d807      	bhi.n	8017968 <__ieee754_rem_pio2+0x28>
 8017958:	2200      	movs	r2, #0
 801795a:	2300      	movs	r3, #0
 801795c:	ed80 0b00 	vstr	d0, [r0]
 8017960:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017964:	2500      	movs	r5, #0
 8017966:	e028      	b.n	80179ba <__ieee754_rem_pio2+0x7a>
 8017968:	4bbe      	ldr	r3, [pc, #760]	@ (8017c64 <__ieee754_rem_pio2+0x324>)
 801796a:	4598      	cmp	r8, r3
 801796c:	d878      	bhi.n	8017a60 <__ieee754_rem_pio2+0x120>
 801796e:	9b04      	ldr	r3, [sp, #16]
 8017970:	4dbd      	ldr	r5, [pc, #756]	@ (8017c68 <__ieee754_rem_pio2+0x328>)
 8017972:	2b00      	cmp	r3, #0
 8017974:	4630      	mov	r0, r6
 8017976:	a3ac      	add	r3, pc, #688	@ (adr r3, 8017c28 <__ieee754_rem_pio2+0x2e8>)
 8017978:	e9d3 2300 	ldrd	r2, r3, [r3]
 801797c:	4639      	mov	r1, r7
 801797e:	dd38      	ble.n	80179f2 <__ieee754_rem_pio2+0xb2>
 8017980:	f7e8 fc5a 	bl	8000238 <__aeabi_dsub>
 8017984:	45a8      	cmp	r8, r5
 8017986:	4606      	mov	r6, r0
 8017988:	460f      	mov	r7, r1
 801798a:	d01a      	beq.n	80179c2 <__ieee754_rem_pio2+0x82>
 801798c:	a3a8      	add	r3, pc, #672	@ (adr r3, 8017c30 <__ieee754_rem_pio2+0x2f0>)
 801798e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017992:	f7e8 fc51 	bl	8000238 <__aeabi_dsub>
 8017996:	4602      	mov	r2, r0
 8017998:	460b      	mov	r3, r1
 801799a:	4680      	mov	r8, r0
 801799c:	4689      	mov	r9, r1
 801799e:	4630      	mov	r0, r6
 80179a0:	4639      	mov	r1, r7
 80179a2:	f7e8 fc49 	bl	8000238 <__aeabi_dsub>
 80179a6:	a3a2      	add	r3, pc, #648	@ (adr r3, 8017c30 <__ieee754_rem_pio2+0x2f0>)
 80179a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ac:	f7e8 fc44 	bl	8000238 <__aeabi_dsub>
 80179b0:	e9c4 8900 	strd	r8, r9, [r4]
 80179b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80179b8:	2501      	movs	r5, #1
 80179ba:	4628      	mov	r0, r5
 80179bc:	b00d      	add	sp, #52	@ 0x34
 80179be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179c2:	a39d      	add	r3, pc, #628	@ (adr r3, 8017c38 <__ieee754_rem_pio2+0x2f8>)
 80179c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c8:	f7e8 fc36 	bl	8000238 <__aeabi_dsub>
 80179cc:	a39c      	add	r3, pc, #624	@ (adr r3, 8017c40 <__ieee754_rem_pio2+0x300>)
 80179ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179d2:	4606      	mov	r6, r0
 80179d4:	460f      	mov	r7, r1
 80179d6:	f7e8 fc2f 	bl	8000238 <__aeabi_dsub>
 80179da:	4602      	mov	r2, r0
 80179dc:	460b      	mov	r3, r1
 80179de:	4680      	mov	r8, r0
 80179e0:	4689      	mov	r9, r1
 80179e2:	4630      	mov	r0, r6
 80179e4:	4639      	mov	r1, r7
 80179e6:	f7e8 fc27 	bl	8000238 <__aeabi_dsub>
 80179ea:	a395      	add	r3, pc, #596	@ (adr r3, 8017c40 <__ieee754_rem_pio2+0x300>)
 80179ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179f0:	e7dc      	b.n	80179ac <__ieee754_rem_pio2+0x6c>
 80179f2:	f7e8 fc23 	bl	800023c <__adddf3>
 80179f6:	45a8      	cmp	r8, r5
 80179f8:	4606      	mov	r6, r0
 80179fa:	460f      	mov	r7, r1
 80179fc:	d018      	beq.n	8017a30 <__ieee754_rem_pio2+0xf0>
 80179fe:	a38c      	add	r3, pc, #560	@ (adr r3, 8017c30 <__ieee754_rem_pio2+0x2f0>)
 8017a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a04:	f7e8 fc1a 	bl	800023c <__adddf3>
 8017a08:	4602      	mov	r2, r0
 8017a0a:	460b      	mov	r3, r1
 8017a0c:	4680      	mov	r8, r0
 8017a0e:	4689      	mov	r9, r1
 8017a10:	4630      	mov	r0, r6
 8017a12:	4639      	mov	r1, r7
 8017a14:	f7e8 fc10 	bl	8000238 <__aeabi_dsub>
 8017a18:	a385      	add	r3, pc, #532	@ (adr r3, 8017c30 <__ieee754_rem_pio2+0x2f0>)
 8017a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a1e:	f7e8 fc0d 	bl	800023c <__adddf3>
 8017a22:	f04f 35ff 	mov.w	r5, #4294967295
 8017a26:	e9c4 8900 	strd	r8, r9, [r4]
 8017a2a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017a2e:	e7c4      	b.n	80179ba <__ieee754_rem_pio2+0x7a>
 8017a30:	a381      	add	r3, pc, #516	@ (adr r3, 8017c38 <__ieee754_rem_pio2+0x2f8>)
 8017a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a36:	f7e8 fc01 	bl	800023c <__adddf3>
 8017a3a:	a381      	add	r3, pc, #516	@ (adr r3, 8017c40 <__ieee754_rem_pio2+0x300>)
 8017a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a40:	4606      	mov	r6, r0
 8017a42:	460f      	mov	r7, r1
 8017a44:	f7e8 fbfa 	bl	800023c <__adddf3>
 8017a48:	4602      	mov	r2, r0
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	4680      	mov	r8, r0
 8017a4e:	4689      	mov	r9, r1
 8017a50:	4630      	mov	r0, r6
 8017a52:	4639      	mov	r1, r7
 8017a54:	f7e8 fbf0 	bl	8000238 <__aeabi_dsub>
 8017a58:	a379      	add	r3, pc, #484	@ (adr r3, 8017c40 <__ieee754_rem_pio2+0x300>)
 8017a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a5e:	e7de      	b.n	8017a1e <__ieee754_rem_pio2+0xde>
 8017a60:	4b82      	ldr	r3, [pc, #520]	@ (8017c6c <__ieee754_rem_pio2+0x32c>)
 8017a62:	4598      	cmp	r8, r3
 8017a64:	f200 80d1 	bhi.w	8017c0a <__ieee754_rem_pio2+0x2ca>
 8017a68:	f000 f966 	bl	8017d38 <fabs>
 8017a6c:	ec57 6b10 	vmov	r6, r7, d0
 8017a70:	a375      	add	r3, pc, #468	@ (adr r3, 8017c48 <__ieee754_rem_pio2+0x308>)
 8017a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a76:	4630      	mov	r0, r6
 8017a78:	4639      	mov	r1, r7
 8017a7a:	f7e8 fd95 	bl	80005a8 <__aeabi_dmul>
 8017a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8017c70 <__ieee754_rem_pio2+0x330>)
 8017a80:	2200      	movs	r2, #0
 8017a82:	f7e8 fbdb 	bl	800023c <__adddf3>
 8017a86:	f7e9 f829 	bl	8000adc <__aeabi_d2iz>
 8017a8a:	4605      	mov	r5, r0
 8017a8c:	f7e8 fd22 	bl	80004d4 <__aeabi_i2d>
 8017a90:	4602      	mov	r2, r0
 8017a92:	460b      	mov	r3, r1
 8017a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017a98:	a363      	add	r3, pc, #396	@ (adr r3, 8017c28 <__ieee754_rem_pio2+0x2e8>)
 8017a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a9e:	f7e8 fd83 	bl	80005a8 <__aeabi_dmul>
 8017aa2:	4602      	mov	r2, r0
 8017aa4:	460b      	mov	r3, r1
 8017aa6:	4630      	mov	r0, r6
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	f7e8 fbc5 	bl	8000238 <__aeabi_dsub>
 8017aae:	a360      	add	r3, pc, #384	@ (adr r3, 8017c30 <__ieee754_rem_pio2+0x2f0>)
 8017ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ab4:	4682      	mov	sl, r0
 8017ab6:	468b      	mov	fp, r1
 8017ab8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017abc:	f7e8 fd74 	bl	80005a8 <__aeabi_dmul>
 8017ac0:	2d1f      	cmp	r5, #31
 8017ac2:	4606      	mov	r6, r0
 8017ac4:	460f      	mov	r7, r1
 8017ac6:	dc0c      	bgt.n	8017ae2 <__ieee754_rem_pio2+0x1a2>
 8017ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8017c74 <__ieee754_rem_pio2+0x334>)
 8017aca:	1e6a      	subs	r2, r5, #1
 8017acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ad0:	4543      	cmp	r3, r8
 8017ad2:	d006      	beq.n	8017ae2 <__ieee754_rem_pio2+0x1a2>
 8017ad4:	4632      	mov	r2, r6
 8017ad6:	463b      	mov	r3, r7
 8017ad8:	4650      	mov	r0, sl
 8017ada:	4659      	mov	r1, fp
 8017adc:	f7e8 fbac 	bl	8000238 <__aeabi_dsub>
 8017ae0:	e00e      	b.n	8017b00 <__ieee754_rem_pio2+0x1c0>
 8017ae2:	463b      	mov	r3, r7
 8017ae4:	4632      	mov	r2, r6
 8017ae6:	4650      	mov	r0, sl
 8017ae8:	4659      	mov	r1, fp
 8017aea:	f7e8 fba5 	bl	8000238 <__aeabi_dsub>
 8017aee:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017af2:	9305      	str	r3, [sp, #20]
 8017af4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017af8:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8017afc:	2b10      	cmp	r3, #16
 8017afe:	dc02      	bgt.n	8017b06 <__ieee754_rem_pio2+0x1c6>
 8017b00:	e9c4 0100 	strd	r0, r1, [r4]
 8017b04:	e039      	b.n	8017b7a <__ieee754_rem_pio2+0x23a>
 8017b06:	a34c      	add	r3, pc, #304	@ (adr r3, 8017c38 <__ieee754_rem_pio2+0x2f8>)
 8017b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017b10:	f7e8 fd4a 	bl	80005a8 <__aeabi_dmul>
 8017b14:	4606      	mov	r6, r0
 8017b16:	460f      	mov	r7, r1
 8017b18:	4602      	mov	r2, r0
 8017b1a:	460b      	mov	r3, r1
 8017b1c:	4650      	mov	r0, sl
 8017b1e:	4659      	mov	r1, fp
 8017b20:	f7e8 fb8a 	bl	8000238 <__aeabi_dsub>
 8017b24:	4602      	mov	r2, r0
 8017b26:	460b      	mov	r3, r1
 8017b28:	4680      	mov	r8, r0
 8017b2a:	4689      	mov	r9, r1
 8017b2c:	4650      	mov	r0, sl
 8017b2e:	4659      	mov	r1, fp
 8017b30:	f7e8 fb82 	bl	8000238 <__aeabi_dsub>
 8017b34:	4632      	mov	r2, r6
 8017b36:	463b      	mov	r3, r7
 8017b38:	f7e8 fb7e 	bl	8000238 <__aeabi_dsub>
 8017b3c:	a340      	add	r3, pc, #256	@ (adr r3, 8017c40 <__ieee754_rem_pio2+0x300>)
 8017b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017b42:	4606      	mov	r6, r0
 8017b44:	460f      	mov	r7, r1
 8017b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017b4a:	f7e8 fd2d 	bl	80005a8 <__aeabi_dmul>
 8017b4e:	4632      	mov	r2, r6
 8017b50:	463b      	mov	r3, r7
 8017b52:	f7e8 fb71 	bl	8000238 <__aeabi_dsub>
 8017b56:	4602      	mov	r2, r0
 8017b58:	460b      	mov	r3, r1
 8017b5a:	4606      	mov	r6, r0
 8017b5c:	460f      	mov	r7, r1
 8017b5e:	4640      	mov	r0, r8
 8017b60:	4649      	mov	r1, r9
 8017b62:	f7e8 fb69 	bl	8000238 <__aeabi_dsub>
 8017b66:	9a05      	ldr	r2, [sp, #20]
 8017b68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017b6c:	1ad3      	subs	r3, r2, r3
 8017b6e:	2b31      	cmp	r3, #49	@ 0x31
 8017b70:	dc20      	bgt.n	8017bb4 <__ieee754_rem_pio2+0x274>
 8017b72:	e9c4 0100 	strd	r0, r1, [r4]
 8017b76:	46c2      	mov	sl, r8
 8017b78:	46cb      	mov	fp, r9
 8017b7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017b7e:	4650      	mov	r0, sl
 8017b80:	4642      	mov	r2, r8
 8017b82:	464b      	mov	r3, r9
 8017b84:	4659      	mov	r1, fp
 8017b86:	f7e8 fb57 	bl	8000238 <__aeabi_dsub>
 8017b8a:	463b      	mov	r3, r7
 8017b8c:	4632      	mov	r2, r6
 8017b8e:	f7e8 fb53 	bl	8000238 <__aeabi_dsub>
 8017b92:	9b04      	ldr	r3, [sp, #16]
 8017b94:	2b00      	cmp	r3, #0
 8017b96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017b9a:	f6bf af0e 	bge.w	80179ba <__ieee754_rem_pio2+0x7a>
 8017b9e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8017ba2:	6063      	str	r3, [r4, #4]
 8017ba4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017ba8:	f8c4 8000 	str.w	r8, [r4]
 8017bac:	60a0      	str	r0, [r4, #8]
 8017bae:	60e3      	str	r3, [r4, #12]
 8017bb0:	426d      	negs	r5, r5
 8017bb2:	e702      	b.n	80179ba <__ieee754_rem_pio2+0x7a>
 8017bb4:	a326      	add	r3, pc, #152	@ (adr r3, 8017c50 <__ieee754_rem_pio2+0x310>)
 8017bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bbe:	f7e8 fcf3 	bl	80005a8 <__aeabi_dmul>
 8017bc2:	4606      	mov	r6, r0
 8017bc4:	460f      	mov	r7, r1
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	460b      	mov	r3, r1
 8017bca:	4640      	mov	r0, r8
 8017bcc:	4649      	mov	r1, r9
 8017bce:	f7e8 fb33 	bl	8000238 <__aeabi_dsub>
 8017bd2:	4602      	mov	r2, r0
 8017bd4:	460b      	mov	r3, r1
 8017bd6:	4682      	mov	sl, r0
 8017bd8:	468b      	mov	fp, r1
 8017bda:	4640      	mov	r0, r8
 8017bdc:	4649      	mov	r1, r9
 8017bde:	f7e8 fb2b 	bl	8000238 <__aeabi_dsub>
 8017be2:	4632      	mov	r2, r6
 8017be4:	463b      	mov	r3, r7
 8017be6:	f7e8 fb27 	bl	8000238 <__aeabi_dsub>
 8017bea:	a31b      	add	r3, pc, #108	@ (adr r3, 8017c58 <__ieee754_rem_pio2+0x318>)
 8017bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bf0:	4606      	mov	r6, r0
 8017bf2:	460f      	mov	r7, r1
 8017bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017bf8:	f7e8 fcd6 	bl	80005a8 <__aeabi_dmul>
 8017bfc:	4632      	mov	r2, r6
 8017bfe:	463b      	mov	r3, r7
 8017c00:	f7e8 fb1a 	bl	8000238 <__aeabi_dsub>
 8017c04:	4606      	mov	r6, r0
 8017c06:	460f      	mov	r7, r1
 8017c08:	e764      	b.n	8017ad4 <__ieee754_rem_pio2+0x194>
 8017c0a:	4b1b      	ldr	r3, [pc, #108]	@ (8017c78 <__ieee754_rem_pio2+0x338>)
 8017c0c:	4598      	cmp	r8, r3
 8017c0e:	d935      	bls.n	8017c7c <__ieee754_rem_pio2+0x33c>
 8017c10:	4632      	mov	r2, r6
 8017c12:	463b      	mov	r3, r7
 8017c14:	4630      	mov	r0, r6
 8017c16:	4639      	mov	r1, r7
 8017c18:	f7e8 fb0e 	bl	8000238 <__aeabi_dsub>
 8017c1c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017c20:	e9c4 0100 	strd	r0, r1, [r4]
 8017c24:	e69e      	b.n	8017964 <__ieee754_rem_pio2+0x24>
 8017c26:	bf00      	nop
 8017c28:	54400000 	.word	0x54400000
 8017c2c:	3ff921fb 	.word	0x3ff921fb
 8017c30:	1a626331 	.word	0x1a626331
 8017c34:	3dd0b461 	.word	0x3dd0b461
 8017c38:	1a600000 	.word	0x1a600000
 8017c3c:	3dd0b461 	.word	0x3dd0b461
 8017c40:	2e037073 	.word	0x2e037073
 8017c44:	3ba3198a 	.word	0x3ba3198a
 8017c48:	6dc9c883 	.word	0x6dc9c883
 8017c4c:	3fe45f30 	.word	0x3fe45f30
 8017c50:	2e000000 	.word	0x2e000000
 8017c54:	3ba3198a 	.word	0x3ba3198a
 8017c58:	252049c1 	.word	0x252049c1
 8017c5c:	397b839a 	.word	0x397b839a
 8017c60:	3fe921fb 	.word	0x3fe921fb
 8017c64:	4002d97b 	.word	0x4002d97b
 8017c68:	3ff921fb 	.word	0x3ff921fb
 8017c6c:	413921fb 	.word	0x413921fb
 8017c70:	3fe00000 	.word	0x3fe00000
 8017c74:	0801a330 	.word	0x0801a330
 8017c78:	7fefffff 	.word	0x7fefffff
 8017c7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017c80:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8017c84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017c88:	4630      	mov	r0, r6
 8017c8a:	460f      	mov	r7, r1
 8017c8c:	f7e8 ff26 	bl	8000adc <__aeabi_d2iz>
 8017c90:	f7e8 fc20 	bl	80004d4 <__aeabi_i2d>
 8017c94:	4602      	mov	r2, r0
 8017c96:	460b      	mov	r3, r1
 8017c98:	4630      	mov	r0, r6
 8017c9a:	4639      	mov	r1, r7
 8017c9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017ca0:	f7e8 faca 	bl	8000238 <__aeabi_dsub>
 8017ca4:	4b22      	ldr	r3, [pc, #136]	@ (8017d30 <__ieee754_rem_pio2+0x3f0>)
 8017ca6:	2200      	movs	r2, #0
 8017ca8:	f7e8 fc7e 	bl	80005a8 <__aeabi_dmul>
 8017cac:	460f      	mov	r7, r1
 8017cae:	4606      	mov	r6, r0
 8017cb0:	f7e8 ff14 	bl	8000adc <__aeabi_d2iz>
 8017cb4:	f7e8 fc0e 	bl	80004d4 <__aeabi_i2d>
 8017cb8:	4602      	mov	r2, r0
 8017cba:	460b      	mov	r3, r1
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	4639      	mov	r1, r7
 8017cc0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017cc4:	f7e8 fab8 	bl	8000238 <__aeabi_dsub>
 8017cc8:	4b19      	ldr	r3, [pc, #100]	@ (8017d30 <__ieee754_rem_pio2+0x3f0>)
 8017cca:	2200      	movs	r2, #0
 8017ccc:	f7e8 fc6c 	bl	80005a8 <__aeabi_dmul>
 8017cd0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8017cd4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8017cd8:	f04f 0803 	mov.w	r8, #3
 8017cdc:	2600      	movs	r6, #0
 8017cde:	2700      	movs	r7, #0
 8017ce0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8017ce4:	4632      	mov	r2, r6
 8017ce6:	463b      	mov	r3, r7
 8017ce8:	46c2      	mov	sl, r8
 8017cea:	f108 38ff 	add.w	r8, r8, #4294967295
 8017cee:	f7e8 fec3 	bl	8000a78 <__aeabi_dcmpeq>
 8017cf2:	2800      	cmp	r0, #0
 8017cf4:	d1f4      	bne.n	8017ce0 <__ieee754_rem_pio2+0x3a0>
 8017cf6:	4b0f      	ldr	r3, [pc, #60]	@ (8017d34 <__ieee754_rem_pio2+0x3f4>)
 8017cf8:	9301      	str	r3, [sp, #4]
 8017cfa:	2302      	movs	r3, #2
 8017cfc:	9300      	str	r3, [sp, #0]
 8017cfe:	462a      	mov	r2, r5
 8017d00:	4653      	mov	r3, sl
 8017d02:	4621      	mov	r1, r4
 8017d04:	a806      	add	r0, sp, #24
 8017d06:	f000 f81f 	bl	8017d48 <__kernel_rem_pio2>
 8017d0a:	9b04      	ldr	r3, [sp, #16]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	4605      	mov	r5, r0
 8017d10:	f6bf ae53 	bge.w	80179ba <__ieee754_rem_pio2+0x7a>
 8017d14:	e9d4 2100 	ldrd	r2, r1, [r4]
 8017d18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017d1c:	e9c4 2300 	strd	r2, r3, [r4]
 8017d20:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8017d24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8017d28:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8017d2c:	e740      	b.n	8017bb0 <__ieee754_rem_pio2+0x270>
 8017d2e:	bf00      	nop
 8017d30:	41700000 	.word	0x41700000
 8017d34:	0801a3b0 	.word	0x0801a3b0

08017d38 <fabs>:
 8017d38:	ec51 0b10 	vmov	r0, r1, d0
 8017d3c:	4602      	mov	r2, r0
 8017d3e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017d42:	ec43 2b10 	vmov	d0, r2, r3
 8017d46:	4770      	bx	lr

08017d48 <__kernel_rem_pio2>:
 8017d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d4c:	ed2d 8b02 	vpush	{d8}
 8017d50:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8017d54:	f112 0f14 	cmn.w	r2, #20
 8017d58:	9306      	str	r3, [sp, #24]
 8017d5a:	9104      	str	r1, [sp, #16]
 8017d5c:	4bbe      	ldr	r3, [pc, #760]	@ (8018058 <__kernel_rem_pio2+0x310>)
 8017d5e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8017d60:	9008      	str	r0, [sp, #32]
 8017d62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d66:	9300      	str	r3, [sp, #0]
 8017d68:	9b06      	ldr	r3, [sp, #24]
 8017d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8017d6e:	bfa8      	it	ge
 8017d70:	1ed4      	subge	r4, r2, #3
 8017d72:	9305      	str	r3, [sp, #20]
 8017d74:	bfb2      	itee	lt
 8017d76:	2400      	movlt	r4, #0
 8017d78:	2318      	movge	r3, #24
 8017d7a:	fb94 f4f3 	sdivge	r4, r4, r3
 8017d7e:	f06f 0317 	mvn.w	r3, #23
 8017d82:	fb04 3303 	mla	r3, r4, r3, r3
 8017d86:	eb03 0b02 	add.w	fp, r3, r2
 8017d8a:	9b00      	ldr	r3, [sp, #0]
 8017d8c:	9a05      	ldr	r2, [sp, #20]
 8017d8e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8018048 <__kernel_rem_pio2+0x300>
 8017d92:	eb03 0802 	add.w	r8, r3, r2
 8017d96:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8017d98:	1aa7      	subs	r7, r4, r2
 8017d9a:	ae20      	add	r6, sp, #128	@ 0x80
 8017d9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8017da0:	2500      	movs	r5, #0
 8017da2:	4545      	cmp	r5, r8
 8017da4:	dd13      	ble.n	8017dce <__kernel_rem_pio2+0x86>
 8017da6:	9b06      	ldr	r3, [sp, #24]
 8017da8:	aa20      	add	r2, sp, #128	@ 0x80
 8017daa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8017dae:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8017db2:	f04f 0800 	mov.w	r8, #0
 8017db6:	9b00      	ldr	r3, [sp, #0]
 8017db8:	4598      	cmp	r8, r3
 8017dba:	dc31      	bgt.n	8017e20 <__kernel_rem_pio2+0xd8>
 8017dbc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8018048 <__kernel_rem_pio2+0x300>
 8017dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017dc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017dc8:	462f      	mov	r7, r5
 8017dca:	2600      	movs	r6, #0
 8017dcc:	e01b      	b.n	8017e06 <__kernel_rem_pio2+0xbe>
 8017dce:	42ef      	cmn	r7, r5
 8017dd0:	d407      	bmi.n	8017de2 <__kernel_rem_pio2+0x9a>
 8017dd2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8017dd6:	f7e8 fb7d 	bl	80004d4 <__aeabi_i2d>
 8017dda:	e8e6 0102 	strd	r0, r1, [r6], #8
 8017dde:	3501      	adds	r5, #1
 8017de0:	e7df      	b.n	8017da2 <__kernel_rem_pio2+0x5a>
 8017de2:	ec51 0b18 	vmov	r0, r1, d8
 8017de6:	e7f8      	b.n	8017dda <__kernel_rem_pio2+0x92>
 8017de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017dec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8017df0:	f7e8 fbda 	bl	80005a8 <__aeabi_dmul>
 8017df4:	4602      	mov	r2, r0
 8017df6:	460b      	mov	r3, r1
 8017df8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017dfc:	f7e8 fa1e 	bl	800023c <__adddf3>
 8017e00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017e04:	3601      	adds	r6, #1
 8017e06:	9b05      	ldr	r3, [sp, #20]
 8017e08:	429e      	cmp	r6, r3
 8017e0a:	f1a7 0708 	sub.w	r7, r7, #8
 8017e0e:	ddeb      	ble.n	8017de8 <__kernel_rem_pio2+0xa0>
 8017e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017e14:	f108 0801 	add.w	r8, r8, #1
 8017e18:	ecaa 7b02 	vstmia	sl!, {d7}
 8017e1c:	3508      	adds	r5, #8
 8017e1e:	e7ca      	b.n	8017db6 <__kernel_rem_pio2+0x6e>
 8017e20:	9b00      	ldr	r3, [sp, #0]
 8017e22:	f8dd 8000 	ldr.w	r8, [sp]
 8017e26:	aa0c      	add	r2, sp, #48	@ 0x30
 8017e28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017e2c:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e2e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8017e30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8017e34:	9309      	str	r3, [sp, #36]	@ 0x24
 8017e36:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8017e3a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017e3c:	ab98      	add	r3, sp, #608	@ 0x260
 8017e3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8017e42:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8017e46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017e4a:	ac0c      	add	r4, sp, #48	@ 0x30
 8017e4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8017e4e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8017e52:	46a1      	mov	r9, r4
 8017e54:	46c2      	mov	sl, r8
 8017e56:	f1ba 0f00 	cmp.w	sl, #0
 8017e5a:	f1a5 0508 	sub.w	r5, r5, #8
 8017e5e:	dc77      	bgt.n	8017f50 <__kernel_rem_pio2+0x208>
 8017e60:	4658      	mov	r0, fp
 8017e62:	ed9d 0b02 	vldr	d0, [sp, #8]
 8017e66:	f000 fac7 	bl	80183f8 <scalbn>
 8017e6a:	ec57 6b10 	vmov	r6, r7, d0
 8017e6e:	2200      	movs	r2, #0
 8017e70:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8017e74:	4630      	mov	r0, r6
 8017e76:	4639      	mov	r1, r7
 8017e78:	f7e8 fb96 	bl	80005a8 <__aeabi_dmul>
 8017e7c:	ec41 0b10 	vmov	d0, r0, r1
 8017e80:	f000 fb3a 	bl	80184f8 <floor>
 8017e84:	4b75      	ldr	r3, [pc, #468]	@ (801805c <__kernel_rem_pio2+0x314>)
 8017e86:	ec51 0b10 	vmov	r0, r1, d0
 8017e8a:	2200      	movs	r2, #0
 8017e8c:	f7e8 fb8c 	bl	80005a8 <__aeabi_dmul>
 8017e90:	4602      	mov	r2, r0
 8017e92:	460b      	mov	r3, r1
 8017e94:	4630      	mov	r0, r6
 8017e96:	4639      	mov	r1, r7
 8017e98:	f7e8 f9ce 	bl	8000238 <__aeabi_dsub>
 8017e9c:	460f      	mov	r7, r1
 8017e9e:	4606      	mov	r6, r0
 8017ea0:	f7e8 fe1c 	bl	8000adc <__aeabi_d2iz>
 8017ea4:	9002      	str	r0, [sp, #8]
 8017ea6:	f7e8 fb15 	bl	80004d4 <__aeabi_i2d>
 8017eaa:	4602      	mov	r2, r0
 8017eac:	460b      	mov	r3, r1
 8017eae:	4630      	mov	r0, r6
 8017eb0:	4639      	mov	r1, r7
 8017eb2:	f7e8 f9c1 	bl	8000238 <__aeabi_dsub>
 8017eb6:	f1bb 0f00 	cmp.w	fp, #0
 8017eba:	4606      	mov	r6, r0
 8017ebc:	460f      	mov	r7, r1
 8017ebe:	dd6c      	ble.n	8017f9a <__kernel_rem_pio2+0x252>
 8017ec0:	f108 31ff 	add.w	r1, r8, #4294967295
 8017ec4:	ab0c      	add	r3, sp, #48	@ 0x30
 8017ec6:	9d02      	ldr	r5, [sp, #8]
 8017ec8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017ecc:	f1cb 0018 	rsb	r0, fp, #24
 8017ed0:	fa43 f200 	asr.w	r2, r3, r0
 8017ed4:	4415      	add	r5, r2
 8017ed6:	4082      	lsls	r2, r0
 8017ed8:	1a9b      	subs	r3, r3, r2
 8017eda:	aa0c      	add	r2, sp, #48	@ 0x30
 8017edc:	9502      	str	r5, [sp, #8]
 8017ede:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8017ee2:	f1cb 0217 	rsb	r2, fp, #23
 8017ee6:	fa43 f902 	asr.w	r9, r3, r2
 8017eea:	f1b9 0f00 	cmp.w	r9, #0
 8017eee:	dd64      	ble.n	8017fba <__kernel_rem_pio2+0x272>
 8017ef0:	9b02      	ldr	r3, [sp, #8]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	3301      	adds	r3, #1
 8017ef6:	9302      	str	r3, [sp, #8]
 8017ef8:	4615      	mov	r5, r2
 8017efa:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8017efe:	4590      	cmp	r8, r2
 8017f00:	f300 80b8 	bgt.w	8018074 <__kernel_rem_pio2+0x32c>
 8017f04:	f1bb 0f00 	cmp.w	fp, #0
 8017f08:	dd07      	ble.n	8017f1a <__kernel_rem_pio2+0x1d2>
 8017f0a:	f1bb 0f01 	cmp.w	fp, #1
 8017f0e:	f000 80bf 	beq.w	8018090 <__kernel_rem_pio2+0x348>
 8017f12:	f1bb 0f02 	cmp.w	fp, #2
 8017f16:	f000 80c6 	beq.w	80180a6 <__kernel_rem_pio2+0x35e>
 8017f1a:	f1b9 0f02 	cmp.w	r9, #2
 8017f1e:	d14c      	bne.n	8017fba <__kernel_rem_pio2+0x272>
 8017f20:	4632      	mov	r2, r6
 8017f22:	463b      	mov	r3, r7
 8017f24:	494e      	ldr	r1, [pc, #312]	@ (8018060 <__kernel_rem_pio2+0x318>)
 8017f26:	2000      	movs	r0, #0
 8017f28:	f7e8 f986 	bl	8000238 <__aeabi_dsub>
 8017f2c:	4606      	mov	r6, r0
 8017f2e:	460f      	mov	r7, r1
 8017f30:	2d00      	cmp	r5, #0
 8017f32:	d042      	beq.n	8017fba <__kernel_rem_pio2+0x272>
 8017f34:	4658      	mov	r0, fp
 8017f36:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8018050 <__kernel_rem_pio2+0x308>
 8017f3a:	f000 fa5d 	bl	80183f8 <scalbn>
 8017f3e:	4630      	mov	r0, r6
 8017f40:	4639      	mov	r1, r7
 8017f42:	ec53 2b10 	vmov	r2, r3, d0
 8017f46:	f7e8 f977 	bl	8000238 <__aeabi_dsub>
 8017f4a:	4606      	mov	r6, r0
 8017f4c:	460f      	mov	r7, r1
 8017f4e:	e034      	b.n	8017fba <__kernel_rem_pio2+0x272>
 8017f50:	4b44      	ldr	r3, [pc, #272]	@ (8018064 <__kernel_rem_pio2+0x31c>)
 8017f52:	2200      	movs	r2, #0
 8017f54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f58:	f7e8 fb26 	bl	80005a8 <__aeabi_dmul>
 8017f5c:	f7e8 fdbe 	bl	8000adc <__aeabi_d2iz>
 8017f60:	f7e8 fab8 	bl	80004d4 <__aeabi_i2d>
 8017f64:	4b40      	ldr	r3, [pc, #256]	@ (8018068 <__kernel_rem_pio2+0x320>)
 8017f66:	2200      	movs	r2, #0
 8017f68:	4606      	mov	r6, r0
 8017f6a:	460f      	mov	r7, r1
 8017f6c:	f7e8 fb1c 	bl	80005a8 <__aeabi_dmul>
 8017f70:	4602      	mov	r2, r0
 8017f72:	460b      	mov	r3, r1
 8017f74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f78:	f7e8 f95e 	bl	8000238 <__aeabi_dsub>
 8017f7c:	f7e8 fdae 	bl	8000adc <__aeabi_d2iz>
 8017f80:	e9d5 2300 	ldrd	r2, r3, [r5]
 8017f84:	f849 0b04 	str.w	r0, [r9], #4
 8017f88:	4639      	mov	r1, r7
 8017f8a:	4630      	mov	r0, r6
 8017f8c:	f7e8 f956 	bl	800023c <__adddf3>
 8017f90:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017f94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017f98:	e75d      	b.n	8017e56 <__kernel_rem_pio2+0x10e>
 8017f9a:	d107      	bne.n	8017fac <__kernel_rem_pio2+0x264>
 8017f9c:	f108 33ff 	add.w	r3, r8, #4294967295
 8017fa0:	aa0c      	add	r2, sp, #48	@ 0x30
 8017fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017fa6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8017faa:	e79e      	b.n	8017eea <__kernel_rem_pio2+0x1a2>
 8017fac:	4b2f      	ldr	r3, [pc, #188]	@ (801806c <__kernel_rem_pio2+0x324>)
 8017fae:	2200      	movs	r2, #0
 8017fb0:	f7e8 fd80 	bl	8000ab4 <__aeabi_dcmpge>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d143      	bne.n	8018040 <__kernel_rem_pio2+0x2f8>
 8017fb8:	4681      	mov	r9, r0
 8017fba:	2200      	movs	r2, #0
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	4630      	mov	r0, r6
 8017fc0:	4639      	mov	r1, r7
 8017fc2:	f7e8 fd59 	bl	8000a78 <__aeabi_dcmpeq>
 8017fc6:	2800      	cmp	r0, #0
 8017fc8:	f000 80bf 	beq.w	801814a <__kernel_rem_pio2+0x402>
 8017fcc:	f108 33ff 	add.w	r3, r8, #4294967295
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	9900      	ldr	r1, [sp, #0]
 8017fd4:	428b      	cmp	r3, r1
 8017fd6:	da6e      	bge.n	80180b6 <__kernel_rem_pio2+0x36e>
 8017fd8:	2a00      	cmp	r2, #0
 8017fda:	f000 8089 	beq.w	80180f0 <__kernel_rem_pio2+0x3a8>
 8017fde:	f108 38ff 	add.w	r8, r8, #4294967295
 8017fe2:	ab0c      	add	r3, sp, #48	@ 0x30
 8017fe4:	f1ab 0b18 	sub.w	fp, fp, #24
 8017fe8:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d0f6      	beq.n	8017fde <__kernel_rem_pio2+0x296>
 8017ff0:	4658      	mov	r0, fp
 8017ff2:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8018050 <__kernel_rem_pio2+0x308>
 8017ff6:	f000 f9ff 	bl	80183f8 <scalbn>
 8017ffa:	f108 0301 	add.w	r3, r8, #1
 8017ffe:	00da      	lsls	r2, r3, #3
 8018000:	9205      	str	r2, [sp, #20]
 8018002:	ec55 4b10 	vmov	r4, r5, d0
 8018006:	aa70      	add	r2, sp, #448	@ 0x1c0
 8018008:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8018064 <__kernel_rem_pio2+0x31c>
 801800c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8018010:	4646      	mov	r6, r8
 8018012:	f04f 0a00 	mov.w	sl, #0
 8018016:	2e00      	cmp	r6, #0
 8018018:	f280 80cf 	bge.w	80181ba <__kernel_rem_pio2+0x472>
 801801c:	4644      	mov	r4, r8
 801801e:	2c00      	cmp	r4, #0
 8018020:	f2c0 80fd 	blt.w	801821e <__kernel_rem_pio2+0x4d6>
 8018024:	4b12      	ldr	r3, [pc, #72]	@ (8018070 <__kernel_rem_pio2+0x328>)
 8018026:	461f      	mov	r7, r3
 8018028:	ab70      	add	r3, sp, #448	@ 0x1c0
 801802a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801802e:	9306      	str	r3, [sp, #24]
 8018030:	f04f 0a00 	mov.w	sl, #0
 8018034:	f04f 0b00 	mov.w	fp, #0
 8018038:	2600      	movs	r6, #0
 801803a:	eba8 0504 	sub.w	r5, r8, r4
 801803e:	e0e2      	b.n	8018206 <__kernel_rem_pio2+0x4be>
 8018040:	f04f 0902 	mov.w	r9, #2
 8018044:	e754      	b.n	8017ef0 <__kernel_rem_pio2+0x1a8>
 8018046:	bf00      	nop
	...
 8018054:	3ff00000 	.word	0x3ff00000
 8018058:	0801a4f8 	.word	0x0801a4f8
 801805c:	40200000 	.word	0x40200000
 8018060:	3ff00000 	.word	0x3ff00000
 8018064:	3e700000 	.word	0x3e700000
 8018068:	41700000 	.word	0x41700000
 801806c:	3fe00000 	.word	0x3fe00000
 8018070:	0801a4b8 	.word	0x0801a4b8
 8018074:	f854 3b04 	ldr.w	r3, [r4], #4
 8018078:	b945      	cbnz	r5, 801808c <__kernel_rem_pio2+0x344>
 801807a:	b123      	cbz	r3, 8018086 <__kernel_rem_pio2+0x33e>
 801807c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8018080:	f844 3c04 	str.w	r3, [r4, #-4]
 8018084:	2301      	movs	r3, #1
 8018086:	3201      	adds	r2, #1
 8018088:	461d      	mov	r5, r3
 801808a:	e738      	b.n	8017efe <__kernel_rem_pio2+0x1b6>
 801808c:	1acb      	subs	r3, r1, r3
 801808e:	e7f7      	b.n	8018080 <__kernel_rem_pio2+0x338>
 8018090:	f108 32ff 	add.w	r2, r8, #4294967295
 8018094:	ab0c      	add	r3, sp, #48	@ 0x30
 8018096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801809a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801809e:	a90c      	add	r1, sp, #48	@ 0x30
 80180a0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80180a4:	e739      	b.n	8017f1a <__kernel_rem_pio2+0x1d2>
 80180a6:	f108 32ff 	add.w	r2, r8, #4294967295
 80180aa:	ab0c      	add	r3, sp, #48	@ 0x30
 80180ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180b0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80180b4:	e7f3      	b.n	801809e <__kernel_rem_pio2+0x356>
 80180b6:	a90c      	add	r1, sp, #48	@ 0x30
 80180b8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80180bc:	3b01      	subs	r3, #1
 80180be:	430a      	orrs	r2, r1
 80180c0:	e787      	b.n	8017fd2 <__kernel_rem_pio2+0x28a>
 80180c2:	3401      	adds	r4, #1
 80180c4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80180c8:	2a00      	cmp	r2, #0
 80180ca:	d0fa      	beq.n	80180c2 <__kernel_rem_pio2+0x37a>
 80180cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80180ce:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80180d2:	eb0d 0503 	add.w	r5, sp, r3
 80180d6:	9b06      	ldr	r3, [sp, #24]
 80180d8:	aa20      	add	r2, sp, #128	@ 0x80
 80180da:	4443      	add	r3, r8
 80180dc:	f108 0701 	add.w	r7, r8, #1
 80180e0:	3d98      	subs	r5, #152	@ 0x98
 80180e2:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80180e6:	4444      	add	r4, r8
 80180e8:	42bc      	cmp	r4, r7
 80180ea:	da04      	bge.n	80180f6 <__kernel_rem_pio2+0x3ae>
 80180ec:	46a0      	mov	r8, r4
 80180ee:	e6a2      	b.n	8017e36 <__kernel_rem_pio2+0xee>
 80180f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80180f2:	2401      	movs	r4, #1
 80180f4:	e7e6      	b.n	80180c4 <__kernel_rem_pio2+0x37c>
 80180f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80180f8:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80180fc:	f7e8 f9ea 	bl	80004d4 <__aeabi_i2d>
 8018100:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80183c8 <__kernel_rem_pio2+0x680>
 8018104:	e8e6 0102 	strd	r0, r1, [r6], #8
 8018108:	ed8d 7b02 	vstr	d7, [sp, #8]
 801810c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018110:	46b2      	mov	sl, r6
 8018112:	f04f 0800 	mov.w	r8, #0
 8018116:	9b05      	ldr	r3, [sp, #20]
 8018118:	4598      	cmp	r8, r3
 801811a:	dd05      	ble.n	8018128 <__kernel_rem_pio2+0x3e0>
 801811c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018120:	3701      	adds	r7, #1
 8018122:	eca5 7b02 	vstmia	r5!, {d7}
 8018126:	e7df      	b.n	80180e8 <__kernel_rem_pio2+0x3a0>
 8018128:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 801812c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8018130:	f7e8 fa3a 	bl	80005a8 <__aeabi_dmul>
 8018134:	4602      	mov	r2, r0
 8018136:	460b      	mov	r3, r1
 8018138:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801813c:	f7e8 f87e 	bl	800023c <__adddf3>
 8018140:	f108 0801 	add.w	r8, r8, #1
 8018144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018148:	e7e5      	b.n	8018116 <__kernel_rem_pio2+0x3ce>
 801814a:	f1cb 0000 	rsb	r0, fp, #0
 801814e:	ec47 6b10 	vmov	d0, r6, r7
 8018152:	f000 f951 	bl	80183f8 <scalbn>
 8018156:	ec55 4b10 	vmov	r4, r5, d0
 801815a:	4b9d      	ldr	r3, [pc, #628]	@ (80183d0 <__kernel_rem_pio2+0x688>)
 801815c:	2200      	movs	r2, #0
 801815e:	4620      	mov	r0, r4
 8018160:	4629      	mov	r1, r5
 8018162:	f7e8 fca7 	bl	8000ab4 <__aeabi_dcmpge>
 8018166:	b300      	cbz	r0, 80181aa <__kernel_rem_pio2+0x462>
 8018168:	4b9a      	ldr	r3, [pc, #616]	@ (80183d4 <__kernel_rem_pio2+0x68c>)
 801816a:	2200      	movs	r2, #0
 801816c:	4620      	mov	r0, r4
 801816e:	4629      	mov	r1, r5
 8018170:	f7e8 fa1a 	bl	80005a8 <__aeabi_dmul>
 8018174:	f7e8 fcb2 	bl	8000adc <__aeabi_d2iz>
 8018178:	4606      	mov	r6, r0
 801817a:	f7e8 f9ab 	bl	80004d4 <__aeabi_i2d>
 801817e:	4b94      	ldr	r3, [pc, #592]	@ (80183d0 <__kernel_rem_pio2+0x688>)
 8018180:	2200      	movs	r2, #0
 8018182:	f7e8 fa11 	bl	80005a8 <__aeabi_dmul>
 8018186:	460b      	mov	r3, r1
 8018188:	4602      	mov	r2, r0
 801818a:	4629      	mov	r1, r5
 801818c:	4620      	mov	r0, r4
 801818e:	f7e8 f853 	bl	8000238 <__aeabi_dsub>
 8018192:	f7e8 fca3 	bl	8000adc <__aeabi_d2iz>
 8018196:	ab0c      	add	r3, sp, #48	@ 0x30
 8018198:	f10b 0b18 	add.w	fp, fp, #24
 801819c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80181a0:	f108 0801 	add.w	r8, r8, #1
 80181a4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80181a8:	e722      	b.n	8017ff0 <__kernel_rem_pio2+0x2a8>
 80181aa:	4620      	mov	r0, r4
 80181ac:	4629      	mov	r1, r5
 80181ae:	f7e8 fc95 	bl	8000adc <__aeabi_d2iz>
 80181b2:	ab0c      	add	r3, sp, #48	@ 0x30
 80181b4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80181b8:	e71a      	b.n	8017ff0 <__kernel_rem_pio2+0x2a8>
 80181ba:	ab0c      	add	r3, sp, #48	@ 0x30
 80181bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80181c0:	f7e8 f988 	bl	80004d4 <__aeabi_i2d>
 80181c4:	4622      	mov	r2, r4
 80181c6:	462b      	mov	r3, r5
 80181c8:	f7e8 f9ee 	bl	80005a8 <__aeabi_dmul>
 80181cc:	4652      	mov	r2, sl
 80181ce:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80181d2:	465b      	mov	r3, fp
 80181d4:	4620      	mov	r0, r4
 80181d6:	4629      	mov	r1, r5
 80181d8:	f7e8 f9e6 	bl	80005a8 <__aeabi_dmul>
 80181dc:	3e01      	subs	r6, #1
 80181de:	4604      	mov	r4, r0
 80181e0:	460d      	mov	r5, r1
 80181e2:	e718      	b.n	8018016 <__kernel_rem_pio2+0x2ce>
 80181e4:	9906      	ldr	r1, [sp, #24]
 80181e6:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80181ea:	9106      	str	r1, [sp, #24]
 80181ec:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80181f0:	f7e8 f9da 	bl	80005a8 <__aeabi_dmul>
 80181f4:	4602      	mov	r2, r0
 80181f6:	460b      	mov	r3, r1
 80181f8:	4650      	mov	r0, sl
 80181fa:	4659      	mov	r1, fp
 80181fc:	f7e8 f81e 	bl	800023c <__adddf3>
 8018200:	3601      	adds	r6, #1
 8018202:	4682      	mov	sl, r0
 8018204:	468b      	mov	fp, r1
 8018206:	9b00      	ldr	r3, [sp, #0]
 8018208:	429e      	cmp	r6, r3
 801820a:	dc01      	bgt.n	8018210 <__kernel_rem_pio2+0x4c8>
 801820c:	42b5      	cmp	r5, r6
 801820e:	dae9      	bge.n	80181e4 <__kernel_rem_pio2+0x49c>
 8018210:	ab48      	add	r3, sp, #288	@ 0x120
 8018212:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8018216:	e9c5 ab00 	strd	sl, fp, [r5]
 801821a:	3c01      	subs	r4, #1
 801821c:	e6ff      	b.n	801801e <__kernel_rem_pio2+0x2d6>
 801821e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8018220:	2b02      	cmp	r3, #2
 8018222:	dc0b      	bgt.n	801823c <__kernel_rem_pio2+0x4f4>
 8018224:	2b00      	cmp	r3, #0
 8018226:	dc39      	bgt.n	801829c <__kernel_rem_pio2+0x554>
 8018228:	d05d      	beq.n	80182e6 <__kernel_rem_pio2+0x59e>
 801822a:	9b02      	ldr	r3, [sp, #8]
 801822c:	f003 0007 	and.w	r0, r3, #7
 8018230:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8018234:	ecbd 8b02 	vpop	{d8}
 8018238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801823c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 801823e:	2b03      	cmp	r3, #3
 8018240:	d1f3      	bne.n	801822a <__kernel_rem_pio2+0x4e2>
 8018242:	9b05      	ldr	r3, [sp, #20]
 8018244:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8018248:	eb0d 0403 	add.w	r4, sp, r3
 801824c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8018250:	4625      	mov	r5, r4
 8018252:	46c2      	mov	sl, r8
 8018254:	f1ba 0f00 	cmp.w	sl, #0
 8018258:	f1a5 0508 	sub.w	r5, r5, #8
 801825c:	dc6b      	bgt.n	8018336 <__kernel_rem_pio2+0x5ee>
 801825e:	4645      	mov	r5, r8
 8018260:	2d01      	cmp	r5, #1
 8018262:	f1a4 0408 	sub.w	r4, r4, #8
 8018266:	f300 8087 	bgt.w	8018378 <__kernel_rem_pio2+0x630>
 801826a:	9c05      	ldr	r4, [sp, #20]
 801826c:	ab48      	add	r3, sp, #288	@ 0x120
 801826e:	441c      	add	r4, r3
 8018270:	2000      	movs	r0, #0
 8018272:	2100      	movs	r1, #0
 8018274:	f1b8 0f01 	cmp.w	r8, #1
 8018278:	f300 809c 	bgt.w	80183b4 <__kernel_rem_pio2+0x66c>
 801827c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8018280:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8018284:	f1b9 0f00 	cmp.w	r9, #0
 8018288:	f040 80a6 	bne.w	80183d8 <__kernel_rem_pio2+0x690>
 801828c:	9b04      	ldr	r3, [sp, #16]
 801828e:	e9c3 7800 	strd	r7, r8, [r3]
 8018292:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8018296:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801829a:	e7c6      	b.n	801822a <__kernel_rem_pio2+0x4e2>
 801829c:	9d05      	ldr	r5, [sp, #20]
 801829e:	ab48      	add	r3, sp, #288	@ 0x120
 80182a0:	441d      	add	r5, r3
 80182a2:	4644      	mov	r4, r8
 80182a4:	2000      	movs	r0, #0
 80182a6:	2100      	movs	r1, #0
 80182a8:	2c00      	cmp	r4, #0
 80182aa:	da35      	bge.n	8018318 <__kernel_rem_pio2+0x5d0>
 80182ac:	f1b9 0f00 	cmp.w	r9, #0
 80182b0:	d038      	beq.n	8018324 <__kernel_rem_pio2+0x5dc>
 80182b2:	4602      	mov	r2, r0
 80182b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80182b8:	9c04      	ldr	r4, [sp, #16]
 80182ba:	e9c4 2300 	strd	r2, r3, [r4]
 80182be:	4602      	mov	r2, r0
 80182c0:	460b      	mov	r3, r1
 80182c2:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80182c6:	f7e7 ffb7 	bl	8000238 <__aeabi_dsub>
 80182ca:	ad4a      	add	r5, sp, #296	@ 0x128
 80182cc:	2401      	movs	r4, #1
 80182ce:	45a0      	cmp	r8, r4
 80182d0:	da2b      	bge.n	801832a <__kernel_rem_pio2+0x5e2>
 80182d2:	f1b9 0f00 	cmp.w	r9, #0
 80182d6:	d002      	beq.n	80182de <__kernel_rem_pio2+0x596>
 80182d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80182dc:	4619      	mov	r1, r3
 80182de:	9b04      	ldr	r3, [sp, #16]
 80182e0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80182e4:	e7a1      	b.n	801822a <__kernel_rem_pio2+0x4e2>
 80182e6:	9c05      	ldr	r4, [sp, #20]
 80182e8:	ab48      	add	r3, sp, #288	@ 0x120
 80182ea:	441c      	add	r4, r3
 80182ec:	2000      	movs	r0, #0
 80182ee:	2100      	movs	r1, #0
 80182f0:	f1b8 0f00 	cmp.w	r8, #0
 80182f4:	da09      	bge.n	801830a <__kernel_rem_pio2+0x5c2>
 80182f6:	f1b9 0f00 	cmp.w	r9, #0
 80182fa:	d002      	beq.n	8018302 <__kernel_rem_pio2+0x5ba>
 80182fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8018300:	4619      	mov	r1, r3
 8018302:	9b04      	ldr	r3, [sp, #16]
 8018304:	e9c3 0100 	strd	r0, r1, [r3]
 8018308:	e78f      	b.n	801822a <__kernel_rem_pio2+0x4e2>
 801830a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801830e:	f7e7 ff95 	bl	800023c <__adddf3>
 8018312:	f108 38ff 	add.w	r8, r8, #4294967295
 8018316:	e7eb      	b.n	80182f0 <__kernel_rem_pio2+0x5a8>
 8018318:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 801831c:	f7e7 ff8e 	bl	800023c <__adddf3>
 8018320:	3c01      	subs	r4, #1
 8018322:	e7c1      	b.n	80182a8 <__kernel_rem_pio2+0x560>
 8018324:	4602      	mov	r2, r0
 8018326:	460b      	mov	r3, r1
 8018328:	e7c6      	b.n	80182b8 <__kernel_rem_pio2+0x570>
 801832a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801832e:	f7e7 ff85 	bl	800023c <__adddf3>
 8018332:	3401      	adds	r4, #1
 8018334:	e7cb      	b.n	80182ce <__kernel_rem_pio2+0x586>
 8018336:	ed95 7b00 	vldr	d7, [r5]
 801833a:	ed8d 7b00 	vstr	d7, [sp]
 801833e:	ed95 7b02 	vldr	d7, [r5, #8]
 8018342:	e9dd 0100 	ldrd	r0, r1, [sp]
 8018346:	ec53 2b17 	vmov	r2, r3, d7
 801834a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801834e:	f7e7 ff75 	bl	800023c <__adddf3>
 8018352:	4602      	mov	r2, r0
 8018354:	460b      	mov	r3, r1
 8018356:	4606      	mov	r6, r0
 8018358:	460f      	mov	r7, r1
 801835a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801835e:	f7e7 ff6b 	bl	8000238 <__aeabi_dsub>
 8018362:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018366:	f7e7 ff69 	bl	800023c <__adddf3>
 801836a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801836e:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8018372:	e9c5 6700 	strd	r6, r7, [r5]
 8018376:	e76d      	b.n	8018254 <__kernel_rem_pio2+0x50c>
 8018378:	ed94 7b00 	vldr	d7, [r4]
 801837c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8018380:	ec51 0b17 	vmov	r0, r1, d7
 8018384:	4652      	mov	r2, sl
 8018386:	465b      	mov	r3, fp
 8018388:	ed8d 7b00 	vstr	d7, [sp]
 801838c:	f7e7 ff56 	bl	800023c <__adddf3>
 8018390:	4602      	mov	r2, r0
 8018392:	460b      	mov	r3, r1
 8018394:	4606      	mov	r6, r0
 8018396:	460f      	mov	r7, r1
 8018398:	e9dd 0100 	ldrd	r0, r1, [sp]
 801839c:	f7e7 ff4c 	bl	8000238 <__aeabi_dsub>
 80183a0:	4652      	mov	r2, sl
 80183a2:	465b      	mov	r3, fp
 80183a4:	f7e7 ff4a 	bl	800023c <__adddf3>
 80183a8:	3d01      	subs	r5, #1
 80183aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80183ae:	e9c4 6700 	strd	r6, r7, [r4]
 80183b2:	e755      	b.n	8018260 <__kernel_rem_pio2+0x518>
 80183b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80183b8:	f7e7 ff40 	bl	800023c <__adddf3>
 80183bc:	f108 38ff 	add.w	r8, r8, #4294967295
 80183c0:	e758      	b.n	8018274 <__kernel_rem_pio2+0x52c>
 80183c2:	bf00      	nop
 80183c4:	f3af 8000 	nop.w
	...
 80183d0:	41700000 	.word	0x41700000
 80183d4:	3e700000 	.word	0x3e700000
 80183d8:	9b04      	ldr	r3, [sp, #16]
 80183da:	9a04      	ldr	r2, [sp, #16]
 80183dc:	601f      	str	r7, [r3, #0]
 80183de:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80183e2:	605c      	str	r4, [r3, #4]
 80183e4:	609d      	str	r5, [r3, #8]
 80183e6:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80183ea:	60d3      	str	r3, [r2, #12]
 80183ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80183f0:	6110      	str	r0, [r2, #16]
 80183f2:	6153      	str	r3, [r2, #20]
 80183f4:	e719      	b.n	801822a <__kernel_rem_pio2+0x4e2>
 80183f6:	bf00      	nop

080183f8 <scalbn>:
 80183f8:	b570      	push	{r4, r5, r6, lr}
 80183fa:	ec55 4b10 	vmov	r4, r5, d0
 80183fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8018402:	4606      	mov	r6, r0
 8018404:	462b      	mov	r3, r5
 8018406:	b991      	cbnz	r1, 801842e <scalbn+0x36>
 8018408:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801840c:	4323      	orrs	r3, r4
 801840e:	d03d      	beq.n	801848c <scalbn+0x94>
 8018410:	4b35      	ldr	r3, [pc, #212]	@ (80184e8 <scalbn+0xf0>)
 8018412:	4620      	mov	r0, r4
 8018414:	4629      	mov	r1, r5
 8018416:	2200      	movs	r2, #0
 8018418:	f7e8 f8c6 	bl	80005a8 <__aeabi_dmul>
 801841c:	4b33      	ldr	r3, [pc, #204]	@ (80184ec <scalbn+0xf4>)
 801841e:	429e      	cmp	r6, r3
 8018420:	4604      	mov	r4, r0
 8018422:	460d      	mov	r5, r1
 8018424:	da0f      	bge.n	8018446 <scalbn+0x4e>
 8018426:	a328      	add	r3, pc, #160	@ (adr r3, 80184c8 <scalbn+0xd0>)
 8018428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801842c:	e01e      	b.n	801846c <scalbn+0x74>
 801842e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8018432:	4291      	cmp	r1, r2
 8018434:	d10b      	bne.n	801844e <scalbn+0x56>
 8018436:	4622      	mov	r2, r4
 8018438:	4620      	mov	r0, r4
 801843a:	4629      	mov	r1, r5
 801843c:	f7e7 fefe 	bl	800023c <__adddf3>
 8018440:	4604      	mov	r4, r0
 8018442:	460d      	mov	r5, r1
 8018444:	e022      	b.n	801848c <scalbn+0x94>
 8018446:	460b      	mov	r3, r1
 8018448:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801844c:	3936      	subs	r1, #54	@ 0x36
 801844e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8018452:	4296      	cmp	r6, r2
 8018454:	dd0d      	ble.n	8018472 <scalbn+0x7a>
 8018456:	2d00      	cmp	r5, #0
 8018458:	a11d      	add	r1, pc, #116	@ (adr r1, 80184d0 <scalbn+0xd8>)
 801845a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801845e:	da02      	bge.n	8018466 <scalbn+0x6e>
 8018460:	a11d      	add	r1, pc, #116	@ (adr r1, 80184d8 <scalbn+0xe0>)
 8018462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018466:	a31a      	add	r3, pc, #104	@ (adr r3, 80184d0 <scalbn+0xd8>)
 8018468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801846c:	f7e8 f89c 	bl	80005a8 <__aeabi_dmul>
 8018470:	e7e6      	b.n	8018440 <scalbn+0x48>
 8018472:	1872      	adds	r2, r6, r1
 8018474:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8018478:	428a      	cmp	r2, r1
 801847a:	dcec      	bgt.n	8018456 <scalbn+0x5e>
 801847c:	2a00      	cmp	r2, #0
 801847e:	dd08      	ble.n	8018492 <scalbn+0x9a>
 8018480:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018484:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8018488:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801848c:	ec45 4b10 	vmov	d0, r4, r5
 8018490:	bd70      	pop	{r4, r5, r6, pc}
 8018492:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8018496:	da08      	bge.n	80184aa <scalbn+0xb2>
 8018498:	2d00      	cmp	r5, #0
 801849a:	a10b      	add	r1, pc, #44	@ (adr r1, 80184c8 <scalbn+0xd0>)
 801849c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184a0:	dac1      	bge.n	8018426 <scalbn+0x2e>
 80184a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80184e0 <scalbn+0xe8>)
 80184a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80184a8:	e7bd      	b.n	8018426 <scalbn+0x2e>
 80184aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80184ae:	3236      	adds	r2, #54	@ 0x36
 80184b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80184b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80184b8:	4620      	mov	r0, r4
 80184ba:	4b0d      	ldr	r3, [pc, #52]	@ (80184f0 <scalbn+0xf8>)
 80184bc:	4629      	mov	r1, r5
 80184be:	2200      	movs	r2, #0
 80184c0:	e7d4      	b.n	801846c <scalbn+0x74>
 80184c2:	bf00      	nop
 80184c4:	f3af 8000 	nop.w
 80184c8:	c2f8f359 	.word	0xc2f8f359
 80184cc:	01a56e1f 	.word	0x01a56e1f
 80184d0:	8800759c 	.word	0x8800759c
 80184d4:	7e37e43c 	.word	0x7e37e43c
 80184d8:	8800759c 	.word	0x8800759c
 80184dc:	fe37e43c 	.word	0xfe37e43c
 80184e0:	c2f8f359 	.word	0xc2f8f359
 80184e4:	81a56e1f 	.word	0x81a56e1f
 80184e8:	43500000 	.word	0x43500000
 80184ec:	ffff3cb0 	.word	0xffff3cb0
 80184f0:	3c900000 	.word	0x3c900000
 80184f4:	00000000 	.word	0x00000000

080184f8 <floor>:
 80184f8:	ec51 0b10 	vmov	r0, r1, d0
 80184fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018504:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8018508:	2e13      	cmp	r6, #19
 801850a:	460c      	mov	r4, r1
 801850c:	4605      	mov	r5, r0
 801850e:	4680      	mov	r8, r0
 8018510:	dc34      	bgt.n	801857c <floor+0x84>
 8018512:	2e00      	cmp	r6, #0
 8018514:	da17      	bge.n	8018546 <floor+0x4e>
 8018516:	a332      	add	r3, pc, #200	@ (adr r3, 80185e0 <floor+0xe8>)
 8018518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801851c:	f7e7 fe8e 	bl	800023c <__adddf3>
 8018520:	2200      	movs	r2, #0
 8018522:	2300      	movs	r3, #0
 8018524:	f7e8 fad0 	bl	8000ac8 <__aeabi_dcmpgt>
 8018528:	b150      	cbz	r0, 8018540 <floor+0x48>
 801852a:	2c00      	cmp	r4, #0
 801852c:	da55      	bge.n	80185da <floor+0xe2>
 801852e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8018532:	432c      	orrs	r4, r5
 8018534:	2500      	movs	r5, #0
 8018536:	42ac      	cmp	r4, r5
 8018538:	4c2b      	ldr	r4, [pc, #172]	@ (80185e8 <floor+0xf0>)
 801853a:	bf08      	it	eq
 801853c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8018540:	4621      	mov	r1, r4
 8018542:	4628      	mov	r0, r5
 8018544:	e023      	b.n	801858e <floor+0x96>
 8018546:	4f29      	ldr	r7, [pc, #164]	@ (80185ec <floor+0xf4>)
 8018548:	4137      	asrs	r7, r6
 801854a:	ea01 0307 	and.w	r3, r1, r7
 801854e:	4303      	orrs	r3, r0
 8018550:	d01d      	beq.n	801858e <floor+0x96>
 8018552:	a323      	add	r3, pc, #140	@ (adr r3, 80185e0 <floor+0xe8>)
 8018554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018558:	f7e7 fe70 	bl	800023c <__adddf3>
 801855c:	2200      	movs	r2, #0
 801855e:	2300      	movs	r3, #0
 8018560:	f7e8 fab2 	bl	8000ac8 <__aeabi_dcmpgt>
 8018564:	2800      	cmp	r0, #0
 8018566:	d0eb      	beq.n	8018540 <floor+0x48>
 8018568:	2c00      	cmp	r4, #0
 801856a:	bfbe      	ittt	lt
 801856c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8018570:	4133      	asrlt	r3, r6
 8018572:	18e4      	addlt	r4, r4, r3
 8018574:	ea24 0407 	bic.w	r4, r4, r7
 8018578:	2500      	movs	r5, #0
 801857a:	e7e1      	b.n	8018540 <floor+0x48>
 801857c:	2e33      	cmp	r6, #51	@ 0x33
 801857e:	dd0a      	ble.n	8018596 <floor+0x9e>
 8018580:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8018584:	d103      	bne.n	801858e <floor+0x96>
 8018586:	4602      	mov	r2, r0
 8018588:	460b      	mov	r3, r1
 801858a:	f7e7 fe57 	bl	800023c <__adddf3>
 801858e:	ec41 0b10 	vmov	d0, r0, r1
 8018592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018596:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 801859a:	f04f 37ff 	mov.w	r7, #4294967295
 801859e:	40df      	lsrs	r7, r3
 80185a0:	4207      	tst	r7, r0
 80185a2:	d0f4      	beq.n	801858e <floor+0x96>
 80185a4:	a30e      	add	r3, pc, #56	@ (adr r3, 80185e0 <floor+0xe8>)
 80185a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80185aa:	f7e7 fe47 	bl	800023c <__adddf3>
 80185ae:	2200      	movs	r2, #0
 80185b0:	2300      	movs	r3, #0
 80185b2:	f7e8 fa89 	bl	8000ac8 <__aeabi_dcmpgt>
 80185b6:	2800      	cmp	r0, #0
 80185b8:	d0c2      	beq.n	8018540 <floor+0x48>
 80185ba:	2c00      	cmp	r4, #0
 80185bc:	da0a      	bge.n	80185d4 <floor+0xdc>
 80185be:	2e14      	cmp	r6, #20
 80185c0:	d101      	bne.n	80185c6 <floor+0xce>
 80185c2:	3401      	adds	r4, #1
 80185c4:	e006      	b.n	80185d4 <floor+0xdc>
 80185c6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 80185ca:	2301      	movs	r3, #1
 80185cc:	40b3      	lsls	r3, r6
 80185ce:	441d      	add	r5, r3
 80185d0:	4545      	cmp	r5, r8
 80185d2:	d3f6      	bcc.n	80185c2 <floor+0xca>
 80185d4:	ea25 0507 	bic.w	r5, r5, r7
 80185d8:	e7b2      	b.n	8018540 <floor+0x48>
 80185da:	2500      	movs	r5, #0
 80185dc:	462c      	mov	r4, r5
 80185de:	e7af      	b.n	8018540 <floor+0x48>
 80185e0:	8800759c 	.word	0x8800759c
 80185e4:	7e37e43c 	.word	0x7e37e43c
 80185e8:	bff00000 	.word	0xbff00000
 80185ec:	000fffff 	.word	0x000fffff

080185f0 <_init>:
 80185f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185f2:	bf00      	nop
 80185f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80185f6:	bc08      	pop	{r3}
 80185f8:	469e      	mov	lr, r3
 80185fa:	4770      	bx	lr

080185fc <_fini>:
 80185fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80185fe:	bf00      	nop
 8018600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018602:	bc08      	pop	{r3}
 8018604:	469e      	mov	lr, r3
 8018606:	4770      	bx	lr
